{
    "code_examples": [
        {
            "input": "public class EmailService {\n    public void sendEmail(String message) {\n        System.out.println(\"Sending email: \" + message);\n    }\n}\n\npublic class NotificationManager {\n    private EmailService emailService;\n    \n    public NotificationManager() {\n        this.emailService = new EmailService();\n    }\n    \n    public void sendNotification(String message) {\n        emailService.sendEmail(message);\n    }\n}",
            "output": "public interface INotificationService {\n    void sendNotification(String message);\n}\n\npublic class EmailService implements INotificationService {\n    public void sendNotification(String message) {\n        System.out.println(\"Sending email: \" + message);\n    }\n}\n\npublic class NotificationManager {\n    private INotificationService notificationService;\n    \n    public NotificationManager(INotificationService notificationService) {\n        this.notificationService = notificationService;\n    }\n    \n    public void sendNotification(String message) {\n        notificationService.sendNotification(message);\n    }\n}",
            "level": "EASY",
            "language": "JAVA",
            "violation": "DIP"
        },
        {
            "input": "public class MySQLDatabase {\n    public void save(String data) {\n        System.out.println(\"Saving to MySQL: \" + data);\n    }\n}\n\npublic class UserService {\n    private MySQLDatabase database;\n    \n    public UserService() {\n        this.database = new MySQLDatabase();\n    }\n    \n    public void saveUser(String userData) {\n        database.save(userData);\n    }\n}",
            "output": "public interface IDatabase {\n    void save(String data);\n}\n\npublic class MySQLDatabase implements IDatabase {\n    public void save(String data) {\n        System.out.println(\"Saving to MySQL: \" + data);\n    }\n}\n\npublic class UserService {\n    private IDatabase database;\n    \n    public UserService(IDatabase database) {\n        this.database = database;\n    }\n    \n    public void saveUser(String userData) {\n        database.save(userData);\n    }\n}",
            "level": "EASY",
            "language": "JAVA",
            "violation": "DIP"
        },
        {
            "input": "public class FileLogger {\n    public void log(String message) {\n        System.out.println(\"Writing to file: \" + message);\n    }\n}\n\npublic class OrderProcessor {\n    private FileLogger logger;\n    \n    public OrderProcessor() {\n        this.logger = new FileLogger();\n    }\n    \n    public void processOrder(String order) {\n        System.out.println(\"Processing order: \" + order);\n        logger.log(\"Order processed: \" + order);\n    }\n}",
            "output": "public interface ILogger {\n    void log(String message);\n}\n\npublic class FileLogger implements ILogger {\n    public void log(String message) {\n        System.out.println(\"Writing to file: \" + message);\n    }\n}\n\npublic class OrderProcessor {\n    private ILogger logger;\n    \n    public OrderProcessor(ILogger logger) {\n        this.logger = logger;\n    }\n    \n    public void processOrder(String order) {\n        System.out.println(\"Processing order: \" + order);\n        logger.log(\"Order processed: \" + order);\n    }\n}",
            "level": "EASY",
            "language": "JAVA",
            "violation": "DIP"
        },
        {
            "input": "public class SMSGateway {\n    public void sendSMS(String phoneNumber, String message) {\n        System.out.println(\"SMS sent to \" + phoneNumber + \": \" + message);\n    }\n}\n\npublic class AlertSystem {\n    private SMSGateway smsGateway;\n    \n    public AlertSystem() {\n        this.smsGateway = new SMSGateway();\n    }\n    \n    public void sendAlert(String phoneNumber, String alert) {\n        smsGateway.sendSMS(phoneNumber, alert);\n    }\n}",
            "output": "public interface IMessagingService {\n    void sendMessage(String recipient, String message);\n}\n\npublic class SMSGateway implements IMessagingService {\n    public void sendMessage(String phoneNumber, String message) {\n        System.out.println(\"SMS sent to \" + phoneNumber + \": \" + message);\n    }\n}\n\npublic class AlertSystem {\n    private IMessagingService messagingService;\n    \n    public AlertSystem(IMessagingService messagingService) {\n        this.messagingService = messagingService;\n    }\n    \n    public void sendAlert(String recipient, String alert) {\n        messagingService.sendMessage(recipient, alert);\n    }\n}",
            "level": "EASY",
            "language": "JAVA",
            "violation": "DIP"
        },
        {
            "input": "class EmailSender:\n    def send_email(self, message):\n        print(f\"Sending email: {message}\")\n\nclass NotificationService:\n    def __init__(self):\n        self.email_sender = EmailSender()\n    \n    def notify(self, message):\n        self.email_sender.send_email(message)",
            "output": "from abc import ABC, abstractmethod\n\nclass INotificationSender(ABC):\n    @abstractmethod\n    def send_notification(self, message):\n        pass\n\nclass EmailSender(INotificationSender):\n    def send_notification(self, message):\n        print(f\"Sending email: {message}\")\n\nclass NotificationService:\n    def __init__(self, notification_sender: INotificationSender):\n        self.notification_sender = notification_sender\n    \n    def notify(self, message):\n        self.notification_sender.send_notification(message)",
            "level": "EASY",
            "language": "PYTHON",
            "violation": "DIP"
        },
        {
            "input": "class FileStorage:\n    def save(self, data):\n        print(f\"Saving to file: {data}\")\n\nclass DocumentManager:\n    def __init__(self):\n        self.storage = FileStorage()\n    \n    def save_document(self, document):\n        self.storage.save(document)",
            "output": "from abc import ABC, abstractmethod\n\nclass IStorage(ABC):\n    @abstractmethod\n    def save(self, data):\n        pass\n\nclass FileStorage(IStorage):\n    def save(self, data):\n        print(f\"Saving to file: {data}\")\n\nclass DocumentManager:\n    def __init__(self, storage: IStorage):\n        self.storage = storage\n    \n    def save_document(self, document):\n        self.storage.save(document)",
            "level": "EASY",
            "language": "PYTHON",
            "violation": "DIP"
        },
        {
            "input": "class ConsoleLogger:\n    def log(self, message):\n        print(f\"Console: {message}\")\n\nclass PaymentProcessor:\n    def __init__(self):\n        self.logger = ConsoleLogger()\n    \n    def process_payment(self, amount):\n        print(f\"Processing payment: ${amount}\")\n        self.logger.log(f\"Payment processed: ${amount}\")",
            "output": "from abc import ABC, abstractmethod\n\nclass ILogger(ABC):\n    @abstractmethod\n    def log(self, message):\n        pass\n\nclass ConsoleLogger(ILogger):\n    def log(self, message):\n        print(f\"Console: {message}\")\n\nclass PaymentProcessor:\n    def __init__(self, logger: ILogger):\n        self.logger = logger\n    \n    def process_payment(self, amount):\n        print(f\"Processing payment: ${amount}\")\n        self.logger.log(f\"Payment processed: ${amount}\")",
            "level": "EASY",
            "language": "PYTHON",
            "violation": "DIP"
        },
        {
            "input": "class DatabaseConnection:\n    def execute_query(self, query):\n        print(f\"Executing: {query}\")\n\nclass UserRepository:\n    def __init__(self):\n        self.db = DatabaseConnection()\n    \n    def find_user(self, user_id):\n        query = f\"SELECT * FROM users WHERE id = {user_id}\"\n        return self.db.execute_query(query)",
            "output": "from abc import ABC, abstractmethod\n\nclass IDataConnection(ABC):\n    @abstractmethod\n    def execute_query(self, query):\n        pass\n\nclass DatabaseConnection(IDataConnection):\n    def execute_query(self, query):\n        print(f\"Executing: {query}\")\n\nclass UserRepository:\n    def __init__(self, data_connection: IDataConnection):\n        self.db = data_connection\n    \n    def find_user(self, user_id):\n        query = f\"SELECT * FROM users WHERE id = {user_id}\"\n        return self.db.execute_query(query)",
            "level": "EASY",
            "language": "PYTHON",
            "violation": "DIP"
        },
        {
            "input": "class EmailService {\n    fun sendEmail(message: String) {\n        println(\"Sending email: $message\")\n    }\n}\n\nclass OrderService {\n    private val emailService = EmailService()\n    \n    fun completeOrder(orderDetails: String) {\n        println(\"Order completed: $orderDetails\")\n        emailService.sendEmail(\"Order confirmation: $orderDetails\")\n    }\n}",
            "output": "interface INotificationService {\n    fun sendNotification(message: String)\n}\n\nclass EmailService : INotificationService {\n    override fun sendNotification(message: String) {\n        println(\"Sending email: $message\")\n    }\n}\n\nclass OrderService(private val notificationService: INotificationService) {\n    fun completeOrder(orderDetails: String) {\n        println(\"Order completed: $orderDetails\")\n        notificationService.sendNotification(\"Order confirmation: $orderDetails\")\n    }\n}",
            "level": "EASY",
            "language": "KOTLIN",
            "violation": "DIP"
        },
        {
            "input": "class JsonSerializer {\n    fun serialize(data: Any): String {\n        return \"JSON: $data\"\n    }\n}\n\nclass DataExporter {\n    private val serializer = JsonSerializer()\n    \n    fun exportData(data: Any): String {\n        return serializer.serialize(data)\n    }\n}",
            "output": "interface ISerializer {\n    fun serialize(data: Any): String\n}\n\nclass JsonSerializer : ISerializer {\n    override fun serialize(data: Any): String {\n        return \"JSON: $data\"\n    }\n}\n\nclass DataExporter(private val serializer: ISerializer) {\n    fun exportData(data: Any): String {\n        return serializer.serialize(data)\n    }\n}",
            "level": "EASY",
            "language": "KOTLIN",
            "violation": "DIP"
        },
        {
            "input": "class FileReader {\n    fun readFile(filename: String): String {\n        return \"Content of $filename\"\n    }\n}\n\nclass ConfigurationManager {\n    private val fileReader = FileReader()\n    \n    fun loadConfiguration(configFile: String): String {\n        return fileReader.readFile(configFile)\n    }\n}",
            "output": "interface IFileReader {\n    fun readFile(filename: String): String\n}\n\nclass FileReader : IFileReader {\n    override fun readFile(filename: String): String {\n        return \"Content of $filename\"\n    }\n}\n\nclass ConfigurationManager(private val fileReader: IFileReader) {\n    fun loadConfiguration(configFile: String): String {\n        return fileReader.readFile(configFile)\n    }\n}",
            "level": "EASY",
            "language": "KOTLIN",
            "violation": "DIP"
        },
        {
            "input": "class HttpClient {\n    fun get(url: String): String {\n        return \"Response from $url\"\n    }\n}\n\nclass WeatherService {\n    private val httpClient = HttpClient()\n    \n    fun getWeather(city: String): String {\n        val url = \"https://api.weather.com/$city\"\n        return httpClient.get(url)\n    }\n}",
            "output": "interface IHttpClient {\n    fun get(url: String): String\n}\n\nclass HttpClient : IHttpClient {\n    override fun get(url: String): String {\n        return \"Response from $url\"\n    }\n}\n\nclass WeatherService(private val httpClient: IHttpClient) {\n    fun getWeather(city: String): String {\n        val url = \"https://api.weather.com/$city\"\n        return httpClient.get(url)\n    }\n}",
            "level": "EASY",
            "language": "KOTLIN",
            "violation": "DIP"
        },
        {
            "input": "public class EmailClient\n{\n    public void SendEmail(string message)\n    {\n        Console.WriteLine($\"Sending email: {message}\");\n    }\n}\n\npublic class CustomerService\n{\n    private EmailClient _emailClient;\n    \n    public CustomerService()\n    {\n        _emailClient = new EmailClient();\n    }\n    \n    public void NotifyCustomer(string message)\n    {\n        _emailClient.SendEmail(message);\n    }\n}",
            "output": "public interface INotificationSender\n{\n    void SendNotification(string message);\n}\n\npublic class EmailClient : INotificationSender\n{\n    public void SendNotification(string message)\n    {\n        Console.WriteLine($\"Sending email: {message}\");\n    }\n}\n\npublic class CustomerService\n{\n    private readonly INotificationSender _notificationSender;\n    \n    public CustomerService(INotificationSender notificationSender)\n    {\n        _notificationSender = notificationSender;\n    }\n    \n    public void NotifyCustomer(string message)\n    {\n        _notificationSender.SendNotification(message);\n    }\n}",
            "level": "EASY",
            "language": "C#",
            "violation": "DIP"
        },
        {
            "input": "public class SqlDatabase\n{\n    public void Save(string data)\n    {\n        Console.WriteLine($\"Saving to SQL database: {data}\");\n    }\n}\n\npublic class ProductService\n{\n    private SqlDatabase _database;\n    \n    public ProductService()\n    {\n        _database = new SqlDatabase();\n    }\n    \n    public void SaveProduct(string productData)\n    {\n        _database.Save(productData);\n    }\n}",
            "output": "public interface IDatabase\n{\n    void Save(string data);\n}\n\npublic class SqlDatabase : IDatabase\n{\n    public void Save(string data)\n    {\n        Console.WriteLine($\"Saving to SQL database: {data}\");\n    }\n}\n\npublic class ProductService\n{\n    private readonly IDatabase _database;\n    \n    public ProductService(IDatabase database)\n    {\n        _database = database;\n    }\n    \n    public void SaveProduct(string productData)\n    {\n        _database.Save(productData);\n    }\n}",
            "level": "EASY",
            "language": "C#",
            "violation": "DIP"
        },
        {
            "input": "public class TextFileLogger\n{\n    public void WriteLog(string message)\n    {\n        Console.WriteLine($\"Writing to log file: {message}\");\n    }\n}\n\npublic class InventoryManager\n{\n    private TextFileLogger _logger;\n    \n    public InventoryManager()\n    {\n        _logger = new TextFileLogger();\n    }\n    \n    public void UpdateInventory(string item, int quantity)\n    {\n        Console.WriteLine($\"Updating inventory: {item} - {quantity}\");\n        _logger.WriteLog($\"Inventory updated: {item} - {quantity}\");\n    }\n}",
            "output": "public interface ILogger\n{\n    void WriteLog(string message);\n}\n\npublic class TextFileLogger : ILogger\n{\n    public void WriteLog(string message)\n    {\n        Console.WriteLine($\"Writing to log file: {message}\");\n    }\n}\n\npublic class InventoryManager\n{\n    private readonly ILogger _logger;\n    \n    public InventoryManager(ILogger logger)\n    {\n        _logger = logger;\n    }\n    \n    public void UpdateInventory(string item, int quantity)\n    {\n        Console.WriteLine($\"Updating inventory: {item} - {quantity}\");\n        _logger.WriteLog($\"Inventory updated: {item} - {quantity}\");\n    }\n}",
            "level": "EASY",
            "language": "C#",
            "violation": "DIP"
        },
        {
            "input": "public class PayPalGateway\n{\n    public void ProcessPayment(decimal amount)\n    {\n        Console.WriteLine($\"Processing PayPal payment: ${amount}\");\n    }\n}\n\npublic class ShoppingCart\n{\n    private PayPalGateway _paymentGateway;\n    \n    public ShoppingCart()\n    {\n        _paymentGateway = new PayPalGateway();\n    }\n    \n    public void Checkout(decimal totalAmount)\n    {\n        Console.WriteLine($\"Checkout initiated for ${totalAmount}\");\n        _paymentGateway.ProcessPayment(totalAmount);\n    }\n}",
            "output": "public interface IPaymentGateway\n{\n    void ProcessPayment(decimal amount);\n}\n\npublic class PayPalGateway : IPaymentGateway\n{\n    public void ProcessPayment(decimal amount)\n    {\n        Console.WriteLine($\"Processing PayPal payment: ${amount}\");\n    }\n}\n\npublic class ShoppingCart\n{\n    private readonly IPaymentGateway _paymentGateway;\n    \n    public ShoppingCart(IPaymentGateway paymentGateway)\n    {\n        _paymentGateway = paymentGateway;\n    }\n    \n    public void Checkout(decimal totalAmount)\n    {\n        Console.WriteLine($\"Checkout initiated for ${totalAmount}\");\n        _paymentGateway.ProcessPayment(totalAmount);\n    }\n}",
            "level": "EASY",
            "language": "C#",
            "violation": "DIP"
        },
        {
            "input": "public class OrderService {\n    private MySQLDatabase database;\n    private EmailService emailService;\n    \n    public OrderService() {\n        this.database = new MySQLDatabase();\n        this.emailService = new EmailService();\n    }\n    \n    public void processOrder(Order order) {\n        database.save(order);\n        emailService.sendConfirmation(order.getCustomerEmail());\n    }\n}",
            "output": "public interface Database {\n    void save(Order order);\n}\n\npublic interface NotificationService {\n    void sendConfirmation(String email);\n}\n\npublic class OrderService {\n    private final Database database;\n    private final NotificationService notificationService;\n    \n    public OrderService(Database database, NotificationService notificationService) {\n        this.database = database;\n        this.notificationService = notificationService;\n    }\n    \n    public void processOrder(Order order) {\n        database.save(order);\n        notificationService.sendConfirmation(order.getCustomerEmail());\n    }\n}\n\npublic class MySQLDatabase implements Database {\n    @Override\n    public void save(Order order) {\n        // MySQL implementation\n    }\n}\n\npublic class EmailService implements NotificationService {\n    @Override\n    public void sendConfirmation(String email) {\n        // Email implementation\n    }\n}",
            "level": "MODERATE",
            "language": "JAVA",
            "violation": "DIP"
        },
        {
            "input": "public class PaymentProcessor {\n    private StripePaymentGateway stripeGateway;\n    private FileLogger logger;\n    \n    public PaymentProcessor() {\n        this.stripeGateway = new StripePaymentGateway();\n        this.logger = new FileLogger(\"/var/log/payments.log\");\n    }\n    \n    public boolean processPayment(decimal amount, string cardToken) {\n        try {\n            bool result = stripeGateway.ChargeCard(amount, cardToken);\n            logger.Log($\"Payment processed: {amount}, Success: {result}\");\n            return result;\n        }\n        catch (Exception ex) {\n            logger.Log($\"Payment failed: {ex.Message}\");\n            return false;\n        }\n    }\n}",
            "output": "public interface IPaymentGateway {\n    bool ChargeCard(decimal amount, string cardToken);\n}\n\npublic interface ILogger {\n    void Log(string message);\n}\n\npublic class PaymentProcessor {\n    private readonly IPaymentGateway paymentGateway;\n    private readonly ILogger logger;\n    \n    public PaymentProcessor(IPaymentGateway paymentGateway, ILogger logger) {\n        this.paymentGateway = paymentGateway;\n        this.logger = logger;\n    }\n    \n    public bool ProcessPayment(decimal amount, string cardToken) {\n        try {\n            bool result = paymentGateway.ChargeCard(amount, cardToken);\n            logger.Log($\"Payment processed: {amount}, Success: {result}\");\n            return result;\n        }\n        catch (Exception ex) {\n            logger.Log($\"Payment failed: {ex.Message}\");\n            return false;\n        }\n    }\n}\n\npublic class StripePaymentGateway : IPaymentGateway {\n    public bool ChargeCard(decimal amount, string cardToken) {\n        // Stripe implementation\n        return true;\n    }\n}\n\npublic class FileLogger : ILogger {\n    private readonly string logPath;\n    \n    public FileLogger(string logPath) {\n        this.logPath = logPath;\n    }\n    \n    public void Log(string message) {\n        // File logging implementation\n    }\n}",
            "level": "MODERATE",
            "language": "C#",
            "violation": "DIP"
        },
        {
            "input": "class UserService {\n    private val mongoRepository = MongoUserRepository()\n    private val redisCache = RedisCache()\n    private val twilioSms = TwilioSmsService()\n    \n    fun createUser(userData: UserData): User {\n        val user = User(userData)\n        mongoRepository.save(user)\n        redisCache.store(user.id, user)\n        twilioSms.sendWelcomeSms(user.phoneNumber)\n        return user\n    }\n    \n    fun getUserById(id: String): User? {\n        return redisCache.get(id) ?: mongoRepository.findById(id)\n    }\n    \n    fun updateUserProfile(id: String, updates: Map<String, Any>) {\n        val user = mongoRepository.findById(id)\n        user?.let {\n            val updatedUser = it.copy(updates)\n            mongoRepository.update(updatedUser)\n            redisCache.invalidate(id)\n        }\n    }\n}",
            "output": "interface UserRepository {\n    fun save(user: User)\n    fun findById(id: String): User?\n    fun update(user: User)\n}\n\ninterface CacheService {\n    fun store(key: String, value: User)\n    fun get(key: String): User?\n    fun invalidate(key: String)\n}\n\ninterface SmsService {\n    fun sendWelcomeSms(phoneNumber: String)\n}\n\nclass UserService(\n    private val userRepository: UserRepository,\n    private val cacheService: CacheService,\n    private val smsService: SmsService\n) {\n    fun createUser(userData: UserData): User {\n        val user = User(userData)\n        userRepository.save(user)\n        cacheService.store(user.id, user)\n        smsService.sendWelcomeSms(user.phoneNumber)\n        return user\n    }\n    \n    fun getUserById(id: String): User? {\n        return cacheService.get(id) ?: userRepository.findById(id)\n    }\n    \n    fun updateUserProfile(id: String, updates: Map<String, Any>) {\n        val user = userRepository.findById(id)\n        user?.let {\n            val updatedUser = it.copy(updates)\n            userRepository.update(updatedUser)\n            cacheService.invalidate(id)\n        }\n    }\n}\n\nclass MongoUserRepository : UserRepository {\n    override fun save(user: User) { /* MongoDB implementation */ }\n    override fun findById(id: String): User? { /* MongoDB implementation */ return null }\n    override fun update(user: User) { /* MongoDB implementation */ }\n}\n\nclass RedisCache : CacheService {\n    override fun store(key: String, value: User) { /* Redis implementation */ }\n    override fun get(key: String): User? { /* Redis implementation */ return null }\n    override fun invalidate(key: String) { /* Redis implementation */ }\n}\n\nclass TwilioSmsService : SmsService {\n    override fun sendWelcomeSms(phoneNumber: String) { /* Twilio implementation */ }\n}",
            "level": "MODERATE",
            "language": "KOTLIN",
            "violation": "DIP"
        },
        {
            "input": "class ReportGenerator:\n    def __init__(self):\n        self.pdf_generator = PDFGenerator()\n        self.excel_exporter = ExcelExporter()\n        self.ftp_uploader = FTPUploader('reports.company.com', 'username', 'password')\n        \n    def generate_sales_report(self, sales_data):\n        # Generate PDF report\n        pdf_content = self.pdf_generator.create_pdf(sales_data)\n        \n        # Generate Excel report\n        excel_content = self.excel_exporter.create_excel(sales_data)\n        \n        # Upload both files\n        self.ftp_uploader.upload_file('sales_report.pdf', pdf_content)\n        self.ftp_uploader.upload_file('sales_report.xlsx', excel_content)\n        \n        return {'pdf': pdf_content, 'excel': excel_content}\n    \n    def generate_inventory_report(self, inventory_data):\n        pdf_content = self.pdf_generator.create_pdf(inventory_data)\n        self.ftp_uploader.upload_file('inventory_report.pdf', pdf_content)\n        return pdf_content",
            "output": "from abc import ABC, abstractmethod\n\nclass DocumentGenerator(ABC):\n    @abstractmethod\n    def generate(self, data):\n        pass\n\nclass FileUploader(ABC):\n    @abstractmethod\n    def upload(self, filename, content):\n        pass\n\nclass ReportGenerator:\n    def __init__(self, pdf_generator: DocumentGenerator, excel_generator: DocumentGenerator, uploader: FileUploader):\n        self.pdf_generator = pdf_generator\n        self.excel_generator = excel_generator\n        self.uploader = uploader\n        \n    def generate_sales_report(self, sales_data):\n        # Generate PDF report\n        pdf_content = self.pdf_generator.generate(sales_data)\n        \n        # Generate Excel report\n        excel_content = self.excel_generator.generate(sales_data)\n        \n        # Upload both files\n        self.uploader.upload('sales_report.pdf', pdf_content)\n        self.uploader.upload('sales_report.xlsx', excel_content)\n        \n        return {'pdf': pdf_content, 'excel': excel_content}\n    \n    def generate_inventory_report(self, inventory_data):\n        pdf_content = self.pdf_generator.generate(inventory_data)\n        self.uploader.upload('inventory_report.pdf', pdf_content)\n        return pdf_content\n\nclass PDFGenerator(DocumentGenerator):\n    def generate(self, data):\n        # PDF generation implementation\n        return f\"PDF content for {data}\"\n\nclass ExcelGenerator(DocumentGenerator):\n    def generate(self, data):\n        # Excel generation implementation\n        return f\"Excel content for {data}\"\n\nclass FTPUploader(FileUploader):\n    def __init__(self, host, username, password):\n        self.host = host\n        self.username = username\n        self.password = password\n    \n    def upload(self, filename, content):\n        # FTP upload implementation\n        print(f\"Uploading {filename} to {self.host}\")",
            "level": "MODERATE",
            "language": "PYTHON",
            "violation": "DIP"
        },
        {
            "input": "public class InventoryService {\n    private OracleDatabase database;\n    private SlackNotifier notifier;\n    private AmazonS3Storage storage;\n    \n    public InventoryService() {\n        this.database = new OracleDatabase(\"jdbc:oracle:thin:@localhost:1521:xe\");\n        this.notifier = new SlackNotifier(\"#inventory-alerts\");\n        this.storage = new AmazonS3Storage(\"inventory-bucket\", \"us-west-2\");\n    }\n    \n    public void updateStock(String productId, int quantity) {\n        Product product = database.getProduct(productId);\n        product.setQuantity(quantity);\n        database.updateProduct(product);\n        \n        if (quantity < 10) {\n            notifier.sendLowStockAlert(product.getName(), quantity);\n        }\n        \n        String inventoryReport = generateReport(product);\n        storage.uploadFile(\"reports/\" + productId + \".json\", inventoryReport);\n    }\n    \n    private String generateReport(Product product) {\n        return \"{\\\"productId\\\":\\\"\" + product.getId() + \"\\\",\\\"quantity\\\":\" + product.getQuantity() + \"}\";\n    }\n}",
            "output": "public interface ProductRepository {\n    Product getProduct(String productId);\n    void updateProduct(Product product);\n}\n\npublic interface AlertService {\n    void sendLowStockAlert(String productName, int quantity);\n}\n\npublic interface CloudStorage {\n    void uploadFile(String path, String content);\n}\n\npublic class InventoryService {\n    private final ProductRepository repository;\n    private final AlertService alertService;\n    private final CloudStorage storage;\n    \n    public InventoryService(ProductRepository repository, AlertService alertService, CloudStorage storage) {\n        this.repository = repository;\n        this.alertService = alertService;\n        this.storage = storage;\n    }\n    \n    public void updateStock(String productId, int quantity) {\n        Product product = repository.getProduct(productId);\n        product.setQuantity(quantity);\n        repository.updateProduct(product);\n        \n        if (quantity < 10) {\n            alertService.sendLowStockAlert(product.getName(), quantity);\n        }\n        \n        String inventoryReport = generateReport(product);\n        storage.uploadFile(\"reports/\" + productId + \".json\", inventoryReport);\n    }\n    \n    private String generateReport(Product product) {\n        return \"{\\\"productId\\\":\\\"\" + product.getId() + \"\\\",\\\"quantity\\\":\" + product.getQuantity() + \"}\";\n    }\n}\n\npublic class OracleProductRepository implements ProductRepository {\n    private final String connectionString;\n    \n    public OracleProductRepository(String connectionString) {\n        this.connectionString = connectionString;\n    }\n    \n    @Override\n    public Product getProduct(String productId) {\n        // Oracle implementation\n        return new Product();\n    }\n    \n    @Override\n    public void updateProduct(Product product) {\n        // Oracle implementation\n    }\n}\n\npublic class SlackAlertService implements AlertService {\n    private final String channel;\n    \n    public SlackAlertService(String channel) {\n        this.channel = channel;\n    }\n    \n    @Override\n    public void sendLowStockAlert(String productName, int quantity) {\n        // Slack implementation\n    }\n}\n\npublic class AmazonS3Storage implements CloudStorage {\n    private final String bucket;\n    private final String region;\n    \n    public AmazonS3Storage(String bucket, String region) {\n        this.bucket = bucket;\n        this.region = region;\n    }\n    \n    @Override\n    public void uploadFile(String path, String content) {\n        // S3 implementation\n    }\n}",
            "level": "MODERATE",
            "language": "JAVA",
            "violation": "DIP"
        },
        {
            "input": "public class CustomerService {\n    private SqlServerCustomerRepository customerRepository;\n    private SendGridEmailService emailService;\n    private TwilioSmsService smsService;\n    private RedisCacheService cacheService;\n    \n    public CustomerService() {\n        this.customerRepository = new SqlServerCustomerRepository();\n        this.emailService = new SendGridEmailService();\n        this.smsService = new TwilioSmsService();\n        this.cacheService = new RedisCacheService();\n    }\n    \n    public async Task<Customer> GetCustomerAsync(int customerId) {\n        var cachedCustomer = cacheService.Get<Customer>($\"customer_{customerId}\");\n        if (cachedCustomer != null) {\n            return cachedCustomer;\n        }\n        \n        var customer = await customerRepository.GetByIdAsync(customerId);\n        cacheService.Set($\"customer_{customerId}\", customer, TimeSpan.FromMinutes(30));\n        return customer;\n    }\n    \n    public async Task SendPromotionAsync(int customerId, string promotionMessage) {\n        var customer = await GetCustomerAsync(customerId);\n        \n        if (customer.PreferredContact == \"Email\") {\n            await emailService.SendEmailAsync(customer.Email, \"Special Promotion\", promotionMessage);\n        }\n        else if (customer.PreferredContact == \"SMS\") {\n            await smsService.SendSmsAsync(customer.PhoneNumber, promotionMessage);\n        }\n    }\n}",
            "output": "public interface ICustomerRepository {\n    Task<Customer> GetByIdAsync(int customerId);\n}\n\npublic interface IEmailService {\n    Task SendEmailAsync(string email, string subject, string message);\n}\n\npublic interface ISmsService {\n    Task SendSmsAsync(string phoneNumber, string message);\n}\n\npublic interface ICacheService {\n    T Get<T>(string key);\n    void Set<T>(string key, T value, TimeSpan expiration);\n}\n\npublic class CustomerService {\n    private readonly ICustomerRepository customerRepository;\n    private readonly IEmailService emailService;\n    private readonly ISmsService smsService;\n    private readonly ICacheService cacheService;\n    \n    public CustomerService(\n        ICustomerRepository customerRepository,\n        IEmailService emailService,\n        ISmsService smsService,\n        ICacheService cacheService) {\n        this.customerRepository = customerRepository;\n        this.emailService = emailService;\n        this.smsService = smsService;\n        this.cacheService = cacheService;\n    }\n    \n    public async Task<Customer> GetCustomerAsync(int customerId) {\n        var cachedCustomer = cacheService.Get<Customer>($\"customer_{customerId}\");\n        if (cachedCustomer != null) {\n            return cachedCustomer;\n        }\n        \n        var customer = await customerRepository.GetByIdAsync(customerId);\n        cacheService.Set($\"customer_{customerId}\", customer, TimeSpan.FromMinutes(30));\n        return customer;\n    }\n    \n    public async Task SendPromotionAsync(int customerId, string promotionMessage) {\n        var customer = await GetCustomerAsync(customerId);\n        \n        if (customer.PreferredContact == \"Email\") {\n            await emailService.SendEmailAsync(customer.Email, \"Special Promotion\", promotionMessage);\n        }\n        else if (customer.PreferredContact == \"SMS\") {\n            await smsService.SendSmsAsync(customer.PhoneNumber, promotionMessage);\n        }\n    }\n}\n\npublic class SqlServerCustomerRepository : ICustomerRepository {\n    public async Task<Customer> GetByIdAsync(int customerId) {\n        // SQL Server implementation\n        return new Customer();\n    }\n}\n\npublic class SendGridEmailService : IEmailService {\n    public async Task SendEmailAsync(string email, string subject, string message) {\n        // SendGrid implementation\n    }\n}\n\npublic class TwilioSmsService : ISmsService {\n    public async Task SendSmsAsync(string phoneNumber, string message) {\n        // Twilio implementation\n    }\n}\n\npublic class RedisCacheService : ICacheService {\n    public T Get<T>(string key) {\n        // Redis implementation\n        return default(T);\n    }\n    \n    public void Set<T>(string key, T value, TimeSpan expiration) {\n        // Redis implementation\n    }\n}",
            "level": "MODERATE",
            "language": "C#",
            "violation": "DIP"
        },
        {
            "input": "class OrderProcessor {\n    private val postgresOrderRepo = PostgresOrderRepository()\n    private val stripePaymentService = StripePaymentService()\n    private val elasticsearchLogger = ElasticsearchLogger()\n    private val rabbitMqPublisher = RabbitMQEventPublisher()\n    \n    fun processOrder(orderRequest: OrderRequest): OrderResult {\n        try {\n            // Create order\n            val order = Order(\n                id = generateOrderId(),\n                customerId = orderRequest.customerId,\n                items = orderRequest.items,\n                totalAmount = calculateTotal(orderRequest.items)\n            )\n            \n            // Save to database\n            postgresOrderRepo.save(order)\n            \n            // Process payment\n            val paymentResult = stripePaymentService.processPayment(\n                order.totalAmount,\n                orderRequest.paymentToken\n            )\n            \n            if (paymentResult.isSuccessful) {\n                // Update order status\n                order.status = OrderStatus.PAID\n                postgresOrderRepo.update(order)\n                \n                // Log success\n                elasticsearchLogger.logOrderProcessed(order)\n                \n                // Publish event\n                rabbitMqPublisher.publishOrderCompleted(order)\n                \n                return OrderResult.success(order)\n            } else {\n                elasticsearchLogger.logPaymentFailed(order, paymentResult.errorMessage)\n                return OrderResult.failure(\"Payment failed: ${paymentResult.errorMessage}\")\n            }\n        } catch (e: Exception) {\n            elasticsearchLogger.logError(\"Order processing failed\", e)\n            return OrderResult.failure(\"Order processing failed: ${e.message}\")\n        }\n    }\n    \n    private fun calculateTotal(items: List<OrderItem>): BigDecimal {\n        return items.sumOf { it.price * it.quantity.toBigDecimal() }\n    }\n    \n    private fun generateOrderId(): String {\n        return \"ORD-${System.currentTimeMillis()}\"\n    }\n}",
            "output": "interface OrderRepository {\n    fun save(order: Order)\n    fun update(order: Order)\n}\n\ninterface PaymentService {\n    fun processPayment(amount: BigDecimal, paymentToken: String): PaymentResult\n}\n\ninterface Logger {\n    fun logOrderProcessed(order: Order)\n    fun logPaymentFailed(order: Order, errorMessage: String)\n    fun logError(message: String, exception: Exception)\n}\n\ninterface EventPublisher {\n    fun publishOrderCompleted(order: Order)\n}\n\nclass OrderProcessor(\n    private val orderRepository: OrderRepository,\n    private val paymentService: PaymentService,\n    private val logger: Logger,\n    private val eventPublisher: EventPublisher\n) {\n    fun processOrder(orderRequest: OrderRequest): OrderResult {\n        try {\n            // Create order\n            val order = Order(\n                id = generateOrderId(),\n                customerId = orderRequest.customerId,\n                items = orderRequest.items,\n                totalAmount = calculateTotal(orderRequest.items)\n            )\n            \n            // Save to database\n            orderRepository.save(order)\n            \n            // Process payment\n            val paymentResult = paymentService.processPayment(\n                order.totalAmount,\n                orderRequest.paymentToken\n            )\n            \n            if (paymentResult.isSuccessful) {\n                // Update order status\n                order.status = OrderStatus.PAID\n                orderRepository.update(order)\n                \n                // Log success\n                logger.logOrderProcessed(order)\n                \n                // Publish event\n                eventPublisher.publishOrderCompleted(order)\n                \n                return OrderResult.success(order)\n            } else {\n                logger.logPaymentFailed(order, paymentResult.errorMessage)\n                return OrderResult.failure(\"Payment failed: ${paymentResult.errorMessage}\")\n            }\n        } catch (e: Exception) {\n            logger.logError(\"Order processing failed\", e)\n            return OrderResult.failure(\"Order processing failed: ${e.message}\")\n        }\n    }\n    \n    private fun calculateTotal(items: List<OrderItem>): BigDecimal {\n        return items.sumOf { it.price * it.quantity.toBigDecimal() }\n    }\n    \n    private fun generateOrderId(): String {\n        return \"ORD-${System.currentTimeMillis()}\"\n    }\n}\n\nclass PostgresOrderRepository : OrderRepository {\n    override fun save(order: Order) {\n        // PostgreSQL implementation\n    }\n    \n    override fun update(order: Order) {\n        // PostgreSQL implementation\n    }\n}\n\nclass StripePaymentService : PaymentService {\n    override fun processPayment(amount: BigDecimal, paymentToken: String): PaymentResult {\n        // Stripe implementation\n        return PaymentResult(true, null)\n    }\n}\n\nclass ElasticsearchLogger : Logger {\n    override fun logOrderProcessed(order: Order) {\n        // Elasticsearch implementation\n    }\n    \n    override fun logPaymentFailed(order: Order, errorMessage: String) {\n        // Elasticsearch implementation\n    }\n    \n    override fun logError(message: String, exception: Exception) {\n        // Elasticsearch implementation\n    }\n}\n\nclass RabbitMQEventPublisher : EventPublisher {\n    override fun publishOrderCompleted(order: Order) {\n        // RabbitMQ implementation\n    }\n}",
            "level": "MODERATE",
            "language": "KOTLIN",
            "violation": "DIP"
        },
        {
            "input": "class AuthenticationService:\n    def __init__(self):\n        self.jwt_handler = JWTTokenHandler()\n        self.bcrypt_hasher = BCryptPasswordHasher()\n        self.mysql_user_repo = MySQLUserRepository()\n        self.redis_session_store = RedisSessionStore()\n        self.sendgrid_mailer = SendGridMailer()\n        \n    def authenticate_user(self, email, password):\n        # Get user from database\n        user = self.mysql_user_repo.find_by_email(email)\n        if not user:\n            return {'success': False, 'message': 'User not found'}\n            \n        # Verify password\n        if not self.bcrypt_hasher.verify_password(password, user.password_hash):\n            return {'success': False, 'message': 'Invalid password'}\n            \n        # Generate JWT token\n        token = self.jwt_handler.generate_token({\n            'user_id': user.id,\n            'email': user.email,\n            'roles': user.roles\n        })\n        \n        # Store session\n        session_id = self.redis_session_store.create_session(user.id, token)\n        \n        # Send login notification email\n        self.sendgrid_mailer.send_email(\n            to=user.email,\n            subject='Login Notification',\n            body=f'You have successfully logged in at {datetime.now()}'\n        )\n        \n        return {\n            'success': True,\n            'token': token,\n            'session_id': session_id,\n            'user': {\n                'id': user.id,\n                'email': user.email,\n                'roles': user.roles\n            }\n        }\n    \n    def validate_token(self, token):\n        try:\n            payload = self.jwt_handler.decode_token(token)\n            session_exists = self.redis_session_store.validate_session(\n                payload['user_id'], \n                token\n            )\n            return session_exists and payload\n        except Exception:\n            return False\n    \n    def logout_user(self, user_id, token):\n        self.redis_session_store.delete_session(user_id, token)\n        return {'success': True, 'message': 'Logged out successfully'}",
            "output": "from abc import ABC, abstractmethod\nfrom datetime import datetime\n\nclass TokenHandler(ABC):\n    @abstractmethod\n    def generate_token(self, payload):\n        pass\n    \n    @abstractmethod\n    def decode_token(self, token):\n        pass\n\nclass PasswordHasher(ABC):\n    @abstractmethod\n    def verify_password(self, password, hash):\n        pass\n\nclass UserRepository(ABC):\n    @abstractmethod\n    def find_by_email(self, email):\n        pass\n\nclass SessionStore(ABC):\n    @abstractmethod\n    def create_session(self, user_id, token):\n        pass\n    \n    @abstractmethod\n    def validate_session(self, user_id, token):\n        pass\n    \n    @abstractmethod\n    def delete_session(self, user_id, token):\n        pass\n\nclass EmailService(ABC):\n    @abstractmethod\n    def send_email(self, to, subject, body):\n        pass\n\nclass AuthenticationService:\n    def __init__(self, token_handler: TokenHandler, password_hasher: PasswordHasher,\n                 user_repository: UserRepository, session_store: SessionStore,\n                 email_service: EmailService):\n        self.token_handler = token_handler\n        self.password_hasher = password_hasher\n        self.user_repository = user_repository\n        self.session_store = session_store\n        self.email_service = email_service\n        \n    def authenticate_user(self, email, password):\n        # Get user from database\n        user = self.user_repository.find_by_email(email)\n        if not user:\n            return {'success': False, 'message': 'User not found'}\n            \n        # Verify password\n        if not self.password_hasher.verify_password(password, user.password_hash):\n            return {'success': False, 'message': 'Invalid password'}\n            \n        # Generate JWT token\n        token = self.token_handler.generate_token({\n            'user_id': user.id,\n            'email': user.email,\n            'roles': user.roles\n        })\n        \n        # Store session\n        session_id = self.session_store.create_session(user.id, token)\n        \n        # Send login notification email\n        self.email_service.send_email(\n            to=user.email,\n            subject='Login Notification',\n            body=f'You have successfully logged in at {datetime.now()}'\n        )\n        \n        return {\n            'success': True,\n            'token': token,\n            'session_id': session_id,\n            'user': {\n                'id': user.id,\n                'email': user.email,\n                'roles': user.roles\n            }\n        }\n    \n    def validate_token(self, token):\n        try:\n            payload = self.token_handler.decode_token(token)\n            session_exists = self.session_store.validate_session(\n                payload['user_id'], \n                token\n            )\n            return session_exists and payload\n        except Exception:\n            return False\n    \n    def logout_user(self, user_id, token):\n        self.session_store.delete_session(user_id, token)\n        return {'success': True, 'message': 'Logged out successfully'}\n\n# Concrete implementations\nclass JWTTokenHandler(TokenHandler):\n    def generate_token(self, payload):\n        # JWT implementation\n        return \"jwt_token_here\"\n    \n    def decode_token(self, token):\n        # JWT decode implementation\n        return {'user_id': 1, 'email': 'user@example.com'}\n\nclass BCryptPasswordHasher(PasswordHasher):\n    def verify_password(self, password, hash):\n        # BCrypt implementation\n        return True\n\nclass MySQLUserRepository(UserRepository):\n    def find_by_email(self, email):\n        # MySQL implementation\n        return None\n\nclass RedisSessionStore(SessionStore):\n    def create_session(self, user_id, token):\n        # Redis implementation\n        return \"session_id\"\n    \n    def validate_session(self, user_id, token):\n        # Redis implementation\n        return True\n    \n    def delete_session(self, user_id, token):\n        # Redis implementation\n        pass\n\nclass SendGridEmailService(EmailService):\n    def send_email(self, to, subject, body):\n        # SendGrid implementation\n        print(f\"Sending email to {to}: {subject}\")",
            "level": "MODERATE",
            "language": "PYTHON",
            "violation": "DIP"
        },
        {
            "input": "public class OrderService {\n    private MySQLDatabase database;\n    private EmailService emailService;\n    \n    public OrderService() {\n        this.database = new MySQLDatabase();\n        this.emailService = new EmailService();\n    }\n    \n    public void processOrder(Order order) {\n        database.save(order);\n        emailService.sendConfirmation(order.getCustomerEmail());\n    }\n}\n\npublic class MySQLDatabase {\n    public void save(Order order) {\n        // MySQL specific implementation\n    }\n}\n\npublic class EmailService {\n    public void sendConfirmation(String email) {\n        // SMTP email implementation\n    }\n}",
            "output": "public interface DatabaseRepository {\n    void save(Order order);\n}\n\npublic interface NotificationService {\n    void sendConfirmation(String email);\n}\n\npublic class OrderService {\n    private DatabaseRepository database;\n    private NotificationService notificationService;\n    \n    public OrderService(DatabaseRepository database, NotificationService notificationService) {\n        this.database = database;\n        this.notificationService = notificationService;\n    }\n    \n    public void processOrder(Order order) {\n        database.save(order);\n        notificationService.sendConfirmation(order.getCustomerEmail());\n    }\n}\n\npublic class MySQLDatabase implements DatabaseRepository {\n    public void save(Order order) {\n        // MySQL specific implementation\n    }\n}\n\npublic class EmailService implements NotificationService {\n    public void sendConfirmation(String email) {\n        // SMTP email implementation\n    }\n}",
            "level": "MODERATE",
            "language": "JAVA",
            "violation": "DIP"
        },
        {
            "input": "class PaymentProcessor:\n    def __init__(self):\n        self.stripe_gateway = StripePaymentGateway()\n        self.logger = FileLogger()\n    \n    def process_payment(self, amount, card_details):\n        try:\n            result = self.stripe_gateway.charge(amount, card_details)\n            self.logger.log(f\"Payment processed: {result}\")\n            return result\n        except Exception as e:\n            self.logger.log(f\"Payment failed: {e}\")\n            raise\n\nclass StripePaymentGateway:\n    def charge(self, amount, card_details):\n        # Stripe-specific implementation\n        return {\"transaction_id\": \"stripe_123\", \"status\": \"success\"}\n\nclass FileLogger:\n    def log(self, message):\n        with open(\"payment.log\", \"a\") as f:\n            f.write(f\"{message}\\n\")",
            "output": "from abc import ABC, abstractmethod\n\nclass PaymentGateway(ABC):\n    @abstractmethod\n    def charge(self, amount, card_details):\n        pass\n\nclass Logger(ABC):\n    @abstractmethod\n    def log(self, message):\n        pass\n\nclass PaymentProcessor:\n    def __init__(self, payment_gateway: PaymentGateway, logger: Logger):\n        self.payment_gateway = payment_gateway\n        self.logger = logger\n    \n    def process_payment(self, amount, card_details):\n        try:\n            result = self.payment_gateway.charge(amount, card_details)\n            self.logger.log(f\"Payment processed: {result}\")\n            return result\n        except Exception as e:\n            self.logger.log(f\"Payment failed: {e}\")\n            raise\n\nclass StripePaymentGateway(PaymentGateway):\n    def charge(self, amount, card_details):\n        # Stripe-specific implementation\n        return {\"transaction_id\": \"stripe_123\", \"status\": \"success\"}\n\nclass FileLogger(Logger):\n    def log(self, message):\n        with open(\"payment.log\", \"a\") as f:\n            f.write(f\"{message}\\n\")",
            "level": "MODERATE",
            "language": "PYTHON",
            "violation": "DIP"
        },
        {
            "input": "class UserService {\n    private val apiClient = HttpApiClient()\n    private val cache = RedisCache()\n    \n    fun getUserProfile(userId: String): UserProfile? {\n        val cachedProfile = cache.get(\"user_$userId\")\n        if (cachedProfile != null) {\n            return cachedProfile as UserProfile\n        }\n        \n        val profile = apiClient.fetchUserProfile(userId)\n        if (profile != null) {\n            cache.set(\"user_$userId\", profile, 3600)\n        }\n        return profile\n    }\n}\n\nclass HttpApiClient {\n    fun fetchUserProfile(userId: String): UserProfile? {\n        // REST API call implementation\n        return UserProfile(userId, \"John Doe\", \"john@example.com\")\n    }\n}\n\nclass RedisCache {\n    fun get(key: String): Any? {\n        // Redis get implementation\n        return null\n    }\n    \n    fun set(key: String, value: Any, ttl: Int) {\n        // Redis set implementation\n    }\n}\n\ndata class UserProfile(val id: String, val name: String, val email: String)",
            "output": "interface ApiClient {\n    fun fetchUserProfile(userId: String): UserProfile?\n}\n\ninterface CacheService {\n    fun get(key: String): Any?\n    fun set(key: String, value: Any, ttl: Int)\n}\n\nclass UserService(private val apiClient: ApiClient, private val cache: CacheService) {\n    fun getUserProfile(userId: String): UserProfile? {\n        val cachedProfile = cache.get(\"user_$userId\")\n        if (cachedProfile != null) {\n            return cachedProfile as UserProfile\n        }\n        \n        val profile = apiClient.fetchUserProfile(userId)\n        if (profile != null) {\n            cache.set(\"user_$userId\", profile, 3600)\n        }\n        return profile\n    }\n}\n\nclass HttpApiClient : ApiClient {\n    override fun fetchUserProfile(userId: String): UserProfile? {\n        // REST API call implementation\n        return UserProfile(userId, \"John Doe\", \"john@example.com\")\n    }\n}\n\nclass RedisCache : CacheService {\n    override fun get(key: String): Any? {\n        // Redis get implementation\n        return null\n    }\n    \n    override fun set(key: String, value: Any, ttl: Int) {\n        // Redis set implementation\n    }\n}\n\ndata class UserProfile(val id: String, val name: String, val email: String)",
            "level": "MODERATE",
            "language": "KOTLIN",
            "violation": "DIP"
        },
        {
            "input": "public class InventoryManager\n{\n    private SqlServerDatabase database;\n    private SmsNotificationService smsService;\n    \n    public InventoryManager()\n    {\n        database = new SqlServerDatabase();\n        smsService = new SmsNotificationService();\n    }\n    \n    public void UpdateStock(string productId, int quantity)\n    {\n        var product = database.GetProduct(productId);\n        product.Stock += quantity;\n        database.UpdateProduct(product);\n        \n        if (product.Stock < 10)\n        {\n            smsService.SendLowStockAlert(product.Name, product.Stock);\n        }\n    }\n}\n\npublic class SqlServerDatabase\n{\n    public Product GetProduct(string productId)\n    {\n        // SQL Server specific query\n        return new Product { Id = productId, Name = \"Sample\", Stock = 5 };\n    }\n    \n    public void UpdateProduct(Product product)\n    {\n        // SQL Server specific update\n    }\n}\n\npublic class SmsNotificationService\n{\n    public void SendLowStockAlert(string productName, int stock)\n    {\n        // SMS service implementation\n    }\n}\n\npublic class Product\n{\n    public string Id { get; set; }\n    public string Name { get; set; }\n    public int Stock { get; set; }\n}",
            "output": "public interface IProductRepository\n{\n    Product GetProduct(string productId);\n    void UpdateProduct(Product product);\n}\n\npublic interface INotificationService\n{\n    void SendLowStockAlert(string productName, int stock);\n}\n\npublic class InventoryManager\n{\n    private readonly IProductRepository repository;\n    private readonly INotificationService notificationService;\n    \n    public InventoryManager(IProductRepository repository, INotificationService notificationService)\n    {\n        this.repository = repository;\n        this.notificationService = notificationService;\n    }\n    \n    public void UpdateStock(string productId, int quantity)\n    {\n        var product = repository.GetProduct(productId);\n        product.Stock += quantity;\n        repository.UpdateProduct(product);\n        \n        if (product.Stock < 10)\n        {\n            notificationService.SendLowStockAlert(product.Name, product.Stock);\n        }\n    }\n}\n\npublic class SqlServerDatabase : IProductRepository\n{\n    public Product GetProduct(string productId)\n    {\n        // SQL Server specific query\n        return new Product { Id = productId, Name = \"Sample\", Stock = 5 };\n    }\n    \n    public void UpdateProduct(Product product)\n    {\n        // SQL Server specific update\n    }\n}\n\npublic class SmsNotificationService : INotificationService\n{\n    public void SendLowStockAlert(string productName, int stock)\n    {\n        // SMS service implementation\n    }\n}\n\npublic class Product\n{\n    public string Id { get; set; }\n    public string Name { get; set; }\n    public int Stock { get; set; }\n}",
            "level": "MODERATE",
            "language": "C#",
            "violation": "DIP"
        },
        {
            "input": "public class ReportGenerator {\n    private PdfWriter pdfWriter;\n    private DatabaseConnection dbConnection;\n    \n    public ReportGenerator() {\n        this.pdfWriter = new PdfWriter();\n        this.dbConnection = new OracleConnection();\n    }\n    \n    public void generateSalesReport(String period) {\n        List<SalesData> data = dbConnection.getSalesData(period);\n        String content = formatSalesData(data);\n        pdfWriter.writeToPdf(content, \"sales_report.pdf\");\n    }\n    \n    private String formatSalesData(List<SalesData> data) {\n        return \"Sales Report Content\";\n    }\n}\n\npublic class PdfWriter {\n    public void writeToPdf(String content, String filename) {\n        // PDF generation logic\n    }\n}\n\npublic class OracleConnection {\n    public List<SalesData> getSalesData(String period) {\n        // Oracle specific query\n        return new ArrayList<>();\n    }\n}\n\npublic class SalesData {\n    private String product;\n    private double amount;\n    // getters and setters\n}",
            "output": "public interface DocumentWriter {\n    void writeDocument(String content, String filename);\n}\n\npublic interface DataRepository {\n    List<SalesData> getSalesData(String period);\n}\n\npublic class ReportGenerator {\n    private final DocumentWriter documentWriter;\n    private final DataRepository dataRepository;\n    \n    public ReportGenerator(DocumentWriter documentWriter, DataRepository dataRepository) {\n        this.documentWriter = documentWriter;\n        this.dataRepository = dataRepository;\n    }\n    \n    public void generateSalesReport(String period) {\n        List<SalesData> data = dataRepository.getSalesData(period);\n        String content = formatSalesData(data);\n        documentWriter.writeDocument(content, \"sales_report.pdf\");\n    }\n    \n    private String formatSalesData(List<SalesData> data) {\n        return \"Sales Report Content\";\n    }\n}\n\npublic class PdfWriter implements DocumentWriter {\n    public void writeDocument(String content, String filename) {\n        // PDF generation logic\n    }\n}\n\npublic class OracleConnection implements DataRepository {\n    public List<SalesData> getSalesData(String period) {\n        // Oracle specific query\n        return new ArrayList<>();\n    }\n}\n\npublic class SalesData {\n    private String product;\n    private double amount;\n    // getters and setters\n}",
            "level": "MODERATE",
            "language": "JAVA",
            "violation": "DIP"
        },
        {
            "input": "class WeatherService:\n    def __init__(self):\n        self.weather_api = OpenWeatherMapAPI()\n        self.geocoder = GoogleGeocoder()\n        self.cache = MemoryCache()\n    \n    def get_weather_forecast(self, city_name):\n        cache_key = f\"weather_{city_name}\"\n        cached_result = self.cache.get(cache_key)\n        \n        if cached_result:\n            return cached_result\n        \n        coordinates = self.geocoder.get_coordinates(city_name)\n        weather_data = self.weather_api.get_forecast(coordinates['lat'], coordinates['lon'])\n        \n        self.cache.set(cache_key, weather_data, 1800)  # 30 minutes\n        return weather_data\n\nclass OpenWeatherMapAPI:\n    def get_forecast(self, lat, lon):\n        # OpenWeatherMap API call\n        return {\"temperature\": 25, \"description\": \"sunny\"}\n\nclass GoogleGeocoder:\n    def get_coordinates(self, city_name):\n        # Google Geocoding API call\n        return {\"lat\": 40.7128, \"lon\": -74.0060}\n\nclass MemoryCache:\n    def __init__(self):\n        self.cache = {}\n    \n    def get(self, key):\n        return self.cache.get(key)\n    \n    def set(self, key, value, ttl):\n        self.cache[key] = value",
            "output": "from abc import ABC, abstractmethod\n\nclass WeatherAPI(ABC):\n    @abstractmethod\n    def get_forecast(self, lat, lon):\n        pass\n\nclass GeocodingService(ABC):\n    @abstractmethod\n    def get_coordinates(self, city_name):\n        pass\n\nclass CacheProvider(ABC):\n    @abstractmethod\n    def get(self, key):\n        pass\n    \n    @abstractmethod\n    def set(self, key, value, ttl):\n        pass\n\nclass WeatherService:\n    def __init__(self, weather_api: WeatherAPI, geocoder: GeocodingService, cache: CacheProvider):\n        self.weather_api = weather_api\n        self.geocoder = geocoder\n        self.cache = cache\n    \n    def get_weather_forecast(self, city_name):\n        cache_key = f\"weather_{city_name}\"\n        cached_result = self.cache.get(cache_key)\n        \n        if cached_result:\n            return cached_result\n        \n        coordinates = self.geocoder.get_coordinates(city_name)\n        weather_data = self.weather_api.get_forecast(coordinates['lat'], coordinates['lon'])\n        \n        self.cache.set(cache_key, weather_data, 1800)  # 30 minutes\n        return weather_data\n\nclass OpenWeatherMapAPI(WeatherAPI):\n    def get_forecast(self, lat, lon):\n        # OpenWeatherMap API call\n        return {\"temperature\": 25, \"description\": \"sunny\"}\n\nclass GoogleGeocoder(GeocodingService):\n    def get_coordinates(self, city_name):\n        # Google Geocoding API call\n        return {\"lat\": 40.7128, \"lon\": -74.0060}\n\nclass MemoryCache(CacheProvider):\n    def __init__(self):\n        self.cache = {}\n    \n    def get(self, key):\n        return self.cache.get(key)\n    \n    def set(self, key, value, ttl):\n        self.cache[key] = value",
            "level": "MODERATE",
            "language": "PYTHON",
            "violation": "DIP"
        },
        {
            "input": "class TaskScheduler {\n    private val taskQueue = RabbitMQQueue()\n    private val taskExecutor = ThreadPoolExecutor()\n    private val monitor = SystemMonitor()\n    \n    fun scheduleTask(task: Task) {\n        val systemLoad = monitor.getCpuUsage()\n        \n        if (systemLoad < 0.8) {\n            taskExecutor.executeImmediately(task)\n        } else {\n            taskQueue.enqueue(task)\n        }\n    }\n    \n    fun processQueuedTasks() {\n        while (taskQueue.hasItems() && monitor.getCpuUsage() < 0.7) {\n            val task = taskQueue.dequeue()\n            taskExecutor.executeImmediately(task)\n        }\n    }\n}\n\nclass RabbitMQQueue {\n    private val items = mutableListOf<Task>()\n    \n    fun enqueue(task: Task) {\n        items.add(task)\n    }\n    \n    fun dequeue(): Task {\n        return items.removeAt(0)\n    }\n    \n    fun hasItems(): Boolean {\n        return items.isNotEmpty()\n    }\n}\n\nclass ThreadPoolExecutor {\n    fun executeImmediately(task: Task) {\n        // Thread pool execution\n    }\n}\n\nclass SystemMonitor {\n    fun getCpuUsage(): Double {\n        // System monitoring logic\n        return 0.5\n    }\n}\n\ndata class Task(val id: String, val payload: String)",
            "output": "interface TaskQueue {\n    fun enqueue(task: Task)\n    fun dequeue(): Task\n    fun hasItems(): Boolean\n}\n\ninterface TaskExecutor {\n    fun executeImmediately(task: Task)\n}\n\ninterface SystemMonitor {\n    fun getCpuUsage(): Double\n}\n\nclass TaskScheduler(\n    private val taskQueue: TaskQueue,\n    private val taskExecutor: TaskExecutor,\n    private val monitor: SystemMonitor\n) {\n    fun scheduleTask(task: Task) {\n        val systemLoad = monitor.getCpuUsage()\n        \n        if (systemLoad < 0.8) {\n            taskExecutor.executeImmediately(task)\n        } else {\n            taskQueue.enqueue(task)\n        }\n    }\n    \n    fun processQueuedTasks() {\n        while (taskQueue.hasItems() && monitor.getCpuUsage() < 0.7) {\n            val task = taskQueue.dequeue()\n            taskExecutor.executeImmediately(task)\n        }\n    }\n}\n\nclass RabbitMQQueue : TaskQueue {\n    private val items = mutableListOf<Task>()\n    \n    override fun enqueue(task: Task) {\n        items.add(task)\n    }\n    \n    override fun dequeue(): Task {\n        return items.removeAt(0)\n    }\n    \n    override fun hasItems(): Boolean {\n        return items.isNotEmpty()\n    }\n}\n\nclass ThreadPoolTaskExecutor : TaskExecutor {\n    override fun executeImmediately(task: Task) {\n        // Thread pool execution\n    }\n}\n\nclass CpuSystemMonitor : SystemMonitor {\n    override fun getCpuUsage(): Double {\n        // System monitoring logic\n        return 0.5\n    }\n}\n\ndata class Task(val id: String, val payload: String)",
            "level": "MODERATE",
            "language": "KOTLIN",
            "violation": "DIP"
        },
        {
            "input": "public class OrderFulfillmentService\n{\n    private InventorySystem inventorySystem;\n    private ShippingProvider shippingProvider;\n    private AuditLogger auditLogger;\n    \n    public OrderFulfillmentService()\n    {\n        inventorySystem = new WarehouseInventorySystem();\n        shippingProvider = new FedExShippingProvider();\n        auditLogger = new DatabaseAuditLogger();\n    }\n    \n    public bool FulfillOrder(Order order)\n    {\n        auditLogger.LogEvent($\"Starting fulfillment for order {order.Id}\");\n        \n        if (!inventorySystem.IsItemAvailable(order.ProductId, order.Quantity))\n        {\n            auditLogger.LogEvent($\"Insufficient inventory for order {order.Id}\");\n            return false;\n        }\n        \n        inventorySystem.ReserveItem(order.ProductId, order.Quantity);\n        var trackingNumber = shippingProvider.CreateShipment(order);\n        \n        auditLogger.LogEvent($\"Order {order.Id} fulfilled with tracking {trackingNumber}\");\n        return true;\n    }\n}\n\npublic class WarehouseInventorySystem\n{\n    public bool IsItemAvailable(string productId, int quantity)\n    {\n        // Warehouse specific inventory check\n        return true;\n    }\n    \n    public void ReserveItem(string productId, int quantity)\n    {\n        // Reserve inventory\n    }\n}\n\npublic class FedExShippingProvider\n{\n    public string CreateShipment(Order order)\n    {\n        // FedEx API integration\n        return \"FEDEX123456\";\n    }\n}\n\npublic class DatabaseAuditLogger\n{\n    public void LogEvent(string message)\n    {\n        // Database logging\n    }\n}\n\npublic class Order\n{\n    public string Id { get; set; }\n    public string ProductId { get; set; }\n    public int Quantity { get; set; }\n    public string CustomerAddress { get; set; }\n}",
            "output": "public interface IInventorySystem\n{\n    bool IsItemAvailable(string productId, int quantity);\n    void ReserveItem(string productId, int quantity);\n}\n\npublic interface IShippingProvider\n{\n    string CreateShipment(Order order);\n}\n\npublic interface IAuditLogger\n{\n    void LogEvent(string message);\n}\n\npublic class OrderFulfillmentService\n{\n    private readonly IInventorySystem inventorySystem;\n    private readonly IShippingProvider shippingProvider;\n    private readonly IAuditLogger auditLogger;\n    \n    public OrderFulfillmentService(\n        IInventorySystem inventorySystem,\n        IShippingProvider shippingProvider,\n        IAuditLogger auditLogger)\n    {\n        this.inventorySystem = inventorySystem;\n        this.shippingProvider = shippingProvider;\n        this.auditLogger = auditLogger;\n    }\n    \n    public bool FulfillOrder(Order order)\n    {\n        auditLogger.LogEvent($\"Starting fulfillment for order {order.Id}\");\n        \n        if (!inventorySystem.IsItemAvailable(order.ProductId, order.Quantity))\n        {\n            auditLogger.LogEvent($\"Insufficient inventory for order {order.Id}\");\n            return false;\n        }\n        \n        inventorySystem.ReserveItem(order.ProductId, order.Quantity);\n        var trackingNumber = shippingProvider.CreateShipment(order);\n        \n        auditLogger.LogEvent($\"Order {order.Id} fulfilled with tracking {trackingNumber}\");\n        return true;\n    }\n}\n\npublic class WarehouseInventorySystem : IInventorySystem\n{\n    public bool IsItemAvailable(string productId, int quantity)\n    {\n        // Warehouse specific inventory check\n        return true;\n    }\n    \n    public void ReserveItem(string productId, int quantity)\n    {\n        // Reserve inventory\n    }\n}\n\npublic class FedExShippingProvider : IShippingProvider\n{\n    public string CreateShipment(Order order)\n    {\n        // FedEx API integration\n        return \"FEDEX123456\";\n    }\n}\n\npublic class DatabaseAuditLogger : IAuditLogger\n{\n    public void LogEvent(string message)\n    {\n        // Database logging\n    }\n}\n\npublic class Order\n{\n    public string Id { get; set; }\n    public string ProductId { get; set; }\n    public int Quantity { get; set; }\n    public string CustomerAddress { get; set; }\n}",
            "level": "MODERATE",
            "language": "C#",
            "violation": "DIP"
        }
    ]
  }