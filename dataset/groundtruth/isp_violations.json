{
    "code_examples": [
        {
            "input": "using System;\n\ninterface IGameCharacter\n{\n    void MeleeAttack();\n    void CastSpell();\n    void Fly();\n    void Defend();\n}\n\nclass Mage : IGameCharacter\n{\n    private string name;\n    private int mana;\n    \n    public Mage(string name)\n    {\n        this.name = name;\n        this.mana = 100;\n    }\n    \n    public void MeleeAttack()\n    {\n        throw new NotSupportedException(\"Mage cannot perform melee attacks!\");\n    }\n    \n    public void CastSpell()\n    {\n        if (mana >= 20)\n        {\n            Console.WriteLine(name + \" casts a fireball spell!\");\n            mana -= 20;\n        }\n        else\n        {\n            Console.WriteLine(name + \" is out of mana!\");\n        }\n    }\n    \n    public void Fly()\n    {\n        Console.WriteLine(name + \" soars through the air with magic!\");\n    }\n    \n    public void Defend()\n    {\n        Console.WriteLine(name + \" creates a magical shield!\");\n    }\n}\n\nclass Fighter : IGameCharacter\n{\n    private string name;\n    private int stamina;\n    \n    public Fighter(string name)\n    {\n        this.name = name;\n        this.stamina = 100;\n    }\n    \n    public void MeleeAttack()\n    {\n        if (stamina >= 10)\n        {\n            Console.WriteLine(name + \" swings sword with great force!\");\n            stamina -= 10;\n        }\n        else\n        {\n            Console.WriteLine(name + \" is too tired to attack!\");\n        }\n    }\n    \n    public void CastSpell()\n    {\n        throw new NotSupportedException(\"Fighter cannot cast spells!\");\n    }\n    \n    public void Fly()\n    {\n        throw new NotSupportedException(\"Fighter cannot fly!\");\n    }\n    \n    public void Defend()\n    {\n        Console.WriteLine(name + \" raises shield to block incoming attacks!\");\n    }\n}",
            "output": "using System;\n\n\ninterface IGameCharacter \n{\n    void Defend();\n}\n\ninterface IMage \n{\n    void CastSpell();\n    void Fly();\n}\n\ninterface IFighter \n{\n    void MeleeAttack();\n}\n\nclass Mage : IGameCharacter, IMage\n{\n    private string name;\n    private int mana;\n    \n    public Mage(string name)\n    {\n        this.name = name;\n        this.mana = 100;\n    }\n    \n    \n    public void CastSpell()\n    {\n        if (mana >= 20)\n        {\n            Console.WriteLine(name + \" casts a fireball spell!\");\n            mana -= 20;\n        }\n        else\n        {\n            Console.WriteLine(name + \" is out of mana!\");\n        }\n    }\n    \n    public void Fly()\n    {\n        Console.WriteLine(name + \" soars through the air with magic!\");\n    }\n    \n    public void Defend()\n    {\n        Console.WriteLine(name + \" creates a magical shield!\");\n    }\n}\n\nclass Fighter : IGameCharacter, IFighter\n{\n    private string name;\n    private int stamina;\n    \n    public Fighter(string name)\n    {\n        this.name = name;\n        this.stamina = 100;\n    }\n    \n    public void MeleeAttack()\n    {\n        if (stamina >= 10)\n        {\n            Console.WriteLine(name + \" swings sword with great force!\");\n            stamina -= 10;\n        }\n        else\n        {\n            Console.WriteLine(name + \" is too tired to attack!\");\n        }\n    }\n        \n    public void Defend()\n    {\n        Console.WriteLine(name + \" raises shield to block incoming attacks!\");\n    }\n}\n",
            "level": "EASY",
            "language": "CSHARP",
            "violation": "ISP"
        },
        {
            "input": "using System;\n\ninterface IMusicPlayer\n{\n    void Play();\n    void Pause();\n    void Stop();\n    void SkipTrack();\n    void Eject();\n}\n\nclass CDPlayer : IMusicPlayer\n{\n    private bool isPlaying = false;\n    private bool isPaused = false;\n    private string currentTrack = \"Track 1\";\n    \n    public void Play()\n    {\n        isPlaying = true;\n        isPaused = false;\n        Console.WriteLine(\"CD Player: Playing \" + currentTrack);\n    }\n    \n    public void Pause()\n    {\n        if (isPlaying)\n        {\n            isPaused = true;\n            isPlaying = false;\n            Console.WriteLine(\"CD Player: Paused\");\n        }\n    }\n    \n    public void Stop()\n    {\n        isPlaying = false;\n        isPaused = false;\n        Console.WriteLine(\"CD Player: Stopped\");\n    }\n    \n    public void SkipTrack()\n    {\n        Console.WriteLine(\"CD Player: Skipping to next track\");\n        currentTrack = \"Track \" + (int.Parse(currentTrack.Split(' ')[1]) + 1);\n    }\n    \n    public void Eject()\n    {\n        Stop();\n        Console.WriteLine(\"CD Player: CD ejected\");\n    }\n}\n\nclass VinylPlayer : IMusicPlayer\n{\n    private bool isPlaying = false;\n    private bool isPaused = false;\n    private string currentSong = \"Side A\";\n    \n    public void Play()\n    {\n        isPlaying = true;\n        isPaused = false;\n        Console.WriteLine(\"Vinyl Player: Playing \" + currentSong);\n    }\n    \n    public void Pause()\n    {\n        if (isPlaying)\n        {\n            isPaused = true;\n            isPlaying = false;\n            Console.WriteLine(\"Vinyl Player: Paused (needle lifted)\");\n        }\n    }\n    \n    public void Stop()\n    {\n        isPlaying = false;\n        isPaused = false;\n        Console.WriteLine(\"Vinyl Player: Stopped\");\n    }\n    \n    public void SkipTrack()\n    {\n        throw new NotSupportedException(\"Vinyl players cannot skip tracks - you must manually move the needle!\");\n    }\n   \n    public void Eject()\n    {\n        throw new NotSupportedException(\"Vinyl players don't eject - you must manually remove the record!\");\n    }\n}",
            "output": "using System;\n\ninterface IMusicPlayer\n{         \n    void Play();\n    void Pause();\n    void Stop();\n}\n\ninterface ICDPlayer\n{\n    void SkipTrack();\n    void Eject();\n}\n\n\nclass CDPlayer : IMusicPlayer, ICDPlayer\n{\n    private bool isPlaying = false;\n    private bool isPaused = false;\n    private string currentTrack = \"Track 1\";\n    \n    public void Play()\n    {\n        isPlaying = true;\n        isPaused = false;\n        Console.WriteLine(\"CD Player: Playing \" + currentTrack);\n    }\n    \n    public void Pause()\n    {\n        if (isPlaying)\n        {\n            isPaused = true;\n            isPlaying = false;\n            Console.WriteLine(\"CD Player: Paused\");\n        }\n    }\n    \n    public void Stop()\n    {\n        isPlaying = false;\n        isPaused = false;\n        Console.WriteLine(\"CD Player: Stopped\");\n    }\n    \n    public void SkipTrack()\n    {\n        Console.WriteLine(\"CD Player: Skipping to next track\");\n        currentTrack = \"Track \" + (int.Parse(currentTrack.Split(' ')[1]) + 1);\n    }\n    \n    public void Eject()\n    {\n        Stop();\n        Console.WriteLine(\"CD Player: CD ejected\");\n    }\n}\n\nclass VinylPlayer : IMusicPlayer\n{\n    private bool isPlaying = false;\n    private bool isPaused = false;\n    private string currentSong = \"Side A\";\n    \n    public void Play()\n    {\n        isPlaying = true;\n        isPaused = false;\n        Console.WriteLine(\"Vinyl Player: Playing \" + currentSong);\n    }\n    \n    public void Pause()\n    {\n        if (isPlaying)\n        {\n            isPaused = true;\n            isPlaying = false;\n            Console.WriteLine(\"Vinyl Player: Paused (needle lifted)\");\n        }\n    }\n    \n    public void Stop()\n    {\n        isPlaying = false;\n        isPaused = false;\n        Console.WriteLine(\"Vinyl Player: Stopped\");\n    }\n}\n",
            "level": "EASY",
            "language": "CSHARP",
            "violation": "ISP"
        },
        {
            "input": "using System;\n\ninterface IRestaurantWorker\n{\n    void CookFood();\n    void ServeCustomers();\n    void CleanTables();\n}\n\nclass Chef : IRestaurantWorker\n{\n    public void CookFood()\n    {\n        Console.WriteLine(\"Chef is cooking food.\");\n    }\n\n    public void ServeCustomers()\n    {\n        Console.WriteLine(\"Chef does not serve customers.\");\n    }\n\n    public void CleanTables()\n    {\n        Console.WriteLine(\"Chef does not clean tables.\");\n    }\n}\n\nclass Waiter : IRestaurantWorker\n{\n    public void CookFood()\n    {\n        Console.WriteLine(\"Waiter does not cook food.\");\n    }\n\n    public void ServeCustomers()\n    {\n        Console.WriteLine(\"Waiter is serving customers.\");\n    }\n\n    public void CleanTables()\n    {\n        Console.WriteLine(\"Waiter is cleaning tables.\");\n    }\n}\n\nclass Cleaner : IRestaurantWorker\n{\n    public void CookFood()\n    {\n        Console.WriteLine(\"Cleaner does not cook food.\");\n    }\n\n    public void ServeCustomers()\n    {\n        Console.WriteLine(\"Cleaner does not serve customers.\");\n    }\n\n    public void CleanTables()\n    {\n        Console.WriteLine(\"Cleaner is cleaning tables.\");\n    }\n}\n",
            "output": "using System;\n\ninterface IChef \n{\n    void CookFood();\n}\ninterface IWaiter \n{\n    void ServeCustomers();\n}\ninterface ICleaner \n{\n    void CleanTables();\n}\n\nclass Chef : IChef\n{\n    public void CookFood()\n    {\n        Console.WriteLine(\"Chef is cooking food.\");\n    }\n}\n\nclass Waiter : IWaiter, ICleaner\n{\n    public void ServeCustomers()\n    {\n        Console.WriteLine(\"Waiter is serving customers.\");\n    }\n\n    public void CleanTables()\n    {\n        Console.WriteLine(\"Waiter is cleaning tables.\");\n    }\n}\n\nclass Cleaner : ICleaner\n{\n    public void CleanTables()\n    {\n        Console.WriteLine(\"Cleaner is cleaning tables.\");\n    }\n}\n",
            "level": "EASY",
            "language": "CSHARP",
            "violation": "ISP"
        },
        {
            "input": "using System;\n\ninterface IVehicle\n{\n    void Start();\n    void Stop();\n    void Fly();\n}\n\nclass Car : IVehicle\n{\n    public void Start()\n    {\n        Console.WriteLine(\"Car engine started\");\n    }\n    \n    public void Stop()\n    {\n        Console.WriteLine(\"Car stopped\");\n    }\n    \n    public void Fly()\n    {\n        throw new NotSupportedException(\"Car cannot fly\");\n    }\n}\n\nclass Plane : IVehicle\n{\n    public void Start()\n    {\n        Console.WriteLine(\"Plane engines started\");\n    }\n    \n    public void Stop()\n    {\n        Console.WriteLine(\"Plane stopped\");\n    }\n    \n    public void Fly()\n    {\n        Console.WriteLine(\"Plane is flying\");\n    }\n}",
            "output": "using System;\n\ninterface IVehicle \n{\n    void Start();\n    void Stop();\n}\n\ninterface IPlane \n{\n    void fly();\n}\n\nclass Car : IVehicle\n{\n    public void Start()\n    {\n        Console.WriteLine(\"Car engine started\");\n    }\n    \n    public void Stop()\n    {\n        Console.WriteLine(\"Car stopped\");\n    }\n}\n\nclass Plane : IVehicle\n{\n    public void Start()\n    {\n        Console.WriteLine(\"Plane engines started\");\n    }\n    \n    public void Stop()\n    {\n        Console.WriteLine(\"Plane stopped\");\n    }\n    \n    public void Fly()\n    {\n        Console.WriteLine(\"Plane is flying\");\n    }\n}\n",
            "level": "EASY",
            "language": "CSHARP",
            "violation": "ISP"
        },
        {
            "input": "using System;\n\ninterface IGameCharacter\n{\n    void MeleeAttack();\n    void CastSpell();\n    void Fly();\n    void Defend();\n}\n\ninterface IWeapon\n{\n    void Slash();\n    void Shoot();\n    void Enchant();\n    void Repair();\n}\n\ninterface IEnemy\n{\n    void Attack();\n    void Fly();\n    void Poison();\n    void SummonMinions();\n    void TakeDamage(int[] damageValues);\n}\n\nclass Mage : IGameCharacter\n{\n    private string name;\n    private int mana;\n    private int level;\n    \n    public Mage(string name, int level)\n    {\n        this.name = name;\n        this.mana = 100;\n        this.level = level;\n    }\n    \n    public void MeleeAttack()\n    {\n        throw new NotSupportedException(\"Mage cannot perform melee attacks!\");\n    }\n    \n    public void CastSpell()\n    {\n        if (mana < 10)\n        {\n            Console.WriteLine(name + \" is out of mana!\");\n            return;\n        }\n        \n        if (level >= 5 && mana >= 30)\n        {\n            Console.WriteLine(name + \" casts a powerful lightning storm!\");\n            mana -= 30;\n        }\n        else if (level >= 3 && mana >= 20)\n        {\n            Console.WriteLine(name + \" casts a fireball spell!\");\n            mana -= 20;\n        }\n        else if (mana >= 10)\n        {\n            Console.WriteLine(name + \" casts a basic magic missile!\");\n            mana -= 10;\n        }\n    }\n    \n    public void Fly()\n    {\n        if (level >= 2)\n        {\n            Console.WriteLine(name + \" soars through the air with magic!\");\n        }\n        else\n        {\n            Console.WriteLine(name + \" is too inexperienced to fly!\");\n        }\n    }\n    \n    public void Defend()\n    {\n        if (mana >= 15)\n        {\n            Console.WriteLine(name + \" creates a magical barrier!\");\n            mana -= 15;\n        }\n        else\n        {\n            Console.WriteLine(name + \" dodges awkwardly!\");\n        }\n    }\n}\n\nclass Fighter : IGameCharacter\n{\n    private string name;\n    private int stamina;\n    private bool hasWeapon;\n    \n    public Fighter(string name, bool hasWeapon)\n    {\n        this.name = name;\n        this.stamina = 100;\n        this.hasWeapon = hasWeapon;\n    }\n    \n    public void MeleeAttack()\n    {\n        if (stamina < 5)\n        {\n            Console.WriteLine(name + \" is too exhausted to fight!\");\n            return;\n        }\n        \n        if (hasWeapon)\n        {\n            if (stamina >= 20)\n            {\n                Console.WriteLine(name + \" performs a devastating combo attack!\");\n                stamina -= 20;\n            }\n            else if (stamina >= 10)\n            {\n                Console.WriteLine(name + \" swings weapon with force!\");\n                stamina -= 10;\n            }\n            else\n            {\n                Console.WriteLine(name + \" makes a weak weapon strike!\");\n                stamina -= 5;\n            }\n        }\n        else\n        {\n            if (stamina >= 15)\n            {\n                Console.WriteLine(name + \" throws a powerful punch!\");\n                stamina -= 15;\n            }\n            else\n            {\n                Console.WriteLine(name + \" throws a basic punch!\");\n                stamina -= 5;\n            }\n        }\n    }\n    \n    public void CastSpell()\n    {\n        throw new NotSupportedException(\"Fighter cannot cast spells!\");\n    }\n    \n    public void Fly()\n    {\n        throw new NotSupportedException(\"Fighter cannot fly!\");\n    }\n    \n    public void Defend()\n    {\n        if (hasWeapon && stamina >= 10)\n        {\n            Console.WriteLine(name + \" blocks with weapon!\");\n            stamina -= 10;\n        }\n        else if (stamina >= 5)\n        {\n            Console.WriteLine(name + \" raises arms to defend!\");\n            stamina -= 5;\n        }\n        else\n        {\n            Console.WriteLine(name + \" barely manages to dodge!\");\n        }\n    }\n}\n\nclass Sword : IWeapon\n{\n    private int sharpness;\n    private bool isMagic;\n    \n    public Sword(int sharpness, bool isMagic)\n    {\n        this.sharpness = sharpness;\n        this.isMagic = isMagic;\n    }\n    \n    public void Slash()\n    {\n        if (sharpness > 70)\n        {\n            Console.WriteLine(\"Sword cuts cleanly through the target!\");\n        }\n        else if (sharpness > 30)\n        {\n            Console.WriteLine(\"Sword makes a decent cut!\");\n        }\n        else\n        {\n            Console.WriteLine(\"Dull sword barely scratches the target!\");\n        }\n    }\n    \n    public void Shoot()\n    {\n        throw new NotSupportedException(\"Sword cannot shoot!\");\n    }\n    \n    public void Enchant()\n    {\n        if (isMagic)\n        {\n            Console.WriteLine(\"Magical sword glows with enhanced power!\");\n            sharpness += 10;\n        }\n        else\n        {\n            throw new NotSupportedException(\"Non-magic sword cannot be enchanted!\");\n        }\n    }\n    \n    public void Repair()\n    {\n        if (sharpness < 100)\n        {\n            sharpness = Math.Min(100, sharpness + 25);\n            Console.WriteLine(\"Sword has been sharpened and repaired!\");\n        }\n        else\n        {\n            Console.WriteLine(\"Sword is already in perfect condition!\");\n        }\n    }\n}\n\nclass Bow : IWeapon\n{\n    private int arrows;\n    private int range;\n    \n    public Bow(int arrows, int range)\n    {\n        this.arrows = arrows;\n        this.range = range;\n    }\n    \n    public void Slash()\n    {\n        throw new NotSupportedException(\"Bow cannot slash!\");\n    }\n    \n    public void Shoot()\n    {\n        if (arrows <= 0)\n        {\n            Console.WriteLine(\"No arrows left to shoot!\");\n            return;\n        }\n        \n        if (range > 80)\n        {\n            Console.WriteLine(\"Long-range shot hits the distant target!\");\n        }\n        else if (range > 50)\n        {\n            Console.WriteLine(\"Medium-range shot finds its mark!\");\n        }\n        else\n        {\n            Console.WriteLine(\"Short-range shot barely reaches the target!\");\n        }\n        arrows--;\n    }\n    \n    public void Enchant()\n    {\n        throw new NotSupportedException(\"Regular bow cannot be enchanted!\");\n    }\n    \n    public void Repair()\n    {\n        if (range < 100)\n        {\n            range = Math.Min(100, range + 15);\n            Console.WriteLine(\"Bow string tightened and wood polished!\");\n        }\n        else\n        {\n            Console.WriteLine(\"Bow is in excellent condition!\");\n        }\n    }\n}\n\nclass Orc : IEnemy\n{\n    private string name;\n    private int health;\n    private int strength;\n    \n    public Orc(string name, int strength)\n    {\n        this.name = name;\n        this.health = 100;\n        this.strength = strength;\n    }\n    \n    public void Attack()\n    {\n        if (strength > 50)\n        {\n            Console.WriteLine(name + \" delivers a crushing blow!\");\n        }\n        else\n        {\n            Console.WriteLine(name + \" swings clumsily!\");\n        }\n    }\n    \n    public void Fly()\n    {\n        throw new NotSupportedException(\"Orc cannot fly!\");\n    }\n    \n    public void Poison()\n    {\n        throw new NotSupportedException(\"Orc cannot poison enemies!\");\n    }\n    \n    public void SummonMinions()\n    {\n        throw new NotSupportedException(\"Orc cannot summon minions!\");\n    }\n    \n    public void TakeDamage(int[] damageValues)\n    {\n        int totalDamage = 0;\n        for (int i = 0; i < damageValues.Length; i++)\n        {\n            if (damageValues[i] > 0)\n            {\n                totalDamage += damageValues[i];\n                if (damageValues[i] > 20)\n                {\n                    Console.WriteLine(name + \" staggers from heavy damage!\");\n                }\n            }\n        }\n        health -= totalDamage;\n        Console.WriteLine(name + \" takes \" + totalDamage + \" damage! Health: \" + health);\n        \n        if (health <= 0)\n        {\n            Console.WriteLine(name + \" has been defeated!\");\n        }\n    }\n}\n\nclass Dragon : IEnemy\n{\n    private string name;\n    private int health;\n    private int firepower;\n    private bool canFly;\n    \n    public Dragon(string name, int firepower)\n    {\n        this.name = name;\n        this.health = 200;\n        this.firepower = firepower;\n        this.canFly = true;\n    }\n    \n    public void Attack()\n    {\n        if (firepower > 80)\n        {\n            Console.WriteLine(name + \" breathes devastating flames!\");\n        }\n        else if (firepower > 50)\n        {\n            Console.WriteLine(name + \" breathes hot fire!\");\n        }\n        else\n        {\n            Console.WriteLine(name + \" breathes weak flames!\");\n        }\n    }\n    \n    public void Fly()\n    {\n        if (canFly && health > 50)\n        {\n            Console.WriteLine(name + \" soars majestically through the sky!\");\n        }\n        else if (health <= 50)\n        {\n            Console.WriteLine(name + \" is too wounded to fly!\");\n        }\n    }\n    \n    public void Poison()\n    {\n        throw new NotSupportedException(\"Dragon doesn't use poison!\");\n    }\n    \n    public void SummonMinions()\n    {\n        throw new NotSupportedException(\"Dragon doesn't summon minions!\");\n    }\n    \n    public void TakeDamage(int[] damageValues)\n    {\n        int totalDamage = 0;\n        int criticalHits = 0;\n        \n        for (int i = 0; i < damageValues.Length; i++)\n        {\n            if (damageValues[i] > 0)\n            {\n                int reducedDamage = Math.Max(1, damageValues[i] - 5);\n                totalDamage += reducedDamage;\n                \n                if (damageValues[i] > 30)\n                {\n                    criticalHits++;\n                    Console.WriteLine(name + \" roars in pain from critical hit!\");\n                }\n            }\n        }\n        \n        health -= totalDamage;\n        Console.WriteLine(name + \" takes \" + totalDamage + \" damage (\" + criticalHits + \" critical hits)! Health: \" + health);\n        \n        if (health <= 0)\n        {\n            Console.WriteLine(name + \" crashes to the ground, defeated!\");\n            canFly = false;\n        }\n    }\n}\n\nclass Spider : IEnemy\n{\n    private string name;\n    private int health;\n    private bool hasPoison;\n    \n    public Spider(string name)\n    {\n        this.name = name;\n        this.health = 50;\n        this.hasPoison = true;\n    }\n    \n    public void Attack()\n    {\n        Console.WriteLine(name + \" bites with venomous fangs!\");\n    }\n    \n    public void Fly()\n    {\n        throw new NotSupportedException(\"Spider cannot fly!\");\n    }\n    \n    public void Poison()\n    {\n        if (hasPoison)\n        {\n            Console.WriteLine(name + \" injects deadly venom!\");\n        }\n        else\n        {\n            Console.WriteLine(name + \" has no poison left!\");\n        }\n    }\n    \n    public void SummonMinions()\n    {\n        throw new NotSupportedException(\"Spider cannot summon minions!\");\n    }\n    \n    public void TakeDamage(int[] damageValues)\n    {\n        int totalDamage = 0;\n        foreach (int damage in damageValues)\n        {\n            if (damage > 0)\n            {\n                int amplifiedDamage = damage + (damage / 2);\n                totalDamage += amplifiedDamage;\n                \n                if (damage > 10)\n                {\n                    Console.WriteLine(name + \" screeches in pain!\");\n                }\n            }\n        }\n        \n        health -= totalDamage;\n        Console.WriteLine(name + \" takes \" + totalDamage + \" damage! Health: \" + health);\n        \n        if (health <= 0)\n        {\n            Console.WriteLine(name + \" curls up and dies!\");\n        }\n    }\n}\n",
            "output": "using System;\n\ninterface IMeleeAttacker\n{\n    void MeleeAttack();\n}\n\ninterface ISpellCaster\n{\n    void CastSpell();\n}\n\ninterface IFlyer\n{\n    void Fly();\n}\n\ninterface IDefender\n{\n    void Defend();\n}\n\ninterface ISlashingWeapon\n{\n    void Slash();\n}\n\ninterface IRangedWeapon\n{\n    void Shoot();\n}\n\ninterface IEnchantableWeapon\n{\n    void Enchant();\n}\n\ninterface IRepairableWeapon\n{\n    void Repair();\n}\n\ninterface IAttacker\n{\n    void Attack();\n}\n\ninterface IPoisoner\n{\n    void Poison();\n}\n\ninterface IMinionSummoner\n{\n    void SummonMinions();\n}\n\ninterface IDamageable\n{\n    void TakeDamage(int[] damageValues);\n}\n\nclass Mage : ISpellCaster, IFlyer, IDefender\n{\n    private string name;\n    private int mana;\n    private int level;\n    \n    public Mage(string name, int level)\n    {\n        this.name = name;\n        this.mana = 100;\n        this.level = level;\n    }\n    \n    public void CastSpell()\n    {\n        if (mana < 10)\n        {\n            Console.WriteLine(name + \" is out of mana!\");\n            return;\n        }\n        \n        if (level >= 5 && mana >= 30)\n        {\n            Console.WriteLine(name + \" casts a powerful lightning storm!\");\n            mana -= 30;\n        }\n        else if (level >= 3 && mana >= 20)\n        {\n            Console.WriteLine(name + \" casts a fireball spell!\");\n            mana -= 20;\n        }\n        else if (mana >= 10)\n        {\n            Console.WriteLine(name + \" casts a basic magic missile!\");\n            mana -= 10;\n        }\n    }\n    \n    public void Fly()\n    {\n        if (level >= 2)\n        {\n            Console.WriteLine(name + \" soars through the air with magic!\");\n        }\n        else\n        {\n            Console.WriteLine(name + \" is too inexperienced to fly!\");\n        }\n    }\n    \n    public void Defend()\n    {\n        if (mana >= 15)\n        {\n            Console.WriteLine(name + \" creates a magical barrier!\");\n            mana -= 15;\n        }\n        else\n        {\n            Console.WriteLine(name + \" dodges awkwardly!\");\n        }\n    }\n}\n\nclass Fighter : IMeleeAttacker, IDefender\n{\n    private string name;\n    private int stamina;\n    private bool hasWeapon;\n    \n    public Fighter(string name, bool hasWeapon)\n    {\n        this.name = name;\n        this.stamina = 100;\n        this.hasWeapon = hasWeapon;\n    }\n    \n    public void MeleeAttack()\n    {\n        if (stamina < 5)\n        {\n            Console.WriteLine(name + \" is too exhausted to fight!\");\n            return;\n        }\n        \n        if (hasWeapon)\n        {\n            if (stamina >= 20)\n            {\n                Console.WriteLine(name + \" performs a devastating combo attack!\");\n                stamina -= 20;\n            }\n            else if (stamina >= 10)\n            {\n                Console.WriteLine(name + \" swings weapon with force!\");\n                stamina -= 10;\n            }\n            else\n            {\n                Console.WriteLine(name + \" makes a weak weapon strike!\");\n                stamina -= 5;\n            }\n        }\n        else\n        {\n            if (stamina >= 15)\n            {\n                Console.WriteLine(name + \" throws a powerful punch!\");\n                stamina -= 15;\n            }\n            else\n            {\n                Console.WriteLine(name + \" throws a basic punch!\");\n                stamina -= 5;\n            }\n        }\n    }\n    \n    public void Defend()\n    {\n        if (hasWeapon && stamina >= 10)\n        {\n            Console.WriteLine(name + \" blocks with weapon!\");\n            stamina -= 10;\n        }\n        else if (stamina >= 5)\n        {\n            Console.WriteLine(name + \" raises arms to defend!\");\n            stamina -= 5;\n        }\n        else\n        {\n            Console.WriteLine(name + \" barely manages to dodge!\");\n        }\n    }\n}\n\nclass Sword : ISlashingWeapon, IEnchantableWeapon, IRepairableWeapon\n{\n    private int sharpness;\n    private bool isMagic;\n    \n    public Sword(int sharpness, bool isMagic)\n    {\n        this.sharpness = sharpness;\n        this.isMagic = isMagic;\n    }\n    \n    public void Slash()\n    {\n        if (sharpness > 70)\n        {\n            Console.WriteLine(\"Sword cuts cleanly through the target!\");\n        }\n        else if (sharpness > 30)\n        {\n            Console.WriteLine(\"Sword makes a decent cut!\");\n        }\n        else\n        {\n            Console.WriteLine(\"Dull sword barely scratches the target!\");\n        }\n    }\n    \n    public void Enchant()\n    {\n        if (isMagic)\n        {\n            Console.WriteLine(\"Magical sword glows with enhanced power!\");\n            sharpness += 10;\n        }\n        else\n        {\n            throw new NotSupportedException(\"Non-magic sword cannot be enchanted!\");\n        }\n    }\n    \n    public void Repair()\n    {\n        if (sharpness < 100)\n        {\n            sharpness = Math.Min(100, sharpness + 25);\n            Console.WriteLine(\"Sword has been sharpened and repaired!\");\n        }\n        else\n        {\n            Console.WriteLine(\"Sword is already in perfect condition!\");\n        }\n    }\n}\n\nclass Bow : IRangedWeapon, IRepairableWeapon\n{\n    private int arrows;\n    private int range;\n    \n    public Bow(int arrows, int range)\n    {\n        this.arrows = arrows;\n        this.range = range;\n    }\n    \n    public void Shoot()\n    {\n        if (arrows <= 0)\n        {\n            Console.WriteLine(\"No arrows left to shoot!\");\n            return;\n        }\n        \n        if (range > 80)\n        {\n            Console.WriteLine(\"Long-range shot hits the distant target!\");\n        }\n        else if (range > 50)\n        {\n            Console.WriteLine(\"Medium-range shot finds its mark!\");\n        }\n        else\n        {\n            Console.WriteLine(\"Short-range shot barely reaches the target!\");\n        }\n        arrows--;\n    }\n    \n    public void Repair()\n    {\n        if (range < 100)\n        {\n            range = Math.Min(100, range + 15);\n            Console.WriteLine(\"Bow string tightened and wood polished!\");\n        }\n        else\n        {\n            Console.WriteLine(\"Bow is in excellent condition!\");\n        }\n    }\n}\n\nclass Orc : IAttacker, IDamageable\n{\n    private string name;\n    private int health;\n    private int strength;\n    \n    public Orc(string name, int strength)\n    {\n        this.name = name;\n        this.health = 100;\n        this.strength = strength;\n    }\n    \n    public void Attack()\n    {\n        if (strength > 50)\n        {\n            Console.WriteLine(name + \" delivers a crushing blow!\");\n        }\n        else\n        {\n            Console.WriteLine(name + \" swings clumsily!\");\n        }\n    }\n    \n    public void TakeDamage(int[] damageValues)\n    {\n        int totalDamage = 0;\n        for (int i = 0; i < damageValues.Length; i++)\n        {\n            if (damageValues[i] > 0)\n            {\n                totalDamage += damageValues[i];\n                if (damageValues[i] > 20)\n                {\n                    Console.WriteLine(name + \" staggers from heavy damage!\");\n                }\n            }\n        }\n        health -= totalDamage;\n        Console.WriteLine(name + \" takes \" + totalDamage + \" damage! Health: \" + health);\n        \n        if (health <= 0)\n        {\n            Console.WriteLine(name + \" has been defeated!\");\n        }\n    }\n}\n\nclass Dragon : IAttacker, IFlyer, IDamageable\n{\n    private string name;\n    private int health;\n    private int firepower;\n    private bool canFly;\n    \n    public Dragon(string name, int firepower)\n    {\n        this.name = name;\n        this.health = 200;\n        this.firepower = firepower;\n        this.canFly = true;\n    }\n    \n    public void Attack()\n    {\n        if (firepower > 80)\n        {\n            Console.WriteLine(name + \" breathes devastating flames!\");\n        }\n        else if (firepower > 50)\n        {\n            Console.WriteLine(name + \" breathes hot fire!\");\n        }\n        else\n        {\n            Console.WriteLine(name + \" breathes weak flames!\");\n        }\n    }\n    \n    public void Fly()\n    {\n        if (canFly && health > 50)\n        {\n            Console.WriteLine(name + \" soars majestically through the sky!\");\n        }\n        else if (health <= 50)\n        {\n            Console.WriteLine(name + \" is too wounded to fly!\");\n        }\n    }\n    \n    public void TakeDamage(int[] damageValues)\n    {\n        int totalDamage = 0;\n        int criticalHits = 0;\n        \n        for (int i = 0; i < damageValues.Length; i++)\n        {\n            if (damageValues[i] > 0)\n            {\n                int reducedDamage = Math.Max(1, damageValues[i] - 5);\n                totalDamage += reducedDamage;\n                \n                if (damageValues[i] > 30)\n                {\n                    criticalHits++;\n                    Console.WriteLine(name + \" roars in pain from critical hit!\");\n                }\n            }\n        }\n        \n        health -= totalDamage;\n        Console.WriteLine(name + \" takes \" + totalDamage + \" damage (\" + criticalHits + \" critical hits)! Health: \" + health);\n        \n        if (health <= 0)\n        {\n            Console.WriteLine(name + \" crashes to the ground, defeated!\");\n            canFly = false;\n        }\n    }\n}\n\nclass Spider : IAttacker, IPoisoner, IDamageable\n{\n    private string name;\n    private int health;\n    private bool hasPoison;\n    \n    public Spider(string name)\n    {\n        this.name = name;\n        this.health = 50;\n        this.hasPoison = true;\n    }\n    \n    public void Attack()\n    {\n        Console.WriteLine(name + \" bites with venomous fangs!\");\n    }\n    \n    public void Poison()\n    {\n        if (hasPoison)\n        {\n            Console.WriteLine(name + \" injects deadly venom!\");\n        }\n        else\n        {\n            Console.WriteLine(name + \" has no poison left!\");\n        }\n    }\n    \n    public void TakeDamage(int[] damageValues)\n    {\n        int totalDamage = 0;\n        foreach (int damage in damageValues)\n        {\n            if (damage > 0)\n            {\n                int amplifiedDamage = damage + (damage / 2);\n                totalDamage += amplifiedDamage;\n                \n                if (damage > 10)\n                {\n                    Console.WriteLine(name + \" screeches in pain!\");\n                }\n            }\n        }\n        \n        health -= totalDamage;\n        Console.WriteLine(name + \" takes \" + totalDamage + \" damage! Health: \" + health);\n        \n        if (health <= 0)\n        {\n            Console.WriteLine(name + \" curls up and dies!\");\n        }\n    }\n}\n",
            "level": "HARD",
            "language": "CSHARP",
            "violation": "ISP"
        },
        {
            "input": "using System;\n\ninterface IMusicPlayer\n{\n    void Play();\n    void Pause();\n    void Stop();\n    void SkipTrack();\n    void Eject();\n    void SetVolume(int volume);\n    void SetEqualizer(string preset);\n    void DisplayTrackInfo();\n    void Shuffle();\n    void Repeat();\n}\n\ninterface IAdvancedAudioDevice\n{\n    void ConnectBluetooth();\n    void DisconnectBluetooth();\n    void PairDevice(string deviceName);\n    void EnableMicrophone();\n    void DisableMicrophone();\n    void FirmwareUpdate();\n}\n\nclass CDPlayer : IMusicPlayer\n{\n    private bool isPlaying = false;\n    private bool isPaused = false;\n    private string currentTrack = \"Track 1\";\n    private int volume = 50;\n    private bool shuffleMode = false;\n    private bool repeatMode = false;\n\n    public void Play()\n    {\n        isPlaying = true;\n        isPaused = false;\n        Console.WriteLine(\"CD Player: Playing \" + currentTrack);\n    }\n\n    public void Pause()\n    {\n        if (isPlaying)\n        {\n            isPaused = true;\n            isPlaying = false;\n            Console.WriteLine(\"CD Player: Paused\");\n        }\n    }\n\n    public void Stop()\n    {\n        isPlaying = false;\n        isPaused = false;\n        Console.WriteLine(\"CD Player: Stopped\");\n    }\n\n    public void SkipTrack()\n    {\n        Console.WriteLine(\"CD Player: Skipping to next track\");\n        currentTrack = \"Track \" + (int.Parse(currentTrack.Split(' ')[1]) + 1);\n    }\n\n    public void Eject()\n    {\n        Stop();\n        Console.WriteLine(\"CD Player: CD ejected\");\n    }\n\n    public void SetVolume(int volume)\n    {\n        this.volume = volume;\n        Console.WriteLine(\"CD Player: Volume set to \" + volume);\n    }\n\n    public void SetEqualizer(string preset)\n    {\n        Console.WriteLine(\"CD Player: Equalizer set to \" + preset);\n    }\n\n    public void DisplayTrackInfo()\n    {\n        Console.WriteLine(\"CD Player: Current track - \" + currentTrack + \", Volume: \" + volume);\n    }\n\n    public void Shuffle()\n    {\n        shuffleMode = !shuffleMode;\n        Console.WriteLine(\"CD Player: Shuffle \" + (shuffleMode ? \"ON\" : \"OFF\"));\n    }\n\n    public void Repeat()\n    {\n        repeatMode = !repeatMode;\n        Console.WriteLine(\"CD Player: Repeat \" + (repeatMode ? \"ON\" : \"OFF\"));\n    }\n}\n\nclass VinylPlayer : IMusicPlayer\n{\n    private bool isPlaying = false;\n    private bool isPaused = false;\n    private string currentSong = \"Side A\";\n    private int volume = 50;\n\n    public void Play()\n    {\n        isPlaying = true;\n        isPaused = false;\n        Console.WriteLine(\"Vinyl Player: Playing \" + currentSong);\n    }\n\n    public void Pause()\n    {\n        if (isPlaying)\n        {\n            isPaused = true;\n            isPlaying = false;\n            Console.WriteLine(\"Vinyl Player: Paused (needle lifted)\");\n        }\n    }\n\n    public void Stop()\n    {\n        isPlaying = false;\n        isPaused = false;\n        Console.WriteLine(\"Vinyl Player: Stopped\");\n    }\n\n    public void SkipTrack()\n    {\n        throw new NotSupportedException(\"Vinyl players cannot skip tracks - you must manually move the needle!\");\n    }\n\n    public void Eject()\n    {\n        throw new NotSupportedException(\"Vinyl players don't eject - you must manually remove the record!\");\n    }\n\n    public void SetVolume(int volume)\n    {\n        this.volume = volume;\n        Console.WriteLine(\"Vinyl Player: Volume set to \" + volume);\n    }\n\n    public void SetEqualizer(string preset)\n    {\n        throw new NotSupportedException(\"Vintage vinyl players don't have digital equalizers!\");\n    }\n\n    public void DisplayTrackInfo()\n    {\n        Console.WriteLine(\"Vinyl Player: Current side - \" + currentSong + \", Volume: \" + volume);\n    }\n\n    public void Shuffle()\n    {\n        throw new NotSupportedException(\"Cannot shuffle vinyl records!\");\n    }\n\n    public void Repeat()\n    {\n        throw new NotSupportedException(\"Vinyl players don't have automatic repeat!\");\n    }\n}\n\nclass Amplifier : IMusicPlayer\n{\n    private bool isPoweredOn = false;\n    private int volume = 30;\n    private string equalizerSetting = \"Flat\";\n    private bool bassBoost = false;\n\n    public void Play()\n    {\n        throw new NotSupportedException(\"Amplifiers don't play music - they amplify audio signals!\");\n    }\n\n    public void Pause()\n    {\n        throw new NotSupportedException(\"Amplifiers don't control playback!\");\n    }\n\n    public void Stop()\n    {\n        isPoweredOn = false;\n        Console.WriteLine(\"Amplifier: Powered OFF\");\n    }\n\n    public void SkipTrack()\n    {\n        throw new NotSupportedException(\"Amplifiers don't control track selection!\");\n    }\n\n    public void Eject()\n    {\n        throw new NotSupportedException(\"Amplifiers don't have media to eject!\");\n    }\n\n    public void SetVolume(int volume)\n    {\n        if (volume < 0)\n        {\n            this.volume = 0;\n        }\n        else if (volume > 100)\n        {\n            this.volume = 100;\n        }\n        else\n        {\n            this.volume = volume;\n        }\n        if (this.volume > 80)\n        {\n            Console.WriteLine(\"Amplifier: Warning - High volume!\");\n        }\n        Console.WriteLine(\"Amplifier: Master volume set to \" + this.volume);\n    }\n\n    public void SetEqualizer(string preset)\n    {\n        switch (preset.ToLower())\n        {\n            case \"rock\":\n            case \"pop\":\n            case \"jazz\":\n            case \"classical\":\n                equalizerSetting = preset;\n                break;\n            default:\n                equalizerSetting = \"Flat\";\n                Console.WriteLine(\"Amplifier: Unknown preset. Defaulting to Flat.\");\n                return;\n        }\n        Console.WriteLine(\"Amplifier: Equalizer set to \" + equalizerSetting);\n    }\n\n    public void DisplayTrackInfo()\n    {\n        throw new NotSupportedException(\"Amplifiers don't track music information!\");\n    }\n\n    public void Shuffle()\n    {\n        throw new NotSupportedException(\"Amplifiers don't control playback modes!\");\n    }\n\n    public void Repeat()\n    {\n        throw new NotSupportedException(\"Amplifiers don't control playback modes!\");\n    }\n\n    public void PowerOn()\n    {\n        isPoweredOn = true;\n        Console.WriteLine(\"Amplifier: Powered ON\");\n    }\n\n    public void SetBassBoost(bool enabled)\n    {\n        this.bassBoost = enabled;\n        Console.WriteLine(\"Amplifier: Bass boost \" + (enabled ? \"ON\" : \"OFF\"));\n    }\n}\n\nclass BluetoothSpeaker : IMusicPlayer, IAdvancedAudioDevice\n{\n    private bool isConnected = false;\n    private int volume = 50;\n\n    public void Play()\n    {\n        if (isConnected)\n        {\n            Console.WriteLine(\"Bluetooth Speaker: Playing audio\");\n        }\n        else\n        {\n            throw new InvalidOperationException(\"Bluetooth Speaker not connected\");\n        }\n    }\n\n    public void Pause()\n    {\n        Console.WriteLine(\"Bluetooth Speaker: Paused\");\n    }\n\n    public void Stop()\n    {\n        Console.WriteLine(\"Bluetooth Speaker: Stopped\");\n    }\n\n    public void SkipTrack()\n    {\n        Console.WriteLine(\"Bluetooth Speaker: Skipping track\");\n    }\n\n    public void Eject()\n    {\n        throw new NotSupportedException(\"Bluetooth Speakers don't eject media\");\n    }\n\n    public void SetVolume(int volume)\n    {\n        if (volume >= 0 && volume <= 100)\n        {\n            this.volume = volume;\n        }\n        Console.WriteLine(\"Bluetooth Speaker: Volume set to \" + this.volume);\n    }\n\n    public void SetEqualizer(string preset)\n    {\n        Console.WriteLine(\"Bluetooth Speaker: Equalizer set to \" + preset);\n    }\n\n    public void DisplayTrackInfo()\n    {\n        Console.WriteLine(\"Bluetooth Speaker: No track info available\");\n    }\n\n    public void Shuffle()\n    {\n        throw new NotSupportedException(\"Bluetooth Speaker doesn't support shuffle mode\");\n    }\n\n    public void Repeat()\n    {\n        throw new NotSupportedException(\"Bluetooth Speaker doesn't support repeat mode\");\n    }\n\n    public void ConnectBluetooth()\n    {\n        isConnected = true;\n        Console.WriteLine(\"Bluetooth Speaker: Connected\");\n    }\n\n    public void DisconnectBluetooth()\n    {\n        isConnected = false;\n        Console.WriteLine(\"Bluetooth Speaker: Disconnected\");\n    }\n\n    public void PairDevice(string deviceName)\n    {\n        Console.WriteLine(\"Bluetooth Speaker: Paired with \" + deviceName);\n    }\n\n    public void EnableMicrophone()\n    {\n        throw new NotSupportedException(\"Bluetooth Speaker doesn't support microphone\");\n    }\n\n    public void DisableMicrophone()\n    {\n        throw new NotSupportedException(\"Bluetooth Speaker doesn't support microphone\");\n    }\n\n    public void FirmwareUpdate()\n    {\n        Console.WriteLine(\"Bluetooth Speaker: Firmware updated\");\n    }\n}\n\nclass BluetoothHeadphones : IMusicPlayer, IAdvancedAudioDevice\n{\n    private bool isConnected = false;\n    private bool micEnabled = false;\n    private int volume = 30;\n\n    public void Play()\n    {\n        Console.WriteLine(\"Bluetooth Headphones: Playing\");\n    }\n\n    public void Pause()\n    {\n        Console.WriteLine(\"Bluetooth Headphones: Paused\");\n    }\n\n    public void Stop()\n    {\n        Console.WriteLine(\"Bluetooth Headphones: Stopped\");\n    }\n\n    public void SkipTrack()\n    {\n        Console.WriteLine(\"Bluetooth Headphones: Track skipped\");\n    }\n\n    public void Eject()\n    {\n        throw new NotSupportedException(\"Bluetooth Headphones don't eject media\");\n    }\n\n    public void SetVolume(int volume)\n    {\n        if (volume < 0) this.volume = 0;\n        else if (volume > 100) this.volume = 100;\n        else this.volume = volume;\n        Console.WriteLine(\"Bluetooth Headphones: Volume set to \" + this.volume);\n    }\n\n    public void SetEqualizer(string preset)\n    {\n        Console.WriteLine(\"Bluetooth Headphones: Equalizer set to \" + preset);\n    }\n\n    public void DisplayTrackInfo()\n    {\n        Console.WriteLine(\"Bluetooth Headphones: Track info unavailable\");\n    }\n\n    public void Shuffle()\n    {\n        Console.WriteLine(\"Bluetooth Headphones: Shuffle not supported\");\n    }\n\n    public void Repeat()\n    {\n        Console.WriteLine(\"Bluetooth Headphones: Repeat not supported\");\n    }\n\n    public void ConnectBluetooth()\n    {\n        isConnected = true;\n        Console.WriteLine(\"Bluetooth Headphones: Connected\");\n    }\n\n    public void DisconnectBluetooth()\n    {\n        isConnected = false;\n        Console.WriteLine(\"Bluetooth Headphones: Disconnected\");\n    }\n\n    public void PairDevice(string deviceName)\n    {\n        Console.WriteLine(\"Bluetooth Headphones: Paired with \" + deviceName);\n    }\n\n    public void EnableMicrophone()\n    {\n        micEnabled = true;\n        Console.WriteLine(\"Bluetooth Headphones: Microphone enabled\");\n    }\n\n    public void DisableMicrophone()\n    {\n        micEnabled = false;\n        Console.WriteLine(\"Bluetooth Headphones: Microphone disabled\");\n    }\n\n    public void FirmwareUpdate()\n    {\n        Console.WriteLine(\"Bluetooth Headphones: Firmware updated\");\n    }\n}\n",
            "output": "using System;\n\ninterface IPlaybackController\n{\n    void Play();\n    void Pause();\n    void Stop();\n}\n\ninterface ITrackController\n{\n    void SkipTrack();\n}\n\ninterface IMediaEjector\n{\n    void Eject();\n}\n\ninterface IVolumeController\n{\n    void SetVolume(int volume);\n}\n\ninterface IEqualizerController\n{\n    void SetEqualizer(string preset);\n}\n\ninterface ITrackInfoDisplay\n{\n    void DisplayTrackInfo();\n}\n\ninterface IPlaybackModeController\n{\n    void Shuffle();\n    void Repeat();\n}\n\ninterface IBluetoothConnector\n{\n    void ConnectBluetooth();\n    void DisconnectBluetooth();\n    void PairDevice(string deviceName);\n}\n\ninterface IMicrophoneController\n{\n    void EnableMicrophone();\n    void DisableMicrophone();\n}\n\ninterface IFirmwareUpdatable\n{\n    void FirmwareUpdate();\n}\n\nclass CDPlayer : IPlaybackController, ITrackController, IMediaEjector, IVolumeController, IEqualizerController, ITrackInfoDisplay, IPlaybackModeController\n{\n    private bool isPlaying = false;\n    private bool isPaused = false;\n    private string currentTrack = \"Track 1\";\n    private int volume = 50;\n    private bool shuffleMode = false;\n    private bool repeatMode = false;\n\n    public void Play()\n    {\n        isPlaying = true;\n        isPaused = false;\n        Console.WriteLine(\"CD Player: Playing \" + currentTrack);\n    }\n\n    public void Pause()\n    {\n        if (isPlaying)\n        {\n            isPaused = true;\n            isPlaying = false;\n            Console.WriteLine(\"CD Player: Paused\");\n        }\n    }\n\n    public void Stop()\n    {\n        isPlaying = false;\n        isPaused = false;\n        Console.WriteLine(\"CD Player: Stopped\");\n    }\n\n    public void SkipTrack()\n    {\n        Console.WriteLine(\"CD Player: Skipping to next track\");\n        currentTrack = \"Track \" + (int.Parse(currentTrack.Split(' ')[1]) + 1);\n    }\n\n    public void Eject()\n    {\n        Stop();\n        Console.WriteLine(\"CD Player: CD ejected\");\n    }\n\n    public void SetVolume(int volume)\n    {\n        this.volume = volume;\n        Console.WriteLine(\"CD Player: Volume set to \" + volume);\n    }\n\n    public void SetEqualizer(string preset)\n    {\n        Console.WriteLine(\"CD Player: Equalizer set to \" + preset);\n    }\n\n    public void DisplayTrackInfo()\n    {\n        Console.WriteLine(\"CD Player: Current track - \" + currentTrack + \", Volume: \" + volume);\n    }\n\n    public void Shuffle()\n    {\n        shuffleMode = !shuffleMode;\n        Console.WriteLine(\"CD Player: Shuffle \" + (shuffleMode ? \"ON\" : \"OFF\"));\n    }\n\n    public void Repeat()\n    {\n        repeatMode = !repeatMode;\n        Console.WriteLine(\"CD Player: Repeat \" + (repeatMode ? \"ON\" : \"OFF\"));\n    }\n}\n\nclass VinylPlayer : IPlaybackController, IVolumeController, ITrackInfoDisplay\n{\n    private bool isPlaying = false;\n    private bool isPaused = false;\n    private string currentSong = \"Side A\";\n    private int volume = 50;\n\n    public void Play()\n    {\n        isPlaying = true;\n        isPaused = false;\n        Console.WriteLine(\"Vinyl Player: Playing \" + currentSong);\n    }\n\n    public void Pause()\n    {\n        if (isPlaying)\n        {\n            isPaused = true;\n            isPlaying = false;\n            Console.WriteLine(\"Vinyl Player: Paused (needle lifted)\");\n        }\n    }\n\n    public void Stop()\n    {\n        isPlaying = false;\n        isPaused = false;\n        Console.WriteLine(\"Vinyl Player: Stopped\");\n    }\n\n    public void SetVolume(int volume)\n    {\n        this.volume = volume;\n        Console.WriteLine(\"Vinyl Player: Volume set to \" + volume);\n    }\n\n    public void DisplayTrackInfo()\n    {\n        Console.WriteLine(\"Vinyl Player: Current side - \" + currentSong + \", Volume: \" + volume);\n    }\n}\n\nclass Amplifier : IVolumeController, IEqualizerController\n{\n    private bool isPoweredOn = false;\n    private int volume = 30;\n    private string equalizerSetting = \"Flat\";\n    private bool bassBoost = false;\n\n    public void Stop()\n    {\n        isPoweredOn = false;\n        Console.WriteLine(\"Amplifier: Powered OFF\");\n    }\n\n    public void SetVolume(int volume)\n    {\n        if (volume < 0)\n        {\n            this.volume = 0;\n        }\n        else if (volume > 100)\n        {\n            this.volume = 100;\n        }\n        else\n        {\n            this.volume = volume;\n        }\n        if (this.volume > 80)\n        {\n            Console.WriteLine(\"Amplifier: Warning - High volume!\");\n        }\n        Console.WriteLine(\"Amplifier: Master volume set to \" + this.volume);\n    }\n\n    public void SetEqualizer(string preset)\n    {\n        switch (preset.ToLower())\n        {\n            case \"rock\":\n            case \"pop\":\n            case \"jazz\":\n            case \"classical\":\n                equalizerSetting = preset;\n                break;\n            default:\n                equalizerSetting = \"Flat\";\n                Console.WriteLine(\"Amplifier: Unknown preset. Defaulting to Flat.\");\n                return;\n        }\n        Console.WriteLine(\"Amplifier: Equalizer set to \" + equalizerSetting);\n    }\n\n    public void PowerOn()\n    {\n        isPoweredOn = true;\n        Console.WriteLine(\"Amplifier: Powered ON\");\n    }\n\n    public void SetBassBoost(bool enabled)\n    {\n        this.bassBoost = enabled;\n        Console.WriteLine(\"Amplifier: Bass boost \" + (enabled ? \"ON\" : \"OFF\"));\n    }\n}\n\nclass BluetoothSpeaker : IPlaybackController, ITrackController, IVolumeController, IEqualizerController, ITrackInfoDisplay, IBluetoothConnector, IFirmwareUpdatable\n{\n    private bool isConnected = false;\n    private int volume = 50;\n\n    public void Play()\n    {\n        if (isConnected)\n        {\n            Console.WriteLine(\"Bluetooth Speaker: Playing audio\");\n        }\n        else\n        {\n            throw new InvalidOperationException(\"Bluetooth Speaker not connected\");\n        }\n    }\n\n    public void Pause()\n    {\n        Console.WriteLine(\"Bluetooth Speaker: Paused\");\n    }\n\n    public void Stop()\n    {\n        Console.WriteLine(\"Bluetooth Speaker: Stopped\");\n    }\n\n    public void SkipTrack()\n    {\n        Console.WriteLine(\"Bluetooth Speaker: Skipping track\");\n    }\n\n    public void SetVolume(int volume)\n    {\n        if (volume >= 0 && volume <= 100)\n        {\n            this.volume = volume;\n        }\n        Console.WriteLine(\"Bluetooth Speaker: Volume set to \" + this.volume);\n    }\n\n    public void SetEqualizer(string preset)\n    {\n        Console.WriteLine(\"Bluetooth Speaker: Equalizer set to \" + preset);\n    }\n\n    public void DisplayTrackInfo()\n    {\n        Console.WriteLine(\"Bluetooth Speaker: No track info available\");\n    }\n\n    public void ConnectBluetooth()\n    {\n        isConnected = true;\n        Console.WriteLine(\"Bluetooth Speaker: Connected\");\n    }\n\n    public void DisconnectBluetooth()\n    {\n        isConnected = false;\n        Console.WriteLine(\"Bluetooth Speaker: Disconnected\");\n    }\n\n    public void PairDevice(string deviceName)\n    {\n        Console.WriteLine(\"Bluetooth Speaker: Paired with \" + deviceName);\n    }\n\n    public void FirmwareUpdate()\n    {\n        Console.WriteLine(\"Bluetooth Speaker: Firmware updated\");\n    }\n}\n\nclass BluetoothHeadphones : IPlaybackController, ITrackController, IVolumeController, IEqualizerController, ITrackInfoDisplay, IBluetoothConnector, IMicrophoneController, IFirmwareUpdatable\n{\n    private bool isConnected = false;\n    private bool micEnabled = false;\n    private int volume = 30;\n\n    public void Play()\n    {\n        Console.WriteLine(\"Bluetooth Headphones: Playing\");\n    }\n\n    public void Pause()\n    {\n        Console.WriteLine(\"Bluetooth Headphones: Paused\");\n    }\n\n    public void Stop()\n    {\n        Console.WriteLine(\"Bluetooth Headphones: Stopped\");\n    }\n\n    public void SkipTrack()\n    {\n        Console.WriteLine(\"Bluetooth Headphones: Track skipped\");\n    }\n\n    public void SetVolume(int volume)\n    {\n        if (volume < 0) this.volume = 0;\n        else if (volume > 100) this.volume = 100;\n        else this.volume = volume;\n        Console.WriteLine(\"Bluetooth Headphones: Volume set to \" + this.volume);\n    }\n\n    public void SetEqualizer(string preset)\n    {\n        Console.WriteLine(\"Bluetooth Headphones: Equalizer set to \" + preset);\n    }\n\n    public void DisplayTrackInfo()\n    {\n        Console.WriteLine(\"Bluetooth Headphones: Track info unavailable\");\n    }\n\n    public void ConnectBluetooth()\n    {\n        isConnected = true;\n        Console.WriteLine(\"Bluetooth Headphones: Connected\");\n    }\n\n    public void DisconnectBluetooth()\n    {\n        isConnected = false;\n        Console.WriteLine(\"Bluetooth Headphones: Disconnected\");\n    }\n\n    public void PairDevice(string deviceName)\n    {\n        Console.WriteLine(\"Bluetooth Headphones: Paired with \" + deviceName);\n    }\n\n    public void EnableMicrophone()\n    {\n        micEnabled = true;\n        Console.WriteLine(\"Bluetooth Headphones: Microphone enabled\");\n    }\n\n    public void DisableMicrophone()\n    {\n        micEnabled = false;\n        Console.WriteLine(\"Bluetooth Headphones: Microphone disabled\");\n    }\n\n    public void FirmwareUpdate()\n    {\n        Console.WriteLine(\"Bluetooth Headphones: Firmware updated\");\n    }\n}\n",
            "level": "HARD",
            "language": "CSHARP",
            "violation": "ISP"
        },
        {
            "input": "using System;\n\ninterface IRestaurantWorker\n{\n    void CookFood();\n    void ServeCustomers();\n    void CleanTables();\n    void ManageStaff();\n    void HandlePayments();\n    void OrderSupplies();\n    void TrainNewEmployees();\n    void ConductMeetings();\n}\n\ninterface IMachineWorker\n{\n    void WashDishes();\n    void VacuumFloor();\n    void SelfDiagnose();\n    void PlayMusic();\n    void AdjustTemperature();\n    void SecurityScan();\n    void UpdateSoftware();\n    void GenerateReports();\n}\n\nclass Chef : IRestaurantWorker\n{\n    private int mealsCooked = 0;\n    private string[] recipes = {\"pasta\", \"pizza\", \"salad\", \"soup\", \"steak\"};\n    private bool isHeadChef = true;\n\n    public void CookFood()\n    {\n        for (int i = 0; i < recipes.Length; i++)\n        {\n            if (mealsCooked < 50)\n            {\n                if (recipes[i].Equals(\"steak\") && isHeadChef)\n                {\n                    Console.WriteLine(\"Head Chef is preparing premium \" + recipes[i]);\n                    mealsCooked += 2;\n                }\n                else if (recipes[i].Equals(\"pasta\") || recipes[i].Equals(\"pizza\"))\n                {\n                    Console.WriteLine(\"Chef is cooking \" + recipes[i]);\n                    mealsCooked++;\n                }\n                else\n                {\n                    Console.WriteLine(\"Chef is preparing simple \" + recipes[i]);\n                }\n            }\n        }\n    }\n\n    public void ServeCustomers()\n    {\n        Console.WriteLine(\"Chef does not serve customers.\");\n    }\n\n    public void CleanTables()\n    {\n        Console.WriteLine(\"Chef does not clean tables.\");\n    }\n\n    public void ManageStaff()\n    {\n        if (isHeadChef)\n        {\n            Console.WriteLine(\"Head Chef is managing kitchen staff.\");\n        }\n        else\n        {\n            Console.WriteLine(\"Chef does not manage staff.\");\n        }\n    }\n\n    public void HandlePayments()\n    {\n        Console.WriteLine(\"Chef does not handle payments.\");\n    }\n\n    public void OrderSupplies()\n    {\n        if (isHeadChef)\n        {\n            for (int i = 1; i <= 3; i++)\n            {\n                Console.WriteLine(\"Head Chef ordering kitchen supplies batch \" + i);\n            }\n        }\n        else\n        {\n            Console.WriteLine(\"Chef does not order supplies.\");\n        }\n    }\n\n    public void TrainNewEmployees()\n    {\n        Console.WriteLine(\"Chef does not train employees.\");\n    }\n\n    public void ConductMeetings()\n    {\n        Console.WriteLine(\"Chef does not conduct meetings.\");\n    }\n}\n\nclass Waiter : IRestaurantWorker\n{\n    private int tablesServed = 0;\n    private bool isExperienced = false;\n    private string[] customerTypes = {\"regular\", \"vip\", \"family\", \"business\"};\n\n    public void CookFood()\n    {\n        Console.WriteLine(\"Waiter does not cook food.\");\n    }\n\n    public void ServeCustomers()\n    {\n        foreach (string customerType in customerTypes)\n        {\n            if (tablesServed < 20)\n            {\n                if (customerType.Equals(\"vip\") && isExperienced)\n                {\n                    Console.WriteLine(\"Experienced waiter serving VIP customers\");\n                    tablesServed += 2;\n                }\n                else if (customerType.Equals(\"family\"))\n                {\n                    Console.WriteLine(\"Waiter serving family table\");\n                    tablesServed++;\n                }\n                else if (customerType.Equals(\"business\"))\n                {\n                    for (int i = 1; i <= 2; i++)\n                    {\n                        Console.WriteLine(\"Waiter taking business order \" + i);\n                    }\n                    tablesServed++;\n                }\n                else\n                {\n                    Console.WriteLine(\"Waiter serving \" + customerType + \" customers\");\n                    tablesServed++;\n                }\n            }\n        }\n    }\n\n    public void CleanTables()\n    {\n        for (int table = 1; table <= 10; table++)\n        {\n            if (table % 2 == 0)\n            {\n                Console.WriteLine(\"Waiter cleaning table \" + table + \" thoroughly\");\n            }\n            else if (table > 5)\n            {\n                Console.WriteLine(\"Waiter quick clean table \" + table);\n            }\n            else\n            {\n                Console.WriteLine(\"Waiter wiping table \" + table);\n            }\n        }\n    }\n\n    public void ManageStaff()\n    {\n        Console.WriteLine(\"Waiter does not manage staff.\");\n    }\n\n    public void HandlePayments()\n    {\n        Console.WriteLine(\"Waiter does not handle payments.\");\n    }\n\n    public void OrderSupplies()\n    {\n        Console.WriteLine(\"Waiter does not order supplies.\");\n    }\n\n    public void TrainNewEmployees()\n    {\n        Console.WriteLine(\"Waiter does not train employees.\");\n    }\n\n    public void ConductMeetings()\n    {\n        Console.WriteLine(\"Waiter does not conduct meetings.\");\n    }\n}\n\nclass Manager : IRestaurantWorker\n{\n    private bool conflict = true;\n    private int teamSize = 15;\n    private string[] departments = {\"kitchen\", \"service\", \"cleaning\", \"security\"};\n    private bool isBusy = false;\n\n    public void CookFood()\n    {\n        Console.WriteLine(\"Manager does not cook.\");\n    }\n\n    public void ServeCustomers()\n    {\n        Console.WriteLine(\"Manager does not serve.\");\n    }\n\n    public void CleanTables()\n    {\n        Console.WriteLine(\"Manager does not clean.\");\n    }\n\n    public void ManageStaff()\n    {\n        foreach (string dept in departments)\n        {\n            if (conflict && dept.Equals(\"kitchen\"))\n            {\n                Console.WriteLine(\"Manager resolving kitchen conflict\");\n            }\n            else if (teamSize > 10 && dept.Equals(\"service\"))\n            {\n                for (int i = 1; i <= 3; i++)\n                {\n                    Console.WriteLine(\"Manager scheduling service team shift \" + i);\n                }\n            }\n            else if (dept.Equals(\"security\") && !isBusy)\n            {\n                Console.WriteLine(\"Manager checking security protocols\");\n            }\n            else\n            {\n                Console.WriteLine(\"Manager overseeing \" + dept + \" department\");\n            }\n        }\n    }\n\n    public void HandlePayments()\n    {\n        for (int transaction = 1; transaction <= 5; transaction++)\n        {\n            if (transaction > 3)\n            {\n                Console.WriteLine(\"Manager approving large payment \" + transaction);\n            }\n            else\n            {\n                Console.WriteLine(\"Manager processing payment \" + transaction);\n            }\n        }\n    }\n\n    public void OrderSupplies()\n    {\n        Console.WriteLine(\"Manager coordinating supply orders\");\n    }\n\n    public void TrainNewEmployees()\n    {\n        Console.WriteLine(\"Manager conducting orientation\");\n    }\n\n    public void ConductMeetings()\n    {\n        Console.WriteLine(\"Manager leading staff meetings\");\n    }\n}\n\nclass Cashier : IRestaurantWorker\n{\n    private double dailyRevenue = 0;\n    private int customersServed = 0;\n\n    public void CookFood()\n    {\n        Console.WriteLine(\"Cashier does not cook food.\");\n    }\n\n    public void ServeCustomers()\n    {\n        Console.WriteLine(\"Cashier does not serve at tables.\");\n    }\n\n    public void CleanTables()\n    {\n        Console.WriteLine(\"Cashier does not clean tables.\");\n    }\n\n    public void ManageStaff()\n    {\n        Console.WriteLine(\"Cashier does not manage staff.\");\n    }\n\n    public void HandlePayments()\n    {\n        double[] payments = {15.50, 23.75, 45.00, 12.25, 67.80};\n        foreach (double payment in payments)\n        {\n            if (payment > 50.00)\n            {\n                Console.WriteLine(\"Cashier processing large payment: $\" + payment);\n                dailyRevenue += payment * 1.1;\n            }\n            else if (payment < 20.00)\n            {\n                Console.WriteLine(\"Cashier handling small payment: $\" + payment);\n                dailyRevenue += payment;\n            }\n            else\n            {\n                Console.WriteLine(\"Cashier processing payment: $\" + payment);\n                dailyRevenue += payment;\n            }\n            customersServed++;\n        }\n    }\n\n    public void OrderSupplies()\n    {\n        Console.WriteLine(\"Cashier does not order supplies.\");\n    }\n\n    public void TrainNewEmployees()\n    {\n        Console.WriteLine(\"Cashier does not train employees.\");\n    }\n\n    public void ConductMeetings()\n    {\n        Console.WriteLine(\"Cashier does not conduct meetings.\");\n    }\n}\n\nclass Dishwasher : IMachineWorker\n{\n    int dirtyItems = 25;\n    bool isIndustrialGrade = true;\n    string[] dishTypes = {\"plates\", \"cups\", \"utensils\", \"pots\"};\n\n    public void WashDishes()\n    {\n        foreach (string dishType in dishTypes)\n        {\n            if (dirtyItems > 0)\n            {\n                if (dishType.Equals(\"pots\") && isIndustrialGrade)\n                {\n                    for (int cycle = 1; cycle <= 3; cycle++)\n                    {\n                        Console.WriteLine(\"Industrial dishwasher cleaning \" + dishType + \" cycle \" + cycle);\n                        dirtyItems -= 2;\n                    }\n                }\n                else if (dishType.Equals(\"plates\") || dishType.Equals(\"cups\"))\n                {\n                    Console.WriteLine(\"Dishwasher cleaning \" + dirtyItems + \" \" + dishType);\n                    dirtyItems -= 5;\n                }\n                else\n                {\n                    Console.WriteLine(\"Dishwasher processing \" + dishType);\n                    dirtyItems -= 3;\n                }\n            }\n            else\n            {\n                Console.WriteLine(\"No \" + dishType + \" to clean.\");\n            }\n        }\n    }\n\n    public void VacuumFloor()\n    {\n        Console.WriteLine(\"Dishwasher cannot vacuum the floor.\");\n    }\n\n    public void SelfDiagnose()\n    {\n        for (int system = 1; system <= 4; system++)\n        {\n            if (system == 1)\n            {\n                Console.WriteLine(\"Dishwasher checking water system\");\n            }\n            else if (system == 2)\n            {\n                Console.WriteLine(\"Dishwasher testing heating element\");\n            }\n            else\n            {\n                Console.WriteLine(\"Dishwasher running diagnostic \" + system);\n            }\n        }\n    }\n\n    public void PlayMusic()\n    {\n        Console.WriteLine(\"Dishwasher cannot play music.\");\n    }\n\n    public void AdjustTemperature()\n    {\n        Console.WriteLine(\"Dishwasher cannot adjust room temperature.\");\n    }\n\n    public void SecurityScan()\n    {\n        Console.WriteLine(\"Dishwasher cannot perform security scan.\");\n    }\n\n    public void UpdateSoftware()\n    {\n        Console.WriteLine(\"Dishwasher cannot update software.\");\n    }\n\n    public void GenerateReports()\n    {\n        Console.WriteLine(\"Dishwasher cannot generate reports.\");\n    }\n}\n\nclass VacuumCleaner : IMachineWorker\n{\n    bool isCharged = false;\n    int batteryLevel = 30;\n    string[] cleaningModes = {\"eco\", \"normal\", \"turbo\"};\n\n    public void WashDishes()\n    {\n        Console.WriteLine(\"Vacuum cleaner cannot wash dishes.\");\n    }\n\n    public void VacuumFloor()\n    {\n        foreach (string mode in cleaningModes)\n        {\n            if (isCharged || batteryLevel > 20)\n            {\n                if (mode.Equals(\"turbo\") && batteryLevel > 50)\n                {\n                    Console.WriteLine(\"Vacuum cleaner using turbo mode\");\n                    batteryLevel -= 15;\n                }\n                else if (mode.Equals(\"normal\") && batteryLevel > 30)\n                {\n                    for (int room = 1; room <= 3; room++)\n                    {\n                        Console.WriteLine(\"Vacuum cleaning room \" + room + \" in normal mode\");\n                    }\n                    batteryLevel -= 10;\n                }\n                else if (mode.Equals(\"eco\"))\n                {\n                    Console.WriteLine(\"Vacuum using eco mode to save battery\");\n                    batteryLevel -= 5;\n                }\n                else\n                {\n                    Console.WriteLine(\"Battery too low for \" + mode + \" mode\");\n                }\n            }\n            else\n            {\n                Console.WriteLine(\"Vacuum cleaner battery critically low\");\n            }\n        }\n    }\n\n    public void SelfDiagnose()\n    {\n        Console.WriteLine(\"Vacuum cleaner running diagnostics.\");\n    }\n\n    public void PlayMusic()\n    {\n        Console.WriteLine(\"Vacuum cleaner cannot play music.\");\n    }\n\n    public void AdjustTemperature()\n    {\n        Console.WriteLine(\"Vacuum cleaner cannot adjust temperature.\");\n    }\n\n    public void SecurityScan()\n    {\n        Console.WriteLine(\"Vacuum cleaner cannot perform security scan.\");\n    }\n\n    public void UpdateSoftware()\n    {\n        Console.WriteLine(\"Vacuum cleaner cannot update software.\");\n    }\n\n    public void GenerateReports()\n    {\n        Console.WriteLine(\"Vacuum cleaner cannot generate reports.\");\n    }\n}\n\nclass SmartKiosk : IMachineWorker\n{\n    bool isOnline = true;\n    int customerInteractions = 0;\n    string[] services = {\"orders\", \"payments\", \"information\", \"entertainment\"};\n\n    public void WashDishes()\n    {\n        Console.WriteLine(\"Smart kiosk cannot wash dishes.\");\n    }\n\n    public void VacuumFloor()\n    {\n        Console.WriteLine(\"Smart kiosk cannot vacuum floor.\");\n    }\n\n    public void SelfDiagnose()\n    {\n        for (int component = 1; component <= 5; component++)\n        {\n            if (component == 1)\n            {\n                Console.WriteLine(\"Kiosk checking network connection\");\n            }\n            else if (component == 2 && isOnline)\n            {\n                Console.WriteLine(\"Kiosk testing payment processor\");\n            }\n            else if (component > 3)\n            {\n                Console.WriteLine(\"Kiosk running system check \" + component);\n            }\n            else\n            {\n                Console.WriteLine(\"Kiosk diagnostic component \" + component);\n            }\n        }\n    }\n\n    public void PlayMusic()\n    {\n        foreach (string service in services)\n        {\n            if (service.Equals(\"entertainment\") && customerInteractions < 50)\n            {\n                for (int playlist = 1; playlist <= 3; playlist++)\n                {\n                    Console.WriteLine(\"Kiosk playing background music playlist \" + playlist);\n                }\n            }\n            else if (service.Equals(\"information\"))\n            {\n                Console.WriteLine(\"Kiosk providing audio information\");\n            }\n        }\n    }\n\n    public void AdjustTemperature()\n    {\n        Console.WriteLine(\"Smart kiosk cannot adjust temperature.\");\n    }\n\n    public void SecurityScan()\n    {\n        if (isOnline)\n        {\n            Console.WriteLine(\"Kiosk performing security scan\");\n        }\n        else\n        {\n            Console.WriteLine(\"Kiosk offline - cannot scan\");\n        }\n    }\n\n    public void UpdateSoftware()\n    {\n        Console.WriteLine(\"Kiosk updating software\");\n    }\n\n    public void GenerateReports()\n    {\n        Console.WriteLine(\"Kiosk generating usage reports\");\n    }\n}\n\nclass SecurityBot : IMachineWorker\n{\n    bool isPatrolling = true;\n    int alertLevel = 2;\n    string[] zones = {\"entrance\", \"dining\", \"kitchen\", \"storage\"};\n\n    public void WashDishes()\n    {\n        Console.WriteLine(\"Security bot cannot wash dishes.\");\n    }\n\n    public void VacuumFloor()\n    {\n        Console.WriteLine(\"Security bot cannot vacuum floor.\");\n    }\n\n    public void SelfDiagnose()\n    {\n        Console.WriteLine(\"Security bot running diagnostics.\");\n    }\n\n    public void PlayMusic()\n    {\n        Console.WriteLine(\"Security bot cannot play music.\");\n    }\n\n    public void AdjustTemperature()\n    {\n        Console.WriteLine(\"Security bot cannot adjust temperature.\");\n    }\n\n    public void SecurityScan()\n    {\n        foreach (string zone in zones)\n        {\n            if (isPatrolling && alertLevel > 1)\n            {\n                if (zone.Equals(\"entrance\") || zone.Equals(\"storage\"))\n                {\n                    for (int scan = 1; scan <= 2; scan++)\n                    {\n                        Console.WriteLine(\"Security bot high-priority scan \" + zone + \" pass \" + scan);\n                    }\n                }\n                else if (alertLevel > 3)\n                {\n                    Console.WriteLine(\"Security bot emergency scan \" + zone);\n                }\n                else\n                {\n                    Console.WriteLine(\"Security bot scanning \" + zone);\n                }\n            }\n        }\n    }\n\n    public void UpdateSoftware()\n    {\n        Console.WriteLine(\"Security bot updating patrol algorithms\");\n    }\n\n    public void GenerateReports()\n    {\n        Console.WriteLine(\"Security bot generating incident reports\");\n    }\n}\n",
            "output": "using System;\n\ninterface IFoodPreparation\n{\n    void CookFood();\n}\n\ninterface ICustomerService\n{\n    void ServeCustomers();\n}\n\ninterface ICleaning\n{\n    void CleanTables();\n}\n\ninterface IStaffManagement\n{\n    void ManageStaff();\n}\n\ninterface IPaymentProcessing\n{\n    void HandlePayments();\n}\n\ninterface ISupplyManagement\n{\n    void OrderSupplies();\n}\n\ninterface ITraining\n{\n    void TrainNewEmployees();\n}\n\ninterface IMeetingManagement\n{\n    void ConductMeetings();\n}\n\ninterface IDishWashing\n{\n    void WashDishes();\n}\n\ninterface IFloorCleaning\n{\n    void VacuumFloor();\n}\n\ninterface ISelfDiagnostics\n{\n    void SelfDiagnose();\n}\n\ninterface IEntertainment\n{\n    void PlayMusic();\n}\n\ninterface ITemperatureControl\n{\n    void AdjustTemperature();\n}\n\ninterface ISecurityOperations\n{\n    void SecurityScan();\n}\n\ninterface ISoftwareManagement\n{\n    void UpdateSoftware();\n}\n\ninterface IReportGeneration\n{\n    void GenerateReports();\n}\n\nclass Chef : IFoodPreparation, IStaffManagement, ISupplyManagement\n{\n    private int mealsCooked = 0;\n    private string[] recipes = {\"pasta\", \"pizza\", \"salad\", \"soup\", \"steak\"};\n    private bool isHeadChef = true;\n\n    public void CookFood()\n    {\n        for (int i = 0; i < recipes.Length; i++)\n        {\n            if (mealsCooked < 50)\n            {\n                if (recipes[i].Equals(\"steak\") && isHeadChef)\n                {\n                    Console.WriteLine(\"Head Chef is preparing premium \" + recipes[i]);\n                    mealsCooked += 2;\n                }\n                else if (recipes[i].Equals(\"pasta\") || recipes[i].Equals(\"pizza\"))\n                {\n                    Console.WriteLine(\"Chef is cooking \" + recipes[i]);\n                    mealsCooked++;\n                }\n                else\n                {\n                    Console.WriteLine(\"Chef is preparing simple \" + recipes[i]);\n                }\n            }\n        }\n    }\n\n    public void ManageStaff()\n    {\n        if (isHeadChef)\n        {\n            Console.WriteLine(\"Head Chef is managing kitchen staff.\");\n        }\n        else\n        {\n            Console.WriteLine(\"Chef does not manage staff.\");\n        }\n    }\n\n    public void OrderSupplies()\n    {\n        if (isHeadChef)\n        {\n            for (int i = 1; i <= 3; i++)\n            {\n                Console.WriteLine(\"Head Chef ordering kitchen supplies batch \" + i);\n            }\n        }\n        else\n        {\n            Console.WriteLine(\"Chef does not order supplies.\");\n        }\n    }\n}\n\nclass Waiter : ICustomerService, ICleaning\n{\n    private int tablesServed = 0;\n    private bool isExperienced = false;\n    private string[] customerTypes = {\"regular\", \"vip\", \"family\", \"business\"};\n\n    public void ServeCustomers()\n    {\n        foreach (string customerType in customerTypes)\n        {\n            if (tablesServed < 20)\n            {\n                if (customerType.Equals(\"vip\") && isExperienced)\n                {\n                    Console.WriteLine(\"Experienced waiter serving VIP customers\");\n                    tablesServed += 2;\n                }\n                else if (customerType.Equals(\"family\"))\n                {\n                    Console.WriteLine(\"Waiter serving family table\");\n                    tablesServed++;\n                }\n                else if (customerType.Equals(\"business\"))\n                {\n                    for (int i = 1; i <= 2; i++)\n                    {\n                        Console.WriteLine(\"Waiter taking business order \" + i);\n                    }\n                    tablesServed++;\n                }\n                else\n                {\n                    Console.WriteLine(\"Waiter serving \" + customerType + \" customers\");\n                    tablesServed++;\n                }\n            }\n        }\n    }\n\n    public void CleanTables()\n    {\n        for (int table = 1; table <= 10; table++)\n        {\n            if (table % 2 == 0)\n            {\n                Console.WriteLine(\"Waiter cleaning table \" + table + \" thoroughly\");\n            }\n            else if (table > 5)\n            {\n                Console.WriteLine(\"Waiter quick clean table \" + table);\n            }\n            else\n            {\n                Console.WriteLine(\"Waiter wiping table \" + table);\n            }\n        }\n    }\n}\n\nclass Manager : IStaffManagement, IPaymentProcessing, ISupplyManagement, ITraining, IMeetingManagement\n{\n    private bool conflict = true;\n    private int teamSize = 15;\n    private string[] departments = {\"kitchen\", \"service\", \"cleaning\", \"security\"};\n    private bool isBusy = false;\n\n    public void ManageStaff()\n    {\n        foreach (string dept in departments)\n        {\n            if (conflict && dept.Equals(\"kitchen\"))\n            {\n                Console.WriteLine(\"Manager resolving kitchen conflict\");\n            }\n            else if (teamSize > 10 && dept.Equals(\"service\"))\n            {\n                for (int i = 1; i <= 3; i++)\n                {\n                    Console.WriteLine(\"Manager scheduling service team shift \" + i);\n                }\n            }\n            else if (dept.Equals(\"security\") && !isBusy)\n            {\n                Console.WriteLine(\"Manager checking security protocols\");\n            }\n            else\n            {\n                Console.WriteLine(\"Manager overseeing \" + dept + \" department\");\n            }\n        }\n    }\n\n    public void HandlePayments()\n    {\n        for (int transaction = 1; transaction <= 5; transaction++)\n        {\n            if (transaction > 3)\n            {\n                Console.WriteLine(\"Manager approving large payment \" + transaction);\n            }\n            else\n            {\n                Console.WriteLine(\"Manager processing payment \" + transaction);\n            }\n        }\n    }\n\n    public void OrderSupplies()\n    {\n        Console.WriteLine(\"Manager coordinating supply orders\");\n    }\n\n    public void TrainNewEmployees()\n    {\n        Console.WriteLine(\"Manager conducting orientation\");\n    }\n\n    public void ConductMeetings()\n    {\n        Console.WriteLine(\"Manager leading staff meetings\");\n    }\n}\n\nclass Cashier : IPaymentProcessing\n{\n    private double dailyRevenue = 0;\n    private int customersServed = 0;\n\n    public void HandlePayments()\n    {\n        double[] payments = {15.50, 23.75, 45.00, 12.25, 67.80};\n        foreach (double payment in payments)\n        {\n            if (payment > 50.00)\n            {\n                Console.WriteLine(\"Cashier processing large payment: $\" + payment);\n                dailyRevenue += payment * 1.1;\n            }\n            else if (payment < 20.00)\n            {\n                Console.WriteLine(\"Cashier handling small payment: $\" + payment);\n                dailyRevenue += payment;\n            }\n            else\n            {\n                Console.WriteLine(\"Cashier processing payment: $\" + payment);\n                dailyRevenue += payment;\n            }\n            customersServed++;\n        }\n    }\n}\n\nclass Dishwasher : IDishWashing, ISelfDiagnostics\n{\n    int dirtyItems = 25;\n    bool isIndustrialGrade = true;\n    string[] dishTypes = {\"plates\", \"cups\", \"utensils\", \"pots\"};\n\n    public void WashDishes()\n    {\n        foreach (string dishType in dishTypes)\n        {\n            if (dirtyItems > 0)\n            {\n                if (dishType.Equals(\"pots\") && isIndustrialGrade)\n                {\n                    for (int cycle = 1; cycle <= 3; cycle++)\n                    {\n                        Console.WriteLine(\"Industrial dishwasher cleaning \" + dishType + \" cycle \" + cycle);\n                        dirtyItems -= 2;\n                    }\n                }\n                else if (dishType.Equals(\"plates\") || dishType.Equals(\"cups\"))\n                {\n                    Console.WriteLine(\"Dishwasher cleaning \" + dirtyItems + \" \" + dishType);\n                    dirtyItems -= 5;\n                }\n                else\n                {\n                    Console.WriteLine(\"Dishwasher processing \" + dishType);\n                    dirtyItems -= 3;\n                }\n            }\n            else\n            {\n                Console.WriteLine(\"No \" + dishType + \" to clean.\");\n            }\n        }\n    }\n\n    public void SelfDiagnose()\n    {\n        for (int system = 1; system <= 4; system++)\n        {\n            if (system == 1)\n            {\n                Console.WriteLine(\"Dishwasher checking water system\");\n            }\n            else if (system == 2)\n            {\n                Console.WriteLine(\"Dishwasher testing heating element\");\n            }\n            else\n            {\n                Console.WriteLine(\"Dishwasher running diagnostic \" + system);\n            }\n        }\n    }\n}\n\nclass VacuumCleaner : IFloorCleaning, ISelfDiagnostics\n{\n    bool isCharged = false;\n    int batteryLevel = 30;\n    string[] cleaningModes = {\"eco\", \"normal\", \"turbo\"};\n\n    public void VacuumFloor()\n    {\n        foreach (string mode in cleaningModes)\n        {\n            if (isCharged || batteryLevel > 20)\n            {\n                if (mode.Equals(\"turbo\") && batteryLevel > 50)\n                {\n                    Console.WriteLine(\"Vacuum cleaner using turbo mode\");\n                    batteryLevel -= 15;\n                }\n                else if (mode.Equals(\"normal\") && batteryLevel > 30)\n                {\n                    for (int room = 1; room <= 3; room++)\n                    {\n                        Console.WriteLine(\"Vacuum cleaning room \" + room + \" in normal mode\");\n                    }\n                    batteryLevel -= 10;\n                }\n                else if (mode.Equals(\"eco\"))\n                {\n                    Console.WriteLine(\"Vacuum using eco mode to save battery\");\n                    batteryLevel -= 5;\n                }\n                else\n                {\n                    Console.WriteLine(\"Battery too low for \" + mode + \" mode\");\n                }\n            }\n            else\n            {\n                Console.WriteLine(\"Vacuum cleaner battery critically low\");\n            }\n        }\n    }\n\n    public void SelfDiagnose()\n    {\n        Console.WriteLine(\"Vacuum cleaner running diagnostics.\");\n    }\n}\n\nclass SmartKiosk : ISelfDiagnostics, IEntertainment, ISecurityOperations, ISoftwareManagement, IReportGeneration\n{\n    bool isOnline = true;\n    int customerInteractions = 0;\n    string[] services = {\"orders\", \"payments\", \"information\", \"entertainment\"};\n\n    public void SelfDiagnose()\n    {\n        for (int component = 1; component <= 5; component++)\n        {\n            if (component == 1)\n            {\n                Console.WriteLine(\"Kiosk checking network connection\");\n            }\n            else if (component == 2 && isOnline)\n            {\n                Console.WriteLine(\"Kiosk testing payment processor\");\n            }\n            else if (component > 3)\n            {\n                Console.WriteLine(\"Kiosk running system check \" + component);\n            }\n            else\n            {\n                Console.WriteLine(\"Kiosk diagnostic component \" + component);\n            }\n        }\n    }\n\n    public void PlayMusic()\n    {\n        foreach (string service in services)\n        {\n            if (service.Equals(\"entertainment\") && customerInteractions < 50)\n            {\n                for (int playlist = 1; playlist <= 3; playlist++)\n                {\n                    Console.WriteLine(\"Kiosk playing background music playlist \" + playlist);\n                }\n            }\n            else if (service.Equals(\"information\"))\n            {\n                Console.WriteLine(\"Kiosk providing audio information\");\n            }\n        }\n    }\n\n    public void SecurityScan()\n    {\n        if (isOnline)\n        {\n            Console.WriteLine(\"Kiosk performing security scan\");\n        }\n        else\n        {\n            Console.WriteLine(\"Kiosk offline - cannot scan\");\n        }\n    }\n\n    public void UpdateSoftware()\n    {\n        Console.WriteLine(\"Kiosk updating software\");\n    }\n\n    public void GenerateReports()\n    {\n        Console.WriteLine(\"Kiosk generating usage reports\");\n    }\n}\n\nclass SecurityBot : ISelfDiagnostics, ISecurityOperations, ISoftwareManagement, IReportGeneration\n{\n    bool isPatrolling = true;\n    int alertLevel = 2;\n    string[] zones = {\"entrance\", \"dining\", \"kitchen\", \"storage\"};\n\n    public void SelfDiagnose()\n    {\n        Console.WriteLine(\"Security bot running diagnostics.\");\n    }\n\n    public void SecurityScan()\n    {\n        foreach (string zone in zones)\n        {\n            if (isPatrolling && alertLevel > 1)\n            {\n                if (zone.Equals(\"entrance\") || zone.Equals(\"storage\"))\n                {\n                    for (int scan = 1; scan <= 2; scan++)\n                    {\n                        Console.WriteLine(\"Security bot high-priority scan \" + zone + \" pass \" + scan);\n                    }\n                }\n                else if (alertLevel > 3)\n                {\n                    Console.WriteLine(\"Security bot emergency scan \" + zone);\n                }\n                else\n                {\n                    Console.WriteLine(\"Security bot scanning \" + zone);\n                }\n            }\n        }\n    }\n\n    public void UpdateSoftware()\n    {\n        Console.WriteLine(\"Security bot updating patrol algorithms\");\n    }\n\n    public void GenerateReports()\n    {\n        Console.WriteLine(\"Security bot generating incident reports\");\n    }\n}\n",
            "level": "HARD",
            "language": "CSHARP",
            "violation": "ISP"
        },
        {
            "input": "using System;\n\ninterface IVehicle\n{\n    void Start();\n    void Stop();\n    void Fly();\n    void Dive();\n}\n\ninterface IOperator\n{\n    void Steer();\n    void NavigateAir();\n    void NavigateWater();\n    void CommunicateWithTower();\n}\n\ninterface IEnergySystem\n{\n    void ChargeElectrically();\n    void RefuelGasoline();\n    void RefuelDiesel();\n    void LoadNuclearFuel();\n    void CheckBatteryLevel();\n    void MaintainEngine();\n}\n\nclass Driver : IOperator\n{\n    private string name;\n    \n    public Driver(string name)\n    {\n        this.name = name;\n    }\n    \n    public void Steer()\n    {\n        if (name != null && !string.IsNullOrEmpty(name))\n        {\n            if (name.Length > 5)\n            {\n                Console.WriteLine(\"Experienced driver \" + name + \" steering carefully\");\n            }\n            else\n            {\n                Console.WriteLine(\"Driver \" + name + \" steering\");\n            }\n        }\n    }\n    \n    public void NavigateAir()\n    {\n        throw new NotSupportedException(\"Driver cannot navigate air\");\n    }\n    \n    public void NavigateWater()\n    {\n        throw new NotSupportedException(\"Driver cannot navigate water\");\n    }\n    \n    public void CommunicateWithTower()\n    {\n        throw new NotSupportedException(\"Driver cannot communicate with tower\");\n    }\n    \n    public string GetName()\n    {\n        return name;\n    }\n}\n\nclass Pilot : IOperator\n{\n    private string name;\n    \n    public Pilot(string name)\n    {\n        this.name = name;\n    }\n    \n    public void Steer()\n    {\n        Console.WriteLine(\"Pilot \" + name + \" controlling aircraft\");\n    }\n    \n    public void NavigateAir()\n    {\n        if (name != null)\n        {\n            if (name.Contains(\"Captain\"))\n            {\n                Console.WriteLine(\"Captain pilot navigating complex airspace\");\n            }\n            else if (name.Length > 6)\n            {\n                Console.WriteLine(\"Experienced pilot navigating airspace\");\n            }\n            else\n            {\n                Console.WriteLine(\"Pilot navigating\");\n            }\n        }\n    }\n    \n    public void NavigateWater()\n    {\n        throw new NotSupportedException(\"Pilot cannot navigate water\");\n    }\n    \n    public void CommunicateWithTower()\n    {\n        Console.WriteLine(\"Pilot \" + name + \" communicating with control tower\");\n    }\n    \n    public string GetName()\n    {\n        return name;\n    }\n}\n\nclass Captain : IOperator\n{\n    private string name;\n    \n    public Captain(string name)\n    {\n        this.name = name;\n    }\n    \n    public void Steer()\n    {\n        Console.WriteLine(\"Captain \" + name + \" steering submarine\");\n    }\n    \n    public void NavigateAir()\n    {\n        throw new NotSupportedException(\"Captain cannot navigate air\");\n    }\n    \n    public void NavigateWater()\n    {\n        if (name != null && name.StartsWith(\"Captain\"))\n        {\n            Console.WriteLine(\"Captain navigating deep waters\");\n        }\n        else\n        {\n            Console.WriteLine(\"Naval officer navigating\");\n        }\n    }\n    \n    public void CommunicateWithTower()\n    {\n        throw new NotSupportedException(\"Captain cannot communicate with tower\");\n    }\n    \n    public string GetName()\n    {\n        return name;\n    }\n}\n\nclass Car : IVehicle, IEnergySystem\n{\n    private Driver driver;\n    private string energyType;\n    \n    public Car(Driver driver, string energyType)\n    {\n        this.driver = driver;\n        this.energyType = energyType;\n    }\n    \n    public void Start()\n    {\n        if (driver != null)\n        {\n            Console.WriteLine(energyType + \" car started by \" + driver.GetName());\n        }\n    }\n    \n    public void Stop()\n    {\n        Console.WriteLine(\"Car stopped\");\n    }\n    \n    public void Fly()\n    {\n        throw new NotSupportedException(\"Car cannot fly\");\n    }\n    \n    public void Dive()\n    {\n        throw new NotSupportedException(\"Car cannot dive\");\n    }\n    \n    public void ChargeElectrically()\n    {\n        if (energyType.Equals(\"Electric\"))\n        {\n            Console.WriteLine(\"Car charging electrically\");\n        }\n        else\n        {\n            throw new NotSupportedException(\"Non-electric car cannot charge\");\n        }\n    }\n    \n    public void RefuelGasoline()\n    {\n        if (energyType.Equals(\"Gasoline\"))\n        {\n            Console.WriteLine(\"Car refueling with gasoline\");\n        }\n        else\n        {\n            throw new NotSupportedException(\"Non-gasoline car cannot refuel gasoline\");\n        }\n    }\n    \n    public void RefuelDiesel()\n    {\n        throw new NotSupportedException(\"Car does not use diesel\");\n    }\n    \n    public void LoadNuclearFuel()\n    {\n        throw new NotSupportedException(\"Car cannot use nuclear fuel\");\n    }\n    \n    public void CheckBatteryLevel()\n    {\n        if (energyType.Equals(\"Electric\"))\n        {\n            Console.WriteLine(\"Car battery level: 85%\");\n        }\n        else\n        {\n            throw new NotSupportedException(\"Non-electric car has no battery\");\n        }\n    }\n    \n    public void MaintainEngine()\n    {\n        if (energyType.Equals(\"Electric\"))\n        {\n            Console.WriteLine(\"Maintaining electric motor\");\n        }\n        else\n        {\n            Console.WriteLine(\"Maintaining combustion engine\");\n        }\n    }\n    \n    public Driver GetOperator()\n    {\n        return driver;\n    }\n}\n\nclass Plane : IVehicle, IEnergySystem\n{\n    private Pilot pilot;\n    private string energyType;\n    \n    public Plane(Pilot pilot, string energyType)\n    {\n        this.pilot = pilot;\n        this.energyType = energyType;\n    }\n    \n    public void Start()\n    {\n        Console.WriteLine(energyType + \" plane engines started by \" + pilot.GetName());\n    }\n    \n    public void Stop()\n    {\n        Console.WriteLine(\"Plane stopped\");\n    }\n    \n    public void Fly()\n    {\n        if (pilot.GetName().Contains(\"Captain\"))\n        {\n            Console.WriteLine(\"Plane flying at cruising altitude with \" + energyType + \" power\");\n        }\n        else\n        {\n            Console.WriteLine(\"Plane flying with \" + energyType + \" engines\");\n        }\n    }\n    \n    public void Dive()\n    {\n        throw new NotSupportedException(\"Plane cannot dive underwater\");\n    }\n    \n    public void ChargeElectrically()\n    {\n        throw new NotSupportedException(\"Plane does not charge electrically\");\n    }\n    \n    public void RefuelGasoline()\n    {\n        throw new NotSupportedException(\"Plane does not use gasoline\");\n    }\n    \n    public void RefuelDiesel()\n    {\n        if (energyType.Equals(\"Diesel\"))\n        {\n            Console.WriteLine(\"Plane refueling with aviation diesel\");\n        }\n        else\n        {\n            throw new NotSupportedException(\"Non-diesel plane cannot refuel diesel\");\n        }\n    }\n    \n    public void LoadNuclearFuel()\n    {\n        throw new NotSupportedException(\"Plane cannot use nuclear fuel\");\n    }\n    \n    public void CheckBatteryLevel()\n    {\n        throw new NotSupportedException(\"Plane has no battery system\");\n    }\n    \n    public void MaintainEngine()\n    {\n        if (energyType.Equals(\"Diesel\"))\n        {\n            Console.WriteLine(\"Maintaining diesel turbine engines\");\n        }\n        else\n        {\n            Console.WriteLine(\"Maintaining jet engines\");\n        }\n    }\n    \n    public Pilot GetOperator()\n    {\n        return pilot;\n    }\n}\n\nclass Submarine : IVehicle, IEnergySystem\n{\n    private Captain captain;\n    private int depth;\n    private string energyType;\n    \n    public Submarine(Captain captain, string energyType)\n    {\n        this.captain = captain;\n        this.depth = 0;\n        this.energyType = energyType;\n    }\n    \n    public void Start()\n    {\n        Console.WriteLine(energyType + \" submarine engines started by \" + captain.GetName());\n    }\n    \n    public void Stop()\n    {\n        Console.WriteLine(\"Submarine stopped\");\n    }\n    \n    public void Fly()\n    {\n        throw new NotSupportedException(\"Submarine cannot fly\");\n    }\n    \n    public void Dive()\n    {\n        if (captain != null && captain.GetName().StartsWith(\"Captain\"))\n        {\n            if (depth < 100)\n            {\n                depth += 50;\n                Console.WriteLine(\"Submarine diving to depth: \" + depth + \" meters using \" + energyType + \" power\");\n            }\n            else if (depth < 200)\n            {\n                depth += 30;\n                Console.WriteLine(\"Deep diving to: \" + depth + \" meters\");\n            }\n            else\n            {\n                Console.WriteLine(\"Maximum depth reached\");\n            }\n        }\n    }\n    \n    public void ChargeElectrically()\n    {\n        if (energyType.Equals(\"Electric\"))\n        {\n            Console.WriteLine(\"Submarine charging batteries\");\n        }\n        else\n        {\n            throw new NotSupportedException(\"Non-electric submarine cannot charge\");\n        }\n    }\n    \n    public void RefuelGasoline()\n    {\n        throw new NotSupportedException(\"Submarine does not use gasoline\");\n    }\n    \n    public void RefuelDiesel()\n    {\n        if (energyType.Equals(\"Diesel\"))\n        {\n            Console.WriteLine(\"Submarine refueling with marine diesel\");\n        }\n        else\n        {\n            throw new NotSupportedException(\"Non-diesel submarine cannot refuel diesel\");\n        }\n    }\n    \n    public void LoadNuclearFuel()\n    {\n        if (energyType.Equals(\"Nuclear\"))\n        {\n            Console.WriteLine(\"Loading nuclear fuel rods into reactor\");\n        }\n        else\n        {\n            throw new NotSupportedException(\"Non-nuclear submarine cannot load nuclear fuel\");\n        }\n    }\n    \n    public void CheckBatteryLevel()\n    {\n        if (energyType.Equals(\"Electric\") || energyType.Equals(\"Diesel\"))\n        {\n            Console.WriteLine(\"Submarine battery level: 70%\");\n        }\n        else\n        {\n            throw new NotSupportedException(\"Nuclear submarine has no battery system\");\n        }\n    }\n    \n    public void MaintainEngine()\n    {\n        if (energyType.Equals(\"Nuclear\"))\n        {\n            Console.WriteLine(\"Maintaining nuclear reactor systems\");\n        }\n        else if (energyType.Equals(\"Diesel\"))\n        {\n            Console.WriteLine(\"Maintaining diesel-electric propulsion\");\n        }\n        else\n        {\n            Console.WriteLine(\"Maintaining electric propulsion system\");\n        }\n    }\n    \n    public Captain GetOperator()\n    {\n        return captain;\n    }\n}",
            "output": "using System;\n\ninterface IStartStop\n{\n    void Start();\n    void Stop();\n}\n\ninterface IFlying\n{\n    void Fly();\n}\n\ninterface IDiving\n{\n    void Dive();\n}\n\ninterface IGroundSteering\n{\n    void Steer();\n}\n\ninterface IAirNavigation\n{\n    void NavigateAir();\n}\n\ninterface IWaterNavigation\n{\n    void NavigateWater();\n}\n\ninterface ITowerCommunication\n{\n    void CommunicateWithTower();\n}\n\ninterface IElectricCharging\n{\n    void ChargeElectrically();\n    void CheckBatteryLevel();\n}\n\ninterface IGasolineRefueling\n{\n    void RefuelGasoline();\n}\n\ninterface IDieselRefueling\n{\n    void RefuelDiesel();\n}\n\ninterface INuclearFueling\n{\n    void LoadNuclearFuel();\n}\n\ninterface IEngineMaintenance\n{\n    void MaintainEngine();\n}\n\nclass Driver : IGroundSteering\n{\n    private string name;\n    \n    public Driver(string name)\n    {\n        this.name = name;\n    }\n    \n    public void Steer()\n    {\n        if (name != null && !string.IsNullOrEmpty(name))\n        {\n            if (name.Length > 5)\n            {\n                Console.WriteLine(\"Experienced driver \" + name + \" steering carefully\");\n            }\n            else\n            {\n                Console.WriteLine(\"Driver \" + name + \" steering\");\n            }\n        }\n    }\n    \n    public string GetName()\n    {\n        return name;\n    }\n}\n\nclass Pilot : IGroundSteering, IAirNavigation, ITowerCommunication\n{\n    private string name;\n    \n    public Pilot(string name)\n    {\n        this.name = name;\n    }\n    \n    public void Steer()\n    {\n        Console.WriteLine(\"Pilot \" + name + \" controlling aircraft\");\n    }\n    \n    public void NavigateAir()\n    {\n        if (name != null)\n        {\n            if (name.Contains(\"Captain\"))\n            {\n                Console.WriteLine(\"Captain pilot navigating complex airspace\");\n            }\n            else if (name.Length > 6)\n            {\n                Console.WriteLine(\"Experienced pilot navigating airspace\");\n            }\n            else\n            {\n                Console.WriteLine(\"Pilot navigating\");\n            }\n        }\n    }\n    \n    public void CommunicateWithTower()\n    {\n        Console.WriteLine(\"Pilot \" + name + \" communicating with control tower\");\n    }\n    \n    public string GetName()\n    {\n        return name;\n    }\n}\n\nclass Captain : IGroundSteering, IWaterNavigation\n{\n    private string name;\n    \n    public Captain(string name)\n    {\n        this.name = name;\n    }\n    \n    public void Steer()\n    {\n        Console.WriteLine(\"Captain \" + name + \" steering submarine\");\n    }\n    \n    public void NavigateWater()\n    {\n        if (name != null && name.StartsWith(\"Captain\"))\n        {\n            Console.WriteLine(\"Captain navigating deep waters\");\n        }\n        else\n        {\n            Console.WriteLine(\"Naval officer navigating\");\n        }\n    }\n    \n    public string GetName()\n    {\n        return name;\n    }\n}\n\nclass Car : IStartStop, IElectricCharging, IGasolineRefueling, IEngineMaintenance\n{\n    private Driver driver;\n    private string energyType;\n    \n    public Car(Driver driver, string energyType)\n    {\n        this.driver = driver;\n        this.energyType = energyType;\n    }\n    \n    public void Start()\n    {\n        if (driver != null)\n        {\n            Console.WriteLine(energyType + \" car started by \" + driver.GetName());\n        }\n    }\n    \n    public void Stop()\n    {\n        Console.WriteLine(\"Car stopped\");\n    }\n    \n    public void ChargeElectrically()\n    {\n        if (energyType.Equals(\"Electric\"))\n        {\n            Console.WriteLine(\"Car charging electrically\");\n        }\n        else\n        {\n            throw new NotSupportedException(\"Non-electric car cannot charge\");\n        }\n    }\n    \n    public void RefuelGasoline()\n    {\n        if (energyType.Equals(\"Gasoline\"))\n        {\n            Console.WriteLine(\"Car refueling with gasoline\");\n        }\n        else\n        {\n            throw new NotSupportedException(\"Non-gasoline car cannot refuel gasoline\");\n        }\n    }\n    \n    public void CheckBatteryLevel()\n    {\n        if (energyType.Equals(\"Electric\"))\n        {\n            Console.WriteLine(\"Car battery level: 85%\");\n        }\n        else\n        {\n            throw new NotSupportedException(\"Non-electric car has no battery\");\n        }\n    }\n    \n    public void MaintainEngine()\n    {\n        if (energyType.Equals(\"Electric\"))\n        {\n            Console.WriteLine(\"Maintaining electric motor\");\n        }\n        else\n        {\n            Console.WriteLine(\"Maintaining combustion engine\");\n        }\n    }\n    \n    public Driver GetOperator()\n    {\n        return driver;\n    }\n    \n    public string GetEnergyType()\n    {\n        return energyType;\n    }\n}\n\nclass Plane : IStartStop, IFlying, IDieselRefueling, IEngineMaintenance\n{\n    private Pilot pilot;\n    private string energyType;\n    \n    public Plane(Pilot pilot, string energyType)\n    {\n        this.pilot = pilot;\n        this.energyType = energyType;\n    }\n    \n    public void Start()\n    {\n        Console.WriteLine(energyType + \" plane engines started by \" + pilot.GetName());\n    }\n    \n    public void Stop()\n    {\n        Console.WriteLine(\"Plane stopped\");\n    }\n    \n    public void Fly()\n    {\n        if (pilot.GetName().Contains(\"Captain\"))\n        {\n            Console.WriteLine(\"Plane flying at cruising altitude with \" + energyType + \" power\");\n        }\n        else\n        {\n            Console.WriteLine(\"Plane flying with \" + energyType + \" engines\");\n        }\n    }\n    \n    public void RefuelDiesel()\n    {\n        if (energyType.Equals(\"Diesel\"))\n        {\n            Console.WriteLine(\"Plane refueling with aviation diesel\");\n        }\n        else\n        {\n            throw new NotSupportedException(\"Non-diesel plane cannot refuel diesel\");\n        }\n    }\n    \n    public void MaintainEngine()\n    {\n        if (energyType.Equals(\"Diesel\"))\n        {\n            Console.WriteLine(\"Maintaining diesel turbine engines\");\n        }\n        else\n        {\n            Console.WriteLine(\"Maintaining jet engines\");\n        }\n    }\n    \n    public Pilot GetOperator()\n    {\n        return pilot;\n    }\n    \n    public string GetEnergyType()\n    {\n        return energyType;\n    }\n}\n\nclass Submarine : IStartStop, IDiving, IElectricCharging, IDieselRefueling, INuclearFueling, IEngineMaintenance\n{\n    private Captain captain;\n    private int depth;\n    private string energyType;\n    \n    public Submarine(Captain captain, string energyType)\n    {\n        this.captain = captain;\n        this.depth = 0;\n        this.energyType = energyType;\n    }\n    \n    public void Start()\n    {\n        Console.WriteLine(energyType + \" submarine engines started by \" + captain.GetName());\n    }\n    \n    public void Stop()\n    {\n        Console.WriteLine(\"Submarine stopped\");\n    }\n    \n    public void Dive()\n    {\n        if (captain != null && captain.GetName().StartsWith(\"Captain\"))\n        {\n            if (depth < 100)\n            {\n                depth += 50;\n                Console.WriteLine(\"Submarine diving to depth: \" + depth + \" meters using \" + energyType + \" power\");\n            }\n            else if (depth < 200)\n            {\n                depth += 30;\n                Console.WriteLine(\"Deep diving to: \" + depth + \" meters\");\n            }\n            else\n            {\n                Console.WriteLine(\"Maximum depth reached\");\n            }\n        }\n    }\n    \n    public void ChargeElectrically()\n    {\n        if (energyType.Equals(\"Electric\"))\n        {\n            Console.WriteLine(\"Submarine charging batteries\");\n        }\n        else\n        {\n            throw new NotSupportedException(\"Non-electric submarine cannot charge\");\n        }\n    }\n    \n    public void RefuelDiesel()\n    {\n        if (energyType.Equals(\"Diesel\"))\n        {\n            Console.WriteLine(\"Submarine refueling with marine diesel\");\n        }\n        else\n        {\n            throw new NotSupportedException(\"Non-diesel submarine cannot refuel diesel\");\n        }\n    }\n    \n    public void LoadNuclearFuel()\n    {\n        if (energyType.Equals(\"Nuclear\"))\n        {\n            Console.WriteLine(\"Loading nuclear fuel rods into reactor\");\n        }\n        else\n        {\n            throw new NotSupportedException(\"Non-nuclear submarine cannot load nuclear fuel\");\n        }\n    }\n    \n    public void CheckBatteryLevel()\n    {\n        if (energyType.Equals(\"Electric\") || energyType.Equals(\"Diesel\"))\n        {\n            Console.WriteLine(\"Submarine battery level: 70%\");\n        }\n        else\n        {\n            throw new NotSupportedException(\"Nuclear submarine has no battery system\");\n        }\n    }\n    \n    public void MaintainEngine()\n    {\n        if (energyType.Equals(\"Nuclear\"))\n        {\n            Console.WriteLine(\"Maintaining nuclear reactor systems\");\n        }\n        else if (energyType.Equals(\"Diesel\"))\n        {\n            Console.WriteLine(\"Maintaining diesel-electric propulsion\");\n        }\n        else\n        {\n            Console.WriteLine(\"Maintaining electric propulsion system\");\n        }\n    }\n    \n    public Captain GetOperator()\n    {\n        return captain;\n    }\n    \n    public string GetEnergyType()\n    {\n        return energyType;\n    }\n}\n",
            "level": "HARD",
            "language": "CSHARP",
            "violation": "ISP"
        },
        {
            "input": "using System;\n\ninterface IGameCharacter\n{\n    void MeleeAttack();\n    void CastSpell();\n    void Fly();\n    void Defend();\n}\n\ninterface IWeapon\n{\n    void Slash();\n    void Shoot();\n    void Enchant();\n    void Repair();\n}\n\nclass Mage : IGameCharacter\n{\n    private string name;\n    private int mana;\n    private int level;\n    \n    public Mage(string name, int level)\n    {\n        this.name = name;\n        this.mana = 100;\n        this.level = level;\n    }\n    \n    public void MeleeAttack()\n    {\n        throw new NotSupportedException(\"Mage cannot perform melee attacks!\");\n    }\n    \n    public void CastSpell()\n    {\n        if (mana < 10)\n        {\n            Console.WriteLine(name + \" is out of mana!\");\n            return;\n        }\n        \n        if (level >= 5 && mana >= 30)\n        {\n            Console.WriteLine(name + \" casts a powerful lightning storm!\");\n            mana -= 30;\n        }\n        else if (level >= 3 && mana >= 20)\n        {\n            Console.WriteLine(name + \" casts a fireball spell!\");\n            mana -= 20;\n        }\n        else if (mana >= 10)\n        {\n            Console.WriteLine(name + \" casts a basic magic missile!\");\n            mana -= 10;\n        }\n    }\n    \n    public void Fly()\n    {\n        if (level >= 2)\n        {\n            Console.WriteLine(name + \" soars through the air with magic!\");\n        }\n        else\n        {\n            Console.WriteLine(name + \" is too inexperienced to fly!\");\n        }\n    }\n    \n    public void Defend()\n    {\n        if (mana >= 15)\n        {\n            Console.WriteLine(name + \" creates a magical barrier!\");\n            mana -= 15;\n        }\n        else\n        {\n            Console.WriteLine(name + \" dodges awkwardly!\");\n        }\n    }\n}\n\nclass Fighter : IGameCharacter\n{\n    private string name;\n    private int stamina;\n    private bool hasWeapon;\n    \n    public Fighter(string name, bool hasWeapon)\n    {\n        this.name = name;\n        this.stamina = 100;\n        this.hasWeapon = hasWeapon;\n    }\n    \n    public void MeleeAttack()\n    {\n        if (stamina < 5)\n        {\n            Console.WriteLine(name + \" is too exhausted to fight!\");\n            return;\n        }\n        \n        if (hasWeapon)\n        {\n            if (stamina >= 20)\n            {\n                Console.WriteLine(name + \" performs a devastating combo attack!\");\n                stamina -= 20;\n            }\n            else if (stamina >= 10)\n            {\n                Console.WriteLine(name + \" swings weapon with force!\");\n                stamina -= 10;\n            }\n            else\n            {\n                Console.WriteLine(name + \" makes a weak weapon strike!\");\n                stamina -= 5;\n            }\n        }\n        else\n        {\n            if (stamina >= 15)\n            {\n                Console.WriteLine(name + \" throws a powerful punch!\");\n                stamina -= 15;\n            }\n            else\n            {\n                Console.WriteLine(name + \" throws a basic punch!\");\n                stamina -= 5;\n            }\n        }\n    }\n    \n    public void CastSpell()\n    {\n        throw new NotSupportedException(\"Fighter cannot cast spells!\");\n    }\n    \n    public void Fly()\n    {\n        throw new NotSupportedException(\"Fighter cannot fly!\");\n    }\n    \n    public void Defend()\n    {\n        if (hasWeapon && stamina >= 10)\n        {\n            Console.WriteLine(name + \" blocks with weapon!\");\n            stamina -= 10;\n        }\n        else if (stamina >= 5)\n        {\n            Console.WriteLine(name + \" raises arms to defend!\");\n            stamina -= 5;\n        }\n        else\n        {\n            Console.WriteLine(name + \" barely manages to dodge!\");\n        }\n    }\n}\n\nclass Sword : IWeapon\n{\n    private int sharpness;\n    private bool isMagic;\n    \n    public Sword(int sharpness, bool isMagic)\n    {\n        this.sharpness = sharpness;\n        this.isMagic = isMagic;\n    }\n    \n    public void Slash()\n    {\n        if (sharpness > 70)\n        {\n            Console.WriteLine(\"Sword cuts cleanly through the target!\");\n        }\n        else if (sharpness > 30)\n        {\n            Console.WriteLine(\"Sword makes a decent cut!\");\n        }\n        else\n        {\n            Console.WriteLine(\"Dull sword barely scratches the target!\");\n        }\n    }\n    \n    public void Shoot()\n    {\n        throw new NotSupportedException(\"Sword cannot shoot!\");\n    }\n    \n    public void Enchant()\n    {\n        if (isMagic)\n        {\n            Console.WriteLine(\"Magical sword glows with enhanced power!\");\n            sharpness += 10;\n        }\n        else\n        {\n            throw new NotSupportedException(\"Non-magic sword cannot be enchanted!\");\n        }\n    }\n    \n    public void Repair()\n    {\n        if (sharpness < 100)\n        {\n            sharpness = Math.Min(100, sharpness + 25);\n            Console.WriteLine(\"Sword has been sharpened and repaired!\");\n        }\n        else\n        {\n            Console.WriteLine(\"Sword is already in perfect condition!\");\n        }\n    }\n}\n\nclass Bow : IWeapon\n{\n    private int arrows;\n    private int range;\n    \n    public Bow(int arrows, int range)\n    {\n        this.arrows = arrows;\n        this.range = range;\n    }\n    \n    public void Slash()\n    {\n        throw new NotSupportedException(\"Bow cannot slash!\");\n    }\n    \n    public void Shoot()\n    {\n        if (arrows <= 0)\n        {\n            Console.WriteLine(\"No arrows left to shoot!\");\n            return;\n        }\n        \n        if (range > 80)\n        {\n            Console.WriteLine(\"Long-range shot hits the distant target!\");\n        }\n        else if (range > 50)\n        {\n            Console.WriteLine(\"Medium-range shot finds its mark!\");\n        }\n        else\n        {\n            Console.WriteLine(\"Short-range shot barely reaches the target!\");\n        }\n        arrows--;\n    }\n    \n    public void Enchant()\n    {\n        throw new NotSupportedException(\"Regular bow cannot be enchanted!\");\n    }\n    \n    public void Repair()\n    {\n        if (range < 100)\n        {\n            range = Math.Min(100, range + 15);\n            Console.WriteLine(\"Bow string tightened and wood polished!\");\n        }\n        else\n        {\n            Console.WriteLine(\"Bow is in excellent condition!\");\n        }\n    }\n}\n",
            "output": "using System;\n\n\ninterface MeleeCapable \n{\n    void MeleeAttack();\n}\n\ninterface MagicCapable \n{\n    void CastSpell();\n}\n\ninterface FlyingCapable \n{\n    void Fly();\n}\n\ninterface DefenseCapable \n{\n    void Defend();\n}\n\ninterface SlashCapable \n{\n    void Slash();\n}\n\ninterface ShootCapable \n{\n    void Shoot();\n}\n\ninterface EnchantCapable {\n    void Enchant();\n}\n\ninterface RepairCapable {\n    void Repair();\n}\n\nclass Mage : MagicCapable, FlyingCapable, DefenseCapable\n{\n    private string name;\n    private int mana;\n    private int level;\n    \n    public Mage(string name, int level)\n    {\n        this.name = name;\n        this.mana = 100;\n        this.level = level;\n    }\n    \n    \n    public void CastSpell()\n    {\n        if (mana < 10)\n        {\n            Console.WriteLine(name + \" is out of mana!\");\n            return;\n        }\n        \n        if (level >= 5 && mana >= 30)\n        {\n            Console.WriteLine(name + \" casts a powerful lightning storm!\");\n            mana -= 30;\n        }\n        else if (level >= 3 && mana >= 20)\n        {\n            Console.WriteLine(name + \" casts a fireball spell!\");\n            mana -= 20;\n        }\n        else if (mana >= 10)\n        {\n            Console.WriteLine(name + \" casts a basic magic missile!\");\n            mana -= 10;\n        }\n    }\n    \n    public void Fly()\n    {\n        if (level >= 2)\n        {\n            Console.WriteLine(name + \" soars through the air with magic!\");\n        }\n        else\n        {\n            Console.WriteLine(name + \" is too inexperienced to fly!\");\n        }\n    }\n    \n    public void Defend()\n    {\n        if (mana >= 15)\n        {\n            Console.WriteLine(name + \" creates a magical barrier!\");\n            mana -= 15;\n        }\n        else\n        {\n            Console.WriteLine(name + \" dodges awkwardly!\");\n        }\n    }\n}\n\nclass Fighter : MeleeCapable, DefenseCapable\n{\n    private string name;\n    private int stamina;\n    private bool hasWeapon;\n    \n    public Fighter(string name, bool hasWeapon)\n    {\n        this.name = name;\n        this.stamina = 100;\n        this.hasWeapon = hasWeapon;\n    }\n    \n    public void MeleeAttack()\n    {\n        if (stamina < 5)\n        {\n            Console.WriteLine(name + \" is too exhausted to fight!\");\n            return;\n        }\n        \n        if (hasWeapon)\n        {\n            if (stamina >= 20)\n            {\n                Console.WriteLine(name + \" performs a devastating combo attack!\");\n                stamina -= 20;\n            }\n            else if (stamina >= 10)\n            {\n                Console.WriteLine(name + \" swings weapon with force!\");\n                stamina -= 10;\n            }\n            else\n            {\n                Console.WriteLine(name + \" makes a weak weapon strike!\");\n                stamina -= 5;\n            }\n        }\n        else\n        {\n            if (stamina >= 15)\n            {\n                Console.WriteLine(name + \" throws a powerful punch!\");\n                stamina -= 15;\n            }\n            else\n            {\n                Console.WriteLine(name + \" throws a basic punch!\");\n                stamina -= 5;\n            }\n        }\n    }\n    \n    \n    public void Defend()\n    {\n        if (hasWeapon && stamina >= 10)\n        {\n            Console.WriteLine(name + \" blocks with weapon!\");\n            stamina -= 10;\n        }\n        else if (stamina >= 5)\n        {\n            Console.WriteLine(name + \" raises arms to defend!\");\n            stamina -= 5;\n        }\n        else\n        {\n            Console.WriteLine(name + \" barely manages to dodge!\");\n        }\n    }\n}\n\nclass Sword : SlashCapable, RepairCapable \n{\n    private int sharpness;\n    private bool isMagic;\n    \n    public Sword(int sharpness, bool isMagic)\n    {\n        this.sharpness = sharpness;\n        this.isMagic = isMagic;\n    }\n    \n    public void Slash()\n    {\n        if (sharpness > 70)\n        {\n            Console.WriteLine(\"Sword cuts cleanly through the target!\");\n        }\n        else if (sharpness > 30)\n        {\n            Console.WriteLine(\"Sword makes a decent cut!\");\n        }\n        else\n        {\n            Console.WriteLine(\"Dull sword barely scratches the target!\");\n        }\n    }\n    \n    \n    public void Enchant()\n    {\n        if (isMagic)\n        {\n            Console.WriteLine(\"Magical sword glows with enhanced power!\");\n            sharpness += 10;\n        }\n        else\n        {\n            throw new NotSupportedException(\"Non-magic sword cannot be enchanted!\");\n        }\n    }\n    \n    public void Repair()\n    {\n        if (sharpness < 100)\n        {\n            sharpness = Math.Min(100, sharpness + 25);\n            Console.WriteLine(\"Sword has been sharpened and repaired!\");\n        }\n        else\n        {\n            Console.WriteLine(\"Sword is already in perfect condition!\");\n        }\n    }\n}\n\nclass Bow : ShootCapable, RepairCapable\n{\n    private int arrows;\n    private int range;\n    \n    public Bow(int arrows, int range)\n    {\n        this.arrows = arrows;\n        this.range = range;\n    }\n    \n    \n    public void Shoot()\n    {\n        if (arrows <= 0)\n        {\n            Console.WriteLine(\"No arrows left to shoot!\");\n            return;\n        }\n        \n        if (range > 80)\n        {\n            Console.WriteLine(\"Long-range shot hits the distant target!\");\n        }\n        else if (range > 50)\n        {\n            Console.WriteLine(\"Medium-range shot finds its mark!\");\n        }\n        else\n        {\n            Console.WriteLine(\"Short-range shot barely reaches the target!\");\n        }\n        arrows--;\n    }\n    \n    \n    public void Repair()\n    {\n        if (range < 100)\n        {\n            range = Math.Min(100, range + 15);\n            Console.WriteLine(\"Bow string tightened and wood polished!\");\n        }\n        else\n        {\n            Console.WriteLine(\"Bow is in excellent condition!\");\n        }\n    }\n}\n",
            "level": "MODERATE",
            "language": "CSHARP",
            "violation": "ISP"
        },
        {
            "input": "using System;\n\ninterface IMusicPlayer\n{\n    void Play();\n    void Pause();\n    void Stop();\n    void SkipTrack();\n    void Eject();\n    void SetVolume(int volume);\n    void SetEqualizer(string preset);\n    void DisplayTrackInfo();\n    void Shuffle();\n    void Repeat();\n}\n\nclass CDPlayer : IMusicPlayer\n{\n    private bool isPlaying = false;\n    private bool isPaused = false;\n    private string currentTrack = \"Track 1\";\n    private int volume = 50;\n    private bool shuffleMode = false;\n    private bool repeatMode = false;\n    \n    public void Play()\n    {\n        isPlaying = true;\n        isPaused = false;\n        Console.WriteLine(\"CD Player: Playing \" + currentTrack);\n    }\n    \n    public void Pause()\n    {\n        if (isPlaying)\n        {\n            isPaused = true;\n            isPlaying = false;\n            Console.WriteLine(\"CD Player: Paused\");\n        }\n    }\n    \n    public void Stop()\n    {\n        isPlaying = false;\n        isPaused = false;\n        Console.WriteLine(\"CD Player: Stopped\");\n    }\n    \n    public void SkipTrack()\n    {\n        Console.WriteLine(\"CD Player: Skipping to next track\");\n        currentTrack = \"Track \" + (int.Parse(currentTrack.Split(' ')[1]) + 1);\n    }\n    \n    public void Eject()\n    {\n        Stop();\n        Console.WriteLine(\"CD Player: CD ejected\");\n    }\n    \n    public void SetVolume(int volume)\n    {\n        this.volume = volume;\n        Console.WriteLine(\"CD Player: Volume set to \" + volume);\n    }\n    \n    public void SetEqualizer(string preset)\n    {\n        Console.WriteLine(\"CD Player: Equalizer set to \" + preset);\n    }\n    \n    public void DisplayTrackInfo()\n    {\n        Console.WriteLine(\"CD Player: Current track - \" + currentTrack + \", Volume: \" + volume);\n    }\n    \n    public void Shuffle()\n    {\n        shuffleMode = !shuffleMode;\n        Console.WriteLine(\"CD Player: Shuffle \" + (shuffleMode ? \"ON\" : \"OFF\"));\n    }\n    \n    public void Repeat()\n    {\n        repeatMode = !repeatMode;\n        Console.WriteLine(\"CD Player: Repeat \" + (repeatMode ? \"ON\" : \"OFF\"));\n    }\n}\n\nclass VinylPlayer : IMusicPlayer\n{\n    private bool isPlaying = false;\n    private bool isPaused = false;\n    private string currentSong = \"Side A\";\n    private int volume = 50;\n    \n    public void Play()\n    {\n        isPlaying = true;\n        isPaused = false;\n        Console.WriteLine(\"Vinyl Player: Playing \" + currentSong);\n    }\n    \n    public void Pause()\n    {\n        if (isPlaying)\n        {\n            isPaused = true;\n            isPlaying = false;\n            Console.WriteLine(\"Vinyl Player: Paused (needle lifted)\");\n        }\n    }\n    \n    public void Stop()\n    {\n        isPlaying = false;\n        isPaused = false;\n        Console.WriteLine(\"Vinyl Player: Stopped\");\n    }\n    \n    public void SkipTrack()\n    {\n        throw new NotSupportedException(\"Vinyl players cannot skip tracks - you must manually move the needle!\");\n    }\n   \n    public void Eject()\n    {\n        throw new NotSupportedException(\"Vinyl players don't eject - you must manually remove the record!\");\n    }\n    \n    public void SetVolume(int volume)\n    {\n        this.volume = volume;\n        Console.WriteLine(\"Vinyl Player: Volume set to \" + volume);\n    }\n    \n    public void SetEqualizer(string preset)\n    {\n        throw new NotSupportedException(\"Vintage vinyl players don't have digital equalizers!\");\n    }\n    \n    public void DisplayTrackInfo()\n    {\n        Console.WriteLine(\"Vinyl Player: Current side - \" + currentSong + \", Volume: \" + volume);\n    }\n    \n    public void Shuffle()\n    {\n        throw new NotSupportedException(\"Cannot shuffle vinyl records!\");\n    }\n    \n    public void Repeat()\n    {\n        throw new NotSupportedException(\"Vinyl players don't have automatic repeat!\");\n    }\n}\n\nclass Amplifier : IMusicPlayer\n{\n    private bool isPoweredOn = false;\n    private int volume = 30;\n    private string equalizerSetting = \"Flat\";\n    private bool bassBoost = false;\n    \n    public void Play()\n    {\n        throw new NotSupportedException(\"Amplifiers don't play music - they amplify audio signals!\");\n    }\n    \n    public void Pause()\n    {\n        throw new NotSupportedException(\"Amplifiers don't control playback!\");\n    }\n    \n    public void Stop()\n    {\n        isPoweredOn = false;\n        Console.WriteLine(\"Amplifier: Powered OFF\");\n    }\n    \n    public void SkipTrack()\n    {\n        throw new NotSupportedException(\"Amplifiers don't control track selection!\");\n    }\n    \n    public void Eject()\n    {\n        throw new NotSupportedException(\"Amplifiers don't have media to eject!\");\n    }\n    \n    public void SetVolume(int volume)\n    {\n        if (volume < 0)\n        {\n            this.volume = 0;\n        }\n        else if (volume > 100)\n        {\n            this.volume = 100;\n        }\n        else\n        {\n            this.volume = volume;\n        }\n\n        if (this.volume > 80)\n        {\n            Console.WriteLine(\"Amplifier: Warning - High volume!\");\n        }\n\n        Console.WriteLine(\"Amplifier: Master volume set to \" + this.volume);\n    }\n    \n    public void SetEqualizer(string preset)\n    {\n        switch (preset.ToLower())\n        {\n            case \"rock\":\n            case \"pop\":\n            case \"jazz\":\n            case \"classical\":\n                equalizerSetting = preset;\n                break;\n            default:\n                equalizerSetting = \"Flat\";\n                Console.WriteLine(\"Amplifier: Unknown preset. Defaulting to Flat.\");\n                return;\n        }\n        Console.WriteLine(\"Amplifier: Equalizer set to \" + equalizerSetting);\n    }\n    \n    public void DisplayTrackInfo()\n    {\n        throw new NotSupportedException(\"Amplifiers don't track music information!\");\n    }\n    \n    public void Shuffle()\n    {\n        throw new NotSupportedException(\"Amplifiers don't control playback modes!\");\n    }\n    \n    public void Repeat()\n    {\n        throw new NotSupportedException(\"Amplifiers don't control playback modes!\");\n    }\n    \n    public void PowerOn()\n    {\n        isPoweredOn = true;\n        Console.WriteLine(\"Amplifier: Powered ON\");\n    }\n    \n    public void SetBassBoost(bool enabled)\n    {\n        this.bassBoost = enabled;\n        Console.WriteLine(\"Amplifier: Bass boost \" + (enabled ? \"ON\" : \"OFF\"));\n    }\n}",
            "output": "using System;\n\ninterface PlaybackCapable {\n    void Play();\n    void Pause();\n    void Stop();\n}\n\ninterface TrackControlCapable {\n    void SkipTrack();\n}\n\ninterface MediaEjectCapable {\n    void Eject();\n}\n\ninterface VolumeControlCapable {\n    void SetVolume(int volume);\n}\n\ninterface EqualizerCapable {\n    void SetEqualizer(String preset);\n}\n\ninterface TrackInfoCapable {\n    void DisplayTrackInfo();\n}\n\ninterface PlaybackModeCapable {\n    void Shuffle();\n    void Repeat();\n}\n\nclass CDPlayer : PlaybackCapable, TrackControlCapable, MediaEjectCapable, VolumeControlCapable, EqualizerCapable, TrackInfoCapable, PlaybackModeCapable\n{\n    private bool isPlaying = false;\n    private bool isPaused = false;\n    private string currentTrack = \"Track 1\";\n    private int volume = 50;\n    private bool shuffleMode = false;\n    private bool repeatMode = false;\n    \n    public void Play()\n    {\n        isPlaying = true;\n        isPaused = false;\n        Console.WriteLine(\"CD Player: Playing \" + currentTrack);\n    }\n    \n    public void Pause()\n    {\n        if (isPlaying)\n        {\n            isPaused = true;\n            isPlaying = false;\n            Console.WriteLine(\"CD Player: Paused\");\n        }\n    }\n    \n    public void Stop()\n    {\n        isPlaying = false;\n        isPaused = false;\n        Console.WriteLine(\"CD Player: Stopped\");\n    }\n    \n    public void SkipTrack()\n    {\n        Console.WriteLine(\"CD Player: Skipping to next track\");\n        currentTrack = \"Track \" + (int.Parse(currentTrack.Split(' ')[1]) + 1);\n    }\n    \n    public void Eject()\n    {\n        Stop();\n        Console.WriteLine(\"CD Player: CD ejected\");\n    }\n    \n    public void SetVolume(int volume)\n    {\n        this.volume = volume;\n        Console.WriteLine(\"CD Player: Volume set to \" + volume);\n    }\n    \n    public void SetEqualizer(string preset)\n    {\n        Console.WriteLine(\"CD Player: Equalizer set to \" + preset);\n    }\n    \n    public void DisplayTrackInfo()\n    {\n        Console.WriteLine(\"CD Player: Current track - \" + currentTrack + \", Volume: \" + volume);\n    }\n    \n    public void Shuffle()\n    {\n        shuffleMode = !shuffleMode;\n        Console.WriteLine(\"CD Player: Shuffle \" + (shuffleMode ? \"ON\" : \"OFF\"));\n    }\n    \n    public void Repeat()\n    {\n        repeatMode = !repeatMode;\n        Console.WriteLine(\"CD Player: Repeat \" + (repeatMode ? \"ON\" : \"OFF\"));\n    }\n}\n\nclass VinylPlayer : PlaybackCapable, VolumeControlCapable, TrackInfoCapable\n{\n    private bool isPlaying = false;\n    private bool isPaused = false;\n    private string currentSong = \"Side A\";\n    private int volume = 50;\n    \n    public void Play()\n    {\n        isPlaying = true;\n        isPaused = false;\n        Console.WriteLine(\"Vinyl Player: Playing \" + currentSong);\n    }\n    \n    public void Pause()\n    {\n        if (isPlaying)\n        {\n            isPaused = true;\n            isPlaying = false;\n            Console.WriteLine(\"Vinyl Player: Paused (needle lifted)\");\n        }\n    }\n    \n    public void Stop()\n    {\n        isPlaying = false;\n        isPaused = false;\n        Console.WriteLine(\"Vinyl Player: Stopped\");\n    }\n    \n        \n    public void SetVolume(int volume)\n    {\n        this.volume = volume;\n        Console.WriteLine(\"Vinyl Player: Volume set to \" + volume);\n    }\n    \n    public void SetEqualizer(string preset)\n    {\n        throw new NotSupportedException(\"Vintage vinyl players don't have digital equalizers!\");\n    }\n    \n    public void DisplayTrackInfo()\n    {\n        Console.WriteLine(\"Vinyl Player: Current side - \" + currentSong + \", Volume: \" + volume);\n    }\n    \n}\n\nclass Amplifier : VolumeControlCapable, EqualizerCapable\n{\n    private bool isPoweredOn = false;\n    private int volume = 30;\n    private string equalizerSetting = \"Flat\";\n    private bool bassBoost = false;\n    \n    \n    public void Stop()\n    {\n        isPoweredOn = false;\n        Console.WriteLine(\"Amplifier: Powered OFF\");\n    }\n    \n       \n    public void SetVolume(int volume)\n    {\n        if (volume < 0)\n        {\n            this.volume = 0;\n        }\n        else if (volume > 100)\n        {\n            this.volume = 100;\n        }\n        else\n        {\n            this.volume = volume;\n        }\n\n        if (this.volume > 80)\n        {\n            Console.WriteLine(\"Amplifier: Warning - High volume!\");\n        }\n\n        Console.WriteLine(\"Amplifier: Master volume set to \" + this.volume);\n    }\n    \n    public void SetEqualizer(string preset)\n    {\n        switch (preset.ToLower())\n        {\n            case \"rock\":\n            case \"pop\":\n            case \"jazz\":\n            case \"classical\":\n                equalizerSetting = preset;\n                break;\n            default:\n                equalizerSetting = \"Flat\";\n                Console.WriteLine(\"Amplifier: Unknown preset. Defaulting to Flat.\");\n                return;\n        }\n        Console.WriteLine(\"Amplifier: Equalizer set to \" + equalizerSetting);\n    }\n        \n    public void PowerOn()\n    {\n        isPoweredOn = true;\n        Console.WriteLine(\"Amplifier: Powered ON\");\n    }\n    \n    public void SetBassBoost(bool enabled)\n    {\n        this.bassBoost = enabled;\n        Console.WriteLine(\"Amplifier: Bass boost \" + (enabled ? \"ON\" : \"OFF\"));\n    }\n}",
            "level": "MODERATE",
            "language": "CSHARP",
            "violation": "ISP"
        },
        {
            "input": "using System;\n\ninterface IRestaurantWorker\n{\n    void CookFood();\n    void ServeCustomers();\n    void CleanTables();\n    void ManageStaff();\n}\n\ninterface IMachineWorker\n{\n    void WashDishes();\n    void VacuumFloor();\n    void SelfDiagnose();\n}\n\nclass Chef : IRestaurantWorker\n{\n    public void CookFood()\n    {\n        Console.WriteLine(\"Chef is cooking meals.\");\n    }\n\n    public void ServeCustomers()\n    {\n        Console.WriteLine(\"Chef does not serve customers.\");\n    }\n\n    public void CleanTables()\n    {\n        Console.WriteLine(\"Chef does not clean tables.\");\n    }\n\n    public void ManageStaff()\n    {\n        Console.WriteLine(\"Chef does not manage staff.\");\n    }\n}\n\nclass Waiter : IRestaurantWorker\n{\n    public void CookFood()\n    {\n        Console.WriteLine(\"Waiter does not cook food.\");\n    }\n\n    public void ServeCustomers()\n    {\n        Console.WriteLine(\"Waiter is serving customers.\");\n    }\n\n    public void CleanTables()\n    {\n        Console.WriteLine(\"Waiter is cleaning tables.\");\n    }\n\n    public void ManageStaff()\n    {\n        Console.WriteLine(\"Waiter does not manage staff.\");\n    }\n}\n\nclass Manager : IRestaurantWorker\n{\n    private bool conflict = true;\n\n    public void CookFood()\n    {\n        Console.WriteLine(\"Manager does not cook.\");\n    }\n\n    public void ServeCustomers()\n    {\n        Console.WriteLine(\"Manager does not serve.\");\n    }\n\n    public void CleanTables()\n    {\n        Console.WriteLine(\"Manager does not clean.\");\n    }\n\n    public void ManageStaff()\n    {\n        if (conflict)\n        {\n            Console.WriteLine(\"Manager is resolving a team conflict.\");\n        }\n        else\n        {\n            Console.WriteLine(\"Manager is approving staff schedules.\");\n        }\n    }\n}\n\nclass Dishwasher : IMachineWorker\n{\n    int dirtyItems = 15;\n\n    public void WashDishes()\n    {\n        if (dirtyItems > 0)\n        {\n            Console.WriteLine(\"Dishwasher is cleaning \" + dirtyItems + \" plates.\");\n        }\n        else\n        {\n            Console.WriteLine(\"No dishes to clean.\");\n        }\n    }\n\n    public void VacuumFloor()\n    {\n        Console.WriteLine(\"Dishwasher cannot vacuum the floor.\");\n    }\n\n    public void SelfDiagnose()\n    {\n        Console.WriteLine(\"Dishwasher performing self-diagnosis.\");\n    }\n}\n\nclass VacuumCleaner : IMachineWorker\n{\n    bool isCharged = false;\n\n    public void WashDishes()\n    {\n        Console.WriteLine(\"Vacuum cleaner cannot wash dishes.\");\n    }\n\n    public void VacuumFloor()\n    {\n        if (isCharged)\n        {\n            Console.WriteLine(\"Vacuum cleaner is cleaning the floor.\");\n        }\n        else\n        {\n            Console.WriteLine(\"Vacuum cleaner battery is low.\");\n        }\n    }\n\n    public void SelfDiagnose()\n    {\n        Console.WriteLine(\"Vacuum cleaner running diagnostics.\");\n    }\n}\n",
            "output": "using System;\n\ninterface CookingCapable {\n    void CookFood();\n}\n\ninterface ServingCapable {\n    void ServeCustomers();\n}\n\ninterface CleaningCapable {\n    void CleanTables();\n}\n\ninterface ManagementCapable {\n    void ManageStaff();\n}\n\ninterface DishWashingCapable {\n    void WashDishes();\n}\n\ninterface FloorCleaningCapable {\n    void VacuumFloor();\n}\n\ninterface SelfDiagnosticCapable {\n    void SelfDiagnose();\n}\n\nclass Chef : CookingCapable\n{\n    public void CookFood()\n    {\n        Console.WriteLine(\"Chef is cooking meals.\");\n    }\n}\n\nclass Waiter : ServingCapable, CleaningCapable\n{\n    public void ServeCustomers()\n    {\n        Console.WriteLine(\"Waiter is serving customers.\");\n    }\n\n    public void CleanTables()\n    {\n        Console.WriteLine(\"Waiter is cleaning tables.\");\n    }\n\n}\n\nclass Manager : ManagementCapable\n{\n    private bool conflict = true;\n    \n    public void ManageStaff()\n    {\n        if (conflict)\n        {\n            Console.WriteLine(\"Manager is resolving a team conflict.\");\n        }\n        else\n        {\n            Console.WriteLine(\"Manager is approving staff schedules.\");\n        }\n    }\n}\n\nclass Dishwasher : DishWashingCapable, SelfDiagnosticCapable\n{\n    int dirtyItems = 15;\n\n    public void WashDishes()\n    {\n        if (dirtyItems > 0)\n        {\n            Console.WriteLine(\"Dishwasher is cleaning \" + dirtyItems + \" plates.\");\n        }\n        else\n        {\n            Console.WriteLine(\"No dishes to clean.\");\n        }\n    }\n\n    public void VacuumFloor()\n    {\n        Console.WriteLine(\"Dishwasher cannot vacuum the floor.\");\n    }\n\n    public void SelfDiagnose()\n    {\n        Console.WriteLine(\"Dishwasher performing self-diagnosis.\");\n    }\n}\n\nclass VacuumCleaner : FloorCleaningCapable, SelfDiagnosticCapable\n{\n    bool isCharged = false;\n\n    public void WashDishes()\n    {\n        Console.WriteLine(\"Vacuum cleaner cannot wash dishes.\");\n    }\n\n    public void VacuumFloor()\n    {\n        if (isCharged)\n        {\n            Console.WriteLine(\"Vacuum cleaner is cleaning the floor.\");\n        }\n        else\n        {\n            Console.WriteLine(\"Vacuum cleaner battery is low.\");\n        }\n    }\n\n    public void SelfDiagnose()\n    {\n        Console.WriteLine(\"Vacuum cleaner running diagnostics.\");\n    }\n}",
            "level": "MODERATE",
            "language": "CSHARP",
            "violation": "ISP"
        },
        {
            "input": "using System;\n\ninterface IVehicle\n{\n    void Start();\n    void Stop();\n    void Fly();\n    void Dive();\n}\n\ninterface IOperator\n{\n    void Steer();\n    void NavigateAir();\n    void NavigateWater();\n    void CommunicateWithTower();\n}\n\nclass Driver : IOperator\n{\n    private string name;\n    \n    public Driver(string name)\n    {\n        this.name = name;\n    }\n    \n    public void Steer()\n    {\n        if (name != null && !string.IsNullOrEmpty(name))\n        {\n            if (name.Length > 5)\n            {\n                Console.WriteLine(\"Experienced driver \" + name + \" steering carefully\");\n            }\n            else\n            {\n                Console.WriteLine(\"Driver \" + name + \" steering\");\n            }\n        }\n    }\n    \n    public void NavigateAir()\n    {\n        throw new NotSupportedException(\"Driver cannot navigate air\");\n    }\n    \n    public void NavigateWater()\n    {\n        throw new NotSupportedException(\"Driver cannot navigate water\");\n    }\n    \n    public void CommunicateWithTower()\n    {\n        throw new NotSupportedException(\"Driver cannot communicate with tower\");\n    }\n    \n    public string GetName()\n    {\n        return name;\n    }\n}\n\nclass Pilot : IOperator\n{\n    private string name;\n    \n    public Pilot(string name)\n    {\n        this.name = name;\n    }\n    \n    public void Steer()\n    {\n        Console.WriteLine(\"Pilot \" + name + \" controlling aircraft\");\n    }\n    \n    public void NavigateAir()\n    {\n        if (name != null)\n        {\n            if (name.Contains(\"Captain\"))\n            {\n                Console.WriteLine(\"Captain pilot navigating complex airspace\");\n            }\n            else if (name.Length > 6)\n            {\n                Console.WriteLine(\"Experienced pilot navigating airspace\");\n            }\n            else\n            {\n                Console.WriteLine(\"Pilot navigating\");\n            }\n        }\n    }\n    \n    public void NavigateWater()\n    {\n        throw new NotSupportedException(\"Pilot cannot navigate water\");\n    }\n    \n    public void CommunicateWithTower()\n    {\n        Console.WriteLine(\"Pilot \" + name + \" communicating with control tower\");\n    }\n    \n    public string GetName()\n    {\n        return name;\n    }\n}\n\nclass Captain : IOperator\n{\n    private string name;\n    \n    public Captain(string name)\n    {\n        this.name = name;\n    }\n    \n    public void Steer()\n    {\n        Console.WriteLine(\"Captain \" + name + \" steering submarine\");\n    }\n    \n    public void NavigateAir()\n    {\n        throw new NotSupportedException(\"Captain cannot navigate air\");\n    }\n    \n    public void NavigateWater()\n    {\n        if (name != null && name.StartsWith(\"Captain\"))\n        {\n            Console.WriteLine(\"Captain navigating deep waters\");\n        }\n        else\n        {\n            Console.WriteLine(\"Naval officer navigating\");\n        }\n    }\n    \n    public void CommunicateWithTower()\n    {\n        throw new NotSupportedException(\"Captain cannot communicate with tower\");\n    }\n    \n    public string GetName()\n    {\n        return name;\n    }\n}\n\nclass Car : IVehicle\n{\n    private Driver driver;\n    \n    public Car(Driver driver)\n    {\n        this.driver = driver;\n    }\n    \n    public void Start()\n    {\n        if (driver != null)\n        {\n            Console.WriteLine(\"Car started by \" + driver.GetName());\n        }\n        else\n        {\n            Console.WriteLine(\"Car started\");\n        }\n    }\n    \n    public void Stop()\n    {\n        Console.WriteLine(\"Car stopped\");\n    }\n    \n    public void Fly()\n    {\n        throw new NotSupportedException(\"Car cannot fly\");\n    }\n    \n    public void Dive()\n    {\n        throw new NotSupportedException(\"Car cannot dive\");\n    }\n    \n    public Driver GetOperator()\n    {\n        return driver;\n    }\n}\n\nclass Plane : IVehicle\n{\n    private Pilot pilot;\n    \n    public Plane(Pilot pilot)\n    {\n        this.pilot = pilot;\n    }\n    \n    public void Start()\n    {\n        Console.WriteLine(\"Plane engines started by \" + pilot.GetName());\n    }\n    \n    public void Stop()\n    {\n        Console.WriteLine(\"Plane stopped\");\n    }\n    \n    public void Fly()\n    {\n        if (pilot.GetName().Contains(\"Captain\"))\n        {\n            Console.WriteLine(\"Plane flying at cruising altitude\");\n        }\n        else\n        {\n            Console.WriteLine(\"Plane flying\");\n        }\n    }\n    \n    public void Dive()\n    {\n        throw new NotSupportedException(\"Plane cannot dive underwater\");\n    }\n    \n    public Pilot GetOperator()\n    {\n        return pilot;\n    }\n}\n\nclass Submarine : IVehicle\n{\n    private Captain captain;\n    private int depth;\n    \n    public Submarine(Captain captain)\n    {\n        this.captain = captain;\n        this.depth = 0;\n    }\n    \n    public void Start()\n    {\n        Console.WriteLine(\"Submarine engines started by \" + captain.GetName());\n    }\n    \n    public void Stop()\n    {\n        Console.WriteLine(\"Submarine stopped\");\n    }\n    \n    public void Fly()\n    {\n        throw new NotSupportedException(\"Submarine cannot fly\");\n    }\n    \n    public void Dive()\n    {\n        if (captain != null && captain.GetName().StartsWith(\"Captain\"))\n        {\n            if (depth < 100)\n            {\n                depth += 50;\n                Console.WriteLine(\"Submarine diving to depth: \" + depth + \" meters\");\n            }\n            else if (depth < 200)\n            {\n                depth += 30;\n                Console.WriteLine(\"Deep diving to: \" + depth + \" meters\");\n            }\n            else\n            {\n                Console.WriteLine(\"Maximum depth reached\");\n            }\n        }\n    }\n    \n    public Captain GetOperator()\n    {\n        return captain;\n    }\n}\n",
            "output": "using System;\n\ninterface StartStopCapable {\n    void Start();\n    void Stop();\n}\n\ninterface FlyingCapable {\n    void Fly();\n}\n\ninterface DivingCapable {\n    void Dive();\n}\n\ninterface GroundSteeringCapable {\n    void Steer();\n}\n\ninterface AirNavigationCapable {\n    void NavigateAir();\n}\n\ninterface WaterNavigationCapable {\n    void NavigateWater();\n}\n\ninterface TowerCommunicationCapable {\n    void CommunicateWithTower();\n}\n\nclass Driver : GroundSteeringCapable\n{\n    private string name;\n    \n    public Driver(string name)\n    {\n        this.name = name;\n    }\n    \n    public void Steer()\n    {\n        if (name != null && !string.IsNullOrEmpty(name))\n        {\n            if (name.Length > 5)\n            {\n                Console.WriteLine(\"Experienced driver \" + name + \" steering carefully\");\n            }\n            else\n            {\n                Console.WriteLine(\"Driver \" + name + \" steering\");\n            }\n        }\n    }\n        \n    public string GetName()\n    {\n        return name;\n    }\n}\n\nclass Pilot : GroundSteeringCapable, AirNavigationCapable, TowerCommunicationCapable\n{\n    private string name;\n    \n    public Pilot(string name)\n    {\n        this.name = name;\n    }\n    \n    public void Steer()\n    {\n        Console.WriteLine(\"Pilot \" + name + \" controlling aircraft\");\n    }\n    \n    public void NavigateAir()\n    {\n        if (name != null)\n        {\n            if (name.Contains(\"Captain\"))\n            {\n                Console.WriteLine(\"Captain pilot navigating complex airspace\");\n            }\n            else if (name.Length > 6)\n            {\n                Console.WriteLine(\"Experienced pilot navigating airspace\");\n            }\n            else\n            {\n                Console.WriteLine(\"Pilot navigating\");\n            }\n        }\n    }\n    \n       \n    public void CommunicateWithTower()\n    {\n        Console.WriteLine(\"Pilot \" + name + \" communicating with control tower\");\n    }\n    \n    public string GetName()\n    {\n        return name;\n    }\n}\n\nclass Captain : GroundSteeringCapable, WaterNavigationCapable\n{\n    private string name;\n    \n    public Captain(string name)\n    {\n        this.name = name;\n    }\n    \n    public void Steer()\n    {\n        Console.WriteLine(\"Captain \" + name + \" steering submarine\");\n    }\n    \n    public void NavigateWater()\n    {\n        if (name != null && name.StartsWith(\"Captain\"))\n        {\n            Console.WriteLine(\"Captain navigating deep waters\");\n        }\n        else\n        {\n            Console.WriteLine(\"Naval officer navigating\");\n        }\n    }\n    \n    public string GetName()\n    {\n        return name;\n    }\n}\n\nclass Car : StartStopCapable\n{\n    private Driver driver;\n    \n    public Car(Driver driver)\n    {\n        this.driver = driver;\n    }\n    \n    public void Start()\n    {\n        if (driver != null)\n        {\n            Console.WriteLine(\"Car started by \" + driver.GetName());\n        }\n        else\n        {\n            Console.WriteLine(\"Car started\");\n        }\n    }\n    \n    public void Stop()\n    {\n        Console.WriteLine(\"Car stopped\");\n    }\n    \n    public Driver GetOperator()\n    {\n        return driver;\n    }\n}\n\nclass Plane : StartStopCapable, FlyingCapable\n{\n    private Pilot pilot;\n    \n    public Plane(Pilot pilot)\n    {\n        this.pilot = pilot;\n    }\n    \n    public void Start()\n    {\n        Console.WriteLine(\"Plane engines started by \" + pilot.GetName());\n    }\n    \n    public void Stop()\n    {\n        Console.WriteLine(\"Plane stopped\");\n    }\n    \n    public void Fly()\n    {\n        if (pilot.GetName().Contains(\"Captain\"))\n        {\n            Console.WriteLine(\"Plane flying at cruising altitude\");\n        }\n        else\n        {\n            Console.WriteLine(\"Plane flying\");\n        }\n    }\n    \n    \n    public Pilot GetOperator()\n    {\n        return pilot;\n    }\n}\n\nclass Submarine : StartStopCapable, DivingCapable\n{\n    private Captain captain;\n    private int depth;\n    \n    public Submarine(Captain captain)\n    {\n        this.captain = captain;\n        this.depth = 0;\n    }\n    \n    public void Start()\n    {\n        Console.WriteLine(\"Submarine engines started by \" + captain.GetName());\n    }\n    \n    public void Stop()\n    {\n        Console.WriteLine(\"Submarine stopped\");\n    }\n    \n        \n    public void Dive()\n    {\n        if (captain != null && captain.GetName().StartsWith(\"Captain\"))\n        {\n            if (depth < 100)\n            {\n                depth += 50;\n                Console.WriteLine(\"Submarine diving to depth: \" + depth + \" meters\");\n            }\n            else if (depth < 200)\n            {\n                depth += 30;\n                Console.WriteLine(\"Deep diving to: \" + depth + \" meters\");\n            }\n            else\n            {\n                Console.WriteLine(\"Maximum depth reached\");\n            }\n        }\n    }\n    \n    public Captain GetOperator()\n    {\n        return captain;\n    }\n}\n",
            "level": "MODERATE",
            "language": "CSHARP",
            "violation": "ISP"
        },
        {
            "input": "interface GameCharacter {\n    void meleeAttack();\n    void castSpell();\n    void fly();\n    void defend();\n}\n\nclass Mage implements GameCharacter {\n    private String name;\n    private int mana;\n    \n    public Mage(String name) {\n        this.name = name;\n        this.mana = 100;\n    }\n    \n    @Override\n    public void meleeAttack() {\n        throw new UnsupportedOperationException(\"Mage cannot perform melee attacks!\");\n    }\n    \n    @Override\n    public void castSpell() {\n        if (mana >= 20) {\n            System.out.println(name + \" casts a fireball spell!\");\n            mana -= 20;\n        } else {\n            System.out.println(name + \" is out of mana!\");\n        }\n    }\n    \n    @Override\n    public void fly() {\n        System.out.println(name + \" soars through the air with magic!\");\n    }\n    \n    @Override\n    public void defend() {\n        System.out.println(name + \" creates a magical shield!\");\n    }\n}\n\nclass Fighter implements GameCharacter {\n    private String name;\n    private int stamina;\n    \n    public Fighter(String name) {\n        this.name = name;\n        this.stamina = 100;\n    }\n    \n    @Override\n    public void meleeAttack() {\n        if (stamina >= 10) {\n            System.out.println(name + \" swings sword with great force!\");\n            stamina -= 10;\n        } else {\n            System.out.println(name + \" is too tired to attack!\");\n        }\n    }\n    \n    @Override\n    public void castSpell() {\n        throw new UnsupportedOperationException(\"Fighter cannot cast spells!\");\n    }\n    \n    @Override\n    public void fly() {\n        throw new UnsupportedOperationException(\"Fighter cannot fly!\");\n    }\n    \n    @Override\n    public void defend() {\n        System.out.println(name + \" raises shield to block incoming attacks!\");\n    }\n}\n",
            "output": "interface GameCharacter {\n    void defend();\n}\n\ninterface IMage {\n    void castSpell();\n    void fly();\n}\n\ninterface IFighter {\n    void meleeAttack();\n}\n\n\n\nclass Mage implements GameCharacter, IMage {\n    private String name;\n    private int mana;\n    \n    public Mage(String name) {\n        this.name = name;\n        this.mana = 100;\n    }\n        \n    @Override\n    public void castSpell() {\n        if (mana >= 20) {\n            System.out.println(name + \" casts a fireball spell!\");\n            mana -= 20;\n        } else {\n            System.out.println(name + \" is out of mana!\");\n        }\n    }\n    \n    @Override\n    public void fly() {\n        System.out.println(name + \" soars through the air with magic!\");\n    }\n    \n    @Override\n    public void defend() {\n        System.out.println(name + \" creates a magical shield!\");\n    }\n}\n\nclass Fighter implements GameCharacter, IFighter {\n    private String name;\n    private int stamina;\n    \n    public Fighter(String name) {\n        this.name = name;\n        this.stamina = 100;\n    }\n    \n    @Override\n    public void meleeAttack() {\n        if (stamina >= 10) {\n            System.out.println(name + \" swings sword with great force!\");\n            stamina -= 10;\n        } else {\n            System.out.println(name + \" is too tired to attack!\");\n        }\n    }\n    \n    @Override\n    public void defend() {\n        System.out.println(name + \" raises shield to block incoming attacks!\");\n    }\n}\n",
            "level": "EASY",
            "language": "JAVA",
            "violation": "ISP"
        },
        {
            "input": "interface MusicPlayer {\n    void play();\n    void pause();\n    void stop();\n    void skipTrack();\n    void eject();\n}\n\nclass CDPlayer implements MusicPlayer {\n    private boolean isPlaying = false;\n    private boolean isPaused = false;\n    private String currentTrack = \"Track 1\";\n    \n    @Override\n    public void play() {\n        isPlaying = true;\n        isPaused = false;\n        System.out.println(\"CD Player: Playing \" + currentTrack);\n    }\n    \n    @Override\n    public void pause() {\n        if (isPlaying) {\n            isPaused = true;\n            isPlaying = false;\n            System.out.println(\"CD Player: Paused\");\n        }\n    }\n    \n    @Override\n    public void stop() {\n        isPlaying = false;\n        isPaused = false;\n        System.out.println(\"CD Player: Stopped\");\n    }\n    \n    @Override\n    public void skipTrack() {\n        System.out.println(\"CD Player: Skipping to next track\");\n        currentTrack = \"Track \" + (Integer.parseInt(currentTrack.split(\" \")[1]) + 1);\n    }\n    \n    @Override\n    public void eject() {\n        stop();\n        System.out.println(\"CD Player: CD ejected\");\n    }\n}\n\nclass VinylPlayer implements MusicPlayer {\n    private boolean isPlaying = false;\n    private boolean isPaused = false;\n    private String currentSong = \"Side A\";\n    \n    @Override\n    public void play() {\n        isPlaying = true;\n        isPaused = false;\n        System.out.println(\"Vinyl Player: Playing \" + currentSong);\n    }\n    \n    @Override\n    public void pause() {\n        if (isPlaying) {\n            isPaused = true;\n            isPlaying = false;\n            System.out.println(\"Vinyl Player: Paused (needle lifted)\");\n        }\n    }\n    \n    @Override\n    public void stop() {\n        isPlaying = false;\n        isPaused = false;\n        System.out.println(\"Vinyl Player: Stopped\");\n    }\n    \n    @Override\n    public void skipTrack() {\n        throw new UnsupportedOperationException(\"Vinyl players cannot skip tracks - you must manually move the needle!\");\n    }\n   \n    @Override\n    public void eject() {\n        throw new UnsupportedOperationException(\"Vinyl players don't eject - you must manually remove the record!\");\n    }\n}\n",
            "output": "interface MusicPlayer {\n    void play();\n    void pause();\n    void stop();\n}\n\ninterface ICDPlayer{\n\tvoid skipTrack();\n    void eject();\n}\n\nclass CDPlayer implements MusicPlayer, ICDPlayer {\n    private boolean isPlaying = false;\n    private boolean isPaused = false;\n    private String currentTrack = \"Track 1\";\n    \n    @Override\n    public void play() {\n        isPlaying = true;\n        isPaused = false;\n        System.out.println(\"CD Player: Playing \" + currentTrack);\n    }\n    \n    @Override\n    public void pause() {\n        if (isPlaying) {\n            isPaused = true;\n            isPlaying = false;\n            System.out.println(\"CD Player: Paused\");\n        }\n    }\n    \n    @Override\n    public void stop() {\n        isPlaying = false;\n        isPaused = false;\n        System.out.println(\"CD Player: Stopped\");\n    }\n    \n    @Override\n    public void skipTrack() {\n        System.out.println(\"CD Player: Skipping to next track\");\n        currentTrack = \"Track \" + (Integer.parseInt(currentTrack.split(\" \")[1]) + 1);\n    }\n    \n    @Override\n    public void eject() {\n        stop();\n        System.out.println(\"CD Player: CD ejected\");\n    }\n}\n\nclass VinylPlayer implements MusicPlayer {\n    private boolean isPlaying = false;\n    private boolean isPaused = false;\n    private String currentSong = \"Side A\";\n    \n    @Override\n    public void play() {\n        isPlaying = true;\n        isPaused = false;\n        System.out.println(\"Vinyl Player: Playing \" + currentSong);\n    }\n    \n    @Override\n    public void pause() {\n        if (isPlaying) {\n            isPaused = true;\n            isPlaying = false;\n            System.out.println(\"Vinyl Player: Paused (needle lifted)\");\n        }\n    }\n    \n    @Override\n    public void stop() {\n        isPlaying = false;\n        isPaused = false;\n        System.out.println(\"Vinyl Player: Stopped\");\n    }\n    \n}\n",
            "level": "EASY",
            "language": "JAVA",
            "violation": "ISP"
        },
        {
            "input": "interface RestaurantWorker {\n    void cookFood();\n    void serveCustomers();\n    void cleanTables();\n}\n\nclass Chef implements RestaurantWorker {\n    public void cookFood() {\n        System.out.println(\"Chef is cooking food.\");\n    }\n\n    public void serveCustomers() {\n        System.out.println(\"Chef does not serve customers.\");\n    }\n\n    public void cleanTables() {\n        System.out.println(\"Chef does not clean tables.\");\n    }\n}\n\nclass Waiter implements RestaurantWorker {\n    public void cookFood() {\n        System.out.println(\"Waiter does not cook food.\");\n    }\n\n    public void serveCustomers() {\n        System.out.println(\"Waiter is serving customers.\");\n    }\n\n    public void cleanTables() {\n        System.out.println(\"Waiter is cleaning tables.\");\n    }\n}\n\nclass Cleaner implements RestaurantWorker {\n    public void cookFood() {\n        System.out.println(\"Cleaner does not cook food.\");\n    }\n\n    public void serveCustomers() {\n        System.out.println(\"Cleaner does not serve customers.\");\n    }\n\n    public void cleanTables() {\n        System.out.println(\"Cleaner is cleaning tables.\");\n    }\n}\n",
            "output": "interface IChef {\n    void cookFood();\n}\ninterface IWaiter {\n    void serveCustomers();\n}\ninterface ICleaner {\n    void cleanTables();\n}\n\nclass Chef implements IChef {\n    public void cookFood() {\n        System.out.println(\"Chef is cooking food.\");\n    }\n\n}\n\nclass Waiter implements IWaiter, ICleaner {\n\n    public void serveCustomers() {\n        System.out.println(\"Waiter is serving customers.\");\n    }\n\n    public void cleanTables() {\n        System.out.println(\"Waiter is cleaning tables.\");\n    }\n}\n\nclass Cleaner implements ICleaner {\n\n    public void cleanTables() {\n        System.out.println(\"Cleaner is cleaning tables.\");\n    }\n}",
            "level": "EASY",
            "language": "JAVA",
            "violation": "ISP"
        },
        {
            "input": "interface Vehicle {\n    void start();\n    void stop();\n    void fly();\n}\n\nclass Car implements Vehicle {\n    public void start() {\n        System.out.println(\"Car engine started\");\n    }\n    \n    public void stop() {\n        System.out.println(\"Car stopped\");\n    }\n    \n    public void fly() {\n        throw new UnsupportedOperationException(\"Car cannot fly\");\n    }\n}\n\nclass Plane implements Vehicle {\n    public void start() {\n        System.out.println(\"Plane engines started\");\n    }\n    \n    public void stop() {\n        System.out.println(\"Plane stopped\");\n    }\n    \n    public void fly() {\n        System.out.println(\"Plane is flying\");\n    }\n}\n",
            "output": "interface Vehicle {\n    void start();\n    void stop();\n}\n\ninterface IPlane {\n    void fly();\n}\n\nclass Car implements Vehicle {\n    public void start() {\n        System.out.println(\"Car engine started\");\n    }\n    \n    public void stop() {\n        System.out.println(\"Car stopped\");\n    }\n    \n}\n\nclass Plane implements Vehicle, IPlane {\n    public void start() {\n        System.out.println(\"Plane engines started\");\n    }\n    \n    public void stop() {\n        System.out.println(\"Plane stopped\");\n    }\n    \n    public void fly() {\n        System.out.println(\"Plane is flying\");\n    }\n}\n",
            "level": "EASY",
            "language": "JAVA",
            "violation": "ISP"
        },
        {
            "input": "interface GameCharacter {\n    void meleeAttack();\n    void castSpell();\n    void fly();\n    void defend();\n}\n\ninterface Weapon {\n    void slash();\n    void shoot();\n    void enchant();\n    void repair();\n}\n\ninterface Enemy {\n    void attack();\n    void fly();\n    void poison();\n    void summonMinions();\n    void takeDamage(int[] damageValues);\n}\n\nclass Mage implements GameCharacter {\n    private String name;\n    private int mana;\n    private int level;\n    \n    public Mage(String name, int level) {\n        this.name = name;\n        this.mana = 100;\n        this.level = level;\n    }\n    \n    @Override\n    public void meleeAttack() {\n        throw new UnsupportedOperationException(\"Mage cannot perform melee attacks!\");\n    }\n    \n    @Override\n    public void castSpell() {\n        if (mana < 10) {\n            System.out.println(name + \" is out of mana!\");\n            return;\n        }\n        \n        if (level >= 5 && mana >= 30) {\n            System.out.println(name + \" casts a powerful lightning storm!\");\n            mana -= 30;\n        } else if (level >= 3 && mana >= 20) {\n            System.out.println(name + \" casts a fireball spell!\");\n            mana -= 20;\n        } else if (mana >= 10) {\n            System.out.println(name + \" casts a basic magic missile!\");\n            mana -= 10;\n        }\n    }\n    \n    @Override\n    public void fly() {\n        if (level >= 2) {\n            System.out.println(name + \" soars through the air with magic!\");\n        } else {\n            System.out.println(name + \" is too inexperienced to fly!\");\n        }\n    }\n    \n    @Override\n    public void defend() {\n        if (mana >= 15) {\n            System.out.println(name + \" creates a magical barrier!\");\n            mana -= 15;\n        } else {\n            System.out.println(name + \" dodges awkwardly!\");\n        }\n    }\n}\n\nclass Fighter implements GameCharacter {\n    private String name;\n    private int stamina;\n    private boolean hasWeapon;\n    \n    public Fighter(String name, boolean hasWeapon) {\n        this.name = name;\n        this.stamina = 100;\n        this.hasWeapon = hasWeapon;\n    }\n    \n    @Override\n    public void meleeAttack() {\n        if (stamina < 5) {\n            System.out.println(name + \" is too exhausted to fight!\");\n            return;\n        }\n        \n        if (hasWeapon) {\n            if (stamina >= 20) {\n                System.out.println(name + \" performs a devastating combo attack!\");\n                stamina -= 20;\n            } else if (stamina >= 10) {\n                System.out.println(name + \" swings weapon with force!\");\n                stamina -= 10;\n            } else {\n                System.out.println(name + \" makes a weak weapon strike!\");\n                stamina -= 5;\n            }\n        } else {\n            if (stamina >= 15) {\n                System.out.println(name + \" throws a powerful punch!\");\n                stamina -= 15;\n            } else {\n                System.out.println(name + \" throws a basic punch!\");\n                stamina -= 5;\n            }\n        }\n    }\n    \n    @Override\n    public void castSpell() {\n        throw new UnsupportedOperationException(\"Fighter cannot cast spells!\");\n    }\n    \n    @Override\n    public void fly() {\n        throw new UnsupportedOperationException(\"Fighter cannot fly!\");\n    }\n    \n    @Override\n    public void defend() {\n        if (hasWeapon && stamina >= 10) {\n            System.out.println(name + \" blocks with weapon!\");\n            stamina -= 10;\n        } else if (stamina >= 5) {\n            System.out.println(name + \" raises arms to defend!\");\n            stamina -= 5;\n        } else {\n            System.out.println(name + \" barely manages to dodge!\");\n        }\n    }\n}\n\nclass Sword implements Weapon {\n    private int sharpness;\n    private boolean isMagic;\n    \n    public Sword(int sharpness, boolean isMagic) {\n        this.sharpness = sharpness;\n        this.isMagic = isMagic;\n    }\n    \n    @Override\n    public void slash() {\n        if (sharpness > 70) {\n            System.out.println(\"Sword cuts cleanly through the target!\");\n        } else if (sharpness > 30) {\n            System.out.println(\"Sword makes a decent cut!\");\n        } else {\n            System.out.println(\"Dull sword barely scratches the target!\");\n        }\n    }\n    \n    @Override\n    public void shoot() {\n        throw new UnsupportedOperationException(\"Sword cannot shoot!\");\n    }\n    \n    @Override\n    public void enchant() {\n        if (isMagic) {\n            System.out.println(\"Magical sword glows with enhanced power!\");\n            sharpness += 10;\n        } else {\n            throw new UnsupportedOperationException(\"Non-magic sword cannot be enchanted!\");\n        }\n    }\n    \n    @Override\n    public void repair() {\n        if (sharpness < 100) {\n            sharpness = Math.min(100, sharpness + 25);\n            System.out.println(\"Sword has been sharpened and repaired!\");\n        } else {\n            System.out.println(\"Sword is already in perfect condition!\");\n        }\n    }\n}\n\nclass Bow implements Weapon {\n    private int arrows;\n    private int range;\n    \n    public Bow(int arrows, int range) {\n        this.arrows = arrows;\n        this.range = range;\n    }\n    \n    @Override\n    public void slash() {\n        throw new UnsupportedOperationException(\"Bow cannot slash!\");\n    }\n    \n    @Override\n    public void shoot() {\n        if (arrows <= 0) {\n            System.out.println(\"No arrows left to shoot!\");\n            return;\n        }\n        \n        if (range > 80) {\n            System.out.println(\"Long-range shot hits the distant target!\");\n        } else if (range > 50) {\n            System.out.println(\"Medium-range shot finds its mark!\");\n        } else {\n            System.out.println(\"Short-range shot barely reaches the target!\");\n        }\n        arrows--;\n    }\n    \n    @Override\n    public void enchant() {\n        throw new UnsupportedOperationException(\"Regular bow cannot be enchanted!\");\n    }\n    \n    @Override\n    public void repair() {\n        if (range < 100) {\n            range = Math.min(100, range + 15);\n            System.out.println(\"Bow string tightened and wood polished!\");\n        } else {\n            System.out.println(\"Bow is in excellent condition!\");\n        }\n    }\n}\n\nclass Orc implements Enemy {\n    private String name;\n    private int health;\n    private int strength;\n    \n    public Orc(String name, int strength) {\n        this.name = name;\n        this.health = 100;\n        this.strength = strength;\n    }\n    \n    @Override\n    public void attack() {\n        if (strength > 50) {\n            System.out.println(name + \" delivers a crushing blow!\");\n        } else {\n            System.out.println(name + \" swings clumsily!\");\n        }\n    }\n    \n    @Override\n    public void fly() {\n        throw new UnsupportedOperationException(\"Orc cannot fly!\");\n    }\n    \n    @Override\n    public void poison() {\n        throw new UnsupportedOperationException(\"Orc cannot poison enemies!\");\n    }\n    \n    @Override\n    public void summonMinions() {\n        throw new UnsupportedOperationException(\"Orc cannot summon minions!\");\n    }\n    \n    @Override\n    public void takeDamage(int[] damageValues) {\n        int totalDamage = 0;\n        for (int i = 0; i < damageValues.length; i++) {\n            if (damageValues[i] > 0) {\n                totalDamage += damageValues[i];\n                if (damageValues[i] > 20) {\n                    System.out.println(name + \" staggers from heavy damage!\");\n                }\n            }\n        }\n        health -= totalDamage;\n        System.out.println(name + \" takes \" + totalDamage + \" damage! Health: \" + health);\n        \n        if (health <= 0) {\n            System.out.println(name + \" has been defeated!\");\n        }\n    }\n}\n\nclass Dragon implements Enemy {\n    private String name;\n    private int health;\n    private int firepower;\n    private boolean canFly;\n    \n    public Dragon(String name, int firepower) {\n        this.name = name;\n        this.health = 200;\n        this.firepower = firepower;\n        this.canFly = true;\n    }\n    \n    @Override\n    public void attack() {\n        if (firepower > 80) {\n            System.out.println(name + \" breathes devastating flames!\");\n        } else if (firepower > 50) {\n            System.out.println(name + \" breathes hot fire!\");\n        } else {\n            System.out.println(name + \" breathes weak flames!\");\n        }\n    }\n    \n    @Override\n    public void fly() {\n        if (canFly && health > 50) {\n            System.out.println(name + \" soars majestically through the sky!\");\n        } else if (health <= 50) {\n            System.out.println(name + \" is too wounded to fly!\");\n        }\n    }\n    \n    @Override\n    public void poison() {\n        throw new UnsupportedOperationException(\"Dragon doesn't use poison!\");\n    }\n    \n    @Override\n    public void summonMinions() {\n        throw new UnsupportedOperationException(\"Dragon doesn't summon minions!\");\n    }\n    \n    @Override\n    public void takeDamage(int[] damageValues) {\n        int totalDamage = 0;\n        int criticalHits = 0;\n        \n        for (int i = 0; i < damageValues.length; i++) {\n            if (damageValues[i] > 0) {\n                int reducedDamage = Math.max(1, damageValues[i] - 5);\n                totalDamage += reducedDamage;\n                \n                if (damageValues[i] > 30) {\n                    criticalHits++;\n                    System.out.println(name + \" roars in pain from critical hit!\");\n                }\n            }\n        }\n        \n        health -= totalDamage;\n        System.out.println(name + \" takes \" + totalDamage + \" damage (\" + criticalHits + \" critical hits)! Health: \" + health);\n        \n        if (health <= 0) {\n            System.out.println(name + \" crashes to the ground, defeated!\");\n            canFly = false;\n        }\n    }\n}\n\nclass Spider implements Enemy {\n    private String name;\n    private int health;\n    private boolean hasPoison;\n    \n    public Spider(String name) {\n        this.name = name;\n        this.health = 50;\n        this.hasPoison = true;\n    }\n    \n    @Override\n    public void attack() {\n        System.out.println(name + \" bites with venomous fangs!\");\n    }\n    \n    @Override\n    public void fly() {\n        throw new UnsupportedOperationException(\"Spider cannot fly!\");\n    }\n    \n    @Override\n    public void poison() {\n        if (hasPoison) {\n            System.out.println(name + \" injects deadly venom!\");\n        } else {\n            System.out.println(name + \" has no poison left!\");\n        }\n    }\n    \n    @Override\n    public void summonMinions() {\n        throw new UnsupportedOperationException(\"Spider cannot summon minions!\");\n    }\n    \n    @Override\n    public void takeDamage(int[] damageValues) {\n        int totalDamage = 0;\n        for (int damage : damageValues) {\n            if (damage > 0) {\n                int amplifiedDamage = damage + (damage / 2);\n                totalDamage += amplifiedDamage;\n                \n                if (damage > 10) {\n                    System.out.println(name + \" screeches in pain!\");\n                }\n            }\n        }\n        \n        health -= totalDamage;\n        System.out.println(name + \" takes \" + totalDamage + \" damage! Health: \" + health);\n        \n        if (health <= 0) {\n            System.out.println(name + \" curls up and dies!\");\n        }\n    }\n}",
            "output": "interface MeleeAttacker {\n    void meleeAttack();\n}\n\ninterface SpellCaster {\n    void castSpell();\n}\n\ninterface Flyer {\n    void fly();\n}\n\ninterface Defender {\n    void defend();\n}\n\ninterface SlashingWeapon {\n    void slash();\n}\n\ninterface RangedWeapon {\n    void shoot();\n}\n\ninterface EnchantableWeapon {\n    void enchant();\n}\n\ninterface RepairableWeapon {\n    void repair();\n}\n\ninterface Attacker {\n    void attack();\n}\n\ninterface Poisoner {\n    void poison();\n}\n\ninterface MinionSummoner {\n    void summonMinions();\n}\n\ninterface Damageable {\n    void takeDamage(int[] damageValues);\n}\n\nclass Mage implements SpellCaster, Flyer, Defender {\n    private String name;\n    private int mana;\n    private int level;\n    \n    public Mage(String name, int level) {\n        this.name = name;\n        this.mana = 100;\n        this.level = level;\n    }\n    \n    @Override\n    public void castSpell() {\n        if (mana < 10) {\n            System.out.println(name + \" is out of mana!\");\n            return;\n        }\n        \n        if (level >= 5 && mana >= 30) {\n            System.out.println(name + \" casts a powerful lightning storm!\");\n            mana -= 30;\n        } else if (level >= 3 && mana >= 20) {\n            System.out.println(name + \" casts a fireball spell!\");\n            mana -= 20;\n        } else if (mana >= 10) {\n            System.out.println(name + \" casts a basic magic missile!\");\n            mana -= 10;\n        }\n    }\n    \n    @Override\n    public void fly() {\n        if (level >= 2) {\n            System.out.println(name + \" soars through the air with magic!\");\n        } else {\n            System.out.println(name + \" is too inexperienced to fly!\");\n        }\n    }\n    \n    @Override\n    public void defend() {\n        if (mana >= 15) {\n            System.out.println(name + \" creates a magical barrier!\");\n            mana -= 15;\n        } else {\n            System.out.println(name + \" dodges awkwardly!\");\n        }\n    }\n}\n\nclass Fighter implements MeleeAttacker, Defender {\n    private String name;\n    private int stamina;\n    private boolean hasWeapon;\n    \n    public Fighter(String name, boolean hasWeapon) {\n        this.name = name;\n        this.stamina = 100;\n        this.hasWeapon = hasWeapon;\n    }\n    \n    @Override\n    public void meleeAttack() {\n        if (stamina < 5) {\n            System.out.println(name + \" is too exhausted to fight!\");\n            return;\n        }\n        \n        if (hasWeapon) {\n            if (stamina >= 20) {\n                System.out.println(name + \" performs a devastating combo attack!\");\n                stamina -= 20;\n            } else if (stamina >= 10) {\n                System.out.println(name + \" swings weapon with force!\");\n                stamina -= 10;\n            } else {\n                System.out.println(name + \" makes a weak weapon strike!\");\n                stamina -= 5;\n            }\n        } else {\n            if (stamina >= 15) {\n                System.out.println(name + \" throws a powerful punch!\");\n                stamina -= 15;\n            } else {\n                System.out.println(name + \" throws a basic punch!\");\n                stamina -= 5;\n            }\n        }\n    }\n    \n    @Override\n    public void defend() {\n        if (hasWeapon && stamina >= 10) {\n            System.out.println(name + \" blocks with weapon!\");\n            stamina -= 10;\n        } else if (stamina >= 5) {\n            System.out.println(name + \" raises arms to defend!\");\n            stamina -= 5;\n        } else {\n            System.out.println(name + \" barely manages to dodge!\");\n        }\n    }\n}\n\nclass Sword implements SlashingWeapon, EnchantableWeapon, RepairableWeapon {\n    private int sharpness;\n    private boolean isMagic;\n    \n    public Sword(int sharpness, boolean isMagic) {\n        this.sharpness = sharpness;\n        this.isMagic = isMagic;\n    }\n    \n    @Override\n    public void slash() {\n        if (sharpness > 70) {\n            System.out.println(\"Sword cuts cleanly through the target!\");\n        } else if (sharpness > 30) {\n            System.out.println(\"Sword makes a decent cut!\");\n        } else {\n            System.out.println(\"Dull sword barely scratches the target!\");\n        }\n    }\n    \n    @Override\n    public void enchant() {\n        if (isMagic) {\n            System.out.println(\"Magical sword glows with enhanced power!\");\n            sharpness += 10;\n        } else {\n            throw new UnsupportedOperationException(\"Non-magic sword cannot be enchanted!\");\n        }\n    }\n    \n    @Override\n    public void repair() {\n        if (sharpness < 100) {\n            sharpness = Math.min(100, sharpness + 25);\n            System.out.println(\"Sword has been sharpened and repaired!\");\n        } else {\n            System.out.println(\"Sword is already in perfect condition!\");\n        }\n    }\n}\n\nclass Bow implements RangedWeapon, RepairableWeapon {\n    private int arrows;\n    private int range;\n    \n    public Bow(int arrows, int range) {\n        this.arrows = arrows;\n        this.range = range;\n    }\n    \n    @Override\n    public void shoot() {\n        if (arrows <= 0) {\n            System.out.println(\"No arrows left to shoot!\");\n            return;\n        }\n        \n        if (range > 80) {\n            System.out.println(\"Long-range shot hits the distant target!\");\n        } else if (range > 50) {\n            System.out.println(\"Medium-range shot finds its mark!\");\n        } else {\n            System.out.println(\"Short-range shot barely reaches the target!\");\n        }\n        arrows--;\n    }\n    \n    @Override\n    public void repair() {\n        if (range < 100) {\n            range = Math.min(100, range + 15);\n            System.out.println(\"Bow string tightened and wood polished!\");\n        } else {\n            System.out.println(\"Bow is in excellent condition!\");\n        }\n    }\n}\n\nclass Orc implements Attacker, Damageable {\n    private String name;\n    private int health;\n    private int strength;\n    \n    public Orc(String name, int strength) {\n        this.name = name;\n        this.health = 100;\n        this.strength = strength;\n    }\n    \n    @Override\n    public void attack() {\n        if (strength > 50) {\n            System.out.println(name + \" delivers a crushing blow!\");\n        } else {\n            System.out.println(name + \" swings clumsily!\");\n        }\n    }\n    \n    @Override\n    public void takeDamage(int[] damageValues) {\n        int totalDamage = 0;\n        for (int i = 0; i < damageValues.length; i++) {\n            if (damageValues[i] > 0) {\n                totalDamage += damageValues[i];\n                if (damageValues[i] > 20) {\n                    System.out.println(name + \" staggers from heavy damage!\");\n                }\n            }\n        }\n        health -= totalDamage;\n        System.out.println(name + \" takes \" + totalDamage + \" damage! Health: \" + health);\n        \n        if (health <= 0) {\n            System.out.println(name + \" has been defeated!\");\n        }\n    }\n}\n\nclass Dragon implements Attacker, Flyer, Damageable {\n    private String name;\n    private int health;\n    private int firepower;\n    private boolean canFly;\n    \n    public Dragon(String name, int firepower) {\n        this.name = name;\n        this.health = 200;\n        this.firepower = firepower;\n        this.canFly = true;\n    }\n    \n    @Override\n    public void attack() {\n        if (firepower > 80) {\n            System.out.println(name + \" breathes devastating flames!\");\n        } else if (firepower > 50) {\n            System.out.println(name + \" breathes hot fire!\");\n        } else {\n            System.out.println(name + \" breathes weak flames!\");\n        }\n    }\n    \n    @Override\n    public void fly() {\n        if (canFly && health > 50) {\n            System.out.println(name + \" soars majestically through the sky!\");\n        } else if (health <= 50) {\n            System.out.println(name + \" is too wounded to fly!\");\n        }\n    }\n    \n    @Override\n    public void takeDamage(int[] damageValues) {\n        int totalDamage = 0;\n        int criticalHits = 0;\n        \n        for (int i = 0; i < damageValues.length; i++) {\n            if (damageValues[i] > 0) {\n                int reducedDamage = Math.max(1, damageValues[i] - 5);\n                totalDamage += reducedDamage;\n                \n                if (damageValues[i] > 30) {\n                    criticalHits++;\n                    System.out.println(name + \" roars in pain from critical hit!\");\n                }\n            }\n        }\n        \n        health -= totalDamage;\n        System.out.println(name + \" takes \" + totalDamage + \" damage (\" + criticalHits + \" critical hits)! Health: \" + health);\n        \n        if (health <= 0) {\n            System.out.println(name + \" crashes to the ground, defeated!\");\n            canFly = false;\n        }\n    }\n}\n\nclass Spider implements Attacker, Poisoner, Damageable {\n    private String name;\n    private int health;\n    private boolean hasPoison;\n    \n    public Spider(String name) {\n        this.name = name;\n        this.health = 50;\n        this.hasPoison = true;\n    }\n    \n    @Override\n    public void attack() {\n        System.out.println(name + \" bites with venomous fangs!\");\n    }\n    \n    @Override\n    public void poison() {\n        if (hasPoison) {\n            System.out.println(name + \" injects deadly venom!\");\n        } else {\n            System.out.println(name + \" has no poison left!\");\n        }\n    }\n    \n    @Override\n    public void takeDamage(int[] damageValues) {\n        int totalDamage = 0;\n        for (int damage : damageValues) {\n            if (damage > 0) {\n                int amplifiedDamage = damage + (damage / 2);\n                totalDamage += amplifiedDamage;\n                \n                if (damage > 10) {\n                    System.out.println(name + \" screeches in pain!\");\n                }\n            }\n        }\n        \n        health -= totalDamage;\n        System.out.println(name + \" takes \" + totalDamage + \" damage! Health: \" + health);\n        \n        if (health <= 0) {\n            System.out.println(name + \" curls up and dies!\");\n        }\n    }\n}\n",
            "level": "HARD",
            "language": "JAVA",
            "violation": "ISP"
        },
        {
            "input": "interface MusicPlayer {\n    void play();\n    void pause();\n    void stop();\n    void skipTrack();\n    void eject();\n    void setVolume(int volume);\n    void setEqualizer(String preset);\n    void displayTrackInfo();\n    void shuffle();\n    void repeat();\n}\n\ninterface AdvancedAudioDevice {\n    void connectBluetooth();\n    void disconnectBluetooth();\n    void pairDevice(String deviceName);\n    void enableMicrophone();\n    void disableMicrophone();\n    void firmwareUpdate();\n}\n\nclass CDPlayer implements MusicPlayer {\n    private boolean isPlaying = false;\n    private boolean isPaused = false;\n    private String currentTrack = \"Track 1\";\n    private int volume = 50;\n    private boolean shuffleMode = false;\n    private boolean repeatMode = false;\n\n    @Override\n    public void play() {\n        isPlaying = true;\n        isPaused = false;\n        System.out.println(\"CD Player: Playing \" + currentTrack);\n    }\n\n    @Override\n    public void pause() {\n        if (isPlaying) {\n            isPaused = true;\n            isPlaying = false;\n            System.out.println(\"CD Player: Paused\");\n        }\n    }\n\n    @Override\n    public void stop() {\n        isPlaying = false;\n        isPaused = false;\n        System.out.println(\"CD Player: Stopped\");\n    }\n\n    @Override\n    public void skipTrack() {\n        System.out.println(\"CD Player: Skipping to next track\");\n        currentTrack = \"Track \" + (Integer.parseInt(currentTrack.split(\" \")[1]) + 1);\n    }\n\n    @Override\n    public void eject() {\n        stop();\n        System.out.println(\"CD Player: CD ejected\");\n    }\n\n    @Override\n    public void setVolume(int volume) {\n        this.volume = volume;\n        System.out.println(\"CD Player: Volume set to \" + volume);\n    }\n\n    @Override\n    public void setEqualizer(String preset) {\n        System.out.println(\"CD Player: Equalizer set to \" + preset);\n    }\n\n    @Override\n    public void displayTrackInfo() {\n        System.out.println(\"CD Player: Current track - \" + currentTrack + \", Volume: \" + volume);\n    }\n\n    @Override\n    public void shuffle() {\n        shuffleMode = !shuffleMode;\n        System.out.println(\"CD Player: Shuffle \" + (shuffleMode ? \"ON\" : \"OFF\"));\n    }\n\n    @Override\n    public void repeat() {\n        repeatMode = !repeatMode;\n        System.out.println(\"CD Player: Repeat \" + (repeatMode ? \"ON\" : \"OFF\"));\n    }\n}\n\nclass VinylPlayer implements MusicPlayer {\n    private boolean isPlaying = false;\n    private boolean isPaused = false;\n    private String currentSong = \"Side A\";\n    private int volume = 50;\n\n    @Override\n    public void play() {\n        isPlaying = true;\n        isPaused = false;\n        System.out.println(\"Vinyl Player: Playing \" + currentSong);\n    }\n\n    @Override\n    public void pause() {\n        if (isPlaying) {\n            isPaused = true;\n            isPlaying = false;\n            System.out.println(\"Vinyl Player: Paused (needle lifted)\");\n        }\n    }\n\n    @Override\n    public void stop() {\n        isPlaying = false;\n        isPaused = false;\n        System.out.println(\"Vinyl Player: Stopped\");\n    }\n\n    @Override\n    public void skipTrack() {\n        throw new UnsupportedOperationException(\"Vinyl players cannot skip tracks - you must manually move the needle!\");\n    }\n\n    @Override\n    public void eject() {\n        throw new UnsupportedOperationException(\"Vinyl players don't eject - you must manually remove the record!\");\n    }\n\n    @Override\n    public void setVolume(int volume) {\n        this.volume = volume;\n        System.out.println(\"Vinyl Player: Volume set to \" + volume);\n    }\n\n    @Override\n    public void setEqualizer(String preset) {\n        throw new UnsupportedOperationException(\"Vintage vinyl players don't have digital equalizers!\");\n    }\n\n    @Override\n    public void displayTrackInfo() {\n        System.out.println(\"Vinyl Player: Current side - \" + currentSong + \", Volume: \" + volume);\n    }\n\n    @Override\n    public void shuffle() {\n        throw new UnsupportedOperationException(\"Cannot shuffle vinyl records!\");\n    }\n\n    @Override\n    public void repeat() {\n        throw new UnsupportedOperationException(\"Vinyl players don't have automatic repeat!\");\n    }\n}\n\nclass Amplifier implements MusicPlayer {\n    private boolean isPoweredOn = false;\n    private int volume = 30;\n    private String equalizerSetting = \"Flat\";\n    private boolean bassBoost = false;\n\n    @Override\n    public void play() {\n        throw new UnsupportedOperationException(\"Amplifiers don't play music - they amplify audio signals!\");\n    }\n\n    @Override\n    public void pause() {\n        throw new UnsupportedOperationException(\"Amplifiers don't control playback!\");\n    }\n\n    @Override\n    public void stop() {\n        isPoweredOn = false;\n        System.out.println(\"Amplifier: Powered OFF\");\n    }\n\n    @Override\n    public void skipTrack() {\n        throw new UnsupportedOperationException(\"Amplifiers don't control track selection!\");\n    }\n\n    @Override\n    public void eject() {\n        throw new UnsupportedOperationException(\"Amplifiers don't have media to eject!\");\n    }\n\n    @Override\n    public void setVolume(int volume) {\n        if (volume < 0) {\n            this.volume = 0;\n        } else if (volume > 100) {\n            this.volume = 100;\n        } else {\n            this.volume = volume;\n        }\n        if (this.volume > 80) {\n            System.out.println(\"Amplifier: Warning - High volume!\");\n        }\n        System.out.println(\"Amplifier: Master volume set to \" + this.volume);\n    }\n\n    @Override\n    public void setEqualizer(String preset) {\n        switch (preset.toLowerCase()) {\n            case \"rock\":\n            case \"pop\":\n            case \"jazz\":\n            case \"classical\":\n                equalizerSetting = preset;\n                break;\n            default:\n                equalizerSetting = \"Flat\";\n                System.out.println(\"Amplifier: Unknown preset. Defaulting to Flat.\");\n                return;\n        }\n        System.out.println(\"Amplifier: Equalizer set to \" + equalizerSetting);\n    }\n\n    @Override\n    public void displayTrackInfo() {\n        throw new UnsupportedOperationException(\"Amplifiers don't track music information!\");\n    }\n\n    @Override\n    public void shuffle() {\n        throw new UnsupportedOperationException(\"Amplifiers don't control playback modes!\");\n    }\n\n    @Override\n    public void repeat() {\n        throw new UnsupportedOperationException(\"Amplifiers don't control playback modes!\");\n    }\n\n    public void powerOn() {\n        isPoweredOn = true;\n        System.out.println(\"Amplifier: Powered ON\");\n    }\n\n    public void setBassBoost(boolean enabled) {\n        this.bassBoost = enabled;\n        System.out.println(\"Amplifier: Bass boost \" + (enabled ? \"ON\" : \"OFF\"));\n    }\n}\n\nclass BluetoothSpeaker implements MusicPlayer, AdvancedAudioDevice {\n    private boolean isConnected = false;\n    private int volume = 50;\n\n    @Override\n    public void play() {\n        if (isConnected) {\n            System.out.println(\"Bluetooth Speaker: Playing audio\");\n        } else {\n            throw new IllegalStateException(\"Bluetooth Speaker not connected\");\n        }\n    }\n\n    @Override\n    public void pause() {\n        System.out.println(\"Bluetooth Speaker: Paused\");\n    }\n\n    @Override\n    public void stop() {\n        System.out.println(\"Bluetooth Speaker: Stopped\");\n    }\n\n    @Override\n    public void skipTrack() {\n        System.out.println(\"Bluetooth Speaker: Skipping track\");\n    }\n\n    @Override\n    public void eject() {\n        throw new UnsupportedOperationException(\"Bluetooth Speakers don't eject media\");\n    }\n\n    @Override\n    public void setVolume(int volume) {\n        if (volume >= 0 && volume <= 100) {\n            this.volume = volume;\n        }\n        System.out.println(\"Bluetooth Speaker: Volume set to \" + this.volume);\n    }\n\n    @Override\n    public void setEqualizer(String preset) {\n        System.out.println(\"Bluetooth Speaker: Equalizer set to \" + preset);\n    }\n\n    @Override\n    public void displayTrackInfo() {\n        System.out.println(\"Bluetooth Speaker: No track info available\");\n    }\n\n    @Override\n    public void shuffle() {\n        throw new UnsupportedOperationException(\"Bluetooth Speaker doesn't support shuffle mode\");\n    }\n\n    @Override\n    public void repeat() {\n        throw new UnsupportedOperationException(\"Bluetooth Speaker doesn't support repeat mode\");\n    }\n\n    @Override\n    public void connectBluetooth() {\n        isConnected = true;\n        System.out.println(\"Bluetooth Speaker: Connected\");\n    }\n\n    @Override\n    public void disconnectBluetooth() {\n        isConnected = false;\n        System.out.println(\"Bluetooth Speaker: Disconnected\");\n    }\n\n    @Override\n    public void pairDevice(String deviceName) {\n        System.out.println(\"Bluetooth Speaker: Paired with \" + deviceName);\n    }\n\n    @Override\n    public void enableMicrophone() {\n        throw new UnsupportedOperationException(\"Bluetooth Speaker doesn't support microphone\");\n    }\n\n    @Override\n    public void disableMicrophone() {\n        throw new UnsupportedOperationException(\"Bluetooth Speaker doesn't support microphone\");\n    }\n\n    @Override\n    public void firmwareUpdate() {\n        System.out.println(\"Bluetooth Speaker: Firmware updated\");\n    }\n}\n\nclass BluetoothHeadphones implements MusicPlayer, AdvancedAudioDevice {\n    private boolean isConnected = false;\n    private boolean micEnabled = false;\n    private int volume = 30;\n\n    @Override\n    public void play() {\n        System.out.println(\"Bluetooth Headphones: Playing\");\n    }\n\n    @Override\n    public void pause() {\n        System.out.println(\"Bluetooth Headphones: Paused\");\n    }\n\n    @Override\n    public void stop() {\n        System.out.println(\"Bluetooth Headphones: Stopped\");\n    }\n\n    @Override\n    public void skipTrack() {\n        System.out.println(\"Bluetooth Headphones: Track skipped\");\n    }\n\n    @Override\n    public void eject() {\n        throw new UnsupportedOperationException(\"Bluetooth Headphones don't eject media\");\n    }\n\n    @Override\n    public void setVolume(int volume) {\n        if (volume < 0) this.volume = 0;\n        else if (volume > 100) this.volume = 100;\n        else this.volume = volume;\n        System.out.println(\"Bluetooth Headphones: Volume set to \" + this.volume);\n    }\n\n    @Override\n    public void setEqualizer(String preset) {\n        System.out.println(\"Bluetooth Headphones: Equalizer set to \" + preset);\n    }\n\n    @Override\n    public void displayTrackInfo() {\n        System.out.println(\"Bluetooth Headphones: Track info unavailable\");\n    }\n\n    @Override\n    public void shuffle() {\n        System.out.println(\"Bluetooth Headphones: Shuffle not supported\");\n    }\n\n    @Override\n    public void repeat() {\n        System.out.println(\"Bluetooth Headphones: Repeat not supported\");\n    }\n\n    @Override\n    public void connectBluetooth() {\n        isConnected = true;\n        System.out.println(\"Bluetooth Headphones: Connected\");\n    }\n\n    @Override\n    public void disconnectBluetooth() {\n        isConnected = false;\n        System.out.println(\"Bluetooth Headphones: Disconnected\");\n    }\n\n    @Override\n    public void pairDevice(String deviceName) {\n        System.out.println(\"Bluetooth Headphones: Paired with \" + deviceName);\n    }\n\n    @Override\n    public void enableMicrophone() {\n        micEnabled = true;\n        System.out.println(\"Bluetooth Headphones: Microphone enabled\");\n    }\n\n    @Override\n    public void disableMicrophone() {\n        micEnabled = false;\n        System.out.println(\"Bluetooth Headphones: Microphone disabled\");\n    }\n\n    @Override\n    public void firmwareUpdate() {\n        System.out.println(\"Bluetooth Headphones: Firmware updated\");\n    }\n}",
            "output": "interface PlaybackController {\n    void play();\n    void pause();\n    void stop();\n}\n\ninterface TrackController {\n    void skipTrack();\n}\n\ninterface MediaEjector {\n    void eject();\n}\n\ninterface VolumeController {\n    void setVolume(int volume);\n}\n\ninterface EqualizerController {\n    void setEqualizer(String preset);\n}\n\ninterface TrackInfoDisplay {\n    void displayTrackInfo();\n}\n\ninterface PlaybackModeController {\n    void shuffle();\n    void repeat();\n}\n\ninterface BluetoothConnector {\n    void connectBluetooth();\n    void disconnectBluetooth();\n    void pairDevice(String deviceName);\n}\n\ninterface MicrophoneController {\n    void enableMicrophone();\n    void disableMicrophone();\n}\n\ninterface FirmwareUpdatable {\n    void firmwareUpdate();\n}\n\nclass CDPlayer implements PlaybackController, TrackController, MediaEjector, VolumeController, EqualizerController, TrackInfoDisplay, PlaybackModeController {\n    private boolean isPlaying = false;\n    private boolean isPaused = false;\n    private String currentTrack = \"Track 1\";\n    private int volume = 50;\n    private boolean shuffleMode = false;\n    private boolean repeatMode = false;\n\n    @Override\n    public void play() {\n        isPlaying = true;\n        isPaused = false;\n        System.out.println(\"CD Player: Playing \" + currentTrack);\n    }\n\n    @Override\n    public void pause() {\n        if (isPlaying) {\n            isPaused = true;\n            isPlaying = false;\n            System.out.println(\"CD Player: Paused\");\n        }\n    }\n\n    @Override\n    public void stop() {\n        isPlaying = false;\n        isPaused = false;\n        System.out.println(\"CD Player: Stopped\");\n    }\n\n    @Override\n    public void skipTrack() {\n        System.out.println(\"CD Player: Skipping to next track\");\n        currentTrack = \"Track \" + (Integer.parseInt(currentTrack.split(\" \")[1]) + 1);\n    }\n\n    @Override\n    public void eject() {\n        stop();\n        System.out.println(\"CD Player: CD ejected\");\n    }\n\n    @Override\n    public void setVolume(int volume) {\n        this.volume = volume;\n        System.out.println(\"CD Player: Volume set to \" + volume);\n    }\n\n    @Override\n    public void setEqualizer(String preset) {\n        System.out.println(\"CD Player: Equalizer set to \" + preset);\n    }\n\n    @Override\n    public void displayTrackInfo() {\n        System.out.println(\"CD Player: Current track - \" + currentTrack + \", Volume: \" + volume);\n    }\n\n    @Override\n    public void shuffle() {\n        shuffleMode = !shuffleMode;\n        System.out.println(\"CD Player: Shuffle \" + (shuffleMode ? \"ON\" : \"OFF\"));\n    }\n\n    @Override\n    public void repeat() {\n        repeatMode = !repeatMode;\n        System.out.println(\"CD Player: Repeat \" + (repeatMode ? \"ON\" : \"OFF\"));\n    }\n}\n\nclass VinylPlayer implements PlaybackController, VolumeController, TrackInfoDisplay {\n    private boolean isPlaying = false;\n    private boolean isPaused = false;\n    private String currentSong = \"Side A\";\n    private int volume = 50;\n\n    @Override\n    public void play() {\n        isPlaying = true;\n        isPaused = false;\n        System.out.println(\"Vinyl Player: Playing \" + currentSong);\n    }\n\n    @Override\n    public void pause() {\n        if (isPlaying) {\n            isPaused = true;\n            isPlaying = false;\n            System.out.println(\"Vinyl Player: Paused (needle lifted)\");\n        }\n    }\n\n    @Override\n    public void stop() {\n        isPlaying = false;\n        isPaused = false;\n        System.out.println(\"Vinyl Player: Stopped\");\n    }\n\n    @Override\n    public void setVolume(int volume) {\n        this.volume = volume;\n        System.out.println(\"Vinyl Player: Volume set to \" + volume);\n    }\n\n    @Override\n    public void displayTrackInfo() {\n        System.out.println(\"Vinyl Player: Current side - \" + currentSong + \", Volume: \" + volume);\n    }\n}\n\nclass Amplifier implements VolumeController, EqualizerController {\n    private boolean isPoweredOn = false;\n    private int volume = 30;\n    private String equalizerSetting = \"Flat\";\n    private boolean bassBoost = false;\n\n    public void stop() {\n        isPoweredOn = false;\n        System.out.println(\"Amplifier: Powered OFF\");\n    }\n\n    @Override\n    public void setVolume(int volume) {\n        if (volume < 0) {\n            this.volume = 0;\n        } else if (volume > 100) {\n            this.volume = 100;\n        } else {\n            this.volume = volume;\n        }\n        if (this.volume > 80) {\n            System.out.println(\"Amplifier: Warning - High volume!\");\n        }\n        System.out.println(\"Amplifier: Master volume set to \" + this.volume);\n    }\n\n    @Override\n    public void setEqualizer(String preset) {\n        switch (preset.toLowerCase()) {\n            case \"rock\":\n            case \"pop\":\n            case \"jazz\":\n            case \"classical\":\n                equalizerSetting = preset;\n                break;\n            default:\n                equalizerSetting = \"Flat\";\n                System.out.println(\"Amplifier: Unknown preset. Defaulting to Flat.\");\n                return;\n        }\n        System.out.println(\"Amplifier: Equalizer set to \" + equalizerSetting);\n    }\n\n    public void powerOn() {\n        isPoweredOn = true;\n        System.out.println(\"Amplifier: Powered ON\");\n    }\n\n    public void setBassBoost(boolean enabled) {\n        this.bassBoost = enabled;\n        System.out.println(\"Amplifier: Bass boost \" + (enabled ? \"ON\" : \"OFF\"));\n    }\n}\n\nclass BluetoothSpeaker implements PlaybackController, TrackController, VolumeController, EqualizerController, TrackInfoDisplay, BluetoothConnector, FirmwareUpdatable {\n    private boolean isConnected = false;\n    private int volume = 50;\n\n    @Override\n    public void play() {\n        if (isConnected) {\n            System.out.println(\"Bluetooth Speaker: Playing audio\");\n        } else {\n            throw new IllegalStateException(\"Bluetooth Speaker not connected\");\n        }\n    }\n\n    @Override\n    public void pause() {\n        System.out.println(\"Bluetooth Speaker: Paused\");\n    }\n\n    @Override\n    public void stop() {\n        System.out.println(\"Bluetooth Speaker: Stopped\");\n    }\n\n    @Override\n    public void skipTrack() {\n        System.out.println(\"Bluetooth Speaker: Skipping track\");\n    }\n\n    @Override\n    public void setVolume(int volume) {\n        if (volume >= 0 && volume <= 100) {\n            this.volume = volume;\n        }\n        System.out.println(\"Bluetooth Speaker: Volume set to \" + this.volume);\n    }\n\n    @Override\n    public void setEqualizer(String preset) {\n        System.out.println(\"Bluetooth Speaker: Equalizer set to \" + preset);\n    }\n\n    @Override\n    public void displayTrackInfo() {\n        System.out.println(\"Bluetooth Speaker: No track info available\");\n    }\n\n    @Override\n    public void connectBluetooth() {\n        isConnected = true;\n        System.out.println(\"Bluetooth Speaker: Connected\");\n    }\n\n    @Override\n    public void disconnectBluetooth() {\n        isConnected = false;\n        System.out.println(\"Bluetooth Speaker: Disconnected\");\n    }\n\n    @Override\n    public void pairDevice(String deviceName) {\n        System.out.println(\"Bluetooth Speaker: Paired with \" + deviceName);\n    }\n\n    @Override\n    public void firmwareUpdate() {\n        System.out.println(\"Bluetooth Speaker: Firmware updated\");\n    }\n}\n\nclass BluetoothHeadphones implements PlaybackController, TrackController, VolumeController, EqualizerController, TrackInfoDisplay, BluetoothConnector, MicrophoneController, FirmwareUpdatable {\n    private boolean isConnected = false;\n    private boolean micEnabled = false;\n    private int volume = 30;\n\n    @Override\n    public void play() {\n        System.out.println(\"Bluetooth Headphones: Playing\");\n    }\n\n    @Override\n    public void pause() {\n        System.out.println(\"Bluetooth Headphones: Paused\");\n    }\n\n    @Override\n    public void stop() {\n        System.out.println(\"Bluetooth Headphones: Stopped\");\n    }\n\n    @Override\n    public void skipTrack() {\n        System.out.println(\"Bluetooth Headphones: Track skipped\");\n    }\n\n    @Override\n    public void setVolume(int volume) {\n        if (volume < 0) this.volume = 0;\n        else if (volume > 100) this.volume = 100;\n        else this.volume = volume;\n        System.out.println(\"Bluetooth Headphones: Volume set to \" + this.volume);\n    }\n\n    @Override\n    public void setEqualizer(String preset) {\n        System.out.println(\"Bluetooth Headphones: Equalizer set to \" + preset);\n    }\n\n    @Override\n    public void displayTrackInfo() {\n        System.out.println(\"Bluetooth Headphones: Track info unavailable\");\n    }\n\n    @Override\n    public void connectBluetooth() {\n        isConnected = true;\n        System.out.println(\"Bluetooth Headphones: Connected\");\n    }\n\n    @Override\n    public void disconnectBluetooth() {\n        isConnected = false;\n        System.out.println(\"Bluetooth Headphones: Disconnected\");\n    }\n\n    @Override\n    public void pairDevice(String deviceName) {\n        System.out.println(\"Bluetooth Headphones: Paired with \" + deviceName);\n    }\n\n    @Override\n    public void enableMicrophone() {\n        micEnabled = true;\n        System.out.println(\"Bluetooth Headphones: Microphone enabled\");\n    }\n\n    @Override\n    public void disableMicrophone() {\n        micEnabled = false;\n        System.out.println(\"Bluetooth Headphones: Microphone disabled\");\n    }\n\n    @Override\n    public void firmwareUpdate() {\n        System.out.println(\"Bluetooth Headphones: Firmware updated\");\n    }\n}\n",
            "level": "HARD",
            "language": "JAVA",
            "violation": "ISP"
        },
        {
            "input": "interface RestaurantWorker {\n    void cookFood();\n    void serveCustomers();\n    void cleanTables();\n    void manageStaff();\n    void handlePayments();\n    void orderSupplies();\n    void trainNewEmployees();\n    void conductMeetings();\n}\n\ninterface MachineWorker {\n    void washDishes();\n    void vacuumFloor();\n    void selfDiagnose();\n    void playMusic();\n    void adjustTemperature();\n    void securityScan();\n    void updateSoftware();\n    void generateReports();\n}\n\nclass Chef implements RestaurantWorker {\n    private int mealsCooked = 0;\n    private String[] recipes = {\"pasta\", \"pizza\", \"salad\", \"soup\", \"steak\"};\n    private boolean isHeadChef = true;\n\n    public void cookFood() {\n        for (int i = 0; i < recipes.length; i++) {\n            if (mealsCooked < 50) {\n                if (recipes[i].equals(\"steak\") && isHeadChef) {\n                    System.out.println(\"Head Chef is preparing premium \" + recipes[i]);\n                    mealsCooked += 2;\n                } else if (recipes[i].equals(\"pasta\") || recipes[i].equals(\"pizza\")) {\n                    System.out.println(\"Chef is cooking \" + recipes[i]);\n                    mealsCooked++;\n                } else {\n                    System.out.println(\"Chef is preparing simple \" + recipes[i]);\n                }\n            }\n        }\n    }\n\n    public void serveCustomers() {\n        System.out.println(\"Chef does not serve customers.\");\n    }\n\n    public void cleanTables() {\n        System.out.println(\"Chef does not clean tables.\");\n    }\n\n    public void manageStaff() {\n        if (isHeadChef) {\n            System.out.println(\"Head Chef is managing kitchen staff.\");\n        } else {\n            System.out.println(\"Chef does not manage staff.\");\n        }\n    }\n\n    public void handlePayments() {\n        System.out.println(\"Chef does not handle payments.\");\n    }\n\n    public void orderSupplies() {\n        if (isHeadChef) {\n            for (int i = 1; i <= 3; i++) {\n                System.out.println(\"Head Chef ordering kitchen supplies batch \" + i);\n            }\n        } else {\n            System.out.println(\"Chef does not order supplies.\");\n        }\n    }\n\n    public void trainNewEmployees() {\n        System.out.println(\"Chef does not train employees.\");\n    }\n\n    public void conductMeetings() {\n        System.out.println(\"Chef does not conduct meetings.\");\n    }\n}\n\nclass Waiter implements RestaurantWorker {\n    private int tablesServed = 0;\n    private boolean isExperienced = false;\n    private String[] customerTypes = {\"regular\", \"vip\", \"family\", \"business\"};\n\n    public void cookFood() {\n        System.out.println(\"Waiter does not cook food.\");\n    }\n\n    public void serveCustomers() {\n        for (String customerType : customerTypes) {\n            if (tablesServed < 20) {\n                if (customerType.equals(\"vip\") && isExperienced) {\n                    System.out.println(\"Experienced waiter serving VIP customers\");\n                    tablesServed += 2;\n                } else if (customerType.equals(\"family\")) {\n                    System.out.println(\"Waiter serving family table\");\n                    tablesServed++;\n                } else if (customerType.equals(\"business\")) {\n                    for (int i = 1; i <= 2; i++) {\n                        System.out.println(\"Waiter taking business order \" + i);\n                    }\n                    tablesServed++;\n                } else {\n                    System.out.println(\"Waiter serving \" + customerType + \" customers\");\n                    tablesServed++;\n                }\n            }\n        }\n    }\n\n    public void cleanTables() {\n        for (int table = 1; table <= 10; table++) {\n            if (table % 2 == 0) {\n                System.out.println(\"Waiter cleaning table \" + table + \" thoroughly\");\n            } else if (table > 5) {\n                System.out.println(\"Waiter quick clean table \" + table);\n            } else {\n                System.out.println(\"Waiter wiping table \" + table);\n            }\n        }\n    }\n\n    public void manageStaff() {\n        System.out.println(\"Waiter does not manage staff.\");\n    }\n\n    public void handlePayments() {\n        System.out.println(\"Waiter does not handle payments.\");\n    }\n\n    public void orderSupplies() {\n        System.out.println(\"Waiter does not order supplies.\");\n    }\n\n    public void trainNewEmployees() {\n        System.out.println(\"Waiter does not train employees.\");\n    }\n\n    public void conductMeetings() {\n        System.out.println(\"Waiter does not conduct meetings.\");\n    }\n}\n\nclass Manager implements RestaurantWorker {\n    private boolean conflict = true;\n    private int teamSize = 15;\n    private String[] departments = {\"kitchen\", \"service\", \"cleaning\", \"security\"};\n    private boolean isBusy = false;\n\n    public void cookFood() {\n        System.out.println(\"Manager does not cook.\");\n    }\n\n    public void serveCustomers() {\n        System.out.println(\"Manager does not serve.\");\n    }\n\n    public void cleanTables() {\n        System.out.println(\"Manager does not clean.\");\n    }\n\n    public void manageStaff() {\n        for (String dept : departments) {\n            if (conflict && dept.equals(\"kitchen\")) {\n                System.out.println(\"Manager resolving kitchen conflict\");\n            } else if (teamSize > 10 && dept.equals(\"service\")) {\n                for (int i = 1; i <= 3; i++) {\n                    System.out.println(\"Manager scheduling service team shift \" + i);\n                }\n            } else if (dept.equals(\"security\") && !isBusy) {\n                System.out.println(\"Manager checking security protocols\");\n            } else {\n                System.out.println(\"Manager overseeing \" + dept + \" department\");\n            }\n        }\n    }\n\n    public void handlePayments() {\n        for (int transaction = 1; transaction <= 5; transaction++) {\n            if (transaction > 3) {\n                System.out.println(\"Manager approving large payment \" + transaction);\n            } else {\n                System.out.println(\"Manager processing payment \" + transaction);\n            }\n        }\n    }\n\n    public void orderSupplies() {\n        System.out.println(\"Manager coordinating supply orders\");\n    }\n\n    public void trainNewEmployees() {\n        System.out.println(\"Manager conducting orientation\");\n    }\n\n    public void conductMeetings() {\n        System.out.println(\"Manager leading staff meetings\");\n    }\n}\n\nclass Cashier implements RestaurantWorker {\n    private double dailyRevenue = 0;\n    private int customersServed = 0;\n\n    public void cookFood() {\n        System.out.println(\"Cashier does not cook food.\");\n    }\n\n    public void serveCustomers() {\n        System.out.println(\"Cashier does not serve at tables.\");\n    }\n\n    public void cleanTables() {\n        System.out.println(\"Cashier does not clean tables.\");\n    }\n\n    public void manageStaff() {\n        System.out.println(\"Cashier does not manage staff.\");\n    }\n\n    public void handlePayments() {\n        double[] payments = {15.50, 23.75, 45.00, 12.25, 67.80};\n        for (double payment : payments) {\n            if (payment > 50.00) {\n                System.out.println(\"Cashier processing large payment: $\" + payment);\n                dailyRevenue += payment * 1.1;\n            } else if (payment < 20.00) {\n                System.out.println(\"Cashier handling small payment: $\" + payment);\n                dailyRevenue += payment;\n            } else {\n                System.out.println(\"Cashier processing payment: $\" + payment);\n                dailyRevenue += payment;\n            }\n            customersServed++;\n        }\n    }\n\n    public void orderSupplies() {\n        System.out.println(\"Cashier does not order supplies.\");\n    }\n\n    public void trainNewEmployees() {\n        System.out.println(\"Cashier does not train employees.\");\n    }\n\n    public void conductMeetings() {\n        System.out.println(\"Cashier does not conduct meetings.\");\n    }\n}\n\nclass Dishwasher implements MachineWorker {\n    int dirtyItems = 25;\n    boolean isIndustrialGrade = true;\n    String[] dishTypes = {\"plates\", \"cups\", \"utensils\", \"pots\"};\n\n    public void washDishes() {\n        for (String dishType : dishTypes) {\n            if (dirtyItems > 0) {\n                if (dishType.equals(\"pots\") && isIndustrialGrade) {\n                    for (int cycle = 1; cycle <= 3; cycle++) {\n                        System.out.println(\"Industrial dishwasher cleaning \" + dishType + \" cycle \" + cycle);\n                        dirtyItems -= 2;\n                    }\n                } else if (dishType.equals(\"plates\") || dishType.equals(\"cups\")) {\n                    System.out.println(\"Dishwasher cleaning \" + dirtyItems + \" \" + dishType);\n                    dirtyItems -= 5;\n                } else {\n                    System.out.println(\"Dishwasher processing \" + dishType);\n                    dirtyItems -= 3;\n                }\n            } else {\n                System.out.println(\"No \" + dishType + \" to clean.\");\n            }\n        }\n    }\n\n    public void vacuumFloor() {\n        System.out.println(\"Dishwasher cannot vacuum the floor.\");\n    }\n\n    public void selfDiagnose() {\n        for (int system = 1; system <= 4; system++) {\n            if (system == 1) {\n                System.out.println(\"Dishwasher checking water system\");\n            } else if (system == 2) {\n                System.out.println(\"Dishwasher testing heating element\");\n            } else {\n                System.out.println(\"Dishwasher running diagnostic \" + system);\n            }\n        }\n    }\n\n    public void playMusic() {\n        System.out.println(\"Dishwasher cannot play music.\");\n    }\n\n    public void adjustTemperature() {\n        System.out.println(\"Dishwasher cannot adjust room temperature.\");\n    }\n\n    public void securityScan() {\n        System.out.println(\"Dishwasher cannot perform security scan.\");\n    }\n\n    public void updateSoftware() {\n        System.out.println(\"Dishwasher cannot update software.\");\n    }\n\n    public void generateReports() {\n        System.out.println(\"Dishwasher cannot generate reports.\");\n    }\n}\n\nclass VacuumCleaner implements MachineWorker {\n    boolean isCharged = false;\n    int batteryLevel = 30;\n    String[] cleaningModes = {\"eco\", \"normal\", \"turbo\"};\n\n    public void washDishes() {\n        System.out.println(\"Vacuum cleaner cannot wash dishes.\");\n    }\n\n    public void vacuumFloor() {\n        for (String mode : cleaningModes) {\n            if (isCharged || batteryLevel > 20) {\n                if (mode.equals(\"turbo\") && batteryLevel > 50) {\n                    System.out.println(\"Vacuum cleaner using turbo mode\");\n                    batteryLevel -= 15;\n                } else if (mode.equals(\"normal\") && batteryLevel > 30) {\n                    for (int room = 1; room <= 3; room++) {\n                        System.out.println(\"Vacuum cleaning room \" + room + \" in normal mode\");\n                    }\n                    batteryLevel -= 10;\n                } else if (mode.equals(\"eco\")) {\n                    System.out.println(\"Vacuum using eco mode to save battery\");\n                    batteryLevel -= 5;\n                } else {\n                    System.out.println(\"Battery too low for \" + mode + \" mode\");\n                }\n            } else {\n                System.out.println(\"Vacuum cleaner battery critically low\");\n            }\n        }\n    }\n\n    public void selfDiagnose() {\n        System.out.println(\"Vacuum cleaner running diagnostics.\");\n    }\n\n    public void playMusic() {\n        System.out.println(\"Vacuum cleaner cannot play music.\");\n    }\n\n    public void adjustTemperature() {\n        System.out.println(\"Vacuum cleaner cannot adjust temperature.\");\n    }\n\n    public void securityScan() {\n        System.out.println(\"Vacuum cleaner cannot perform security scan.\");\n    }\n\n    public void updateSoftware() {\n        System.out.println(\"Vacuum cleaner cannot update software.\");\n    }\n\n    public void generateReports() {\n        System.out.println(\"Vacuum cleaner cannot generate reports.\");\n    }\n}\n\nclass SmartKiosk implements MachineWorker {\n    boolean isOnline = true;\n    int customerInteractions = 0;\n    String[] services = {\"orders\", \"payments\", \"information\", \"entertainment\"};\n\n    public void washDishes() {\n        System.out.println(\"Smart kiosk cannot wash dishes.\");\n    }\n\n    public void vacuumFloor() {\n        System.out.println(\"Smart kiosk cannot vacuum floor.\");\n    }\n\n    public void selfDiagnose() {\n        for (int component = 1; component <= 5; component++) {\n            if (component == 1) {\n                System.out.println(\"Kiosk checking network connection\");\n            } else if (component == 2 && isOnline) {\n                System.out.println(\"Kiosk testing payment processor\");  \n            } else if (component > 3) {\n                System.out.println(\"Kiosk running system check \" + component);\n            } else {\n                System.out.println(\"Kiosk diagnostic component \" + component);\n            }\n        }\n    }\n\n    public void playMusic() {\n        for (String service : services) {\n            if (service.equals(\"entertainment\") && customerInteractions < 50) {\n                for (int playlist = 1; playlist <= 3; playlist++) {\n                    System.out.println(\"Kiosk playing background music playlist \" + playlist);\n                }\n            } else if (service.equals(\"information\")) {\n                System.out.println(\"Kiosk providing audio information\");\n            }\n        }\n    }\n\n    public void adjustTemperature() {\n        System.out.println(\"Smart kiosk cannot adjust temperature.\");\n    }\n\n    public void securityScan() {\n        if (isOnline) {\n            System.out.println(\"Kiosk performing security scan\");\n        } else {\n            System.out.println(\"Kiosk offline - cannot scan\");\n        }\n    }\n\n    public void updateSoftware() {\n        System.out.println(\"Kiosk updating software\");\n    }\n\n    public void generateReports() {\n        System.out.println(\"Kiosk generating usage reports\");\n    }\n}\n\nclass SecurityBot implements MachineWorker {\n    boolean isPatrolling = true;\n    int alertLevel = 2;\n    String[] zones = {\"entrance\", \"dining\", \"kitchen\", \"storage\"};\n\n    public void washDishes() {\n        System.out.println(\"Security bot cannot wash dishes.\");\n    }\n\n    public void vacuumFloor() {\n        System.out.println(\"Security bot cannot vacuum floor.\");\n    }\n\n    public void selfDiagnose() {\n        System.out.println(\"Security bot running diagnostics.\");\n    }\n\n    public void playMusic() {\n        System.out.println(\"Security bot cannot play music.\");\n    }\n\n    public void adjustTemperature() {\n        System.out.println(\"Security bot cannot adjust temperature.\");\n    }\n\n    public void securityScan() {\n        for (String zone : zones) {\n            if (isPatrolling && alertLevel > 1) {\n                if (zone.equals(\"entrance\") || zone.equals(\"storage\")) {\n                    for (int scan = 1; scan <= 2; scan++) {\n                        System.out.println(\"Security bot high-priority scan \" + zone + \" pass \" + scan);\n                    }\n                } else if (alertLevel > 3) {\n                    System.out.println(\"Security bot emergency scan \" + zone);\n                } else {\n                    System.out.println(\"Security bot scanning \" + zone);\n                }\n            }\n        }\n    }\n\n    public void updateSoftware() {\n        System.out.println(\"Security bot updating patrol algorithms\");\n    }\n\n    public void generateReports() {\n        System.out.println(\"Security bot generating incident reports\");\n    }\n}",
            "output": "interface FoodPreparation {\n    void cookFood();\n}\n\ninterface CustomerService {\n    void serveCustomers();\n}\n\ninterface Cleaning {\n    void cleanTables();\n}\n\ninterface StaffManagement {\n    void manageStaff();\n}\n\ninterface PaymentProcessing {\n    void handlePayments();\n}\n\ninterface SupplyManagement {\n    void orderSupplies();\n}\n\ninterface Training {\n    void trainNewEmployees();\n}\n\ninterface MeetingManagement {\n    void conductMeetings();\n}\n\ninterface DishWashing {\n    void washDishes();\n}\n\ninterface FloorCleaning {\n    void vacuumFloor();\n}\n\ninterface SelfDiagnostics {\n    void selfDiagnose();\n}\n\ninterface Entertainment {\n    void playMusic();\n}\n\ninterface TemperatureControl {\n    void adjustTemperature();\n}\n\ninterface SecurityOperations {\n    void securityScan();\n}\n\ninterface SoftwareManagement {\n    void updateSoftware();\n}\n\ninterface ReportGeneration {\n    void generateReports();\n}\n\nclass Chef implements FoodPreparation, StaffManagement, SupplyManagement {\n    private int mealsCooked = 0;\n    private String[] recipes = {\"pasta\", \"pizza\", \"salad\", \"soup\", \"steak\"};\n    private boolean isHeadChef = true;\n\n    public void cookFood() {\n        for (int i = 0; i < recipes.length; i++) {\n            if (mealsCooked < 50) {\n                if (recipes[i].equals(\"steak\") && isHeadChef) {\n                    System.out.println(\"Head Chef is preparing premium \" + recipes[i]);\n                    mealsCooked += 2;\n                } else if (recipes[i].equals(\"pasta\") || recipes[i].equals(\"pizza\")) {\n                    System.out.println(\"Chef is cooking \" + recipes[i]);\n                    mealsCooked++;\n                } else {\n                    System.out.println(\"Chef is preparing simple \" + recipes[i]);\n                }\n            }\n        }\n    }\n\n    public void manageStaff() {\n        if (isHeadChef) {\n            System.out.println(\"Head Chef is managing kitchen staff.\");\n        } else {\n            System.out.println(\"Chef does not manage staff.\");\n        }\n    }\n\n    public void orderSupplies() {\n        if (isHeadChef) {\n            for (int i = 1; i <= 3; i++) {\n                System.out.println(\"Head Chef ordering kitchen supplies batch \" + i);\n            }\n        } else {\n            System.out.println(\"Chef does not order supplies.\");\n        }\n    }\n}\n\nclass Waiter implements CustomerService, Cleaning {\n    private int tablesServed = 0;\n    private boolean isExperienced = false;\n    private String[] customerTypes = {\"regular\", \"vip\", \"family\", \"business\"};\n\n    public void serveCustomers() {\n        for (String customerType : customerTypes) {\n            if (tablesServed < 20) {\n                if (customerType.equals(\"vip\") && isExperienced) {\n                    System.out.println(\"Experienced waiter serving VIP customers\");\n                    tablesServed += 2;\n                } else if (customerType.equals(\"family\")) {\n                    System.out.println(\"Waiter serving family table\");\n                    tablesServed++;\n                } else if (customerType.equals(\"business\")) {\n                    for (int i = 1; i <= 2; i++) {\n                        System.out.println(\"Waiter taking business order \" + i);\n                    }\n                    tablesServed++;\n                } else {\n                    System.out.println(\"Waiter serving \" + customerType + \" customers\");\n                    tablesServed++;\n                }\n            }\n        }\n    }\n\n    public void cleanTables() {\n        for (int table = 1; table <= 10; table++) {\n            if (table % 2 == 0) {\n                System.out.println(\"Waiter cleaning table \" + table + \" thoroughly\");\n            } else if (table > 5) {\n                System.out.println(\"Waiter quick clean table \" + table);\n            } else {\n                System.out.println(\"Waiter wiping table \" + table);\n            }\n        }\n    }\n}\n\nclass Manager implements StaffManagement, PaymentProcessing, SupplyManagement, Training, MeetingManagement {\n    private boolean conflict = true;\n    private int teamSize = 15;\n    private String[] departments = {\"kitchen\", \"service\", \"cleaning\", \"security\"};\n    private boolean isBusy = false;\n\n    public void manageStaff() {\n        for (String dept : departments) {\n            if (conflict && dept.equals(\"kitchen\")) {\n                System.out.println(\"Manager resolving kitchen conflict\");\n            } else if (teamSize > 10 && dept.equals(\"service\")) {\n                for (int i = 1; i <= 3; i++) {\n                    System.out.println(\"Manager scheduling service team shift \" + i);\n                }\n            } else if (dept.equals(\"security\") && !isBusy) {\n                System.out.println(\"Manager checking security protocols\");\n            } else {\n                System.out.println(\"Manager overseeing \" + dept + \" department\");\n            }\n        }\n    }\n\n    public void handlePayments() {\n        for (int transaction = 1; transaction <= 5; transaction++) {\n            if (transaction > 3) {\n                System.out.println(\"Manager approving large payment \" + transaction);\n            } else {\n                System.out.println(\"Manager processing payment \" + transaction);\n            }\n        }\n    }\n\n    public void orderSupplies() {\n        System.out.println(\"Manager coordinating supply orders\");\n    }\n\n    public void trainNewEmployees() {\n        System.out.println(\"Manager conducting orientation\");\n    }\n\n    public void conductMeetings() {\n        System.out.println(\"Manager leading staff meetings\");\n    }\n}\n\nclass Cashier implements PaymentProcessing {\n    private double dailyRevenue = 0;\n    private int customersServed = 0;\n\n    public void handlePayments() {\n        double[] payments = {15.50, 23.75, 45.00, 12.25, 67.80};\n        for (double payment : payments) {\n            if (payment > 50.00) {\n                System.out.println(\"Cashier processing large payment: $\" + payment);\n                dailyRevenue += payment * 1.1;\n            } else if (payment < 20.00) {\n                System.out.println(\"Cashier handling small payment: $\" + payment);\n                dailyRevenue += payment;\n            } else {\n                System.out.println(\"Cashier processing payment: $\" + payment);\n                dailyRevenue += payment;\n            }\n            customersServed++;\n        }\n    }\n}\n\nclass Dishwasher implements DishWashing, SelfDiagnostics {\n    int dirtyItems = 25;\n    boolean isIndustrialGrade = true;\n    String[] dishTypes = {\"plates\", \"cups\", \"utensils\", \"pots\"};\n\n    public void washDishes() {\n        for (String dishType : dishTypes) {\n            if (dirtyItems > 0) {\n                if (dishType.equals(\"pots\") && isIndustrialGrade) {\n                    for (int cycle = 1; cycle <= 3; cycle++) {\n                        System.out.println(\"Industrial dishwasher cleaning \" + dishType + \" cycle \" + cycle);\n                        dirtyItems -= 2;\n                    }\n                } else if (dishType.equals(\"plates\") || dishType.equals(\"cups\")) {\n                    System.out.println(\"Dishwasher cleaning \" + dirtyItems + \" \" + dishType);\n                    dirtyItems -= 5;\n                } else {\n                    System.out.println(\"Dishwasher processing \" + dishType);\n                    dirtyItems -= 3;\n                }\n            } else {\n                System.out.println(\"No \" + dishType + \" to clean.\");\n            }\n        }\n    }\n\n    public void selfDiagnose() {\n        for (int system = 1; system <= 4; system++) {\n            if (system == 1) {\n                System.out.println(\"Dishwasher checking water system\");\n            } else if (system == 2) {\n                System.out.println(\"Dishwasher testing heating element\");\n            } else {\n                System.out.println(\"Dishwasher running diagnostic \" + system);\n            }\n        }\n    }\n}\n\nclass VacuumCleaner implements FloorCleaning, SelfDiagnostics {\n    boolean isCharged = false;\n    int batteryLevel = 30;\n    String[] cleaningModes = {\"eco\", \"normal\", \"turbo\"};\n\n    public void vacuumFloor() {\n        for (String mode : cleaningModes) {\n            if (isCharged || batteryLevel > 20) {\n                if (mode.equals(\"turbo\") && batteryLevel > 50) {\n                    System.out.println(\"Vacuum cleaner using turbo mode\");\n                    batteryLevel -= 15;\n                } else if (mode.equals(\"normal\") && batteryLevel > 30) {\n                    for (int room = 1; room <= 3; room++) {\n                        System.out.println(\"Vacuum cleaning room \" + room + \" in normal mode\");\n                    }\n                    batteryLevel -= 10;\n                } else if (mode.equals(\"eco\")) {\n                    System.out.println(\"Vacuum using eco mode to save battery\");\n                    batteryLevel -= 5;\n                } else {\n                    System.out.println(\"Battery too low for \" + mode + \" mode\");\n                }\n            } else {\n                System.out.println(\"Vacuum cleaner battery critically low\");\n            }\n        }\n    }\n\n    public void selfDiagnose() {\n        System.out.println(\"Vacuum cleaner running diagnostics.\");\n    }\n}\n\nclass SmartKiosk implements SelfDiagnostics, Entertainment, SecurityOperations, SoftwareManagement, ReportGeneration {\n    boolean isOnline = true;\n    int customerInteractions = 0;\n    String[] services = {\"orders\", \"payments\", \"information\", \"entertainment\"};\n\n    public void selfDiagnose() {\n        for (int component = 1; component <= 5; component++) {\n            if (component == 1) {\n                System.out.println(\"Kiosk checking network connection\");\n            } else if (component == 2 && isOnline) {\n                System.out.println(\"Kiosk testing payment processor\");  \n            } else if (component > 3) {\n                System.out.println(\"Kiosk running system check \" + component);\n            } else {\n                System.out.println(\"Kiosk diagnostic component \" + component);\n            }\n        }\n    }\n\n    public void playMusic() {\n        for (String service : services) {\n            if (service.equals(\"entertainment\") && customerInteractions < 50) {\n                for (int playlist = 1; playlist <= 3; playlist++) {\n                    System.out.println(\"Kiosk playing background music playlist \" + playlist);\n                }\n            } else if (service.equals(\"information\")) {\n                System.out.println(\"Kiosk providing audio information\");\n            }\n        }\n    }\n\n    public void securityScan() {\n        if (isOnline) {\n            System.out.println(\"Kiosk performing security scan\");\n        } else {\n            System.out.println(\"Kiosk offline - cannot scan\");\n        }\n    }\n\n    public void updateSoftware() {\n        System.out.println(\"Kiosk updating software\");\n    }\n\n    public void generateReports() {\n        System.out.println(\"Kiosk generating usage reports\");\n    }\n}\n\nclass SecurityBot implements SelfDiagnostics, SecurityOperations, SoftwareManagement, ReportGeneration {\n    boolean isPatrolling = true;\n    int alertLevel = 2;\n    String[] zones = {\"entrance\", \"dining\", \"kitchen\", \"storage\"};\n\n    public void selfDiagnose() {\n        System.out.println(\"Security bot running diagnostics.\");\n    }\n\n    public void securityScan() {\n        for (String zone : zones) {\n            if (isPatrolling && alertLevel > 1) {\n                if (zone.equals(\"entrance\") || zone.equals(\"storage\")) {\n                    for (int scan = 1; scan <= 2; scan++) {\n                        System.out.println(\"Security bot high-priority scan \" + zone + \" pass \" + scan);\n                    }\n                } else if (alertLevel > 3) {\n                    System.out.println(\"Security bot emergency scan \" + zone);\n                } else {\n                    System.out.println(\"Security bot scanning \" + zone);\n                }\n            }\n        }\n    }\n\n    public void updateSoftware() {\n        System.out.println(\"Security bot updating patrol algorithms\");\n    }\n\n    public void generateReports() {\n        System.out.println(\"Security bot generating incident reports\");\n    }\n}\n",
            "level": "HARD",
            "language": "JAVA",
            "violation": "ISP"
        },
        {
            "input": "interface Vehicle {\n    void start();\n    void stop();\n    void fly();\n    void dive();\n}\n\ninterface Operator {\n    void steer();\n    void navigateAir();\n    void navigateWater();\n    void communicateWithTower();\n}\n\ninterface EnergySystem {\n    void chargeElectrically();\n    void refuelGasoline();\n    void refuelDiesel();\n    void loadNuclearFuel();\n    void checkBatteryLevel();\n    void maintainEngine();\n}\n\nclass Driver implements Operator {\n    private String name;\n    \n    public Driver(String name) {\n        this.name = name;\n    }\n    \n    public void steer() {\n        if (name != null && !name.isEmpty()) {\n            if (name.length() > 5) {\n                System.out.println(\"Experienced driver \" + name + \" steering carefully\");\n            } else {\n                System.out.println(\"Driver \" + name + \" steering\");\n            }\n        }\n    }\n    \n    public void navigateAir() {\n        throw new UnsupportedOperationException(\"Driver cannot navigate air\");\n    }\n    \n    public void navigateWater() {\n        throw new UnsupportedOperationException(\"Driver cannot navigate water\");\n    }\n    \n    public void communicateWithTower() {\n        throw new UnsupportedOperationException(\"Driver cannot communicate with tower\");\n    }\n    \n    public String getName() {\n        return name;\n    }\n}\n\nclass Pilot implements Operator {\n    private String name;\n    \n    public Pilot(String name) {\n        this.name = name;\n    }\n    \n    public void steer() {\n        System.out.println(\"Pilot \" + name + \" controlling aircraft\");\n    }\n    \n    public void navigateAir() {\n        if (name != null) {\n            if (name.contains(\"Captain\")) {\n                System.out.println(\"Captain pilot navigating complex airspace\");\n            } else if (name.length() > 6) {\n                System.out.println(\"Experienced pilot navigating airspace\");\n            } else {\n                System.out.println(\"Pilot navigating\");\n            }\n        }\n    }\n    \n    public void navigateWater() {\n        throw new UnsupportedOperationException(\"Pilot cannot navigate water\");\n    }\n    \n    public void communicateWithTower() {\n        System.out.println(\"Pilot \" + name + \" communicating with control tower\");\n    }\n    \n    public String getName() {\n        return name;\n    }\n}\n\nclass Captain implements Operator {\n    private String name;\n    \n    public Captain(String name) {\n        this.name = name;\n    }\n    \n    public void steer() {\n        System.out.println(\"Captain \" + name + \" steering submarine\");\n    }\n    \n    public void navigateAir() {\n        throw new UnsupportedOperationException(\"Captain cannot navigate air\");\n    }\n    \n    public void navigateWater() {\n        if (name != null && name.startsWith(\"Captain\")) {\n            System.out.println(\"Captain navigating deep waters\");\n        } else {\n            System.out.println(\"Naval officer navigating\");\n        }\n    }\n    \n    public void communicateWithTower() {\n        throw new UnsupportedOperationException(\"Captain cannot communicate with tower\");\n    }\n    \n    public String getName() {\n        return name;\n    }\n}\n\nclass Car implements Vehicle, EnergySystem {\n    private Driver driver;\n    private String energyType;\n    \n    public Car(Driver driver, String energyType) {\n        this.driver = driver;\n        this.energyType = energyType;\n    }\n    \n    public void start() {\n        if (driver != null) {\n            System.out.println(energyType + \" car started by \" + driver.getName());\n        }\n    }\n    \n    public void stop() {\n        System.out.println(\"Car stopped\");\n    }\n    \n    public void fly() {\n        throw new UnsupportedOperationException(\"Car cannot fly\");\n    }\n    \n    public void dive() {\n        throw new UnsupportedOperationException(\"Car cannot dive\");\n    }\n    \n    public void chargeElectrically() {\n        if (energyType.equals(\"Electric\")) {\n            System.out.println(\"Car charging electrically\");\n        } else {\n            throw new UnsupportedOperationException(\"Non-electric car cannot charge\");\n        }\n    }\n    \n    public void refuelGasoline() {\n        if (energyType.equals(\"Gasoline\")) {\n            System.out.println(\"Car refueling with gasoline\");\n        } else {\n            throw new UnsupportedOperationException(\"Non-gasoline car cannot refuel gasoline\");\n        }\n    }\n    \n    public void refuelDiesel() {\n        throw new UnsupportedOperationException(\"Car does not use diesel\");\n    }\n    \n    public void loadNuclearFuel() {\n        throw new UnsupportedOperationException(\"Car cannot use nuclear fuel\");\n    }\n    \n    public void checkBatteryLevel() {\n        if (energyType.equals(\"Electric\")) {\n            System.out.println(\"Car battery level: 85%\");\n        } else {\n            throw new UnsupportedOperationException(\"Non-electric car has no battery\");\n        }\n    }\n    \n    public void maintainEngine() {\n        if (energyType.equals(\"Electric\")) {\n            System.out.println(\"Maintaining electric motor\");\n        } else {\n            System.out.println(\"Maintaining combustion engine\");\n        }\n    }\n    \n    public Driver getOperator() {\n        return driver;\n    }\n}\n\nclass Plane implements Vehicle, EnergySystem {\n    private Pilot pilot;\n    private String energyType;\n    \n    public Plane(Pilot pilot, String energyType) {\n        this.pilot = pilot;\n        this.energyType = energyType;\n    }\n    \n    public void start() {\n        System.out.println(energyType + \" plane engines started by \" + pilot.getName());\n    }\n    \n    public void stop() {\n        System.out.println(\"Plane stopped\");\n    }\n    \n    public void fly() {\n        if (pilot.getName().contains(\"Captain\")) {\n            System.out.println(\"Plane flying at cruising altitude with \" + energyType + \" power\");\n        } else {\n            System.out.println(\"Plane flying with \" + energyType + \" engines\");\n        }\n    }\n    \n    public void dive() {\n        throw new UnsupportedOperationException(\"Plane cannot dive underwater\");\n    }\n    \n    public void chargeElectrically() {\n        throw new UnsupportedOperationException(\"Plane does not charge electrically\");\n    }\n    \n    public void refuelGasoline() {\n        throw new UnsupportedOperationException(\"Plane does not use gasoline\");\n    }\n    \n    public void refuelDiesel() {\n        if (energyType.equals(\"Diesel\")) {\n            System.out.println(\"Plane refueling with aviation diesel\");\n        } else {\n            throw new UnsupportedOperationException(\"Non-diesel plane cannot refuel diesel\");\n        }\n    }\n    \n    public void loadNuclearFuel() {\n        throw new UnsupportedOperationException(\"Plane cannot use nuclear fuel\");\n    }\n    \n    public void checkBatteryLevel() {\n        throw new UnsupportedOperationException(\"Plane has no battery system\");\n    }\n    \n    public void maintainEngine() {\n        if (energyType.equals(\"Diesel\")) {\n            System.out.println(\"Maintaining diesel turbine engines\");\n        } else {\n            System.out.println(\"Maintaining jet engines\");\n        }\n    }\n    \n    public Pilot getOperator() {\n        return pilot;\n    }\n}\n\nclass Submarine implements Vehicle, EnergySystem {\n    private Captain captain;\n    private int depth;\n    private String energyType;\n    \n    public Submarine(Captain captain, String energyType) {\n        this.captain = captain;\n        this.depth = 0;\n        this.energyType = energyType;\n    }\n    \n    public void start() {\n        System.out.println(energyType + \" submarine engines started by \" + captain.getName());\n    }\n    \n    public void stop() {\n        System.out.println(\"Submarine stopped\");\n    }\n    \n    public void fly() {\n        throw new UnsupportedOperationException(\"Submarine cannot fly\");\n    }\n    \n    public void dive() {\n        if (captain != null && captain.getName().startsWith(\"Captain\")) {\n            if (depth < 100) {\n                depth += 50;\n                System.out.println(\"Submarine diving to depth: \" + depth + \" meters using \" + energyType + \" power\");\n            } else if (depth < 200) {\n                depth += 30;\n                System.out.println(\"Deep diving to: \" + depth + \" meters\");\n            } else {\n                System.out.println(\"Maximum depth reached\");\n            }\n        }\n    }\n    \n    public void chargeElectrically() {\n        if (energyType.equals(\"Electric\")) {\n            System.out.println(\"Submarine charging batteries\");\n        } else {\n            throw new UnsupportedOperationException(\"Non-electric submarine cannot charge\");\n        }\n    }\n    \n    public void refuelGasoline() {\n        throw new UnsupportedOperationException(\"Submarine does not use gasoline\");\n    }\n    \n    public void refuelDiesel() {\n        if (energyType.equals(\"Diesel\")) {\n            System.out.println(\"Submarine refueling with marine diesel\");\n        } else {\n            throw new UnsupportedOperationException(\"Non-diesel submarine cannot refuel diesel\");\n        }\n    }\n    \n    public void loadNuclearFuel() {\n        if (energyType.equals(\"Nuclear\")) {\n            System.out.println(\"Loading nuclear fuel rods into reactor\");\n        } else {\n            throw new UnsupportedOperationException(\"Non-nuclear submarine cannot load nuclear fuel\");\n        }\n    }\n    \n    public void checkBatteryLevel() {\n        if (energyType.equals(\"Electric\") || energyType.equals(\"Diesel\")) {\n            System.out.println(\"Submarine battery level: 70%\");\n        } else {\n            throw new UnsupportedOperationException(\"Nuclear submarine has no battery system\");\n        }\n    }\n    \n    public void maintainEngine() {\n        if (energyType.equals(\"Nuclear\")) {\n            System.out.println(\"Maintaining nuclear reactor systems\");\n        } else if (energyType.equals(\"Diesel\")) {\n            System.out.println(\"Maintaining diesel-electric propulsion\");\n        } else {\n            System.out.println(\"Maintaining electric propulsion system\");\n        }\n    }\n    \n    public Captain getOperator() {\n        return captain;\n    }\n}\n",
            "output": "interface StartStop {\n    void start();\n    void stop();\n}\n\ninterface Flying {\n    void fly();\n}\n\ninterface Diving {\n    void dive();\n}\n\ninterface GroundSteering {\n    void steer();\n}\n\ninterface AirNavigation {\n    void navigateAir();\n}\n\ninterface WaterNavigation {\n    void navigateWater();\n}\n\ninterface TowerCommunication {\n    void communicateWithTower();\n}\n\ninterface ElectricCharging {\n    void chargeElectrically();\n    void checkBatteryLevel();\n}\n\ninterface GasolineRefueling {\n    void refuelGasoline();\n}\n\ninterface DieselRefueling {\n    void refuelDiesel();\n}\n\ninterface NuclearFueling {\n    void loadNuclearFuel();\n}\n\ninterface EngineMaintenance {\n    void maintainEngine();\n}\n\nclass Driver implements GroundSteering {\n    private String name;\n    \n    public Driver(String name) {\n        this.name = name;\n    }\n    \n    public void steer() {\n        if (name != null && !name.isEmpty()) {\n            if (name.length() > 5) {\n                System.out.println(\"Experienced driver \" + name + \" steering carefully\");\n            } else {\n                System.out.println(\"Driver \" + name + \" steering\");\n            }\n        }\n    }\n    \n    public String getName() {\n        return name;\n    }\n}\n\nclass Pilot implements GroundSteering, AirNavigation, TowerCommunication {\n    private String name;\n    \n    public Pilot(String name) {\n        this.name = name;\n    }\n    \n    public void steer() {\n        System.out.println(\"Pilot \" + name + \" controlling aircraft\");\n    }\n    \n    public void navigateAir() {\n        if (name != null) {\n            if (name.contains(\"Captain\")) {\n                System.out.println(\"Captain pilot navigating complex airspace\");\n            } else if (name.length() > 6) {\n                System.out.println(\"Experienced pilot navigating airspace\");\n            } else {\n                System.out.println(\"Pilot navigating\");\n            }\n        }\n    }\n    \n    public void communicateWithTower() {\n        System.out.println(\"Pilot \" + name + \" communicating with control tower\");\n    }\n    \n    public String getName() {\n        return name;\n    }\n}\n\nclass Captain implements GroundSteering, WaterNavigation {\n    private String name;\n    \n    public Captain(String name) {\n        this.name = name;\n    }\n    \n    public void steer() {\n        System.out.println(\"Captain \" + name + \" steering submarine\");\n    }\n    \n    public void navigateWater() {\n        if (name != null && name.startsWith(\"Captain\")) {\n            System.out.println(\"Captain navigating deep waters\");\n        } else {\n            System.out.println(\"Naval officer navigating\");\n        }\n    }\n    \n    public String getName() {\n        return name;\n    }\n}\n\nclass Car implements StartStop, ElectricCharging, GasolineRefueling, EngineMaintenance {\n    private Driver driver;\n    private String energyType;\n    \n    public Car(Driver driver, String energyType) {\n        this.driver = driver;\n        this.energyType = energyType;\n    }\n    \n    public void start() {\n        if (driver != null) {\n            System.out.println(energyType + \" car started by \" + driver.getName());\n        }\n    }\n    \n    public void stop() {\n        System.out.println(\"Car stopped\");\n    }\n    \n    public void chargeElectrically() {\n        if (energyType.equals(\"Electric\")) {\n            System.out.println(\"Car charging electrically\");\n        } else {\n            throw new UnsupportedOperationException(\"Non-electric car cannot charge\");\n        }\n    }\n    \n    public void refuelGasoline() {\n        if (energyType.equals(\"Gasoline\")) {\n            System.out.println(\"Car refueling with gasoline\");\n        } else {\n            throw new UnsupportedOperationException(\"Non-gasoline car cannot refuel gasoline\");\n        }\n    }\n    \n    public void checkBatteryLevel() {\n        if (energyType.equals(\"Electric\")) {\n            System.out.println(\"Car battery level: 85%\");\n        } else {\n            throw new UnsupportedOperationException(\"Non-electric car has no battery\");\n        }\n    }\n    \n    public void maintainEngine() {\n        if (energyType.equals(\"Electric\")) {\n            System.out.println(\"Maintaining electric motor\");\n        } else {\n            System.out.println(\"Maintaining combustion engine\");\n        }\n    }\n    \n    public Driver getOperator() {\n        return driver;\n    }\n    \n    public String getEnergyType() {\n        return energyType;\n    }\n}\n\nclass Plane implements StartStop, Flying, DieselRefueling, EngineMaintenance {\n    private Pilot pilot;\n    private String energyType;\n    \n    public Plane(Pilot pilot, String energyType) {\n        this.pilot = pilot;\n        this.energyType = energyType;\n    }\n    \n    public void start() {\n        System.out.println(energyType + \" plane engines started by \" + pilot.getName());\n    }\n    \n    public void stop() {\n        System.out.println(\"Plane stopped\");\n    }\n    \n    public void fly() {\n        if (pilot.getName().contains(\"Captain\")) {\n            System.out.println(\"Plane flying at cruising altitude with \" + energyType + \" power\");\n        } else {\n            System.out.println(\"Plane flying with \" + energyType + \" engines\");\n        }\n    }\n    \n    public void refuelDiesel() {\n        if (energyType.equals(\"Diesel\")) {\n            System.out.println(\"Plane refueling with aviation diesel\");\n        } else {\n            throw new UnsupportedOperationException(\"Non-diesel plane cannot refuel diesel\");\n        }\n    }\n    \n    public void maintainEngine() {\n        if (energyType.equals(\"Diesel\")) {\n            System.out.println(\"Maintaining diesel turbine engines\");\n        } else {\n            System.out.println(\"Maintaining jet engines\");\n        }\n    }\n    \n    public Pilot getOperator() {\n        return pilot;\n    }\n    \n    public String getEnergyType() {\n        return energyType;\n    }\n}\n\nclass Submarine implements StartStop, Diving, ElectricCharging, DieselRefueling, NuclearFueling, EngineMaintenance {\n    private Captain captain;\n    private int depth;\n    private String energyType;\n    \n    public Submarine(Captain captain, String energyType) {\n        this.captain = captain;\n        this.depth = 0;\n        this.energyType = energyType;\n    }\n    \n    public void start() {\n        System.out.println(energyType + \" submarine engines started by \" + captain.getName());\n    }\n    \n    public void stop() {\n        System.out.println(\"Submarine stopped\");\n    }\n    \n    public void dive() {\n        if (captain != null && captain.getName().startsWith(\"Captain\")) {\n            if (depth < 100) {\n                depth += 50;\n                System.out.println(\"Submarine diving to depth: \" + depth + \" meters using \" + energyType + \" power\");\n            } else if (depth < 200) {\n                depth += 30;\n                System.out.println(\"Deep diving to: \" + depth + \" meters\");\n            } else {\n                System.out.println(\"Maximum depth reached\");\n            }\n        }\n    }\n    \n    public void chargeElectrically() {\n        if (energyType.equals(\"Electric\")) {\n            System.out.println(\"Submarine charging batteries\");\n        } else {\n            throw new UnsupportedOperationException(\"Non-electric submarine cannot charge\");\n        }\n    }\n    \n    public void refuelDiesel() {\n        if (energyType.equals(\"Diesel\")) {\n            System.out.println(\"Submarine refueling with marine diesel\");\n        } else {\n            throw new UnsupportedOperationException(\"Non-diesel submarine cannot refuel diesel\");\n        }\n    }\n    \n    public void loadNuclearFuel() {\n        if (energyType.equals(\"Nuclear\")) {\n            System.out.println(\"Loading nuclear fuel rods into reactor\");\n        } else {\n            throw new UnsupportedOperationException(\"Non-nuclear submarine cannot load nuclear fuel\");\n        }\n    }\n    \n    public void checkBatteryLevel() {\n        if (energyType.equals(\"Electric\") || energyType.equals(\"Diesel\")) {\n            System.out.println(\"Submarine battery level: 70%\");\n        } else {\n            throw new UnsupportedOperationException(\"Nuclear submarine has no battery system\");\n        }\n    }\n    \n    public void maintainEngine() {\n        if (energyType.equals(\"Nuclear\")) {\n            System.out.println(\"Maintaining nuclear reactor systems\");\n        } else if (energyType.equals(\"Diesel\")) {\n            System.out.println(\"Maintaining diesel-electric propulsion\");\n        } else {\n            System.out.println(\"Maintaining electric propulsion system\");\n        }\n    }\n    \n    public Captain getOperator() {\n        return captain;\n    }\n    \n    public String getEnergyType() {\n        return energyType;\n    }\n}",
            "level": "HARD",
            "language": "JAVA",
            "violation": "ISP"
        },
        {
            "input": "interface GameCharacter {\n    void meleeAttack();\n    void castSpell();\n    void fly();\n    void defend();\n}\n\ninterface Weapon {\n    void slash();\n    void shoot();\n    void enchant();\n    void repair();\n}\n\nclass Mage implements GameCharacter {\n    private String name;\n    private int mana;\n    private int level;\n    \n    public Mage(String name, int level) {\n        this.name = name;\n        this.mana = 100;\n        this.level = level;\n    }\n    \n    @Override\n    public void meleeAttack() {\n        throw new UnsupportedOperationException(\"Mage cannot perform melee attacks!\");\n    }\n    \n    @Override\n    public void castSpell() {\n        if (mana < 10) {\n            System.out.println(name + \" is out of mana!\");\n            return;\n        }\n        \n        if (level >= 5 && mana >= 30) {\n            System.out.println(name + \" casts a powerful lightning storm!\");\n            mana -= 30;\n        } else if (level >= 3 && mana >= 20) {\n            System.out.println(name + \" casts a fireball spell!\");\n            mana -= 20;\n        } else if (mana >= 10) {\n            System.out.println(name + \" casts a basic magic missile!\");\n            mana -= 10;\n        }\n    }\n    \n    @Override\n    public void fly() {\n        if (level >= 2) {\n            System.out.println(name + \" soars through the air with magic!\");\n        } else {\n            System.out.println(name + \" is too inexperienced to fly!\");\n        }\n    }\n    \n    @Override\n    public void defend() {\n        if (mana >= 15) {\n            System.out.println(name + \" creates a magical barrier!\");\n            mana -= 15;\n        } else {\n            System.out.println(name + \" dodges awkwardly!\");\n        }\n    }\n}\n\nclass Fighter implements GameCharacter {\n    private String name;\n    private int stamina;\n    private boolean hasWeapon;\n    \n    public Fighter(String name, boolean hasWeapon) {\n        this.name = name;\n        this.stamina = 100;\n        this.hasWeapon = hasWeapon;\n    }\n    \n    @Override\n    public void meleeAttack() {\n        if (stamina < 5) {\n            System.out.println(name + \" is too exhausted to fight!\");\n            return;\n        }\n        \n        if (hasWeapon) {\n            if (stamina >= 20) {\n                System.out.println(name + \" performs a devastating combo attack!\");\n                stamina -= 20;\n            } else if (stamina >= 10) {\n                System.out.println(name + \" swings weapon with force!\");\n                stamina -= 10;\n            } else {\n                System.out.println(name + \" makes a weak weapon strike!\");\n                stamina -= 5;\n            }\n        } else {\n            if (stamina >= 15) {\n                System.out.println(name + \" throws a powerful punch!\");\n                stamina -= 15;\n            } else {\n                System.out.println(name + \" throws a basic punch!\");\n                stamina -= 5;\n            }\n        }\n    }\n    \n    @Override\n    public void castSpell() {\n        throw new UnsupportedOperationException(\"Fighter cannot cast spells!\");\n    }\n    \n    @Override\n    public void fly() {\n        throw new UnsupportedOperationException(\"Fighter cannot fly!\");\n    }\n    \n    @Override\n    public void defend() {\n        if (hasWeapon && stamina >= 10) {\n            System.out.println(name + \" blocks with weapon!\");\n            stamina -= 10;\n        } else if (stamina >= 5) {\n            System.out.println(name + \" raises arms to defend!\");\n            stamina -= 5;\n        } else {\n            System.out.println(name + \" barely manages to dodge!\");\n        }\n    }\n}\n\nclass Sword implements Weapon {\n    private int sharpness;\n    private boolean isMagic;\n    \n    public Sword(int sharpness, boolean isMagic) {\n        this.sharpness = sharpness;\n        this.isMagic = isMagic;\n    }\n    \n    @Override\n    public void slash() {\n        if (sharpness > 70) {\n            System.out.println(\"Sword cuts cleanly through the target!\");\n        } else if (sharpness > 30) {\n            System.out.println(\"Sword makes a decent cut!\");\n        } else {\n            System.out.println(\"Dull sword barely scratches the target!\");\n        }\n    }\n    \n    @Override\n    public void shoot() {\n        throw new UnsupportedOperationException(\"Sword cannot shoot!\");\n    }\n    \n    @Override\n    public void enchant() {\n        if (isMagic) {\n            System.out.println(\"Magical sword glows with enhanced power!\");\n            sharpness += 10;\n        } else {\n            throw new UnsupportedOperationException(\"Non-magic sword cannot be enchanted!\");\n        }\n    }\n    \n    @Override\n    public void repair() {\n        if (sharpness < 100) {\n            sharpness = Math.min(100, sharpness + 25);\n            System.out.println(\"Sword has been sharpened and repaired!\");\n        } else {\n            System.out.println(\"Sword is already in perfect condition!\");\n        }\n    }\n}\n\nclass Bow implements Weapon {\n    private int arrows;\n    private int range;\n    \n    public Bow(int arrows, int range) {\n        this.arrows = arrows;\n        this.range = range;\n    }\n    \n    @Override\n    public void slash() {\n        throw new UnsupportedOperationException(\"Bow cannot slash!\");\n    }\n    \n    @Override\n    public void shoot() {\n        if (arrows <= 0) {\n            System.out.println(\"No arrows left to shoot!\");\n            return;\n        }\n        \n        if (range > 80) {\n            System.out.println(\"Long-range shot hits the distant target!\");\n        } else if (range > 50) {\n            System.out.println(\"Medium-range shot finds its mark!\");\n        } else {\n            System.out.println(\"Short-range shot barely reaches the target!\");\n        }\n        arrows--;\n    }\n    \n    @Override\n    public void enchant() {\n        throw new UnsupportedOperationException(\"Regular bow cannot be enchanted!\");\n    }\n    \n    @Override\n    public void repair() {\n        if (range < 100) {\n            range = Math.min(100, range + 15);\n            System.out.println(\"Bow string tightened and wood polished!\");\n        } else {\n            System.out.println(\"Bow is in excellent condition!\");\n        }\n    }\n}\n",
            "output": "interface MeleeCapable {\n    void meleeAttack();\n}\n\ninterface MagicCapable {\n    void castSpell();\n}\n\ninterface FlyingCapable {\n    void fly();\n}\n\ninterface DefenseCapable {\n    void defend();\n}\n\ninterface SlashCapable {\n    void slash();\n}\n\ninterface ShootCapable {\n    void shoot();\n}\n\ninterface EnchantCapable {\n    void enchant();\n}\n\ninterface RepairCapable {\n    void repair();\n}\n\nclass Mage implements MagicCapable, FlyingCapable, DefenseCapable {\n    private String name;\n    private int mana;\n    private int level;\n    \n    public Mage(String name, int level) {\n        this.name = name;\n        this.mana = 100;\n        this.level = level;\n    }\n    \n    @Override\n    public void castSpell() {\n        if (mana < 10) {\n            System.out.println(name + \" is out of mana!\");\n            return;\n        }\n        \n        if (level >= 5 && mana >= 30) {\n            System.out.println(name + \" casts a powerful lightning storm!\");\n            mana -= 30;\n        } else if (level >= 3 && mana >= 20) {\n            System.out.println(name + \" casts a fireball spell!\");\n            mana -= 20;\n        } else if (mana >= 10) {\n            System.out.println(name + \" casts a basic magic missile!\");\n            mana -= 10;\n        }\n    }\n    \n    @Override\n    public void fly() {\n        if (level >= 2) {\n            System.out.println(name + \" soars through the air with magic!\");\n        } else {\n            System.out.println(name + \" is too inexperienced to fly!\");\n        }\n    }\n    \n    @Override\n    public void defend() {\n        if (mana >= 15) {\n            System.out.println(name + \" creates a magical barrier!\");\n            mana -= 15;\n        } else {\n            System.out.println(name + \" dodges awkwardly!\");\n        }\n    }\n}\n\nclass Fighter implements MeleeCapable, DefenseCapable {\n    private String name;\n    private int stamina;\n    private boolean hasWeapon;\n    \n    public Fighter(String name, boolean hasWeapon) {\n        this.name = name;\n        this.stamina = 100;\n        this.hasWeapon = hasWeapon;\n    }\n    \n    @Override\n    public void meleeAttack() {\n        if (stamina < 5) {\n            System.out.println(name + \" is too exhausted to fight!\");\n            return;\n        }\n        \n        if (hasWeapon) {\n            if (stamina >= 20) {\n                System.out.println(name + \" performs a devastating combo attack!\");\n                stamina -= 20;\n            } else if (stamina >= 10) {\n                System.out.println(name + \" swings weapon with force!\");\n                stamina -= 10;\n            } else {\n                System.out.println(name + \" makes a weak weapon strike!\");\n                stamina -= 5;\n            }\n        } else {\n            if (stamina >= 15) {\n                System.out.println(name + \" throws a powerful punch!\");\n                stamina -= 15;\n            } else {\n                System.out.println(name + \" throws a basic punch!\");\n                stamina -= 5;\n            }\n        }\n    }\n    \n    @Override\n    public void defend() {\n        if (hasWeapon && stamina >= 10) {\n            System.out.println(name + \" blocks with weapon!\");\n            stamina -= 10;\n        } else if (stamina >= 5) {\n            System.out.println(name + \" raises arms to defend!\");\n            stamina -= 5;\n        } else {\n            System.out.println(name + \" barely manages to dodge!\");\n        }\n    }\n}\n\nclass Sword implements SlashCapable, EnchantCapable, RepairCapable {\n    private int sharpness;\n    private boolean isMagic;\n    \n    public Sword(int sharpness, boolean isMagic) {\n        this.sharpness = sharpness;\n        this.isMagic = isMagic;\n    }\n    \n    @Override\n    public void slash() {\n        if (sharpness > 70) {\n            System.out.println(\"Sword cuts cleanly through the target!\");\n        } else if (sharpness > 30) {\n            System.out.println(\"Sword makes a decent cut!\");\n        } else {\n            System.out.println(\"Dull sword barely scratches the target!\");\n        }\n    }\n    \n    @Override\n    public void enchant() {\n        if (isMagic) {\n            System.out.println(\"Magical sword glows with enhanced power!\");\n            sharpness += 10;\n        } else {\n            throw new UnsupportedOperationException(\"Non-magic sword cannot be enchanted!\");\n        }\n    }\n    \n    @Override\n    public void repair() {\n        if (sharpness < 100) {\n            sharpness = Math.min(100, sharpness + 25);\n            System.out.println(\"Sword has been sharpened and repaired!\");\n        } else {\n            System.out.println(\"Sword is already in perfect condition!\");\n        }\n    }\n}\n\nclass Bow implements ShootCapable, RepairCapable {\n    private int arrows;\n    private int range;\n    \n    public Bow(int arrows, int range) {\n        this.arrows = arrows;\n        this.range = range;\n    }\n    \n    @Override\n    public void shoot() {\n        if (arrows <= 0) {\n            System.out.println(\"No arrows left to shoot!\");\n            return;\n        }\n        \n        if (range > 80) {\n            System.out.println(\"Long-range shot hits the distant target!\");\n        } else if (range > 50) {\n            System.out.println(\"Medium-range shot finds its mark!\");\n        } else {\n            System.out.println(\"Short-range shot barely reaches the target!\");\n        }\n        arrows--;\n    }\n    \n    @Override\n    public void repair() {\n        if (range < 100) {\n            range = Math.min(100, range + 15);\n            System.out.println(\"Bow string tightened and wood polished!\");\n        } else {\n            System.out.println(\"Bow is in excellent condition!\");\n        }\n    }\n}",
            "level": "MODERATE",
            "language": "JAVA",
            "violation": "ISP"
        },
        {
            "input": "interface MusicPlayer {\n    void play();\n    void pause();\n    void stop();\n    void skipTrack();\n    void eject();\n    void setVolume(int volume);\n    void setEqualizer(String preset);\n    void displayTrackInfo();\n    void shuffle();\n    void repeat();\n}\n\nclass CDPlayer implements MusicPlayer {\n    private boolean isPlaying = false;\n    private boolean isPaused = false;\n    private String currentTrack = \"Track 1\";\n    private int volume = 50;\n    private boolean shuffleMode = false;\n    private boolean repeatMode = false;\n    \n    @Override\n    public void play() {\n        isPlaying = true;\n        isPaused = false;\n        System.out.println(\"CD Player: Playing \" + currentTrack);\n    }\n    \n    @Override\n    public void pause() {\n        if (isPlaying) {\n            isPaused = true;\n            isPlaying = false;\n            System.out.println(\"CD Player: Paused\");\n        }\n    }\n    \n    @Override\n    public void stop() {\n        isPlaying = false;\n        isPaused = false;\n        System.out.println(\"CD Player: Stopped\");\n    }\n    \n    @Override\n    public void skipTrack() {\n        System.out.println(\"CD Player: Skipping to next track\");\n        currentTrack = \"Track \" + (Integer.parseInt(currentTrack.split(\" \")[1]) + 1);\n    }\n    \n    @Override\n    public void eject() {\n        stop();\n        System.out.println(\"CD Player: CD ejected\");\n    }\n    \n    @Override\n    public void setVolume(int volume) {\n        this.volume = volume;\n        System.out.println(\"CD Player: Volume set to \" + volume);\n    }\n    \n    @Override\n    public void setEqualizer(String preset) {\n        System.out.println(\"CD Player: Equalizer set to \" + preset);\n    }\n    \n    @Override\n    public void displayTrackInfo() {\n        System.out.println(\"CD Player: Current track - \" + currentTrack + \", Volume: \" + volume);\n    }\n    \n    @Override\n    public void shuffle() {\n        shuffleMode = !shuffleMode;\n        System.out.println(\"CD Player: Shuffle \" + (shuffleMode ? \"ON\" : \"OFF\"));\n    }\n    \n    @Override\n    public void repeat() {\n        repeatMode = !repeatMode;\n        System.out.println(\"CD Player: Repeat \" + (repeatMode ? \"ON\" : \"OFF\"));\n    }\n}\n\nclass VinylPlayer implements MusicPlayer {\n    private boolean isPlaying = false;\n    private boolean isPaused = false;\n    private String currentSong = \"Side A\";\n    private int volume = 50;\n    \n    @Override\n    public void play() {\n        isPlaying = true;\n        isPaused = false;\n        System.out.println(\"Vinyl Player: Playing \" + currentSong);\n    }\n    \n    @Override\n    public void pause() {\n        if (isPlaying) {\n            isPaused = true;\n            isPlaying = false;\n            System.out.println(\"Vinyl Player: Paused (needle lifted)\");\n        }\n    }\n    \n    @Override\n    public void stop() {\n        isPlaying = false;\n        isPaused = false;\n        System.out.println(\"Vinyl Player: Stopped\");\n    }\n    \n    @Override\n    public void skipTrack() {\n        throw new UnsupportedOperationException(\"Vinyl players cannot skip tracks - you must manually move the needle!\");\n    }\n   \n    @Override\n    public void eject() {\n        throw new UnsupportedOperationException(\"Vinyl players don't eject - you must manually remove the record!\");\n    }\n    \n    @Override\n    public void setVolume(int volume) {\n        this.volume = volume;\n        System.out.println(\"Vinyl Player: Volume set to \" + volume);\n    }\n    \n    @Override\n    public void setEqualizer(String preset) {\n        throw new UnsupportedOperationException(\"Vintage vinyl players don't have digital equalizers!\");\n    }\n    \n    @Override\n    public void displayTrackInfo() {\n        System.out.println(\"Vinyl Player: Current side - \" + currentSong + \", Volume: \" + volume);\n    }\n    \n    @Override\n    public void shuffle() {\n        throw new UnsupportedOperationException(\"Cannot shuffle vinyl records!\");\n    }\n    \n    @Override\n    public void repeat() {\n        throw new UnsupportedOperationException(\"Vinyl players don't have automatic repeat!\");\n    }\n}\n\nclass Amplifier implements MusicPlayer {\n    private boolean isPoweredOn = false;\n    private int volume = 30;\n    private String equalizerSetting = \"Flat\";\n    private boolean bassBoost = false;\n    \n    @Override\n    public void play() {\n        throw new UnsupportedOperationException(\"Amplifiers don't play music - they amplify audio signals!\");\n    }\n    \n    @Override\n    public void pause() {\n        throw new UnsupportedOperationException(\"Amplifiers don't control playback!\");\n    }\n    \n    @Override\n    public void stop() {\n        isPoweredOn = false;\n        System.out.println(\"Amplifier: Powered OFF\");\n    }\n    \n    @Override\n    public void skipTrack() {\n        throw new UnsupportedOperationException(\"Amplifiers don't control track selection!\");\n    }\n    \n    @Override\n    public void eject() {\n        throw new UnsupportedOperationException(\"Amplifiers don't have media to eject!\");\n    }\n    \n    @Override\n\tpublic void setVolume(int volume) {\n\t\tif (volume < 0) {\n\t\t\tthis.volume = 0;\n\t\t} else if (volume > 100) {\n\t\t\tthis.volume = 100;\n\t\t} else {\n\t\t\tthis.volume = volume;\n\t\t}\n\n\t\tif (this.volume > 80) {\n\t\t\tSystem.out.println(\"Amplifier: Warning - High volume!\");\n\t\t}\n\n\t\tSystem.out.println(\"Amplifier: Master volume set to \" + this.volume);\n\t}\n\n    \n    @Override\n    @Override\n\tpublic void setEqualizer(String preset) {\n\t\tswitch (preset.toLowerCase()) {\n\t\t\tcase \"rock\":\n\t\t\tcase \"pop\":\n\t\t\tcase \"jazz\":\n\t\t\tcase \"classical\":\n\t\t\t\tequalizerSetting = preset;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tequalizerSetting = \"Flat\";\n\t\t\t\tSystem.out.println(\"Amplifier: Unknown preset. Defaulting to Flat.\");\n\t\t\t\treturn;\n\t\t}\n\t\tSystem.out.println(\"Amplifier: Equalizer set to \" + equalizerSetting);\n\t}\n\n    \n    @Override\n    public void displayTrackInfo() {\n        throw new UnsupportedOperationException(\"Amplifiers don't track music information!\");\n    }\n    \n    @Override\n    public void shuffle() {\n        throw new UnsupportedOperationException(\"Amplifiers don't control playback modes!\");\n    }\n    \n    @Override\n    public void repeat() {\n        throw new UnsupportedOperationException(\"Amplifiers don't control playback modes!\");\n    }\n    \n    public void powerOn() {\n        isPoweredOn = true;\n        System.out.println(\"Amplifier: Powered ON\");\n    }\n    \n    public void setBassBoost(boolean enabled) {\n        this.bassBoost = enabled;\n        System.out.println(\"Amplifier: Bass boost \" + (enabled ? \"ON\" : \"OFF\"));\n    }\n}\n",
            "output": "interface PlaybackCapable {\n    void play();\n    void pause();\n    void stop();\n}\n\ninterface TrackControlCapable {\n    void skipTrack();\n}\n\ninterface MediaEjectCapable {\n    void eject();\n}\n\ninterface VolumeControlCapable {\n    void setVolume(int volume);\n}\n\ninterface EqualizerCapable {\n    void setEqualizer(String preset);\n}\n\ninterface TrackInfoCapable {\n    void displayTrackInfo();\n}\n\ninterface PlaybackModeCapable {\n    void shuffle();\n    void repeat();\n}\n\nclass CDPlayer implements PlaybackCapable, TrackControlCapable, MediaEjectCapable, VolumeControlCapable, EqualizerCapable, TrackInfoCapable, PlaybackModeCapable {\n    private boolean isPlaying = false;\n    private boolean isPaused = false;\n    private String currentTrack = \"Track 1\";\n    private int volume = 50;\n    private boolean shuffleMode = false;\n    private boolean repeatMode = false;\n    \n    @Override\n    public void play() {\n        isPlaying = true;\n        isPaused = false;\n        System.out.println(\"CD Player: Playing \" + currentTrack);\n    }\n    \n    @Override\n    public void pause() {\n        if (isPlaying) {\n            isPaused = true;\n            isPlaying = false;\n            System.out.println(\"CD Player: Paused\");\n        }\n    }\n    \n    @Override\n    public void stop() {\n        isPlaying = false;\n        isPaused = false;\n        System.out.println(\"CD Player: Stopped\");\n    }\n    \n    @Override\n    public void skipTrack() {\n        System.out.println(\"CD Player: Skipping to next track\");\n        currentTrack = \"Track \" + (Integer.parseInt(currentTrack.split(\" \")[1]) + 1);\n    }\n    \n    @Override\n    public void eject() {\n        stop();\n        System.out.println(\"CD Player: CD ejected\");\n    }\n    \n    @Override\n    public void setVolume(int volume) {\n        this.volume = volume;\n        System.out.println(\"CD Player: Volume set to \" + volume);\n    }\n    \n    @Override\n    public void setEqualizer(String preset) {\n        System.out.println(\"CD Player: Equalizer set to \" + preset);\n    }\n    \n    @Override\n    public void displayTrackInfo() {\n        System.out.println(\"CD Player: Current track - \" + currentTrack + \", Volume: \" + volume);\n    }\n    \n    @Override\n    public void shuffle() {\n        shuffleMode = !shuffleMode;\n        System.out.println(\"CD Player: Shuffle \" + (shuffleMode ? \"ON\" : \"OFF\"));\n    }\n    \n    @Override\n    public void repeat() {\n        repeatMode = !repeatMode;\n        System.out.println(\"CD Player: Repeat \" + (repeatMode ? \"ON\" : \"OFF\"));\n    }\n}\n\nclass VinylPlayer implements PlaybackCapable, VolumeControlCapable, TrackInfoCapable {\n    private boolean isPlaying = false;\n    private boolean isPaused = false;\n    private String currentSong = \"Side A\";\n    private int volume = 50;\n    \n    @Override\n    public void play() {\n        isPlaying = true;\n        isPaused = false;\n        System.out.println(\"Vinyl Player: Playing \" + currentSong);\n    }\n    \n    @Override\n    public void pause() {\n        if (isPlaying) {\n            isPaused = true;\n            isPlaying = false;\n            System.out.println(\"Vinyl Player: Paused (needle lifted)\");\n        }\n    }\n    \n    @Override\n    public void stop() {\n        isPlaying = false;\n        isPaused = false;\n        System.out.println(\"Vinyl Player: Stopped\");\n    }\n    \n    @Override\n    public void setVolume(int volume) {\n        this.volume = volume;\n        System.out.println(\"Vinyl Player: Volume set to \" + volume);\n    }\n    \n    @Override\n    public void displayTrackInfo() {\n        System.out.println(\"Vinyl Player: Current side - \" + currentSong + \", Volume: \" + volume);\n    }\n}\n\nclass Amplifier implements VolumeControlCapable, EqualizerCapable {\n    private boolean isPoweredOn = false;\n    private int volume = 30;\n    private String equalizerSetting = \"Flat\";\n    private boolean bassBoost = false;\n    \n    public void stop() {\n        isPoweredOn = false;\n        System.out.println(\"Amplifier: Powered OFF\");\n    }\n    \n    @Override\n    public void setVolume(int volume) {\n        if (volume < 0) {\n            this.volume = 0;\n        } else if (volume > 100) {\n            this.volume = 100;\n        } else {\n            this.volume = volume;\n        }\n\n        if (this.volume > 80) {\n            System.out.println(\"Amplifier: Warning - High volume!\");\n        }\n\n        System.out.println(\"Amplifier: Master volume set to \" + this.volume);\n    }\n    \n    @Override\n    public void setEqualizer(String preset) {\n        switch (preset.toLowerCase()) {\n            case \"rock\":\n            case \"pop\":\n            case \"jazz\":\n            case \"classical\":\n                equalizerSetting = preset;\n                break;\n            default:\n                equalizerSetting = \"Flat\";\n                System.out.println(\"Amplifier: Unknown preset. Defaulting to Flat.\");\n                return;\n        }\n        System.out.println(\"Amplifier: Equalizer set to \" + equalizerSetting);\n    }\n    \n    public void powerOn() {\n        isPoweredOn = true;\n        System.out.println(\"Amplifier: Powered ON\");\n    }\n    \n    public void setBassBoost(boolean enabled) {\n        this.bassBoost = enabled;\n        System.out.println(\"Amplifier: Bass boost \" + (enabled ? \"ON\" : \"OFF\"));\n    }\n}",
            "level": "MODERATE",
            "language": "JAVA",
            "violation": "ISP"
        },
        {
            "input": "interface RestaurantWorker {\n    void cookFood();\n    void serveCustomers();\n    void cleanTables();\n    void manageStaff();\n}\n\ninterface MachineWorker {\n    void washDishes();\n    void vacuumFloor();\n    void selfDiagnose();\n}\n\nclass Chef implements RestaurantWorker {\n    public void cookFood() {\n        System.out.println(\"Chef is cooking meals.\");\n    }\n\n    public void serveCustomers() {\n        System.out.println(\"Chef does not serve customers.\");\n    }\n\n    public void cleanTables() {\n        System.out.println(\"Chef does not clean tables.\");\n    }\n\n    public void manageStaff() {\n        System.out.println(\"Chef does not manage staff.\");\n    }\n}\n\nclass Waiter implements RestaurantWorker {\n    public void cookFood() {\n        System.out.println(\"Waiter does not cook food.\");\n    }\n\n    public void serveCustomers() {\n        System.out.println(\"Waiter is serving customers.\");\n    }\n\n    public void cleanTables() {\n        System.out.println(\"Waiter is cleaning tables.\");\n    }\n\n    public void manageStaff() {\n        System.out.println(\"Waiter does not manage staff.\");\n    }\n}\n\nclass Manager implements RestaurantWorker {\n    private boolean conflict = true;\n\n    public void cookFood() {\n        System.out.println(\"Manager does not cook.\");\n    }\n\n    public void serveCustomers() {\n        System.out.println(\"Manager does not serve.\");\n    }\n\n    public void cleanTables() {\n        System.out.println(\"Manager does not clean.\");\n    }\n\n    public void manageStaff() {\n        if (conflict) {\n            System.out.println(\"Manager is resolving a team conflict.\");\n        } else {\n            System.out.println(\"Manager is approving staff schedules.\");\n        }\n    }\n}\n\nclass Dishwasher implements MachineWorker {\n    int dirtyItems = 15;\n\n    public void washDishes() {\n        if (dirtyItems > 0) {\n            System.out.println(\"Dishwasher is cleaning \" + dirtyItems + \" plates.\");\n        } else {\n            System.out.println(\"No dishes to clean.\");\n        }\n    }\n\n    public void vacuumFloor() {\n        System.out.println(\"Dishwasher cannot vacuum the floor.\");\n    }\n\n    public void selfDiagnose() {\n        System.out.println(\"Dishwasher performing self-diagnosis.\");\n    }\n}\n\nclass VacuumCleaner implements MachineWorker {\n    boolean isCharged = false;\n\n    public void washDishes() {\n        System.out.println(\"Vacuum cleaner cannot wash dishes.\");\n    }\n\n    public void vacuumFloor() {\n        if (isCharged) {\n            System.out.println(\"Vacuum cleaner is cleaning the floor.\");\n        } else {\n            System.out.println(\"Vacuum cleaner battery is low.\");\n        }\n    }\n\n    public void selfDiagnose() {\n        System.out.println(\"Vacuum cleaner running diagnostics.\");\n    }\n}\n",
            "output": "interface CookingCapable {\n    void cookFood();\n}\n\ninterface ServingCapable {\n    void serveCustomers();\n}\n\ninterface CleaningCapable {\n    void cleanTables();\n}\n\ninterface ManagementCapable {\n    void manageStaff();\n}\n\ninterface DishWashingCapable {\n    void washDishes();\n}\n\ninterface FloorCleaningCapable {\n    void vacuumFloor();\n}\n\ninterface SelfDiagnosticCapable {\n    void selfDiagnose();\n}\n\nclass Chef implements CookingCapable {\n    public void cookFood() {\n        System.out.println(\"Chef is cooking meals.\");\n    }\n}\n\nclass Waiter implements ServingCapable, CleaningCapable {\n    public void serveCustomers() {\n        System.out.println(\"Waiter is serving customers.\");\n    }\n\n    public void cleanTables() {\n        System.out.println(\"Waiter is cleaning tables.\");\n    }\n}\n\nclass Manager implements ManagementCapable {\n    private boolean conflict = true;\n\n    public void manageStaff() {\n        if (conflict) {\n            System.out.println(\"Manager is resolving a team conflict.\");\n        } else {\n            System.out.println(\"Manager is approving staff schedules.\");\n        }\n    }\n}\n\nclass Dishwasher implements DishWashingCapable, SelfDiagnosticCapable {\n    int dirtyItems = 15;\n\n    public void washDishes() {\n        if (dirtyItems > 0) {\n            System.out.println(\"Dishwasher is cleaning \" + dirtyItems + \" plates.\");\n        } else {\n            System.out.println(\"No dishes to clean.\");\n        }\n    }\n\n    public void selfDiagnose() {\n        System.out.println(\"Dishwasher performing self-diagnosis.\");\n    }\n}\n\nclass VacuumCleaner implements FloorCleaningCapable, SelfDiagnosticCapable {\n    boolean isCharged = false;\n\n    public void vacuumFloor() {\n        if (isCharged) {\n            System.out.println(\"Vacuum cleaner is cleaning the floor.\");\n        } else {\n            System.out.println(\"Vacuum cleaner battery is low.\");\n        }\n    }\n\n    public void selfDiagnose() {\n        System.out.println(\"Vacuum cleaner running diagnostics.\");\n    }\n}\n",
            "level": "MODERATE",
            "language": "JAVA",
            "violation": "ISP"
        },
        {
            "input": "interface Vehicle {\n    void start();\n    void stop();\n    void fly();\n    void dive();\n}\n\ninterface Operator {\n    void steer();\n    void navigateAir();\n    void navigateWater();\n    void communicateWithTower();\n}\n\nclass Driver implements Operator {\n    private String name;\n    \n    public Driver(String name) {\n        this.name = name;\n    }\n    \n    public void steer() {\n        if (name != null && !name.isEmpty()) {\n            if (name.length() > 5) {\n                System.out.println(\"Experienced driver \" + name + \" steering carefully\");\n            } else {\n                System.out.println(\"Driver \" + name + \" steering\");\n            }\n        }\n    }\n    \n    public void navigateAir() {\n        throw new UnsupportedOperationException(\"Driver cannot navigate air\");\n    }\n    \n    public void navigateWater() {\n        throw new UnsupportedOperationException(\"Driver cannot navigate water\");\n    }\n    \n    public void communicateWithTower() {\n        throw new UnsupportedOperationException(\"Driver cannot communicate with tower\");\n    }\n    \n    public String getName() {\n        return name;\n    }\n}\n\nclass Pilot implements Operator {\n    private String name;\n    \n    public Pilot(String name) {\n        this.name = name;\n    }\n    \n    public void steer() {\n        System.out.println(\"Pilot \" + name + \" controlling aircraft\");\n    }\n    \n    public void navigateAir() {\n        if (name != null) {\n            if (name.contains(\"Captain\")) {\n                System.out.println(\"Captain pilot navigating complex airspace\");\n            } else if (name.length() > 6) {\n                System.out.println(\"Experienced pilot navigating airspace\");\n            } else {\n                System.out.println(\"Pilot navigating\");\n            }\n        }\n    }\n    \n    public void navigateWater() {\n        throw new UnsupportedOperationException(\"Pilot cannot navigate water\");\n    }\n    \n    public void communicateWithTower() {\n        System.out.println(\"Pilot \" + name + \" communicating with control tower\");\n    }\n    \n    public String getName() {\n        return name;\n    }\n}\n\nclass Captain implements Operator {\n    private String name;\n    \n    public Captain(String name) {\n        this.name = name;\n    }\n    \n    public void steer() {\n        System.out.println(\"Captain \" + name + \" steering submarine\");\n    }\n    \n    public void navigateAir() {\n        throw new UnsupportedOperationException(\"Captain cannot navigate air\");\n    }\n    \n    public void navigateWater() {\n        if (name != null && name.startsWith(\"Captain\")) {\n            System.out.println(\"Captain navigating deep waters\");\n        } else {\n            System.out.println(\"Naval officer navigating\");\n        }\n    }\n    \n    public void communicateWithTower() {\n        throw new UnsupportedOperationException(\"Captain cannot communicate with tower\");\n    }\n    \n    public String getName() {\n        return name;\n    }\n}\n\nclass Car implements Vehicle {\n    private Driver driver;\n    \n    public Car(Driver driver) {\n        this.driver = driver;\n    }\n    \n    public void start() {\n        if (driver != null) {\n            System.out.println(\"Car started by \" + driver.getName());\n        } else {\n            System.out.println(\"Car started\");\n        }\n    }\n    \n    public void stop() {\n        System.out.println(\"Car stopped\");\n    }\n    \n    public void fly() {\n        throw new UnsupportedOperationException(\"Car cannot fly\");\n    }\n    \n    public void dive() {\n        throw new UnsupportedOperationException(\"Car cannot dive\");\n    }\n    \n    public Driver getOperator() {\n        return driver;\n    }\n}\n\nclass Plane implements Vehicle {\n    private Pilot pilot;\n    \n    public Plane(Pilot pilot) {\n        this.pilot = pilot;\n    }\n    \n    public void start() {\n        System.out.println(\"Plane engines started by \" + pilot.getName());\n    }\n    \n    public void stop() {\n        System.out.println(\"Plane stopped\");\n    }\n    \n    public void fly() {\n        if (pilot.getName().contains(\"Captain\")) {\n            System.out.println(\"Plane flying at cruising altitude\");\n        } else {\n            System.out.println(\"Plane flying\");\n        }\n    }\n    \n    public void dive() {\n        throw new UnsupportedOperationException(\"Plane cannot dive underwater\");\n    }\n    \n    public Pilot getOperator() {\n        return pilot;\n    }\n}\n\nclass Submarine implements Vehicle {\n    private Captain captain;\n    private int depth;\n    \n    public Submarine(Captain captain) {\n        this.captain = captain;\n        this.depth = 0;\n    }\n    \n    public void start() {\n        System.out.println(\"Submarine engines started by \" + captain.getName());\n    }\n    \n    public void stop() {\n        System.out.println(\"Submarine stopped\");\n    }\n    \n    public void fly() {\n        throw new UnsupportedOperationException(\"Submarine cannot fly\");\n    }\n    \n    public void dive() {\n        if (captain != null && captain.getName().startsWith(\"Captain\")) {\n            if (depth < 100) {\n                depth += 50;\n                System.out.println(\"Submarine diving to depth: \" + depth + \" meters\");\n            } else if (depth < 200) {\n                depth += 30;\n                System.out.println(\"Deep diving to: \" + depth + \" meters\");\n            } else {\n                System.out.println(\"Maximum depth reached\");\n            }\n        }\n    }\n    \n    public Captain getOperator() {\n        return captain;\n    }\n}\n",
            "output": "interface StartStopCapable {\n    void start();\n    void stop();\n}\n\ninterface FlyingCapable {\n    void fly();\n}\n\ninterface DivingCapable {\n    void dive();\n}\n\ninterface GroundSteeringCapable {\n    void steer();\n}\n\ninterface AirNavigationCapable {\n    void navigateAir();\n}\n\ninterface WaterNavigationCapable {\n    void navigateWater();\n}\n\ninterface TowerCommunicationCapable {\n    void communicateWithTower();\n}\n\nclass Driver implements GroundSteeringCapable {\n    private String name;\n    \n    public Driver(String name) {\n        this.name = name;\n    }\n    \n    public void steer() {\n        if (name != null && !name.isEmpty()) {\n            if (name.length() > 5) {\n                System.out.println(\"Experienced driver \" + name + \" steering carefully\");\n            } else {\n                System.out.println(\"Driver \" + name + \" steering\");\n            }\n        }\n    }\n    \n    public String getName() {\n        return name;\n    }\n}\n\nclass Pilot implements GroundSteeringCapable, AirNavigationCapable, TowerCommunicationCapable {\n    private String name;\n    \n    public Pilot(String name) {\n        this.name = name;\n    }\n    \n    public void steer() {\n        System.out.println(\"Pilot \" + name + \" controlling aircraft\");\n    }\n    \n    public void navigateAir() {\n        if (name != null) {\n            if (name.contains(\"Captain\")) {\n                System.out.println(\"Captain pilot navigating complex airspace\");\n            } else if (name.length() > 6) {\n                System.out.println(\"Experienced pilot navigating airspace\");\n            } else {\n                System.out.println(\"Pilot navigating\");\n            }\n        }\n    }\n    \n    public void communicateWithTower() {\n        System.out.println(\"Pilot \" + name + \" communicating with control tower\");\n    }\n    \n    public String getName() {\n        return name;\n    }\n}\n\nclass Captain implements GroundSteeringCapable, WaterNavigationCapable {\n    private String name;\n    \n    public Captain(String name) {\n        this.name = name;\n    }\n    \n    public void steer() {\n        System.out.println(\"Captain \" + name + \" steering submarine\");\n    }\n    \n    public void navigateWater() {\n        if (name != null && name.startsWith(\"Captain\")) {\n            System.out.println(\"Captain navigating deep waters\");\n        } else {\n            System.out.println(\"Naval officer navigating\");\n        }\n    }\n    \n    public String getName() {\n        return name;\n    }\n}\n\nclass Car implements StartStopCapable {\n    private Driver driver;\n    \n    public Car(Driver driver) {\n        this.driver = driver;\n    }\n    \n    public void start() {\n        if (driver != null) {\n            System.out.println(\"Car started by \" + driver.getName());\n        } else {\n            System.out.println(\"Car started\");\n        }\n    }\n    \n    public void stop() {\n        System.out.println(\"Car stopped\");\n    }\n    \n    public Driver getOperator() {\n        return driver;\n    }\n}\n\nclass Plane implements StartStopCapable, FlyingCapable {\n    private Pilot pilot;\n    \n    public Plane(Pilot pilot) {\n        this.pilot = pilot;\n    }\n    \n    public void start() {\n        System.out.println(\"Plane engines started by \" + pilot.getName());\n    }\n    \n    public void stop() {\n        System.out.println(\"Plane stopped\");\n    }\n    \n    public void fly() {\n        if (pilot.getName().contains(\"Captain\")) {\n            System.out.println(\"Plane flying at cruising altitude\");\n        } else {\n            System.out.println(\"Plane flying\");\n        }\n    }\n    \n    public Pilot getOperator() {\n        return pilot;\n    }\n}\n\nclass Submarine implements StartStopCapable, DivingCapable {\n    private Captain captain;\n    private int depth;\n    \n    public Submarine(Captain captain) {\n        this.captain = captain;\n        this.depth = 0;\n    }\n    \n    public void start() {\n        System.out.println(\"Submarine engines started by \" + captain.getName());\n    }\n    \n    public void stop() {\n        System.out.println(\"Submarine stopped\");\n    }\n    \n    public void dive() {\n        if (captain != null && captain.getName().startsWith(\"Captain\")) {\n            if (depth < 100) {\n                depth += 50;\n                System.out.println(\"Submarine diving to depth: \" + depth + \" meters\");\n            } else if (depth < 200) {\n                depth += 30;\n                System.out.println(\"Deep diving to: \" + depth + \" meters\");\n            } else {\n                System.out.println(\"Maximum depth reached\");\n            }\n        }\n    }\n    \n    public Captain getOperator() {\n        return captain;\n    }\n}\n",
            "level": "MODERATE",
            "language": "JAVA",
            "violation": "ISP"
        },
        {
            "input": "interface GameCharacter {\n    fun meleeAttack()\n    fun castSpell()\n    fun fly()\n    fun defend()\n}\n\nclass Mage(private val name: String) : GameCharacter {\n    private var mana: Int = 100\n    \n    override fun meleeAttack() {\n        throw UnsupportedOperationException(\"Mage cannot perform melee attacks!\")\n    }\n    \n    override fun castSpell() {\n        if (mana >= 20) {\n            println(\"$name casts a fireball spell!\")\n            mana -= 20\n        } else {\n            println(\"$name is out of mana!\")\n        }\n    }\n    \n    override fun fly() {\n        println(\"$name soars through the air with magic!\")\n    }\n    \n    override fun defend() {\n        println(\"$name creates a magical shield!\")\n    }\n}\n\nclass Fighter(private val name: String) : GameCharacter {\n    private var stamina: Int = 100\n    \n    override fun meleeAttack() {\n        if (stamina >= 10) {\n            println(\"$name swings sword with great force!\")\n            stamina -= 10\n        } else {\n            println(\"$name is too tired to attack!\")\n        }\n    }\n    \n    override fun castSpell() {\n        throw UnsupportedOperationException(\"Fighter cannot cast spells!\")\n    }\n    \n    override fun fly() {\n        throw UnsupportedOperationException(\"Fighter cannot fly!\")\n    }\n    \n    override fun defend() {\n        println(\"$name raises shield to block incoming attacks!\")\n    }\n}\n",
            "output": "interface GameCharacter {\n    fun defend()\n}\n\ninterface IMage {\n    fun castSpell()\n    fun fly()\n}\n\ninterface IFighter {\n    fun meleeAttack()\n}\n\nclass Mage(private val name: String) : GameCharacter, IMage {\n    private var mana: Int = 100\n        \n    override fun castSpell() {\n        if (mana >= 20) {\n            println(\"$name casts a fireball spell!\")\n            mana -= 20\n        } else {\n            println(\"$name is out of mana!\")\n        }\n    }\n    \n    override fun fly() {\n        println(\"$name soars through the air with magic!\")\n    }\n    \n    override fun defend() {\n        println(\"$name creates a magical shield!\")\n    }\n}\n\nclass Fighter(private val name: String) : GameCharacter, IFighter {\n    private var stamina: Int = 100\n    \n    override fun meleeAttack() {\n        if (stamina >= 10) {\n            println(\"$name swings sword with great force!\")\n            stamina -= 10\n        } else {\n            println(\"$name is too tired to attack!\")\n        }\n    }\n        \n    override fun defend() {\n        println(\"$name raises shield to block incoming attacks!\")\n    }\n}",
            "level": "EASY",
            "language": "KOTLIN",
            "violation": "ISP"
        },
        {
            "input": "interface MusicPlayer {\n    fun play()\n    fun pause()\n    fun stop()\n    fun skipTrack()\n    fun eject()\n}\n\nclass CDPlayer : MusicPlayer {\n    private var isPlaying = false\n    private var isPaused = false\n    private var currentTrack = \"Track 1\"\n    \n    override fun play() {\n        isPlaying = true\n        isPaused = false\n        println(\"CD Player: Playing $currentTrack\")\n    }\n    \n    override fun pause() {\n        if (isPlaying) {\n            isPaused = true\n            isPlaying = false\n            println(\"CD Player: Paused\")\n        }\n    }\n    \n    override fun stop() {\n        isPlaying = false\n        isPaused = false\n        println(\"CD Player: Stopped\")\n    }\n    \n    override fun skipTrack() {\n        println(\"CD Player: Skipping to next track\")\n        val trackNumber = currentTrack.split(\" \")[1].toInt() + 1\n        currentTrack = \"Track $trackNumber\"\n    }\n    \n    override fun eject() {\n        stop()\n        println(\"CD Player: CD ejected\")\n    }\n}\n\nclass VinylPlayer : MusicPlayer {\n    private var isPlaying = false\n    private var isPaused = false\n    private var currentSong = \"Side A\"\n    \n    override fun play() {\n        isPlaying = true\n        isPaused = false\n        println(\"Vinyl Player: Playing $currentSong\")\n    }\n    \n    override fun pause() {\n        if (isPlaying) {\n            isPaused = true\n            isPlaying = false\n            println(\"Vinyl Player: Paused (needle lifted)\")\n        }\n    }\n    \n    override fun stop() {\n        isPlaying = false\n        isPaused = false\n        println(\"Vinyl Player: Stopped\")\n    }\n    \n    override fun skipTrack() {\n        throw UnsupportedOperationException(\"Vinyl players cannot skip tracks - you must manually move the needle!\")\n    }\n    \n    override fun eject() {\n        throw UnsupportedOperationException(\"Vinyl players don't eject - you must manually remove the record!\")\n    }\n}\n",
            "output": "interface MusicPlayer {\n    fun play()\n    fun pause()\n    fun stop()\n}\n\ninterface ICDPlayer{\n\tfun skipTrack()\n    fun eject()\n}\n\nclass CDPlayer : MusicPlayer, ICDPlayer {\n    private var isPlaying = false\n    private var isPaused = false\n    private var currentTrack = \"Track 1\"\n    \n    override fun play() {\n        isPlaying = true\n        isPaused = false\n        println(\"CD Player: Playing $currentTrack\")\n    }\n    \n    override fun pause() {\n        if (isPlaying) {\n            isPaused = true\n            isPlaying = false\n            println(\"CD Player: Paused\")\n        }\n    }\n    \n    override fun stop() {\n        isPlaying = false\n        isPaused = false\n        println(\"CD Player: Stopped\")\n    }\n    \n    override fun skipTrack() {\n        println(\"CD Player: Skipping to next track\")\n        val trackNumber = currentTrack.split(\" \")[1].toInt() + 1\n        currentTrack = \"Track $trackNumber\"\n    }\n    \n    override fun eject() {\n        stop()\n        println(\"CD Player: CD ejected\")\n    }\n}\n\nclass VinylPlayer : MusicPlayer {\n    private var isPlaying = false\n    private var isPaused = false\n    private var currentSong = \"Side A\"\n    \n    override fun play() {\n        isPlaying = true\n        isPaused = false\n        println(\"Vinyl Player: Playing $currentSong\")\n    }\n    \n    override fun pause() {\n        if (isPlaying) {\n            isPaused = true\n            isPlaying = false\n            println(\"Vinyl Player: Paused (needle lifted)\")\n        }\n    }\n    \n    override fun stop() {\n        isPlaying = false\n        isPaused = false\n        println(\"Vinyl Player: Stopped\")\n    }\n    \n}",
            "level": "EASY",
            "language": "KOTLIN",
            "violation": "ISP"
        },
        {
            "input": "interface RestaurantWorker {\n    fun cookFood()\n    fun serveCustomers()\n    fun cleanTables()\n}\n\nclass Chef : RestaurantWorker {\n    override fun cookFood() {\n        println(\"Chef is cooking food.\")\n    }\n\n    override fun serveCustomers() {\n        println(\"Chef does not serve customers.\")\n    }\n\n    override fun cleanTables() {\n        println(\"Chef does not clean tables.\")\n    }\n}\n\nclass Waiter : RestaurantWorker {\n    override fun cookFood() {\n        println(\"Waiter does not cook food.\")\n    }\n\n    override fun serveCustomers() {\n        println(\"Waiter is serving customers.\")\n    }\n\n    override fun cleanTables() {\n        println(\"Waiter is cleaning tables.\")\n    }\n}\n\nclass Cleaner : RestaurantWorker {\n    override fun cookFood() {\n        println(\"Cleaner does not cook food.\")\n    }\n\n    override fun serveCustomers() {\n        println(\"Cleaner does not serve customers.\")\n    }\n\n    override fun cleanTables() {\n        println(\"Cleaner is cleaning tables.\")\n    }\n}",
            "output": "interface IChef {\n    fun cookFood()\n}\ninterface IWaiter {\n    fun serveCustomers()\n}\ninterface ICleaner {\n    fun cleanTables()\n}\n\nclass Chef : IChef {\n    override fun cookFood() {\n        println(\"Chef is cooking food.\")\n    }\n}\n\nclass Waiter : IWaiter, ICleaner {\n    override fun serveCustomers() {\n        println(\"Waiter is serving customers.\")\n    }\n\n    override fun cleanTables() {\n        println(\"Waiter is cleaning tables.\")\n    }\n}\n\nclass Cleaner : ICleaner {\n    override fun cleanTables() {\n        println(\"Cleaner is cleaning tables.\")\n    }\n}",
            "level": "EASY",
            "language": "KOTLIN",
            "violation": "ISP"
        },
        {
            "input": "interface Vehicle {\n    fun start()\n    fun stop()\n    fun fly()\n}\n\nclass Car : Vehicle {\n    override fun start() {\n        println(\"Car engine started\")\n    }\n    \n    override fun stop() {\n        println(\"Car stopped\")\n    }\n    \n    override fun fly() {\n        throw UnsupportedOperationException(\"Car cannot fly\")\n    }\n}\n\nclass Plane : Vehicle {\n    override fun start() {\n        println(\"Plane engines started\")\n    }\n    \n    override fun stop() {\n        println(\"Plane stopped\")\n    }\n    \n    override fun fly() {\n        println(\"Plane is flying\")\n    }\n}\n",
            "output": "interface Vehicle {\n    fun start()\n    fun stop()\n}\n\ninterface IPlane {\n    fun fly()\n}\nclass Car : Vehicle {\n    override fun start() {\n        println(\"Car engine started\")\n    }\n    \n    override fun stop() {\n        println(\"Car stopped\")\n    }\n    \n}\n\nclass Plane : Vehicle, IPlane {\n    override fun start() {\n        println(\"Plane engines started\")\n    }\n    \n    override fun stop() {\n        println(\"Plane stopped\")\n    }\n    \n    override fun fly() {\n        println(\"Plane is flying\")\n    }\n}",
            "level": "EASY",
            "language": "KOTLIN",
            "violation": "ISP"
        },
        {
            "input": "interface GameCharacter {\n    fun meleeAttack()\n    fun castSpell()\n    fun fly()\n    fun defend()\n}\n\ninterface Weapon {\n    fun slash()\n    fun shoot()\n    fun enchant()\n    fun repair()\n}\n\ninterface Enemy {\n    fun attack()\n    fun fly()\n    fun poison()\n    fun summonMinions()\n    fun takeDamage(damageValues: IntArray)\n}\n\nclass Mage(private val name: String, private val level: Int) : GameCharacter {\n    private var mana: Int = 100\n    \n    override fun meleeAttack() {\n        throw UnsupportedOperationException(\"Mage cannot perform melee attacks!\")\n    }\n    \n    override fun castSpell() {\n        if (mana < 10) {\n            println(\"$name is out of mana!\")\n            return\n        }\n        \n        if (level >= 5 && mana >= 30) {\n            println(\"$name casts a powerful lightning storm!\")\n            mana -= 30\n        } else if (level >= 3 && mana >= 20) {\n            println(\"$name casts a fireball spell!\")\n            mana -= 20\n        } else if (mana >= 10) {\n            println(\"$name casts a basic magic missile!\")\n            mana -= 10\n        }\n    }\n    \n    override fun fly() {\n        if (level >= 2) {\n            println(\"$name soars through the air with magic!\")\n        } else {\n            println(\"$name is too inexperienced to fly!\")\n        }\n    }\n    \n    override fun defend() {\n        if (mana >= 15) {\n            println(\"$name creates a magical barrier!\")\n            mana -= 15\n        } else {\n            println(\"$name dodges awkwardly!\")\n        }\n    }\n}\n\nclass Fighter(private val name: String, private val hasWeapon: Boolean) : GameCharacter {\n    private var stamina: Int = 100\n    \n    override fun meleeAttack() {\n        if (stamina < 5) {\n            println(\"$name is too exhausted to fight!\")\n            return\n        }\n        \n        if (hasWeapon) {\n            if (stamina >= 20) {\n                println(\"$name performs a devastating combo attack!\")\n                stamina -= 20\n            } else if (stamina >= 10) {\n                println(\"$name swings weapon with force!\")\n                stamina -= 10\n            } else {\n                println(\"$name makes a weak weapon strike!\")\n                stamina -= 5\n            }\n        } else {\n            if (stamina >= 15) {\n                println(\"$name throws a powerful punch!\")\n                stamina -= 15\n            } else {\n                println(\"$name throws a basic punch!\")\n                stamina -= 5\n            }\n        }\n    }\n    \n    override fun castSpell() {\n        throw UnsupportedOperationException(\"Fighter cannot cast spells!\")\n    }\n    \n    override fun fly() {\n        throw UnsupportedOperationException(\"Fighter cannot fly!\")\n    }\n    \n    override fun defend() {\n        if (hasWeapon && stamina >= 10) {\n            println(\"$name blocks with weapon!\")\n            stamina -= 10\n        } else if (stamina >= 5) {\n            println(\"$name raises arms to defend!\")\n            stamina -= 5\n        } else {\n            println(\"$name barely manages to dodge!\")\n        }\n    }\n}\n\nclass Sword(private var sharpness: Int, private val isMagic: Boolean) : Weapon {\n    \n    override fun slash() {\n        if (sharpness > 70) {\n            println(\"Sword cuts cleanly through the target!\")\n        } else if (sharpness > 30) {\n            println(\"Sword makes a decent cut!\")\n        } else {\n            println(\"Dull sword barely scratches the target!\")\n        }\n    }\n    \n    override fun shoot() {\n        throw UnsupportedOperationException(\"Sword cannot shoot!\")\n    }\n    \n    override fun enchant() {\n        if (isMagic) {\n            println(\"Magical sword glows with enhanced power!\")\n            sharpness += 10\n        } else {\n            throw UnsupportedOperationException(\"Non-magic sword cannot be enchanted!\")\n        }\n    }\n    \n    override fun repair() {\n        if (sharpness < 100) {\n            sharpness = kotlin.math.min(100, sharpness + 25)\n            println(\"Sword has been sharpened and repaired!\")\n        } else {\n            println(\"Sword is already in perfect condition!\")\n        }\n    }\n}\n\nclass Bow(private var arrows: Int, private var range: Int) : Weapon {\n    \n    override fun slash() {\n        throw UnsupportedOperationException(\"Bow cannot slash!\")\n    }\n    \n    override fun shoot() {\n        if (arrows <= 0) {\n            println(\"No arrows left to shoot!\")\n            return\n        }\n        \n        if (range > 80) {\n            println(\"Long-range shot hits the distant target!\")\n        } else if (range > 50) {\n            println(\"Medium-range shot finds its mark!\")\n        } else {\n            println(\"Short-range shot barely reaches the target!\")\n        }\n        arrows--\n    }\n    \n    override fun enchant() {\n        throw UnsupportedOperationException(\"Regular bow cannot be enchanted!\")\n    }\n    \n    override fun repair() {\n        if (range < 100) {\n            range = kotlin.math.min(100, range + 15)\n            println(\"Bow string tightened and wood polished!\")\n        } else {\n            println(\"Bow is in excellent condition!\")\n        }\n    }\n}\n\nclass Orc(private val name: String, private val strength: Int) : Enemy {\n    private var health: Int = 100\n    \n    override fun attack() {\n        if (strength > 50) {\n            println(\"$name delivers a crushing blow!\")\n        } else {\n            println(\"$name swings clumsily!\")\n        }\n    }\n    \n    override fun fly() {\n        throw UnsupportedOperationException(\"Orc cannot fly!\")\n    }\n    \n    override fun poison() {\n        throw UnsupportedOperationException(\"Orc cannot poison enemies!\")\n    }\n    \n    override fun summonMinions() {\n        throw UnsupportedOperationException(\"Orc cannot summon minions!\")\n    }\n    \n    override fun takeDamage(damageValues: IntArray) {\n        var totalDamage = 0\n        for (i in damageValues.indices) {\n            if (damageValues[i] > 0) {\n                totalDamage += damageValues[i]\n                if (damageValues[i] > 20) {\n                    println(\"$name staggers from heavy damage!\")\n                }\n            }\n        }\n        health -= totalDamage\n        println(\"$name takes $totalDamage damage! Health: $health\")\n        \n        if (health <= 0) {\n            println(\"$name has been defeated!\")\n        }\n    }\n}\n\nclass Dragon(private val name: String, private val firepower: Int) : Enemy {\n    private var health: Int = 200\n    private var canFly: Boolean = true\n    \n    override fun attack() {\n        if (firepower > 80) {\n            println(\"$name breathes devastating flames!\")\n        } else if (firepower > 50) {\n            println(\"$name breathes hot fire!\")\n        } else {\n            println(\"$name breathes weak flames!\")\n        }\n    }\n    \n    override fun fly() {\n        if (canFly && health > 50) {\n            println(\"$name soars majestically through the sky!\")\n        } else if (health <= 50) {\n            println(\"$name is too wounded to fly!\")\n        }\n    }\n    \n    override fun poison() {\n        throw UnsupportedOperationException(\"Dragon doesn't use poison!\")\n    }\n    \n    override fun summonMinions() {\n        throw UnsupportedOperationException(\"Dragon doesn't summon minions!\")\n    }\n    \n    override fun takeDamage(damageValues: IntArray) {\n        var totalDamage = 0\n        var criticalHits = 0\n        \n        for (i in damageValues.indices) {\n            if (damageValues[i] > 0) {\n                val reducedDamage = kotlin.math.max(1, damageValues[i] - 5)\n                totalDamage += reducedDamage\n                \n                if (damageValues[i] > 30) {\n                    criticalHits++\n                    println(\"$name roars in pain from critical hit!\")\n                }\n            }\n        }\n        \n        health -= totalDamage\n        println(\"$name takes $totalDamage damage ($criticalHits critical hits)! Health: $health\")\n        \n        if (health <= 0) {\n            println(\"$name crashes to the ground, defeated!\")\n            canFly = false\n        }\n    }\n}\n\nclass Spider(private val name: String) : Enemy {\n    private var health: Int = 50\n    private var hasPoison: Boolean = true\n    \n    override fun attack() {\n        println(\"$name bites with venomous fangs!\")\n    }\n    \n    override fun fly() {\n        throw UnsupportedOperationException(\"Spider cannot fly!\")\n    }\n    \n    override fun poison() {\n        if (hasPoison) {\n            println(\"$name injects deadly venom!\")\n        } else {\n            println(\"$name has no poison left!\")\n        }\n    }\n    \n    override fun summonMinions() {\n        throw UnsupportedOperationException(\"Spider cannot summon minions!\")\n    }\n    \n    override fun takeDamage(damageValues: IntArray) {\n        var totalDamage = 0\n        for (damage in damageValues) {\n            if (damage > 0) {\n                val amplifiedDamage = damage + (damage / 2)\n                totalDamage += amplifiedDamage\n                \n                if (damage > 10) {\n                    println(\"$name screeches in pain!\")\n                }\n            }\n        }\n        \n        health -= totalDamage\n        println(\"$name takes $totalDamage damage! Health: $health\")\n        \n        if (health <= 0) {\n            println(\"$name curls up and dies!\")\n        }\n    }\n}",
            "output": "interface MeleeAttacker {\n    fun meleeAttack()\n}\n\ninterface SpellCaster {\n    fun castSpell()\n}\n\ninterface Flyer {\n    fun fly()\n}\n\ninterface Defender {\n    fun defend()\n}\n\ninterface SlashingWeapon {\n    fun slash()\n}\n\ninterface RangedWeapon {\n    fun shoot()\n}\n\ninterface EnchantableWeapon {\n    fun enchant()\n}\n\ninterface RepairableWeapon {\n    fun repair()\n}\n\ninterface Attacker {\n    fun attack()\n}\n\ninterface Poisoner {\n    fun poison()\n}\n\ninterface MinionSummoner {\n    fun summonMinions()\n}\n\ninterface Damageable {\n    fun takeDamage(damageValues: IntArray)\n}\n\nclass Mage(private val name: String, private val level: Int) : SpellCaster, Flyer, Defender {\n    private var mana: Int = 100\n    \n    override fun castSpell() {\n        if (mana < 10) {\n            println(\"$name is out of mana!\")\n            return\n        }\n        \n        if (level >= 5 && mana >= 30) {\n            println(\"$name casts a powerful lightning storm!\")\n            mana -= 30\n        } else if (level >= 3 && mana >= 20) {\n            println(\"$name casts a fireball spell!\")\n            mana -= 20\n        } else if (mana >= 10) {\n            println(\"$name casts a basic magic missile!\")\n            mana -= 10\n        }\n    }\n    \n    override fun fly() {\n        if (level >= 2) {\n            println(\"$name soars through the air with magic!\")\n        } else {\n            println(\"$name is too inexperienced to fly!\")\n        }\n    }\n    \n    override fun defend() {\n        if (mana >= 15) {\n            println(\"$name creates a magical barrier!\")\n            mana -= 15\n        } else {\n            println(\"$name dodges awkwardly!\")\n        }\n    }\n}\n\nclass Fighter(private val name: String, private val hasWeapon: Boolean) : MeleeAttacker, Defender {\n    private var stamina: Int = 100\n    \n    override fun meleeAttack() {\n        if (stamina < 5) {\n            println(\"$name is too exhausted to fight!\")\n            return\n        }\n        \n        if (hasWeapon) {\n            if (stamina >= 20) {\n                println(\"$name performs a devastating combo attack!\")\n                stamina -= 20\n            } else if (stamina >= 10) {\n                println(\"$name swings weapon with force!\")\n                stamina -= 10\n            } else {\n                println(\"$name makes a weak weapon strike!\")\n                stamina -= 5\n            }\n        } else {\n            if (stamina >= 15) {\n                println(\"$name throws a powerful punch!\")\n                stamina -= 15\n            } else {\n                println(\"$name throws a basic punch!\")\n                stamina -= 5\n            }\n        }\n    }\n    \n    override fun defend() {\n        if (hasWeapon && stamina >= 10) {\n            println(\"$name blocks with weapon!\")\n            stamina -= 10\n        } else if (stamina >= 5) {\n            println(\"$name raises arms to defend!\")\n            stamina -= 5\n        } else {\n            println(\"$name barely manages to dodge!\")\n        }\n    }\n}\n\nclass Sword(private var sharpness: Int, private val isMagic: Boolean) : SlashingWeapon, EnchantableWeapon, RepairableWeapon {\n    \n    override fun slash() {\n        if (sharpness > 70) {\n            println(\"Sword cuts cleanly through the target!\")\n        } else if (sharpness > 30) {\n            println(\"Sword makes a decent cut!\")\n        } else {\n            println(\"Dull sword barely scratches the target!\")\n        }\n    }\n    \n    override fun enchant() {\n        if (isMagic) {\n            println(\"Magical sword glows with enhanced power!\")\n            sharpness += 10\n        } else {\n            throw UnsupportedOperationException(\"Non-magic sword cannot be enchanted!\")\n        }\n    }\n    \n    override fun repair() {\n        if (sharpness < 100) {\n            sharpness = minOf(100, sharpness + 25)\n            println(\"Sword has been sharpened and repaired!\")\n        } else {\n            println(\"Sword is already in perfect condition!\")\n        }\n    }\n}\n\nclass Bow(private var arrows: Int, private var range: Int) : RangedWeapon, RepairableWeapon {\n    \n    override fun shoot() {\n        if (arrows <= 0) {\n            println(\"No arrows left to shoot!\")\n            return\n        }\n        \n        if (range > 80) {\n            println(\"Long-range shot hits the distant target!\")\n        } else if (range > 50) {\n            println(\"Medium-range shot finds its mark!\")\n        } else {\n            println(\"Short-range shot barely reaches the target!\")\n        }\n        arrows--\n    }\n    \n    override fun repair() {\n        if (range < 100) {\n            range = minOf(100, range + 15)\n            println(\"Bow string tightened and wood polished!\")\n        } else {\n            println(\"Bow is in excellent condition!\")\n        }\n    }\n}\n\nclass Orc(private val name: String, private val strength: Int) : Attacker, Damageable {\n    private var health: Int = 100\n    \n    override fun attack() {\n        if (strength > 50) {\n            println(\"$name delivers a crushing blow!\")\n        } else {\n            println(\"$name swings clumsily!\")\n        }\n    }\n    \n    override fun takeDamage(damageValues: IntArray) {\n        var totalDamage = 0\n        for (i in damageValues.indices) {\n            if (damageValues[i] > 0) {\n                totalDamage += damageValues[i]\n                if (damageValues[i] > 20) {\n                    println(\"$name staggers from heavy damage!\")\n                }\n            }\n        }\n        health -= totalDamage\n        println(\"$name takes $totalDamage damage! Health: $health\")\n        \n        if (health <= 0) {\n            println(\"$name has been defeated!\")\n        }\n    }\n}\n\nclass Dragon(private val name: String, private val firepower: Int) : Attacker, Flyer, Damageable {\n    private var health: Int = 200\n    private var canFly: Boolean = true\n    \n    override fun attack() {\n        if (firepower > 80) {\n            println(\"$name breathes devastating flames!\")\n        } else if (firepower > 50) {\n            println(\"$name breathes hot fire!\")\n        } else {\n            println(\"$name breathes weak flames!\")\n        }\n    }\n    \n    override fun fly() {\n        if (canFly && health > 50) {\n            println(\"$name soars majestically through the sky!\")\n        } else if (health <= 50) {\n            println(\"$name is too wounded to fly!\")\n        }\n    }\n    \n    override fun takeDamage(damageValues: IntArray) {\n        var totalDamage = 0\n        var criticalHits = 0\n        \n        for (i in damageValues.indices) {\n            if (damageValues[i] > 0) {\n                val reducedDamage = maxOf(1, damageValues[i] - 5)\n                totalDamage += reducedDamage\n                \n                if (damageValues[i] > 30) {\n                    criticalHits++\n                    println(\"$name roars in pain from critical hit!\")\n                }\n            }\n        }\n        \n        health -= totalDamage\n        println(\"$name takes $totalDamage damage ($criticalHits critical hits)! Health: $health\")\n        \n        if (health <= 0) {\n            println(\"$name crashes to the ground, defeated!\")\n            canFly = false\n        }\n    }\n}\n\nclass Spider(private val name: String) : Attacker, Poisoner, Damageable {\n    private var health: Int = 50\n    private var hasPoison: Boolean = true\n    \n    override fun attack() {\n        println(\"$name bites with venomous fangs!\")\n    }\n    \n    override fun poison() {\n        if (hasPoison) {\n            println(\"$name injects deadly venom!\")\n        } else {\n            println(\"$name has no poison left!\")\n        }\n    }\n    \n    override fun takeDamage(damageValues: IntArray) {\n        var totalDamage = 0\n        for (damage in damageValues) {\n            if (damage > 0) {\n                val amplifiedDamage = damage + (damage / 2)\n                totalDamage += amplifiedDamage\n                \n                if (damage > 10) {\n                    println(\"$name screeches in pain!\")\n                }\n            }\n        }\n        \n        health -= totalDamage\n        println(\"$name takes $totalDamage damage! Health: $health\")\n        \n        if (health <= 0) {\n            println(\"$name curls up and dies!\")\n        }\n    }\n}",
            "level": "HARD",
            "language": "KOTLIN",
            "violation": "ISP"
        },
        {
            "input": "interface MusicPlayer {\n    fun play()\n    fun pause()\n    fun stop()\n    fun skipTrack()\n    fun eject()\n    fun setVolume(volume: Int)\n    fun setEqualizer(preset: String)\n    fun displayTrackInfo()\n    fun shuffle()\n    fun repeat()\n}\n\ninterface AdvancedAudioDevice {\n    fun connectBluetooth()\n    fun disconnectBluetooth()\n    fun pairDevice(deviceName: String)\n    fun enableMicrophone()\n    fun disableMicrophone()\n    fun firmwareUpdate()\n}\n\nclass CDPlayer : MusicPlayer {\n    private var isPlaying = false\n    private var isPaused = false\n    private var currentTrack = \"Track 1\"\n    private var volume = 50\n    private var shuffleMode = false\n    private var repeatMode = false\n\n    override fun play() {\n        isPlaying = true\n        isPaused = false\n        println(\"CD Player: Playing $currentTrack\")\n    }\n\n    override fun pause() {\n        if (isPlaying) {\n            isPaused = true\n            isPlaying = false\n            println(\"CD Player: Paused\")\n        }\n    }\n\n    override fun stop() {\n        isPlaying = false\n        isPaused = false\n        println(\"CD Player: Stopped\")\n    }\n\n    override fun skipTrack() {\n        println(\"CD Player: Skipping to next track\")\n        currentTrack = \"Track \" + (currentTrack.split(\" \")[1].toInt() + 1)\n    }\n\n    override fun eject() {\n        stop()\n        println(\"CD Player: CD ejected\")\n    }\n\n    override fun setVolume(volume: Int) {\n        this.volume = volume\n        println(\"CD Player: Volume set to $volume\")\n    }\n\n    override fun setEqualizer(preset: String) {\n        println(\"CD Player: Equalizer set to $preset\")\n    }\n\n    override fun displayTrackInfo() {\n        println(\"CD Player: Current track - $currentTrack, Volume: $volume\")\n    }\n\n    override fun shuffle() {\n        shuffleMode = !shuffleMode\n        println(\"CD Player: Shuffle \" + if (shuffleMode) \"ON\" else \"OFF\")\n    }\n\n    override fun repeat() {\n        repeatMode = !repeatMode\n        println(\"CD Player: Repeat \" + if (repeatMode) \"ON\" else \"OFF\")\n    }\n}\n\nclass VinylPlayer : MusicPlayer {\n    private var isPlaying = false\n    private var isPaused = false\n    private var currentSong = \"Side A\"\n    private var volume = 50\n\n    override fun play() {\n        isPlaying = true\n        isPaused = false\n        println(\"Vinyl Player: Playing $currentSong\")\n    }\n\n    override fun pause() {\n        if (isPlaying) {\n            isPaused = true\n            isPlaying = false\n            println(\"Vinyl Player: Paused (needle lifted)\")\n        }\n    }\n\n    override fun stop() {\n        isPlaying = false\n        isPaused = false\n        println(\"Vinyl Player: Stopped\")\n    }\n\n    override fun skipTrack() {\n        throw UnsupportedOperationException(\"Vinyl players cannot skip tracks - you must manually move the needle!\")\n    }\n\n    override fun eject() {\n        throw UnsupportedOperationException(\"Vinyl players don't eject - you must manually remove the record!\")\n    }\n\n    override fun setVolume(volume: Int) {\n        this.volume = volume\n        println(\"Vinyl Player: Volume set to $volume\")\n    }\n\n    override fun setEqualizer(preset: String) {\n        throw UnsupportedOperationException(\"Vintage vinyl players don't have digital equalizers!\")\n    }\n\n    override fun displayTrackInfo() {\n        println(\"Vinyl Player: Current side - $currentSong, Volume: $volume\")\n    }\n\n    override fun shuffle() {\n        throw UnsupportedOperationException(\"Cannot shuffle vinyl records!\")\n    }\n\n    override fun repeat() {\n        throw UnsupportedOperationException(\"Vinyl players don't have automatic repeat!\")\n    }\n}\n\nclass Amplifier : MusicPlayer {\n    private var isPoweredOn = false\n    private var volume = 30\n    private var equalizerSetting = \"Flat\"\n    private var bassBoost = false\n\n    override fun play() {\n        throw UnsupportedOperationException(\"Amplifiers don't play music - they amplify audio signals!\")\n    }\n\n    override fun pause() {\n        throw UnsupportedOperationException(\"Amplifiers don't control playback!\")\n    }\n\n    override fun stop() {\n        isPoweredOn = false\n        println(\"Amplifier: Powered OFF\")\n    }\n\n    override fun skipTrack() {\n        throw UnsupportedOperationException(\"Amplifiers don't control track selection!\")\n    }\n\n    override fun eject() {\n        throw UnsupportedOperationException(\"Amplifiers don't have media to eject!\")\n    }\n\n    override fun setVolume(volume: Int) {\n        this.volume = when {\n            volume < 0 -> 0\n            volume > 100 -> 100\n            else -> volume\n        }\n        if (this.volume > 80) {\n            println(\"Amplifier: Warning - High volume!\")\n        }\n        println(\"Amplifier: Master volume set to ${this.volume}\")\n    }\n\n    override fun setEqualizer(preset: String) {\n        equalizerSetting = when (preset.lowercase()) {\n            \"rock\", \"pop\", \"jazz\", \"classical\" -> preset\n            else -> {\n                println(\"Amplifier: Unknown preset. Defaulting to Flat.\")\n                \"Flat\"\n            }\n        }\n        if (equalizerSetting != \"Flat\" || preset.lowercase() in listOf(\"rock\", \"pop\", \"jazz\", \"classical\")) {\n            println(\"Amplifier: Equalizer set to $equalizerSetting\")\n        }\n    }\n\n    override fun displayTrackInfo() {\n        throw UnsupportedOperationException(\"Amplifiers don't track music information!\")\n    }\n\n    override fun shuffle() {\n        throw UnsupportedOperationException(\"Amplifiers don't control playback modes!\")\n    }\n\n    override fun repeat() {\n        throw UnsupportedOperationException(\"Amplifiers don't control playback modes!\")\n    }\n\n    fun powerOn() {\n        isPoweredOn = true\n        println(\"Amplifier: Powered ON\")\n    }\n\n    fun setBassBoost(enabled: Boolean) {\n        bassBoost = enabled\n        println(\"Amplifier: Bass boost \" + if (enabled) \"ON\" else \"OFF\")\n    }\n}\n\nclass BluetoothSpeaker : MusicPlayer, AdvancedAudioDevice {\n    private var isConnected = false\n    private var volume = 50\n\n    override fun play() {\n        if (isConnected) {\n            println(\"Bluetooth Speaker: Playing audio\")\n        } else {\n            throw IllegalStateException(\"Bluetooth Speaker not connected\")\n        }\n    }\n\n    override fun pause() {\n        println(\"Bluetooth Speaker: Paused\")\n    }\n\n    override fun stop() {\n        println(\"Bluetooth Speaker: Stopped\")\n    }\n\n    override fun skipTrack() {\n        println(\"Bluetooth Speaker: Skipping track\")\n    }\n\n    override fun eject() {\n        throw UnsupportedOperationException(\"Bluetooth Speakers don't eject media\")\n    }\n\n    override fun setVolume(volume: Int) {\n        if (volume in 0..100) {\n            this.volume = volume\n        }\n        println(\"Bluetooth Speaker: Volume set to ${this.volume}\")\n    }\n\n    override fun setEqualizer(preset: String) {\n        println(\"Bluetooth Speaker: Equalizer set to $preset\")\n    }\n\n    override fun displayTrackInfo() {\n        println(\"Bluetooth Speaker: No track info available\")\n    }\n\n    override fun shuffle() {\n        throw UnsupportedOperationException(\"Bluetooth Speaker doesn't support shuffle mode\")\n    }\n\n    override fun repeat() {\n        throw UnsupportedOperationException(\"Bluetooth Speaker doesn't support repeat mode\")\n    }\n\n    override fun connectBluetooth() {\n        isConnected = true\n        println(\"Bluetooth Speaker: Connected\")\n    }\n\n    override fun disconnectBluetooth() {\n        isConnected = false\n        println(\"Bluetooth Speaker: Disconnected\")\n    }\n\n    override fun pairDevice(deviceName: String) {\n        println(\"Bluetooth Speaker: Paired with $deviceName\")\n    }\n\n    override fun enableMicrophone() {\n        throw UnsupportedOperationException(\"Bluetooth Speaker doesn't support microphone\")\n    }\n\n    override fun disableMicrophone() {\n        throw UnsupportedOperationException(\"Bluetooth Speaker doesn't support microphone\")\n    }\n\n    override fun firmwareUpdate() {\n        println(\"Bluetooth Speaker: Firmware updated\")\n    }\n}\n\nclass BluetoothHeadphones : MusicPlayer, AdvancedAudioDevice {\n    private var isConnected = false\n    private var micEnabled = false\n    private var volume = 30\n\n    override fun play() {\n        println(\"Bluetooth Headphones: Playing\")\n    }\n\n    override fun pause() {\n        println(\"Bluetooth Headphones: Paused\")\n    }\n\n    override fun stop() {\n        println(\"Bluetooth Headphones: Stopped\")\n    }\n\n    override fun skipTrack() {\n        println(\"Bluetooth Headphones: Track skipped\")\n    }\n\n    override fun eject() {\n        throw UnsupportedOperationException(\"Bluetooth Headphones don't eject media\")\n    }\n\n    override fun setVolume(volume: Int) {\n        this.volume = when {\n            volume < 0 -> 0\n            volume > 100 -> 100\n            else -> volume\n        }\n        println(\"Bluetooth Headphones: Volume set to ${this.volume}\")\n    }\n\n    override fun setEqualizer(preset: String) {\n        println(\"Bluetooth Headphones: Equalizer set to $preset\")\n    }\n\n    override fun displayTrackInfo() {\n        println(\"Bluetooth Headphones: Track info unavailable\")\n    }\n\n    override fun shuffle() {\n        println(\"Bluetooth Headphones: Shuffle not supported\")\n    }\n\n    override fun repeat() {\n        println(\"Bluetooth Headphones: Repeat not supported\")\n    }\n\n    override fun connectBluetooth() {\n        isConnected = true\n        println(\"Bluetooth Headphones: Connected\")\n    }\n\n    override fun disconnectBluetooth() {\n        isConnected = false\n        println(\"Bluetooth Headphones: Disconnected\")\n    }\n\n    override fun pairDevice(deviceName: String) {\n        println(\"Bluetooth Headphones: Paired with $deviceName\")\n    }\n\n    override fun enableMicrophone() {\n        micEnabled = true\n        println(\"Bluetooth Headphones: Microphone enabled\")\n    }\n\n    override fun disableMicrophone() {\n        micEnabled = false\n        println(\"Bluetooth Headphones: Microphone disabled\")\n    }\n\n    override fun firmwareUpdate() {\n        println(\"Bluetooth Headphones: Firmware updated\")\n    }\n}",
            "output": "interface PlaybackController {\n    fun play()\n    fun pause()\n    fun stop()\n}\n\ninterface TrackController {\n    fun skipTrack()\n}\n\ninterface MediaEjector {\n    fun eject()\n}\n\ninterface VolumeController {\n    fun setVolume(volume: Int)\n}\n\ninterface EqualizerController {\n    fun setEqualizer(preset: String)\n}\n\ninterface TrackInfoDisplay {\n    fun displayTrackInfo()\n}\n\ninterface PlaybackModeController {\n    fun shuffle()\n    fun repeat()\n}\n\ninterface BluetoothConnector {\n    fun connectBluetooth()\n    fun disconnectBluetooth()\n    fun pairDevice(deviceName: String)\n}\n\ninterface MicrophoneController {\n    fun enableMicrophone()\n    fun disableMicrophone()\n}\n\ninterface FirmwareUpdatable {\n    fun firmwareUpdate()\n}\n\nclass CDPlayer : PlaybackController, TrackController, MediaEjector, VolumeController, EqualizerController, TrackInfoDisplay, PlaybackModeController {\n    private var isPlaying = false\n    private var isPaused = false\n    private var currentTrack = \"Track 1\"\n    private var volume = 50\n    private var shuffleMode = false\n    private var repeatMode = false\n\n    override fun play() {\n        isPlaying = true\n        isPaused = false\n        println(\"CD Player: Playing $currentTrack\")\n    }\n\n    override fun pause() {\n        if (isPlaying) {\n            isPaused = true\n            isPlaying = false\n            println(\"CD Player: Paused\")\n        }\n    }\n\n    override fun stop() {\n        isPlaying = false\n        isPaused = false\n        println(\"CD Player: Stopped\")\n    }\n\n    override fun skipTrack() {\n        println(\"CD Player: Skipping to next track\")\n        currentTrack = \"Track \" + (currentTrack.split(\" \")[1].toInt() + 1)\n    }\n\n    override fun eject() {\n        stop()\n        println(\"CD Player: CD ejected\")\n    }\n\n    override fun setVolume(volume: Int) {\n        this.volume = volume\n        println(\"CD Player: Volume set to $volume\")\n    }\n\n    override fun setEqualizer(preset: String) {\n        println(\"CD Player: Equalizer set to $preset\")\n    }\n\n    override fun displayTrackInfo() {\n        println(\"CD Player: Current track - $currentTrack, Volume: $volume\")\n    }\n\n    override fun shuffle() {\n        shuffleMode = !shuffleMode\n        println(\"CD Player: Shuffle \" + if (shuffleMode) \"ON\" else \"OFF\")\n    }\n\n    override fun repeat() {\n        repeatMode = !repeatMode\n        println(\"CD Player: Repeat \" + if (repeatMode) \"ON\" else \"OFF\")\n    }\n}\n\nclass VinylPlayer : PlaybackController, VolumeController, TrackInfoDisplay {\n    private var isPlaying = false\n    private var isPaused = false\n    private var currentSong = \"Side A\"\n    private var volume = 50\n\n    override fun play() {\n        isPlaying = true\n        isPaused = false\n        println(\"Vinyl Player: Playing $currentSong\")\n    }\n\n    override fun pause() {\n        if (isPlaying) {\n            isPaused = true\n            isPlaying = false\n            println(\"Vinyl Player: Paused (needle lifted)\")\n        }\n    }\n\n    override fun stop() {\n        isPlaying = false\n        isPaused = false\n        println(\"Vinyl Player: Stopped\")\n    }\n\n    override fun setVolume(volume: Int) {\n        this.volume = volume\n        println(\"Vinyl Player: Volume set to $volume\")\n    }\n\n    override fun displayTrackInfo() {\n        println(\"Vinyl Player: Current side - $currentSong, Volume: $volume\")\n    }\n}\n\nclass Amplifier : VolumeController, EqualizerController {\n    private var isPoweredOn = false\n    private var volume = 30\n    private var equalizerSetting = \"Flat\"\n    private var bassBoost = false\n\n    fun stop() {\n        isPoweredOn = false\n        println(\"Amplifier: Powered OFF\")\n    }\n\n    override fun setVolume(volume: Int) {\n        this.volume = when {\n            volume < 0 -> 0\n            volume > 100 -> 100\n            else -> volume\n        }\n        if (this.volume > 80) {\n            println(\"Amplifier: Warning - High volume!\")\n        }\n        println(\"Amplifier: Master volume set to ${this.volume}\")\n    }\n\n    override fun setEqualizer(preset: String) {\n        when (preset.toLowerCase()) {\n            \"rock\", \"pop\", \"jazz\", \"classical\" -> {\n                equalizerSetting = preset\n            }\n            else -> {\n                equalizerSetting = \"Flat\"\n                println(\"Amplifier: Unknown preset. Defaulting to Flat.\")\n                return\n            }\n        }\n        println(\"Amplifier: Equalizer set to $equalizerSetting\")\n    }\n\n    fun powerOn() {\n        isPoweredOn = true\n        println(\"Amplifier: Powered ON\")\n    }\n\n    fun setBassBoost(enabled: Boolean) {\n        this.bassBoost = enabled\n        println(\"Amplifier: Bass boost \" + if (enabled) \"ON\" else \"OFF\")\n    }\n}\n\nclass BluetoothSpeaker : PlaybackController, TrackController, VolumeController, EqualizerController, TrackInfoDisplay, BluetoothConnector, FirmwareUpdatable {\n    private var isConnected = false\n    private var volume = 50\n\n    override fun play() {\n        if (isConnected) {\n            println(\"Bluetooth Speaker: Playing audio\")\n        } else {\n            throw IllegalStateException(\"Bluetooth Speaker not connected\")\n        }\n    }\n\n    override fun pause() {\n        println(\"Bluetooth Speaker: Paused\")\n    }\n\n    override fun stop() {\n        println(\"Bluetooth Speaker: Stopped\")\n    }\n\n    override fun skipTrack() {\n        println(\"Bluetooth Speaker: Skipping track\")\n    }\n\n    override fun setVolume(volume: Int) {\n        if (volume in 0..100) {\n            this.volume = volume\n        }\n        println(\"Bluetooth Speaker: Volume set to ${this.volume}\")\n    }\n\n    override fun setEqualizer(preset: String) {\n        println(\"Bluetooth Speaker: Equalizer set to $preset\")\n    }\n\n    override fun displayTrackInfo() {\n        println(\"Bluetooth Speaker: No track info available\")\n    }\n\n    override fun connectBluetooth() {\n        isConnected = true\n        println(\"Bluetooth Speaker: Connected\")\n    }\n\n    override fun disconnectBluetooth() {\n        isConnected = false\n        println(\"Bluetooth Speaker: Disconnected\")\n    }\n\n    override fun pairDevice(deviceName: String) {\n        println(\"Bluetooth Speaker: Paired with $deviceName\")\n    }\n\n    override fun firmwareUpdate() {\n        println(\"Bluetooth Speaker: Firmware updated\")\n    }\n}\n\nclass BluetoothHeadphones : PlaybackController, TrackController, VolumeController, EqualizerController, TrackInfoDisplay, BluetoothConnector, MicrophoneController, FirmwareUpdatable {\n    private var isConnected = false\n    private var micEnabled = false\n    private var volume = 30\n\n    override fun play() {\n        println(\"Bluetooth Headphones: Playing\")\n    }\n\n    override fun pause() {\n        println(\"Bluetooth Headphones: Paused\")\n    }\n\n    override fun stop() {\n        println(\"Bluetooth Headphones: Stopped\")\n    }\n\n    override fun skipTrack() {\n        println(\"Bluetooth Headphones: Track skipped\")\n    }\n\n    override fun setVolume(volume: Int) {\n        this.volume = when {\n            volume < 0 -> 0\n            volume > 100 -> 100\n            else -> volume\n        }\n        println(\"Bluetooth Headphones: Volume set to ${this.volume}\")\n    }\n\n    override fun setEqualizer(preset: String) {\n        println(\"Bluetooth Headphones: Equalizer set to $preset\")\n    }\n\n    override fun displayTrackInfo() {\n        println(\"Bluetooth Headphones: Track info unavailable\")\n    }\n\n    override fun connectBluetooth() {\n        isConnected = true\n        println(\"Bluetooth Headphones: Connected\")\n    }\n\n    override fun disconnectBluetooth() {\n        isConnected = false\n        println(\"Bluetooth Headphones: Disconnected\")\n    }\n\n    override fun pairDevice(deviceName: String) {\n        println(\"Bluetooth Headphones: Paired with $deviceName\")\n    }\n\n    override fun enableMicrophone() {\n        micEnabled = true\n        println(\"Bluetooth Headphones: Microphone enabled\")\n    }\n\n    override fun disableMicrophone() {\n        micEnabled = false\n        println(\"Bluetooth Headphones: Microphone disabled\")\n    }\n\n    override fun firmwareUpdate() {\n        println(\"Bluetooth Headphones: Firmware updated\")\n    }\n}",
            "level": "HARD",
            "language": "KOTLIN",
            "violation": "ISP"
        },
        {
            "input": "interface RestaurantWorker {\n    fun cookFood()\n    fun serveCustomers()\n    fun cleanTables()\n    fun manageStaff()\n    fun handlePayments()\n    fun orderSupplies()\n    fun trainNewEmployees()\n    fun conductMeetings()\n}\n\ninterface MachineWorker {\n    fun washDishes()\n    fun vacuumFloor()\n    fun selfDiagnose()\n    fun playMusic()\n    fun adjustTemperature()\n    fun securityScan()\n    fun updateSoftware()\n    fun generateReports()\n}\n\nclass Chef : RestaurantWorker {\n    private var mealsCooked = 0\n    private val recipes = arrayOf(\"pasta\", \"pizza\", \"salad\", \"soup\", \"steak\")\n    private val isHeadChef = true\n\n    override fun cookFood() {\n        for (i in recipes.indices) {\n            if (mealsCooked < 50) {\n                if (recipes[i] == \"steak\" && isHeadChef) {\n                    println(\"Head Chef is preparing premium ${recipes[i]}\")\n                    mealsCooked += 2\n                } else if (recipes[i] == \"pasta\" || recipes[i] == \"pizza\") {\n                    println(\"Chef is cooking ${recipes[i]}\")\n                    mealsCooked++\n                } else {\n                    println(\"Chef is preparing simple ${recipes[i]}\")\n                }\n            }\n        }\n    }\n\n    override fun serveCustomers() {\n        println(\"Chef does not serve customers.\")\n    }\n\n    override fun cleanTables() {\n        println(\"Chef does not clean tables.\")\n    }\n\n    override fun manageStaff() {\n        if (isHeadChef) {\n            println(\"Head Chef is managing kitchen staff.\")\n        } else {\n            println(\"Chef does not manage staff.\")\n        }\n    }\n\n    override fun handlePayments() {\n        println(\"Chef does not handle payments.\")\n    }\n\n    override fun orderSupplies() {\n        if (isHeadChef) {\n            for (i in 1..3) {\n                println(\"Head Chef ordering kitchen supplies batch $i\")\n            }\n        } else {\n            println(\"Chef does not order supplies.\")\n        }\n    }\n\n    override fun trainNewEmployees() {\n        println(\"Chef does not train employees.\")\n    }\n\n    override fun conductMeetings() {\n        println(\"Chef does not conduct meetings.\")\n    }\n}\n\nclass Waiter : RestaurantWorker {\n    private var tablesServed = 0\n    private val isExperienced = false\n    private val customerTypes = arrayOf(\"regular\", \"vip\", \"family\", \"business\")\n\n    override fun cookFood() {\n        println(\"Waiter does not cook food.\")\n    }\n\n    override fun serveCustomers() {\n        for (customerType in customerTypes) {\n            if (tablesServed < 20) {\n                if (customerType == \"vip\" && isExperienced) {\n                    println(\"Experienced waiter serving VIP customers\")\n                    tablesServed += 2\n                } else if (customerType == \"family\") {\n                    println(\"Waiter serving family table\")\n                    tablesServed++\n                } else if (customerType == \"business\") {\n                    for (i in 1..2) {\n                        println(\"Waiter taking business order $i\")\n                    }\n                    tablesServed++\n                } else {\n                    println(\"Waiter serving $customerType customers\")\n                    tablesServed++\n                }\n            }\n        }\n    }\n\n    override fun cleanTables() {\n        for (table in 1..10) {\n            if (table % 2 == 0) {\n                println(\"Waiter cleaning table $table thoroughly\")\n            } else if (table > 5) {\n                println(\"Waiter quick clean table $table\")\n            } else {\n                println(\"Waiter wiping table $table\")\n            }\n        }\n    }\n\n    override fun manageStaff() {\n        println(\"Waiter does not manage staff.\")\n    }\n\n    override fun handlePayments() {\n        println(\"Waiter does not handle payments.\")\n    }\n\n    override fun orderSupplies() {\n        println(\"Waiter does not order supplies.\")\n    }\n\n    override fun trainNewEmployees() {\n        println(\"Waiter does not train employees.\")\n    }\n\n    override fun conductMeetings() {\n        println(\"Waiter does not conduct meetings.\")\n    }\n}\n\nclass Manager : RestaurantWorker {\n    private val conflict = true\n    private val teamSize = 15\n    private val departments = arrayOf(\"kitchen\", \"service\", \"cleaning\", \"security\")\n    private val isBusy = false\n\n    override fun cookFood() {\n        println(\"Manager does not cook.\")\n    }\n\n    override fun serveCustomers() {\n        println(\"Manager does not serve.\")\n    }\n\n    override fun cleanTables() {\n        println(\"Manager does not clean.\")\n    }\n\n    override fun manageStaff() {\n        for (dept in departments) {\n            if (conflict && dept == \"kitchen\") {\n                println(\"Manager resolving kitchen conflict\")\n            } else if (teamSize > 10 && dept == \"service\") {\n                for (i in 1..3) {\n                    println(\"Manager scheduling service team shift $i\")\n                }\n            } else if (dept == \"security\" && !isBusy) {\n                println(\"Manager checking security protocols\")\n            } else {\n                println(\"Manager overseeing $dept department\")\n            }\n        }\n    }\n\n    override fun handlePayments() {\n        for (transaction in 1..5) {\n            if (transaction > 3) {\n                println(\"Manager approving large payment $transaction\")\n            } else {\n                println(\"Manager processing payment $transaction\")\n            }\n        }\n    }\n\n    override fun orderSupplies() {\n        println(\"Manager coordinating supply orders\")\n    }\n\n    override fun trainNewEmployees() {\n        println(\"Manager conducting orientation\")\n    }\n\n    override fun conductMeetings() {\n        println(\"Manager leading staff meetings\")\n    }\n}\n\nclass Cashier : RestaurantWorker {\n    private var dailyRevenue = 0.0\n    private var customersServed = 0\n\n    override fun cookFood() {\n        println(\"Cashier does not cook food.\")\n    }\n\n    override fun serveCustomers() {\n        println(\"Cashier does not serve at tables.\")\n    }\n\n    override fun cleanTables() {\n        println(\"Cashier does not clean tables.\")\n    }\n\n    override fun manageStaff() {\n        println(\"Cashier does not manage staff.\")\n    }\n\n    override fun handlePayments() {\n        val payments = doubleArrayOf(15.50, 23.75, 45.00, 12.25, 67.80)\n        for (payment in payments) {\n            if (payment > 50.00) {\n                println(\"Cashier processing large payment: $$payment\")\n                dailyRevenue += payment * 1.1\n            } else if (payment < 20.00) {\n                println(\"Cashier handling small payment: $$payment\")\n                dailyRevenue += payment\n            } else {\n                println(\"Cashier processing payment: $$payment\")\n                dailyRevenue += payment\n            }\n            customersServed++\n        }\n    }\n\n    override fun orderSupplies() {\n        println(\"Cashier does not order supplies.\")\n    }\n\n    override fun trainNewEmployees() {\n        println(\"Cashier does not train employees.\")\n    }\n\n    override fun conductMeetings() {\n        println(\"Cashier does not conduct meetings.\")\n    }\n}\n\nclass Dishwasher : MachineWorker {\n    var dirtyItems = 25\n    val isIndustrialGrade = true\n    val dishTypes = arrayOf(\"plates\", \"cups\", \"utensils\", \"pots\")\n\n    override fun washDishes() {\n        for (dishType in dishTypes) {\n            if (dirtyItems > 0) {\n                if (dishType == \"pots\" && isIndustrialGrade) {\n                    for (cycle in 1..3) {\n                        println(\"Industrial dishwasher cleaning $dishType cycle $cycle\")\n                        dirtyItems -= 2\n                    }\n                } else if (dishType == \"plates\" || dishType == \"cups\") {\n                    println(\"Dishwasher cleaning $dirtyItems $dishType\")\n                    dirtyItems -= 5\n                } else {\n                    println(\"Dishwasher processing $dishType\")\n                    dirtyItems -= 3\n                }\n            } else {\n                println(\"No $dishType to clean.\")\n            }\n        }\n    }\n\n    override fun vacuumFloor() {\n        println(\"Dishwasher cannot vacuum the floor.\")\n    }\n\n    override fun selfDiagnose() {\n        for (system in 1..4) {\n            if (system == 1) {\n                println(\"Dishwasher checking water system\")\n            } else if (system == 2) {\n                println(\"Dishwasher testing heating element\")\n            } else {\n                println(\"Dishwasher running diagnostic $system\")\n            }\n        }\n    }\n\n    override fun playMusic() {\n        println(\"Dishwasher cannot play music.\")\n    }\n\n    override fun adjustTemperature() {\n        println(\"Dishwasher cannot adjust room temperature.\")\n    }\n\n    override fun securityScan() {\n        println(\"Dishwasher cannot perform security scan.\")\n    }\n\n    override fun updateSoftware() {\n        println(\"Dishwasher cannot update software.\")\n    }\n\n    override fun generateReports() {\n        println(\"Dishwasher cannot generate reports.\")\n    }\n}\n\nclass VacuumCleaner : MachineWorker {\n    val isCharged = false\n    var batteryLevel = 30\n    val cleaningModes = arrayOf(\"eco\", \"normal\", \"turbo\")\n\n    override fun washDishes() {\n        println(\"Vacuum cleaner cannot wash dishes.\")\n    }\n\n    override fun vacuumFloor() {\n        for (mode in cleaningModes) {\n            if (isCharged || batteryLevel > 20) {\n                if (mode == \"turbo\" && batteryLevel > 50) {\n                    println(\"Vacuum cleaner using turbo mode\")\n                    batteryLevel -= 15\n                } else if (mode == \"normal\" && batteryLevel > 30) {\n                    for (room in 1..3) {\n                        println(\"Vacuum cleaning room $room in normal mode\")\n                    }\n                    batteryLevel -= 10\n                } else if (mode == \"eco\") {\n                    println(\"Vacuum using eco mode to save battery\")\n                    batteryLevel -= 5\n                } else {\n                    println(\"Battery too low for $mode mode\")\n                }\n            } else {\n                println(\"Vacuum cleaner battery critically low\")\n            }\n        }\n    }\n\n    override fun selfDiagnose() {\n        println(\"Vacuum cleaner running diagnostics.\")\n    }\n\n    override fun playMusic() {\n        println(\"Vacuum cleaner cannot play music.\")\n    }\n\n    override fun adjustTemperature() {\n        println(\"Vacuum cleaner cannot adjust temperature.\")\n    }\n\n    override fun securityScan() {\n        println(\"Vacuum cleaner cannot perform security scan.\")\n    }\n\n    override fun updateSoftware() {\n        println(\"Vacuum cleaner cannot update software.\")\n    }\n\n    override fun generateReports() {\n        println(\"Vacuum cleaner cannot generate reports.\")\n    }\n}\n\nclass SmartKiosk : MachineWorker {\n    val isOnline = true\n    var customerInteractions = 0\n    val services = arrayOf(\"orders\", \"payments\", \"information\", \"entertainment\")\n\n    override fun washDishes() {\n        println(\"Smart kiosk cannot wash dishes.\")\n    }\n\n    override fun vacuumFloor() {\n        println(\"Smart kiosk cannot vacuum floor.\")\n    }\n\n    override fun selfDiagnose() {\n        for (component in 1..5) {\n            if (component == 1) {\n                println(\"Kiosk checking network connection\")\n            } else if (component == 2 && isOnline) {\n                println(\"Kiosk testing payment processor\")\n            } else if (component > 3) {\n                println(\"Kiosk running system check $component\")\n            } else {\n                println(\"Kiosk diagnostic component $component\")\n            }\n        }\n    }\n\n    override fun playMusic() {\n        for (service in services) {\n            if (service == \"entertainment\" && customerInteractions < 50) {\n                for (playlist in 1..3) {\n                    println(\"Kiosk playing background music playlist $playlist\")\n                }\n            } else if (service == \"information\") {\n                println(\"Kiosk providing audio information\")\n            }\n        }\n    }\n\n    override fun adjustTemperature() {\n        println(\"Smart kiosk cannot adjust temperature.\")\n    }\n\n    override fun securityScan() {\n        if (isOnline) {\n            println(\"Kiosk performing security scan\")\n        } else {\n            println(\"Kiosk offline - cannot scan\")\n        }\n    }\n\n    override fun updateSoftware() {\n        println(\"Kiosk updating software\")\n    }\n\n    override fun generateReports() {\n        println(\"Kiosk generating usage reports\")\n    }\n}\n\nclass SecurityBot : MachineWorker {\n    val isPatrolling = true\n    val alertLevel = 2\n    val zones = arrayOf(\"entrance\", \"dining\", \"kitchen\", \"storage\")\n\n    override fun washDishes() {\n        println(\"Security bot cannot wash dishes.\")\n    }\n\n    override fun vacuumFloor() {\n        println(\"Security bot cannot vacuum floor.\")\n    }\n\n    override fun selfDiagnose() {\n        println(\"Security bot running diagnostics.\")\n    }\n\n    override fun playMusic() {\n        println(\"Security bot cannot play music.\")\n    }\n\n    override fun adjustTemperature() {\n        println(\"Security bot cannot adjust temperature.\")\n    }\n\n    override fun securityScan() {\n        for (zone in zones) {\n            if (isPatrolling && alertLevel > 1) {\n                if (zone == \"entrance\" || zone == \"storage\") {\n                    for (scan in 1..2) {\n                        println(\"Security bot high-priority scan $zone pass $scan\")\n                    }\n                } else if (alertLevel > 3) {\n                    println(\"Security bot emergency scan $zone\")\n                } else {\n                    println(\"Security bot scanning $zone\")\n                }\n            }\n        }\n    }\n\n    override fun updateSoftware() {\n        println(\"Security bot updating patrol algorithms\")\n    }\n\n    override fun generateReports() {\n        println(\"Security bot generating incident reports\")\n    }\n}",
            "output": "interface FoodPreparation {\n    fun cookFood()\n}\n\ninterface CustomerService {\n    fun serveCustomers()\n}\n\ninterface Cleaning {\n    fun cleanTables()\n}\n\ninterface StaffManagement {\n    fun manageStaff()\n}\n\ninterface PaymentProcessing {\n    fun handlePayments()\n}\n\ninterface SupplyManagement {\n    fun orderSupplies()\n}\n\ninterface Training {\n    fun trainNewEmployees()\n}\n\ninterface MeetingManagement {\n    fun conductMeetings()\n}\n\ninterface DishWashing {\n    fun washDishes()\n}\n\ninterface FloorCleaning {\n    fun vacuumFloor()\n}\n\ninterface SelfDiagnostics {\n    fun selfDiagnose()\n}\n\ninterface Entertainment {\n    fun playMusic()\n}\n\ninterface TemperatureControl {\n    fun adjustTemperature()\n}\n\ninterface SecurityOperations {\n    fun securityScan()\n}\n\ninterface SoftwareManagement {\n    fun updateSoftware()\n}\n\ninterface ReportGeneration {\n    fun generateReports()\n}\n\nclass Chef : FoodPreparation, StaffManagement, SupplyManagement {\n    private var mealsCooked = 0\n    private val recipes = arrayOf(\"pasta\", \"pizza\", \"salad\", \"soup\", \"steak\")\n    private val isHeadChef = true\n\n    override fun cookFood() {\n        for (i in recipes.indices) {\n            if (mealsCooked < 50) {\n                if (recipes[i] == \"steak\" && isHeadChef) {\n                    println(\"Head Chef is preparing premium ${recipes[i]}\")\n                    mealsCooked += 2\n                } else if (recipes[i] == \"pasta\" || recipes[i] == \"pizza\") {\n                    println(\"Chef is cooking ${recipes[i]}\")\n                    mealsCooked++\n                } else {\n                    println(\"Chef is preparing simple ${recipes[i]}\")\n                }\n            }\n        }\n    }\n\n    override fun manageStaff() {\n        if (isHeadChef) {\n            println(\"Head Chef is managing kitchen staff.\")\n        } else {\n            println(\"Chef does not manage staff.\")\n        }\n    }\n\n    override fun orderSupplies() {\n        if (isHeadChef) {\n            for (i in 1..3) {\n                println(\"Head Chef ordering kitchen supplies batch $i\")\n            }\n        } else {\n            println(\"Chef does not order supplies.\")\n        }\n    }\n}\n\nclass Waiter : CustomerService, Cleaning {\n    private var tablesServed = 0\n    private val isExperienced = false\n    private val customerTypes = arrayOf(\"regular\", \"vip\", \"family\", \"business\")\n\n    override fun serveCustomers() {\n        for (customerType in customerTypes) {\n            if (tablesServed < 20) {\n                if (customerType == \"vip\" && isExperienced) {\n                    println(\"Experienced waiter serving VIP customers\")\n                    tablesServed += 2\n                } else if (customerType == \"family\") {\n                    println(\"Waiter serving family table\")\n                    tablesServed++\n                } else if (customerType == \"business\") {\n                    for (i in 1..2) {\n                        println(\"Waiter taking business order $i\")\n                    }\n                    tablesServed++\n                } else {\n                    println(\"Waiter serving $customerType customers\")\n                    tablesServed++\n                }\n            }\n        }\n    }\n\n    override fun cleanTables() {\n        for (table in 1..10) {\n            if (table % 2 == 0) {\n                println(\"Waiter cleaning table $table thoroughly\")\n            } else if (table > 5) {\n                println(\"Waiter quick clean table $table\")\n            } else {\n                println(\"Waiter wiping table $table\")\n            }\n        }\n    }\n}\n\nclass Manager : StaffManagement, PaymentProcessing, SupplyManagement, Training, MeetingManagement {\n    private val conflict = true\n    private val teamSize = 15\n    private val departments = arrayOf(\"kitchen\", \"service\", \"cleaning\", \"security\")\n    private val isBusy = false\n\n    override fun manageStaff() {\n        for (dept in departments) {\n            if (conflict && dept == \"kitchen\") {\n                println(\"Manager resolving kitchen conflict\")\n            } else if (teamSize > 10 && dept == \"service\") {\n                for (i in 1..3) {\n                    println(\"Manager scheduling service team shift $i\")\n                }\n            } else if (dept == \"security\" && !isBusy) {\n                println(\"Manager checking security protocols\")\n            } else {\n                println(\"Manager overseeing $dept department\")\n            }\n        }\n    }\n\n    override fun handlePayments() {\n        for (transaction in 1..5) {\n            if (transaction > 3) {\n                println(\"Manager approving large payment $transaction\")\n            } else {\n                println(\"Manager processing payment $transaction\")\n            }\n        }\n    }\n\n    override fun orderSupplies() {\n        println(\"Manager coordinating supply orders\")\n    }\n\n    override fun trainNewEmployees() {\n        println(\"Manager conducting orientation\")\n    }\n\n    override fun conductMeetings() {\n        println(\"Manager leading staff meetings\")\n    }\n}\n\nclass Cashier : PaymentProcessing {\n    private var dailyRevenue = 0.0\n    private var customersServed = 0\n\n    override fun handlePayments() {\n        val payments = doubleArrayOf(15.50, 23.75, 45.00, 12.25, 67.80)\n        for (payment in payments) {\n            if (payment > 50.00) {\n                println(\"Cashier processing large payment: $$payment\")\n                dailyRevenue += payment * 1.1\n            } else if (payment < 20.00) {\n                println(\"Cashier handling small payment: $$payment\")\n                dailyRevenue += payment\n            } else {\n                println(\"Cashier processing payment: $$payment\")\n                dailyRevenue += payment\n            }\n            customersServed++\n        }\n    }\n}\n\nclass Dishwasher : DishWashing, SelfDiagnostics {\n    var dirtyItems = 25\n    val isIndustrialGrade = true\n    val dishTypes = arrayOf(\"plates\", \"cups\", \"utensils\", \"pots\")\n\n    override fun washDishes() {\n        for (dishType in dishTypes) {\n            if (dirtyItems > 0) {\n                if (dishType == \"pots\" && isIndustrialGrade) {\n                    for (cycle in 1..3) {\n                        println(\"Industrial dishwasher cleaning $dishType cycle $cycle\")\n                        dirtyItems -= 2\n                    }\n                } else if (dishType == \"plates\" || dishType == \"cups\") {\n                    println(\"Dishwasher cleaning $dirtyItems $dishType\")\n                    dirtyItems -= 5\n                } else {\n                    println(\"Dishwasher processing $dishType\")\n                    dirtyItems -= 3\n                }\n            } else {\n                println(\"No $dishType to clean.\")\n            }\n        }\n    }\n\n    override fun selfDiagnose() {\n        for (system in 1..4) {\n            if (system == 1) {\n                println(\"Dishwasher checking water system\")\n            } else if (system == 2) {\n                println(\"Dishwasher testing heating element\")\n            } else {\n                println(\"Dishwasher running diagnostic $system\")\n            }\n        }\n    }\n}\n\nclass VacuumCleaner : FloorCleaning, SelfDiagnostics {\n    val isCharged = false\n    var batteryLevel = 30\n    val cleaningModes = arrayOf(\"eco\", \"normal\", \"turbo\")\n\n    override fun vacuumFloor() {\n        for (mode in cleaningModes) {\n            if (isCharged || batteryLevel > 20) {\n                if (mode == \"turbo\" && batteryLevel > 50) {\n                    println(\"Vacuum cleaner using turbo mode\")\n                    batteryLevel -= 15\n                } else if (mode == \"normal\" && batteryLevel > 30) {\n                    for (room in 1..3) {\n                        println(\"Vacuum cleaning room $room in normal mode\")\n                    }\n                    batteryLevel -= 10\n                } else if (mode == \"eco\") {\n                    println(\"Vacuum using eco mode to save battery\")\n                    batteryLevel -= 5\n                } else {\n                    println(\"Battery too low for $mode mode\")\n                }\n            } else {\n                println(\"Vacuum cleaner battery critically low\")\n            }\n        }\n    }\n\n    override fun selfDiagnose() {\n        println(\"Vacuum cleaner running diagnostics.\")\n    }\n}\n\nclass SmartKiosk : SelfDiagnostics, Entertainment, SecurityOperations, SoftwareManagement, ReportGeneration {\n    val isOnline = true\n    var customerInteractions = 0\n    val services = arrayOf(\"orders\", \"payments\", \"information\", \"entertainment\")\n\n    override fun selfDiagnose() {\n        for (component in 1..5) {\n            if (component == 1) {\n                println(\"Kiosk checking network connection\")\n            } else if (component == 2 && isOnline) {\n                println(\"Kiosk testing payment processor\")\n            } else if (component > 3) {\n                println(\"Kiosk running system check $component\")\n            } else {\n                println(\"Kiosk diagnostic component $component\")\n            }\n        }\n    }\n\n    override fun playMusic() {\n        for (service in services) {\n            if (service == \"entertainment\" && customerInteractions < 50) {\n                for (playlist in 1..3) {\n                    println(\"Kiosk playing background music playlist $playlist\")\n                }\n            } else if (service == \"information\") {\n                println(\"Kiosk providing audio information\")\n            }\n        }\n    }\n\n    override fun securityScan() {\n        if (isOnline) {\n            println(\"Kiosk performing security scan\")\n        } else {\n            println(\"Kiosk offline - cannot scan\")\n        }\n    }\n\n    override fun updateSoftware() {\n        println(\"Kiosk updating software\")\n    }\n\n    override fun generateReports() {\n        println(\"Kiosk generating usage reports\")\n    }\n}\n\nclass SecurityBot : SelfDiagnostics, SecurityOperations, SoftwareManagement, ReportGeneration {\n    val isPatrolling = true\n    val alertLevel = 2\n    val zones = arrayOf(\"entrance\", \"dining\", \"kitchen\", \"storage\")\n\n    override fun selfDiagnose() {\n        println(\"Security bot running diagnostics.\")\n    }\n\n    override fun securityScan() {\n        for (zone in zones) {\n            if (isPatrolling && alertLevel > 1) {\n                if (zone == \"entrance\" || zone == \"storage\") {\n                    for (scan in 1..2) {\n                        println(\"Security bot high-priority scan $zone pass $scan\")\n                    }\n                } else if (alertLevel > 3) {\n                    println(\"Security bot emergency scan $zone\")\n                } else {\n                    println(\"Security bot scanning $zone\")\n                }\n            }\n        }\n    }\n\n    override fun updateSoftware() {\n        println(\"Security bot updating patrol algorithms\")\n    }\n\n    override fun generateReports() {\n        println(\"Security bot generating incident reports\")\n    }\n}",
            "level": "HARD",
            "language": "KOTLIN",
            "violation": "ISP"
        },
        {
            "input": "interface Vehicle {\n    fun start()\n    fun stop()\n    fun fly()\n    fun dive()\n}\n\ninterface Operator {\n    fun steer()\n    fun navigateAir()\n    fun navigateWater()\n    fun communicateWithTower()\n}\n\ninterface EnergySystem {\n    fun chargeElectrically()\n    fun refuelGasoline()\n    fun refuelDiesel()\n    fun loadNuclearFuel()\n    fun checkBatteryLevel()\n    fun maintainEngine()\n}\n\nclass Driver(private val name: String) : Operator {\n    \n    override fun steer() {\n        if (name.isNotEmpty()) {\n            if (name.length > 5) {\n                println(\"Experienced driver $name steering carefully\")\n            } else {\n                println(\"Driver $name steering\")\n            }\n        }\n    }\n    \n    override fun navigateAir() {\n        throw UnsupportedOperationException(\"Driver cannot navigate air\")\n    }\n    \n    override fun navigateWater() {\n        throw UnsupportedOperationException(\"Driver cannot navigate water\")\n    }\n    \n    override fun communicateWithTower() {\n        throw UnsupportedOperationException(\"Driver cannot communicate with tower\")\n    }\n    \n    fun getName(): String {\n        return name\n    }\n}\n\nclass Pilot(private val name: String) : Operator {\n    \n    override fun steer() {\n        println(\"Pilot $name controlling aircraft\")\n    }\n    \n    override fun navigateAir() {\n        if (name.contains(\"Captain\")) {\n            println(\"Captain pilot navigating complex airspace\")\n        } else if (name.length > 6) {\n            println(\"Experienced pilot navigating airspace\")\n        } else {\n            println(\"Pilot navigating\")\n        }\n    }\n    \n    override fun navigateWater() {\n        throw UnsupportedOperationException(\"Pilot cannot navigate water\")\n    }\n    \n    override fun communicateWithTower() {\n        println(\"Pilot $name communicating with control tower\")\n    }\n    \n    fun getName(): String {\n        return name\n    }\n}\n\nclass Captain(private val name: String) : Operator {\n    \n    override fun steer() {\n        println(\"Captain $name steering submarine\")\n    }\n    \n    override fun navigateAir() {\n        throw UnsupportedOperationException(\"Captain cannot navigate air\")\n    }\n    \n    override fun navigateWater() {\n        if (name.startsWith(\"Captain\")) {\n            println(\"Captain navigating deep waters\")\n        } else {\n            println(\"Naval officer navigating\")\n        }\n    }\n    \n    override fun communicateWithTower() {\n        throw UnsupportedOperationException(\"Captain cannot communicate with tower\")\n    }\n    \n    fun getName(): String {\n        return name\n    }\n}\n\nclass Car(private val driver: Driver, private val energyType: String) : Vehicle, EnergySystem {\n    \n    override fun start() {\n        println(\"$energyType car started by ${driver.getName()}\")\n    }\n    \n    override fun stop() {\n        println(\"Car stopped\")\n    }\n    \n    override fun fly() {\n        throw UnsupportedOperationException(\"Car cannot fly\")\n    }\n    \n    override fun dive() {\n        throw UnsupportedOperationException(\"Car cannot dive\")\n    }\n    \n    override fun chargeElectrically() {\n        if (energyType == \"Electric\") {\n            println(\"Car charging electrically\")\n        } else {\n            throw UnsupportedOperationException(\"Non-electric car cannot charge\")\n        }\n    }\n    \n    override fun refuelGasoline() {\n        if (energyType == \"Gasoline\") {\n            println(\"Car refueling with gasoline\")\n        } else {\n            throw UnsupportedOperationException(\"Non-gasoline car cannot refuel gasoline\")\n        }\n    }\n    \n    override fun refuelDiesel() {\n        throw UnsupportedOperationException(\"Car does not use diesel\")\n    }\n    \n    override fun loadNuclearFuel() {\n        throw UnsupportedOperationException(\"Car cannot use nuclear fuel\")\n    }\n    \n    override fun checkBatteryLevel() {\n        if (energyType == \"Electric\") {\n            println(\"Car battery level: 85%\")\n        } else {\n            throw UnsupportedOperationException(\"Non-electric car has no battery\")\n        }\n    }\n    \n    override fun maintainEngine() {\n        if (energyType == \"Electric\") {\n            println(\"Maintaining electric motor\")\n        } else {\n            println(\"Maintaining combustion engine\")\n        }\n    }\n    \n    fun getOperator(): Driver {\n        return driver\n    }\n}\n\nclass Plane(private val pilot: Pilot, private val energyType: String) : Vehicle, EnergySystem {\n    \n    override fun start() {\n        println(\"$energyType plane engines started by ${pilot.getName()}\")\n    }\n    \n    override fun stop() {\n        println(\"Plane stopped\")\n    }\n    \n    override fun fly() {\n        if (pilot.getName().contains(\"Captain\")) {\n            println(\"Plane flying at cruising altitude with $energyType power\")\n        } else {\n            println(\"Plane flying with $energyType engines\")\n        }\n    }\n    \n    override fun dive() {\n        throw UnsupportedOperationException(\"Plane cannot dive underwater\")\n    }\n    \n    override fun chargeElectrically() {\n        throw UnsupportedOperationException(\"Plane does not charge electrically\")\n    }\n    \n    override fun refuelGasoline() {\n        throw UnsupportedOperationException(\"Plane does not use gasoline\")\n    }\n    \n    override fun refuelDiesel() {\n        if (energyType == \"Diesel\") {\n            println(\"Plane refueling with aviation diesel\")\n        } else {\n            throw UnsupportedOperationException(\"Non-diesel plane cannot refuel diesel\")\n        }\n    }\n    \n    override fun loadNuclearFuel() {\n        throw UnsupportedOperationException(\"Plane cannot use nuclear fuel\")\n    }\n    \n    override fun checkBatteryLevel() {\n        throw UnsupportedOperationException(\"Plane has no battery system\")\n    }\n    \n    override fun maintainEngine() {\n        if (energyType == \"Diesel\") {\n            println(\"Maintaining diesel turbine engines\")\n        } else {\n            println(\"Maintaining jet engines\")\n        }\n    }\n    \n    fun getOperator(): Pilot {\n        return pilot\n    }\n}\n\nclass Submarine(private val captain: Captain, private val energyType: String) : Vehicle, EnergySystem {\n    private var depth = 0\n    \n    override fun start() {\n        println(\"$energyType submarine engines started by ${captain.getName()}\")\n    }\n    \n    override fun stop() {\n        println(\"Submarine stopped\")\n    }\n    \n    override fun fly() {\n        throw UnsupportedOperationException(\"Submarine cannot fly\")\n    }\n    \n    override fun dive() {\n        if (captain.getName().startsWith(\"Captain\")) {\n            if (depth < 100) {\n                depth += 50\n                println(\"Submarine diving to depth: $depth meters using $energyType power\")\n            } else if (depth < 200) {\n                depth += 30\n                println(\"Deep diving to: $depth meters\")\n            } else {\n                println(\"Maximum depth reached\")\n            }\n        }\n    }\n    \n    override fun chargeElectrically() {\n        if (energyType == \"Electric\") {\n            println(\"Submarine charging batteries\")\n        } else {\n            throw UnsupportedOperationException(\"Non-electric submarine cannot charge\")\n        }\n    }\n    \n    override fun refuelGasoline() {\n        throw UnsupportedOperationException(\"Submarine does not use gasoline\")\n    }\n    \n    override fun refuelDiesel() {\n        if (energyType == \"Diesel\") {\n            println(\"Submarine refueling with marine diesel\")\n        } else {\n            throw UnsupportedOperationException(\"Non-diesel submarine cannot refuel diesel\")\n        }\n    }\n    \n    override fun loadNuclearFuel() {\n        if (energyType == \"Nuclear\") {\n            println(\"Loading nuclear fuel rods into reactor\")\n        } else {\n            throw UnsupportedOperationException(\"Non-nuclear submarine cannot load nuclear fuel\")\n        }\n    }\n    \n    override fun checkBatteryLevel() {\n        if (energyType == \"Electric\" || energyType == \"Diesel\") {\n            println(\"Submarine battery level: 70%\")\n        } else {\n            throw UnsupportedOperationException(\"Nuclear submarine has no battery system\")\n        }\n    }\n    \n    override fun maintainEngine() {\n        if (energyType == \"Nuclear\") {\n            println(\"Maintaining nuclear reactor systems\")\n        } else if (energyType == \"Diesel\") {\n            println(\"Maintaining diesel-electric propulsion\")\n        } else {\n            println(\"Maintaining electric propulsion system\")\n        }\n    }\n    \n    fun getOperator(): Captain {\n        return captain\n    }\n}\n",
            "output": "interface StartStop {\n    fun start()\n    fun stop()\n}\n\ninterface Flying {\n    fun fly()\n}\n\ninterface Diving {\n    fun dive()\n}\n\ninterface GroundSteering {\n    fun steer()\n}\n\ninterface AirNavigation {\n    fun navigateAir()\n}\n\ninterface WaterNavigation {\n    fun navigateWater()\n}\n\ninterface TowerCommunication {\n    fun communicateWithTower()\n}\n\ninterface ElectricCharging {\n    fun chargeElectrically()\n    fun checkBatteryLevel()\n}\n\ninterface GasolineRefueling {\n    fun refuelGasoline()\n}\n\ninterface DieselRefueling {\n    fun refuelDiesel()\n}\n\ninterface NuclearFueling {\n    fun loadNuclearFuel()\n}\n\ninterface EngineMaintenance {\n    fun maintainEngine()\n}\n\nclass Driver(private val name: String) : GroundSteering {\n    override fun steer() {\n        if (name.isNotEmpty()) {\n            if (name.length > 5) {\n                println(\"Experienced driver $name steering carefully\")\n            } else {\n                println(\"Driver $name steering\")\n            }\n        }\n    }\n    \n    fun getName(): String {\n        return name\n    }\n}\n\nclass Pilot(private val name: String) : GroundSteering, AirNavigation, TowerCommunication {\n    override fun steer() {\n        println(\"Pilot $name controlling aircraft\")\n    }\n    \n    override fun navigateAir() {\n        if (name.contains(\"Captain\")) {\n            println(\"Captain pilot navigating complex airspace\")\n        } else if (name.length > 6) {\n            println(\"Experienced pilot navigating airspace\")\n        } else {\n            println(\"Pilot navigating\")\n        }\n    }\n    \n    override fun communicateWithTower() {\n        println(\"Pilot $name communicating with control tower\")\n    }\n    \n    fun getName(): String {\n        return name\n    }\n}\n\nclass Captain(private val name: String) : GroundSteering, WaterNavigation {\n    override fun steer() {\n        println(\"Captain $name steering submarine\")\n    }\n    \n    override fun navigateWater() {\n        if (name.startsWith(\"Captain\")) {\n            println(\"Captain navigating deep waters\")\n        } else {\n            println(\"Naval officer navigating\")\n        }\n    }\n    \n    fun getName(): String {\n        return name\n    }\n}\n\nclass Car(private val driver: Driver, private val energyType: String) : StartStop, ElectricCharging, GasolineRefueling, EngineMaintenance {\n    override fun start() {\n        println(\"$energyType car started by ${driver.getName()}\")\n    }\n    \n    override fun stop() {\n        println(\"Car stopped\")\n    }\n    \n    override fun chargeElectrically() {\n        if (energyType == \"Electric\") {\n            println(\"Car charging electrically\")\n        } else {\n            throw UnsupportedOperationException(\"Non-electric car cannot charge\")\n        }\n    }\n    \n    override fun refuelGasoline() {\n        if (energyType == \"Gasoline\") {\n            println(\"Car refueling with gasoline\")\n        } else {\n            throw UnsupportedOperationException(\"Non-gasoline car cannot refuel gasoline\")\n        }\n    }\n    \n    override fun checkBatteryLevel() {\n        if (energyType == \"Electric\") {\n            println(\"Car battery level: 85%\")\n        } else {\n            throw UnsupportedOperationException(\"Non-electric car has no battery\")\n        }\n    }\n    \n    override fun maintainEngine() {\n        if (energyType == \"Electric\") {\n            println(\"Maintaining electric motor\")\n        } else {\n            println(\"Maintaining combustion engine\")\n        }\n    }\n    \n    fun getOperator(): Driver {\n        return driver\n    }\n    \n    fun getEnergyType(): String {\n        return energyType\n    }\n}\n\nclass Plane(private val pilot: Pilot, private val energyType: String) : StartStop, Flying, DieselRefueling, EngineMaintenance {\n    override fun start() {\n        println(\"$energyType plane engines started by ${pilot.getName()}\")\n    }\n    \n    override fun stop() {\n        println(\"Plane stopped\")\n    }\n    \n    override fun fly() {\n        if (pilot.getName().contains(\"Captain\")) {\n            println(\"Plane flying at cruising altitude with $energyType power\")\n        } else {\n            println(\"Plane flying with $energyType engines\")\n        }\n    }\n    \n    override fun refuelDiesel() {\n        if (energyType == \"Diesel\") {\n            println(\"Plane refueling with aviation diesel\")\n        } else {\n            throw UnsupportedOperationException(\"Non-diesel plane cannot refuel diesel\")\n        }\n    }\n    \n    override fun maintainEngine() {\n        if (energyType == \"Diesel\") {\n            println(\"Maintaining diesel turbine engines\")\n        } else {\n            println(\"Maintaining jet engines\")\n        }\n    }\n    \n    fun getOperator(): Pilot {\n        return pilot\n    }\n    \n    fun getEnergyType(): String {\n        return energyType\n    }\n}\n\nclass Submarine(private val captain: Captain, private val energyType: String) : StartStop, Diving, ElectricCharging, DieselRefueling, NuclearFueling, EngineMaintenance {\n    private var depth: Int = 0\n    \n    override fun start() {\n        println(\"$energyType submarine engines started by ${captain.getName()}\")\n    }\n    \n    override fun stop() {\n        println(\"Submarine stopped\")\n    }\n    \n    override fun dive() {\n        if (captain.getName().startsWith(\"Captain\")) {\n            if (depth < 100) {\n                depth += 50\n                println(\"Submarine diving to depth: $depth meters using $energyType power\")\n            } else if (depth < 200) {\n                depth += 30\n                println(\"Deep diving to: $depth meters\")\n            } else {\n                println(\"Maximum depth reached\")\n            }\n        }\n    }\n    \n    override fun chargeElectrically() {\n        if (energyType == \"Electric\") {\n            println(\"Submarine charging batteries\")\n        } else {\n            throw UnsupportedOperationException(\"Non-electric submarine cannot charge\")\n        }\n    }\n    \n    override fun refuelDiesel() {\n        if (energyType == \"Diesel\") {\n            println(\"Submarine refueling with marine diesel\")\n        } else {\n            throw UnsupportedOperationException(\"Non-diesel submarine cannot refuel diesel\")\n        }\n    }\n    \n    override fun loadNuclearFuel() {\n        if (energyType == \"Nuclear\") {\n            println(\"Loading nuclear fuel rods into reactor\")\n        } else {\n            throw UnsupportedOperationException(\"Non-nuclear submarine cannot load nuclear fuel\")\n        }\n    }\n    \n    override fun checkBatteryLevel() {\n        if (energyType == \"Electric\" || energyType == \"Diesel\") {\n            println(\"Submarine battery level: 70%\")\n        } else {\n            throw UnsupportedOperationException(\"Nuclear submarine has no battery system\")\n        }\n    }\n    \n    override fun maintainEngine() {\n        if (energyType == \"Nuclear\") {\n            println(\"Maintaining nuclear reactor systems\")\n        } else if (energyType == \"Diesel\") {\n            println(\"Maintaining diesel-electric propulsion\")\n        } else {\n            println(\"Maintaining electric propulsion system\")\n        }\n    }\n    \n    fun getOperator(): Captain {\n        return captain\n    }\n    \n    fun getEnergyType(): String {\n        return energyType\n    }\n}",
            "level": "HARD",
            "language": "KOTLIN",
            "violation": "ISP"
        },
        {
            "input": "interface GameCharacter {\n    fun meleeAttack()\n    fun castSpell()\n    fun fly()\n    fun defend()\n}\n\ninterface Weapon {\n    fun slash()\n    fun shoot()\n    fun enchant()\n    fun repair()\n}\n\nclass Mage(private val name: String, private val level: Int) : GameCharacter {\n    private var mana: Int = 100\n    \n    override fun meleeAttack() {\n        throw UnsupportedOperationException(\"Mage cannot perform melee attacks!\")\n    }\n    \n    override fun castSpell() {\n        if (mana < 10) {\n            println(\"$name is out of mana!\")\n            return\n        }\n        \n        when {\n            level >= 5 && mana >= 30 -> {\n                println(\"$name casts a powerful lightning storm!\")\n                mana -= 30\n            }\n            level >= 3 && mana >= 20 -> {\n                println(\"$name casts a fireball spell!\")\n                mana -= 20\n            }\n            mana >= 10 -> {\n                println(\"$name casts a basic magic missile!\")\n                mana -= 10\n            }\n        }\n    }\n    \n    override fun fly() {\n        if (level >= 2) {\n            println(\"$name soars through the air with magic!\")\n        } else {\n            println(\"$name is too inexperienced to fly!\")\n        }\n    }\n    \n    override fun defend() {\n        if (mana >= 15) {\n            println(\"$name creates a magical barrier!\")\n            mana -= 15\n        } else {\n            println(\"$name dodges awkwardly!\")\n        }\n    }\n}\n\nclass Fighter(private val name: String, private val hasWeapon: Boolean) : GameCharacter {\n    private var stamina: Int = 100\n    \n    override fun meleeAttack() {\n        if (stamina < 5) {\n            println(\"$name is too exhausted to fight!\")\n            return\n        }\n        \n        if (hasWeapon) {\n            when {\n                stamina >= 20 -> {\n                    println(\"$name performs a devastating combo attack!\")\n                    stamina -= 20\n                }\n                stamina >= 10 -> {\n                    println(\"$name swings weapon with force!\")\n                    stamina -= 10\n                }\n                else -> {\n                    println(\"$name makes a weak weapon strike!\")\n                    stamina -= 5\n                }\n            }\n        } else {\n            when {\n                stamina >= 15 -> {\n                    println(\"$name throws a powerful punch!\")\n                    stamina -= 15\n                }\n                else -> {\n                    println(\"$name throws a basic punch!\")\n                    stamina -= 5\n                }\n            }\n        }\n    }\n    \n    override fun castSpell() {\n        throw UnsupportedOperationException(\"Fighter cannot cast spells!\")\n    }\n    \n    override fun fly() {\n        throw UnsupportedOperationException(\"Fighter cannot fly!\")\n    }\n    \n    override fun defend() {\n        when {\n            hasWeapon && stamina >= 10 -> {\n                println(\"$name blocks with weapon!\")\n                stamina -= 10\n            }\n            stamina >= 5 -> {\n                println(\"$name raises arms to defend!\")\n                stamina -= 5\n            }\n            else -> {\n                println(\"$name barely manages to dodge!\")\n            }\n        }\n    }\n}\n\nclass Sword(private var sharpness: Int, private val isMagic: Boolean) : Weapon {\n    override fun slash() {\n        when {\n            sharpness > 70 -> println(\"Sword cuts cleanly through the target!\")\n            sharpness > 30 -> println(\"Sword makes a decent cut!\")\n            else -> println(\"Dull sword barely scratches the target!\")\n        }\n    }\n    \n    override fun shoot() {\n        throw UnsupportedOperationException(\"Sword cannot shoot!\")\n    }\n    \n    override fun enchant() {\n        if (isMagic) {\n            println(\"Magical sword glows with enhanced power!\")\n            sharpness += 10\n        } else {\n            throw UnsupportedOperationException(\"Non-magic sword cannot be enchanted!\")\n        }\n    }\n    \n    override fun repair() {\n        if (sharpness < 100) {\n            sharpness = minOf(100, sharpness + 25)\n            println(\"Sword has been sharpened and repaired!\")\n        } else {\n            println(\"Sword is already in perfect condition!\")\n        }\n    }\n}\n\nclass Bow(private var arrows: Int, private var range: Int) : Weapon {\n    override fun slash() {\n        throw UnsupportedOperationException(\"Bow cannot slash!\")\n    }\n    \n    override fun shoot() {\n        if (arrows <= 0) {\n            println(\"No arrows left to shoot!\")\n            return\n        }\n        \n        when {\n            range > 80 -> println(\"Long-range shot hits the distant target!\")\n            range > 50 -> println(\"Medium-range shot finds its mark!\")\n            else -> println(\"Short-range shot barely reaches the target!\")\n        }\n        arrows--\n    }\n    \n    override fun enchant() {\n        throw UnsupportedOperationException(\"Regular bow cannot be enchanted!\")\n    }\n    \n    override fun repair() {\n        if (range < 100) {\n            range = minOf(100, range + 15)\n            println(\"Bow string tightened and wood polished!\")\n        } else {\n            println(\"Bow is in excellent condition!\")\n        }\n    }\n}\n",
            "output": "interface MeleeCapable {\n    fun meleeAttack()\n}\n\ninterface MagicCapable {\n    fun castSpell()\n}\n\ninterface FlyingCapable {\n    fun fly()\n}\n\ninterface DefenseCapable {\n    fun defend()\n}\n\ninterface SlashCapable {\n    fun slash()\n}\n\ninterface ShootCapable {\n    fun shoot()\n}\n\ninterface EnchantCapable {\n    fun enchant()\n}\n\ninterface RepairCapable {\n    fun repair()\n}\n\nclass Mage(private val name: String, private val level: Int) : MagicCapable, FlyingCapable, DefenseCapable  {\n    private var mana: Int = 100\n        \n    override fun castSpell() {\n        if (mana < 10) {\n            println(\"$name is out of mana!\")\n            return\n        }\n        \n        when {\n            level >= 5 && mana >= 30 -> {\n                println(\"$name casts a powerful lightning storm!\")\n                mana -= 30\n            }\n            level >= 3 && mana >= 20 -> {\n                println(\"$name casts a fireball spell!\")\n                mana -= 20\n            }\n            mana >= 10 -> {\n                println(\"$name casts a basic magic missile!\")\n                mana -= 10\n            }\n        }\n    }\n    \n    override fun fly() {\n        if (level >= 2) {\n            println(\"$name soars through the air with magic!\")\n        } else {\n            println(\"$name is too inexperienced to fly!\")\n        }\n    }\n    \n    override fun defend() {\n        if (mana >= 15) {\n            println(\"$name creates a magical barrier!\")\n            mana -= 15\n        } else {\n            println(\"$name dodges awkwardly!\")\n        }\n    }\n}\n\nclass Fighter(private val name: String, private val hasWeapon: Boolean) : MeleeCapable, DefenseCapable {\n    private var stamina: Int = 100\n    \n    override fun meleeAttack() {\n        if (stamina < 5) {\n            println(\"$name is too exhausted to fight!\")\n            return\n        }\n        \n        if (hasWeapon) {\n            when {\n                stamina >= 20 -> {\n                    println(\"$name performs a devastating combo attack!\")\n                    stamina -= 20\n                }\n                stamina >= 10 -> {\n                    println(\"$name swings weapon with force!\")\n                    stamina -= 10\n                }\n                else -> {\n                    println(\"$name makes a weak weapon strike!\")\n                    stamina -= 5\n                }\n            }\n        } else {\n            when {\n                stamina >= 15 -> {\n                    println(\"$name throws a powerful punch!\")\n                    stamina -= 15\n                }\n                else -> {\n                    println(\"$name throws a basic punch!\")\n                    stamina -= 5\n                }\n            }\n        }\n    }\n\t\n    override fun defend() {\n        when {\n            hasWeapon && stamina >= 10 -> {\n                println(\"$name blocks with weapon!\")\n                stamina -= 10\n            }\n            stamina >= 5 -> {\n                println(\"$name raises arms to defend!\")\n                stamina -= 5\n            }\n            else -> {\n                println(\"$name barely manages to dodge!\")\n            }\n        }\n    }\n}\n\nclass Sword(private var sharpness: Int, private val isMagic: Boolean) : SlashCapable, EnchantCapable, RepairCapable {\n    override fun slash() {\n        when {\n            sharpness > 70 -> println(\"Sword cuts cleanly through the target!\")\n            sharpness > 30 -> println(\"Sword makes a decent cut!\")\n            else -> println(\"Dull sword barely scratches the target!\")\n        }\n    }\n    \n    \n    override fun enchant() {\n        if (isMagic) {\n            println(\"Magical sword glows with enhanced power!\")\n            sharpness += 10\n        } else {\n            throw UnsupportedOperationException(\"Non-magic sword cannot be enchanted!\")\n        }\n    }\n    \n    override fun repair() {\n        if (sharpness < 100) {\n            sharpness = minOf(100, sharpness + 25)\n            println(\"Sword has been sharpened and repaired!\")\n        } else {\n            println(\"Sword is already in perfect condition!\")\n        }\n    }\n}\n\nclass Bow(private var arrows: Int, private var range: Int) : ShootCapable, RepairCapable {\n   \n    override fun shoot() {\n        if (arrows <= 0) {\n            println(\"No arrows left to shoot!\")\n            return\n        }\n        \n        when {\n            range > 80 -> println(\"Long-range shot hits the distant target!\")\n            range > 50 -> println(\"Medium-range shot finds its mark!\")\n            else -> println(\"Short-range shot barely reaches the target!\")\n        }\n        arrows--\n    }\n        \n    override fun repair() {\n        if (range < 100) {\n            range = minOf(100, range + 15)\n            println(\"Bow string tightened and wood polished!\")\n        } else {\n            println(\"Bow is in excellent condition!\")\n        }\n    }\n}",
            "level": "MODERATE",
            "language": "KOTLIN",
            "violation": "ISP"
        },
        {
            "input": "interface MusicPlayer {\n    fun play()\n    fun pause()\n    fun stop()\n    fun skipTrack()\n    fun eject()\n    fun setVolume(volume: Int)\n    fun setEqualizer(preset: String)\n    fun displayTrackInfo()\n    fun shuffle()\n    fun repeat()\n}\n\nclass CDPlayer : MusicPlayer {\n    private var isPlaying = false\n    private var isPaused = false\n    private var currentTrack = \"Track 1\"\n    private var volume = 50\n    private var shuffleMode = false\n    private var repeatMode = false\n    \n    override fun play() {\n        isPlaying = true\n        isPaused = false\n        println(\"CD Player: Playing $currentTrack\")\n    }\n    \n    override fun pause() {\n        if (isPlaying) {\n            isPaused = true\n            isPlaying = false\n            println(\"CD Player: Paused\")\n        }\n    }\n    \n    override fun stop() {\n        isPlaying = false\n        isPaused = false\n        println(\"CD Player: Stopped\")\n    }\n    \n    override fun skipTrack() {\n        println(\"CD Player: Skipping to next track\")\n        val trackNumber = currentTrack.split(\" \")[1].toInt() + 1\n        currentTrack = \"Track $trackNumber\"\n    }\n    \n    override fun eject() {\n        stop()\n        println(\"CD Player: CD ejected\")\n    }\n    \n    override fun setVolume(volume: Int) {\n        this.volume = volume\n        println(\"CD Player: Volume set to $volume\")\n    }\n    \n    override fun setEqualizer(preset: String) {\n        println(\"CD Player: Equalizer set to $preset\")\n    }\n    \n    override fun displayTrackInfo() {\n        println(\"CD Player: Current track - $currentTrack, Volume: $volume\")\n    }\n    \n    override fun shuffle() {\n        shuffleMode = !shuffleMode\n        println(\"CD Player: Shuffle ${if (shuffleMode) \"ON\" else \"OFF\"}\")\n    }\n    \n    override fun repeat() {\n        repeatMode = !repeatMode\n        println(\"CD Player: Repeat ${if (repeatMode) \"ON\" else \"OFF\"}\")\n    }\n}\n\nclass VinylPlayer : MusicPlayer {\n    private var isPlaying = false\n    private var isPaused = false\n    private var currentSong = \"Side A\"\n    private var volume = 50\n    \n    override fun play() {\n        isPlaying = true\n        isPaused = false\n        println(\"Vinyl Player: Playing $currentSong\")\n    }\n    \n    override fun pause() {\n        if (isPlaying) {\n            isPaused = true\n            isPlaying = false\n            println(\"Vinyl Player: Paused (needle lifted)\")\n        }\n    }\n    \n    override fun stop() {\n        isPlaying = false\n        isPaused = false\n        println(\"Vinyl Player: Stopped\")\n    }\n    \n    override fun skipTrack() {\n        throw UnsupportedOperationException(\"Vinyl players cannot skip tracks - you must manually move the needle!\")\n    }\n    \n    override fun eject() {\n        throw UnsupportedOperationException(\"Vinyl players don't eject - you must manually remove the record!\")\n    }\n    \n    override fun setVolume(volume: Int) {\n        this.volume = volume\n        println(\"Vinyl Player: Volume set to $volume\")\n    }\n    \n    override fun setEqualizer(preset: String) {\n        throw UnsupportedOperationException(\"Vintage vinyl players don't have digital equalizers!\")\n    }\n    \n    override fun displayTrackInfo() {\n        println(\"Vinyl Player: Current side - $currentSong, Volume: $volume\")\n    }\n    \n    override fun shuffle() {\n        throw UnsupportedOperationException(\"Cannot shuffle vinyl records!\")\n    }\n    \n    override fun repeat() {\n        throw UnsupportedOperationException(\"Vinyl players don't have automatic repeat!\")\n    }\n}\n\nclass Amplifier : MusicPlayer {\n    private var isPoweredOn = false\n    private var volume = 30\n    private var equalizerSetting = \"Flat\"\n    private var bassBoost = false\n    \n    override fun play() {\n        throw UnsupportedOperationException(\"Amplifiers don't play music - they amplify audio signals!\")\n    }\n    \n    override fun pause() {\n        throw UnsupportedOperationException(\"Amplifiers don't control playback!\")\n    }\n    \n    override fun stop() {\n        isPoweredOn = false\n        println(\"Amplifier: Powered OFF\")\n    }\n    \n    override fun skipTrack() {\n        throw UnsupportedOperationException(\"Amplifiers don't control track selection!\")\n    }\n    \n    override fun eject() {\n        throw UnsupportedOperationException(\"Amplifiers don't have media to eject!\")\n    }\n    \n    override fun setVolume(volume: Int) {\n        this.volume = when {\n            volume < 0 -> 0\n            volume > 100 -> 100\n            else -> volume\n        }\n        \n        if (this.volume > 80) {\n            println(\"Amplifier: Warning - High volume!\")\n        }\n        \n        println(\"Amplifier: Master volume set to ${this.volume}\")\n    }\n    \n    override fun setEqualizer(preset: String) {\n        equalizerSetting = when (preset.lowercase()) {\n            \"rock\", \"pop\", \"jazz\", \"classical\" -> preset\n            else -> {\n                println(\"Amplifier: Unknown preset. Defaulting to Flat.\")\n                \"Flat\"\n            }\n        }\n        if (equalizerSetting != \"Flat\" || preset.lowercase() in listOf(\"rock\", \"pop\", \"jazz\", \"classical\")) {\n            println(\"Amplifier: Equalizer set to $equalizerSetting\")\n        }\n    }\n    \n    override fun displayTrackInfo() {\n        throw UnsupportedOperationException(\"Amplifiers don't track music information!\")\n    }\n    \n    override fun shuffle() {\n        throw UnsupportedOperationException(\"Amplifiers don't control playback modes!\")\n    }\n    \n    override fun repeat() {\n        throw UnsupportedOperationException(\"Amplifiers don't control playback modes!\")\n    }\n    \n    fun powerOn() {\n        isPoweredOn = true\n        println(\"Amplifier: Powered ON\")\n    }\n    \n    fun setBassBoost(enabled: Boolean) {\n        bassBoost = enabled\n        println(\"Amplifier: Bass boost ${if (enabled) \"ON\" else \"OFF\"}\")\n    }\n}\n",
            "output": "interface PlaybackCapable {\n    fun play()\n    fun pause()\n    fun stop()\n}\n\ninterface TrackControlCapable {\n    fun skipTrack()\n}\n\ninterface MediaEjectCapable {\n    fun eject()\n}\n\ninterface VolumeControlCapable {\n    fun setVolume(volume: Int)\n}\n\ninterface EqualizerCapable {\n    fun setEqualizer(preset: String)\n}\n\ninterface TrackInfoCapable {\n    fun displayTrackInfo()\n}\n\ninterface PlaybackModeCapable {\n    fun shuffle()\n    fun repeat()\n}\n\nclass CDPlayer :  PlaybackCapable, TrackControlCapable, MediaEjectCapable, VolumeControlCapable, EqualizerCapable, TrackInfoCapable, PlaybackModeCapable {\n    private var isPlaying = false\n    private var isPaused = false\n    private var currentTrack = \"Track 1\"\n    private var volume = 50\n    private var shuffleMode = false\n    private var repeatMode = false\n    \n    override fun play() {\n        isPlaying = true\n        isPaused = false\n        println(\"CD Player: Playing $currentTrack\")\n    }\n    \n    override fun pause() {\n        if (isPlaying) {\n            isPaused = true\n            isPlaying = false\n            println(\"CD Player: Paused\")\n        }\n    }\n    \n    override fun stop() {\n        isPlaying = false\n        isPaused = false\n        println(\"CD Player: Stopped\")\n    }\n    \n    override fun skipTrack() {\n        println(\"CD Player: Skipping to next track\")\n        val trackNumber = currentTrack.split(\" \")[1].toInt() + 1\n        currentTrack = \"Track $trackNumber\"\n    }\n    \n    override fun eject() {\n        stop()\n        println(\"CD Player: CD ejected\")\n    }\n    \n    override fun setVolume(volume: Int) {\n        this.volume = volume\n        println(\"CD Player: Volume set to $volume\")\n    }\n    \n    override fun setEqualizer(preset: String) {\n        println(\"CD Player: Equalizer set to $preset\")\n    }\n    \n    override fun displayTrackInfo() {\n        println(\"CD Player: Current track - $currentTrack, Volume: $volume\")\n    }\n    \n    override fun shuffle() {\n        shuffleMode = !shuffleMode\n        println(\"CD Player: Shuffle ${if (shuffleMode) \"ON\" else \"OFF\"}\")\n    }\n    \n    override fun repeat() {\n        repeatMode = !repeatMode\n        println(\"CD Player: Repeat ${if (repeatMode) \"ON\" else \"OFF\"}\")\n    }\n}\n\nclass VinylPlayer : PlaybackCapable, VolumeControlCapable, TrackInfoCapable {\n    private var isPlaying = false\n    private var isPaused = false\n    private var currentSong = \"Side A\"\n    private var volume = 50\n    \n    override fun play() {\n        isPlaying = true\n        isPaused = false\n        println(\"Vinyl Player: Playing $currentSong\")\n    }\n    \n    override fun pause() {\n        if (isPlaying) {\n            isPaused = true\n            isPlaying = false\n            println(\"Vinyl Player: Paused (needle lifted)\")\n        }\n    }\n    \n    override fun stop() {\n        isPlaying = false\n        isPaused = false\n        println(\"Vinyl Player: Stopped\")\n    }\n        \n    override fun setVolume(volume: Int) {\n        this.volume = volume\n        println(\"Vinyl Player: Volume set to $volume\")\n    }\n    \n    override fun displayTrackInfo() {\n        println(\"Vinyl Player: Current side - $currentSong, Volume: $volume\")\n    }\n}\n\nclass Amplifier : VolumeControlCapable, EqualizerCapable {\n    private var isPoweredOn = false\n    private var volume = 30\n    private var equalizerSetting = \"Flat\"\n    private var bassBoost = false\n        \n    fun stop() {\n        isPoweredOn = false\n        println(\"Amplifier: Powered OFF\")\n    }\n    \n    override fun setVolume(volume: Int) {\n        this.volume = when {\n            volume < 0 -> 0\n            volume > 100 -> 100\n            else -> volume\n        }\n        \n        if (this.volume > 80) {\n            println(\"Amplifier: Warning - High volume!\")\n        }\n        \n        println(\"Amplifier: Master volume set to ${this.volume}\")\n    }\n    \n    override fun setEqualizer(preset: String) {\n        equalizerSetting = when (preset.toLowerCase()) {\n            \"rock\", \"pop\", \"jazz\", \"classical\" -> preset\n            else -> {\n                println(\"Amplifier: Unknown preset. Defaulting to Flat.\")\n                \"Flat\"\n            }\n        }\n        if (equalizerSetting != \"Flat\" || preset.toLowerCase() in listOf(\"rock\", \"pop\", \"jazz\", \"classical\")) {\n            println(\"Amplifier: Equalizer set to $equalizerSetting\")\n        }\n    }\n    \n    fun powerOn() {\n        isPoweredOn = true\n        println(\"Amplifier: Powered ON\")\n    }\n    \n    fun setBassBoost(enabled: Boolean) {\n        bassBoost = enabled\n        println(\"Amplifier: Bass boost ${if (enabled) \"ON\" else \"OFF\"}\")\n    }\n}",
            "level": "MODERATE",
            "language": "KOTLIN",
            "violation": "ISP"
        },
        {
            "input": "interface RestaurantWorker {\n    fun cookFood()\n    fun serveCustomers()\n    fun cleanTables()\n    fun manageStaff()\n}\n\ninterface MachineWorker {\n    fun washDishes()\n    fun vacuumFloor()\n    fun selfDiagnose()\n}\n\nclass Chef : RestaurantWorker {\n    override fun cookFood() {\n        println(\"Chef is cooking meals.\")\n    }\n\n    override fun serveCustomers() {\n        println(\"Chef does not serve customers.\")\n    }\n\n    override fun cleanTables() {\n        println(\"Chef does not clean tables.\")\n    }\n\n    override fun manageStaff() {\n        println(\"Chef does not manage staff.\")\n    }\n}\n\nclass Waiter : RestaurantWorker {\n    override fun cookFood() {\n        println(\"Waiter does not cook food.\")\n    }\n\n    override fun serveCustomers() {\n        println(\"Waiter is serving customers.\")\n    }\n\n    override fun cleanTables() {\n        println(\"Waiter is cleaning tables.\")\n    }\n\n    override fun manageStaff() {\n        println(\"Waiter does not manage staff.\")\n    }\n}\n\nclass Manager : RestaurantWorker {\n    private val conflict = true\n\n    override fun cookFood() {\n        println(\"Manager does not cook.\")\n    }\n\n    override fun serveCustomers() {\n        println(\"Manager does not serve.\")\n    }\n\n    override fun cleanTables() {\n        println(\"Manager does not clean.\")\n    }\n\n    override fun manageStaff() {\n        if (conflict) {\n            println(\"Manager is resolving a team conflict.\")\n        } else {\n            println(\"Manager is approving staff schedules.\")\n        }\n    }\n}\n\nclass Dishwasher : MachineWorker {\n    private val dirtyItems = 15\n\n    override fun washDishes() {\n        if (dirtyItems > 0) {\n            println(\"Dishwasher is cleaning $dirtyItems plates.\")\n        } else {\n            println(\"No dishes to clean.\")\n        }\n    }\n\n    override fun vacuumFloor() {\n        println(\"Dishwasher cannot vacuum the floor.\")\n    }\n\n    override fun selfDiagnose() {\n        println(\"Dishwasher performing self-diagnosis.\")\n    }\n}\n\nclass VacuumCleaner : MachineWorker {\n    private val isCharged = false\n\n    override fun washDishes() {\n        println(\"Vacuum cleaner cannot wash dishes.\")\n    }\n\n    override fun vacuumFloor() {\n        if (isCharged) {\n            println(\"Vacuum cleaner is cleaning the floor.\")\n        } else {\n            println(\"Vacuum cleaner battery is low.\")\n        }\n    }\n\n    override fun selfDiagnose() {\n        println(\"Vacuum cleaner running diagnostics.\")\n    }\n}",
            "output": "interface CookingCapable {\n    fun cookFood()\n}\n\ninterface ServingCapable {\n    fun serveCustomers()\n}\n\ninterface CleaningCapable {\n    fun cleanTables()\n}\n\ninterface ManagementCapable {\n    fun manageStaff()\n}\n\ninterface DishWashingCapable {\n    fun washDishes()\n}\n\ninterface FloorCleaningCapable {\n    fun vacuumFloor()\n}\n\ninterface SelfDiagnosticCapable {\n    fun selfDiagnose()\n}\n\nclass Chef : CookingCapable {\n    override fun cookFood() {\n        println(\"Chef is cooking meals.\")\n    }\n}\n\nclass Waiter : ServingCapable, CleaningCapable {\n    override fun serveCustomers() {\n        println(\"Waiter is serving customers.\")\n    }\n\n    override fun cleanTables() {\n        println(\"Waiter is cleaning tables.\")\n    }\n}\n\nclass Manager : ManagementCapable {\n    private val conflict = true\n\n    override fun manageStaff() {\n        if (conflict) {\n            println(\"Manager is resolving a team conflict.\")\n        } else {\n            println(\"Manager is approving staff schedules.\")\n        }\n    }\n}\n\nclass Dishwasher : DishWashingCapable, SelfDiagnosticCapable  {\n    private val dirtyItems = 15\n\n    override fun washDishes() {\n        if (dirtyItems > 0) {\n            println(\"Dishwasher is cleaning $dirtyItems plates.\")\n        } else {\n            println(\"No dishes to clean.\")\n        }\n    }\n\n    override fun selfDiagnose() {\n        println(\"Dishwasher performing self-diagnosis.\")\n    }\n}\n\nclass VacuumCleaner : FloorCleaningCapable, SelfDiagnosticCapable {\n    private val isCharged = false\n\n    override fun vacuumFloor() {\n        if (isCharged) {\n            println(\"Vacuum cleaner is cleaning the floor.\")\n        } else {\n            println(\"Vacuum cleaner battery is low.\")\n        }\n    }\n\n    override fun selfDiagnose() {\n        println(\"Vacuum cleaner running diagnostics.\")\n    }\n}",
            "level": "MODERATE",
            "language": "KOTLIN",
            "violation": "ISP"
        },
        {
            "input": "interface Vehicle {\n    fun start()\n    fun stop()\n    fun fly()\n    fun dive()\n}\n\ninterface Operator {\n    fun steer()\n    fun navigateAir()\n    fun navigateWater()\n    fun communicateWithTower()\n}\n\nclass Driver(private val name: String) : Operator {\n    override fun steer() {\n        if (name.isNotEmpty()) {\n            if (name.length > 5) {\n                println(\"Experienced driver $name steering carefully\")\n            } else {\n                println(\"Driver $name steering\")\n            }\n        }\n    }\n    \n    override fun navigateAir() {\n        throw UnsupportedOperationException(\"Driver cannot navigate air\")\n    }\n    \n    override fun navigateWater() {\n        throw UnsupportedOperationException(\"Driver cannot navigate water\")\n    }\n    \n    override fun communicateWithTower() {\n        throw UnsupportedOperationException(\"Driver cannot communicate with tower\")\n    }\n    \n    fun getName(): String = name\n}\n\nclass Pilot(private val name: String) : Operator {\n    override fun steer() {\n        println(\"Pilot $name controlling aircraft\")\n    }\n    \n    override fun navigateAir() {\n        when {\n            name.contains(\"Captain\") -> println(\"Captain pilot navigating complex airspace\")\n            name.length > 6 -> println(\"Experienced pilot navigating airspace\")\n            else -> println(\"Pilot navigating\")\n        }\n    }\n    \n    override fun navigateWater() {\n        throw UnsupportedOperationException(\"Pilot cannot navigate water\")\n    }\n    \n    override fun communicateWithTower() {\n        println(\"Pilot $name communicating with control tower\")\n    }\n    \n    fun getName(): String = name\n}\n\nclass Captain(private val name: String) : Operator {\n    override fun steer() {\n        println(\"Captain $name steering submarine\")\n    }\n    \n    override fun navigateAir() {\n        throw UnsupportedOperationException(\"Captain cannot navigate air\")\n    }\n    \n    override fun navigateWater() {\n        if (name.startsWith(\"Captain\")) {\n            println(\"Captain navigating deep waters\")\n        } else {\n            println(\"Naval officer navigating\")\n        }\n    }\n    \n    override fun communicateWithTower() {\n        throw UnsupportedOperationException(\"Captain cannot communicate with tower\")\n    }\n    \n    fun getName(): String = name\n}\n\nclass Car(private val driver: Driver) : Vehicle {\n    override fun start() {\n        println(\"Car started by ${driver.getName()}\")\n    }\n    \n    override fun stop() {\n        println(\"Car stopped\")\n    }\n    \n    override fun fly() {\n        throw UnsupportedOperationException(\"Car cannot fly\")\n    }\n    \n    override fun dive() {\n        throw UnsupportedOperationException(\"Car cannot dive\")\n    }\n    \n    fun getOperator(): Driver = driver\n}\n\nclass Plane(private val pilot: Pilot) : Vehicle {\n    override fun start() {\n        println(\"Plane engines started by ${pilot.getName()}\")\n    }\n    \n    override fun stop() {\n        println(\"Plane stopped\")\n    }\n    \n    override fun fly() {\n        if (pilot.getName().contains(\"Captain\")) {\n            println(\"Plane flying at cruising altitude\")\n        } else {\n            println(\"Plane flying\")\n        }\n    }\n    \n    override fun dive() {\n        throw UnsupportedOperationException(\"Plane cannot dive underwater\")\n    }\n    \n    fun getOperator(): Pilot = pilot\n}\n\nclass Submarine(private val captain: Captain) : Vehicle {\n    private var depth = 0\n    \n    override fun start() {\n        println(\"Submarine engines started by ${captain.getName()}\")\n    }\n    \n    override fun stop() {\n        println(\"Submarine stopped\")\n    }\n    \n    override fun fly() {\n        throw UnsupportedOperationException(\"Submarine cannot fly\")\n    }\n    \n    override fun dive() {\n        if (captain.getName().startsWith(\"Captain\")) {\n            when {\n                depth < 100 -> {\n                    depth += 50\n                    println(\"Submarine diving to depth: $depth meters\")\n                }\n                depth < 200 -> {\n                    depth += 30\n                    println(\"Deep diving to: $depth meters\")\n                }\n                else -> println(\"Maximum depth reached\")\n            }\n        }\n    }\n    \n    fun getOperator(): Captain = captain\n}\n",
            "output": "interface StartStopCapable {\n    fun start()\n    fun stop()\n}\n\ninterface FlyingCapable {\n    fun fly()\n}\n\ninterface DivingCapable {\n    fun dive()\n}\n\ninterface GroundSteeringCapable {\n    fun steer()\n}\n\ninterface AirNavigationCapable {\n    fun navigateAir()\n}\n\ninterface WaterNavigationCapable {\n    fun navigateWater()\n}\n\ninterface TowerCommunicationCapable {\n    fun communicateWithTower()\n}\nclass Driver(private val name: String) : GroundSteeringCapable {\n    override fun steer() {\n        if (name.isNotEmpty()) {\n            if (name.length > 5) {\n                println(\"Experienced driver $name steering carefully\")\n            } else {\n                println(\"Driver $name steering\")\n            }\n        }\n    }\n        \n    fun getName(): String = name\n}\n\nclass Pilot(private val name: String) : GroundSteeringCapable, AirNavigationCapable, TowerCommunicationCapable {\n    override fun steer() {\n        println(\"Pilot $name controlling aircraft\")\n    }\n    \n    override fun navigateAir() {\n        when {\n            name.contains(\"Captain\") -> println(\"Captain pilot navigating complex airspace\")\n            name.length > 6 -> println(\"Experienced pilot navigating airspace\")\n            else -> println(\"Pilot navigating\")\n        }\n    }\n        \n    override fun communicateWithTower() {\n        println(\"Pilot $name communicating with control tower\")\n    }\n    \n    fun getName(): String = name\n}\n\nclass Captain(private val name: String) : GroundSteeringCapable, WaterNavigationCapable {\n    override fun steer() {\n        println(\"Captain $name steering submarine\")\n    }\n        \n    override fun navigateWater() {\n        if (name.startsWith(\"Captain\")) {\n            println(\"Captain navigating deep waters\")\n        } else {\n            println(\"Naval officer navigating\")\n        }\n    }\n    \n    \n    fun getName(): String = name\n}\n\nclass Car(private val driver: Driver) : StartStopCapable {\n    override fun start() {\n        println(\"Car started by ${driver.getName()}\")\n    }\n    \n    override fun stop() {\n        println(\"Car stopped\")\n    }\n        \n    fun getOperator(): Driver = driver\n}\n\nclass Plane(private val pilot: Pilot) : StartStopCapable, FlyingCapable  {\n    override fun start() {\n        println(\"Plane engines started by ${pilot.getName()}\")\n    }\n    \n    override fun stop() {\n        println(\"Plane stopped\")\n    }\n    \n    override fun fly() {\n        if (pilot.getName().contains(\"Captain\")) {\n            println(\"Plane flying at cruising altitude\")\n        } else {\n            println(\"Plane flying\")\n        }\n    }\n        \n    fun getOperator(): Pilot = pilot\n}\n\nclass Submarine(private val captain: Captain) : StartStopCapable, DivingCapable {\n    private var depth = 0\n    \n    override fun start() {\n        println(\"Submarine engines started by ${captain.getName()}\")\n    }\n    \n    override fun stop() {\n        println(\"Submarine stopped\")\n    }\n        \n    override fun dive() {\n        if (captain.getName().startsWith(\"Captain\")) {\n            when {\n                depth < 100 -> {\n                    depth += 50\n                    println(\"Submarine diving to depth: $depth meters\")\n                }\n                depth < 200 -> {\n                    depth += 30\n                    println(\"Deep diving to: $depth meters\")\n                }\n                else -> println(\"Maximum depth reached\")\n            }\n        }\n    }\n    \n    fun getOperator(): Captain = captain\n}",
            "level": "MODERATE",
            "language": "KOTLIN",
            "violation": "ISP"
        },
        {
            "input": "from abc import ABC, abstractmethod\n\nclass GameCharacter(ABC):\n    @abstractmethod\n    def melee_attack(self):\n        pass\n    \n    @abstractmethod\n    def cast_spell(self):\n        pass\n    \n    @abstractmethod\n    def fly(self):\n        pass\n    \n    @abstractmethod\n    def defend(self):\n        pass\n\nclass Mage(GameCharacter):\n    def __init__(self, name):\n        self.name = name\n        self.mana = 100\n    \n    def melee_attack(self):\n        raise NotImplementedError(\"Mage cannot perform melee attacks!\")\n    \n    def cast_spell(self):\n        if self.mana >= 20:\n            print(f\"{self.name} casts a fireball spell!\")\n            self.mana -= 20\n        else:\n            print(f\"{self.name} is out of mana!\")\n    \n    def fly(self):\n        print(f\"{self.name} soars through the air with magic!\")\n    \n    def defend(self):\n        print(f\"{self.name} creates a magical shield!\")\n\nclass Fighter(GameCharacter):\n    def __init__(self, name):\n        self.name = name\n        self.stamina = 100\n    \n    def melee_attack(self):\n        if self.stamina >= 10:\n            print(f\"{self.name} swings sword with great force!\")\n            self.stamina -= 10\n        else:\n            print(f\"{self.name} is too tired to attack!\")\n    \n    def cast_spell(self):\n        raise NotImplementedError(\"Fighter cannot cast spells!\")\n    \n    def fly(self):\n        raise NotImplementedError(\"Fighter cannot fly!\")\n    \n    def defend(self):\n        print(f\"{self.name} raises shield to block incoming attacks!\")",
            "output": "from abc import ABC, abstractmethod\n\nclass GameCharacter(ABC):    \n    @abstractmethod\n    def defend(self):\n        pass\n        \nclass IMage(ABC):    \n    @abstractmethod\n    def cast_spell(self):\n        pass\n    \n    @abstractmethod\n    def fly(self):\n        pass\n\nclass IFighter(ABC):\n    @abstractmethod\n    def melee_attack(self):\n        pass\n\nclass Mage(GameCharacter, IMage):\n    def __init__(self, name):\n        self.name = name\n        self.mana = 100\n\n    def cast_spell(self):\n        if self.mana >= 20:\n            print(f\"{self.name} casts a fireball spell!\")\n            self.mana -= 20\n        else:\n            print(f\"{self.name} is out of mana!\")\n    \n    def fly(self):\n        print(f\"{self.name} soars through the air with magic!\")\n    \n    def defend(self):\n        print(f\"{self.name} creates a magical shield!\")\n\nclass Fighter(GameCharacter, IFighter):\n    def __init__(self, name):\n        self.name = name\n        self.stamina = 100\n    \n    def melee_attack(self):\n        if self.stamina >= 10:\n            print(f\"{self.name} swings sword with great force!\")\n            self.stamina -= 10\n        else:\n            print(f\"{self.name} is too tired to attack!\")\n    \n    \n    def defend(self):\n        print(f\"{self.name} raises shield to block incoming attacks!\")",
            "level": "EASY",
            "language": "PYTHON",
            "violation": "ISP"
        },
        {
            "input": "from abc import ABC, abstractmethod\n\nclass MusicPlayer(ABC):\n    @abstractmethod\n    def play(self):\n        pass\n    \n    @abstractmethod\n    def pause(self):\n        pass\n    \n    @abstractmethod\n    def stop(self):\n        pass\n    \n    @abstractmethod\n    def skip_track(self):\n        pass\n    \n    @abstractmethod\n    def eject(self):\n        pass\n\nclass CDPlayer(MusicPlayer):\n    def __init__(self):\n        self.is_playing = False\n        self.is_paused = False\n        self.current_track = \"Track 1\"\n    \n    def play(self):\n        self.is_playing = True\n        self.is_paused = False\n        print(f\"CD Player: Playing {self.current_track}\")\n    \n    def pause(self):\n        if self.is_playing:\n            self.is_paused = True\n            self.is_playing = False\n            print(\"CD Player: Paused\")\n    \n    def stop(self):\n        self.is_playing = False\n        self.is_paused = False\n        print(\"CD Player: Stopped\")\n    \n    def skip_track(self):\n        print(\"CD Player: Skipping to next track\")\n        track_num = int(self.current_track.split(\" \")[1]) + 1\n        self.current_track = f\"Track {track_num}\"\n    \n    def eject(self):\n        self.stop()\n        print(\"CD Player: CD ejected\")\n\nclass VinylPlayer(MusicPlayer):\n    def __init__(self):\n        self.is_playing = False\n        self.is_paused = False\n        self.current_song = \"Side A\"\n    \n    def play(self):\n        self.is_playing = True\n        self.is_paused = False\n        print(f\"Vinyl Player: Playing {self.current_song}\")\n    \n    def pause(self):\n        if self.is_playing:\n            self.is_paused = True\n            self.is_playing = False\n            print(\"Vinyl Player: Paused (needle lifted)\")\n    \n    def stop(self):\n        self.is_playing = False\n        self.is_paused = False\n        print(\"Vinyl Player: Stopped\")\n    \n    def skip_track(self):\n        raise NotImplementedError(\"Vinyl players cannot skip tracks - you must manually move the needle!\")\n    \n    def eject(self):\n        raise NotImplementedError(\"Vinyl players don't eject - you must manually remove the record!\")",
            "output": "from abc import ABC, abstractmethod\n\nclass MusicPlayer(ABC):\n    @abstractmethod\n    def play(self):\n        pass\n    \n    @abstractmethod\n    def pause(self):\n        pass\n    \n    @abstractmethod\n    def stop(self):\n        pass\n    \n        \nclass ICDPlayer(ABC):    \n    @abstractmethod\n    def skip_track(self):\n        pass\n    \n    @abstractmethod\n    def eject(self):\n        pass\n\nclass CDPlayer(MusicPlayer, ICDPlayer):\n    def __init__(self):\n        self.is_playing = False\n        self.is_paused = False\n        self.current_track = \"Track 1\"\n    \n    def play(self):\n        self.is_playing = True\n        self.is_paused = False\n        print(f\"CD Player: Playing {self.current_track}\")\n    \n    def pause(self):\n        if self.is_playing:\n            self.is_paused = True\n            self.is_playing = False\n            print(\"CD Player: Paused\")\n    \n    def stop(self):\n        self.is_playing = False\n        self.is_paused = False\n        print(\"CD Player: Stopped\")\n    \n    def skip_track(self):\n        print(\"CD Player: Skipping to next track\")\n        track_num = int(self.current_track.split(\" \")[1]) + 1\n        self.current_track = f\"Track {track_num}\"\n    \n    def eject(self):\n        self.stop()\n        print(\"CD Player: CD ejected\")\n\nclass VinylPlayer(MusicPlayer):\n    def __init__(self):\n        self.is_playing = False\n        self.is_paused = False\n        self.current_song = \"Side A\"\n    \n    def play(self):\n        self.is_playing = True\n        self.is_paused = False\n        print(f\"Vinyl Player: Playing {self.current_song}\")\n    \n    def pause(self):\n        if self.is_playing:\n            self.is_paused = True\n            self.is_playing = False\n            print(\"Vinyl Player: Paused (needle lifted)\")\n    \n    def stop(self):\n        self.is_playing = False\n        self.is_paused = False\n        print(\"Vinyl Player: Stopped\")",
            "level": "EASY",
            "language": "PYTHON",
            "violation": "ISP"
        },
        {
            "input": "from abc import ABC, abstractmethod\n\nclass RestaurantWorker(ABC):\n    @abstractmethod\n    def cook_food(self):\n        pass\n    \n    @abstractmethod\n    def serve_customers(self):\n        pass\n    \n    @abstractmethod\n    def clean_tables(self):\n        pass\n\nclass Chef(RestaurantWorker):\n    def cook_food(self):\n        print(\"Chef is cooking food.\")\n    \n    def serve_customers(self):\n        print(\"Chef does not serve customers.\")\n    \n    def clean_tables(self):\n        print(\"Chef does not clean tables.\")\n\nclass Waiter(RestaurantWorker):\n    def cook_food(self):\n        print(\"Waiter does not cook food.\")\n    \n    def serve_customers(self):\n        print(\"Waiter is serving customers.\")\n    \n    def clean_tables(self):\n        print(\"Waiter is cleaning tables.\")\n\nclass Cleaner(RestaurantWorker):\n    def cook_food(self):\n        print(\"Cleaner does not cook food.\")\n    \n    def serve_customers(self):\n        print(\"Cleaner does not serve customers.\")\n    \n    def clean_tables(self):\n        print(\"Cleaner is cleaning tables.\")",
            "output": "from abc import ABC, abstractmethod\n\nclass IChef(ABC):\n    @abstractmethod\n    def cook_food(self):\n        pass\n        \nclass IWaiter(ABC):\n    @abstractmethod\n    def serve_customers(self):\n        pass\n\nclass ICleaner(ABC):    \n    @abstractmethod\n    def clean_tables(self):\n        pass\n\nclass Chef(IChef):\n    def cook_food(self):\n        print(\"Chef is cooking food.\")\n\nclass Waiter(IWaiter, ICleaner):    \n    def serve_customers(self):\n        print(\"Waiter is serving customers.\")\n    \n    def clean_tables(self):\n        print(\"Waiter is cleaning tables.\")\n\nclass Cleaner(ICleaner):    \n    def clean_tables(self):\n        print(\"Cleaner is cleaning tables.\")",
            "level": "EASY",
            "language": "PYTHON",
            "violation": "ISP"
        },
        {
            "input": "from abc import ABC, abstractmethod\n\nclass Vehicle(ABC):\n    @abstractmethod\n    def start(self):\n        pass\n    \n    @abstractmethod\n    def stop(self):\n        pass\n    \n    @abstractmethod\n    def fly(self):\n        pass\n\nclass Car(Vehicle):\n    def start(self):\n        print(\"Car engine started\")\n    \n    def stop(self):\n        print(\"Car stopped\")\n    \n    def fly(self):\n        raise NotImplementedError(\"Car cannot fly\")\n\nclass Plane(Vehicle):\n    def start(self):\n        print(\"Plane engines started\")\n    \n    def stop(self):\n        print(\"Plane stopped\")\n    \n    def fly(self):\n        print(\"Plane is flying\")",
            "output": "from abc import ABC, abstractmethod\n\nclass Vehicle(ABC):\n    @abstractmethod\n    def start(self):\n        pass\n    \n    @abstractmethod\n    def stop(self):\n        pass\n\nclass IPlane(ABC):\n    @abstractmethod\n    def fly(self):\n        pass\n\nclass Car(Vehicle):\n    def start(self):\n        print(\"Car engine started\")\n    \n    def stop(self):\n        print(\"Car stopped\")\n\nclass Plane(Vehicle, IPlane):\n    def start(self):\n        print(\"Plane engines started\")\n    \n    def stop(self):\n        print(\"Plane stopped\")\n    \n    def fly(self):\n        print(\"Plane is flying\")",
            "level": "EASY",
            "language": "PYTHON",
            "violation": "ISP"
        },
        {
            "input": "from abc import ABC, abstractmethod\n\n\nclass GameCharacter(ABC):\n    @abstractmethod\n    def melee_attack(self):\n        pass\n    \n    @abstractmethod\n    def cast_spell(self):\n        pass\n    \n    @abstractmethod\n    def fly(self):\n        pass\n    \n    @abstractmethod\n    def defend(self):\n        pass\n\n\nclass Weapon(ABC):\n    @abstractmethod\n    def slash(self):\n        pass\n    \n    @abstractmethod\n    def shoot(self):\n        pass\n    \n    @abstractmethod\n    def enchant(self):\n        pass\n    \n    @abstractmethod\n    def repair(self):\n        pass\n\n\nclass Enemy(ABC):\n    @abstractmethod\n    def attack(self):\n        pass\n    \n    @abstractmethod\n    def fly(self):\n        pass\n    \n    @abstractmethod\n    def poison(self):\n        pass\n    \n    @abstractmethod\n    def summon_minions(self):\n        pass\n    \n    @abstractmethod\n    def take_damage(self, damage_values):\n        pass\n\n\nclass Mage(GameCharacter):\n    def __init__(self, name, level):\n        self.name = name\n        self.mana = 100\n        self.level = level\n    \n    def melee_attack(self):\n        raise NotImplementedError(\"Mage cannot perform melee attacks!\")\n    \n    def cast_spell(self):\n        if self.mana < 10:\n            print(f\"{self.name} is out of mana!\")\n            return\n        \n        if self.level >= 5 and self.mana >= 30:\n            print(f\"{self.name} casts a powerful lightning storm!\")\n            self.mana -= 30\n        elif self.level >= 3 and self.mana >= 20:\n            print(f\"{self.name} casts a fireball spell!\")\n            self.mana -= 20\n        elif self.mana >= 10:\n            print(f\"{self.name} casts a basic magic missile!\")\n            self.mana -= 10\n    \n    def fly(self):\n        if self.level >= 2:\n            print(f\"{self.name} soars through the air with magic!\")\n        else:\n            print(f\"{self.name} is too inexperienced to fly!\")\n    \n    def defend(self):\n        if self.mana >= 15:\n            print(f\"{self.name} creates a magical barrier!\")\n            self.mana -= 15\n        else:\n            print(f\"{self.name} dodges awkwardly!\")\n\n\nclass Fighter(GameCharacter):\n    def __init__(self, name, has_weapon):\n        self.name = name\n        self.stamina = 100\n        self.has_weapon = has_weapon\n    \n    def melee_attack(self):\n        if self.stamina < 5:\n            print(f\"{self.name} is too exhausted to fight!\")\n            return\n        \n        if self.has_weapon:\n            if self.stamina >= 20:\n                print(f\"{self.name} performs a devastating combo attack!\")\n                self.stamina -= 20\n            elif self.stamina >= 10:\n                print(f\"{self.name} swings weapon with force!\")\n                self.stamina -= 10\n            else:\n                print(f\"{self.name} makes a weak weapon strike!\")\n                self.stamina -= 5\n        else:\n            if self.stamina >= 15:\n                print(f\"{self.name} throws a powerful punch!\")\n                self.stamina -= 15\n            else:\n                print(f\"{self.name} throws a basic punch!\")\n                self.stamina -= 5\n    \n    def cast_spell(self):\n        raise NotImplementedError(\"Fighter cannot cast spells!\")\n    \n    def fly(self):\n        raise NotImplementedError(\"Fighter cannot fly!\")\n    \n    def defend(self):\n        if self.has_weapon and self.stamina >= 10:\n            print(f\"{self.name} blocks with weapon!\")\n            self.stamina -= 10\n        elif self.stamina >= 5:\n            print(f\"{self.name} raises arms to defend!\")\n            self.stamina -= 5\n        else:\n            print(f\"{self.name} barely manages to dodge!\")\n\n\nclass Sword(Weapon):\n    def __init__(self, sharpness, is_magic):\n        self.sharpness = sharpness\n        self.is_magic = is_magic\n    \n    def slash(self):\n        if self.sharpness > 70:\n            print(\"Sword cuts cleanly through the target!\")\n        elif self.sharpness > 30:\n            print(\"Sword makes a decent cut!\")\n        else:\n            print(\"Dull sword barely scratches the target!\")\n    \n    def shoot(self):\n        raise NotImplementedError(\"Sword cannot shoot!\")\n    \n    def enchant(self):\n        if self.is_magic:\n            print(\"Magical sword glows with enhanced power!\")\n            self.sharpness += 10\n        else:\n            raise NotImplementedError(\"Non-magic sword cannot be enchanted!\")\n    \n    def repair(self):\n        if self.sharpness < 100:\n            self.sharpness = min(100, self.sharpness + 25)\n            print(\"Sword has been sharpened and repaired!\")\n        else:\n            print(\"Sword is already in perfect condition!\")\n\n\nclass Bow(Weapon):\n    def __init__(self, arrows, range_val):\n        self.arrows = arrows\n        self.range = range_val\n    \n    def slash(self):\n        raise NotImplementedError(\"Bow cannot slash!\")\n    \n    def shoot(self):\n        if self.arrows <= 0:\n            print(\"No arrows left to shoot!\")\n            return\n        \n        if self.range > 80:\n            print(\"Long-range shot hits the distant target!\")\n        elif self.range > 50:\n            print(\"Medium-range shot finds its mark!\")\n        else:\n            print(\"Short-range shot barely reaches the target!\")\n        self.arrows -= 1\n    \n    def enchant(self):\n        raise NotImplementedError(\"Regular bow cannot be enchanted!\")\n    \n    def repair(self):\n        if self.range < 100:\n            self.range = min(100, self.range + 15)\n            print(\"Bow string tightened and wood polished!\")\n        else:\n            print(\"Bow is in excellent condition!\")\n\n\nclass Orc(Enemy):\n    def __init__(self, name, strength):\n        self.name = name\n        self.health = 100\n        self.strength = strength\n    \n    def attack(self):\n        if self.strength > 50:\n            print(f\"{self.name} delivers a crushing blow!\")\n        else:\n            print(f\"{self.name} swings clumsily!\")\n    \n    def fly(self):\n        raise NotImplementedError(\"Orc cannot fly!\")\n    \n    def poison(self):\n        raise NotImplementedError(\"Orc cannot poison enemies!\")\n    \n    def summon_minions(self):\n        raise NotImplementedError(\"Orc cannot summon minions!\")\n    \n    def take_damage(self, damage_values):\n        total_damage = 0\n        for i in range(len(damage_values)):\n            if damage_values[i] > 0:\n                total_damage += damage_values[i]\n                if damage_values[i] > 20:\n                    print(f\"{self.name} staggers from heavy damage!\")\n        \n        self.health -= total_damage\n        print(f\"{self.name} takes {total_damage} damage! Health: {self.health}\")\n        \n        if self.health <= 0:\n            print(f\"{self.name} has been defeated!\")\n\n\nclass Dragon(Enemy):\n    def __init__(self, name, firepower):\n        self.name = name\n        self.health = 200\n        self.firepower = firepower\n        self.can_fly = True\n    \n    def attack(self):\n        if self.firepower > 80:\n            print(f\"{self.name} breathes devastating flames!\")\n        elif self.firepower > 50:\n            print(f\"{self.name} breathes hot fire!\")\n        else:\n            print(f\"{self.name} breathes weak flames!\")\n    \n    def fly(self):\n        if self.can_fly and self.health > 50:\n            print(f\"{self.name} soars majestically through the sky!\")\n        elif self.health <= 50:\n            print(f\"{self.name} is too wounded to fly!\")\n    \n    def poison(self):\n        raise NotImplementedError(\"Dragon doesn't use poison!\")\n    \n    def summon_minions(self):\n        raise NotImplementedError(\"Dragon doesn't summon minions!\")\n    \n    def take_damage(self, damage_values):\n        total_damage = 0\n        critical_hits = 0\n        \n        for i in range(len(damage_values)):\n            if damage_values[i] > 0:\n                reduced_damage = max(1, damage_values[i] - 5)\n                total_damage += reduced_damage\n                \n                if damage_values[i] > 30:\n                    critical_hits += 1\n                    print(f\"{self.name} roars in pain from critical hit!\")\n        \n        self.health -= total_damage\n        print(f\"{self.name} takes {total_damage} damage ({critical_hits} critical hits)! Health: {self.health}\")\n        \n        if self.health <= 0:\n            print(f\"{self.name} crashes to the ground, defeated!\")\n            self.can_fly = False\n\n\nclass Spider(Enemy):\n    def __init__(self, name):\n        self.name = name\n        self.health = 50\n        self.has_poison = True\n    \n    def attack(self):\n        print(f\"{self.name} bites with venomous fangs!\")\n    \n    def fly(self):\n        raise NotImplementedError(\"Spider cannot fly!\")\n    \n    def poison(self):\n        if self.has_poison:\n            print(f\"{self.name} injects deadly venom!\")\n        else:\n            print(f\"{self.name} has no poison left!\")\n    \n    def summon_minions(self):\n        raise NotImplementedError(\"Spider cannot summon minions!\")\n    \n    def take_damage(self, damage_values):\n        total_damage = 0\n        for damage in damage_values:\n            if damage > 0:\n                amplified_damage = damage + (damage // 2)\n                total_damage += amplified_damage\n                \n                if damage > 10:\n                    print(f\"{self.name} screeches in pain!\")\n        \n        self.health -= total_damage\n        print(f\"{self.name} takes {total_damage} damage! Health: {self.health}\")\n        \n        if self.health <= 0:\n            print(f\"{self.name} curls up and dies!\")",
            "output": "from abc import ABC, abstractmethod\n\nclass MeleeAttacker(ABC):\n    @abstractmethod\n    def melee_attack(self):\n        pass\n\nclass SpellCaster(ABC):\n    @abstractmethod\n    def cast_spell(self):\n        pass\n\nclass Flyer(ABC):\n    @abstractmethod\n    def fly(self):\n        pass\n\nclass Defender(ABC):\n    @abstractmethod\n    def defend(self):\n        pass\n\nclass SlashingWeapon(ABC):\n    @abstractmethod\n    def slash(self):\n        pass\n\nclass RangedWeapon(ABC):\n    @abstractmethod\n    def shoot(self):\n        pass\n\nclass EnchantableWeapon(ABC):\n    @abstractmethod\n    def enchant(self):\n        pass\n\nclass RepairableWeapon(ABC):\n    @abstractmethod\n    def repair(self):\n        pass\n\nclass Attacker(ABC):\n    @abstractmethod\n    def attack(self):\n        pass\n\nclass Poisoner(ABC):\n    @abstractmethod\n    def poison(self):\n        pass\n\nclass MinionSummoner(ABC):\n    @abstractmethod\n    def summon_minions(self):\n        pass\n\nclass Damageable(ABC):\n    @abstractmethod\n    def take_damage(self, damage_values):\n        pass\n\nclass Mage(SpellCaster, Flyer, Defender):\n    def __init__(self, name, level):\n        self.name = name\n        self.mana = 100\n        self.level = level\n    \n    def cast_spell(self):\n        if self.mana < 10:\n            print(f\"{self.name} is out of mana!\")\n            return\n        \n        if self.level >= 5 and self.mana >= 30:\n            print(f\"{self.name} casts a powerful lightning storm!\")\n            self.mana -= 30\n        elif self.level >= 3 and self.mana >= 20:\n            print(f\"{self.name} casts a fireball spell!\")\n            self.mana -= 20\n        elif self.mana >= 10:\n            print(f\"{self.name} casts a basic magic missile!\")\n            self.mana -= 10\n    \n    def fly(self):\n        if self.level >= 2:\n            print(f\"{self.name} soars through the air with magic!\")\n        else:\n            print(f\"{self.name} is too inexperienced to fly!\")\n    \n    def defend(self):\n        if self.mana >= 15:\n            print(f\"{self.name} creates a magical barrier!\")\n            self.mana -= 15\n        else:\n            print(f\"{self.name} dodges awkwardly!\")\n\nclass Fighter(MeleeAttacker, Defender):\n    def __init__(self, name, has_weapon):\n        self.name = name\n        self.stamina = 100\n        self.has_weapon = has_weapon\n    \n    def melee_attack(self):\n        if self.stamina < 5:\n            print(f\"{self.name} is too exhausted to fight!\")\n            return\n        \n        if self.has_weapon:\n            if self.stamina >= 20:\n                print(f\"{self.name} performs a devastating combo attack!\")\n                self.stamina -= 20\n            elif self.stamina >= 10:\n                print(f\"{self.name} swings weapon with force!\")\n                self.stamina -= 10\n            else:\n                print(f\"{self.name} makes a weak weapon strike!\")\n                self.stamina -= 5\n        else:\n            if self.stamina >= 15:\n                print(f\"{self.name} throws a powerful punch!\")\n                self.stamina -= 15\n            else:\n                print(f\"{self.name} throws a basic punch!\")\n                self.stamina -= 5\n    \n    def defend(self):\n        if self.has_weapon and self.stamina >= 10:\n            print(f\"{self.name} blocks with weapon!\")\n            self.stamina -= 10\n        elif self.stamina >= 5:\n            print(f\"{self.name} raises arms to defend!\")\n            self.stamina -= 5\n        else:\n            print(f\"{self.name} barely manages to dodge!\")\n\nclass Sword(SlashingWeapon, EnchantableWeapon, RepairableWeapon):\n    def __init__(self, sharpness, is_magic):\n        self.sharpness = sharpness\n        self.is_magic = is_magic\n    \n    def slash(self):\n        if self.sharpness > 70:\n            print(\"Sword cuts cleanly through the target!\")\n        elif self.sharpness > 30:\n            print(\"Sword makes a decent cut!\")\n        else:\n            print(\"Dull sword barely scratches the target!\")\n    \n    def enchant(self):\n        if self.is_magic:\n            print(\"Magical sword glows with enhanced power!\")\n            self.sharpness += 10\n        else:\n            raise Exception(\"Non-magic sword cannot be enchanted!\")\n    \n    def repair(self):\n        if self.sharpness < 100:\n            self.sharpness = min(100, self.sharpness + 25)\n            print(\"Sword has been sharpened and repaired!\")\n        else:\n            print(\"Sword is already in perfect condition!\")\n\nclass Bow(RangedWeapon, RepairableWeapon):\n    def __init__(self, arrows, range_val):\n        self.arrows = arrows\n        self.range = range_val\n    \n    def shoot(self):\n        if self.arrows <= 0:\n            print(\"No arrows left to shoot!\")\n            return\n        \n        if self.range > 80:\n            print(\"Long-range shot hits the distant target!\")\n        elif self.range > 50:\n            print(\"Medium-range shot finds its mark!\")\n        else:\n            print(\"Short-range shot barely reaches the target!\")\n        self.arrows -= 1\n    \n    def repair(self):\n        if self.range < 100:\n            self.range = min(100, self.range + 15)\n            print(\"Bow string tightened and wood polished!\")\n        else:\n            print(\"Bow is in excellent condition!\")\n\nclass Orc(Attacker, Damageable):\n    def __init__(self, name, strength):\n        self.name = name\n        self.health = 100\n        self.strength = strength\n    \n    def attack(self):\n        if self.strength > 50:\n            print(f\"{self.name} delivers a crushing blow!\")\n        else:\n            print(f\"{self.name} swings clumsily!\")\n    \n    def take_damage(self, damage_values):\n        total_damage = 0\n        for i in range(len(damage_values)):\n            if damage_values[i] > 0:\n                total_damage += damage_values[i]\n                if damage_values[i] > 20:\n                    print(f\"{self.name} staggers from heavy damage!\")\n        \n        self.health -= total_damage\n        print(f\"{self.name} takes {total_damage} damage! Health: {self.health}\")\n        \n        if self.health <= 0:\n            print(f\"{self.name} has been defeated!\")\n\nclass Dragon(Attacker, Flyer, Damageable):\n    def __init__(self, name, firepower):\n        self.name = name\n        self.health = 200\n        self.firepower = firepower\n        self.can_fly = True\n    \n    def attack(self):\n        if self.firepower > 80:\n            print(f\"{self.name} breathes devastating flames!\")\n        elif self.firepower > 50:\n            print(f\"{self.name} breathes hot fire!\")\n        else:\n            print(f\"{self.name} breathes weak flames!\")\n    \n    def fly(self):\n        if self.can_fly and self.health > 50:\n            print(f\"{self.name} soars majestically through the sky!\")\n        elif self.health <= 50:\n            print(f\"{self.name} is too wounded to fly!\")\n    \n    def take_damage(self, damage_values):\n        total_damage = 0\n        critical_hits = 0\n        \n        for i in range(len(damage_values)):\n            if damage_values[i] > 0:\n                reduced_damage = max(1, damage_values[i] - 5)\n                total_damage += reduced_damage\n                \n                if damage_values[i] > 30:\n                    critical_hits += 1\n                    print(f\"{self.name} roars in pain from critical hit!\")\n        \n        self.health -= total_damage\n        print(f\"{self.name} takes {total_damage} damage ({critical_hits} critical hits)! Health: {self.health}\")\n        \n        if self.health <= 0:\n            print(f\"{self.name} crashes to the ground, defeated!\")\n            self.can_fly = False\n\nclass Spider(Attacker, Poisoner, Damageable):\n    def __init__(self, name):\n        self.name = name\n        self.health = 50\n        self.has_poison = True\n    \n    def attack(self):\n        print(f\"{self.name} bites with venomous fangs!\")\n    \n    def poison(self):\n        if self.has_poison:\n            print(f\"{self.name} injects deadly venom!\")\n        else:\n            print(f\"{self.name} has no poison left!\")\n    \n    def take_damage(self, damage_values):\n        total_damage = 0\n        for damage in damage_values:\n            if damage > 0:\n                amplified_damage = damage + (damage // 2)\n                total_damage += amplified_damage\n                \n                if damage > 10:\n                    print(f\"{self.name} screeches in pain!\")\n        \n        self.health -= total_damage\n        print(f\"{self.name} takes {total_damage} damage! Health: {self.health}\")\n        \n        if self.health <= 0:\n            print(f\"{self.name} curls up and dies!\")",
            "level": "HARD",
            "language": "PYTHON",
            "violation": "ISP"
        },
        {
            "input": "from abc import ABC, abstractmethod\n\n\nclass MusicPlayer(ABC):\n    @abstractmethod\n    def play(self):\n        pass\n    \n    @abstractmethod\n    def pause(self):\n        pass\n    \n    @abstractmethod\n    def stop(self):\n        pass\n    \n    @abstractmethod\n    def skip_track(self):\n        pass\n    \n    @abstractmethod\n    def eject(self):\n        pass\n    \n    @abstractmethod\n    def set_volume(self, volume):\n        pass\n    \n    @abstractmethod\n    def set_equalizer(self, preset):\n        pass\n    \n    @abstractmethod\n    def display_track_info(self):\n        pass\n    \n    @abstractmethod\n    def shuffle(self):\n        pass\n    \n    @abstractmethod\n    def repeat(self):\n        pass\n\n\nclass AdvancedAudioDevice(ABC):\n    @abstractmethod\n    def connect_bluetooth(self):\n        pass\n    \n    @abstractmethod\n    def disconnect_bluetooth(self):\n        pass\n    \n    @abstractmethod\n    def pair_device(self, device_name):\n        pass\n    \n    @abstractmethod\n    def enable_microphone(self):\n        pass\n    \n    @abstractmethod\n    def disable_microphone(self):\n        pass\n    \n    @abstractmethod\n    def firmware_update(self):\n        pass\n\n\nclass CDPlayer(MusicPlayer):\n    def __init__(self):\n        self.is_playing = False\n        self.is_paused = False\n        self.current_track = \"Track 1\"\n        self.volume = 50\n        self.shuffle_mode = False\n        self.repeat_mode = False\n    \n    def play(self):\n        self.is_playing = True\n        self.is_paused = False\n        print(f\"CD Player: Playing {self.current_track}\")\n    \n    def pause(self):\n        if self.is_playing:\n            self.is_paused = True\n            self.is_playing = False\n            print(\"CD Player: Paused\")\n    \n    def stop(self):\n        self.is_playing = False\n        self.is_paused = False\n        print(\"CD Player: Stopped\")\n    \n    def skip_track(self):\n        print(\"CD Player: Skipping to next track\")\n        track_number = int(self.current_track.split(\" \")[1]) + 1\n        self.current_track = f\"Track {track_number}\"\n    \n    def eject(self):\n        self.stop()\n        print(\"CD Player: CD ejected\")\n    \n    def set_volume(self, volume):\n        self.volume = volume\n        print(f\"CD Player: Volume set to {volume}\")\n    \n    def set_equalizer(self, preset):\n        print(f\"CD Player: Equalizer set to {preset}\")\n    \n    def display_track_info(self):\n        print(f\"CD Player: Current track - {self.current_track}, Volume: {self.volume}\")\n    \n    def shuffle(self):\n        self.shuffle_mode = not self.shuffle_mode\n        print(f\"CD Player: Shuffle {'ON' if self.shuffle_mode else 'OFF'}\")\n    \n    def repeat(self):\n        self.repeat_mode = not self.repeat_mode\n        print(f\"CD Player: Repeat {'ON' if self.repeat_mode else 'OFF'}\")\n\n\nclass VinylPlayer(MusicPlayer):\n    def __init__(self):\n        self.is_playing = False\n        self.is_paused = False\n        self.current_song = \"Side A\"\n        self.volume = 50\n    \n    def play(self):\n        self.is_playing = True\n        self.is_paused = False\n        print(f\"Vinyl Player: Playing {self.current_song}\")\n    \n    def pause(self):\n        if self.is_playing:\n            self.is_paused = True\n            self.is_playing = False\n            print(\"Vinyl Player: Paused (needle lifted)\")\n    \n    def stop(self):\n        self.is_playing = False\n        self.is_paused = False\n        print(\"Vinyl Player: Stopped\")\n    \n    def skip_track(self):\n        raise NotImplementedError(\"Vinyl players cannot skip tracks - you must manually move the needle!\")\n    \n    def eject(self):\n        raise NotImplementedError(\"Vinyl players don't eject - you must manually remove the record!\")\n    \n    def set_volume(self, volume):\n        self.volume = volume\n        print(f\"Vinyl Player: Volume set to {volume}\")\n    \n    def set_equalizer(self, preset):\n        raise NotImplementedError(\"Vintage vinyl players don't have digital equalizers!\")\n    \n    def display_track_info(self):\n        print(f\"Vinyl Player: Current side - {self.current_song}, Volume: {self.volume}\")\n    \n    def shuffle(self):\n        raise NotImplementedError(\"Cannot shuffle vinyl records!\")\n    \n    def repeat(self):\n        raise NotImplementedError(\"Vinyl players don't have automatic repeat!\")\n\n\nclass Amplifier(MusicPlayer):\n    def __init__(self):\n        self.is_powered_on = False\n        self.volume = 30\n        self.equalizer_setting = \"Flat\"\n        self.bass_boost = False\n    \n    def play(self):\n        raise NotImplementedError(\"Amplifiers don't play music - they amplify audio signals!\")\n    \n    def pause(self):\n        raise NotImplementedError(\"Amplifiers don't control playback!\")\n    \n    def stop(self):\n        self.is_powered_on = False\n        print(\"Amplifier: Powered OFF\")\n    \n    def skip_track(self):\n        raise NotImplementedError(\"Amplifiers don't control track selection!\")\n    \n    def eject(self):\n        raise NotImplementedError(\"Amplifiers don't have media to eject!\")\n    \n    def set_volume(self, volume):\n        if volume < 0:\n            self.volume = 0\n        elif volume > 100:\n            self.volume = 100\n        else:\n            self.volume = volume\n        \n        if self.volume > 80:\n            print(\"Amplifier: Warning - High volume!\")\n        print(f\"Amplifier: Master volume set to {self.volume}\")\n    \n    def set_equalizer(self, preset):\n        preset_lower = preset.lower()\n        if preset_lower in [\"rock\", \"pop\", \"jazz\", \"classical\"]:\n            self.equalizer_setting = preset\n        else:\n            self.equalizer_setting = \"Flat\"\n            print(\"Amplifier: Unknown preset. Defaulting to Flat.\")\n            return\n        print(f\"Amplifier: Equalizer set to {self.equalizer_setting}\")\n    \n    def display_track_info(self):\n        raise NotImplementedError(\"Amplifiers don't track music information!\")\n    \n    def shuffle(self):\n        raise NotImplementedError(\"Amplifiers don't control playback modes!\")\n    \n    def repeat(self):\n        raise NotImplementedError(\"Amplifiers don't control playback modes!\")\n    \n    def power_on(self):\n        self.is_powered_on = True\n        print(\"Amplifier: Powered ON\")\n    \n    def set_bass_boost(self, enabled):\n        self.bass_boost = enabled\n        print(f\"Amplifier: Bass boost {'ON' if enabled else 'OFF'}\")\n\n\nclass BluetoothSpeaker(MusicPlayer, AdvancedAudioDevice):\n    def __init__(self):\n        self.is_connected = False\n        self.volume = 50\n    \n    def play(self):\n        if self.is_connected:\n            print(\"Bluetooth Speaker: Playing audio\")\n        else:\n            raise RuntimeError(\"Bluetooth Speaker not connected\")\n    \n    def pause(self):\n        print(\"Bluetooth Speaker: Paused\")\n    \n    def stop(self):\n        print(\"Bluetooth Speaker: Stopped\")\n    \n    def skip_track(self):\n        print(\"Bluetooth Speaker: Skipping track\")\n    \n    def eject(self):\n        raise NotImplementedError(\"Bluetooth Speakers don't eject media\")\n    \n    def set_volume(self, volume):\n        if 0 <= volume <= 100:\n            self.volume = volume\n        print(f\"Bluetooth Speaker: Volume set to {self.volume}\")\n    \n    def set_equalizer(self, preset):\n        print(f\"Bluetooth Speaker: Equalizer set to {preset}\")\n    \n    def display_track_info(self):\n        print(\"Bluetooth Speaker: No track info available\")\n    \n    def shuffle(self):\n        raise NotImplementedError(\"Bluetooth Speaker doesn't support shuffle mode\")\n    \n    def repeat(self):\n        raise NotImplementedError(\"Bluetooth Speaker doesn't support repeat mode\")\n    \n    def connect_bluetooth(self):\n        self.is_connected = True\n        print(\"Bluetooth Speaker: Connected\")\n    \n    def disconnect_bluetooth(self):\n        self.is_connected = False\n        print(\"Bluetooth Speaker: Disconnected\")\n    \n    def pair_device(self, device_name):\n        print(f\"Bluetooth Speaker: Paired with {device_name}\")\n    \n    def enable_microphone(self):\n        raise NotImplementedError(\"Bluetooth Speaker doesn't support microphone\")\n    \n    def disable_microphone(self):\n        raise NotImplementedError(\"Bluetooth Speaker doesn't support microphone\")\n    \n    def firmware_update(self):\n        print(\"Bluetooth Speaker: Firmware updated\")\n\n\nclass BluetoothHeadphones(MusicPlayer, AdvancedAudioDevice):\n    def __init__(self):\n        self.is_connected = False\n        self.mic_enabled = False\n        self.volume = 30\n    \n    def play(self):\n        print(\"Bluetooth Headphones: Playing\")\n    \n    def pause(self):\n        print(\"Bluetooth Headphones: Paused\")\n    \n    def stop(self):\n        print(\"Bluetooth Headphones: Stopped\")\n    \n    def skip_track(self):\n        print(\"Bluetooth Headphones: Track skipped\")\n    \n    def eject(self):\n        raise NotImplementedError(\"Bluetooth Headphones don't eject media\")\n    \n    def set_volume(self, volume):\n        if volume < 0:\n            self.volume = 0\n        elif volume > 100:\n            self.volume = 100\n        else:\n            self.volume = volume\n        print(f\"Bluetooth Headphones: Volume set to {self.volume}\")\n    \n    def set_equalizer(self, preset):\n        print(f\"Bluetooth Headphones: Equalizer set to {preset}\")\n    \n    def display_track_info(self):\n        print(\"Bluetooth Headphones: Track info unavailable\")\n    \n    def shuffle(self):\n        print(\"Bluetooth Headphones: Shuffle not supported\")\n    \n    def repeat(self):\n        print(\"Bluetooth Headphones: Repeat not supported\")\n    \n    def connect_bluetooth(self):\n        self.is_connected = True\n        print(\"Bluetooth Headphones: Connected\")\n    \n    def disconnect_bluetooth(self):\n        self.is_connected = False\n        print(\"Bluetooth Headphones: Disconnected\")\n    \n    def pair_device(self, device_name):\n        print(f\"Bluetooth Headphones: Paired with {device_name}\")\n    \n    def enable_microphone(self):\n        self.mic_enabled = True\n        print(\"Bluetooth Headphones: Microphone enabled\")\n    \n    def disable_microphone(self):\n        self.mic_enabled = False\n        print(\"Bluetooth Headphones: Microphone disabled\")\n    \n    def firmware_update(self):\n        print(\"Bluetooth Headphones: Firmware updated\")",
            "output": "from abc import ABC, abstractmethod\n\nclass PlaybackController(ABC):\n    @abstractmethod\n    def play(self):\n        pass\n    \n    @abstractmethod\n    def pause(self):\n        pass\n    \n    @abstractmethod\n    def stop(self):\n        pass\n\nclass TrackController(ABC):\n    @abstractmethod\n    def skip_track(self):\n        pass\n\nclass MediaEjector(ABC):\n    @abstractmethod\n    def eject(self):\n        pass\n\nclass VolumeController(ABC):\n    @abstractmethod\n    def set_volume(self, volume):\n        pass\n\nclass EqualizerController(ABC):\n    @abstractmethod\n    def set_equalizer(self, preset):\n        pass\n\nclass TrackInfoDisplay(ABC):\n    @abstractmethod\n    def display_track_info(self):\n        pass\n\nclass PlaybackModeController(ABC):\n    @abstractmethod\n    def shuffle(self):\n        pass\n    \n    @abstractmethod\n    def repeat(self):\n        pass\n\nclass BluetoothConnector(ABC):\n    @abstractmethod\n    def connect_bluetooth(self):\n        pass\n    \n    @abstractmethod\n    def disconnect_bluetooth(self):\n        pass\n    \n    @abstractmethod\n    def pair_device(self, device_name):\n        pass\n\nclass MicrophoneController(ABC):\n    @abstractmethod\n    def enable_microphone(self):\n        pass\n    \n    @abstractmethod\n    def disable_microphone(self):\n        pass\n\nclass FirmwareUpdatable(ABC):\n    @abstractmethod\n    def firmware_update(self):\n        pass\n\nclass CDPlayer(PlaybackController, TrackController, MediaEjector, VolumeController, EqualizerController, TrackInfoDisplay, PlaybackModeController):\n    def __init__(self):\n        self.is_playing = False\n        self.is_paused = False\n        self.current_track = \"Track 1\"\n        self.volume = 50\n        self.shuffle_mode = False\n        self.repeat_mode = False\n    \n    def play(self):\n        self.is_playing = True\n        self.is_paused = False\n        print(f\"CD Player: Playing {self.current_track}\")\n    \n    def pause(self):\n        if self.is_playing:\n            self.is_paused = True\n            self.is_playing = False\n            print(\"CD Player: Paused\")\n    \n    def stop(self):\n        self.is_playing = False\n        self.is_paused = False\n        print(\"CD Player: Stopped\")\n    \n    def skip_track(self):\n        print(\"CD Player: Skipping to next track\")\n        track_num = int(self.current_track.split(\" \")[1]) + 1\n        self.current_track = f\"Track {track_num}\"\n    \n    def eject(self):\n        self.stop()\n        print(\"CD Player: CD ejected\")\n    \n    def set_volume(self, volume):\n        self.volume = volume\n        print(f\"CD Player: Volume set to {volume}\")\n    \n    def set_equalizer(self, preset):\n        print(f\"CD Player: Equalizer set to {preset}\")\n    \n    def display_track_info(self):\n        print(f\"CD Player: Current track - {self.current_track}, Volume: {self.volume}\")\n    \n    def shuffle(self):\n        self.shuffle_mode = not self.shuffle_mode\n        print(f\"CD Player: Shuffle {'ON' if self.shuffle_mode else 'OFF'}\")\n    \n    def repeat(self):\n        self.repeat_mode = not self.repeat_mode\n        print(f\"CD Player: Repeat {'ON' if self.repeat_mode else 'OFF'}\")\n\nclass VinylPlayer(PlaybackController, VolumeController, TrackInfoDisplay):\n    def __init__(self):\n        self.is_playing = False\n        self.is_paused = False\n        self.current_song = \"Side A\"\n        self.volume = 50\n    \n    def play(self):\n        self.is_playing = True\n        self.is_paused = False\n        print(f\"Vinyl Player: Playing {self.current_song}\")\n    \n    def pause(self):\n        if self.is_playing:\n            self.is_paused = True\n            self.is_playing = False\n            print(\"Vinyl Player: Paused (needle lifted)\")\n    \n    def stop(self):\n        self.is_playing = False\n        self.is_paused = False\n        print(\"Vinyl Player: Stopped\")\n    \n    def set_volume(self, volume):\n        self.volume = volume\n        print(f\"Vinyl Player: Volume set to {volume}\")\n    \n    def display_track_info(self):\n        print(f\"Vinyl Player: Current side - {self.current_song}, Volume: {self.volume}\")\n\nclass Amplifier(VolumeController, EqualizerController):\n    def __init__(self):\n        self.is_powered_on = False\n        self.volume = 30\n        self.equalizer_setting = \"Flat\"\n        self.bass_boost = False\n    \n    def stop(self):\n        self.is_powered_on = False\n        print(\"Amplifier: Powered OFF\")\n    \n    def set_volume(self, volume):\n        if volume < 0:\n            self.volume = 0\n        elif volume > 100:\n            self.volume = 100\n        else:\n            self.volume = volume\n        \n        if self.volume > 80:\n            print(\"Amplifier: Warning - High volume!\")\n        print(f\"Amplifier: Master volume set to {self.volume}\")\n    \n    def set_equalizer(self, preset):\n        preset_lower = preset.lower()\n        if preset_lower in [\"rock\", \"pop\", \"jazz\", \"classical\"]:\n            self.equalizer_setting = preset\n        else:\n            self.equalizer_setting = \"Flat\"\n            print(\"Amplifier: Unknown preset. Defaulting to Flat.\")\n            return\n        print(f\"Amplifier: Equalizer set to {self.equalizer_setting}\")\n    \n    def power_on(self):\n        self.is_powered_on = True\n        print(\"Amplifier: Powered ON\")\n    \n    def set_bass_boost(self, enabled):\n        self.bass_boost = enabled\n        print(f\"Amplifier: Bass boost {'ON' if enabled else 'OFF'}\")\n\nclass BluetoothSpeaker(PlaybackController, TrackController, VolumeController, EqualizerController, TrackInfoDisplay, BluetoothConnector, FirmwareUpdatable):\n    def __init__(self):\n        self.is_connected = False\n        self.volume = 50\n    \n    def play(self):\n        if self.is_connected:\n            print(\"Bluetooth Speaker: Playing audio\")\n        else:\n            raise Exception(\"Bluetooth Speaker not connected\")\n    \n    def pause(self):\n        print(\"Bluetooth Speaker: Paused\")\n    \n    def stop(self):\n        print(\"Bluetooth Speaker: Stopped\")\n    \n    def skip_track(self):\n        print(\"Bluetooth Speaker: Skipping track\")\n    \n    def set_volume(self, volume):\n        if 0 <= volume <= 100:\n            self.volume = volume\n        print(f\"Bluetooth Speaker: Volume set to {self.volume}\")\n    \n    def set_equalizer(self, preset):\n        print(f\"Bluetooth Speaker: Equalizer set to {preset}\")\n    \n    def display_track_info(self):\n        print(\"Bluetooth Speaker: No track info available\")\n    \n    def connect_bluetooth(self):\n        self.is_connected = True\n        print(\"Bluetooth Speaker: Connected\")\n    \n    def disconnect_bluetooth(self):\n        self.is_connected = False\n        print(\"Bluetooth Speaker: Disconnected\")\n    \n    def pair_device(self, device_name):\n        print(f\"Bluetooth Speaker: Paired with {device_name}\")\n    \n    def firmware_update(self):\n        print(\"Bluetooth Speaker: Firmware updated\")\n\nclass BluetoothHeadphones(PlaybackController, TrackController, VolumeController, EqualizerController, TrackInfoDisplay, BluetoothConnector, MicrophoneController, FirmwareUpdatable):\n    def __init__(self):\n        self.is_connected = False\n        self.mic_enabled = False\n        self.volume = 30\n    \n    def play(self):\n        print(\"Bluetooth Headphones: Playing\")\n    \n    def pause(self):\n        print(\"Bluetooth Headphones: Paused\")\n    \n    def stop(self):\n        print(\"Bluetooth Headphones: Stopped\")\n    \n    def skip_track(self):\n        print(\"Bluetooth Headphones: Track skipped\")\n    \n    def set_volume(self, volume):\n        if volume < 0:\n            self.volume = 0\n        elif volume > 100:\n            self.volume = 100\n        else:\n            self.volume = volume\n        print(f\"Bluetooth Headphones: Volume set to {self.volume}\")\n    \n    def set_equalizer(self, preset):\n        print(f\"Bluetooth Headphones: Equalizer set to {preset}\")\n    \n    def display_track_info(self):\n        print(\"Bluetooth Headphones: Track info unavailable\")\n    \n    def connect_bluetooth(self):\n        self.is_connected = True\n        print(\"Bluetooth Headphones: Connected\")\n    \n    def disconnect_bluetooth(self):\n        self.is_connected = False\n        print(\"Bluetooth Headphones: Disconnected\")\n    \n    def pair_device(self, device_name):\n        print(f\"Bluetooth Headphones: Paired with {device_name}\")\n    \n    def enable_microphone(self):\n        self.mic_enabled = True\n        print(\"Bluetooth Headphones: Microphone enabled\")\n    \n    def disable_microphone(self):\n        self.mic_enabled = False\n        print(\"Bluetooth Headphones: Microphone disabled\")\n    \n    def firmware_update(self):\n        print(\"Bluetooth Headphones: Firmware updated\")",
            "level": "HARD",
            "language": "PYTHON",
            "violation": "ISP"
        },
        {
            "input": "from abc import ABC, abstractmethod\n\nclass RestaurantWorker(ABC):\n    @abstractmethod\n    def cook_food(self):\n        pass\n    \n    @abstractmethod\n    def serve_customers(self):\n        pass\n    \n    @abstractmethod\n    def clean_tables(self):\n        pass\n    \n    @abstractmethod\n    def manage_staff(self):\n        pass\n    \n    @abstractmethod\n    def handle_payments(self):\n        pass\n    \n    @abstractmethod\n    def order_supplies(self):\n        pass\n    \n    @abstractmethod\n    def train_new_employees(self):\n        pass\n    \n    @abstractmethod\n    def conduct_meetings(self):\n        pass\n\nclass MachineWorker(ABC):\n    @abstractmethod\n    def wash_dishes(self):\n        pass\n    \n    @abstractmethod\n    def vacuum_floor(self):\n        pass\n    \n    @abstractmethod\n    def self_diagnose(self):\n        pass\n    \n    @abstractmethod\n    def play_music(self):\n        pass\n    \n    @abstractmethod\n    def adjust_temperature(self):\n        pass\n    \n    @abstractmethod\n    def security_scan(self):\n        pass\n    \n    @abstractmethod\n    def update_software(self):\n        pass\n    \n    @abstractmethod\n    def generate_reports(self):\n        pass\n\nclass Chef(RestaurantWorker):\n    def __init__(self):\n        self.meals_cooked = 0\n        self.recipes = [\"pasta\", \"pizza\", \"salad\", \"soup\", \"steak\"]\n        self.is_head_chef = True\n    \n    def cook_food(self):\n        for i in range(len(self.recipes)):\n            if self.meals_cooked < 50:\n                if self.recipes[i] == \"steak\" and self.is_head_chef:\n                    print(f\"Head Chef is preparing premium {self.recipes[i]}\")\n                    self.meals_cooked += 2\n                elif self.recipes[i] == \"pasta\" or self.recipes[i] == \"pizza\":\n                    print(f\"Chef is cooking {self.recipes[i]}\")\n                    self.meals_cooked += 1\n                else:\n                    print(f\"Chef is preparing simple {self.recipes[i]}\")\n    \n    def serve_customers(self):\n        print(\"Chef does not serve customers.\")\n    \n    def clean_tables(self):\n        print(\"Chef does not clean tables.\")\n    \n    def manage_staff(self):\n        if self.is_head_chef:\n            print(\"Head Chef is managing kitchen staff.\")\n        else:\n            print(\"Chef does not manage staff.\")\n    \n    def handle_payments(self):\n        print(\"Chef does not handle payments.\")\n    \n    def order_supplies(self):\n        if self.is_head_chef:\n            for i in range(1, 4):\n                print(f\"Head Chef ordering kitchen supplies batch {i}\")\n        else:\n            print(\"Chef does not order supplies.\")\n    \n    def train_new_employees(self):\n        print(\"Chef does not train employees.\")\n    \n    def conduct_meetings(self):\n        print(\"Chef does not conduct meetings.\")\n\nclass Waiter(RestaurantWorker):\n    def __init__(self):\n        self.tables_served = 0\n        self.is_experienced = False\n        self.customer_types = [\"regular\", \"vip\", \"family\", \"business\"]\n    \n    def cook_food(self):\n        print(\"Waiter does not cook food.\")\n    \n    def serve_customers(self):\n        for customer_type in self.customer_types:\n            if self.tables_served < 20:\n                if customer_type == \"vip\" and self.is_experienced:\n                    print(\"Experienced waiter serving VIP customers\")\n                    self.tables_served += 2\n                elif customer_type == \"family\":\n                    print(\"Waiter serving family table\")\n                    self.tables_served += 1\n                elif customer_type == \"business\":\n                    for i in range(1, 3):\n                        print(f\"Waiter taking business order {i}\")\n                    self.tables_served += 1\n                else:\n                    print(f\"Waiter serving {customer_type} customers\")\n                    self.tables_served += 1\n    \n    def clean_tables(self):\n        for table in range(1, 11):\n            if table % 2 == 0:\n                print(f\"Waiter cleaning table {table} thoroughly\")\n            elif table > 5:\n                print(f\"Waiter quick clean table {table}\")\n            else:\n                print(f\"Waiter wiping table {table}\")\n    \n    def manage_staff(self):\n        print(\"Waiter does not manage staff.\")\n    \n    def handle_payments(self):\n        print(\"Waiter does not handle payments.\")\n    \n    def order_supplies(self):\n        print(\"Waiter does not order supplies.\")\n    \n    def train_new_employees(self):\n        print(\"Waiter does not train employees.\")\n    \n    def conduct_meetings(self):\n        print(\"Waiter does not conduct meetings.\")\n\nclass Manager(RestaurantWorker):\n    def __init__(self):\n        self.conflict = True\n        self.team_size = 15\n        self.departments = [\"kitchen\", \"service\", \"cleaning\", \"security\"]\n        self.is_busy = False\n    \n    def cook_food(self):\n        print(\"Manager does not cook.\")\n    \n    def serve_customers(self):\n        print(\"Manager does not serve.\")\n    \n    def clean_tables(self):\n        print(\"Manager does not clean.\")\n    \n    def manage_staff(self):\n        for dept in self.departments:\n            if self.conflict and dept == \"kitchen\":\n                print(\"Manager resolving kitchen conflict\")\n            elif self.team_size > 10 and dept == \"service\":\n                for i in range(1, 4):\n                    print(f\"Manager scheduling service team shift {i}\")\n            elif dept == \"security\" and not self.is_busy:\n                print(\"Manager checking security protocols\")\n            else:\n                print(f\"Manager overseeing {dept} department\")\n    \n    def handle_payments(self):\n        for transaction in range(1, 6):\n            if transaction > 3:\n                print(f\"Manager approving large payment {transaction}\")\n            else:\n                print(f\"Manager processing payment {transaction}\")\n    \n    def order_supplies(self):\n        print(\"Manager coordinating supply orders\")\n    \n    def train_new_employees(self):\n        print(\"Manager conducting orientation\")\n    \n    def conduct_meetings(self):\n        print(\"Manager leading staff meetings\")\n\nclass Cashier(RestaurantWorker):\n    def __init__(self):\n        self.daily_revenue = 0.0\n        self.customers_served = 0\n    \n    def cook_food(self):\n        print(\"Cashier does not cook food.\")\n    \n    def serve_customers(self):\n        print(\"Cashier does not serve at tables.\")\n    \n    def clean_tables(self):\n        print(\"Cashier does not clean tables.\")\n    \n    def manage_staff(self):\n        print(\"Cashier does not manage staff.\")\n    \n    def handle_payments(self):\n        payments = [15.50, 23.75, 45.00, 12.25, 67.80]\n        for payment in payments:\n            if payment > 50.00:\n                print(f\"Cashier processing large payment: ${payment}\")\n                self.daily_revenue += payment * 1.1\n            elif payment < 20.00:\n                print(f\"Cashier handling small payment: ${payment}\")\n                self.daily_revenue += payment\n            else:\n                print(f\"Cashier processing payment: ${payment}\")\n                self.daily_revenue += payment\n            self.customers_served += 1\n    \n    def order_supplies(self):\n        print(\"Cashier does not order supplies.\")\n    \n    def train_new_employees(self):\n        print(\"Cashier does not train employees.\")\n    \n    def conduct_meetings(self):\n        print(\"Cashier does not conduct meetings.\")\n\nclass Dishwasher(MachineWorker):\n    def __init__(self):\n        self.dirty_items = 25\n        self.is_industrial_grade = True\n        self.dish_types = [\"plates\", \"cups\", \"utensils\", \"pots\"]\n    \n    def wash_dishes(self):\n        for dish_type in self.dish_types:\n            if self.dirty_items > 0:\n                if dish_type == \"pots\" and self.is_industrial_grade:\n                    for cycle in range(1, 4):\n                        print(f\"Industrial dishwasher cleaning {dish_type} cycle {cycle}\")\n                        self.dirty_items -= 2\n                elif dish_type == \"plates\" or dish_type == \"cups\":\n                    print(f\"Dishwasher cleaning {self.dirty_items} {dish_type}\")\n                    self.dirty_items -= 5\n                else:\n                    print(f\"Dishwasher processing {dish_type}\")\n                    self.dirty_items -= 3\n            else:\n                print(f\"No {dish_type} to clean.\")\n    \n    def vacuum_floor(self):\n        print(\"Dishwasher cannot vacuum the floor.\")\n    \n    def self_diagnose(self):\n        for system in range(1, 5):\n            if system == 1:\n                print(\"Dishwasher checking water system\")\n            elif system == 2:\n                print(\"Dishwasher testing heating element\")\n            else:\n                print(f\"Dishwasher running diagnostic {system}\")\n    \n    def play_music(self):\n        print(\"Dishwasher cannot play music.\")\n    \n    def adjust_temperature(self):\n        print(\"Dishwasher cannot adjust room temperature.\")\n    \n    def security_scan(self):\n        print(\"Dishwasher cannot perform security scan.\")\n    \n    def update_software(self):\n        print(\"Dishwasher cannot update software.\")\n    \n    def generate_reports(self):\n        print(\"Dishwasher cannot generate reports.\")\n\nclass VacuumCleaner(MachineWorker):\n    def __init__(self):\n        self.is_charged = False\n        self.battery_level = 30\n        self.cleaning_modes = [\"eco\", \"normal\", \"turbo\"]\n    \n    def wash_dishes(self):\n        print(\"Vacuum cleaner cannot wash dishes.\")\n    \n    def vacuum_floor(self):\n        for mode in self.cleaning_modes:\n            if self.is_charged or self.battery_level > 20:\n                if mode == \"turbo\" and self.battery_level > 50:\n                    print(\"Vacuum cleaner using turbo mode\")\n                    self.battery_level -= 15\n                elif mode == \"normal\" and self.battery_level > 30:\n                    for room in range(1, 4):\n                        print(f\"Vacuum cleaning room {room} in normal mode\")\n                    self.battery_level -= 10\n                elif mode == \"eco\":\n                    print(\"Vacuum using eco mode to save battery\")\n                    self.battery_level -= 5\n                else:\n                    print(f\"Battery too low for {mode} mode\")\n            else:\n                print(\"Vacuum cleaner battery critically low\")\n    \n    def self_diagnose(self):\n        print(\"Vacuum cleaner running diagnostics.\")\n    \n    def play_music(self):\n        print(\"Vacuum cleaner cannot play music.\")\n    \n    def adjust_temperature(self):\n        print(\"Vacuum cleaner cannot adjust temperature.\")\n    \n    def security_scan(self):\n        print(\"Vacuum cleaner cannot perform security scan.\")\n    \n    def update_software(self):\n        print(\"Vacuum cleaner cannot update software.\")\n    \n    def generate_reports(self):\n        print(\"Vacuum cleaner cannot generate reports.\")\n\nclass SmartKiosk(MachineWorker):\n    def __init__(self):\n        self.is_online = True\n        self.customer_interactions = 0\n        self.services = [\"orders\", \"payments\", \"information\", \"entertainment\"]\n    \n    def wash_dishes(self):\n        print(\"Smart kiosk cannot wash dishes.\")\n    \n    def vacuum_floor(self):\n        print(\"Smart kiosk cannot vacuum floor.\")\n    \n    def self_diagnose(self):\n        for component in range(1, 6):\n            if component == 1:\n                print(\"Kiosk checking network connection\")\n            elif component == 2 and self.is_online:\n                print(\"Kiosk testing payment processor\")\n            elif component > 3:\n                print(f\"Kiosk running system check {component}\")\n            else:\n                print(f\"Kiosk diagnostic component {component}\")\n    \n    def play_music(self):\n        for service in self.services:\n            if service == \"entertainment\" and self.customer_interactions < 50:\n                for playlist in range(1, 4):\n                    print(f\"Kiosk playing background music playlist {playlist}\")\n            elif service == \"information\":\n                print(\"Kiosk providing audio information\")\n    \n    def adjust_temperature(self):\n        print(\"Smart kiosk cannot adjust temperature.\")\n    \n    def security_scan(self):\n        if self.is_online:\n            print(\"Kiosk performing security scan\")\n        else:\n            print(\"Kiosk offline - cannot scan\")\n    \n    def update_software(self):\n        print(\"Kiosk updating software\")\n    \n    def generate_reports(self):\n        print(\"Kiosk generating usage reports\")\n\nclass SecurityBot(MachineWorker):\n    def __init__(self):\n        self.is_patrolling = True\n        self.alert_level = 2\n        self.zones = [\"entrance\", \"dining\", \"kitchen\", \"storage\"]\n    \n    def wash_dishes(self):\n        print(\"Security bot cannot wash dishes.\")\n    \n    def vacuum_floor(self):\n        print(\"Security bot cannot vacuum floor.\")\n    \n    def self_diagnose(self):\n        print(\"Security bot running diagnostics.\")\n    \n    def play_music(self):\n        print(\"Security bot cannot play music.\")\n    \n    def adjust_temperature(self):\n        print(\"Security bot cannot adjust temperature.\")\n    \n    def security_scan(self):\n        for zone in self.zones:\n            if self.is_patrolling and self.alert_level > 1:\n                if zone == \"entrance\" or zone == \"storage\":\n                    for scan in range(1, 3):\n                        print(f\"Security bot high-priority scan {zone} pass {scan}\")\n                elif self.alert_level > 3:\n                    print(f\"Security bot emergency scan {zone}\")\n                else:\n                    print(f\"Security bot scanning {zone}\")\n    \n    def update_software(self):\n        print(\"Security bot updating patrol algorithms\")\n    \n    def generate_reports(self):\n        print(\"Security bot generating incident reports\")",
            "output": "from abc import ABC, abstractmethod\n\nclass FoodPreparation(ABC):\n    @abstractmethod\n    def cook_food(self):\n        pass\n\nclass CustomerService(ABC):\n    @abstractmethod\n    def serve_customers(self):\n        pass\n\nclass Cleaning(ABC):\n    @abstractmethod\n    def clean_tables(self):\n        pass\n\nclass StaffManagement(ABC):\n    @abstractmethod\n    def manage_staff(self):\n        pass\n\nclass PaymentProcessing(ABC):\n    @abstractmethod\n    def handle_payments(self):\n        pass\n\nclass SupplyManagement(ABC):\n    @abstractmethod\n    def order_supplies(self):\n        pass\n\nclass Training(ABC):\n    @abstractmethod\n    def train_new_employees(self):\n        pass\n\nclass MeetingManagement(ABC):\n    @abstractmethod\n    def conduct_meetings(self):\n        pass\n\nclass DishWashing(ABC):\n    @abstractmethod\n    def wash_dishes(self):\n        pass\n\nclass FloorCleaning(ABC):\n    @abstractmethod\n    def vacuum_floor(self):\n        pass\n\nclass SelfDiagnostics(ABC):\n    @abstractmethod\n    def self_diagnose(self):\n        pass\n\nclass Entertainment(ABC):\n    @abstractmethod\n    def play_music(self):\n        pass\n\nclass TemperatureControl(ABC):\n    @abstractmethod\n    def adjust_temperature(self):\n        pass\n\nclass SecurityOperations(ABC):\n    @abstractmethod\n    def security_scan(self):\n        pass\n\nclass SoftwareManagement(ABC):\n    @abstractmethod\n    def update_software(self):\n        pass\n\nclass ReportGeneration(ABC):\n    @abstractmethod\n    def generate_reports(self):\n        pass\n\nclass Chef(FoodPreparation, StaffManagement, SupplyManagement):\n    def __init__(self):\n        self.meals_cooked = 0\n        self.recipes = [\"pasta\", \"pizza\", \"salad\", \"soup\", \"steak\"]\n        self.is_head_chef = True\n\n    def cook_food(self):\n        for i in range(len(self.recipes)):\n            if self.meals_cooked < 50:\n                if self.recipes[i] == \"steak\" and self.is_head_chef:\n                    print(f\"Head Chef is preparing premium {self.recipes[i]}\")\n                    self.meals_cooked += 2\n                elif self.recipes[i] == \"pasta\" or self.recipes[i] == \"pizza\":\n                    print(f\"Chef is cooking {self.recipes[i]}\")\n                    self.meals_cooked += 1\n                else:\n                    print(f\"Chef is preparing simple {self.recipes[i]}\")\n\n    def manage_staff(self):\n        if self.is_head_chef:\n            print(\"Head Chef is managing kitchen staff.\")\n        else:\n            print(\"Chef does not manage staff.\")\n\n    def order_supplies(self):\n        if self.is_head_chef:\n            for i in range(1, 4):\n                print(f\"Head Chef ordering kitchen supplies batch {i}\")\n        else:\n            print(\"Chef does not order supplies.\")\n\nclass Waiter(CustomerService, Cleaning):\n    def __init__(self):\n        self.tables_served = 0\n        self.is_experienced = False\n        self.customer_types = [\"regular\", \"vip\", \"family\", \"business\"]\n\n    def serve_customers(self):\n        for customer_type in self.customer_types:\n            if self.tables_served < 20:\n                if customer_type == \"vip\" and self.is_experienced:\n                    print(\"Experienced waiter serving VIP customers\")\n                    self.tables_served += 2\n                elif customer_type == \"family\":\n                    print(\"Waiter serving family table\")\n                    self.tables_served += 1\n                elif customer_type == \"business\":\n                    for i in range(1, 3):\n                        print(f\"Waiter taking business order {i}\")\n                    self.tables_served += 1\n                else:\n                    print(f\"Waiter serving {customer_type} customers\")\n                    self.tables_served += 1\n\n    def clean_tables(self):\n        for table in range(1, 11):\n            if table % 2 == 0:\n                print(f\"Waiter cleaning table {table} thoroughly\")\n            elif table > 5:\n                print(f\"Waiter quick clean table {table}\")\n            else:\n                print(f\"Waiter wiping table {table}\")\n\nclass Manager(StaffManagement, PaymentProcessing, SupplyManagement, Training, MeetingManagement):\n    def __init__(self):\n        self.conflict = True\n        self.team_size = 15\n        self.departments = [\"kitchen\", \"service\", \"cleaning\", \"security\"]\n        self.is_busy = False\n\n    def manage_staff(self):\n        for dept in self.departments:\n            if self.conflict and dept == \"kitchen\":\n                print(\"Manager resolving kitchen conflict\")\n            elif self.team_size > 10 and dept == \"service\":\n                for i in range(1, 4):\n                    print(f\"Manager scheduling service team shift {i}\")\n            elif dept == \"security\" and not self.is_busy:\n                print(\"Manager checking security protocols\")\n            else:\n                print(f\"Manager overseeing {dept} department\")\n\n    def handle_payments(self):\n        for transaction in range(1, 6):\n            if transaction > 3:\n                print(f\"Manager approving large payment {transaction}\")\n            else:\n                print(f\"Manager processing payment {transaction}\")\n\n    def order_supplies(self):\n        print(\"Manager coordinating supply orders\")\n\n    def train_new_employees(self):\n        print(\"Manager conducting orientation\")\n\n    def conduct_meetings(self):\n        print(\"Manager leading staff meetings\")\n\nclass Cashier(PaymentProcessing):\n    def __init__(self):\n        self.daily_revenue = 0\n        self.customers_served = 0\n\n    def handle_payments(self):\n        payments = [15.50, 23.75, 45.00, 12.25, 67.80]\n        for payment in payments:\n            if payment > 50.00:\n                print(f\"Cashier processing large payment: ${payment}\")\n                self.daily_revenue += payment * 1.1\n            elif payment < 20.00:\n                print(f\"Cashier handling small payment: ${payment}\")\n                self.daily_revenue += payment\n            else:\n                print(f\"Cashier processing payment: ${payment}\")\n                self.daily_revenue += payment\n            self.customers_served += 1\n\nclass Dishwasher(DishWashing, SelfDiagnostics):\n    def __init__(self):\n        self.dirty_items = 25\n        self.is_industrial_grade = True\n        self.dish_types = [\"plates\", \"cups\", \"utensils\", \"pots\"]\n\n    def wash_dishes(self):\n        for dish_type in self.dish_types:\n            if self.dirty_items > 0:\n                if dish_type == \"pots\" and self.is_industrial_grade:\n                    for cycle in range(1, 4):\n                        print(f\"Industrial dishwasher cleaning {dish_type} cycle {cycle}\")\n                        self.dirty_items -= 2\n                elif dish_type == \"plates\" or dish_type == \"cups\":\n                    print(f\"Dishwasher cleaning {self.dirty_items} {dish_type}\")\n                    self.dirty_items -= 5\n                else:\n                    print(f\"Dishwasher processing {dish_type}\")\n                    self.dirty_items -= 3\n            else:\n                print(f\"No {dish_type} to clean.\")\n\n    def self_diagnose(self):\n        for system in range(1, 5):\n            if system == 1:\n                print(\"Dishwasher checking water system\")\n            elif system == 2:\n                print(\"Dishwasher testing heating element\")\n            else:\n                print(f\"Dishwasher running diagnostic {system}\")\n\nclass VacuumCleaner(FloorCleaning, SelfDiagnostics):\n    def __init__(self):\n        self.is_charged = False\n        self.battery_level = 30\n        self.cleaning_modes = [\"eco\", \"normal\", \"turbo\"]\n\n    def vacuum_floor(self):\n        for mode in self.cleaning_modes:\n            if self.is_charged or self.battery_level > 20:\n                if mode == \"turbo\" and self.battery_level > 50:\n                    print(\"Vacuum cleaner using turbo mode\")\n                    self.battery_level -= 15\n                elif mode == \"normal\" and self.battery_level > 30:\n                    for room in range(1, 4):\n                        print(f\"Vacuum cleaning room {room} in normal mode\")\n                    self.battery_level -= 10\n                elif mode == \"eco\":\n                    print(\"Vacuum using eco mode to save battery\")\n                    self.battery_level -= 5\n                else:\n                    print(f\"Battery too low for {mode} mode\")\n            else:\n                print(\"Vacuum cleaner battery critically low\")\n\n    def self_diagnose(self):\n        print(\"Vacuum cleaner running diagnostics.\")\n\nclass SmartKiosk(SelfDiagnostics, Entertainment, SecurityOperations, SoftwareManagement, ReportGeneration):\n    def __init__(self):\n        self.is_online = True\n        self.customer_interactions = 0\n        self.services = [\"orders\", \"payments\", \"information\", \"entertainment\"]\n\n    def self_diagnose(self):\n        for component in range(1, 6):\n            if component == 1:\n                print(\"Kiosk checking network connection\")\n            elif component == 2 and self.is_online:\n                print(\"Kiosk testing payment processor\")\n            elif component > 3:\n                print(f\"Kiosk running system check {component}\")\n            else:\n                print(f\"Kiosk diagnostic component {component}\")\n\n    def play_music(self):\n        for service in self.services:\n            if service == \"entertainment\" and self.customer_interactions < 50:\n                for playlist in range(1, 4):\n                    print(f\"Kiosk playing background music playlist {playlist}\")\n            elif service == \"information\":\n                print(\"Kiosk providing audio information\")\n\n    def security_scan(self):\n        if self.is_online:\n            print(\"Kiosk performing security scan\")\n        else:\n            print(\"Kiosk offline - cannot scan\")\n\n    def update_software(self):\n        print(\"Kiosk updating software\")\n\n    def generate_reports(self):\n        print(\"Kiosk generating usage reports\")\n\nclass SecurityBot(SelfDiagnostics, SecurityOperations, SoftwareManagement, ReportGeneration):\n    def __init__(self):\n        self.is_patrolling = True\n        self.alert_level = 2\n        self.zones = [\"entrance\", \"dining\", \"kitchen\", \"storage\"]\n\n    def self_diagnose(self):\n        print(\"Security bot running diagnostics.\")\n\n    def security_scan(self):\n        for zone in self.zones:\n            if self.is_patrolling and self.alert_level > 1:\n                if zone == \"entrance\" or zone == \"storage\":\n                    for scan in range(1, 3):\n                        print(f\"Security bot high-priority scan {zone} pass {scan}\")\n                elif self.alert_level > 3:\n                    print(f\"Security bot emergency scan {zone}\")\n                else:\n                    print(f\"Security bot scanning {zone}\")\n\n    def update_software(self):\n        print(\"Security bot updating patrol algorithms\")\n\n    def generate_reports(self):\n        print(\"Security bot generating incident reports\")",
            "level": "HARD",
            "language": "PYTHON",
            "violation": "ISP"
        },
        {
            "input": "from abc import ABC, abstractmethod\n\nclass UnsupportedOperationException(Exception):\n    pass\n\nclass Vehicle(ABC):\n    @abstractmethod\n    def start(self):\n        pass\n    \n    @abstractmethod\n    def stop(self):\n        pass\n    \n    @abstractmethod\n    def fly(self):\n        pass\n    \n    @abstractmethod\n    def dive(self):\n        pass\n\nclass Operator(ABC):\n    @abstractmethod\n    def steer(self):\n        pass\n    \n    @abstractmethod\n    def navigate_air(self):\n        pass\n    \n    @abstractmethod\n    def navigate_water(self):\n        pass\n    \n    @abstractmethod\n    def communicate_with_tower(self):\n        pass\n\nclass EnergySystem(ABC):\n    @abstractmethod\n    def charge_electrically(self):\n        pass\n    \n    @abstractmethod\n    def refuel_gasoline(self):\n        pass\n    \n    @abstractmethod\n    def refuel_diesel(self):\n        pass\n    \n    @abstractmethod\n    def load_nuclear_fuel(self):\n        pass\n    \n    @abstractmethod\n    def check_battery_level(self):\n        pass\n    \n    @abstractmethod\n    def maintain_engine(self):\n        pass\n\nclass Driver(Operator):\n    def __init__(self, name):\n        self.name = name\n    \n    def steer(self):\n        if self.name is not None and len(self.name) > 0:\n            if len(self.name) > 5:\n                print(f\"Experienced driver {self.name} steering carefully\")\n            else:\n                print(f\"Driver {self.name} steering\")\n    \n    def navigate_air(self):\n        raise UnsupportedOperationException(\"Driver cannot navigate air\")\n    \n    def navigate_water(self):\n        raise UnsupportedOperationException(\"Driver cannot navigate water\")\n    \n    def communicate_with_tower(self):\n        raise UnsupportedOperationException(\"Driver cannot communicate with tower\")\n    \n    def get_name(self):\n        return self.name\n\nclass Pilot(Operator):\n    def __init__(self, name):\n        self.name = name\n    \n    def steer(self):\n        print(f\"Pilot {self.name} controlling aircraft\")\n    \n    def navigate_air(self):\n        if self.name is not None:\n            if \"Captain\" in self.name:\n                print(\"Captain pilot navigating complex airspace\")\n            elif len(self.name) > 6:\n                print(\"Experienced pilot navigating airspace\")\n            else:\n                print(\"Pilot navigating\")\n    \n    def navigate_water(self):\n        raise UnsupportedOperationException(\"Pilot cannot navigate water\")\n    \n    def communicate_with_tower(self):\n        print(f\"Pilot {self.name} communicating with control tower\")\n    \n    def get_name(self):\n        return self.name\n\nclass Captain(Operator):\n    def __init__(self, name):\n        self.name = name\n    \n    def steer(self):\n        print(f\"Captain {self.name} steering submarine\")\n    \n    def navigate_air(self):\n        raise UnsupportedOperationException(\"Captain cannot navigate air\")\n    \n    def navigate_water(self):\n        if self.name is not None and self.name.startswith(\"Captain\"):\n            print(\"Captain navigating deep waters\")\n        else:\n            print(\"Naval officer navigating\")\n    \n    def communicate_with_tower(self):\n        raise UnsupportedOperationException(\"Captain cannot communicate with tower\")\n    \n    def get_name(self):\n        return self.name\n\nclass Car(Vehicle, EnergySystem):\n    def __init__(self, driver, energy_type):\n        self.driver = driver\n        self.energy_type = energy_type\n    \n    def start(self):\n        if self.driver is not None:\n            print(f\"{self.energy_type} car started by {self.driver.get_name()}\")\n    \n    def stop(self):\n        print(\"Car stopped\")\n    \n    def fly(self):\n        raise UnsupportedOperationException(\"Car cannot fly\")\n    \n    def dive(self):\n        raise UnsupportedOperationException(\"Car cannot dive\")\n    \n    def charge_electrically(self):\n        if self.energy_type == \"Electric\":\n            print(\"Car charging electrically\")\n        else:\n            raise UnsupportedOperationException(\"Non-electric car cannot charge\")\n    \n    def refuel_gasoline(self):\n        if self.energy_type == \"Gasoline\":\n            print(\"Car refueling with gasoline\")\n        else:\n            raise UnsupportedOperationException(\"Non-gasoline car cannot refuel gasoline\")\n    \n    def refuel_diesel(self):\n        raise UnsupportedOperationException(\"Car does not use diesel\")\n    \n    def load_nuclear_fuel(self):\n        raise UnsupportedOperationException(\"Car cannot use nuclear fuel\")\n    \n    def check_battery_level(self):\n        if self.energy_type == \"Electric\":\n            print(\"Car battery level: 85%\")\n        else:\n            raise UnsupportedOperationException(\"Non-electric car has no battery\")\n    \n    def maintain_engine(self):\n        if self.energy_type == \"Electric\":\n            print(\"Maintaining electric motor\")\n        else:\n            print(\"Maintaining combustion engine\")\n    \n    def get_operator(self):\n        return self.driver\n\nclass Plane(Vehicle, EnergySystem):\n    def __init__(self, pilot, energy_type):\n        self.pilot = pilot\n        self.energy_type = energy_type\n    \n    def start(self):\n        print(f\"{self.energy_type} plane engines started by {self.pilot.get_name()}\")\n    \n    def stop(self):\n        print(\"Plane stopped\")\n    \n    def fly(self):\n        if \"Captain\" in self.pilot.get_name():\n            print(f\"Plane flying at cruising altitude with {self.energy_type} power\")\n        else:\n            print(f\"Plane flying with {self.energy_type} engines\")\n    \n    def dive(self):\n        raise UnsupportedOperationException(\"Plane cannot dive underwater\")\n    \n    def charge_electrically(self):\n        raise UnsupportedOperationException(\"Plane does not charge electrically\")\n    \n    def refuel_gasoline(self):\n        raise UnsupportedOperationException(\"Plane does not use gasoline\")\n    \n    def refuel_diesel(self):\n        if self.energy_type == \"Diesel\":\n            print(\"Plane refueling with aviation diesel\")\n        else:\n            raise UnsupportedOperationException(\"Non-diesel plane cannot refuel diesel\")\n    \n    def load_nuclear_fuel(self):\n        raise UnsupportedOperationException(\"Plane cannot use nuclear fuel\")\n    \n    def check_battery_level(self):\n        raise UnsupportedOperationException(\"Plane has no battery system\")\n    \n    def maintain_engine(self):\n        if self.energy_type == \"Diesel\":\n            print(\"Maintaining diesel turbine engines\")\n        else:\n            print(\"Maintaining jet engines\")\n    \n    def get_operator(self):\n        return self.pilot\n\nclass Submarine(Vehicle, EnergySystem):\n    def __init__(self, captain, energy_type):\n        self.captain = captain\n        self.depth = 0\n        self.energy_type = energy_type\n    \n    def start(self):\n        print(f\"{self.energy_type} submarine engines started by {self.captain.get_name()}\")\n    \n    def stop(self):\n        print(\"Submarine stopped\")\n    \n    def fly(self):\n        raise UnsupportedOperationException(\"Submarine cannot fly\")\n    \n    def dive(self):\n        if self.captain is not None and self.captain.get_name().startswith(\"Captain\"):\n            if self.depth < 100:\n                self.depth += 50\n                print(f\"Submarine diving to depth: {self.depth} meters using {self.energy_type} power\")\n            elif self.depth < 200:\n                self.depth += 30\n                print(f\"Deep diving to: {self.depth} meters\")\n            else:\n                print(\"Maximum depth reached\")\n    \n    def charge_electrically(self):\n        if self.energy_type == \"Electric\":\n            print(\"Submarine charging batteries\")\n        else:\n            raise UnsupportedOperationException(\"Non-electric submarine cannot charge\")\n    \n    def refuel_gasoline(self):\n        raise UnsupportedOperationException(\"Submarine does not use gasoline\")\n    \n    def refuel_diesel(self):\n        if self.energy_type == \"Diesel\":\n            print(\"Submarine refueling with marine diesel\")\n        else:\n            raise UnsupportedOperationException(\"Non-diesel submarine cannot refuel diesel\")\n    \n    def load_nuclear_fuel(self):\n        if self.energy_type == \"Nuclear\":\n            print(\"Loading nuclear fuel rods into reactor\")\n        else:\n            raise UnsupportedOperationException(\"Non-nuclear submarine cannot load nuclear fuel\")\n    \n    def check_battery_level(self):\n        if self.energy_type == \"Electric\" or self.energy_type == \"Diesel\":\n            print(\"Submarine battery level: 70%\")\n        else:\n            raise UnsupportedOperationException(\"Nuclear submarine has no battery system\")\n    \n    def maintain_engine(self):\n        if self.energy_type == \"Nuclear\":\n            print(\"Maintaining nuclear reactor systems\")\n        elif self.energy_type == \"Diesel\":\n            print(\"Maintaining diesel-electric propulsion\")\n        else:\n            print(\"Maintaining electric propulsion system\")\n    \n    def get_operator(self):\n        return self.captain",
            "output": "from abc import ABC, abstractmethod\n\nclass StartStop(ABC):\n    @abstractmethod\n    def start(self):\n        pass\n    \n    @abstractmethod\n    def stop(self):\n        pass\n\nclass Flying(ABC):\n    @abstractmethod\n    def fly(self):\n        pass\n\nclass Diving(ABC):\n    @abstractmethod\n    def dive(self):\n        pass\n\nclass GroundSteering(ABC):\n    @abstractmethod\n    def steer(self):\n        pass\n\nclass AirNavigation(ABC):\n    @abstractmethod\n    def navigate_air(self):\n        pass\n\nclass WaterNavigation(ABC):\n    @abstractmethod\n    def navigate_water(self):\n        pass\n\nclass TowerCommunication(ABC):\n    @abstractmethod\n    def communicate_with_tower(self):\n        pass\n\nclass ElectricCharging(ABC):\n    @abstractmethod\n    def charge_electrically(self):\n        pass\n    \n    @abstractmethod\n    def check_battery_level(self):\n        pass\n\nclass GasolineRefueling(ABC):\n    @abstractmethod\n    def refuel_gasoline(self):\n        pass\n\nclass DieselRefueling(ABC):\n    @abstractmethod\n    def refuel_diesel(self):\n        pass\n\nclass NuclearFueling(ABC):\n    @abstractmethod\n    def load_nuclear_fuel(self):\n        pass\n\nclass EngineMaintenance(ABC):\n    @abstractmethod\n    def maintain_engine(self):\n        pass\n\nclass Driver(GroundSteering):\n    def __init__(self, name):\n        self.name = name\n    \n    def steer(self):\n        if self.name is not None and self.name != \"\":\n            if len(self.name) > 5:\n                print(f\"Experienced driver {self.name} steering carefully\")\n            else:\n                print(f\"Driver {self.name} steering\")\n    \n    def get_name(self):\n        return self.name\n\nclass Pilot(GroundSteering, AirNavigation, TowerCommunication):\n    def __init__(self, name):\n        self.name = name\n    \n    def steer(self):\n        print(f\"Pilot {self.name} controlling aircraft\")\n    \n    def navigate_air(self):\n        if self.name is not None:\n            if \"Captain\" in self.name:\n                print(\"Captain pilot navigating complex airspace\")\n            elif len(self.name) > 6:\n                print(\"Experienced pilot navigating airspace\")\n            else:\n                print(\"Pilot navigating\")\n    \n    def communicate_with_tower(self):\n        print(f\"Pilot {self.name} communicating with control tower\")\n    \n    def get_name(self):\n        return self.name\n\nclass Captain(GroundSteering, WaterNavigation):\n    def __init__(self, name):\n        self.name = name\n    \n    def steer(self):\n        print(f\"Captain {self.name} steering submarine\")\n    \n    def navigate_water(self):\n        if self.name is not None and self.name.startswith(\"Captain\"):\n            print(\"Captain navigating deep waters\")\n        else:\n            print(\"Naval officer navigating\")\n    \n    def get_name(self):\n        return self.name\n\nclass Car(StartStop, ElectricCharging, GasolineRefueling, EngineMaintenance):\n    def __init__(self, driver, energy_type):\n        self.driver = driver\n        self.energy_type = energy_type\n    \n    def start(self):\n        if self.driver is not None:\n            print(f\"{self.energy_type} car started by {self.driver.get_name()}\")\n    \n    def stop(self):\n        print(\"Car stopped\")\n    \n    def charge_electrically(self):\n        if self.energy_type == \"Electric\":\n            print(\"Car charging electrically\")\n        else:\n            raise Exception(\"Non-electric car cannot charge\")\n    \n    def refuel_gasoline(self):\n        if self.energy_type == \"Gasoline\":\n            print(\"Car refueling with gasoline\")\n        else:\n            raise Exception(\"Non-gasoline car cannot refuel gasoline\")\n    \n    def check_battery_level(self):\n        if self.energy_type == \"Electric\":\n            print(\"Car battery level: 85%\")\n        else:\n            raise Exception(\"Non-electric car has no battery\")\n    \n    def maintain_engine(self):\n        if self.energy_type == \"Electric\":\n            print(\"Maintaining electric motor\")\n        else:\n            print(\"Maintaining combustion engine\")\n    \n    def get_operator(self):\n        return self.driver\n    \n    def get_energy_type(self):\n        return self.energy_type\n\nclass Plane(StartStop, Flying, DieselRefueling, EngineMaintenance):\n    def __init__(self, pilot, energy_type):\n        self.pilot = pilot\n        self.energy_type = energy_type\n    \n    def start(self):\n        print(f\"{self.energy_type} plane engines started by {self.pilot.get_name()}\")\n    \n    def stop(self):\n        print(\"Plane stopped\")\n    \n    def fly(self):\n        if \"Captain\" in self.pilot.get_name():\n            print(f\"Plane flying at cruising altitude with {self.energy_type} power\")\n        else:\n            print(f\"Plane flying with {self.energy_type} engines\")\n    \n    def refuel_diesel(self):\n        if self.energy_type == \"Diesel\":\n            print(\"Plane refueling with aviation diesel\")\n        else:\n            raise Exception(\"Non-diesel plane cannot refuel diesel\")\n    \n    def maintain_engine(self):\n        if self.energy_type == \"Diesel\":\n            print(\"Maintaining diesel turbine engines\")\n        else:\n            print(\"Maintaining jet engines\")\n    \n    def get_operator(self):\n        return self.pilot\n    \n    def get_energy_type(self):\n        return self.energy_type\n\nclass Submarine(StartStop, Diving, ElectricCharging, DieselRefueling, NuclearFueling, EngineMaintenance):\n    def __init__(self, captain, energy_type):\n        self.captain = captain\n        self.depth = 0\n        self.energy_type = energy_type\n    \n    def start(self):\n        print(f\"{self.energy_type} submarine engines started by {self.captain.get_name()}\")\n    \n    def stop(self):\n        print(\"Submarine stopped\")\n    \n    def dive(self):\n        if self.captain is not None and self.captain.get_name().startswith(\"Captain\"):\n            if self.depth < 100:\n                self.depth += 50\n                print(f\"Submarine diving to depth: {self.depth} meters using {self.energy_type} power\")\n            elif self.depth < 200:\n                self.depth += 30\n                print(f\"Deep diving to: {self.depth} meters\")\n            else:\n                print(\"Maximum depth reached\")\n    \n    def charge_electrically(self):\n        if self.energy_type == \"Electric\":\n            print(\"Submarine charging batteries\")\n        else:\n            raise Exception(\"Non-electric submarine cannot charge\")\n    \n    def refuel_diesel(self):\n        if self.energy_type == \"Diesel\":\n            print(\"Submarine refueling with marine diesel\")\n        else:\n            raise Exception(\"Non-diesel submarine cannot refuel diesel\")\n    \n    def load_nuclear_fuel(self):\n        if self.energy_type == \"Nuclear\":\n            print(\"Loading nuclear fuel rods into reactor\")\n        else:\n            raise Exception(\"Non-nuclear submarine cannot load nuclear fuel\")\n    \n    def check_battery_level(self):\n        if self.energy_type == \"Electric\" or self.energy_type == \"Diesel\":\n            print(\"Submarine battery level: 70%\")\n        else:\n            raise Exception(\"Nuclear submarine has no battery system\")\n    \n    def maintain_engine(self):\n        if self.energy_type == \"Nuclear\":\n            print(\"Maintaining nuclear reactor systems\")\n        elif self.energy_type == \"Diesel\":\n            print(\"Maintaining diesel-electric propulsion\")\n        else:\n            print(\"Maintaining electric propulsion system\")\n    \n    def get_operator(self):\n        return self.captain\n    \n    def get_energy_type(self):\n        return self.energy_type",
            "level": "HARD",
            "language": "PYTHON",
            "violation": "ISP"
        },
        {
            "input": "from abc import ABC, abstractmethod\n\nclass GameCharacter(ABC):\n    @abstractmethod\n    def melee_attack(self):\n        pass\n    \n    @abstractmethod\n    def cast_spell(self):\n        pass\n    \n    @abstractmethod\n    def fly(self):\n        pass\n    \n    @abstractmethod\n    def defend(self):\n        pass\n\nclass Weapon(ABC):\n    @abstractmethod\n    def slash(self):\n        pass\n    \n    @abstractmethod\n    def shoot(self):\n        pass\n    \n    @abstractmethod\n    def enchant(self):\n        pass\n    \n    @abstractmethod\n    def repair(self):\n        pass\n\nclass Mage(GameCharacter):\n    def __init__(self, name, level):\n        self.name = name\n        self.mana = 100\n        self.level = level\n    \n    def melee_attack(self):\n        raise NotImplementedError(\"Mage cannot perform melee attacks!\")\n    \n    def cast_spell(self):\n        if self.mana < 10:\n            print(f\"{self.name} is out of mana!\")\n            return\n        \n        if self.level >= 5 and self.mana >= 30:\n            print(f\"{self.name} casts a powerful lightning storm!\")\n            self.mana -= 30\n        elif self.level >= 3 and self.mana >= 20:\n            print(f\"{self.name} casts a fireball spell!\")\n            self.mana -= 20\n        elif self.mana >= 10:\n            print(f\"{self.name} casts a basic magic missile!\")\n            self.mana -= 10\n    \n    def fly(self):\n        if self.level >= 2:\n            print(f\"{self.name} soars through the air with magic!\")\n        else:\n            print(f\"{self.name} is too inexperienced to fly!\")\n    \n    def defend(self):\n        if self.mana >= 15:\n            print(f\"{self.name} creates a magical barrier!\")\n            self.mana -= 15\n        else:\n            print(f\"{self.name} dodges awkwardly!\")\n\nclass Fighter(GameCharacter):\n    def __init__(self, name, has_weapon):\n        self.name = name\n        self.stamina = 100\n        self.has_weapon = has_weapon\n    \n    def melee_attack(self):\n        if self.stamina < 5:\n            print(f\"{self.name} is too exhausted to fight!\")\n            return\n        \n        if self.has_weapon:\n            if self.stamina >= 20:\n                print(f\"{self.name} performs a devastating combo attack!\")\n                self.stamina -= 20\n            elif self.stamina >= 10:\n                print(f\"{self.name} swings weapon with force!\")\n                self.stamina -= 10\n            else:\n                print(f\"{self.name} makes a weak weapon strike!\")\n                self.stamina -= 5\n        else:\n            if self.stamina >= 15:\n                print(f\"{self.name} throws a powerful punch!\")\n                self.stamina -= 15\n            else:\n                print(f\"{self.name} throws a basic punch!\")\n                self.stamina -= 5\n    \n    def cast_spell(self):\n        raise NotImplementedError(\"Fighter cannot cast spells!\")\n    \n    def fly(self):\n        raise NotImplementedError(\"Fighter cannot fly!\")\n    \n    def defend(self):\n        if self.has_weapon and self.stamina >= 10:\n            print(f\"{self.name} blocks with weapon!\")\n            self.stamina -= 10\n        elif self.stamina >= 5:\n            print(f\"{self.name} raises arms to defend!\")\n            self.stamina -= 5\n        else:\n            print(f\"{self.name} barely manages to dodge!\")\n\nclass Sword(Weapon):\n    def __init__(self, sharpness, is_magic):\n        self.sharpness = sharpness\n        self.is_magic = is_magic\n    \n    def slash(self):\n        if self.sharpness > 70:\n            print(\"Sword cuts cleanly through the target!\")\n        elif self.sharpness > 30:\n            print(\"Sword makes a decent cut!\")\n        else:\n            print(\"Dull sword barely scratches the target!\")\n    \n    def shoot(self):\n        raise NotImplementedError(\"Sword cannot shoot!\")\n    \n    def enchant(self):\n        if self.is_magic:\n            print(\"Magical sword glows with enhanced power!\")\n            self.sharpness += 10\n        else:\n            raise NotImplementedError(\"Non-magic sword cannot be enchanted!\")\n    \n    def repair(self):\n        if self.sharpness < 100:\n            self.sharpness = min(100, self.sharpness + 25)\n            print(\"Sword has been sharpened and repaired!\")\n        else:\n            print(\"Sword is already in perfect condition!\")\n\nclass Bow(Weapon):\n    def __init__(self, arrows, range_val):\n        self.arrows = arrows\n        self.range = range_val\n    \n    def slash(self):\n        raise NotImplementedError(\"Bow cannot slash!\")\n    \n    def shoot(self):\n        if self.arrows <= 0:\n            print(\"No arrows left to shoot!\")\n            return\n        \n        if self.range > 80:\n            print(\"Long-range shot hits the distant target!\")\n        elif self.range > 50:\n            print(\"Medium-range shot finds its mark!\")\n        else:\n            print(\"Short-range shot barely reaches the target!\")\n        self.arrows -= 1\n    \n    def enchant(self):\n        raise NotImplementedError(\"Regular bow cannot be enchanted!\")\n    \n    def repair(self):\n        if self.range < 100:\n            self.range = min(100, self.range + 15)\n            print(\"Bow string tightened and wood polished!\")\n        else:\n            print(\"Bow is in excellent condition!\")",
            "output": "from abc import ABC, abstractmethod\n\nclass MeleeCapable(ABC):\n    @abstractmethod\n    def melee_attack(self):\n        pass\n\nclass MagicCapable(ABC):\n    @abstractmethod\n    def cast_spell(self):\n        pass\n\nclass FlyingCapable(ABC):\n    @abstractmethod\n    def fly(self):\n        pass\n\nclass DefenseCapable(ABC):\n    @abstractmethod\n    def defend(self):\n        pass\n\nclass SlashCapable(ABC):\n    @abstractmethod\n    def slash(self):\n        pass\n\nclass ShootCapable(ABC):\n    @abstractmethod\n    def shoot(self):\n        pass\n\nclass EnchantCapable(ABC):\n    @abstractmethod\n    def enchant(self):\n        pass\n\nclass RepairCapable(ABC):\n    @abstractmethod\n    def repair(self):\n        pass\n\nclass Mage(MagicCapable, FlyingCapable, DefenseCapable):\n    def __init__(self, name, level):\n        self.name = name\n        self.mana = 100\n        self.level = level\n\n    def cast_spell(self):\n        if self.mana < 10:\n            print(f\"{self.name} is out of mana!\")\n            return\n\n        if self.level >= 5 and self.mana >= 30:\n            print(f\"{self.name} casts a powerful lightning storm!\")\n            self.mana -= 30\n        elif self.level >= 3 and self.mana >= 20:\n            print(f\"{self.name} casts a fireball spell!\")\n            self.mana -= 20\n        elif self.mana >= 10:\n            print(f\"{self.name} casts a basic magic missile!\")\n            self.mana -= 10\n\n    def fly(self):\n        if self.level >= 2:\n            print(f\"{self.name} soars through the air with magic!\")\n        else:\n            print(f\"{self.name} is too inexperienced to fly!\")\n\n    def defend(self):\n        if self.mana >= 15:\n            print(f\"{self.name} creates a magical barrier!\")\n            self.mana -= 15\n        else:\n            print(f\"{self.name} dodges awkwardly!\")\n\nclass Fighter(MeleeCapable, DefenseCapable):\n    def __init__(self, name, has_weapon):\n        self.name = name\n        self.stamina = 100\n        self.has_weapon = has_weapon\n\n    def melee_attack(self):\n        if self.stamina < 5:\n            print(f\"{self.name} is too exhausted to fight!\")\n            return\n\n        if self.has_weapon:\n            if self.stamina >= 20:\n                print(f\"{self.name} performs a devastating combo attack!\")\n                self.stamina -= 20\n            elif self.stamina >= 10:\n                print(f\"{self.name} swings weapon with force!\")\n                self.stamina -= 10\n            else:\n                print(f\"{self.name} makes a weak weapon strike!\")\n                self.stamina -= 5\n        else:\n            if self.stamina >= 15:\n                print(f\"{self.name} throws a powerful punch!\")\n                self.stamina -= 15\n            else:\n                print(f\"{self.name} throws a basic punch!\")\n                self.stamina -= 5\n\n    def defend(self):\n        if self.has_weapon and self.stamina >= 10:\n            print(f\"{self.name} blocks with weapon!\")\n            self.stamina -= 10\n        elif self.stamina >= 5:\n            print(f\"{self.name} raises arms to defend!\")\n            self.stamina -= 5\n        else:\n            print(f\"{self.name} barely manages to dodge!\")\n\nclass Sword(SlashCapable, EnchantCapable, RepairCapable):\n    def __init__(self, sharpness, is_magic):\n        self.sharpness = sharpness\n        self.is_magic = is_magic\n\n    def slash(self):\n        if self.sharpness > 70:\n            print(\"Sword cuts cleanly through the target!\")\n        elif self.sharpness > 30:\n            print(\"Sword makes a decent cut!\")\n        else:\n            print(\"Dull sword barely scratches the target!\")\n\n    def enchant(self):\n        if self.is_magic:\n            print(\"Magical sword glows with enhanced power!\")\n            self.sharpness += 10\n        else:\n            raise NotImplementedError(\"Non-magic sword cannot be enchanted!\")\n\n    def repair(self):\n        if self.sharpness < 100:\n            self.sharpness = min(100, self.sharpness + 25)\n            print(\"Sword has been sharpened and repaired!\")\n        else:\n            print(\"Sword is already in perfect condition!\")\n\nclass Bow(ShootCapable, RepairCapable):\n    def __init__(self, arrows, range_):\n        self.arrows = arrows\n        self.range = range_\n\n    def shoot(self):\n        if self.arrows <= 0:\n            print(\"No arrows left to shoot!\")\n            return\n\n        if self.range > 80:\n            print(\"Long-range shot hits the distant target!\")\n        elif self.range > 50:\n            print(\"Medium-range shot finds its mark!\")\n        else:\n            print(\"Short-range shot barely reaches the target!\")\n        self.arrows -= 1\n\n    def repair(self):\n        if self.range < 100:\n            self.range = min(100, self.range + 15)\n            print(\"Bow string tightened and wood polished!\")\n        else:\n            print(\"Bow is in excellent condition!\")",
            "level": "MODERATE",
            "language": "PYTHON",
            "violation": "ISP"
        },
        {
            "input": "from abc import ABC, abstractmethod\n\nclass MusicPlayer(ABC):\n    @abstractmethod\n    def play(self):\n        pass\n    \n    @abstractmethod\n    def pause(self):\n        pass\n    \n    @abstractmethod\n    def stop(self):\n        pass\n    \n    @abstractmethod\n    def skip_track(self):\n        pass\n    \n    @abstractmethod\n    def eject(self):\n        pass\n    \n    @abstractmethod\n    def set_volume(self, volume):\n        pass\n    \n    @abstractmethod\n    def set_equalizer(self, preset):\n        pass\n    \n    @abstractmethod\n    def display_track_info(self):\n        pass\n    \n    @abstractmethod\n    def shuffle(self):\n        pass\n    \n    @abstractmethod\n    def repeat(self):\n        pass\n\nclass CDPlayer(MusicPlayer):\n    def __init__(self):\n        self.is_playing = False\n        self.is_paused = False\n        self.current_track = \"Track 1\"\n        self.volume = 50\n        self.shuffle_mode = False\n        self.repeat_mode = False\n    \n    def play(self):\n        self.is_playing = True\n        self.is_paused = False\n        print(f\"CD Player: Playing {self.current_track}\")\n    \n    def pause(self):\n        if self.is_playing:\n            self.is_paused = True\n            self.is_playing = False\n            print(\"CD Player: Paused\")\n    \n    def stop(self):\n        self.is_playing = False\n        self.is_paused = False\n        print(\"CD Player: Stopped\")\n    \n    def skip_track(self):\n        print(\"CD Player: Skipping to next track\")\n        track_num = int(self.current_track.split(\" \")[1]) + 1\n        self.current_track = f\"Track {track_num}\"\n    \n    def eject(self):\n        self.stop()\n        print(\"CD Player: CD ejected\")\n    \n    def set_volume(self, volume):\n        self.volume = volume\n        print(f\"CD Player: Volume set to {volume}\")\n    \n    def set_equalizer(self, preset):\n        print(f\"CD Player: Equalizer set to {preset}\")\n    \n    def display_track_info(self):\n        print(f\"CD Player: Current track - {self.current_track}, Volume: {self.volume}\")\n    \n    def shuffle(self):\n        self.shuffle_mode = not self.shuffle_mode\n        print(f\"CD Player: Shuffle {'ON' if self.shuffle_mode else 'OFF'}\")\n    \n    def repeat(self):\n        self.repeat_mode = not self.repeat_mode\n        print(f\"CD Player: Repeat {'ON' if self.repeat_mode else 'OFF'}\")\n\nclass VinylPlayer(MusicPlayer):\n    def __init__(self):\n        self.is_playing = False\n        self.is_paused = False\n        self.current_song = \"Side A\"\n        self.volume = 50\n    \n    def play(self):\n        self.is_playing = True\n        self.is_paused = False\n        print(f\"Vinyl Player: Playing {self.current_song}\")\n    \n    def pause(self):\n        if self.is_playing:\n            self.is_paused = True\n            self.is_playing = False\n            print(\"Vinyl Player: Paused (needle lifted)\")\n    \n    def stop(self):\n        self.is_playing = False\n        self.is_paused = False\n        print(\"Vinyl Player: Stopped\")\n    \n    def skip_track(self):\n        raise NotImplementedError(\"Vinyl players cannot skip tracks - you must manually move the needle!\")\n    \n    def eject(self):\n        raise NotImplementedError(\"Vinyl players don't eject - you must manually remove the record!\")\n    \n    def set_volume(self, volume):\n        self.volume = volume\n        print(f\"Vinyl Player: Volume set to {volume}\")\n    \n    def set_equalizer(self, preset):\n        raise NotImplementedError(\"Vintage vinyl players don't have digital equalizers!\")\n    \n    def display_track_info(self):\n        print(f\"Vinyl Player: Current side - {self.current_song}, Volume: {self.volume}\")\n    \n    def shuffle(self):\n        raise NotImplementedError(\"Cannot shuffle vinyl records!\")\n    \n    def repeat(self):\n        raise NotImplementedError(\"Vinyl players don't have automatic repeat!\")\n\nclass Amplifier(MusicPlayer):\n    def __init__(self):\n        self.is_powered_on = False\n        self.volume = 30\n        self.equalizer_setting = \"Flat\"\n        self.bass_boost = False\n    \n    def play(self):\n        raise NotImplementedError(\"Amplifiers don't play music - they amplify audio signals!\")\n    \n    def pause(self):\n        raise NotImplementedError(\"Amplifiers don't control playback!\")\n    \n    def stop(self):\n        self.is_powered_on = False\n        print(\"Amplifier: Powered OFF\")\n    \n    def skip_track(self):\n        raise NotImplementedError(\"Amplifiers don't control track selection!\")\n    \n    def eject(self):\n        raise NotImplementedError(\"Amplifiers don't have media to eject!\")\n    \n    def set_volume(self, volume):\n        if volume < 0:\n            self.volume = 0\n        elif volume > 100:\n            self.volume = 100\n        else:\n            self.volume = volume\n        \n        if self.volume > 80:\n            print(\"Amplifier: Warning - High volume!\")\n        \n        print(f\"Amplifier: Master volume set to {self.volume}\")\n    \n    def set_equalizer(self, preset):\n        preset_lower = preset.lower()\n        if preset_lower in [\"rock\", \"pop\", \"jazz\", \"classical\"]:\n            self.equalizer_setting = preset\n        else:\n            self.equalizer_setting = \"Flat\"\n            print(\"Amplifier: Unknown preset. Defaulting to Flat.\")\n            return\n        print(f\"Amplifier: Equalizer set to {self.equalizer_setting}\")\n    \n    def display_track_info(self):\n        raise NotImplementedError(\"Amplifiers don't track music information!\")\n    \n    def shuffle(self):\n        raise NotImplementedError(\"Amplifiers don't control playback modes!\")\n    \n    def repeat(self):\n        raise NotImplementedError(\"Amplifiers don't control playback modes!\")\n    \n    def power_on(self):\n        self.is_powered_on = True\n        print(\"Amplifier: Powered ON\")\n    \n    def set_bass_boost(self, enabled):\n        self.bass_boost = enabled\n        print(f\"Amplifier: Bass boost {'ON' if enabled else 'OFF'}\")",
            "output": "from abc import ABC, abstractmethod\n\nclass PlaybackCapable(ABC):\n    @abstractmethod\n    def play(self):\n        pass\n\n    @abstractmethod\n    def pause(self):\n        pass\n\n    @abstractmethod\n    def stop(self):\n        pass\n\nclass TrackControlCapable(ABC):\n    @abstractmethod\n    def skip_track(self):\n        pass\n\nclass MediaEjectCapable(ABC):\n    @abstractmethod\n    def eject(self):\n        pass\n\nclass VolumeControlCapable(ABC):\n    @abstractmethod\n    def set_volume(self, volume):\n        pass\n\nclass EqualizerCapable(ABC):\n    @abstractmethod\n    def set_equalizer(self, preset):\n        pass\n\nclass TrackInfoCapable(ABC):\n    @abstractmethod\n    def display_track_info(self):\n        pass\n\nclass PlaybackModeCapable(ABC):\n    @abstractmethod\n    def shuffle(self):\n        pass\n\n    @abstractmethod\n    def repeat(self):\n        pass\n\nclass CDPlayer(PlaybackCapable, TrackControlCapable, MediaEjectCapable, VolumeControlCapable, EqualizerCapable, TrackInfoCapable, PlaybackModeCapable):\n    def __init__(self):\n        self.is_playing = False\n        self.is_paused = False\n        self.current_track = \"Track 1\"\n        self.volume = 50\n        self.shuffle_mode = False\n        self.repeat_mode = False\n\n    def play(self):\n        self.is_playing = True\n        self.is_paused = False\n        print(f\"CD Player: Playing {self.current_track}\")\n\n    def pause(self):\n        if self.is_playing:\n            self.is_paused = True\n            self.is_playing = False\n            print(\"CD Player: Paused\")\n\n    def stop(self):\n        self.is_playing = False\n        self.is_paused = False\n        print(\"CD Player: Stopped\")\n\n    def skip_track(self):\n        print(\"CD Player: Skipping to next track\")\n        track_number = int(self.current_track.split(\" \")[1]) + 1\n        self.current_track = f\"Track {track_number}\"\n\n    def eject(self):\n        self.stop()\n        print(\"CD Player: CD ejected\")\n\n    def set_volume(self, volume):\n        self.volume = volume\n        print(f\"CD Player: Volume set to {volume}\")\n\n    def set_equalizer(self, preset):\n        print(f\"CD Player: Equalizer set to {preset}\")\n\n    def display_track_info(self):\n        print(f\"CD Player: Current track - {self.current_track}, Volume: {self.volume}\")\n\n    def shuffle(self):\n        self.shuffle_mode = not self.shuffle_mode\n        print(f\"CD Player: Shuffle {'ON' if self.shuffle_mode else 'OFF'}\")\n\n    def repeat(self):\n        self.repeat_mode = not self.repeat_mode\n        print(f\"CD Player: Repeat {'ON' if self.repeat_mode else 'OFF'}\")\n\nclass VinylPlayer(PlaybackCapable, VolumeControlCapable, TrackInfoCapable):\n    def __init__(self):\n        self.is_playing = False\n        self.is_paused = False\n        self.current_song = \"Side A\"\n        self.volume = 50\n\n    def play(self):\n        self.is_playing = True\n        self.is_paused = False\n        print(f\"Vinyl Player: Playing {self.current_song}\")\n\n    def pause(self):\n        if self.is_playing:\n            self.is_paused = True\n            self.is_playing = False\n            print(\"Vinyl Player: Paused (needle lifted)\")\n\n    def stop(self):\n        self.is_playing = False\n        self.is_paused = False\n        print(\"Vinyl Player: Stopped\")\n\n    def set_volume(self, volume):\n        self.volume = volume\n        print(f\"Vinyl Player: Volume set to {volume}\")\n\n    def display_track_info(self):\n        print(f\"Vinyl Player: Current side - {self.current_song}, Volume: {self.volume}\")\n\nclass Amplifier(VolumeControlCapable, EqualizerCapable):\n    def __init__(self):\n        self.is_powered_on = False\n        self.volume = 30\n        self.equalizer_setting = \"Flat\"\n        self.bass_boost = False\n\n    def stop(self):\n        self.is_powered_on = False\n        print(\"Amplifier: Powered OFF\")\n\n    def set_volume(self, volume):\n        if volume < 0:\n            self.volume = 0\n        elif volume > 100:\n            self.volume = 100\n        else:\n            self.volume = volume\n\n        if self.volume > 80:\n            print(\"Amplifier: Warning - High volume!\")\n\n        print(f\"Amplifier: Master volume set to {self.volume}\")\n\n    def set_equalizer(self, preset):\n        if preset.lower() in [\"rock\", \"pop\", \"jazz\", \"classical\"]:\n            self.equalizer_setting = preset\n        else:\n            self.equalizer_setting = \"Flat\"\n            print(\"Amplifier: Unknown preset. Defaulting to Flat.\")\n            return\n        print(f\"Amplifier: Equalizer set to {self.equalizer_setting}\")\n\n    def power_on(self):\n        self.is_powered_on = True\n        print(\"Amplifier: Powered ON\")\n\n    def set_bass_boost(self, enabled):\n        self.bass_boost = enabled\n        print(f\"Amplifier: Bass boost {'ON' if enabled else 'OFF'}\")",
            "level": "MODERATE",
            "language": "PYTHON",
            "violation": "ISP"
        },
        {
            "input": "from abc import ABC, abstractmethod\n\nclass RestaurantWorker(ABC):\n    @abstractmethod\n    def cook_food(self):\n        pass\n    \n    @abstractmethod\n    def serve_customers(self):\n        pass\n    \n    @abstractmethod\n    def clean_tables(self):\n        pass\n    \n    @abstractmethod\n    def manage_staff(self):\n        pass\n\nclass MachineWorker(ABC):\n    @abstractmethod\n    def wash_dishes(self):\n        pass\n    \n    @abstractmethod\n    def vacuum_floor(self):\n        pass\n    \n    @abstractmethod\n    def self_diagnose(self):\n        pass\n\nclass Chef(RestaurantWorker):\n    def cook_food(self):\n        print(\"Chef is cooking meals.\")\n    \n    def serve_customers(self):\n        print(\"Chef does not serve customers.\")\n    \n    def clean_tables(self):\n        print(\"Chef does not clean tables.\")\n    \n    def manage_staff(self):\n        print(\"Chef does not manage staff.\")\n\nclass Waiter(RestaurantWorker):\n    def cook_food(self):\n        print(\"Waiter does not cook food.\")\n    \n    def serve_customers(self):\n        print(\"Waiter is serving customers.\")\n    \n    def clean_tables(self):\n        print(\"Waiter is cleaning tables.\")\n    \n    def manage_staff(self):\n        print(\"Waiter does not manage staff.\")\n\nclass Manager(RestaurantWorker):\n    def __init__(self):\n        self.conflict = True\n    \n    def cook_food(self):\n        print(\"Manager does not cook.\")\n    \n    def serve_customers(self):\n        print(\"Manager does not serve.\")\n    \n    def clean_tables(self):\n        print(\"Manager does not clean.\")\n    \n    def manage_staff(self):\n        if self.conflict:\n            print(\"Manager is resolving a team conflict.\")\n        else:\n            print(\"Manager is approving staff schedules.\")\n\nclass Dishwasher(MachineWorker):\n    def __init__(self):\n        self.dirty_items = 15\n    \n    def wash_dishes(self):\n        if self.dirty_items > 0:\n            print(f\"Dishwasher is cleaning {self.dirty_items} plates.\")\n        else:\n            print(\"No dishes to clean.\")\n    \n    def vacuum_floor(self):\n        print(\"Dishwasher cannot vacuum the floor.\")\n    \n    def self_diagnose(self):\n        print(\"Dishwasher performing self-diagnosis.\")\n\nclass VacuumCleaner(MachineWorker):\n    def __init__(self):\n        self.is_charged = False\n    \n    def wash_dishes(self):\n        print(\"Vacuum cleaner cannot wash dishes.\")\n    \n    def vacuum_floor(self):\n        if self.is_charged:\n            print(\"Vacuum cleaner is cleaning the floor.\")\n        else:\n            print(\"Vacuum cleaner battery is low.\")\n    \n    def self_diagnose(self):\n        print(\"Vacuum cleaner running diagnostics.\")",
            "output": "from abc import ABC, abstractmethod\n\nclass CookingCapable(ABC):\n    @abstractmethod\n    def cook_food(self):\n        pass\n\nclass ServingCapable(ABC):\n    @abstractmethod\n    def serve_customers(self):\n        pass\n\nclass CleaningCapable(ABC):\n    @abstractmethod\n    def clean_tables(self):\n        pass\n\nclass ManagementCapable(ABC):\n    @abstractmethod\n    def manage_staff(self):\n        pass\n\nclass DishWashingCapable(ABC):\n    @abstractmethod\n    def wash_dishes(self):\n        pass\n\nclass FloorCleaningCapable(ABC):\n    @abstractmethod\n    def vacuum_floor(self):\n        pass\n\nclass SelfDiagnosticCapable(ABC):\n    @abstractmethod\n    def self_diagnose(self):\n        pass\n\nclass Chef(CookingCapable):\n    def cook_food(self):\n        print(\"Chef is cooking meals.\")\n\nclass Waiter(ServingCapable, CleaningCapable):\n    def serve_customers(self):\n        print(\"Waiter is serving customers.\")\n\n    def clean_tables(self):\n        print(\"Waiter is cleaning tables.\")\n\nclass Manager(ManagementCapable):\n    def __init__(self):\n        self.conflict = True\n\n    def manage_staff(self):\n        if self.conflict:\n            print(\"Manager is resolving a team conflict.\")\n        else:\n            print(\"Manager is approving staff schedules.\")\n\nclass Dishwasher(DishWashingCapable, SelfDiagnosticCapable):\n    def __init__(self):\n        self.dirty_items = 15\n\n    def wash_dishes(self):\n        if self.dirty_items > 0:\n            print(f\"Dishwasher is cleaning {self.dirty_items} plates.\")\n        else:\n            print(\"No dishes to clean.\")\n\n    def self_diagnose(self):\n        print(\"Dishwasher performing self-diagnosis.\")\n\nclass VacuumCleaner(FloorCleaningCapable, SelfDiagnosticCapable):\n    def __init__(self):\n        self.is_charged = False\n\n    def vacuum_floor(self):\n        if self.is_charged:\n            print(\"Vacuum cleaner is cleaning the floor.\")\n        else:\n            print(\"Vacuum cleaner battery is low.\")\n\n    def self_diagnose(self):\n        print(\"Vacuum cleaner running diagnostics.\")",
            "level": "MODERATE",
            "language": "PYTHON",
            "violation": "ISP"
        },
        {
            "input": "from abc import ABC, abstractmethod\n\nclass Vehicle(ABC):\n    @abstractmethod\n    def start(self):\n        pass\n    \n    @abstractmethod\n    def stop(self):\n        pass\n    \n    @abstractmethod\n    def fly(self):\n        pass\n    \n    @abstractmethod\n    def dive(self):\n        pass\n\nclass Operator(ABC):\n    @abstractmethod\n    def steer(self):\n        pass\n    \n    @abstractmethod\n    def navigate_air(self):\n        pass\n    \n    @abstractmethod\n    def navigate_water(self):\n        pass\n    \n    @abstractmethod\n    def communicate_with_tower(self):\n        pass\n\nclass Driver(Operator):\n    def __init__(self, name):\n        self.name = name\n    \n    def steer(self):\n        if self.name and len(self.name) > 0:\n            if len(self.name) > 5:\n                print(f\"Experienced driver {self.name} steering carefully\")\n            else:\n                print(f\"Driver {self.name} steering\")\n    \n    def navigate_air(self):\n        raise NotImplementedError(\"Driver cannot navigate air\")\n    \n    def navigate_water(self):\n        raise NotImplementedError(\"Driver cannot navigate water\")\n    \n    def communicate_with_tower(self):\n        raise NotImplementedError(\"Driver cannot communicate with tower\")\n    \n    def get_name(self):\n        return self.name\n\nclass Pilot(Operator):\n    def __init__(self, name):\n        self.name = name\n    \n    def steer(self):\n        print(f\"Pilot {self.name} controlling aircraft\")\n    \n    def navigate_air(self):\n        if self.name:\n            if \"Captain\" in self.name:\n                print(\"Captain pilot navigating complex airspace\")\n            elif len(self.name) > 6:\n                print(\"Experienced pilot navigating airspace\")\n            else:\n                print(\"Pilot navigating\")\n    \n    def navigate_water(self):\n        raise NotImplementedError(\"Pilot cannot navigate water\")\n    \n    def communicate_with_tower(self):\n        print(f\"Pilot {self.name} communicating with control tower\")\n    \n    def get_name(self):\n        return self.name\n\nclass Captain(Operator):\n    def __init__(self, name):\n        self.name = name\n    \n    def steer(self):\n        print(f\"Captain {self.name} steering submarine\")\n    \n    def navigate_air(self):\n        raise NotImplementedError(\"Captain cannot navigate air\")\n    \n    def navigate_water(self):\n        if self.name and self.name.startswith(\"Captain\"):\n            print(\"Captain navigating deep waters\")\n        else:\n            print(\"Naval officer navigating\")\n    \n    def communicate_with_tower(self):\n        raise NotImplementedError(\"Captain cannot communicate with tower\")\n    \n    def get_name(self):\n        return self.name\n\nclass Car(Vehicle):\n    def __init__(self, driver):\n        self.driver = driver\n    \n    def start(self):\n        if self.driver:\n            print(f\"Car started by {self.driver.get_name()}\")\n        else:\n            print(\"Car started\")\n    \n    def stop(self):\n        print(\"Car stopped\")\n    \n    def fly(self):\n        raise NotImplementedError(\"Car cannot fly\")\n    \n    def dive(self):\n        raise NotImplementedError(\"Car cannot dive\")\n    \n    def get_operator(self):\n        return self.driver\n\nclass Plane(Vehicle):\n    def __init__(self, pilot):\n        self.pilot = pilot\n    \n    def start(self):\n        print(f\"Plane engines started by {self.pilot.get_name()}\")\n    \n    def stop(self):\n        print(\"Plane stopped\")\n    \n    def fly(self):\n        if \"Captain\" in self.pilot.get_name():\n            print(\"Plane flying at cruising altitude\")\n        else:\n            print(\"Plane flying\")\n    \n    def dive(self):\n        raise NotImplementedError(\"Plane cannot dive underwater\")\n    \n    def get_operator(self):\n        return self.pilot\n\nclass Submarine(Vehicle):\n    def __init__(self, captain):\n        self.captain = captain\n        self.depth = 0\n    \n    def start(self):\n        print(f\"Submarine engines started by {self.captain.get_name()}\")\n    \n    def stop(self):\n        print(\"Submarine stopped\")\n    \n    def fly(self):\n        raise NotImplementedError(\"Submarine cannot fly\")\n    \n    def dive(self):\n        if self.captain and self.captain.get_name().startswith(\"Captain\"):\n            if self.depth < 100:\n                self.depth += 50\n                print(f\"Submarine diving to depth: {self.depth} meters\")\n            elif self.depth < 200:\n                self.depth += 30\n                print(f\"Deep diving to: {self.depth} meters\")\n            else:\n                print(\"Maximum depth reached\")\n    \n    def get_operator(self):\n        return self.captain",
            "output": "from abc import ABC, abstractmethod\n\nclass StartStopCapable(ABC):\n    @abstractmethod\n    def start(self):\n        pass\n\n    @abstractmethod\n    def stop(self):\n        pass\n\nclass FlyingCapable(ABC):\n    @abstractmethod\n    def fly(self):\n        pass\n\nclass DivingCapable(ABC):\n    @abstractmethod\n    def dive(self):\n        pass\n\nclass GroundSteeringCapable(ABC):\n    @abstractmethod\n    def steer(self):\n        pass\n\nclass AirNavigationCapable(ABC):\n    @abstractmethod\n    def navigate_air(self):\n        pass\n\nclass WaterNavigationCapable(ABC):\n    @abstractmethod\n    def navigate_water(self):\n        pass\n\nclass TowerCommunicationCapable(ABC):\n    @abstractmethod\n    def communicate_with_tower(self):\n        pass\n\nclass Driver(GroundSteeringCapable):\n    def __init__(self, name):\n        self.name = name\n\n    def steer(self):\n        if self.name:\n            if len(self.name) > 5:\n                print(f\"Experienced driver {self.name} steering carefully\")\n            else:\n                print(f\"Driver {self.name} steering\")\n\n    def get_name(self):\n        return self.name\n\nclass Pilot(GroundSteeringCapable, AirNavigationCapable, TowerCommunicationCapable):\n    def __init__(self, name):\n        self.name = name\n\n    def steer(self):\n        print(f\"Pilot {self.name} controlling aircraft\")\n\n    def navigate_air(self):\n        if \"Captain\" in self.name:\n            print(\"Captain pilot navigating complex airspace\")\n        elif len(self.name) > 6:\n            print(\"Experienced pilot navigating airspace\")\n        else:\n            print(\"Pilot navigating\")\n\n    def communicate_with_tower(self):\n        print(f\"Pilot {self.name} communicating with control tower\")\n\n    def get_name(self):\n        return self.name\n\nclass Captain(GroundSteeringCapable, WaterNavigationCapable):\n    def __init__(self, name):\n        self.name = name\n\n    def steer(self):\n        print(f\"Captain {self.name} steering submarine\")\n\n    def navigate_water(self):\n        if self.name.startswith(\"Captain\"):\n            print(\"Captain navigating deep waters\")\n        else:\n            print(\"Naval officer navigating\")\n\n    def get_name(self):\n        return self.name\n\nclass Car(StartStopCapable):\n    def __init__(self, driver):\n        self.driver = driver\n\n    def start(self):\n        if self.driver:\n            print(f\"Car started by {self.driver.get_name()}\")\n        else:\n            print(\"Car started\")\n\n    def stop(self):\n        print(\"Car stopped\")\n\n    def get_operator(self):\n        return self.driver\n\nclass Plane(StartStopCapable, FlyingCapable):\n    def __init__(self, pilot):\n        self.pilot = pilot\n\n    def start(self):\n        print(f\"Plane engines started by {self.pilot.get_name()}\")\n\n    def stop(self):\n        print(\"Plane stopped\")\n\n    def fly(self):\n        if \"Captain\" in self.pilot.get_name():\n            print(\"Plane flying at cruising altitude\")\n        else:\n            print(\"Plane flying\")\n\n    def get_operator(self):\n        return self.pilot\n\nclass Submarine(StartStopCapable, DivingCapable):\n    def __init__(self, captain):\n        self.captain = captain\n        self.depth = 0\n\n    def start(self):\n        print(f\"Submarine engines started by {self.captain.get_name()}\")\n\n    def stop(self):\n        print(\"Submarine stopped\")\n\n    def dive(self):\n        if self.captain and self.captain.get_name().startswith(\"Captain\"):\n            if self.depth < 100:\n                self.depth += 50\n                print(f\"Submarine diving to depth: {self.depth} meters\")\n            elif self.depth < 200:\n                self.depth += 30\n                print(f\"Deep diving to: {self.depth} meters\")\n            else:\n                print(\"Maximum depth reached\")\n\n    def get_operator(self):\n        return self.captain",
            "level": "MODERATE",
            "language": "PYTHON",
            "violation": "ISP"
        }
    ]
}