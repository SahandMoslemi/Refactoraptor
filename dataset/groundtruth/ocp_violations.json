{
    "code_examples": [
        {
            "input": "using System;\n\nclass Shape\n{\n    private string type;\n\n    public Shape(string type)\n    {\n        this.type = type;\n    }\n\n    public string GetTypeName()\n    {\n        return type;\n    }\n}\n\nclass Rectangle : Shape\n{\n    private double width;\n    private double height;\n\n    public Rectangle(double width, double height) : base(\"rectangle\")\n    {\n        this.width = width;\n        this.height = height;\n    }\n\n    public double GetWidth()\n    {\n        return width;\n    }\n\n    public double GetHeight()\n    {\n        return height;\n    }\n}\n\nclass Circle : Shape\n{\n    private double radius;\n\n    public Circle(double radius) : base(\"circle\")\n    {\n        this.radius = radius;\n    }\n\n    public double GetRadius()\n    {\n        return radius;\n    }\n}\n\nclass AreaCalculator\n{\n    public double CalculateArea(Shape shape)\n    {\n        if (shape.GetTypeName().Equals(\"rectangle\"))\n        {\n            Rectangle rectangle = (Rectangle)shape;\n            return rectangle.GetWidth() * rectangle.GetHeight();\n        }\n        else if (shape.GetTypeName().Equals(\"circle\"))\n        {\n            Circle circle = (Circle)shape;\n            return Math.PI * circle.GetRadius() * circle.GetRadius();\n        }\n        return 0;\n    }\n}\n",
            "output": "using System;\n\ninterface IShape\n{\n    double GetArea();\n}\n\nclass Rectangle : IShape\n{\n    private readonly double width;\n    private readonly double height;\n\n    public Rectangle(double width, double height)\n    {\n        this.width = width;\n        this.height = height;\n    }\n\n    public double GetArea()\n    {\n        return width * height;\n    }\n}\n\nclass Circle : IShape\n{\n    private readonly double radius;\n\n    public Circle(double radius)\n    {\n        this.radius = radius;\n    }\n\n    public double GetArea()\n    {\n        return Math.PI * radius * radius;\n    }\n}\n\nclass AreaCalculator\n{\n    public double CalculateArea(IShape shape)\n    {\n        return shape.GetArea();\n    }\n}\n",
            "level": "EASY",
            "language": "CSHARP",
            "violation": "OCP"
        },
        {
            "input": "using System;\nusing System.Collections.Generic;\n\nenum CharacterType\n{\n    WARRIOR,\n    MAGE,\n    ARCHER\n}\n\nclass GameCharacter\n{\n    private readonly string name;\n    private readonly CharacterType type;\n    private readonly int baseAttack;\n\n    public GameCharacter(string name, CharacterType type, int baseAttack)\n    {\n        this.name = name;\n        this.type = type;\n        this.baseAttack = baseAttack;\n    }\n\n    public string GetName() { return name; }\n    public CharacterType GetCharacterType() { return type; }\n    public int GetBaseAttack() { return baseAttack; }\n}\n\nclass DamageCalculator\n{\n    private static readonly Random random = new Random();\n\n    public int CalculateDamage(GameCharacter character)\n    {\n        switch (character.GetCharacterType())\n        {\n            case CharacterType.WARRIOR:\n                return (int)(character.GetBaseAttack() * 1.5);\n            case CharacterType.MAGE:\n                return character.GetBaseAttack() + 20;\n            case CharacterType.ARCHER:\n                bool crit = random.Next(2) == 0;\n                return crit ? character.GetBaseAttack() * 2 : character.GetBaseAttack();\n            default:\n                throw new ArgumentException(\"Unknown character type: \" + character.GetCharacterType());\n        }\n    }\n}\n\n",
            "output": "using System;\nusing System.Collections.Generic;\n\ninterface IDamageDealer\n{\n    int CalculateDamage();\n    string GetName();\n    CharacterType GetType();\n}\n\nenum CharacterType\n{\n    WARRIOR,\n    MAGE,\n    ARCHER\n}\n\nabstract class GameCharacter : IDamageDealer\n{\n    private readonly string name;\n    private readonly CharacterType type;\n    private readonly int baseAttack;\n\n    protected GameCharacter(string name, CharacterType type, int baseAttack)\n    {\n        this.name = name;\n        this.type = type;\n        this.baseAttack = baseAttack;\n    }\n\n    public string GetName() => name;\n    public CharacterType GetType() => type;\n    public int GetBaseAttack() => baseAttack;\n\n    public abstract int CalculateDamage();\n}\n\nclass Warrior : GameCharacter\n{\n    public Warrior(string name, int baseAttack) \n        : base(name, CharacterType.WARRIOR, baseAttack) { }\n\n    public override int CalculateDamage()\n    {\n        return (int)(GetBaseAttack() * 1.5);\n    }\n}\n\nclass Mage : GameCharacter\n{\n    public Mage(string name, int baseAttack) \n        : base(name, CharacterType.MAGE, baseAttack) { }\n\n    public override int CalculateDamage()\n    {\n        return GetBaseAttack() + 20;\n    }\n}\n\nclass Archer : GameCharacter\n{\n    private readonly Random random = new Random();\n\n    public Archer(string name, int baseAttack) \n        : base(name, CharacterType.ARCHER, baseAttack) { }\n\n    public override int CalculateDamage()\n    {\n        bool crit = random.Next(2) == 0;\n        return crit ? GetBaseAttack() * 2 : GetBaseAttack();\n    }\n}\n",
            "level": "EASY",
            "language": "CSHARP",
            "violation": "OCP"
        },
        {
            "input": "using System;\nusing System.Collections.Generic;\n\nenum FoodType\n{\n    BURGER,\n    FRIES,\n    PIZZA,\n    DRINK\n}\n\nclass FoodItem\n{\n    private readonly string name;\n    private readonly FoodType type;\n\n    public FoodItem(string name, FoodType type)\n    {\n        this.name = name;\n        this.type = type;\n    }\n\n    public string GetName() { return name; }\n    public FoodType GetFoodType() { return type; }\n}\n\nclass PriceCalculator\n{\n    public double CalculatePrice(FoodItem item)\n    {\n        switch (item.GetFoodType())\n        {\n            case FoodType.BURGER: return 5.99;\n            case FoodType.FRIES: return 2.49;\n            case FoodType.PIZZA: return 7.99;\n            case FoodType.DRINK: return 1.50;\n            default: throw new ArgumentException(\"Unknown type\");\n        }\n    }\n}\n\nclass Order\n{\n    private readonly List<FoodItem> items = new List<FoodItem>();\n\n    public void AddItem(FoodItem item) { items.Add(item); }\n    public List<FoodItem> GetItems() { return items; }\n}\n",
            "output": "using System;\nusing System.Collections.Generic;\n\ninterface IPricedItem\n{\n    string GetName();\n    double GetPrice();\n}\n\nabstract class FoodItem : IPricedItem\n{\n    private readonly string name;\n\n    protected FoodItem(string name)\n    {\n        this.name = name;\n    }\n\n    public string GetName()\n    {\n        return name;\n    }\n\n    public abstract double GetPrice();\n}\n\nclass Burger : FoodItem\n{\n    public Burger(string name) : base(name) { }\n\n    public override double GetPrice()\n    {\n        return 5.99;\n    }\n}\n\nclass Fries : FoodItem\n{\n    public Fries(string name) : base(name) { }\n\n    public override double GetPrice()\n    {\n        return 2.49;\n    }\n}\n\nclass Pizza : FoodItem\n{\n    public Pizza(string name) : base(name) { }\n\n    public override double GetPrice()\n    {\n        return 7.99;\n    }\n}\n\nclass Drink : FoodItem\n{\n    public Drink(string name) : base(name) { }\n\n    public override double GetPrice()\n    {\n        return 1.50;\n    }\n}\n\nclass Order\n{\n    private readonly List<FoodItem> items = new List<FoodItem>();\n\n    public void AddItem(FoodItem item)\n    {\n        items.Add(item);\n    }\n\n    public List<FoodItem> GetItems()\n    {\n        return items;\n    }\n}\n",
            "level": "EASY",
            "language": "CSHARP",
            "violation": "OCP"
        },
        {
            "input": "using System;\nusing System.Collections.Generic;\n\nenum DeviceType { LIGHT, THERMOSTAT, DOOR_LOCK }\n\nclass SmartDevice\n{\n    private readonly string id;\n    private readonly DeviceType type;\n\n    public SmartDevice(string id, DeviceType type)\n    {\n        this.id = id;\n        this.type = type;\n    }\n\n    public string GetId() { return id; }\n    public DeviceType GetDeviceType() { return type; }\n}\n\nclass SmartHomeController\n{\n    public void TurnOn(SmartDevice d)\n    {\n        switch (d.GetDeviceType())\n        {\n            case DeviceType.LIGHT:\n                Console.WriteLine(\"Light \" + d.GetId() + \" is ON\");\n                break;\n            case DeviceType.THERMOSTAT:\n                Console.WriteLine(\"Thermostat \" + d.GetId() + \" heating to 22Â°C\");\n                break;\n            case DeviceType.DOOR_LOCK:\n                Console.WriteLine(\"Door lock \" + d.GetId() + \" cannot be turned ON\");\n                break;\n            default:\n                throw new ArgumentException(\"Unknown device\");\n        }\n    }\n\n    public double EnergyUsageKwh(SmartDevice d, int minutes)\n    {\n        switch (d.GetDeviceType())\n        {\n            case DeviceType.LIGHT: return 0.012 * minutes;      // ~12W bulb\n            case DeviceType.THERMOSTAT: return 0.08 * minutes;  // HVAC running\n            case DeviceType.DOOR_LOCK: return 0.0002 * minutes; // idle electronics\n            default: throw new ArgumentException(\"Unknown device\");\n        }\n    }\n}\n\n",
            "output": "using System;\nusing System.Collections.Generic;\n\ninterface ISmartDevice\n{\n    string GetId();\n    void TurnOn();\n    double EnergyUsageKwh(int minutes);\n}\n\nclass Light : ISmartDevice\n{\n    private readonly string id;\n\n    public Light(string id)\n    {\n        this.id = id;\n    }\n\n    public string GetId()\n    {\n        return id;\n    }\n\n    public void TurnOn()\n    {\n        Console.WriteLine($\"Light {id} is ON\");\n    }\n\n    public double EnergyUsageKwh(int minutes)\n    {\n        return 0.012 * minutes; // 12W bulb\n    }\n}\n\nclass Thermostat : ISmartDevice\n{\n    private readonly string id;\n\n    public Thermostat(string id)\n    {\n        this.id = id;\n    }\n\n    public string GetId()\n    {\n        return id;\n    }\n\n    public void TurnOn()\n    {\n        Console.WriteLine($\"Thermostat {id} heating to 22Â°C\");\n    }\n\n    public double EnergyUsageKwh(int minutes)\n    {\n        return 0.08 * minutes; // HVAC\n    }\n}\n\nclass DoorLock : ISmartDevice\n{\n    private readonly string id;\n\n    public DoorLock(string id)\n    {\n        this.id = id;\n    }\n\n    public string GetId()\n    {\n        return id;\n    }\n\n    public void TurnOn()\n    {\n        Console.WriteLine($\"Door lock {id} cannot be turned ON\");\n    }\n\n    public double EnergyUsageKwh(int minutes)\n    {\n        return 0.0002 * minutes; // idle electronics\n    }\n}\n\nclass SmartHomeController\n{\n    public void ActivateDevice(ISmartDevice d)\n    {\n        d.TurnOn();\n    }\n\n    public double EnergyUsageKwh(ISmartDevice d, int minutes)\n    {\n        return d.EnergyUsageKwh(minutes);\n    }\n}\n",
            "level": "EASY",
            "language": "CSHARP",
            "violation": "OCP"
        },
        {
            "input": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nabstract class Entity\n{\n    private static long NEXT_ID = 1;\n    private readonly long id;\n\n    protected Entity()\n    {\n        this.id = NEXT_ID++;\n    }\n\n    public long GetId()\n    {\n        return id;\n    }\n}\n\nabstract class GraphicObject : Entity\n{\n    private readonly string color;\n    private readonly int layer;\n\n    protected GraphicObject(string color, int layer)\n    {\n        this.color = color;\n        this.layer = layer;\n    }\n\n    public string GetColor() { return color; }\n    public int GetLayer() { return layer; }\n}\n\nenum ShapeKind { RECTANGLE, CIRCLE, TRIANGLE, CUBE, SPHERE }\n\nabstract class Shape : GraphicObject\n{\n    private readonly ShapeKind kind;\n\n    protected Shape(ShapeKind kind, string color, int layer) : base(color, layer)\n    {\n        this.kind = kind;\n    }\n\n    public ShapeKind GetKind() { return kind; }\n}\n\nabstract class TwoDShape : Shape\n{\n    protected TwoDShape(ShapeKind kind, string color, int layer) : base(kind, color, layer) { }\n}\n\nabstract class ThreeDShape : Shape\n{\n    protected ThreeDShape(ShapeKind kind, string color, int layer) : base(kind, color, layer) { }\n}\n\nclass Rectangle : TwoDShape\n{\n    private readonly double width, height;\n\n    public Rectangle(double width, double height, string color, int layer) : base(ShapeKind.RECTANGLE, color, layer)\n    {\n        this.width = width; this.height = height;\n    }\n\n    public double GetWidth() { return width; }\n    public double GetHeight() { return height; }\n}\n\nclass Circle : TwoDShape\n{\n    private readonly double radius;\n\n    public Circle(double radius, string color, int layer) : base(ShapeKind.CIRCLE, color, layer)\n    {\n        this.radius = radius;\n    }\n\n    public double GetRadius() { return radius; }\n}\n\nclass Triangle : TwoDShape\n{\n    private readonly double a, b, c;\n\n    public Triangle(double a, double b, double c, string color, int layer) : base(ShapeKind.TRIANGLE, color, layer)\n    {\n        this.a = a; this.b = b; this.c = c;\n    }\n\n    public double GetA() { return a; }\n    public double GetB() { return b; }\n    public double GetC() { return c; }\n}\n\nclass Cube : ThreeDShape\n{\n    private readonly double edge;\n\n    public Cube(double edge, string color, int layer) : base(ShapeKind.CUBE, color, layer)\n    {\n        this.edge = edge;\n    }\n\n    public double GetEdge() { return edge; }\n}\n\nclass Sphere : ThreeDShape\n{\n    private readonly double radius;\n\n    public Sphere(double radius, string color, int layer) : base(ShapeKind.SPHERE, color, layer)\n    {\n        this.radius = radius;\n    }\n\n    public double GetRadius() { return radius; }\n}\n\nenum Metric { AREA, PERIMETER, VOLUME, DIAGONAL, BOUNDING_BOX_WIDTH }\n\nclass BoundingBox\n{\n    public readonly double width;\n    public readonly double height;\n    public BoundingBox(double width, double height) { this.width = width; this.height = height; }\n    public override string ToString() { return \"BBox(\" + width + \"x\" + height + \")\"; }\n}\n\nclass MetricCalculator\n{\n    public double Compute(Shape shape, Metric metric)\n    {\n        switch (shape.GetKind())\n        {\n            case ShapeKind.RECTANGLE:\n                {\n                    var r = (Rectangle)shape;\n                    switch (metric)\n                    {\n                        case Metric.AREA: return r.GetWidth() * r.GetHeight();\n                        case Metric.PERIMETER: return 2 * (r.GetWidth() + r.GetHeight());\n                        case Metric.DIAGONAL: return Math.Sqrt(r.GetWidth() * r.GetWidth() + r.GetHeight() * r.GetHeight());\n                        case Metric.BOUNDING_BOX_WIDTH: return r.GetWidth();\n                        case Metric.VOLUME: return 0;\n                    }\n                    break;\n                }\n            case ShapeKind.CIRCLE:\n                {\n                    var c = (Circle)shape;\n                    switch (metric)\n                    {\n                        case Metric.AREA: return Math.PI * c.GetRadius() * c.GetRadius();\n                        case Metric.PERIMETER: return 2 * Math.PI * c.GetRadius();\n                        case Metric.DIAGONAL: return 2 * c.GetRadius();\n                        case Metric.BOUNDING_BOX_WIDTH: return 2 * c.GetRadius();\n                        case Metric.VOLUME: return 0;\n                    }\n                    break;\n                }\n            case ShapeKind.TRIANGLE:\n                {\n                    var t = (Triangle)shape;\n                    double s = (t.GetA() + t.GetB() + t.GetC()) / 2.0;\n                    switch (metric)\n                    {\n                        case Metric.AREA: return Math.Sqrt(Math.Max(0, s * (s - t.GetA()) * (s - t.GetB()) * (s - t.GetC())));\n                        case Metric.PERIMETER: return (t.GetA() + t.GetB() + t.GetC());\n                        case Metric.DIAGONAL: return Math.Max(t.GetA(), Math.Max(t.GetB(), t.GetC()));\n                        case Metric.BOUNDING_BOX_WIDTH: return Math.Max(t.GetA(), Math.Max(t.GetB(), t.GetC()));\n                        case Metric.VOLUME: return 0;\n                    }\n                    break;\n                }\n            case ShapeKind.CUBE:\n                {\n                    var cube = (Cube)shape;\n                    switch (metric)\n                    {\n                        case Metric.AREA: return 6 * cube.GetEdge() * cube.GetEdge();\n                        case Metric.PERIMETER: return 12 * cube.GetEdge();\n                        case Metric.VOLUME: return Math.Pow(cube.GetEdge(), 3);\n                        case Metric.DIAGONAL: return Math.Sqrt(3) * cube.GetEdge();\n                        case Metric.BOUNDING_BOX_WIDTH: return cube.GetEdge();\n                    }\n                    break;\n                }\n            case ShapeKind.SPHERE:\n                {\n                    var s = (Sphere)shape;\n                    switch (metric)\n                    {\n                        case Metric.AREA: return 4 * Math.PI * s.GetRadius() * s.GetRadius();\n                        case Metric.PERIMETER: return 0;\n                        case Metric.VOLUME: return (4.0 / 3.0) * Math.PI * Math.Pow(s.GetRadius(), 3);\n                        case Metric.DIAGONAL: return 2 * s.GetRadius();\n                        case Metric.BOUNDING_BOX_WIDTH: return 2 * s.GetRadius();\n                    }\n                    break;\n                }\n        }\n        return 0;\n    }\n}\n\nclass ShapeValidator\n{\n    public bool IsValid(Shape shape)\n    {\n        switch (shape.GetKind())\n        {\n            case ShapeKind.RECTANGLE:\n                var r = (Rectangle)shape;\n                return r.GetWidth() > 0 && r.GetHeight() > 0;\n            case ShapeKind.CIRCLE:\n                var c = (Circle)shape;\n                return c.GetRadius() > 0;\n            case ShapeKind.TRIANGLE:\n                var t = (Triangle)shape;\n                return t.GetA() > 0 && t.GetB() > 0 && t.GetC() > 0\n                    && t.GetA() + t.GetB() > t.GetC()\n                    && t.GetA() + t.GetC() > t.GetB()\n                    && t.GetB() + t.GetC() > t.GetA();\n            case ShapeKind.CUBE:\n                var cube = (Cube)shape;\n                return cube.GetEdge() > 0;\n            case ShapeKind.SPHERE:\n                var s = (Sphere)shape;\n                return s.GetRadius() > 0;\n        }\n        return false;\n    }\n}\n\nclass ShapeRenderer\n{\n    public string RenderPseudoSvg(Shape shape)\n    {\n        switch (shape.GetKind())\n        {\n            case ShapeKind.RECTANGLE:\n                var r = (Rectangle)shape;\n                return $\"<rect w=\\\"{r.GetWidth()}\\\" h=\\\"{r.GetHeight()}\\\" fill=\\\"{shape.GetColor()}\\\" layer=\\\"{shape.GetLayer()}\\\"/>\";\n            case ShapeKind.CIRCLE:\n                var c = (Circle)shape;\n                return $\"<circle r=\\\"{c.GetRadius()}\\\" fill=\\\"{shape.GetColor()}\\\" layer=\\\"{shape.GetLayer()}\\\"/>\";\n            case ShapeKind.TRIANGLE:\n                var t = (Triangle)shape;\n                return $\"<polygon a=\\\"{t.GetA()}\\\" b=\\\"{t.GetB()}\\\" c=\\\"{t.GetC()}\\\" fill=\\\"{shape.GetColor()}\\\" layer=\\\"{shape.GetLayer()}\\\"/>\";\n            case ShapeKind.CUBE:\n                var cube = (Cube)shape;\n                return $\"<cube edge=\\\"{cube.GetEdge()}\\\" materialColor=\\\"{shape.GetColor()}\\\" layer=\\\"{shape.GetLayer()}\\\"/>\";\n            case ShapeKind.SPHERE:\n                var s = (Sphere)shape;\n                return $\"<sphere r=\\\"{s.GetRadius()}\\\" materialColor=\\\"{shape.GetColor()}\\\" layer=\\\"{shape.GetLayer()}\\\"/>\";\n        }\n        return \"<unknown/>\";\n    }\n}\n\nclass ShapeSerializer\n{\n    public string ToCsvRow(Shape shape)\n    {\n        switch (shape.GetKind())\n        {\n            case ShapeKind.RECTANGLE:\n                var r = (Rectangle)shape;\n                return $\"rectangle,{r.GetWidth()},{r.GetHeight()},{shape.GetColor()},{shape.GetLayer()}\";\n            case ShapeKind.CIRCLE:\n                var c = (Circle)shape;\n                return $\"circle,{c.GetRadius()},{shape.GetColor()},{shape.GetLayer()}\";\n            case ShapeKind.TRIANGLE:\n                var t = (Triangle)shape;\n                return $\"triangle,{t.GetA()},{t.GetB()},{t.GetC()},{shape.GetColor()},{shape.GetLayer()}\";\n            case ShapeKind.CUBE:\n                var cube = (Cube)shape;\n                return $\"cube,{cube.GetEdge()},{shape.GetColor()},{shape.GetLayer()}\";\n            case ShapeKind.SPHERE:\n                var s = (Sphere)shape;\n                return $\"sphere,{s.GetRadius()},{shape.GetColor()},{shape.GetLayer()}\";\n        }\n        return \"unknown\";\n    }\n}\n\nclass ShapeFactory\n{\n    public Shape Create(string spec)\n    {\n        var parts = spec.Split(';');\n        string type = parts[0].Trim().ToLower();\n        var map = new Dictionary<string, string>();\n        for (int i = 1; i < parts.Length; i++)\n        {\n            var kv = parts[i].Split('=');\n            if (kv.Length == 2) map[kv[0].Trim().ToLower()] = kv[1].Trim();\n        }\n        string color = map.ContainsKey(\"color\") ? map[\"color\"] : \"black\";\n        int layer = int.Parse(map.ContainsKey(\"layer\") ? map[\"layer\"] : \"0\");\n\n        switch (type)\n        {\n            case \"rectangle\":\n                return new Rectangle(\n                    double.Parse(map.ContainsKey(\"width\") ? map[\"width\"] : \"0\"),\n                    double.Parse(map.ContainsKey(\"height\") ? map[\"height\"] : \"0\"),\n                    color, layer);\n            case \"circle\":\n                return new Circle(\n                    double.Parse(map.ContainsKey(\"radius\") ? map[\"radius\"] : \"0\"),\n                    color, layer);\n            case \"triangle\":\n                return new Triangle(\n                    double.Parse(map.ContainsKey(\"a\") ? map[\"a\"] : \"0\"),\n                    double.Parse(map.ContainsKey(\"b\") ? map[\"b\"] : \"0\"),\n                    double.Parse(map.ContainsKey(\"c\") ? map[\"c\"] : \"0\"),\n                    color, layer);\n            case \"cube\":\n                return new Cube(\n                    double.Parse(map.ContainsKey(\"edge\") ? map[\"edge\"] : \"0\"),\n                    color, layer);\n            case \"sphere\":\n                return new Sphere(\n                    double.Parse(map.ContainsKey(\"radius\") ? map[\"radius\"] : \"0\"),\n                    color, layer);\n        }\n        throw new ArgumentException(\"Unknown shape type: \" + type);\n    }\n}\n\nclass ShapePricing\n{\n    private readonly MetricCalculator calc = new MetricCalculator();\n\n    public double Price(Shape shape)\n    {\n        switch (shape.GetKind())\n        {\n            case ShapeKind.RECTANGLE:\n                double area = calc.Compute(shape, Metric.AREA);\n                return 0.5 * area + shape.GetLayer() * 2;\n            case ShapeKind.CIRCLE:\n                double a = calc.Compute(shape, Metric.AREA);\n                double diag = calc.Compute(shape, Metric.DIAGONAL);\n                return 0.6 * a + 0.1 * diag;\n            case ShapeKind.TRIANGLE:\n                double per = calc.Compute(shape, Metric.PERIMETER);\n                return per * 0.8;\n            case ShapeKind.CUBE:\n                double vol = calc.Compute(shape, Metric.VOLUME);\n                return 1.2 * vol;\n            case ShapeKind.SPHERE:\n                double v = calc.Compute(shape, Metric.VOLUME);\n                return 1.0 * v + 10;\n        }\n        return 0;\n    }\n}\n\nclass LegendBuilder\n{\n    public string LegendSymbol(Shape shape)\n    {\n        switch (shape.GetKind())\n        {\n            case ShapeKind.RECTANGLE: return \"â­\";\n            case ShapeKind.CIRCLE: return \"â¯\";\n            case ShapeKind.TRIANGLE: return \"â³\";\n            case ShapeKind.CUBE: return \"â¬\";\n            case ShapeKind.SPHERE: return \"â¯\";\n        }\n        return \"?\";\n    }\n}\n\nclass CollisionEngine\n{\n    public BoundingBox BoundingBox(Shape shape)\n    {\n        switch (shape.GetKind())\n        {\n            case ShapeKind.RECTANGLE:\n                var r = (Rectangle)shape;\n                return new BoundingBox(r.GetWidth(), r.GetHeight());\n            case ShapeKind.CIRCLE:\n                var c = (Circle)shape;\n                double d = 2 * c.GetRadius();\n                return new BoundingBox(d, d);\n            case ShapeKind.TRIANGLE:\n                var t = (Triangle)shape;\n                double max = Math.Max(t.GetA(), Math.Max(t.GetB(), t.GetC()));\n                double avg = (t.GetA() + t.GetB() + t.GetC() - max) / 2.0;\n                return new BoundingBox(max, avg);\n            case ShapeKind.CUBE:\n                var cube = (Cube)shape;\n                return new BoundingBox(cube.GetEdge(), cube.GetEdge());\n            case ShapeKind.SPHERE:\n                var s = (Sphere)shape;\n                double ds = 2 * s.GetRadius();\n                return new BoundingBox(ds, ds);\n        }\n        return new BoundingBox(0, 0);\n    }\n\n    public bool Overlaps(Shape a, Shape b)\n    {\n        var A = BoundingBox(a);\n        var B = BoundingBox(b);\n        return (A.width * A.height) > 0 && (B.width * B.height) > 0;\n    }\n}\n\nclass ShapeReport\n{\n    private readonly MetricCalculator calc = new MetricCalculator();\n    private readonly ShapeSerializer ser = new ShapeSerializer();\n    private readonly ShapeRenderer rnd = new ShapeRenderer();\n    private readonly CollisionEngine col = new CollisionEngine();\n    private readonly ShapePricing price = new ShapePricing();\n    private readonly LegendBuilder legend = new LegendBuilder();\n\n    public string Summarize(List<Shape> shapes)\n    {\n        var sb = new System.Text.StringBuilder();\n        sb.Append(\"=== Shape Report (OCP-violating) ===\\n\");\n        foreach (Shape s in shapes)\n        {\n            sb.Append(\"ID \").Append(s.GetId())\n              .Append(\" \").Append(s.GetKind())\n              .Append(\" color=\").Append(s.GetColor())\n              .Append(\" layer=\").Append(s.GetLayer()).Append(\"\\n\");\n\n            sb.Append(\"  CSV: \").Append(ser.ToCsvRow(s)).Append(\"\\n\");\n            sb.Append(\"  SVG: \").Append(rnd.RenderPseudoSvg(s)).Append(\"\\n\");\n            sb.Append(\"  Legend: \").Append(legend.LegendSymbol(s)).Append(\"\\n\");\n\n            sb.Append(\"  Metrics: \");\n            sb.Append(\" area=\").Append(calc.Compute(s, Metric.AREA));\n            sb.Append(\" perim=\").Append(calc.Compute(s, Metric.PERIMETER));\n            sb.Append(\" diag=\").Append(calc.Compute(s, Metric.DIAGONAL));\n            if (s is ThreeDShape)\n            {\n                sb.Append(\" vol=\").Append(calc.Compute(s, Metric.VOLUME));\n            }\n            sb.Append(\"\\n\");\n\n            sb.Append(\"  BBox: \").Append(col.BoundingBox(s)).Append(\"\\n\");\n            sb.Append(\"  Price: \").Append(price.Price(s)).Append(\"\\n\\n\");\n        }\n        return sb.ToString();\n    }\n}\n\n",
            "output": "using System;\nusing System.Collections.Generic;\nusing System.Globalization;\nusing System.Text;\n\nabstract class Entity {\n    private static long NEXT_ID = 1;\n    private readonly long id;\n    protected Entity() { this.id = NEXT_ID++; }\n    public long GetId() { return id; }\n}\n\nabstract class GraphicObject : Entity {\n    private readonly string color;\n    private readonly int layer;\n    protected GraphicObject(string color, int layer) { this.color = color; this.layer = layer; }\n    public string GetColor() { return color; }\n    public int GetLayer() { return layer; }\n}\n\nenum ShapeKind { RECTANGLE, CIRCLE, TRIANGLE, CUBE, SPHERE }\n\nsealed class BoundingBox {\n    public readonly double width;\n    public readonly double height;\n    public BoundingBox(double width, double height) { this.width = width; this.height = height; }\n    public override string ToString() { return \"BBox(\" + F.S(width) + \"x\" + F.S(height) + \")\"; }\n}\n\ninterface HasWidthHeight { double GetWidth(); double GetHeight(); }\ninterface HasRadius { double GetRadius(); }\ninterface HasTriangleSides { double GetA(); double GetB(); double GetC(); }\ninterface HasEdge { double GetEdge(); }\n\nabstract class Shape : GraphicObject {\n    private readonly ShapeKind kind;\n    protected Shape(ShapeKind kind, string color, int layer) : base(color, layer) { this.kind = kind; }\n    public ShapeKind GetKind() { return kind; }\n    public abstract bool IsValid();\n    public abstract string RenderPseudoSvg();\n    public abstract string ToCsvRow();\n    public abstract string LegendSymbol();\n    public abstract BoundingBox BoundingBox();\n    public abstract double Price(MetricCalculator calc);\n}\n\nabstract class TwoDShape : Shape {\n    protected TwoDShape(ShapeKind kind, string color, int layer) : base(kind, color, layer) { }\n}\nabstract class ThreeDShape : Shape {\n    protected ThreeDShape(ShapeKind kind, string color, int layer) : base(kind, color, layer) { }\n}\n\nsealed class Rectangle : TwoDShape, HasWidthHeight {\n    private readonly double width, height;\n    public Rectangle(double width, double height, string color, int layer) : base(ShapeKind.RECTANGLE, color, layer) { this.width = width; this.height = height; }\n    public double GetWidth() { return width; }\n    public double GetHeight() { return height; }\n    public override bool IsValid() { return width > 0 && height > 0; }\n    public override string RenderPseudoSvg() { return \"<rect w=\\\"\" + F.S(width) + \"\\\" h=\\\"\" + F.S(height) + \"\\\" fill=\\\"\" + GetColor() + \"\\\" layer=\\\"\" + GetLayer() + \"\\\"/>\"; }\n    public override string ToCsvRow() { return \"rectangle,\" + F.S(width) + \",\" + F.S(height) + \",\" + GetColor() + \",\" + GetLayer(); }\n    public override string LegendSymbol() { return \"â­\"; }\n    public override BoundingBox BoundingBox() { return new BoundingBox(width, height); }\n    public override double Price(MetricCalculator calc) {\n        double area = calc.Compute(this, \"area\");\n        return 0.5 * area + GetLayer() * 2;\n    }\n}\n\nsealed class Circle : TwoDShape, HasRadius {\n    private readonly double radius;\n    public Circle(double radius, string color, int layer) : base(ShapeKind.CIRCLE, color, layer) { this.radius = radius; }\n    public double GetRadius() { return radius; }\n    public override bool IsValid() { return radius > 0; }\n    public override string RenderPseudoSvg() { return \"<circle r=\\\"\" + F.S(radius) + \"\\\" fill=\\\"\" + GetColor() + \"\\\" layer=\\\"\" + GetLayer() + \"\\\"/>\"; }\n    public override string ToCsvRow() { return \"circle,\" + F.S(radius) + \",\" + GetColor() + \",\" + GetLayer(); }\n    public override string LegendSymbol() { return \"â¯\"; }\n    public override BoundingBox BoundingBox() { double d = 2 * radius; return new BoundingBox(d, d); }\n    public override double Price(MetricCalculator calc) {\n        double area = calc.Compute(this, \"area\");\n        double diag = calc.Compute(this, \"diagonal\");\n        return 0.6 * area + 0.1 * diag;\n    }\n}\n\nsealed class Triangle : TwoDShape, HasTriangleSides {\n    private readonly double a, b, c;\n    public Triangle(double a, double b, double c, string color, int layer) : base(ShapeKind.TRIANGLE, color, layer) { this.a = a; this.b = b; this.c = c; }\n    public double GetA() { return a; } public double GetB() { return b; } public double GetC() { return c; }\n    public override bool IsValid() { return a > 0 && b > 0 && c > 0 && a + b > c && a + c > b && b + c > a; }\n    public override string RenderPseudoSvg() { return \"<polygon a=\\\"\" + F.S(a) + \"\\\" b=\\\"\" + F.S(b) + \"\\\" c=\\\"\" + F.S(c) + \"\\\" fill=\\\"\" + GetColor() + \"\\\" layer=\\\"\" + GetLayer() + \"\\\"/>\"; }\n    public override string ToCsvRow() { return \"triangle,\" + F.S(a) + \",\" + F.S(b) + \",\" + F.S(c) + \",\" + GetColor() + \",\" + GetLayer(); }\n    public override string LegendSymbol() { return \"â³\"; }\n    public override BoundingBox BoundingBox() { double max = Math.Max(a, Math.Max(b, c)); double avg = (a + b + c - max) / 2.0; return new BoundingBox(max, avg); }\n    public override double Price(MetricCalculator calc) {\n        double per = calc.Compute(this, \"perimeter\");\n        return per * 0.8;\n    }\n}\n\nsealed class Cube : ThreeDShape, HasEdge {\n    private readonly double edge;\n    public Cube(double edge, string color, int layer) : base(ShapeKind.CUBE, color, layer) { this.edge = edge; }\n    public double GetEdge() { return edge; }\n    public override bool IsValid() { return edge > 0; }\n    public override string RenderPseudoSvg() { return \"<cube edge=\\\"\" + F.S(edge) + \"\\\" materialColor=\\\"\" + GetColor() + \"\\\" layer=\\\"\" + GetLayer() + \"\\\"/>\"; }\n    public override string ToCsvRow() { return \"cube,\" + F.S(edge) + \",\" + GetColor() + \",\" + GetLayer(); }\n    public override string LegendSymbol() { return \"â¬\"; }\n    public override BoundingBox BoundingBox() { return new BoundingBox(edge, edge); }\n    public override double Price(MetricCalculator calc) {\n        double vol = calc.Compute(this, \"volume\");\n        return 1.2 * vol;\n    }\n}\n\nsealed class Sphere : ThreeDShape, HasRadius {\n    private readonly double radius;\n    public Sphere(double radius, string color, int layer) : base(ShapeKind.SPHERE, color, layer) { this.radius = radius; }\n    public double GetRadius() { return radius; }\n    public override bool IsValid() { return radius > 0; }\n    public override string RenderPseudoSvg() { return \"<sphere r=\\\"\" + F.S(radius) + \"\\\" materialColor=\\\"\" + GetColor() + \"\\\" layer=\\\"\" + GetLayer() + \"\\\"/>\"; }\n    public override string ToCsvRow() { return \"sphere,\" + F.S(radius) + \",\" + GetColor() + \",\" + GetLayer(); }\n    public override string LegendSymbol() { return \"â¯\"; }\n    public override BoundingBox BoundingBox() { double d = 2 * radius; return new BoundingBox(d, d); }\n    public override double Price(MetricCalculator calc) {\n        double vol = calc.Compute(this, \"volume\");\n        return 1.0 * vol + 10;\n    }\n}\n\nsealed class RegisteredMetric {\n    private readonly string name;\n    private readonly List<KeyValuePair<Type, Func<object, double>>> handlers = new List<KeyValuePair<Type, Func<object, double>>>();\n    public RegisteredMetric(string name) { this.name = name; }\n    public string Name() { return name; }\n    public RegisteredMetric On<T>(Func<T, double> fn) { handlers.Add(new KeyValuePair<Type, Func<object, double>>(typeof(T), o => fn((T)o))); return this; }\n    public double Apply(Shape s) {\n        foreach (var e in handlers) {\n            if (e.Key.IsInstanceOfType(s)) return e.Value(s);\n        }\n        return 0;\n    }\n}\n\nsealed class MetricCalculator {\n    private readonly Dictionary<string, RegisteredMetric> metrics = new Dictionary<string, RegisteredMetric>();\n    public void Register(RegisteredMetric metric) { metrics[metric.Name()] = metric; }\n    public double Compute(Shape shape, string metricName) {\n        if (!metrics.TryGetValue(metricName, out var m)) throw new ArgumentException(\"Unknown metric: \" + metricName);\n        return m.Apply(shape);\n    }\n}\n\nsealed class ShapeValidator { public bool IsValid(Shape shape) { return shape.IsValid(); } }\nsealed class ShapeRenderer { public string RenderPseudoSvg(Shape shape) { return shape.RenderPseudoSvg(); } }\nsealed class ShapeSerializer { public string ToCsvRow(Shape shape) { return shape.ToCsvRow(); } }\n\nsealed class ShapeFactory {\n    public interface ICreator { Shape Create(Dictionary<string, string> map, string color, int layer); }\n    private readonly Dictionary<string, ICreator> creators = new Dictionary<string, ICreator>();\n    public void Register(string type, ICreator c) { creators[type.ToLowerInvariant()] = c; }\n    public Shape Create(string spec) {\n        string[] parts = spec.Split(';');\n        string type = parts[0].Trim().ToLowerInvariant();\n        var map = new Dictionary<string, string>();\n        for (int i = 1; i < parts.Length; i++) {\n            string[] kv = parts[i].Split('=');\n            if (kv.Length == 2) map[kv[0].Trim().ToLowerInvariant()] = kv[1].Trim();\n        }\n        string color = map.ContainsKey(\"color\") ? map[\"color\"] : \"black\";\n        int layer = int.Parse(map.ContainsKey(\"layer\") ? map[\"layer\"] : \"0\", CultureInfo.InvariantCulture);\n        if (!creators.TryGetValue(type, out var c)) throw new ArgumentException(\"Unknown shape type: \" + type);\n        return c.Create(map, color, layer);\n    }\n}\n\nsealed class ShapePricing {\n    private readonly MetricCalculator calc;\n    public ShapePricing(MetricCalculator calc) { this.calc = calc; }\n    public double Price(Shape shape) { return shape.Price(calc); }\n}\n\nsealed class LegendBuilder { public string LegendSymbol(Shape shape) { return shape.LegendSymbol(); } }\n\nsealed class CollisionEngine {\n    public BoundingBox BoundingBox(Shape shape) { return shape.BoundingBox(); }\n    public bool Overlaps(Shape a, Shape b) {\n        BoundingBox A = BoundingBox(a);\n        BoundingBox B = BoundingBox(b);\n        return (A.width * A.height) > 0 && (B.width * B.height) > 0;\n    }\n}\n\nsealed class ShapeReport {\n    private readonly MetricCalculator calc;\n    private readonly ShapeSerializer ser = new ShapeSerializer();\n    private readonly ShapeRenderer rnd = new ShapeRenderer();\n    private readonly CollisionEngine col = new CollisionEngine();\n    private readonly ShapePricing price;\n    private readonly LegendBuilder legend = new LegendBuilder();\n    public ShapeReport(MetricCalculator calc) { this.calc = calc; this.price = new ShapePricing(calc); }\n    public string Summarize(List<Shape> shapes) {\n        var sb = new StringBuilder();\n        sb.Append(\"=== Shape Report (OCP-violating) ===\\n\");\n        foreach (Shape s in shapes) {\n            sb.Append(\"ID \").Append(s.GetId())\n              .Append(\" \").Append(s.GetKind())\n              .Append(\" color=\").Append(s.GetColor())\n              .Append(\" layer=\").Append(s.GetLayer()).Append(\"\\n\");\n\n            sb.Append(\"  CSV: \").Append(ser.ToCsvRow(s)).Append(\"\\n\");\n            sb.Append(\"  SVG: \").Append(rnd.RenderPseudoSvg(s)).Append(\"\\n\");\n            sb.Append(\"  Legend: \").Append(legend.LegendSymbol(s)).Append(\"\\n\");\n\n            sb.Append(\"  Metrics: \");\n            sb.Append(\" area=\").Append(F.S(calc.Compute(s, \"area\")));\n            sb.Append(\" perim=\").Append(F.S(calc.Compute(s, \"perimeter\")));\n            sb.Append(\" diag=\").Append(F.S(calc.Compute(s, \"diagonal\")));\n            if (s is ThreeDShape) {\n                sb.Append(\" vol=\").Append(F.S(calc.Compute(s, \"volume\")));\n            }\n            sb.Append(\"\\n\");\n\n            sb.Append(\"  BBox: \").Append(col.BoundingBox(s)).Append(\"\\n\");\n            sb.Append(\"  Price: \").Append(F.S(price.Price(s))).Append(\"\\n\\n\");\n        }\n        return sb.ToString();\n    }\n}\n\nstatic class F {\n    public static string S(double x) {\n        if (double.IsNaN(x)) return \"NaN\";\n        if (double.IsInfinity(x)) return x > 0 ? \"Infinity\" : \"-Infinity\";\n        if (x == Math.Truncate(x)) return ((long)x).ToString(CultureInfo.InvariantCulture) + \".0\";\n        return x.ToString(\"0.###################\", CultureInfo.InvariantCulture);\n    }\n}",
            "level": "HARD",
            "language": "CSHARP",
            "violation": "OCP"
        },
        {
            "input": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nenum CharacterType { WARRIOR, MAGE, ARCHER, ROGUE }\nenum SkillType { BASIC, SPECIAL, SUPPORT }\nenum WeaponType { SWORD, STAFF, BOW, DAGGER }\nenum PetType { WOLF, FAIRY, HAWK, SHADOW_CAT }\n\nclass Stats\n{\n    public int hp, mp, atk, mag, def, res, spd, crit;\n    public Stats(int hp, int mp, int atk, int mag, int def, int res, int spd, int crit)\n    {\n        this.hp = hp; this.mp = mp; this.atk = atk; this.mag = mag; this.def = def; this.res = res; this.spd = spd; this.crit = crit;\n    }\n    public Stats Copy() { return new Stats(hp, mp, atk, mag, def, res, spd, crit); }\n}\n\nclass Skill\n{\n    public readonly string name;\n    public readonly SkillType type;\n    public readonly int cost;\n    public Skill(string n, SkillType t, int c) { name = n; type = t; cost = c; }\n}\n\nclass Weapon\n{\n    public readonly string name;\n    public readonly WeaponType type;\n    public readonly int power;\n    public Weapon(string n, WeaponType t, int p) { name = n; type = t; power = p; }\n}\n\nclass Pet\n{\n    public readonly string name;\n    public readonly PetType type;\n    public readonly int bond;\n    public Pet(string n, PetType t, int b) { name = n; type = t; bond = b; }\n}\n\nclass Enemy\n{\n    public readonly string name;\n    public readonly Stats stats;\n    public Enemy(string n, Stats s) { name = n; stats = s; }\n}\n\nclass GameCharacter\n{\n    public readonly string name;\n    public readonly CharacterType type;\n    public readonly int level;\n    public readonly Stats stats;\n    public readonly List<Skill> skills;\n    public readonly Weapon weapon;\n    public readonly Pet pet;\n    public GameCharacter(string n, CharacterType t, int lvl, Stats s, List<Skill> k, Weapon w, Pet p)\n    {\n        name = n; type = t; level = lvl; stats = s; skills = k; weapon = w; pet = p;\n    }\n}\n\nclass PetBoostSystem\n{\n    Random rng = new Random();\n    public int OffenseBoost(GameCharacter c)\n    {\n        switch (c.pet.type)\n        {\n            case PetType.WOLF: return (int)(c.stats.atk * Math.Min(0.25, 0.05 + c.pet.bond / 100.0));\n            case PetType.FAIRY: return (int)(c.stats.mag * Math.Min(0.25, 0.05 + c.pet.bond / 120.0));\n            case PetType.HAWK: return c.stats.spd / 3 + c.pet.bond / 6;\n            case PetType.SHADOW_CAT: return 5 + c.pet.bond / 5;\n        }\n        return 0;\n    }\n    public int DefenseBoost(GameCharacter c)\n    {\n        switch (c.pet.type)\n        {\n            case PetType.WOLF: return c.stats.def / 6;\n            case PetType.FAIRY: return c.stats.res / 4;\n            case PetType.HAWK: return c.stats.spd / 6;\n            case PetType.SHADOW_CAT: return 3;\n        }\n        return 0;\n    }\n    public bool PetAssist(GameCharacter c)\n    {\n        switch (c.pet.type)\n        {\n            case PetType.WOLF: return rng.Next(100) < Math.Min(35, 10 + c.pet.bond / 3);\n            case PetType.FAIRY: return rng.Next(100) < Math.Min(40, 15 + c.pet.bond / 2);\n            case PetType.HAWK: return rng.Next(100) < Math.Min(30, 8 + c.pet.bond / 4);\n            case PetType.SHADOW_CAT: return rng.Next(100) < Math.Min(45, 12 + c.pet.bond / 2);\n        }\n        return false;\n    }\n    public int PetAssistDamage(GameCharacter c)\n    {\n        switch (c.pet.type)\n        {\n            case PetType.WOLF: return 6 + c.pet.bond / 4;\n            case PetType.FAIRY: return 4 + c.pet.bond / 5;\n            case PetType.HAWK: return 5 + c.pet.bond / 6;\n            case PetType.SHADOW_CAT: return 7 + c.pet.bond / 5;\n        }\n        return 0;\n    }\n    public int PetAssistHeal(GameCharacter c)\n    {\n        switch (c.pet.type)\n        {\n            case PetType.FAIRY: return 8 + c.pet.bond / 3;\n            default: return 0;\n        }\n    }\n}\n\nclass WeaponRuleSet\n{\n    public int ApplyWeapon(GameCharacter c, int baseVal)\n    {\n        switch (c.weapon.type)\n        {\n            case WeaponType.SWORD: return baseVal + c.weapon.power + c.stats.atk / 4;\n            case WeaponType.STAFF: return baseVal + c.weapon.power / 2 + c.stats.mag / 2;\n            case WeaponType.BOW: return baseVal + c.weapon.power + c.stats.spd / 3;\n            case WeaponType.DAGGER: return baseVal + c.weapon.power + c.stats.spd / 2;\n        }\n        return baseVal;\n    }\n    public int CritChance(GameCharacter c)\n    {\n        switch (c.weapon.type)\n        {\n            case WeaponType.SWORD: return 8 + c.stats.crit;\n            case WeaponType.STAFF: return 5 + c.stats.crit / 2;\n            case WeaponType.BOW: return 15 + c.stats.crit;\n            case WeaponType.DAGGER: return 18 + c.stats.crit;\n        }\n        return 0;\n    }\n}\n\nclass DamageCalculator\n{\n    readonly Random rng = new Random();\n    readonly WeaponRuleSet wr = new WeaponRuleSet();\n    readonly PetBoostSystem pets = new PetBoostSystem();\n\n    public int Calc(GameCharacter c, Skill s, Enemy e)\n    {\n        int baseVal;\n        switch (c.type)\n        {\n            case CharacterType.WARRIOR:\n                baseVal = (int)(c.stats.atk * (1.1 + c.level * 0.03)) - e.stats.def / 3;\n                if (s.type == SkillType.SPECIAL) baseVal += 12;\n                break;\n            case CharacterType.MAGE:\n                baseVal = c.stats.mag * 2 + (s.type == SkillType.SPECIAL ? 18 : 0) - e.stats.res / 2;\n                break;\n            case CharacterType.ARCHER:\n                baseVal = c.stats.atk + c.stats.spd / 2 + (s.type == SkillType.SPECIAL ? 10 : 0) - e.stats.def / 4;\n                break;\n            case CharacterType.ROGUE:\n                baseVal = c.stats.atk + c.stats.spd + (s.type == SkillType.SPECIAL ? 14 : 0) - e.stats.def / 5;\n                break;\n            default:\n                baseVal = 0;\n                break;\n        }\n        baseVal = wr.ApplyWeapon(c, baseVal);\n        baseVal += pets.OffenseBoost(c);\n        if (pets.PetAssist(c)) baseVal += pets.PetAssistDamage(c);\n        int critChance = wr.CritChance(c) + (c.type == CharacterType.ARCHER ? 10 : 0);\n        if (rng.Next(100) < critChance) baseVal *= 2;\n        return Math.Max(0, baseVal);\n    }\n}\n\nclass HealCalculator\n{\n    readonly PetBoostSystem pets = new PetBoostSystem();\n    public int Heal(GameCharacter c, Skill s)\n    {\n        int amt;\n        switch (c.type)\n        {\n            case CharacterType.WARRIOR: amt = c.stats.atk / 3 + 6; break;\n            case CharacterType.MAGE: amt = c.stats.mag + 14; break;\n            case CharacterType.ARCHER: amt = c.stats.atk / 4 + c.stats.spd / 5; break;\n            case CharacterType.ROGUE: amt = c.stats.atk / 2; break;\n            default: amt = 0; break;\n        }\n        if (s.type == SkillType.SPECIAL) amt += 6;\n        amt += pets.DefenseBoost(c) / 2 + pets.PetAssistHeal(c);\n        return Math.Max(0, amt);\n    }\n}\n\nclass LootCalculator\n{\n    public int Gold(GameCharacter c, Enemy e)\n    {\n        switch (c.type)\n        {\n            case CharacterType.WARRIOR: return 10 + c.level + e.stats.def / 5;\n            case CharacterType.MAGE: return 9 + c.level * 2 + e.stats.res / 4;\n            case CharacterType.ARCHER: return 11 + c.level + e.stats.def / 6;\n            case CharacterType.ROGUE: return 14 + c.level;\n        }\n        return 0;\n    }\n}\n\nclass TargetingSystem\n{\n    public Enemy Pick(List<Enemy> enemies)\n    {\n        Enemy t = enemies[0];\n        foreach (Enemy e in enemies) if (e.stats.hp < t.stats.hp) t = e;\n        return t;\n    }\n}\n\nclass SkillSelector\n{\n    public Skill Choose(GameCharacter c)\n    {\n        foreach (Skill s in c.skills) if (s.type != SkillType.BASIC) return s;\n        return c.skills[0];\n    }\n}\n\nclass TurnEngine\n{\n    readonly DamageCalculator dmg = new DamageCalculator();\n    readonly HealCalculator healCalc = new HealCalculator();\n    readonly LootCalculator loot = new LootCalculator();\n    readonly TargetingSystem targeting = new TargetingSystem();\n    readonly SkillSelector selector = new SkillSelector();\n\n    public void Turn(List<GameCharacter> party, List<Enemy> enemies)\n    {\n        foreach (GameCharacter c in party)\n        {\n            Skill s = selector.Choose(c);\n            if (s.type == SkillType.SUPPORT)\n            {\n                int h = healCalc.Heal(c, s);\n                c.stats.hp += h;\n                continue;\n            }\n            Enemy target = targeting.Pick(enemies);\n            int d = dmg.Calc(c, s, target);\n            target.stats.hp = Math.Max(0, target.stats.hp - d);\n        }\n    }\n    public int TotalGold(List<GameCharacter> party, Enemy e)\n    {\n        int g = 0; foreach (GameCharacter c in party) g += loot.Gold(c, e); return g;\n    }\n}\n",
            "output": "using System;\nusing System.Collections.Generic;\n\nenum CharacterType { WARRIOR, MAGE, ARCHER, ROGUE }\nenum SkillType { BASIC, SPECIAL, SUPPORT }\nenum WeaponType { SWORD, STAFF, BOW, DAGGER }\nenum PetType { WOLF, FAIRY, HAWK, SHADOW_CAT }\n\nclass Stats {\n    public int hp, mp, atk, mag, def, res, spd, crit;\n    public Stats(int hp, int mp, int atk, int mag, int def, int res, int spd, int crit) {\n        this.hp = hp; this.mp = mp; this.atk = atk; this.mag = mag; this.def = def; this.res = res; this.spd = spd; this.crit = crit;\n    }\n    public Stats copy() { return new Stats(hp, mp, atk, mag, def, res, spd, crit); }\n}\n\nclass Skill {\n    public readonly string name; public readonly SkillType type; public readonly int cost;\n    public Skill(string n, SkillType t, int c) { name = n; type = t; cost = c; }\n}\n\nclass Weapon {\n    public readonly string name; public readonly WeaponType type; public readonly int power;\n    public Weapon(string n, WeaponType t, int p) { name = n; type = t; power = p; }\n}\n\nclass Pet {\n    public readonly string name; public readonly PetType type; public readonly int bond;\n    public Pet(string n, PetType t, int b) { name = n; type = t; bond = b; }\n}\n\nclass Enemy {\n    public readonly string name; public readonly Stats stats;\n    public Enemy(string n, Stats s) { name = n; stats = s; }\n}\n\ninterface PetLogic {\n    int offenseBoost(GameCharacter c);\n    int defenseBoost(GameCharacter c);\n    bool assist(GameCharacter c);\n    int assistDamage(GameCharacter c);\n    int assistHeal(GameCharacter c);\n}\n\nclass WolfPetLogic : PetLogic {\n    public int offenseBoost(GameCharacter c) {\n        return (int)(c.stats.atk * Math.Min(0.25, 0.05 + c.pet.bond / 100.0));\n    }\n    public int defenseBoost(GameCharacter c) {\n        return c.stats.def / 6;\n    }\n    public bool assist(GameCharacter c) {\n        return new Random().Next(100) < Math.Min(35, 10 + c.pet.bond / 3);\n    }\n    public int assistDamage(GameCharacter c) {\n        return 6 + c.pet.bond / 4;\n    }\n    public int assistHeal(GameCharacter c) {\n        return 0;\n    }\n}\n\nclass FairyPetLogic : PetLogic {\n    public int offenseBoost(GameCharacter c) {\n        return (int)(c.stats.mag * Math.Min(0.25, 0.05 + c.pet.bond / 120.0));\n    }\n    public int defenseBoost(GameCharacter c) {\n        return c.stats.res / 4;\n    }\n    public bool assist(GameCharacter c) {\n        return new Random().Next(100) < Math.Min(40, 15 + c.pet.bond / 2);\n    }\n    public int assistDamage(GameCharacter c) {\n        return 4 + c.pet.bond / 5;\n    }\n    public int assistHeal(GameCharacter c) {\n        return 8 + c.pet.bond / 3;\n    }\n}\n\nclass HawkPetLogic : PetLogic {\n    public int offenseBoost(GameCharacter c) {\n        return c.stats.spd / 3 + c.pet.bond / 6;\n    }\n    public int defenseBoost(GameCharacter c) {\n        return c.stats.spd / 6;\n    }\n    public bool assist(GameCharacter c) {\n        return new Random().Next(100) < Math.Min(30, 8 + c.pet.bond / 4);\n    }\n    public int assistDamage(GameCharacter c) {\n        return 5 + c.pet.bond / 6;\n    }\n    public int assistHeal(GameCharacter c) {\n        return 0;\n    }\n}\n\nclass ShadowCatPetLogic : PetLogic {\n    public int offenseBoost(GameCharacter c) {\n        return 5 + c.pet.bond / 5;\n    }\n    public int defenseBoost(GameCharacter c) {\n        return 3;\n    }\n    public bool assist(GameCharacter c) {\n        return new Random().Next(100) < Math.Min(45, 12 + c.pet.bond / 2);\n    }\n    public int assistDamage(GameCharacter c) {\n        return 7 + c.pet.bond / 5;\n    }\n    public int assistHeal(GameCharacter c) {\n        return 0;\n    }\n}\n\nclass PetLogicRegistry {\n    private static readonly Dictionary<PetType, PetLogic> map = new Dictionary<PetType, PetLogic> {\n        { PetType.WOLF, new WolfPetLogic() },\n        { PetType.FAIRY, new FairyPetLogic() },\n        { PetType.HAWK, new HawkPetLogic() },\n        { PetType.SHADOW_CAT, new ShadowCatPetLogic() }\n    };\n    public static PetLogic of(PetType t) { return map[t]; }\n}\n\ninterface WeaponLogic {\n    int applyWeapon(GameCharacter c, int baseVal);\n    int critChance(GameCharacter c);\n}\n\nclass SwordLogic : WeaponLogic {\n    public int applyWeapon(GameCharacter c, int baseVal) {\n        return baseVal + c.weapon.power + c.stats.atk / 4;\n    }\n    public int critChance(GameCharacter c) {\n        return 8 + c.stats.crit;\n    }\n}\n\nclass StaffLogic : WeaponLogic {\n    public int applyWeapon(GameCharacter c, int baseVal) {\n        return baseVal + c.weapon.power / 2 + c.stats.mag / 2;\n    }\n    public int critChance(GameCharacter c) {\n        return 5 + c.stats.crit / 2;\n    }\n}\n\nclass BowLogic : WeaponLogic {\n    public int applyWeapon(GameCharacter c, int baseVal) {\n        return baseVal + c.weapon.power + c.stats.spd / 3;\n    }\n    public int critChance(GameCharacter c) {\n        return 15 + c.stats.crit;\n    }\n}\n\nclass DaggerLogic : WeaponLogic {\n    public int applyWeapon(GameCharacter c, int baseVal) {\n        return baseVal + c.weapon.power + c.stats.spd / 2;\n    }\n    public int critChance(GameCharacter c) {\n        return 18 + c.stats.crit;\n    }\n}\n\nclass WeaponLogicRegistry {\n    private static readonly Dictionary<WeaponType, WeaponLogic> map = new Dictionary<WeaponType, WeaponLogic> {\n        { WeaponType.SWORD, new SwordLogic() },\n        { WeaponType.STAFF, new StaffLogic() },\n        { WeaponType.BOW, new BowLogic() },\n        { WeaponType.DAGGER, new DaggerLogic() }\n    };\n    public static WeaponLogic of(WeaponType t) { return map[t]; }\n}\n\ninterface RoleLogic {\n    int baseDamage(GameCharacter c, Skill s, Enemy e);\n    int baseHeal(GameCharacter c, Skill s);\n    int gold(GameCharacter c, Enemy e);\n    int extraCrit(GameCharacter c);\n}\n\nclass WarriorLogic : RoleLogic {\n    public int baseDamage(GameCharacter c, Skill s, Enemy e) {\n        int baseVal = (int)(c.stats.atk * (1.1 + c.level * 0.03)) - e.stats.def / 3;\n        if (s.type == SkillType.SPECIAL) baseVal += 12;\n        return baseVal;\n    }\n    public int baseHeal(GameCharacter c, Skill s) {\n        int amt = c.stats.atk / 3 + 6;\n        if (s.type == SkillType.SPECIAL) amt += 6;\n        return amt;\n    }\n    public int gold(GameCharacter c, Enemy e) {\n        return 10 + c.level + e.stats.def / 5;\n    }\n    public int extraCrit(GameCharacter c) { return 0; }\n}\n\nclass MageLogic : RoleLogic {\n    public int baseDamage(GameCharacter c, Skill s, Enemy e) {\n        int baseVal = c.stats.mag * 2 + (s.type == SkillType.SPECIAL ? 18 : 0) - e.stats.res / 2;\n        return baseVal;\n    }\n    public int baseHeal(GameCharacter c, Skill s) {\n        int amt = c.stats.mag + 14;\n        if (s.type == SkillType.SPECIAL) amt += 6;\n        return amt;\n    }\n    public int gold(GameCharacter c, Enemy e) {\n        return 9 + c.level * 2 + e.stats.res / 4;\n    }\n    public int extraCrit(GameCharacter c) { return 0; }\n}\n\nclass ArcherLogic : RoleLogic {\n    public int baseDamage(GameCharacter c, Skill s, Enemy e) {\n        int baseVal = c.stats.atk + c.stats.spd / 2 + (s.type == SkillType.SPECIAL ? 10 : 0) - e.stats.def / 4;\n        return baseVal;\n    }\n    public int baseHeal(GameCharacter c, Skill s) {\n        int amt = c.stats.atk / 4 + c.stats.spd / 5;\n        if (s.type == SkillType.SPECIAL) amt += 6;\n        return amt;\n    }\n    public int gold(GameCharacter c, Enemy e) {\n        return 11 + c.level + e.stats.def / 6;\n    }\n    public int extraCrit(GameCharacter c) { return 10; }\n}\n\nclass RogueLogic : RoleLogic {\n    public int baseDamage(GameCharacter c, Skill s, Enemy e) {\n        int baseVal = c.stats.atk + c.stats.spd + (s.type == SkillType.SPECIAL ? 14 : 0) - e.stats.def / 5;\n        return baseVal;\n    }\n    public int baseHeal(GameCharacter c, Skill s) {\n        int amt = c.stats.atk / 2;\n        if (s.type == SkillType.SPECIAL) amt += 6;\n        return amt;\n    }\n    public int gold(GameCharacter c, Enemy e) {\n        return 14 + c.level;\n    }\n    public int extraCrit(GameCharacter c) { return 0; }\n}\n\nclass RoleLogicRegistry {\n    private static readonly Dictionary<CharacterType, RoleLogic> map = new Dictionary<CharacterType, RoleLogic> {\n        { CharacterType.WARRIOR, new WarriorLogic() },\n        { CharacterType.MAGE, new MageLogic() },\n        { CharacterType.ARCHER, new ArcherLogic() },\n        { CharacterType.ROGUE, new RogueLogic() }\n    };\n    public static RoleLogic of(CharacterType t) { return map[t]; }\n}\n\nclass GameCharacter {\n    public readonly string name; public readonly CharacterType type; public readonly int level; public readonly Stats stats;\n    public readonly List<Skill> skills; public readonly Weapon weapon; public readonly Pet pet;\n    public GameCharacter(string n, CharacterType t, int lvl, Stats s, List<Skill> k, Weapon w, Pet p) {\n        name = n; type = t; level = lvl; stats = s; skills = k; weapon = w; pet = p;\n    }\n}\n\nclass PetBoostSystem {\n    public int offenseBoost(GameCharacter c) {\n        return PetLogicRegistry.of(c.pet.type).offenseBoost(c);\n    }\n    public int defenseBoost(GameCharacter c) {\n        return PetLogicRegistry.of(c.pet.type).defenseBoost(c);\n    }\n    public bool petAssist(GameCharacter c) {\n        return PetLogicRegistry.of(c.pet.type).assist(c);\n    }\n    public int petAssistDamage(GameCharacter c) {\n        return PetLogicRegistry.of(c.pet.type).assistDamage(c);\n    }\n    public int petAssistHeal(GameCharacter c) {\n        return PetLogicRegistry.of(c.pet.type).assistHeal(c);\n    }\n}\n\nclass WeaponRuleSet {\n    public int applyWeapon(GameCharacter c, int baseVal) {\n        return WeaponLogicRegistry.of(c.weapon.type).applyWeapon(c, baseVal);\n    }\n    public int critChance(GameCharacter c) {\n        return WeaponLogicRegistry.of(c.weapon.type).critChance(c);\n    }\n}\n\nclass RoleRuleSet {\n    public int baseDamage(GameCharacter c, Skill s, Enemy e) {\n        return RoleLogicRegistry.of(c.type).baseDamage(c, s, e);\n    }\n    public int baseHeal(GameCharacter c, Skill s) {\n        return RoleLogicRegistry.of(c.type).baseHeal(c, s);\n    }\n    public int gold(GameCharacter c, Enemy e) {\n        return RoleLogicRegistry.of(c.type).gold(c, e);\n    }\n    public int extraCrit(GameCharacter c) {\n        return RoleLogicRegistry.of(c.type).extraCrit(c);\n    }\n}\n\nclass DamageCalculator {\n    private readonly Random rng = new Random();\n    private readonly WeaponRuleSet wr = new WeaponRuleSet();\n    private readonly PetBoostSystem pets = new PetBoostSystem();\n    private readonly RoleRuleSet roles = new RoleRuleSet();\n\n    public int calc(GameCharacter c, Skill s, Enemy e) {\n        int baseVal = roles.baseDamage(c, s, e);\n        baseVal = wr.applyWeapon(c, baseVal);\n        baseVal += pets.offenseBoost(c);\n        if (pets.petAssist(c)) baseVal += pets.petAssistDamage(c);\n        int critChance = wr.critChance(c) + roles.extraCrit(c);\n        if (rng.Next(100) < critChance) baseVal *= 2;\n        return Math.Max(0, baseVal);\n    }\n}\n\nclass HealCalculator {\n    private readonly PetBoostSystem pets = new PetBoostSystem();\n    private readonly RoleRuleSet roles = new RoleRuleSet();\n    public int heal(GameCharacter c, Skill s) {\n        int amt = roles.baseHeal(c, s);\n        amt += pets.defenseBoost(c) / 2 + pets.petAssistHeal(c);\n        return Math.Max(0, amt);\n    }\n}\n\nclass LootCalculator {\n    private readonly RoleRuleSet roles = new RoleRuleSet();\n    public int gold(GameCharacter c, Enemy e) {\n        return roles.gold(c, e);\n    }\n}\n\nclass TargetingSystem {\n    public Enemy pick(List<Enemy> enemies) {\n        Enemy t = enemies[0];\n        foreach (Enemy e in enemies) if (e.stats.hp < t.stats.hp) t = e;\n        return t;\n    }\n}\n\nclass SkillSelector {\n    public Skill choose(GameCharacter c) {\n        foreach (Skill s in c.skills) if (s.type != SkillType.BASIC) return s;\n        return c.skills[0];\n    }\n}\n\nclass TurnEngine {\n    private readonly DamageCalculator dmg = new DamageCalculator();\n    private readonly HealCalculator healCalc = new HealCalculator();\n    private readonly LootCalculator loot = new LootCalculator();\n    private readonly TargetingSystem targeting = new TargetingSystem();\n    private readonly SkillSelector selector = new SkillSelector();\n\n    public void turn(List<GameCharacter> party, List<Enemy> enemies) {\n        foreach (GameCharacter c in party) {\n            Skill s = selector.choose(c);\n            if (s.type == SkillType.SUPPORT) {\n                int h = healCalc.heal(c, s);\n                c.stats.hp += h;\n                continue;\n            }\n            Enemy target = targeting.pick(enemies);\n            int d = dmg.calc(c, s, target);\n            target.stats.hp = Math.Max(0, target.stats.hp - d);\n        }\n    }\n    public int totalGold(List<GameCharacter> party, Enemy e) {\n        int g = 0; foreach (GameCharacter c in party) g += loot.gold(c, e); return g;\n    }\n}\n",
            "level": "HARD",
            "language": "CSHARP",
            "violation": "OCP"
        },
        {
            "input": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nenum FoodType { BURGER, FRIES, PIZZA, DRINK, SALAD, DESSERT }\nenum Size { SMALL, MEDIUM, LARGE }\n\nclass FoodItem {\n    private readonly string name;\n    private readonly FoodType type;\n    private readonly Size size;\n    private readonly HashSet<string> extras;\n\n    public FoodItem(string name, FoodType type, Size size, HashSet<string> extras) {\n        this.name = name; this.type = type; this.size = size; this.extras = extras ?? new HashSet<string>();\n    }\n    public string GetName() { return name; }\n    public FoodType GetTypeFood() { return type; }\n    public Size GetSize() { return size; }\n    public HashSet<string> GetExtras() { return extras; }\n}\n\nclass Order {\n    private readonly string customer;\n    private readonly List<FoodItem> items = new List<FoodItem>();\n    public Order(string customer) { this.customer = customer; }\n    public void Add(FoodItem item) { items.Add(item); }\n    public List<FoodItem> Items() { return items; }\n    public string Customer() { return customer; }\n}\n\nclass PriceCalculator {\n    public double Price(FoodItem item) {\n        switch (item.GetTypeFood()) {\n            case FoodType.BURGER:\n                switch (item.GetSize()) {\n                    case Size.SMALL: return 5.49;\n                    case Size.MEDIUM: return 6.49;\n                    default: return 7.49;\n                }\n            case FoodType.FRIES:\n                switch (item.GetSize()) {\n                    case Size.SMALL: return 1.99;\n                    case Size.MEDIUM: return 2.49;\n                    default: return 2.99;\n                }\n            case FoodType.PIZZA:\n                switch (item.GetSize()) {\n                    case Size.SMALL: return 7.99;\n                    case Size.MEDIUM: return 9.99;\n                    default: return 12.49;\n                }\n            case FoodType.DRINK:\n                switch (item.GetSize()) {\n                    case Size.SMALL: return 1.29;\n                    case Size.MEDIUM: return 1.49;\n                    default: return 1.79;\n                }\n            case FoodType.SALAD:\n                switch (item.GetSize()) {\n                    case Size.SMALL: return 4.49;\n                    case Size.MEDIUM: return 5.49;\n                    default: return 6.49;\n                }\n            case FoodType.DESSERT:\n                switch (item.GetSize()) {\n                    case Size.SMALL: return 2.99;\n                    case Size.MEDIUM: return 3.49;\n                    default: return 3.99;\n                }\n            default:\n                throw new ArgumentException(\"Unknown type\");\n        }\n    }\n}\n\nclass TaxCalculator {\n    public double TaxFor(FoodItem item) {\n        switch (item.GetTypeFood()) {\n            case FoodType.DRINK: return 0.10;\n            case FoodType.DESSERT: return 0.08;\n            case FoodType.PIZZA: return 0.06;\n            default: return 0.05;\n        }\n    }\n}\n\nclass NutritionCalculator {\n    public int Calories(FoodItem item) {\n        switch (item.GetTypeFood()) {\n            case FoodType.BURGER:\n                switch (item.GetSize()) {\n                    case Size.SMALL: return 480;\n                    case Size.MEDIUM: return 650;\n                    default: return 820;\n                }\n            case FoodType.FRIES:\n                switch (item.GetSize()) {\n                    case Size.SMALL: return 220;\n                    case Size.MEDIUM: return 330;\n                    default: return 440;\n                }\n            case FoodType.PIZZA:\n                switch (item.GetSize()) {\n                    case Size.SMALL: return 700;\n                    case Size.MEDIUM: return 950;\n                    default: return 1200;\n                }\n            case FoodType.DRINK:\n                switch (item.GetSize()) {\n                    case Size.SMALL: return 110;\n                    case Size.MEDIUM: return 160;\n                    default: return 210;\n                }\n            case FoodType.SALAD:\n                switch (item.GetSize()) {\n                    case Size.SMALL: return 180;\n                    case Size.MEDIUM: return 260;\n                    default: return 340;\n                }\n            case FoodType.DESSERT:\n                switch (item.GetSize()) {\n                    case Size.SMALL: return 250;\n                    case Size.MEDIUM: return 320;\n                    default: return 390;\n                }\n            default:\n                return 0;\n        }\n    }\n}\n\nclass PromotionEngine {\n    public double Discount(FoodItem item) {\n        switch (item.GetTypeFood()) {\n            case FoodType.BURGER: return item.GetExtras().Contains(\"extra-cheese\") ? 0.50 : 0.0;\n            case FoodType.FRIES: return item.GetSize() == Size.LARGE ? 0.20 : 0.0;\n            case FoodType.DRINK: return item.GetExtras().Contains(\"no-ice\") ? 0.10 : 0.0;\n            case FoodType.SALAD: return item.GetExtras().Contains(\"chicken\") ? 0.30 : 0.0;\n            case FoodType.PIZZA: return item.GetExtras().Contains(\"pepperoni\") ? 0.40 : 0.0;\n            case FoodType.DESSERT: return 0.0;\n            default: return 0.0;\n        }\n    }\n}\n\nclass KitchenStationRouter {\n    public string Station(FoodItem item) {\n        switch (item.GetTypeFood()) {\n            case FoodType.BURGER: return \"Grill\";\n            case FoodType.FRIES: return \"Fryer\";\n            case FoodType.PIZZA: return \"Oven\";\n            case FoodType.DRINK: return \"Beverage\";\n            case FoodType.SALAD: return \"Cold Prep\";\n            case FoodType.DESSERT: return \"Dessert Bar\";\n            default: return \"Unknown\";\n        }\n    }\n}\n\nclass InventoryManager {\n    private readonly Dictionary<string, int> stock = new Dictionary<string, int>();\n    public InventoryManager() {\n        stock[\"bun\"] = 50; stock[\"patty\"] = 50; stock[\"potato\"] = 80;\n        stock[\"dough\"] = 30; stock[\"soda\"] = 100; stock[\"greens\"] = 40; stock[\"dessertBase\"] = 30;\n    }\n    public bool Reserve(FoodItem item) {\n        switch (item.GetTypeFood()) {\n            case FoodType.BURGER: return Take(\"bun\",1) && Take(\"patty\",1);\n            case FoodType.FRIES: return Take(\"potato\",2);\n            case FoodType.PIZZA: return Take(\"dough\",1);\n            case FoodType.DRINK: return Take(\"soda\",1);\n            case FoodType.SALAD: return Take(\"greens\",1);\n            case FoodType.DESSERT: return Take(\"dessertBase\",1);\n            default: return false;\n        }\n    }\n    private bool Take(string key, int qty) {\n        int have = stock.ContainsKey(key) ? stock[key] : 0;\n        if (have < qty) return false;\n        stock[key] = have - qty;\n        return true;\n    }\n    public IReadOnlyDictionary<string,int> GetStock(){ return stock; }\n}\n\nclass Chef {\n    public void Prepare(FoodItem item) {\n        switch (item.GetTypeFood()) {\n            case FoodType.BURGER: Console.WriteLine(\"Chef grills patty and assembles burger\"); break;\n            case FoodType.FRIES: Console.WriteLine(\"Chef drops fries in fryer\"); break;\n            case FoodType.PIZZA: Console.WriteLine(\"Chef stretches dough and bakes pizza\"); break;\n            case FoodType.DRINK: Console.WriteLine(\"Chef fills cup and lids drink\"); break;\n            case FoodType.SALAD: Console.WriteLine(\"Chef chops and tosses salad\"); break;\n            case FoodType.DESSERT: Console.WriteLine(\"Chef plates dessert\"); break;\n        }\n    }\n}\n\nclass Waiter {\n    public void Take(Order order, FoodItem item) {\n        Console.WriteLine(\"Waiter records item: \" + item.GetName());\n        order.Add(item);\n    }\n    public void Serve(FoodItem item) {\n        switch (item.GetTypeFood()) {\n            case FoodType.BURGER: Console.WriteLine(\"Waiter serves burger with napkins\"); break;\n            case FoodType.FRIES: Console.WriteLine(\"Waiter serves fries with ketchup\"); break;\n            case FoodType.PIZZA: Console.WriteLine(\"Waiter serves pizza with slicer\"); break;\n            case FoodType.DRINK: Console.WriteLine(\"Waiter serves drink with straw\"); break;\n            case FoodType.SALAD: Console.WriteLine(\"Waiter serves salad with dressing\"); break;\n            case FoodType.DESSERT: Console.WriteLine(\"Waiter serves dessert with spoon\"); break;\n        }\n    }\n}\n\nclass Cashier {\n    private readonly PriceCalculator prices = new PriceCalculator();\n    private readonly TaxCalculator taxes = new TaxCalculator();\n    private readonly PromotionEngine promos = new PromotionEngine();\n    public double Total(Order order) {\n        double sum = 0.0;\n        foreach (var item in order.Items()) {\n            double basePrice = prices.Price(item);\n            double discount = promos.Discount(item);\n            double taxed = (basePrice - discount) * (1.0 + taxes.TaxFor(item));\n            sum += taxed;\n        }\n        return Math.Round(sum, 2);\n    }\n}\n\nclass ReceiptPrinter {\n    private readonly PriceCalculator prices = new PriceCalculator();\n    private readonly TaxCalculator taxes = new TaxCalculator();\n    private readonly PromotionEngine promos = new PromotionEngine();\n    private readonly NutritionCalculator nutrition = new NutritionCalculator();\n    public void Print(Order order) {\n        Console.WriteLine(\"Customer: \" + order.Customer());\n        foreach (var item in order.Items()) {\n            double basePrice = prices.Price(item);\n            double discount = promos.Discount(item);\n            double taxRate = taxes.TaxFor(item);\n            int kcal = nutrition.Calories(item);\n            Console.WriteLine(item.GetName() + \" (\" + item.GetTypeFood() + \" \" + item.GetSize() + \") base $\" + basePrice + \" disc $\" + discount + \" tax \" + (int)(taxRate*100) + \"% kcal \" + kcal);\n        }\n    }\n}\n\nclass PackagingSelector {\n    public string Packaging(FoodItem item) {\n        switch (item.GetTypeFood()) {\n            case FoodType.BURGER: return item.GetSize()==Size.LARGE ? \"Clamshell XL\" : \"Clamshell\";\n            case FoodType.FRIES: return item.GetSize()==Size.LARGE ? \"Carton L\" : \"Carton\";\n            case FoodType.PIZZA: return item.GetSize()==Size.SMALL ? \"Box S\" : item.GetSize()==Size.MEDIUM ? \"Box M\" : \"Box L\";\n            case FoodType.DRINK: return item.GetSize()==Size.LARGE ? \"Cup 24oz\" : item.GetSize()==Size.MEDIUM ? \"Cup 16oz\" : \"Cup 12oz\";\n            case FoodType.SALAD: return \"Bowl\";\n            case FoodType.DESSERT: return \"Dessert Cup\";\n            default: return \"Generic\";\n        }\n    }\n}\n\nclass AllergyChecker {\n    public HashSet<string> Allergens(FoodItem item) {\n        switch (item.GetTypeFood()) {\n            case FoodType.BURGER: return new HashSet<string>{\"gluten\",\"dairy\"};\n            case FoodType.FRIES: return new HashSet<string>();\n            case FoodType.PIZZA: return new HashSet<string>{\"gluten\",\"dairy\"};\n            case FoodType.DRINK: return new HashSet<string>();\n            case FoodType.SALAD: return item.GetExtras().Contains(\"chicken\") ? new HashSet<string>{\"none\"} : new HashSet<string>();\n            case FoodType.DESSERT: return new HashSet<string>{\"dairy\"};\n            default: return new HashSet<string>();\n        }\n    }\n}\n\nclass DeliveryPlanner {\n    public string Courier(FoodItem item) {\n        switch (item.GetTypeFood()) {\n            case FoodType.PIZZA: return \"Insulated Bag\";\n            case FoodType.DRINK: return \"Cup Holder\";\n            case FoodType.FRIES: return \"Thermal Pouch\";\n            case FoodType.BURGER: return \"Standard Bag\";\n            case FoodType.SALAD: return \"Cold Pack\";\n            case FoodType.DESSERT: return \"Cold Sleeve\";\n            default: return \"Bag\";\n        }\n    }\n}\n\nclass ComboEngine {\n    public double ComboDiscount(List<FoodItem> items) {\n        bool hasBurger = items.Any(i => i.GetTypeFood()==FoodType.BURGER);\n        bool hasFries = items.Any(i => i.GetTypeFood()==FoodType.FRIES);\n        bool hasDrink = items.Any(i => i.GetTypeFood()==FoodType.DRINK);\n        bool hasPizza = items.Any(i => i.GetTypeFood()==FoodType.PIZZA);\n        if (hasBurger && hasFries && hasDrink) return 1.00;\n        if (hasPizza && hasDrink) return 0.50;\n        return 0.0;\n    }\n}\n\nclass LoyaltyPointsCalculator {\n    public int Points(FoodItem item) {\n        switch (item.GetTypeFood()) {\n            case FoodType.BURGER: return 12;\n            case FoodType.FRIES: return 6;\n            case FoodType.PIZZA: return 18;\n            case FoodType.DRINK: return 4;\n            case FoodType.SALAD: return 10;\n            case FoodType.DESSERT: return 8;\n            default: return 0;\n        }\n    }\n}\n\nclass WasteTracker {\n    public int PrepWasteGrams(FoodItem item) {\n        switch (item.GetTypeFood()) {\n            case FoodType.BURGER: return 15;\n            case FoodType.FRIES: return 12;\n            case FoodType.PIZZA: return 20;\n            case FoodType.DRINK: return 3;\n            case FoodType.SALAD: return 8;\n            case FoodType.DESSERT: return 6;\n            default: return 0;\n        }\n    }\n}\n\nclass KitchenLoadBalancer {\n    public int StationLoadWeight(FoodItem item) {\n        switch (item.GetTypeFood()) {\n            case FoodType.BURGER: return 3;\n            case FoodType.FRIES: return 2;\n            case FoodType.PIZZA: return 4;\n            case FoodType.DRINK: return 1;\n            case FoodType.SALAD: return 2;\n            case FoodType.DESSERT: return 2;\n            default: return 1;\n        }\n    }\n}\n\nclass QualityInspector {\n    public bool Pass(FoodItem item) {\n        switch (item.GetTypeFood()) {\n            case FoodType.BURGER: return !item.GetExtras().Contains(\"raw\");\n            case FoodType.FRIES: return !item.GetExtras().Contains(\"soggy\");\n            case FoodType.PIZZA: return !item.GetExtras().Contains(\"burnt\");\n            case FoodType.DRINK: return !item.GetExtras().Contains(\"flat\");\n            case FoodType.SALAD: return !item.GetExtras().Contains(\"wilted\");\n            case FoodType.DESSERT: return !item.GetExtras().Contains(\"melted\");\n            default: return true;\n        }\n    }\n}\n\nclass CookingTimer {\n    public int Seconds(FoodItem item) {\n        switch (item.GetTypeFood()) {\n            case FoodType.BURGER: return item.GetSize()==Size.LARGE ? 420 : 360;\n            case FoodType.FRIES: return item.GetSize()==Size.LARGE ? 210 : 180;\n            case FoodType.PIZZA: return item.GetSize()==Size.LARGE ? 540 : 480;\n            case FoodType.DRINK: return 30;\n            case FoodType.SALAD: return 120;\n            case FoodType.DESSERT: return 90;\n            default: return 60;\n        }\n    }\n}\n\nclass MenuAvailability {\n    public bool AvailableNow(FoodItem item, int hour) {\n        switch (item.GetTypeFood()) {\n            case FoodType.BURGER: return true;\n            case FoodType.FRIES: return true;\n            case FoodType.PIZZA: return hour >= 11;\n            case FoodType.DRINK: return true;\n            case FoodType.SALAD: return hour >= 10 && hour <= 22;\n            case FoodType.DESSERT: return hour >= 11 && hour <= 23;\n            default: return true;\n        }\n    }\n}\n\nclass SpicinessRegulator {\n    public int SpiceLevel(FoodItem item) {\n        switch (item.GetTypeFood()) {\n            case FoodType.BURGER: return item.GetExtras().Contains(\"jalapeno\") ? 3 : 1;\n            case FoodType.FRIES: return item.GetExtras().Contains(\"peri-peri\") ? 2 : 0;\n            case FoodType.PIZZA: return item.GetExtras().Contains(\"pepperoni\") ? 2 : 1;\n            case FoodType.DRINK: return 0;\n            case FoodType.SALAD: return item.GetExtras().Contains(\"chili\") ? 2 : 0;\n            case FoodType.DESSERT: return 0;\n            default: return 0;\n        }\n    }\n}\n\nclass UpsellEngine {\n    public string Suggest(FoodItem item) {\n        switch (item.GetTypeFood()) {\n            case FoodType.BURGER: return \"Add Fries\";\n            case FoodType.FRIES: return \"Add Drink\";\n            case FoodType.PIZZA: return \"Add Dessert\";\n            case FoodType.DRINK: return \"Add Burger\";\n            case FoodType.SALAD: return \"Add Chicken\";\n            case FoodType.DESSERT: return \"Add Coffee\";\n            default: return \"Add Deal\";\n        }\n    }\n}\n",
            "output": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic enum FoodType { BURGER, FRIES, PIZZA, DRINK, SALAD, DESSERT }\npublic enum Size { SMALL, MEDIUM, LARGE }\n\npublic class FoodItem\n{\n    private readonly string name;\n    private readonly FoodType type;\n    private readonly Size size;\n    private readonly HashSet<string> extras;\n    private readonly FoodStrategy strategy;\n\n    public FoodItem(string name, FoodType type, Size size, HashSet<string> extras)\n    {\n        this.name = name;\n        this.type = type;\n        this.size = size;\n        this.extras = extras ?? new HashSet<string>();\n        this.strategy = FoodStrategyFactory.Create(type);\n    }\n    public string GetName() { return name; }\n    public FoodType GetType() { return type; }\n    public Size GetSize() { return size; }\n    public HashSet<string> GetExtras() { return extras; }\n    public FoodStrategy GetStrategy() { return strategy; }\n}\n\npublic class Order\n{\n    private readonly string customer;\n    private readonly List<FoodItem> items = new List<FoodItem>();\n    public Order(string customer) { this.customer = customer; }\n    public void Add(FoodItem item) { items.Add(item); }\n    public List<FoodItem> Items() { return items; }\n    public string Customer() { return customer; }\n}\n\npublic interface FoodStrategy\n{\n    double GetPrice(Size size);\n    double GetTaxRate();\n    int GetCalories(Size size);\n    double GetDiscount(FoodItem item);\n    string GetStation();\n    bool ReserveInventory(Dictionary<string, int> stock);\n    void Prepare();\n    void Serve();\n    string GetPackaging(Size size);\n    HashSet<string> GetAllergens(FoodItem item);\n    string GetCourier();\n    int GetLoyaltyPoints();\n    int GetPrepWasteGrams();\n    int GetStationLoadWeight();\n    bool PassQuality(FoodItem item);\n    int GetCookingSeconds(Size size);\n    bool IsAvailable(int hour);\n    int GetSpiceLevel(FoodItem item);\n    string GetUpsellSuggestion();\n}\n\npublic abstract class BaseFoodStrategy : FoodStrategy\n{\n    protected bool TakeFromStock(Dictionary<string, int> stock, string key, int qty)\n    {\n        int have = stock.GetValueOrDefault(key, 0);\n        if (have < qty) return false;\n        stock[key] = have - qty;\n        return true;\n    }\n    \n    public abstract double GetPrice(Size size);\n    public abstract double GetTaxRate();\n    public abstract int GetCalories(Size size);\n    public abstract double GetDiscount(FoodItem item);\n    public abstract string GetStation();\n    public abstract bool ReserveInventory(Dictionary<string, int> stock);\n    public abstract void Prepare();\n    public abstract void Serve();\n    public abstract string GetPackaging(Size size);\n    public abstract HashSet<string> GetAllergens(FoodItem item);\n    public abstract string GetCourier();\n    public abstract int GetLoyaltyPoints();\n    public abstract int GetPrepWasteGrams();\n    public abstract int GetStationLoadWeight();\n    public abstract bool PassQuality(FoodItem item);\n    public abstract int GetCookingSeconds(Size size);\n    public abstract bool IsAvailable(int hour);\n    public abstract int GetSpiceLevel(FoodItem item);\n    public abstract string GetUpsellSuggestion();\n}\n\npublic class BurgerStrategy : BaseFoodStrategy\n{\n    public override double GetPrice(Size size)\n    {\n        switch (size)\n        {\n            case Size.SMALL: return 5.49;\n            case Size.MEDIUM: return 6.49;\n            default: return 7.49;\n        }\n    }\n    public override double GetTaxRate() { return 0.05; }\n    public override int GetCalories(Size size)\n    {\n        switch (size)\n        {\n            case Size.SMALL: return 480;\n            case Size.MEDIUM: return 650;\n            default: return 820;\n        }\n    }\n    public override double GetDiscount(FoodItem item)\n    {\n        return item.GetExtras().Contains(\"extra-cheese\") ? 0.50 : 0.0;\n    }\n    public override string GetStation() { return \"Grill\"; }\n    public override bool ReserveInventory(Dictionary<string, int> stock)\n    {\n        return TakeFromStock(stock, \"bun\", 1) && TakeFromStock(stock, \"patty\", 1);\n    }\n    public override void Prepare()\n    {\n        Console.WriteLine(\"Chef grills patty and assembles burger\");\n    }\n    public override void Serve()\n    {\n        Console.WriteLine(\"Waiter serves burger with napkins\");\n    }\n    public override string GetPackaging(Size size)\n    {\n        return size == Size.LARGE ? \"Clamshell XL\" : \"Clamshell\";\n    }\n    public override HashSet<string> GetAllergens(FoodItem item)\n    {\n        return new HashSet<string> { \"gluten\", \"dairy\" };\n    }\n    public override string GetCourier() { return \"Standard Bag\"; }\n    public override int GetLoyaltyPoints() { return 12; }\n    public override int GetPrepWasteGrams() { return 15; }\n    public override int GetStationLoadWeight() { return 3; }\n    public override bool PassQuality(FoodItem item)\n    {\n        return !item.GetExtras().Contains(\"raw\");\n    }\n    public override int GetCookingSeconds(Size size)\n    {\n        return size == Size.LARGE ? 420 : 360;\n    }\n    public override bool IsAvailable(int hour) { return true; }\n    public override int GetSpiceLevel(FoodItem item)\n    {\n        return item.GetExtras().Contains(\"jalapeno\") ? 3 : 1;\n    }\n    public override string GetUpsellSuggestion() { return \"Add Fries\"; }\n}\n\npublic class FriesStrategy : BaseFoodStrategy\n{\n    public override double GetPrice(Size size)\n    {\n        switch (size)\n        {\n            case Size.SMALL: return 1.99;\n            case Size.MEDIUM: return 2.49;\n            default: return 2.99;\n        }\n    }\n    public override double GetTaxRate() { return 0.05; }\n    public override int GetCalories(Size size)\n    {\n        switch (size)\n        {\n            case Size.SMALL: return 220;\n            case Size.MEDIUM: return 330;\n            default: return 440;\n        }\n    }\n    public override double GetDiscount(FoodItem item)\n    {\n        return item.GetSize() == Size.LARGE ? 0.20 : 0.0;\n    }\n    public override string GetStation() { return \"Fryer\"; }\n    public override bool ReserveInventory(Dictionary<string, int> stock)\n    {\n        return TakeFromStock(stock, \"potato\", 2);\n    }\n    public override void Prepare()\n    {\n        Console.WriteLine(\"Chef drops fries in fryer\");\n    }\n    public override void Serve()\n    {\n        Console.WriteLine(\"Waiter serves fries with ketchup\");\n    }\n    public override string GetPackaging(Size size)\n    {\n        return size == Size.LARGE ? \"Carton L\" : \"Carton\";\n    }\n    public override HashSet<string> GetAllergens(FoodItem item)\n    {\n        return new HashSet<string>();\n    }\n    public override string GetCourier() { return \"Thermal Pouch\"; }\n    public override int GetLoyaltyPoints() { return 6; }\n    public override int GetPrepWasteGrams() { return 12; }\n    public override int GetStationLoadWeight() { return 2; }\n    public override bool PassQuality(FoodItem item)\n    {\n        return !item.GetExtras().Contains(\"soggy\");\n    }\n    public override int GetCookingSeconds(Size size)\n    {\n        return size == Size.LARGE ? 210 : 180;\n    }\n    public override bool IsAvailable(int hour) { return true; }\n    public override int GetSpiceLevel(FoodItem item)\n    {\n        return item.GetExtras().Contains(\"peri-peri\") ? 2 : 0;\n    }\n    public override string GetUpsellSuggestion() { return \"Add Drink\"; }\n}\n\npublic class PizzaStrategy : BaseFoodStrategy\n{\n    public override double GetPrice(Size size)\n    {\n        switch (size)\n        {\n            case Size.SMALL: return 7.99;\n            case Size.MEDIUM: return 9.99;\n            default: return 12.49;\n        }\n    }\n    public override double GetTaxRate() { return 0.06; }\n    public override int GetCalories(Size size)\n    {\n        switch (size)\n        {\n            case Size.SMALL: return 700;\n            case Size.MEDIUM: return 950;\n            default: return 1200;\n        }\n    }\n    public override double GetDiscount(FoodItem item)\n    {\n        return item.GetExtras().Contains(\"pepperoni\") ? 0.40 : 0.0;\n    }\n    public override string GetStation() { return \"Oven\"; }\n    public override bool ReserveInventory(Dictionary<string, int> stock)\n    {\n        return TakeFromStock(stock, \"dough\", 1);\n    }\n    public override void Prepare()\n    {\n        Console.WriteLine(\"Chef stretches dough and bakes pizza\");\n    }\n    public override void Serve()\n    {\n        Console.WriteLine(\"Waiter serves pizza with slicer\");\n    }\n    public override string GetPackaging(Size size)\n    {\n        return size == Size.SMALL ? \"Box S\" : size == Size.MEDIUM ? \"Box M\" : \"Box L\";\n    }\n    public override HashSet<string> GetAllergens(FoodItem item)\n    {\n        return new HashSet<string> { \"gluten\", \"dairy\" };\n    }\n    public override string GetCourier() { return \"Insulated Bag\"; }\n    public override int GetLoyaltyPoints() { return 18; }\n    public override int GetPrepWasteGrams() { return 20; }\n    public override int GetStationLoadWeight() { return 4; }\n    public override bool PassQuality(FoodItem item)\n    {\n        return !item.GetExtras().Contains(\"burnt\");\n    }\n    public override int GetCookingSeconds(Size size)\n    {\n        return size == Size.LARGE ? 540 : 480;\n    }\n    public override bool IsAvailable(int hour) { return hour >= 11; }\n    public override int GetSpiceLevel(FoodItem item)\n    {\n        return item.GetExtras().Contains(\"pepperoni\") ? 2 : 1;\n    }\n    public override string GetUpsellSuggestion() { return \"Add Dessert\"; }\n}\n\npublic class DrinkStrategy : BaseFoodStrategy\n{\n    public override double GetPrice(Size size)\n    {\n        switch (size)\n        {\n            case Size.SMALL: return 1.29;\n            case Size.MEDIUM: return 1.49;\n            default: return 1.79;\n        }\n    }\n    public override double GetTaxRate() { return 0.10; }\n    public override int GetCalories(Size size)\n    {\n        switch (size)\n        {\n            case Size.SMALL: return 110;\n            case Size.MEDIUM: return 160;\n            default: return 210;\n        }\n    }\n    public override double GetDiscount(FoodItem item)\n    {\n        return item.GetExtras().Contains(\"no-ice\") ? 0.10 : 0.0;\n    }\n    public override string GetStation() { return \"Beverage\"; }\n    public override bool ReserveInventory(Dictionary<string, int> stock)\n    {\n        return TakeFromStock(stock, \"soda\", 1);\n    }\n    public override void Prepare()\n    {\n        Console.WriteLine(\"Chef fills cup and lids drink\");\n    }\n    public override void Serve()\n    {\n        Console.WriteLine(\"Waiter serves drink with straw\");\n    }\n    public override string GetPackaging(Size size)\n    {\n        return size == Size.LARGE ? \"Cup 24oz\" : size == Size.MEDIUM ? \"Cup 16oz\" : \"Cup 12oz\";\n    }\n    public override HashSet<string> GetAllergens(FoodItem item)\n    {\n        return new HashSet<string>();\n    }\n    public override string GetCourier() { return \"Cup Holder\"; }\n    public override int GetLoyaltyPoints() { return 4; }\n    public override int GetPrepWasteGrams() { return 3; }\n    public override int GetStationLoadWeight() { return 1; }\n    public override bool PassQuality(FoodItem item)\n    {\n        return !item.GetExtras().Contains(\"flat\");\n    }\n    public override int GetCookingSeconds(Size size) { return 30; }\n    public override bool IsAvailable(int hour) { return true; }\n    public override int GetSpiceLevel(FoodItem item) { return 0; }\n    public override string GetUpsellSuggestion() { return \"Add Burger\"; }\n}\n\npublic class SaladStrategy : BaseFoodStrategy\n{\n    public override double GetPrice(Size size)\n    {\n        switch (size)\n        {\n            case Size.SMALL: return 4.49;\n            case Size.MEDIUM: return 5.49;\n            default: return 6.49;\n        }\n    }\n    public override double GetTaxRate() { return 0.05; }\n    public override int GetCalories(Size size)\n    {\n        switch (size)\n        {\n            case Size.SMALL: return 180;\n            case Size.MEDIUM: return 260;\n            default: return 340;\n        }\n    }\n    public override double GetDiscount(FoodItem item)\n    {\n        return item.GetExtras().Contains(\"chicken\") ? 0.30 : 0.0;\n    }\n    public override string GetStation() { return \"Cold Prep\"; }\n    public override bool ReserveInventory(Dictionary<string, int> stock)\n    {\n        return TakeFromStock(stock, \"greens\", 1);\n    }\n    public override void Prepare()\n    {\n        Console.WriteLine(\"Chef chops and tosses salad\");\n    }\n    public override void Serve()\n    {\n        Console.WriteLine(\"Waiter serves salad with dressing\");\n    }\n    public override string GetPackaging(Size size) { return \"Bowl\"; }\n    public override HashSet<string> GetAllergens(FoodItem item)\n    {\n        return item.GetExtras().Contains(\"chicken\") ? new HashSet<string> { \"none\" } : new HashSet<string>();\n    }\n    public override string GetCourier() { return \"Cold Pack\"; }\n    public override int GetLoyaltyPoints() { return 10; }\n    public override int GetPrepWasteGrams() { return 8; }\n    public override int GetStationLoadWeight() { return 2; }\n    public override bool PassQuality(FoodItem item)\n    {\n        return !item.GetExtras().Contains(\"wilted\");\n    }\n    public override int GetCookingSeconds(Size size) { return 120; }\n    public override bool IsAvailable(int hour)\n    {\n        return hour >= 10 && hour <= 22;\n    }\n    public override int GetSpiceLevel(FoodItem item)\n    {\n        return item.GetExtras().Contains(\"chili\") ? 2 : 0;\n    }\n    public override string GetUpsellSuggestion() { return \"Add Chicken\"; }\n}\n\npublic class DessertStrategy : BaseFoodStrategy\n{\n    public override double GetPrice(Size size)\n    {\n        switch (size)\n        {\n            case Size.SMALL: return 2.99;\n            case Size.MEDIUM: return 3.49;\n            default: return 3.99;\n        }\n    }\n    public override double GetTaxRate() { return 0.08; }\n    public override int GetCalories(Size size)\n    {\n        switch (size)\n        {\n            case Size.SMALL: return 250;\n            case Size.MEDIUM: return 320;\n            default: return 390;\n        }\n    }\n    public override double GetDiscount(FoodItem item) { return 0.0; }\n    public override string GetStation() { return \"Dessert Bar\"; }\n    public override bool ReserveInventory(Dictionary<string, int> stock)\n    {\n        return TakeFromStock(stock, \"dessertBase\", 1);\n    }\n    public override void Prepare()\n    {\n        Console.WriteLine(\"Chef plates dessert\");\n    }\n    public override void Serve()\n    {\n        Console.WriteLine(\"Waiter serves dessert with spoon\");\n    }\n    public override string GetPackaging(Size size) { return \"Dessert Cup\"; }\n    public override HashSet<string> GetAllergens(FoodItem item)\n    {\n        return new HashSet<string> { \"dairy\" };\n    }\n    public override string GetCourier() { return \"Cold Sleeve\"; }\n    public override int GetLoyaltyPoints() { return 8; }\n    public override int GetPrepWasteGrams() { return 6; }\n    public override int GetStationLoadWeight() { return 2; }\n    public override bool PassQuality(FoodItem item)\n    {\n        return !item.GetExtras().Contains(\"melted\");\n    }\n    public override int GetCookingSeconds(Size size) { return 90; }\n    public override bool IsAvailable(int hour)\n    {\n        return hour >= 11 && hour <= 23;\n    }\n    public override int GetSpiceLevel(FoodItem item) { return 0; }\n    public override string GetUpsellSuggestion() { return \"Add Coffee\"; }\n}\n\npublic class DefaultStrategy : BaseFoodStrategy\n{\n    public override double GetPrice(Size size) { throw new ArgumentException(\"Unknown type\"); }\n    public override double GetTaxRate() { return 0.05; }\n    public override int GetCalories(Size size) { return 0; }\n    public override double GetDiscount(FoodItem item) { return 0.0; }\n    public override string GetStation() { return \"Unknown\"; }\n    public override bool ReserveInventory(Dictionary<string, int> stock) { return false; }\n    public override void Prepare() { }\n    public override void Serve() { }\n    public override string GetPackaging(Size size) { return \"Generic\"; }\n    public override HashSet<string> GetAllergens(FoodItem item) { return new HashSet<string>(); }\n    public override string GetCourier() { return \"Bag\"; }\n    public override int GetLoyaltyPoints() { return 0; }\n    public override int GetPrepWasteGrams() { return 0; }\n    public override int GetStationLoadWeight() { return 1; }\n    public override bool PassQuality(FoodItem item) { return true; }\n    public override int GetCookingSeconds(Size size) { return 60; }\n    public override bool IsAvailable(int hour) { return true; }\n    public override int GetSpiceLevel(FoodItem item) { return 0; }\n    public override string GetUpsellSuggestion() { return \"Add Deal\"; }\n}\n\npublic class FoodStrategyFactory\n{\n    private static readonly Dictionary<FoodType, FoodStrategy> strategies = new Dictionary<FoodType, FoodStrategy>\n    {\n        { FoodType.BURGER, new BurgerStrategy() },\n        { FoodType.FRIES, new FriesStrategy() },\n        { FoodType.PIZZA, new PizzaStrategy() },\n        { FoodType.DRINK, new DrinkStrategy() },\n        { FoodType.SALAD, new SaladStrategy() },\n        { FoodType.DESSERT, new DessertStrategy() }\n    };\n    \n    public static FoodStrategy Create(FoodType type)\n    {\n        return strategies.GetValueOrDefault(type, new DefaultStrategy());\n    }\n}\n\npublic class PriceCalculator\n{\n    public double Price(FoodItem item)\n    {\n        return item.GetStrategy().GetPrice(item.GetSize());\n    }\n}\n\npublic class TaxCalculator\n{\n    public double TaxFor(FoodItem item)\n    {\n        return item.GetStrategy().GetTaxRate();\n    }\n}\n\npublic class NutritionCalculator\n{\n    public int Calories(FoodItem item)\n    {\n        return item.GetStrategy().GetCalories(item.GetSize());\n    }\n}\n\npublic class PromotionEngine\n{\n    public double Discount(FoodItem item)\n    {\n        return item.GetStrategy().GetDiscount(item);\n    }\n}\n\npublic class KitchenStationRouter\n{\n    public string Station(FoodItem item)\n    {\n        return item.GetStrategy().GetStation();\n    }\n}\n\npublic class InventoryManager\n{\n    private readonly Dictionary<string, int> stock = new Dictionary<string, int>();\n    public InventoryManager()\n    {\n        stock[\"bun\"] = 50; stock[\"patty\"] = 50; stock[\"potato\"] = 80;\n        stock[\"dough\"] = 30; stock[\"soda\"] = 100; stock[\"greens\"] = 40; stock[\"dessertBase\"] = 30;\n    }\n    public bool Reserve(FoodItem item)\n    {\n        return item.GetStrategy().ReserveInventory(stock);\n    }\n    public Dictionary<string, int> GetStock() { return new Dictionary<string, int>(stock); }\n}\n\npublic class Chef\n{\n    public void Prepare(FoodItem item)\n    {\n        item.GetStrategy().Prepare();\n    }\n}\n\npublic class Waiter\n{\n    public void Take(Order order, FoodItem item)\n    {\n        Console.WriteLine(\"Waiter records item: \" + item.GetName());\n        order.Add(item);\n    }\n    public void Serve(FoodItem item)\n    {\n        item.GetStrategy().Serve();\n    }\n}\n\npublic class Cashier\n{\n    private readonly PriceCalculator prices = new PriceCalculator();\n    private readonly TaxCalculator taxes = new TaxCalculator();\n    private readonly PromotionEngine promos = new PromotionEngine();\n    public double Total(Order order)\n    {\n        double sum = 0.0;\n        foreach (FoodItem item in order.Items())\n        {\n            double basePrice = prices.Price(item);\n            double discount = promos.Discount(item);\n            double taxed = (basePrice - discount) * (1.0 + taxes.TaxFor(item));\n            sum += taxed;\n        }\n        return Math.Round(sum * 100.0) / 100.0;\n    }\n}\n\npublic class ReceiptPrinter\n{\n    private readonly PriceCalculator prices = new PriceCalculator();\n    private readonly TaxCalculator taxes = new TaxCalculator();\n    private readonly PromotionEngine promos = new PromotionEngine();\n    private readonly NutritionCalculator nutrition = new NutritionCalculator();\n    public void Print(Order order)\n    {\n        Console.WriteLine(\"Customer: \" + order.Customer());\n        foreach (FoodItem item in order.Items())\n        {\n            double basePrice = prices.Price(item);\n            double discount = promos.Discount(item);\n            double taxRate = taxes.TaxFor(item);\n            int kcal = nutrition.Calories(item);\n            Console.WriteLine(item.GetName() + \" (\" + item.GetType() + \" \" + item.GetSize() + \") base $\" + basePrice + \" disc $\" + discount + \" tax \" + (int)(taxRate*100) + \"% kcal \" + kcal);\n        }\n    }\n}\n\npublic class PackagingSelector\n{\n    public string Packaging(FoodItem item)\n    {\n        return item.GetStrategy().GetPackaging(item.GetSize());\n    }\n}\n\npublic class AllergyChecker\n{\n    public HashSet<string> Allergens(FoodItem item)\n    {\n        return item.GetStrategy().GetAllergens(item);\n    }\n}\n\npublic class DeliveryPlanner\n{\n    public string Courier(FoodItem item)\n    {\n        return item.GetStrategy().GetCourier();\n    }\n}\n\npublic class ComboEngine\n{\n    public double ComboDiscount(List<FoodItem> items)\n    {\n        bool hasBurger = items.Any(i => i.GetType() == FoodType.BURGER);\n        bool hasFries = items.Any(i => i.GetType() == FoodType.FRIES);\n        bool hasDrink = items.Any(i => i.GetType() == FoodType.DRINK);\n        bool hasPizza = items.Any(i => i.GetType() == FoodType.PIZZA);\n        if (hasBurger && hasFries && hasDrink) return 1.00;\n        if (hasPizza && hasDrink) return 0.50;\n        return 0.0;\n    }\n}\n\npublic class LoyaltyPointsCalculator\n{\n    public int Points(FoodItem item)\n    {\n        return item.GetStrategy().GetLoyaltyPoints();\n    }\n}\n\npublic class WasteTracker\n{\n    public int PrepWasteGrams(FoodItem item)\n    {\n        return item.GetStrategy().GetPrepWasteGrams();\n    }\n}\n\npublic class KitchenLoadBalancer\n{\n    public int StationLoadWeight(FoodItem item)\n    {\n        return item.GetStrategy().GetStationLoadWeight();\n    }\n}\n\npublic class QualityInspector\n{\n    public bool Pass(FoodItem item)\n    {\n        return item.GetStrategy().PassQuality(item);\n    }\n}\n\npublic class CookingTimer\n{\n    public int Seconds(FoodItem item)\n    {\n        return item.GetStrategy().GetCookingSeconds(item.GetSize());\n    }\n}\n\npublic class MenuAvailability\n{\n    public bool AvailableNow(FoodItem item, int hour)\n    {\n        return item.GetStrategy().IsAvailable(hour);\n    }\n}\n\npublic class SpicinessRegulator\n{\n    public int SpiceLevel(FoodItem item)\n    {\n        return item.GetStrategy().GetSpiceLevel(item);\n    }\n}\n\npublic class UpsellEngine\n{\n    public string Suggest(FoodItem item)\n    {\n        return item.GetStrategy().GetUpsellSuggestion();\n    }\n}",
            "level": "HARD",
            "language": "CSHARP",
            "violation": "OCP"
        },
        {
            "input": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nenum DeviceType { LIGHT, THERMOSTAT, DOOR_LOCK, CAMERA, SPRINKLER, BLIND, SPEAKER }\nenum RoomType { LIVING, KITCHEN, BEDROOM, BATHROOM, GARDEN, GARAGE }\nenum Mode { ECO, COMFORT, AWAY, NIGHT, PARTY }\nenum AlertType { INFO, WARN, CRITICAL }\n\nclass SmartDevice\n{\n    private readonly string id;\n    private readonly DeviceType type;\n    private Mode mode = Mode.ECO;\n    private bool online = true;\n\n    public SmartDevice(string id, DeviceType type) { this.id = id; this.type = type; }\n    public string GetId() { return id; }\n    public DeviceType GetType() { return type; }\n    public Mode GetMode() { return mode; }\n    public bool IsOnline() { return online; }\n    public void SetMode(Mode m) { mode = m; }\n    public void SetOnline(bool o) { online = o; }\n}\n\nclass Room\n{\n    private readonly string name;\n    private readonly RoomType type;\n    private readonly List<SmartDevice> devices = new List<SmartDevice>();\n    public Room(string name, RoomType type) { this.name = name; this.type = type; }\n    public void Add(SmartDevice d) { devices.Add(d); }\n    public List<SmartDevice> GetDevices() { return devices; }\n    public string GetName() { return name; }\n    public RoomType GetTypeEnum() { return type; }\n}\n\nclass SmartHomeController\n{\n    public void TurnOn(SmartDevice d)\n    {\n        switch (d.GetType())\n        {\n            case DeviceType.LIGHT: Console.WriteLine(\"Light \" + d.GetId() + \" ON\"); break;\n            case DeviceType.THERMOSTAT: Console.WriteLine(\"Thermostat \" + d.GetId() + \" heating\"); break;\n            case DeviceType.DOOR_LOCK: Console.WriteLine(\"Lock \" + d.GetId() + \" locked\"); break;\n            case DeviceType.CAMERA: Console.WriteLine(\"Camera \" + d.GetId() + \" recording\"); break;\n            case DeviceType.SPRINKLER: Console.WriteLine(\"Sprinkler \" + d.GetId() + \" watering\"); break;\n            case DeviceType.BLIND: Console.WriteLine(\"Blind \" + d.GetId() + \" open\"); break;\n            case DeviceType.SPEAKER: Console.WriteLine(\"Speaker \" + d.GetId() + \" playing\"); break;\n        }\n    }\n    public void TurnOff(SmartDevice d)\n    {\n        switch (d.GetType())\n        {\n            case DeviceType.LIGHT: Console.WriteLine(\"Light \" + d.GetId() + \" OFF\"); break;\n            case DeviceType.THERMOSTAT: Console.WriteLine(\"Thermostat \" + d.GetId() + \" idle\"); break;\n            case DeviceType.DOOR_LOCK: Console.WriteLine(\"Lock \" + d.GetId() + \" secured\"); break;\n            case DeviceType.CAMERA: Console.WriteLine(\"Camera \" + d.GetId() + \" standby\"); break;\n            case DeviceType.SPRINKLER: Console.WriteLine(\"Sprinkler \" + d.GetId() + \" stopped\"); break;\n            case DeviceType.BLIND: Console.WriteLine(\"Blind \" + d.GetId() + \" closed\"); break;\n            case DeviceType.SPEAKER: Console.WriteLine(\"Speaker \" + d.GetId() + \" paused\"); break;\n        }\n    }\n    public void SetMode(SmartDevice d, Mode m)\n    {\n        d.SetMode(m);\n        Console.WriteLine(d.GetType() + \" \" + d.GetId() + \" -> \" + m);\n    }\n    public double EnergyUsageKwh(SmartDevice d, int minutes)\n    {\n        switch (d.GetType())\n        {\n            case DeviceType.LIGHT: return 0.012 * minutes;\n            case DeviceType.THERMOSTAT: return 0.08 * minutes;\n            case DeviceType.DOOR_LOCK: return 0.0002 * minutes;\n            case DeviceType.CAMERA: return 0.01 * minutes;\n            case DeviceType.SPRINKLER: return 0.03 * minutes;\n            case DeviceType.BLIND: return minutes == 0 ? 0 : 0.001 * minutes;\n            case DeviceType.SPEAKER: return 0.015 * minutes;\n            default: return 0;\n        }\n    }\n}\n\nclass NotificationService\n{\n    public void Push(SmartDevice d, AlertType t, string msg)\n    {\n        Console.WriteLine(\"[\" + t + \"] \" + d.GetType() + \" \" + d.GetId() + \": \" + msg);\n    }\n}\n\nclass DiagnosticsService\n{\n    public string Health(SmartDevice d)\n    {\n        switch (d.GetType())\n        {\n            case DeviceType.LIGHT: return d.IsOnline() ? \"OK\" : \"Bulb Offline\";\n            case DeviceType.THERMOSTAT: return d.IsOnline() ? \"OK\" : \"Sensor Offline\";\n            case DeviceType.DOOR_LOCK: return d.IsOnline() ? \"OK\" : \"Battery Low\";\n            case DeviceType.CAMERA: return d.IsOnline() ? \"OK\" : \"Stream Error\";\n            case DeviceType.SPRINKLER: return d.IsOnline() ? \"OK\" : \"Valve Error\";\n            case DeviceType.BLIND: return d.IsOnline() ? \"OK\" : \"Motor Jam\";\n            case DeviceType.SPEAKER: return d.IsOnline() ? \"OK\" : \"Audio Fault\";\n            default: return \"Unknown\";\n        }\n    }\n}\n\nclass SecurityPolicy\n{\n    public bool Allowed(SmartDevice d, string action, bool userHome)\n    {\n        switch (d.GetType())\n        {\n            case DeviceType.DOOR_LOCK: return action == \"unlock\" ? userHome : true;\n            case DeviceType.CAMERA: return !(action == \"disable\") || userHome;\n            case DeviceType.SPRINKLER: return !(action == \"on\" && userHome && d.GetMode() == Mode.PARTY);\n            case DeviceType.SPEAKER: return !(action == \"play\" && !userHome);\n            default: return true;\n        }\n    }\n}\n\nclass VoiceCommandProcessor\n{\n    private readonly SmartHomeController ctl = new SmartHomeController();\n    public void Handle(string phrase, SmartDevice d)\n    {\n        switch (d.GetType())\n        {\n            case DeviceType.LIGHT:\n                if (phrase.Equals(\"lights on\", StringComparison.OrdinalIgnoreCase)) ctl.TurnOn(d);\n                else if (phrase.Equals(\"lights off\", StringComparison.OrdinalIgnoreCase)) ctl.TurnOff(d);\n                break;\n            case DeviceType.THERMOSTAT:\n                if (phrase.Equals(\"heat on\", StringComparison.OrdinalIgnoreCase)) ctl.TurnOn(d);\n                else if (phrase.Equals(\"eco\", StringComparison.OrdinalIgnoreCase)) ctl.SetMode(d, Mode.ECO);\n                break;\n            case DeviceType.DOOR_LOCK:\n                if (phrase.Equals(\"lock door\", StringComparison.OrdinalIgnoreCase)) ctl.TurnOn(d);\n                break;\n            case DeviceType.CAMERA:\n                if (phrase.Equals(\"record\", StringComparison.OrdinalIgnoreCase)) ctl.TurnOn(d);\n                break;\n            case DeviceType.SPRINKLER:\n                if (phrase.Equals(\"water\", StringComparison.OrdinalIgnoreCase)) ctl.TurnOn(d);\n                break;\n            case DeviceType.BLIND:\n                if (phrase.Equals(\"open blinds\", StringComparison.OrdinalIgnoreCase)) ctl.TurnOn(d);\n                else if (phrase.Equals(\"close blinds\", StringComparison.OrdinalIgnoreCase)) ctl.TurnOff(d);\n                break;\n            case DeviceType.SPEAKER:\n                if (phrase.Equals(\"play music\", StringComparison.OrdinalIgnoreCase)) ctl.TurnOn(d);\n                else if (phrase.Equals(\"pause music\", StringComparison.OrdinalIgnoreCase)) ctl.TurnOff(d);\n                break;\n        }\n    }\n}\n\nclass SceneManager\n{\n    private readonly SmartHomeController ctl = new SmartHomeController();\n    public void Apply(string scene, List<SmartDevice> devices)\n    {\n        foreach (var d in devices)\n        {\n            switch (scene)\n            {\n                case \"Evening\":\n                    switch (d.GetType())\n                    {\n                        case DeviceType.LIGHT: ctl.TurnOn(d); ctl.SetMode(d, Mode.COMFORT); break;\n                        case DeviceType.THERMOSTAT: ctl.SetMode(d, Mode.COMFORT); break;\n                        case DeviceType.CAMERA: ctl.TurnOn(d); break;\n                        case DeviceType.DOOR_LOCK: ctl.TurnOn(d); break;\n                        case DeviceType.SPRINKLER: ctl.TurnOff(d); break;\n                        case DeviceType.BLIND: ctl.TurnOff(d); break;\n                        case DeviceType.SPEAKER: ctl.TurnOn(d); break;\n                    }\n                    break;\n                case \"Away\":\n                    switch (d.GetType())\n                    {\n                        case DeviceType.LIGHT: ctl.TurnOff(d); break;\n                        case DeviceType.THERMOSTAT: ctl.SetMode(d, Mode.AWAY); break;\n                        case DeviceType.CAMERA: ctl.TurnOn(d); break;\n                        case DeviceType.DOOR_LOCK: ctl.TurnOn(d); break;\n                        case DeviceType.SPRINKLER: ctl.TurnOff(d); break;\n                        case DeviceType.BLIND: ctl.TurnOff(d); break;\n                        case DeviceType.SPEAKER: ctl.TurnOff(d); break;\n                    }\n                    break;\n                case \"Party\":\n                    switch (d.GetType())\n                    {\n                        case DeviceType.LIGHT: ctl.TurnOn(d); ctl.SetMode(d, Mode.PARTY); break;\n                        case DeviceType.THERMOSTAT: ctl.SetMode(d, Mode.COMFORT); break;\n                        case DeviceType.SPEAKER: ctl.TurnOn(d); break;\n                        case DeviceType.CAMERA: ctl.TurnOff(d); break;\n                        case DeviceType.BLIND: ctl.TurnOn(d); break;\n                        case DeviceType.SPRINKLER: ctl.TurnOff(d); break;\n                        case DeviceType.DOOR_LOCK: ctl.TurnOn(d); break;\n                    }\n                    break;\n            }\n        }\n    }\n}\n\nclass FirmwareManager\n{\n    public List<string> Steps(SmartDevice d)\n    {\n        switch (d.GetType())\n        {\n            case DeviceType.LIGHT: return new List<string> { \"Ping\", \"PushFW\", \"Reboot\" };\n            case DeviceType.THERMOSTAT: return new List<string> { \"Ping\", \"Backup\", \"PushFW\", \"Recalibrate\" };\n            case DeviceType.DOOR_LOCK: return new List<string> { \"SecureChannel\", \"PushFW\", \"Reauth\" };\n            case DeviceType.CAMERA: return new List<string> { \"Ping\", \"PushFW\", \"RestartStream\" };\n            case DeviceType.SPRINKLER: return new List<string> { \"Ping\", \"PushFW\", \"ValveTest\" };\n            case DeviceType.BLIND: return new List<string> { \"Ping\", \"PushFW\", \"AlignMotor\" };\n            case DeviceType.SPEAKER: return new List<string> { \"Ping\", \"PushFW\", \"RestartAudio\" };\n            default: return new List<string>();\n        }\n    }\n}\n\nclass ScheduleEngine\n{\n    public class Entry\n    {\n        public readonly SmartDevice device;\n        public readonly string cron;\n        public readonly string action;\n        public Entry(SmartDevice d, string c, string a) { device = d; cron = c; action = a; }\n    }\n    public void Run(Entry e, SmartHomeController ctl)\n    {\n        switch (e.device.GetType())\n        {\n            case DeviceType.LIGHT: if (e.action == \"on\") ctl.TurnOn(e.device); else ctl.TurnOff(e.device); break;\n            case DeviceType.SPRINKLER: if (e.action == \"on\") ctl.TurnOn(e.device); else ctl.TurnOff(e.device); break;\n            case DeviceType.THERMOSTAT: if (e.action == \"comfort\") ctl.SetMode(e.device, Mode.COMFORT); break;\n            case DeviceType.BLIND: if (e.action == \"open\") ctl.TurnOn(e.device); else ctl.TurnOff(e.device); break;\n            case DeviceType.SPEAKER: if (e.action == \"play\") ctl.TurnOn(e.device); else ctl.TurnOff(e.device); break;\n            default: ctl.TurnOff(e.device); break;\n        }\n    }\n}\n\nclass WeatherAdvisor\n{\n    public bool ShouldWater(string condition)\n    {\n        switch (condition)\n        {\n            case \"rain\": return false;\n            case \"dry\": return true;\n            case \"windy\": return false;\n            default: return false;\n        }\n    }\n    public int LightLevelFor(string condition)\n    {\n        switch (condition)\n        {\n            case \"sunny\": return 100;\n            case \"cloudy\": return 70;\n            case \"rain\": return 50;\n            default: return 60;\n        }\n    }\n}\n\nclass GeoFence\n{\n    public bool Inside(string user, double distanceMeters)\n    {\n        switch (user)\n        {\n            case \"owner\": return distanceMeters < 50;\n            case \"guest\": return distanceMeters < 10;\n            default: return false;\n        }\n    }\n}\n\nclass AccessController\n{\n    public bool CanControl(SmartDevice d, string role)\n    {\n        switch (d.GetType())\n        {\n            case DeviceType.DOOR_LOCK: return role == \"owner\";\n            case DeviceType.CAMERA: return role == \"owner\" || role == \"admin\";\n            case DeviceType.THERMOSTAT: return role != \"guest\";\n            case DeviceType.SPEAKER: return true;\n            default: return true;\n        }\n    }\n}\n\nclass DeviceRenderer\n{\n    public string Icon(SmartDevice d)\n    {\n        switch (d.GetType())\n        {\n            case DeviceType.LIGHT: return \"ð¡\";\n            case DeviceType.THERMOSTAT: return \"ð¡ï¸\";\n            case DeviceType.DOOR_LOCK: return \"ð\";\n            case DeviceType.CAMERA: return \"ð·\";\n            case DeviceType.SPRINKLER: return \"ð§\";\n            case DeviceType.BLIND: return \"ðª\";\n            case DeviceType.SPEAKER: return \"ð\";\n            default: return \"â\";\n        }\n    }\n    public string Label(SmartDevice d)\n    {\n        switch (d.GetType())\n        {\n            case DeviceType.LIGHT: return \"Light-\" + d.GetId();\n            case DeviceType.THERMOSTAT: return \"Thermo-\" + d.GetId();\n            case DeviceType.DOOR_LOCK: return \"Lock-\" + d.GetId();\n            case DeviceType.CAMERA: return \"Cam-\" + d.GetId();\n            case DeviceType.SPRINKLER: return \"Sprink-\" + d.GetId();\n            case DeviceType.BLIND: return \"Blind-\" + d.GetId();\n            case DeviceType.SPEAKER: return \"Speaker-\" + d.GetId();\n            default: return d.GetId();\n        }\n    }\n}\n\nclass DeviceRegistry\n{\n    private readonly Dictionary<string, SmartDevice> byId = new Dictionary<string, SmartDevice>();\n    public void Register(SmartDevice d) { byId[d.GetId()] = d; }\n    public SmartDevice Find(string id) { return byId.ContainsKey(id) ? byId[id] : null; }\n    public List<string> Groups(SmartDevice d)\n    {\n        switch (d.GetType())\n        {\n            case DeviceType.LIGHT: return new List<string> { \"lighting\", \"grid\" };\n            case DeviceType.THERMOSTAT: return new List<string> { \"climate\", \"grid\" };\n            case DeviceType.DOOR_LOCK: return new List<string> { \"security\" };\n            case DeviceType.CAMERA: return new List<string> { \"security\", \"video\" };\n            case DeviceType.SPRINKLER: return new List<string> { \"garden\", \"water\" };\n            case DeviceType.BLIND: return new List<string> { \"lighting\", \"shades\" };\n            case DeviceType.SPEAKER: return new List<string> { \"media\" };\n            default: return new List<string>();\n        }\n    }\n}\n\nclass AutomationRuleEngine\n{\n    private readonly SmartHomeController ctl = new SmartHomeController();\n    public void OnEvent(string ev, SmartDevice d)\n    {\n        switch (ev)\n        {\n            case \"motion\":\n                if (d.GetType() == DeviceType.CAMERA || d.GetType() == DeviceType.LIGHT) ctl.TurnOn(d);\n                break;\n            case \"sunset\":\n                if (d.GetType() == DeviceType.LIGHT) ctl.TurnOn(d);\n                else if (d.GetType() == DeviceType.BLIND) ctl.TurnOff(d);\n                break;\n            case \"door-open\":\n                if (d.GetType() == DeviceType.DOOR_LOCK || d.GetType() == DeviceType.CAMERA) ctl.TurnOn(d);\n                break;\n        }\n    }\n}\n\nclass ReportPrinter\n{\n    private readonly SmartHomeController ctl = new SmartHomeController();\n    private readonly DiagnosticsService diag = new DiagnosticsService();\n    private readonly DeviceRenderer render = new DeviceRenderer();\n    public void PrintRoom(Room room)\n    {\n        Console.WriteLine(\"Room: \" + room.GetName() + \" (\" + room.GetTypeEnum() + \")\");\n        foreach (var d in room.GetDevices())\n        {\n            double e = ctl.EnergyUsageKwh(d, 30);\n            Console.WriteLine(render.Icon(d) + \" \" + render.Label(d) + \" mode=\" + d.GetMode() +\n                              \" health=\" + diag.Health(d) + \" 30m=\" + e.ToString(\"F3\") + \"kWh\");\n        }\n    }\n}\n\n",
            "output": "using System;\nusing System.Collections.Generic;\n\nenum DeviceType { LIGHT, THERMOSTAT, DOOR_LOCK, CAMERA, SPRINKLER, BLIND, SPEAKER }\nenum RoomType { LIVING, KITCHEN, BEDROOM, BATHROOM, GARDEN, GARAGE }\nenum Mode { ECO, COMFORT, AWAY, NIGHT, PARTY }\nenum AlertType { INFO, WARN, CRITICAL }\n\nabstract class SmartDevice {\n    protected readonly string id;\n    protected readonly DeviceType type;\n    protected Mode mode = Mode.ECO;\n    protected bool online = true;\n\n    public SmartDevice(string id, DeviceType type) { this.id = id; this.type = type; }\n    public string getId() { return id; }\n    public DeviceType getType() { return type; }\n    public Mode getMode() { return mode; }\n    public bool isOnline() { return online; }\n    public void setMode(Mode m) { mode = m; }\n    public void setOnline(bool o) { online = o; }\n    \n    public abstract void turnOn();\n    public abstract void turnOff();\n    public abstract void setModeAction(Mode m);\n    public abstract double getEnergyUsagePerMinute();\n    public abstract string getHealthStatus();\n    public abstract string getNotificationPrefix();\n    public abstract bool isActionAllowed(string action, bool userHome);\n    public abstract void handleVoiceCommand(string phrase, SmartHomeController ctl);\n    public abstract void applyEveningScene(SmartHomeController ctl);\n    public abstract void applyAwayScene(SmartHomeController ctl);\n    public abstract void applyPartyScene(SmartHomeController ctl);\n    public abstract List<string> getFirmwareSteps();\n    public abstract void executeScheduledAction(string action, SmartHomeController ctl);\n    public abstract void handleMotionEvent(SmartHomeController ctl);\n    public abstract void handleSunsetEvent(SmartHomeController ctl);\n    public abstract void handleDoorOpenEvent(SmartHomeController ctl);\n    public abstract string getIcon();\n    public abstract string getLabel();\n    public abstract List<string> getGroups();\n    public abstract bool canUserControl(string role);\n}\n\nclass LightDevice : SmartDevice {\n    public LightDevice(string id) : base(id, DeviceType.LIGHT) {}\n    public override void turnOn() { Console.WriteLine(\"Light \" + id + \" ON\"); }\n    public override void turnOff() { Console.WriteLine(\"Light \" + id + \" OFF\"); }\n    public override void setModeAction(Mode m) { Console.WriteLine(\"Light \" + id + \" -> \" + m); }\n    public override double getEnergyUsagePerMinute() { return 0.012; }\n    public override string getHealthStatus() { return online ? \"OK\" : \"Bulb Offline\"; }\n    public override string getNotificationPrefix() { return \"Light\"; }\n    public override bool isActionAllowed(string action, bool userHome) { return true; }\n    public override void handleVoiceCommand(string phrase, SmartHomeController ctl) {\n        if (string.Equals(phrase, \"lights on\", StringComparison.OrdinalIgnoreCase)) ctl.turnOn(this);\n        else if (string.Equals(phrase, \"lights off\", StringComparison.OrdinalIgnoreCase)) ctl.turnOff(this);\n    }\n    public override void applyEveningScene(SmartHomeController ctl) { ctl.turnOn(this); ctl.setMode(this, Mode.COMFORT); }\n    public override void applyAwayScene(SmartHomeController ctl) { ctl.turnOff(this); }\n    public override void applyPartyScene(SmartHomeController ctl) { ctl.turnOn(this); ctl.setMode(this, Mode.PARTY); }\n    public override List<string> getFirmwareSteps() { return new List<string> { \"Ping\",\"PushFW\",\"Reboot\" }; }\n    public override void executeScheduledAction(string action, SmartHomeController ctl) {\n        if (action == \"on\") ctl.turnOn(this); else ctl.turnOff(this);\n    }\n    public override void handleMotionEvent(SmartHomeController ctl) { ctl.turnOn(this); }\n    public override void handleSunsetEvent(SmartHomeController ctl) { ctl.turnOn(this); }\n    public override void handleDoorOpenEvent(SmartHomeController ctl) {}\n    public override string getIcon() { return \"ð¡\"; }\n    public override string getLabel() { return \"Light-\" + id; }\n    public override List<string> getGroups() { return new List<string> { \"lighting\",\"grid\" }; }\n    public override bool canUserControl(string role) { return true; }\n}\n\nclass ThermostatDevice : SmartDevice {\n    public ThermostatDevice(string id) : base(id, DeviceType.THERMOSTAT) {}\n    public override void turnOn() { Console.WriteLine(\"Thermostat \" + id + \" heating\"); }\n    public override void turnOff() { Console.WriteLine(\"Thermostat \" + id + \" idle\"); }\n    public override void setModeAction(Mode m) { Console.WriteLine(\"Thermostat \" + id + \" -> \" + m); }\n    public override double getEnergyUsagePerMinute() { return 0.08; }\n    public override string getHealthStatus() { return online ? \"OK\" : \"Sensor Offline\"; }\n    public override string getNotificationPrefix() { return \"Thermostat\"; }\n    public override bool isActionAllowed(string action, bool userHome) { return true; }\n    public override void handleVoiceCommand(string phrase, SmartHomeController ctl) {\n        if (string.Equals(phrase, \"heat on\", StringComparison.OrdinalIgnoreCase)) ctl.turnOn(this);\n        else if (string.Equals(phrase, \"eco\", StringComparison.OrdinalIgnoreCase)) ctl.setMode(this, Mode.ECO);\n    }\n    public override void applyEveningScene(SmartHomeController ctl) { ctl.setMode(this, Mode.COMFORT); }\n    public override void applyAwayScene(SmartHomeController ctl) { ctl.setMode(this, Mode.AWAY); }\n    public override void applyPartyScene(SmartHomeController ctl) { ctl.setMode(this, Mode.COMFORT); }\n    public override List<string> getFirmwareSteps() { return new List<string> { \"Ping\",\"Backup\",\"PushFW\",\"Recalibrate\" }; }\n    public override void executeScheduledAction(string action, SmartHomeController ctl) {\n        if (action == \"comfort\") ctl.setMode(this, Mode.COMFORT);\n    }\n    public override void handleMotionEvent(SmartHomeController ctl) {}\n    public override void handleSunsetEvent(SmartHomeController ctl) {}\n    public override void handleDoorOpenEvent(SmartHomeController ctl) {}\n    public override string getIcon() { return \"ð¡ï¸\"; }\n    public override string getLabel() { return \"Thermo-\" + id; }\n    public override List<string> getGroups() { return new List<string> { \"climate\",\"grid\" }; }\n    public override bool canUserControl(string role) { return role != \"guest\"; }\n}\n\nclass DoorLockDevice : SmartDevice {\n    public DoorLockDevice(string id) : base(id, DeviceType.DOOR_LOCK) {}\n    public override void turnOn() { Console.WriteLine(\"Lock \" + id + \" locked\"); }\n    public override void turnOff() { Console.WriteLine(\"Lock \" + id + \" secured\"); }\n    public override void setModeAction(Mode m) { Console.WriteLine(\"Lock \" + id + \" -> \" + m); }\n    public override double getEnergyUsagePerMinute() { return 0.0002; }\n    public override string getHealthStatus() { return online ? \"OK\" : \"Battery Low\"; }\n    public override string getNotificationPrefix() { return \"Lock\"; }\n    public override bool isActionAllowed(string action, bool userHome) {\n        return action == \"unlock\" ? userHome : true;\n    }\n    public override void handleVoiceCommand(string phrase, SmartHomeController ctl) {\n        if (string.Equals(phrase, \"lock door\", StringComparison.OrdinalIgnoreCase)) ctl.turnOn(this);\n    }\n    public override void applyEveningScene(SmartHomeController ctl) { ctl.turnOn(this); }\n    public override void applyAwayScene(SmartHomeController ctl) { ctl.turnOn(this); }\n    public override void applyPartyScene(SmartHomeController ctl) { ctl.turnOn(this); }\n    public override List<string> getFirmwareSteps() { return new List<string> { \"SecureChannel\",\"PushFW\",\"Reauth\" }; }\n    public override void executeScheduledAction(string action, SmartHomeController ctl) { ctl.turnOff(this); }\n    public override void handleMotionEvent(SmartHomeController ctl) {}\n    public override void handleSunsetEvent(SmartHomeController ctl) {}\n    public override void handleDoorOpenEvent(SmartHomeController ctl) { ctl.turnOn(this); }\n    public override string getIcon() { return \"ð\"; }\n    public override string getLabel() { return \"Lock-\" + id; }\n    public override List<string> getGroups() { return new List<string> { \"security\" }; }\n    public override bool canUserControl(string role) { return role == \"owner\"; }\n}\n\nclass CameraDevice : SmartDevice {\n    public CameraDevice(string id) : base(id, DeviceType.CAMERA) {}\n    public override void turnOn() { Console.WriteLine(\"Camera \" + id + \" recording\"); }\n    public override void turnOff() { Console.WriteLine(\"Camera \" + id + \" standby\"); }\n    public override void setModeAction(Mode m) { Console.WriteLine(\"Camera \" + id + \" -> \" + m); }\n    public override double getEnergyUsagePerMinute() { return 0.01; }\n    public override string getHealthStatus() { return online ? \"OK\" : \"Stream Error\"; }\n    public override string getNotificationPrefix() { return \"Camera\"; }\n    public override bool isActionAllowed(string action, bool userHome) {\n        return !(action == \"disable\") || userHome;\n    }\n    public override void handleVoiceCommand(string phrase, SmartHomeController ctl) {\n        if (string.Equals(phrase, \"record\", StringComparison.OrdinalIgnoreCase)) ctl.turnOn(this);\n    }\n    public override void applyEveningScene(SmartHomeController ctl) { ctl.turnOn(this); }\n    public override void applyAwayScene(SmartHomeController ctl) { ctl.turnOn(this); }\n    public override void applyPartyScene(SmartHomeController ctl) { ctl.turnOff(this); }\n    public override List<string> getFirmwareSteps() { return new List<string> { \"Ping\",\"PushFW\",\"RestartStream\" }; }\n    public override void executeScheduledAction(string action, SmartHomeController ctl) { ctl.turnOff(this); }\n    public override void handleMotionEvent(SmartHomeController ctl) { ctl.turnOn(this); }\n    public override void handleSunsetEvent(SmartHomeController ctl) {}\n    public override void handleDoorOpenEvent(SmartHomeController ctl) { ctl.turnOn(this); }\n    public override string getIcon() { return \"ð·\"; }\n    public override string getLabel() { return \"Cam-\" + id; }\n    public override List<string> getGroups() { return new List<string> { \"security\",\"video\" }; }\n    public override bool canUserControl(string role) { return role == \"owner\" || role == \"admin\"; }\n}\n\nclass SprinklerDevice : SmartDevice {\n    public SprinklerDevice(string id) : base(id, DeviceType.SPRINKLER) {}\n    public override void turnOn() { Console.WriteLine(\"Sprinkler \" + id + \" watering\"); }\n    public override void turnOff() { Console.WriteLine(\"Sprinkler \" + id + \" stopped\"); }\n    public override void setModeAction(Mode m) { Console.WriteLine(\"Sprinkler \" + id + \" -> \" + m); }\n    public override double getEnergyUsagePerMinute() { return 0.03; }\n    public override string getHealthStatus() { return online ? \"OK\" : \"Valve Error\"; }\n    public override string getNotificationPrefix() { return \"Sprinkler\"; }\n    public override bool isActionAllowed(string action, bool userHome) {\n        return !(action == \"on\" && userHome && mode == Mode.PARTY);\n    }\n    public override void handleVoiceCommand(string phrase, SmartHomeController ctl) {\n        if (string.Equals(phrase, \"water\", StringComparison.OrdinalIgnoreCase)) ctl.turnOn(this);\n    }\n    public override void applyEveningScene(SmartHomeController ctl) { ctl.turnOff(this); }\n    public override void applyAwayScene(SmartHomeController ctl) { ctl.turnOff(this); }\n    public override void applyPartyScene(SmartHomeController ctl) { ctl.turnOff(this); }\n    public override List<string> getFirmwareSteps() { return new List<string> { \"Ping\",\"PushFW\",\"ValveTest\" }; }\n    public override void executeScheduledAction(string action, SmartHomeController ctl) {\n        if (action == \"on\") ctl.turnOn(this); else ctl.turnOff(this);\n    }\n    public override void handleMotionEvent(SmartHomeController ctl) {}\n    public override void handleSunsetEvent(SmartHomeController ctl) {}\n    public override void handleDoorOpenEvent(SmartHomeController ctl) {}\n    public override string getIcon() { return \"ð§\"; }\n    public override string getLabel() { return \"Sprink-\" + id; }\n    public override List<string> getGroups() { return new List<string> { \"garden\",\"water\" }; }\n    public override bool canUserControl(string role) { return true; }\n}\n\nclass BlindDevice : SmartDevice {\n    public BlindDevice(string id) : base(id, DeviceType.BLIND) {}\n    public override void turnOn() { Console.WriteLine(\"Blind \" + id + \" open\"); }\n    public override void turnOff() { Console.WriteLine(\"Blind \" + id + \" closed\"); }\n    public override void setModeAction(Mode m) { Console.WriteLine(\"Blind \" + id + \" -> \" + m); }\n    public override double getEnergyUsagePerMinute() { return 0.001; }\n    public override string getHealthStatus() { return online ? \"OK\" : \"Motor Jam\"; }\n    public override string getNotificationPrefix() { return \"Blind\"; }\n    public override bool isActionAllowed(string action, bool userHome) { return true; }\n    public override void handleVoiceCommand(string phrase, SmartHomeController ctl) {\n        if (string.Equals(phrase, \"open blinds\", StringComparison.OrdinalIgnoreCase)) ctl.turnOn(this);\n        else if (string.Equals(phrase, \"close blinds\", StringComparison.OrdinalIgnoreCase)) ctl.turnOff(this);\n    }\n    public override void applyEveningScene(SmartHomeController ctl) { ctl.turnOff(this); }\n    public override void applyAwayScene(SmartHomeController ctl) { ctl.turnOff(this); }\n    public override void applyPartyScene(SmartHomeController ctl) { ctl.turnOn(this); }\n    public override List<string> getFirmwareSteps() { return new List<string> { \"Ping\",\"PushFW\",\"AlignMotor\" }; }\n    public override void executeScheduledAction(string action, SmartHomeController ctl) {\n        if (action == \"open\") ctl.turnOn(this); else ctl.turnOff(this);\n    }\n    public override void handleMotionEvent(SmartHomeController ctl) {}\n    public override void handleSunsetEvent(SmartHomeController ctl) { ctl.turnOff(this); }\n    public override void handleDoorOpenEvent(SmartHomeController ctl) {}\n    public override string getIcon() { return \"ðª\"; }\n    public override string getLabel() { return \"Blind-\" + id; }\n    public override List<string> getGroups() { return new List<string> { \"lighting\",\"shades\" }; }\n    public override bool canUserControl(string role) { return true; }\n}\n\nclass SpeakerDevice : SmartDevice {\n    public SpeakerDevice(string id) : base(id, DeviceType.SPEAKER) {}\n    public override void turnOn() { Console.WriteLine(\"Speaker \" + id + \" playing\"); }\n    public override void turnOff() { Console.WriteLine(\"Speaker \" + id + \" paused\"); }\n    public override void setModeAction(Mode m) { Console.WriteLine(\"Speaker \" + id + \" -> \" + m); }\n    public override double getEnergyUsagePerMinute() { return 0.015; }\n    public override string getHealthStatus() { return online ? \"OK\" : \"Audio Fault\"; }\n    public override string getNotificationPrefix() { return \"Speaker\"; }\n    public override bool isActionAllowed(string action, bool userHome) {\n        return !(action == \"play\" && !userHome);\n    }\n    public override void handleVoiceCommand(string phrase, SmartHomeController ctl) {\n        if (string.Equals(phrase, \"play music\", StringComparison.OrdinalIgnoreCase)) ctl.turnOn(this);\n        else if (string.Equals(phrase, \"pause music\", StringComparison.OrdinalIgnoreCase)) ctl.turnOff(this);\n    }\n    public override void applyEveningScene(SmartHomeController ctl) { ctl.turnOn(this); }\n    public override void applyAwayScene(SmartHomeController ctl) { ctl.turnOff(this); }\n    public override void applyPartyScene(SmartHomeController ctl) { ctl.turnOn(this); }\n    public override List<string> getFirmwareSteps() { return new List<string> { \"Ping\",\"PushFW\",\"RestartAudio\" }; }\n    public override void executeScheduledAction(string action, SmartHomeController ctl) {\n        if (action == \"play\") ctl.turnOn(this); else ctl.turnOff(this);\n    }\n    public override void handleMotionEvent(SmartHomeController ctl) {}\n    public override void handleSunsetEvent(SmartHomeController ctl) {}\n    public override void handleDoorOpenEvent(SmartHomeController ctl) {}\n    public override string getIcon() { return \"ð\"; }\n    public override string getLabel() { return \"Speaker-\" + id; }\n    public override List<string> getGroups() { return new List<string> { \"media\" }; }\n    public override bool canUserControl(string role) { return true; }\n}\n\nclass Room {\n    private readonly string name;\n    private readonly RoomType type;\n    private readonly List<SmartDevice> devices = new List<SmartDevice>();\n    public Room(string name, RoomType type) { this.name = name; this.type = type; }\n    public void add(SmartDevice d) { devices.Add(d); }\n    public List<SmartDevice> getDevices() { return devices; }\n    public string getName() { return name; }\n    public RoomType getType() { return type; }\n}\n\nclass SmartHomeController {\n    public void turnOn(SmartDevice d) { d.turnOn(); }\n    public void turnOff(SmartDevice d) { d.turnOff(); }\n    public void setMode(SmartDevice d, Mode m) { d.setMode(m); d.setModeAction(m); }\n    public double energyUsageKwh(SmartDevice d, int minutes) {\n        return d.getEnergyUsagePerMinute() * minutes;\n    }\n}\n\nclass NotificationService {\n    public void push(SmartDevice d, AlertType t, string msg) {\n        Console.WriteLine(\"[\" + t + \"] \" + d.getNotificationPrefix() + \" \" + d.getId() + \": \" + msg);\n    }\n}\n\nclass DiagnosticsService {\n    public string health(SmartDevice d) { return d.getHealthStatus(); }\n}\n\nclass SecurityPolicy {\n    public bool allowed(SmartDevice d, string action, bool userHome) {\n        return d.isActionAllowed(action, userHome);\n    }\n}\n\nclass VoiceCommandProcessor {\n    private readonly SmartHomeController ctl = new SmartHomeController();\n    public void handle(string phrase, SmartDevice d) {\n        d.handleVoiceCommand(phrase, ctl);\n    }\n}\n\nclass SceneManager {\n    private readonly SmartHomeController ctl = new SmartHomeController();\n    public void apply(string scene, List<SmartDevice> devices) {\n        foreach (var d in devices) {\n            switch (scene) {\n                case \"Evening\": d.applyEveningScene(ctl); break;\n                case \"Away\": d.applyAwayScene(ctl); break;\n                case \"Party\": d.applyPartyScene(ctl); break;\n            }\n        }\n    }\n}\n\nclass FirmwareManager {\n    public List<string> steps(SmartDevice d) { return d.getFirmwareSteps(); }\n}\n\nclass ScheduleEngine {\n    public class Entry {\n        public readonly SmartDevice device; public readonly string cron; public readonly string action;\n        public Entry(SmartDevice d, string c, string a){ device=d; cron=c; action=a; }\n    }\n    public void run(Entry e, SmartHomeController ctl) {\n        e.device.executeScheduledAction(e.action, ctl);\n    }\n}\n\nclass WeatherAdvisor {\n    public bool shouldWater(string condition) {\n        switch (condition) {\n            case \"rain\": return false;\n            case \"dry\": return true;\n            case \"windy\": return false;\n            default: return false;\n        }\n    }\n    public int lightLevelFor(string condition) {\n        switch (condition) {\n            case \"sunny\": return 100;\n            case \"cloudy\": return 70;\n            case \"rain\": return 50;\n            default: return 60;\n        }\n    }\n}\n\nclass GeoFence {\n    public bool inside(string user, double distanceMeters) {\n        switch (user) {\n            case \"owner\": return distanceMeters < 50;\n            case \"guest\": return distanceMeters < 10;\n            default: return false;\n        }\n    }\n}\n\nclass AccessController {\n    public bool canControl(SmartDevice d, string role) {\n        return d.canUserControl(role);\n    }\n}\n\nclass DeviceRenderer {\n    public string icon(SmartDevice d) { return d.getIcon(); }\n    public string label(SmartDevice d) { return d.getLabel(); }\n}\n\nclass DeviceRegistry {\n    private readonly Dictionary<string, SmartDevice> byId = new Dictionary<string, SmartDevice>();\n    public void register(SmartDevice d) { byId[d.getId()] = d; }\n    public SmartDevice find(string id) { return byId.ContainsKey(id) ? byId[id] : null; }\n    public List<string> groups(SmartDevice d) { return d.getGroups(); }\n}\n\nclass AutomationRuleEngine {\n    private readonly SmartHomeController ctl = new SmartHomeController();\n    public void onEvent(string eventName, SmartDevice d) {\n        switch (eventName) {\n            case \"motion\": d.handleMotionEvent(ctl); break;\n            case \"sunset\": d.handleSunsetEvent(ctl); break;\n            case \"door-open\": d.handleDoorOpenEvent(ctl); break;\n        }\n    }\n}\n\nclass ReportPrinter {\n    private readonly SmartHomeController ctl = new SmartHomeController();\n    private readonly DiagnosticsService diag = new DiagnosticsService();\n    private readonly DeviceRenderer render = new DeviceRenderer();\n    public void printRoom(Room room) {\n        Console.WriteLine(\"Room: \" + room.getName() + \" (\" + room.getType() + \")\");\n        foreach (var d in room.getDevices()) {\n            double e = ctl.energyUsageKwh(d, 30);\n            Console.WriteLine(render.icon(d) + \" \" + render.label(d) + \" mode=\" + d.getMode() + \" health=\" + diag.health(d) + \" 30m=\" + string.Format(\"{0:0.000}\", e) + \"kWh\");\n        }\n    }\n}\n",
            "level": "HARD",
            "language": "CSHARP",
            "violation": "OCP"
        },
        {
            "input": "using System;\nusing System.Collections.Generic;\n\nabstract class GraphicObject\n{\n    private readonly string color;\n\n    protected GraphicObject(string color)\n    {\n        this.color = color;\n    }\n\n    public string Color => color;\n}\n\nenum ShapeKind\n{\n    RECTANGLE, CIRCLE, CUBE\n}\n\nabstract class Shape : GraphicObject\n{\n    private readonly ShapeKind kind;\n\n    protected Shape(ShapeKind kind, string color) : base(color)\n    {\n        this.kind = kind;\n    }\n\n    public ShapeKind Kind => kind;\n}\n\nabstract class TwoDShape : Shape\n{\n    protected TwoDShape(ShapeKind kind, string color) : base(kind, color) { }\n}\n\nabstract class ThreeDShape : Shape\n{\n    protected ThreeDShape(ShapeKind kind, string color) : base(kind, color) { }\n}\n\nclass Rectangle : TwoDShape\n{\n    private readonly double width;\n    private readonly double height;\n\n    public Rectangle(double width, double height, string color)\n        : base(ShapeKind.RECTANGLE, color)\n    {\n        this.width = width;\n        this.height = height;\n    }\n\n    public double Width => width;\n    public double Height => height;\n}\n\nclass Circle : TwoDShape\n{\n    private readonly double radius;\n\n    public Circle(double radius, string color)\n        : base(ShapeKind.CIRCLE, color)\n    {\n        this.radius = radius;\n    }\n\n    public double Radius => radius;\n}\n\nclass Cube : ThreeDShape\n{\n    private readonly double edge;\n\n    public Cube(double edge, string color)\n        : base(ShapeKind.CUBE, color)\n    {\n        this.edge = edge;\n    }\n\n    public double Edge => edge;\n}\n\nenum Metric { AREA, PERIMETER, VOLUME }\n\nclass MetricCalculator\n{\n    public double Compute(Shape shape, Metric metric)\n    {\n        switch (shape.Kind)\n        {\n            case ShapeKind.RECTANGLE:\n                {\n                    var r = (Rectangle)shape;\n                    return metric switch\n                    {\n                        Metric.AREA => r.Width * r.Height,\n                        Metric.PERIMETER => 2 * (r.Width + r.Height),\n                        Metric.VOLUME => 0,\n                        _ => 0\n                    };\n                }\n            case ShapeKind.CIRCLE:\n                {\n                    var c = (Circle)shape;\n                    return metric switch\n                    {\n                        Metric.AREA => Math.PI * c.Radius * c.Radius,\n                        Metric.PERIMETER => 2 * Math.PI * c.Radius,\n                        Metric.VOLUME => 0,\n                        _ => 0\n                    };\n                }\n            case ShapeKind.CUBE:\n                {\n                    var cube = (Cube)shape;\n                    return metric switch\n                    {\n                        Metric.AREA => 6 * cube.Edge * cube.Edge,\n                        Metric.PERIMETER => 12 * cube.Edge,\n                        Metric.VOLUME => Math.Pow(cube.Edge, 3),\n                        _ => 0\n                    };\n                }\n            default:\n                return 0;\n        }\n    }\n}\n\nclass ShapeExporter\n{\n    public string ToJson(Shape shape)\n    {\n        switch (shape.Kind)\n        {\n            case ShapeKind.RECTANGLE:\n                {\n                    var r = (Rectangle)shape;\n                    return string.Format(\n                        \"{{\\\"type\\\":\\\"rectangle\\\",\\\"color\\\":\\\"{0}\\\",\\\"width\\\":{1},\\\"height\\\":{2}}}\",\n                        r.Color, r.Width, r.Height\n                    );\n                }\n            case ShapeKind.CIRCLE:\n                {\n                    var c = (Circle)shape;\n                    return string.Format(\n                        \"{{\\\"type\\\":\\\"circle\\\",\\\"color\\\":\\\"{0}\\\",\\\"radius\\\":{1}}}\",\n                        c.Color, c.Radius\n                    );\n                }\n            case ShapeKind.CUBE:\n                {\n                    var cube = (Cube)shape;\n                    return string.Format(\n                        \"{{\\\"type\\\":\\\"cube\\\",\\\"color\\\":\\\"{0}\\\",\\\"edge\\\":{1}}}\",\n                        cube.Color, cube.Edge\n                    );\n                }\n            default:\n                return \"{}\";\n        }\n    }\n}\n\n\nclass ShapeFactory\n{\n    public Shape Create(string spec)\n    {\n        string[] parts = spec.Split(new[] { ':' }, 2);\n        string type = parts[0].Trim();\n        string[] kvs = (parts.Length > 1 ? parts[1] : \"\").Split(';');\n        var map = new Dictionary<string, string>();\n        foreach (string kv in kvs)\n        {\n            string[] p = kv.Split('=');\n            if (p.Length == 2) map[p[0].Trim()] = p[1].Trim();\n        }\n        string color = map.ContainsKey(\"color\") ? map[\"color\"] : \"black\";\n\n        switch (type.ToLower())\n        {\n            case \"rectangle\":\n                return new Rectangle(\n                    double.Parse(map.ContainsKey(\"width\") ? map[\"width\"] : \"0\"),\n                    double.Parse(map.ContainsKey(\"height\") ? map[\"height\"] : \"0\"),\n                    color\n                );\n            case \"circle\":\n                return new Circle(\n                    double.Parse(map.ContainsKey(\"radius\") ? map[\"radius\"] : \"0\"),\n                    color\n                );\n            case \"cube\":\n                return new Cube(\n                    double.Parse(map.ContainsKey(\"edge\") ? map[\"edge\"] : \"0\"),\n                    color\n                );\n            default:\n                throw new ArgumentException(\"Unknown shape: \" + type);\n        }\n    }\n}\n\n",
            "output": "using System;\nusing System.Collections.Generic;\n\nabstract class GraphicObject\n{\n    private readonly string color;\n\n    protected GraphicObject(string color)\n    {\n        this.color = color;\n    }\n\n    public string GetColor()\n    {\n        return color;\n    }\n}\n\nabstract class Shape : GraphicObject\n{\n    protected Shape(string color) : base(color) { }\n\n    public abstract double Area();\n    public abstract double Perimeter();\n    public abstract double Volume();\n    public abstract string ToJson();\n}\n\nabstract class TwoDShape : Shape\n{\n    protected TwoDShape(string color) : base(color) { }\n\n    public override double Volume()\n    {\n        return 0;\n    }\n}\n\nabstract class ThreeDShape : Shape\n{\n    protected ThreeDShape(string color) : base(color) { }\n}\n\nclass Rectangle : TwoDShape\n{\n    private readonly double width;\n    private readonly double height;\n\n    public Rectangle(double width, double height, string color) : base(color)\n    {\n        this.width = width;\n        this.height = height;\n    }\n\n    public double GetWidth() { return width; }\n    public double GetHeight() { return height; }\n\n    public override double Area()\n    {\n        return width * height;\n    }\n\n    public override double Perimeter()\n    {\n        return 2 * (width + height);\n    }\n\n    public override string ToJson()\n    {\n        return string.Format(\n            \"{{\\\"type\\\":\\\"rectangle\\\",\\\"color\\\":\\\"{0}\\\",\\\"width\\\":{1:F2},\\\"height\\\":{2:F2}}}\",\n            GetColor(), width, height\n        );\n    }\n}\n\nclass Circle : TwoDShape\n{\n    private readonly double radius;\n\n    public Circle(double radius, string color) : base(color)\n    {\n        this.radius = radius;\n    }\n\n    public double GetRadius() { return radius; }\n\n    public override double Area()\n    {\n        return Math.PI * radius * radius;\n    }\n\n    public override double Perimeter()\n    {\n        return 2 * Math.PI * radius;\n    }\n\n    public override string ToJson()\n    {\n        return string.Format(\n            \"{{\\\"type\\\":\\\"circle\\\",\\\"color\\\":\\\"{0}\\\",\\\"radius\\\":{1:F2}}}\",\n            GetColor(), radius\n        );\n    }\n}\n\nclass Cube : ThreeDShape\n{\n    private readonly double edge;\n\n    public Cube(double edge, string color) : base(color)\n    {\n        this.edge = edge;\n    }\n\n    public double GetEdge() { return edge; }\n\n    public override double Area()\n    {\n        return 6 * edge * edge;\n    }\n\n    public override double Perimeter()\n    {\n        return 12 * edge;\n    }\n\n    public override double Volume()\n    {\n        return Math.Pow(edge, 3);\n    }\n\n    public override string ToJson()\n    {\n        return string.Format(\n            \"{{\\\"type\\\":\\\"cube\\\",\\\"color\\\":\\\"{0}\\\",\\\"edge\\\":{1:F2}}}\",\n            GetColor(), edge\n        );\n    }\n}\n\nenum Metric { AREA, PERIMETER, VOLUME }\n\nclass MetricCalculator\n{\n    public double Compute(Shape shape, Metric metric)\n    {\n        return metric switch\n        {\n            Metric.AREA => shape.Area(),\n            Metric.PERIMETER => shape.Perimeter(),\n            Metric.VOLUME => shape.Volume(),\n            _ => throw new ArgumentException(\"Unknown metric\")\n        };\n    }\n}\n\nclass ShapeExporter\n{\n    public string ToJson(Shape shape)\n    {\n        return shape.ToJson();\n    }\n}\n\nclass ShapeFactory\n{\n    public Shape Create(string spec)\n    {\n        var parts = spec.Split(new[] { ':' }, 2);\n        string type = parts[0].Trim();\n        string[] kvs = parts.Length > 1 ? parts[1].Split(';') : Array.Empty<string>();\n        var map = new Dictionary<string, string>();\n\n        foreach (string kv in kvs)\n        {\n            var p = kv.Split('=');\n            if (p.Length == 2)\n                map[p[0].Trim()] = p[1].Trim();\n        }\n\n        string color = map.ContainsKey(\"color\") ? map[\"color\"] : \"black\";\n\n        return type.ToLower() switch\n        {\n            \"rectangle\" => new Rectangle(\n                double.Parse(map.ContainsKey(\"width\") ? map[\"width\"] : \"0\"),\n                double.Parse(map.ContainsKey(\"height\") ? map[\"height\"] : \"0\"),\n                color\n            ),\n            \"circle\" => new Circle(\n                double.Parse(map.ContainsKey(\"radius\") ? map[\"radius\"] : \"0\"),\n                color\n            ),\n            \"cube\" => new Cube(\n                double.Parse(map.ContainsKey(\"edge\") ? map[\"edge\"] : \"0\"),\n                color\n            ),\n            _ => throw new ArgumentException(\"Unknown shape: \" + type)\n        };\n    }\n}\n",
            "level": "MODERATE",
            "language": "CSHARP",
            "violation": "OCP"
        },
        {
            "input": "using System;\nusing System.Collections.Generic;\n\nenum CharacterType\n{\n    WARRIOR,\n    MAGE,\n    ARCHER\n}\n\nenum SkillType\n{\n    BASIC,\n    SPECIAL\n}\n\nclass GameCharacter\n{\n    public string Name { get; }\n    public CharacterType Type { get; }\n    public int BaseAttack { get; }\n    public int Level { get; }\n\n    public GameCharacter(string name, CharacterType type, int baseAttack, int level)\n    {\n        Name = name;\n        Type = type;\n        BaseAttack = baseAttack;\n        Level = level;\n    }\n}\n\nclass Skill\n{\n    public SkillType Type { get; }\n    public string Name { get; }\n\n    public Skill(SkillType type, string name)\n    {\n        Type = type;\n        Name = name;\n    }\n}\n\nclass Enemy\n{\n    public string Name { get; }\n    public int Armor { get; }\n    public int Resistance { get; }\n\n    public Enemy(string name, int armor, int resistance)\n    {\n        Name = name;\n        Armor = armor;\n        Resistance = resistance;\n    }\n}\n\nclass DamageCalculator\n{\n    private readonly Random rng = new Random();\n\n    public int CalculateDamage(GameCharacter c, Skill s, Enemy e)\n    {\n        int raw;\n        switch (c.Type)\n        {\n            case CharacterType.WARRIOR:\n                raw = (int)(c.BaseAttack * (1.2 + c.Level * 0.05));\n                if (s.Type == SkillType.SPECIAL) raw = (int)(raw * 1.5);\n                raw -= e.Armor;\n                return Math.Max(raw, 0);\n\n            case CharacterType.MAGE:\n                raw = c.BaseAttack + (int)(c.Level * 3.5);\n                if (s.Type == SkillType.SPECIAL) raw += 25;\n                raw -= e.Resistance;\n                return Math.Max(raw, 0);\n\n            case CharacterType.ARCHER:\n                raw = c.BaseAttack;\n                bool crit = rng.Next(100) < (20 + c.Level);\n                if (crit) raw *= 2;\n                if (s.Type == SkillType.SPECIAL) raw += 10;\n                raw -= (int)(e.Armor * 0.5);\n                return Math.Max(raw, 0);\n\n            default:\n                throw new ArgumentException(\"Unknown type\");\n        }\n    }\n}\n\nclass LootCalculator\n{\n    public int CalculateGold(GameCharacter c, Enemy e)\n    {\n        switch (c.Type)\n        {\n            case CharacterType.WARRIOR:\n                return 10 + c.Level + e.Armor / 5;\n            case CharacterType.MAGE:\n                return 8 + c.Level * 2 + e.Resistance / 4;\n            case CharacterType.ARCHER:\n                return 9 + (int)Math.Round(c.Level * 1.5);\n            default:\n                throw new ArgumentException(\"Unknown type\");\n        }\n    }\n}\n\n",
            "output": "using System;\nusing System.Collections.Generic;\n\nenum SkillType\n{\n    BASIC,\n    SPECIAL\n}\n\nclass Skill\n{\n    private readonly SkillType type;\n    private readonly string name;\n\n    public Skill(SkillType type, string name)\n    {\n        this.type = type;\n        this.name = name;\n    }\n\n    public SkillType GetTypeValue() { return type; }\n    public string GetName() { return name; }\n}\n\nclass Enemy\n{\n    private readonly string name;\n    private readonly int armor;\n    private readonly int resistance;\n\n    public Enemy(string name, int armor, int resistance)\n    {\n        this.name = name;\n        this.armor = armor;\n        this.resistance = resistance;\n    }\n\n    public string GetName() { return name; }\n    public int GetArmor() { return armor; }\n    public int GetResistance() { return resistance; }\n}\n\nabstract class GameCharacter\n{\n    private readonly string name;\n    private readonly int baseAttack;\n    private readonly int level;\n\n    protected GameCharacter(string name, int baseAttack, int level)\n    {\n        this.name = name;\n        this.baseAttack = baseAttack;\n        this.level = level;\n    }\n\n    public string GetName() { return name; }\n    public int GetBaseAttack() { return baseAttack; }\n    public int GetLevel() { return level; }\n\n    public abstract int CalculateDamage(Skill s, Enemy e, Random rng);\n    public abstract int CalculateGold(Enemy e);\n}\n\nclass Warrior : GameCharacter\n{\n    public Warrior(string name, int baseAttack, int level) : base(name, baseAttack, level) { }\n\n    public override int CalculateDamage(Skill s, Enemy e, Random rng)\n    {\n        int raw = (int)(GetBaseAttack() * (1.2 + GetLevel() * 0.05));\n        if (s.GetTypeValue() == SkillType.SPECIAL) raw = (int)(raw * 1.5);\n        raw -= e.GetArmor();\n        return Math.Max(raw, 0);\n    }\n\n    public override int CalculateGold(Enemy e)\n    {\n        return 10 + GetLevel() + e.GetArmor() / 5;\n    }\n}\n\nclass Mage : GameCharacter\n{\n    public Mage(string name, int baseAttack, int level) : base(name, baseAttack, level) { }\n\n    public override int CalculateDamage(Skill s, Enemy e, Random rng)\n    {\n        int raw = GetBaseAttack() + (int)(GetLevel() * 3.5);\n        if (s.GetTypeValue() == SkillType.SPECIAL) raw += 25;\n        raw -= e.GetResistance();\n        return Math.Max(raw, 0);\n    }\n\n    public override int CalculateGold(Enemy e)\n    {\n        return 8 + GetLevel() * 2 + e.GetResistance() / 4;\n    }\n}\n\nclass Archer : GameCharacter\n{\n    public Archer(string name, int baseAttack, int level) : base(name, baseAttack, level) { }\n\n    public override int CalculateDamage(Skill s, Enemy e, Random rng)\n    {\n        int raw = GetBaseAttack();\n        bool crit = rng.Next(100) < (20 + GetLevel());\n        if (crit) raw *= 2;\n        if (s.GetTypeValue() == SkillType.SPECIAL) raw += 10;\n        raw -= (int)(e.GetArmor() * 0.5);\n        return Math.Max(raw, 0);\n    }\n\n    public override int CalculateGold(Enemy e)\n    {\n        return 9 + (int)Math.Round(GetLevel() * 1.5);\n    }\n}\n",
            "level": "MODERATE",
            "language": "CSHARP",
            "violation": "OCP"
        },
        {
            "input": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nenum FoodType { BURGER, FRIES, PIZZA, DRINK, SALAD, DESSERT }\nenum Size { SMALL, MEDIUM, LARGE }\n\nclass FoodItem\n{\n    public string Name { get; }\n    public FoodType Type { get; }\n    public Size Size { get; }\n    public HashSet<string> Extras { get; }\n\n    public FoodItem(string name, FoodType type, Size size, HashSet<string> extras)\n    {\n        Name = name;\n        Type = type;\n        Size = size;\n        Extras = extras ?? new HashSet<string>();\n    }\n}\n\nclass Order\n{\n    private readonly List<FoodItem> items = new List<FoodItem>();\n    public string Customer { get; }\n\n    public Order(string customer) { Customer = customer; }\n    public void Add(FoodItem item) { items.Add(item); }\n    public List<FoodItem> Items() => items;\n}\n\nclass PriceCalculator\n{\n    public double Price(FoodItem item)\n    {\n        switch (item.Type)\n        {\n            case FoodType.BURGER:\n                return item.Size switch\n                {\n                    Size.SMALL => 5.49,\n                    Size.MEDIUM => 6.49,\n                    _ => 7.49\n                };\n            case FoodType.FRIES:\n                return item.Size switch\n                {\n                    Size.SMALL => 1.99,\n                    Size.MEDIUM => 2.49,\n                    _ => 2.99\n                };\n            case FoodType.PIZZA:\n                return item.Size switch\n                {\n                    Size.SMALL => 7.99,\n                    Size.MEDIUM => 9.99,\n                    _ => 12.49\n                };\n            case FoodType.DRINK:\n                return item.Size switch\n                {\n                    Size.SMALL => 1.29,\n                    Size.MEDIUM => 1.49,\n                    _ => 1.79\n                };\n            case FoodType.SALAD:\n                return item.Size switch\n                {\n                    Size.SMALL => 4.49,\n                    Size.MEDIUM => 5.49,\n                    _ => 6.49\n                };\n            case FoodType.DESSERT:\n                return item.Size switch\n                {\n                    Size.SMALL => 2.99,\n                    Size.MEDIUM => 3.49,\n                    _ => 3.99\n                };\n            default: throw new ArgumentException(\"Unknown type\");\n        }\n    }\n}\n\nclass TaxCalculator\n{\n    public double TaxFor(FoodItem item)\n    {\n        return item.Type switch\n        {\n            FoodType.DRINK => 0.10,\n            FoodType.DESSERT => 0.08,\n            FoodType.PIZZA => 0.06,\n            _ => 0.05\n        };\n    }\n}\n\nclass NutritionCalculator\n{\n    public int Calories(FoodItem item)\n    {\n        switch (item.Type)\n        {\n            case FoodType.BURGER:\n                return item.Size switch\n                {\n                    Size.SMALL => 480,\n                    Size.MEDIUM => 650,\n                    _ => 820\n                };\n            case FoodType.FRIES:\n                return item.Size switch\n                {\n                    Size.SMALL => 220,\n                    Size.MEDIUM => 330,\n                    _ => 440\n                };\n            case FoodType.PIZZA:\n                return item.Size switch\n                {\n                    Size.SMALL => 700,\n                    Size.MEDIUM => 950,\n                    _ => 1200\n                };\n            case FoodType.DRINK:\n                return item.Size switch\n                {\n                    Size.SMALL => 110,\n                    Size.MEDIUM => 160,\n                    _ => 210\n                };\n            case FoodType.SALAD:\n                return item.Size switch\n                {\n                    Size.SMALL => 180,\n                    Size.MEDIUM => 260,\n                    _ => 340\n                };\n            case FoodType.DESSERT:\n                return item.Size switch\n                {\n                    Size.SMALL => 250,\n                    Size.MEDIUM => 320,\n                    _ => 390\n                };\n            default: return 0;\n        }\n    }\n}\n\nclass PromotionEngine\n{\n    public double Discount(FoodItem item)\n    {\n        switch (item.Type)\n        {\n            case FoodType.BURGER: return item.Extras.Contains(\"extra-cheese\") ? 0.50 : 0.0;\n            case FoodType.FRIES: return item.Size == Size.LARGE ? 0.20 : 0.0;\n            case FoodType.DRINK: return item.Extras.Contains(\"no-ice\") ? 0.10 : 0.0;\n            case FoodType.SALAD: return item.Extras.Contains(\"chicken\") ? 0.30 : 0.0;\n            case FoodType.PIZZA: return item.Extras.Contains(\"pepperoni\") ? 0.40 : 0.0;\n            case FoodType.DESSERT: return 0.0;\n            default: return 0.0;\n        }\n    }\n}\n\nclass KitchenStationRouter\n{\n    public string Station(FoodItem item)\n    {\n        return item.Type switch\n        {\n            FoodType.BURGER => \"Grill\",\n            FoodType.FRIES => \"Fryer\",\n            FoodType.PIZZA => \"Oven\",\n            FoodType.DRINK => \"Beverage\",\n            FoodType.SALAD => \"Cold Prep\",\n            FoodType.DESSERT => \"Dessert Bar\",\n            _ => \"Unknown\"\n        };\n    }\n}\n\nclass InventoryManager\n{\n    private readonly Dictionary<string, int> stock = new Dictionary<string, int>();\n\n    public InventoryManager()\n    {\n        stock[\"bun\"] = 50;\n        stock[\"patty\"] = 50;\n        stock[\"potato\"] = 80;\n        stock[\"dough\"] = 30;\n        stock[\"soda\"] = 100;\n        stock[\"greens\"] = 40;\n        stock[\"dessertBase\"] = 30;\n    }\n\n    public bool Reserve(FoodItem item)\n    {\n        switch (item.Type)\n        {\n            case FoodType.BURGER: return Take(\"bun\", 1) && Take(\"patty\", 1);\n            case FoodType.FRIES: return Take(\"potato\", 2);\n            case FoodType.PIZZA: return Take(\"dough\", 1);\n            case FoodType.DRINK: return Take(\"soda\", 1);\n            case FoodType.SALAD: return Take(\"greens\", 1);\n            case FoodType.DESSERT: return Take(\"dessertBase\", 1);\n            default: return false;\n        }\n    }\n\n    private bool Take(string key, int qty)\n    {\n        int have = stock.ContainsKey(key) ? stock[key] : 0;\n        if (have < qty) return false;\n        stock[key] = have - qty;\n        return true;\n    }\n\n    public IReadOnlyDictionary<string, int> GetStock() => stock;\n}\n\nclass Chef\n{\n    public void Prepare(FoodItem item)\n    {\n        switch (item.Type)\n        {\n            case FoodType.BURGER: Console.WriteLine(\"Chef grills patty and assembles burger\"); break;\n            case FoodType.FRIES: Console.WriteLine(\"Chef drops fries in fryer\"); break;\n            case FoodType.PIZZA: Console.WriteLine(\"Chef stretches dough and bakes pizza\"); break;\n            case FoodType.DRINK: Console.WriteLine(\"Chef fills cup and lids drink\"); break;\n            case FoodType.SALAD: Console.WriteLine(\"Chef chops and tosses salad\"); break;\n            case FoodType.DESSERT: Console.WriteLine(\"Chef plates dessert\"); break;\n        }\n    }\n}\n\nclass Waiter\n{\n    public void Take(Order order, FoodItem item)\n    {\n        Console.WriteLine(\"Waiter records item: \" + item.Name);\n        order.Add(item);\n    }\n\n    public void Serve(FoodItem item)\n    {\n        switch (item.Type)\n        {\n            case FoodType.BURGER: Console.WriteLine(\"Waiter serves burger with napkins\"); break;\n            case FoodType.FRIES: Console.WriteLine(\"Waiter serves fries with ketchup\"); break;\n            case FoodType.PIZZA: Console.WriteLine(\"Waiter serves pizza with slicer\"); break;\n            case FoodType.DRINK: Console.WriteLine(\"Waiter serves drink with straw\"); break;\n            case FoodType.SALAD: Console.WriteLine(\"Waiter serves salad with dressing\"); break;\n            case FoodType.DESSERT: Console.WriteLine(\"Waiter serves dessert with spoon\"); break;\n        }\n    }\n}\n\nclass Cashier\n{\n    private readonly PriceCalculator prices = new PriceCalculator();\n    private readonly TaxCalculator taxes = new TaxCalculator();\n    private readonly PromotionEngine promos = new PromotionEngine();\n\n    public double Total(Order order)\n    {\n        double sum = 0.0;\n        foreach (var item in order.Items())\n        {\n            double basePrice = prices.Price(item);\n            double discount = promos.Discount(item);\n            double taxed = (basePrice - discount) * (1.0 + taxes.TaxFor(item));\n            sum += taxed;\n        }\n        return Math.Round(sum, 2);\n    }\n}\n\nclass ReceiptPrinter\n{\n    private readonly PriceCalculator prices = new PriceCalculator();\n    private readonly TaxCalculator taxes = new TaxCalculator();\n    private readonly PromotionEngine promos = new PromotionEngine();\n    private readonly NutritionCalculator nutrition = new NutritionCalculator();\n\n    public void Print(Order order)\n    {\n        Console.WriteLine(\"Customer: \" + order.Customer);\n        foreach (var item in order.Items())\n        {\n            double basePrice = prices.Price(item);\n            double discount = promos.Discount(item);\n            double taxRate = taxes.TaxFor(item);\n            int kcal = nutrition.Calories(item);\n            Console.WriteLine($\"{item.Name} ({item.Type} {item.Size}) base ${basePrice} disc ${discount} tax {(int)(taxRate * 100)}% kcal {kcal}\");\n        }\n    }\n}",
            "output": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nenum FoodType { BURGER, FRIES, PIZZA, DRINK, SALAD, DESSERT }\nenum Size { SMALL, MEDIUM, LARGE }\n\nclass FoodItem\n{\n    private readonly string name;\n    private readonly FoodType type;\n    private readonly Size size;\n    private readonly HashSet<string> extras;\n\n    public FoodItem(string name, FoodType type, Size size, HashSet<string> extras)\n    {\n        this.name = name;\n        this.type = type;\n        this.size = size;\n        this.extras = extras ?? new HashSet<string>();\n    }\n\n    public string GetName() => name;\n    public FoodType GetFoodType() => type; // avoid clash with object.GetType()\n    public Size GetSize() => size;\n    public HashSet<string> GetExtras() => extras;\n}\n\nclass Order\n{\n    private readonly string customer;\n    private readonly List<FoodItem> items = new List<FoodItem>();\n    public Order(string customer) { this.customer = customer; }\n    public void Add(FoodItem item) { items.Add(item); }\n    public List<FoodItem> Items() => items;\n    public string Customer() => customer;\n}\n\ninterface FoodOps\n{\n    FoodType Type();\n    double Tax();\n    double Discount(FoodItem item);\n    string Station();\n    void Prepare();\n    void Serve();\n    bool Reserve(InventoryManager inventory, FoodItem item);\n}\n\nstatic class FoodOpsRegistry\n{\n    private static readonly Dictionary<FoodType, FoodOps> OPS = new Dictionary<FoodType, FoodOps>();\n\n    public static void Register(FoodOps ops) => OPS[ops.Type()] = ops;\n\n    public static FoodOps Of(FoodType t)\n    {\n        if (!OPS.TryGetValue(t, out var o)) throw new ArgumentException(\"Unknown type\");\n        return o;\n    }\n\n    static FoodOpsRegistry()\n    {\n        Register(new BurgerOps());\n        Register(new FriesOps());\n        Register(new PizzaOps());\n        Register(new DrinkOps());\n        Register(new SaladOps());\n        Register(new DessertOps());\n    }\n}\n\nclass BurgerOps : FoodOps\n{\n    public FoodType Type() => FoodType.BURGER;\n    public double Tax() => 0.05;\n    public double Discount(FoodItem item) => item.GetExtras().Contains(\"extra-cheese\") ? 0.50 : 0.0;\n    public string Station() => \"Grill\";\n    public void Prepare() => Console.WriteLine(\"Chef grills patty and assembles burger\");\n    public void Serve() => Console.WriteLine(\"Waiter serves burger with napkins\");\n    public bool Reserve(InventoryManager inv, FoodItem i) => inv.Consume(\"bun\", 1) && inv.Consume(\"patty\", 1);\n}\n\nclass FriesOps : FoodOps\n{\n    public FoodType Type() => FoodType.FRIES;\n    public double Tax() => 0.05;\n    public double Discount(FoodItem item) => item.GetSize() == Size.LARGE ? 0.20 : 0.0;\n    public string Station() => \"Fryer\";\n    public void Prepare() => Console.WriteLine(\"Chef drops fries in fryer\");\n    public void Serve() => Console.WriteLine(\"Waiter serves fries with ketchup\");\n    public bool Reserve(InventoryManager inv, FoodItem i) => inv.Consume(\"potato\", 2);\n}\n\nclass PizzaOps : FoodOps\n{\n    public FoodType Type() => FoodType.PIZZA;\n    public double Tax() => 0.06;\n    public double Discount(FoodItem item) => item.GetExtras().Contains(\"pepperoni\") ? 0.40 : 0.0;\n    public string Station() => \"Oven\";\n    public void Prepare() => Console.WriteLine(\"Chef stretches dough and bakes pizza\");\n    public void Serve() => Console.WriteLine(\"Waiter serves pizza with slicer\");\n    public bool Reserve(InventoryManager inv, FoodItem i) => inv.Consume(\"dough\", 1);\n}\n\nclass DrinkOps : FoodOps\n{\n    public FoodType Type() => FoodType.DRINK;\n    public double Tax() => 0.10;\n    public double Discount(FoodItem item) => item.GetExtras().Contains(\"no-ice\") ? 0.10 : 0.0;\n    public string Station() => \"Beverage\";\n    public void Prepare() => Console.WriteLine(\"Chef fills cup and lids drink\");\n    public void Serve() => Console.WriteLine(\"Waiter serves drink with straw\");\n    public bool Reserve(InventoryManager inv, FoodItem i) => inv.Consume(\"soda\", 1);\n}\n\nclass SaladOps : FoodOps\n{\n    public FoodType Type() => FoodType.SALAD;\n    public double Tax() => 0.05;\n    public double Discount(FoodItem item) => item.GetExtras().Contains(\"chicken\") ? 0.30 : 0.0;\n    public string Station() => \"Cold Prep\";\n    public void Prepare() => Console.WriteLine(\"Chef chops and tosses salad\");\n    public void Serve() => Console.WriteLine(\"Waiter serves salad with dressing\");\n    public bool Reserve(InventoryManager inv, FoodItem i) => inv.Consume(\"greens\", 1);\n}\n\nclass DessertOps : FoodOps\n{\n    public FoodType Type() => FoodType.DESSERT;\n    public double Tax() => 0.08;\n    public double Discount(FoodItem item) => 0.0;\n    public string Station() => \"Dessert Bar\";\n    public void Prepare() => Console.WriteLine(\"Chef plates dessert\");\n    public void Serve() => Console.WriteLine(\"Waiter serves dessert with spoon\");\n    public bool Reserve(InventoryManager inv, FoodItem i) => inv.Consume(\"dessertBase\", 1);\n}\n\nstatic class PriceTable\n{\n    private static readonly Dictionary<FoodType, Dictionary<Size, double>> PRICES = new Dictionary<FoodType, Dictionary<Size, double>>\n    {\n        [FoodType.BURGER] = new Dictionary<Size, double> { [Size.SMALL]=5.49, [Size.MEDIUM]=6.49, [Size.LARGE]=7.49 },\n        [FoodType.FRIES]  = new Dictionary<Size, double> { [Size.SMALL]=1.99, [Size.MEDIUM]=2.49, [Size.LARGE]=2.99 },\n        [FoodType.PIZZA]  = new Dictionary<Size, double> { [Size.SMALL]=7.99, [Size.MEDIUM]=9.99, [Size.LARGE]=12.49 },\n        [FoodType.DRINK]  = new Dictionary<Size, double> { [Size.SMALL]=1.29, [Size.MEDIUM]=1.49, [Size.LARGE]=1.79 },\n        [FoodType.SALAD]  = new Dictionary<Size, double> { [Size.SMALL]=4.49, [Size.MEDIUM]=5.49, [Size.LARGE]=6.49 },\n        [FoodType.DESSERT]= new Dictionary<Size, double> { [Size.SMALL]=2.99, [Size.MEDIUM]=3.49, [Size.LARGE]=3.99 },\n    };\n\n    public static double Get(FoodItem item)\n    {\n        if (!PRICES.TryGetValue(item.GetFoodType(), out var m) || !m.ContainsKey(item.GetSize()))\n            throw new ArgumentException(\"Missing price\");\n        return m[item.GetSize()];\n    }\n}\n\nstatic class CalorieTable\n{\n    private static readonly Dictionary<FoodType, Dictionary<Size, int>> CALS = new Dictionary<FoodType, Dictionary<Size, int>>\n    {\n        [FoodType.BURGER] = new Dictionary<Size, int> { [Size.SMALL]=480, [Size.MEDIUM]=650, [Size.LARGE]=820 },\n        [FoodType.FRIES]  = new Dictionary<Size, int> { [Size.SMALL]=220, [Size.MEDIUM]=330, [Size.LARGE]=440 },\n        [FoodType.PIZZA]  = new Dictionary<Size, int> { [Size.SMALL]=700, [Size.MEDIUM]=950, [Size.LARGE]=1200 },\n        [FoodType.DRINK]  = new Dictionary<Size, int> { [Size.SMALL]=110, [Size.MEDIUM]=160, [Size.LARGE]=210 },\n        [FoodType.SALAD]  = new Dictionary<Size, int> { [Size.SMALL]=180, [Size.MEDIUM]=260, [Size.LARGE]=340 },\n        [FoodType.DESSERT]= new Dictionary<Size, int> { [Size.SMALL]=250, [Size.MEDIUM]=320, [Size.LARGE]=390 },\n    };\n\n    public static int Get(FoodItem item)\n    {\n        if (!CALS.TryGetValue(item.GetFoodType(), out var m) || !m.ContainsKey(item.GetSize()))\n            return 0;\n        return m[item.GetSize()];\n    }\n}\n\nclass PriceCalculator\n{\n    public double Price(FoodItem item) => PriceTable.Get(item);\n}\n\nclass TaxCalculator\n{\n    public double TaxFor(FoodItem item) => FoodOpsRegistry.Of(item.GetFoodType()).Tax();\n}\n\nclass NutritionCalculator\n{\n    public int Calories(FoodItem item) => CalorieTable.Get(item);\n}\n\nclass PromotionEngine\n{\n    public double Discount(FoodItem item) => FoodOpsRegistry.Of(item.GetFoodType()).Discount(item);\n}\n\nclass KitchenStationRouter\n{\n    public string Station(FoodItem item) => FoodOpsRegistry.Of(item.GetFoodType()).Station();\n}\n\nclass InventoryManager\n{\n    private readonly Dictionary<string, int> stock = new Dictionary<string, int>();\n\n    public InventoryManager()\n    {\n        stock[\"bun\"] = 50; stock[\"patty\"] = 50; stock[\"potato\"] = 80;\n        stock[\"dough\"] = 30; stock[\"soda\"] = 100; stock[\"greens\"] = 40; stock[\"dessertBase\"] = 30;\n    }\n\n    public bool Reserve(FoodItem item) => FoodOpsRegistry.Of(item.GetFoodType()).Reserve(this, item);\n    public bool Consume(string key, int qty) => Take(key, qty);\n\n    private bool Take(string key, int qty)\n    {\n        var have = stock.TryGetValue(key, out var v) ? v : 0;\n        if (have < qty) return false;\n        stock[key] = have - qty;\n        return true;\n    }\n\n    public Dictionary<string,int> GetStock() => new Dictionary<string,int>(stock);\n\n    public string GetStockString()\n    {\n        var parts = stock.Select(kv => kv.Key + \"=\" + kv.Value);\n        return \"{\" + string.Join(\", \", parts) + \"}\";\n    }\n}\n\nclass Chef\n{\n    public void Prepare(FoodItem item) => FoodOpsRegistry.Of(item.GetFoodType()).Prepare();\n}\n\nclass Waiter\n{\n    public void Take(Order order, FoodItem item)\n    {\n        Console.WriteLine(\"Waiter records item: \" + item.GetName());\n        order.Add(item);\n    }\n    public void Serve(FoodItem item) => FoodOpsRegistry.Of(item.GetFoodType()).Serve();\n}\n\nclass Cashier\n{\n    private readonly PriceCalculator prices = new PriceCalculator();\n    private readonly TaxCalculator taxes = new TaxCalculator();\n    private readonly PromotionEngine promos = new PromotionEngine();\n\n    public double Total(Order order)\n    {\n        double sum = 0.0;\n        foreach (var item in order.Items())\n        {\n            double @base = prices.Price(item);\n            double discount = promos.Discount(item);\n            double taxed = (@base - discount) * (1.0 + taxes.TaxFor(item));\n            sum += taxed;\n        }\n        return Math.Round(sum, 2, MidpointRounding.AwayFromZero);\n    }\n}\n\nclass ReceiptPrinter\n{\n    private readonly PriceCalculator prices = new PriceCalculator();\n    private readonly TaxCalculator taxes = new TaxCalculator();\n    private readonly PromotionEngine promos = new PromotionEngine();\n    private readonly NutritionCalculator nutrition = new NutritionCalculator();\n\n    public void Print(Order order)\n    {\n        Console.WriteLine(\"Customer: \" + order.Customer());\n        foreach (var item in order.Items())\n        {\n            double @base = prices.Price(item);\n            double discount = promos.Discount(item);\n            double taxRate = taxes.TaxFor(item);\n            int kcal = nutrition.Calories(item);\n            Console.WriteLine(item.GetName() + \" (\" + item.GetFoodType() + \" \" + item.GetSize() + \") \" +\n                              \"base $\" + @base + \" disc $\" + discount + \" tax \" + (int)(taxRate * 100) + \"% kcal \" + kcal);\n        }\n    }\n}\n",
            "level": "MODERATE",
            "language": "CSHARP",
            "violation": "OCP"
        },
        {
            "input": "using System;\nusing System.Collections.Generic;\n\nenum DeviceType { LIGHT, THERMOSTAT, DOOR_LOCK, CAMERA, SPRINKLER }\nenum RoomType { LIVING, KITCHEN, BEDROOM, GARDEN }\nenum Mode { ECO, COMFORT, AWAY, NIGHT }\n\nclass SmartDevice {\n    private readonly string id;\n    private readonly DeviceType type;\n    private Mode mode = Mode.ECO;\n    private bool online = true;\n\n    public SmartDevice(string id, DeviceType type) {\n        this.id = id; this.type = type;\n    }\n    public string GetId() { return id; }\n    public DeviceType GetTypeDevice() { return type; }\n    public Mode GetMode() { return mode; }\n    public bool IsOnline() { return online; }\n    public void SetMode(Mode m) { this.mode = m; }\n    public void SetOnline(bool o) { this.online = o; }\n}\n\nclass Room {\n    private readonly string name;\n    private readonly RoomType type;\n    private readonly List<SmartDevice> devices = new List<SmartDevice>();\n    public Room(string name, RoomType type) { this.name = name; this.type = type; }\n    public void Add(SmartDevice d) { devices.Add(d); }\n    public List<SmartDevice> GetDevices() { return devices; }\n    public string GetName() { return name; }\n    public RoomType GetRoomType() { return type; }\n}\n\nclass ScheduleEntry {\n    public readonly SmartDevice device;\n    public readonly string cron;\n    public readonly string action;\n    public ScheduleEntry(SmartDevice device, string cron, string action) {\n        this.device = device; this.cron = cron; this.action = action;\n    }\n}\n\nclass SmartHomeController {\n    public void TurnOn(SmartDevice d) {\n        switch (d.GetTypeDevice()) {\n            case DeviceType.LIGHT: Console.WriteLine(\"Light \" + d.GetId() + \" ON\"); break;\n            case DeviceType.THERMOSTAT: Console.WriteLine(\"Thermostat \" + d.GetId() + \" heating\"); break;\n            case DeviceType.DOOR_LOCK: Console.WriteLine(\"Lock \" + d.GetId() + \" stays locked\"); break;\n            case DeviceType.CAMERA: Console.WriteLine(\"Camera \" + d.GetId() + \" recording\"); break;\n            case DeviceType.SPRINKLER: Console.WriteLine(\"Sprinkler \" + d.GetId() + \" watering\"); break;\n        }\n    }\n    public void TurnOff(SmartDevice d) {\n        switch (d.GetTypeDevice()) {\n            case DeviceType.LIGHT: Console.WriteLine(\"Light \" + d.GetId() + \" OFF\"); break;\n            case DeviceType.THERMOSTAT: Console.WriteLine(\"Thermostat \" + d.GetId() + \" idle\"); break;\n            case DeviceType.DOOR_LOCK: Console.WriteLine(\"Lock \" + d.GetId() + \" remains locked\"); break;\n            case DeviceType.CAMERA: Console.WriteLine(\"Camera \" + d.GetId() + \" standby\"); break;\n            case DeviceType.SPRINKLER: Console.WriteLine(\"Sprinkler \" + d.GetId() + \" stopped\"); break;\n        }\n    }\n    public void SetMode(SmartDevice d, Mode m) {\n        d.SetMode(m);\n        switch (d.GetTypeDevice()) {\n            case DeviceType.LIGHT: Console.WriteLine(\"Light \" + d.GetId() + \" mode \" + m); break;\n            case DeviceType.THERMOSTAT: Console.WriteLine(\"Thermostat \" + d.GetId() + \" mode \" + m); break;\n            case DeviceType.DOOR_LOCK: Console.WriteLine(\"Lock \" + d.GetId() + \" mode \" + m); break;\n            case DeviceType.CAMERA: Console.WriteLine(\"Camera \" + d.GetId() + \" mode \" + m); break;\n            case DeviceType.SPRINKLER: Console.WriteLine(\"Sprinkler \" + d.GetId() + \" mode \" + m); break;\n        }\n    }\n    public double EnergyUsageKwh(SmartDevice d, int minutes) {\n        switch (d.GetTypeDevice()) {\n            case DeviceType.LIGHT: return 0.012 * minutes;\n            case DeviceType.THERMOSTAT: return 0.08 * minutes;\n            case DeviceType.DOOR_LOCK: return 0.0002 * minutes;\n            case DeviceType.CAMERA: return 0.01 * minutes;\n            case DeviceType.SPRINKLER: return 0.03 * minutes;\n            default: return 0;\n        }\n    }\n    public string DeviceIcon(SmartDevice d) {\n        switch (d.GetTypeDevice()) {\n            case DeviceType.LIGHT: return \"ð¡\";\n            case DeviceType.THERMOSTAT: return \"ð¡ï¸\";\n            case DeviceType.DOOR_LOCK: return \"ð\";\n            case DeviceType.CAMERA: return \"ð·\";\n            case DeviceType.SPRINKLER: return \"ð§\";\n            default: return \"â\";\n        }\n    }\n    public List<string> FirmwareUpdateSteps(SmartDevice d) {\n        switch (d.GetTypeDevice()) {\n            case DeviceType.LIGHT: return new List<string> { \"Ping\", \"Push FW\", \"Reboot\" };\n            case DeviceType.THERMOSTAT: return new List<string> { \"Ping\", \"Backup Profile\", \"Push FW\", \"Recalibrate\" };\n            case DeviceType.DOOR_LOCK: return new List<string> { \"Ping\", \"Secure Channel\", \"Push FW\", \"Reauth\" };\n            case DeviceType.CAMERA: return new List<string> { \"Ping\", \"Push FW\", \"Restart Stream\" };\n            case DeviceType.SPRINKLER: return new List<string> { \"Ping\", \"Push FW\", \"Valve Test\" };\n            default: return new List<string>();\n        }\n    }\n}\n\nclass NotificationService {\n    public void NotifyOwner(SmartDevice d, string ev) {\n        switch (d.GetTypeDevice()) {\n            case DeviceType.LIGHT: Console.WriteLine(\"Notify: Light \" + d.GetId() + \" -> \" + ev); break;\n            case DeviceType.THERMOSTAT: Console.WriteLine(\"Notify: Thermostat \" + d.GetId() + \" -> \" + ev); break;\n            case DeviceType.DOOR_LOCK: Console.WriteLine(\"Notify: Lock \" + d.GetId() + \" -> \" + ev); break;\n            case DeviceType.CAMERA: Console.WriteLine(\"Notify: Camera \" + d.GetId() + \" -> \" + ev); break;\n            case DeviceType.SPRINKLER: Console.WriteLine(\"Notify: Sprinkler \" + d.GetId() + \" -> \" + ev); break;\n        }\n    }\n}\n\nclass DiagnosticsService {\n    public string Health(SmartDevice d) {\n        switch (d.GetTypeDevice()) {\n            case DeviceType.LIGHT: return d.IsOnline() ? \"OK\" : \"Bulb Offline\";\n            case DeviceType.THERMOSTAT: return d.IsOnline() ? \"OK\" : \"Sensor Offline\";\n            case DeviceType.DOOR_LOCK: return d.IsOnline() ? \"OK\" : \"Battery Low\";\n            case DeviceType.CAMERA: return d.IsOnline() ? \"OK\" : \"Stream Error\";\n            case DeviceType.SPRINKLER: return d.IsOnline() ? \"OK\" : \"Valve Error\";\n            default: return \"Unknown\";\n        }\n    }\n    public double MaintenanceCostYearly(SmartDevice d) {\n        switch (d.GetTypeDevice()) {\n            case DeviceType.LIGHT: return 5.0;\n            case DeviceType.THERMOSTAT: return 20.0;\n            case DeviceType.DOOR_LOCK: return 12.0;\n            case DeviceType.CAMERA: return 18.0;\n            case DeviceType.SPRINKLER: return 15.0;\n            default: return 0.0;\n        }\n    }\n}\n\nclass SecurityPolicy {\n    public bool ActionAllowed(SmartDevice d, string action, bool userHome) {\n        switch (d.GetTypeDevice()) {\n            case DeviceType.DOOR_LOCK: return action.Equals(\"unlock\") ? userHome : true;\n            case DeviceType.CAMERA: return action.Equals(\"record\") ? true : true;\n            case DeviceType.THERMOSTAT: return true;\n            case DeviceType.LIGHT: return true;\n            case DeviceType.SPRINKLER: return !action.Equals(\"on\") || !userHome;\n            default: return false;\n        }\n    }\n}\n\nclass VoiceCommandProcessor {\n    private readonly SmartHomeController ctl = new SmartHomeController();\n    public void Handle(string phrase, SmartDevice d) {\n        switch (d.GetTypeDevice()) {\n            case DeviceType.LIGHT:\n                if (phrase.Equals(\"lights on\", StringComparison.OrdinalIgnoreCase)) ctl.TurnOn(d);\n                else if (phrase.Equals(\"lights off\", StringComparison.OrdinalIgnoreCase)) ctl.TurnOff(d);\n                else if (phrase.Equals(\"night mode\", StringComparison.OrdinalIgnoreCase)) ctl.SetMode(d, Mode.NIGHT);\n                break;\n            case DeviceType.THERMOSTAT:\n                if (phrase.Equals(\"heat on\", StringComparison.OrdinalIgnoreCase)) ctl.TurnOn(d);\n                else if (phrase.Equals(\"eco mode\", StringComparison.OrdinalIgnoreCase)) ctl.SetMode(d, Mode.ECO);\n                break;\n            case DeviceType.DOOR_LOCK:\n                if (phrase.Equals(\"lock door\", StringComparison.OrdinalIgnoreCase)) ctl.TurnOn(d);\n                break;\n            case DeviceType.CAMERA:\n                if (phrase.Equals(\"start recording\", StringComparison.OrdinalIgnoreCase)) ctl.TurnOn(d);\n                break;\n            case DeviceType.SPRINKLER:\n                if (phrase.Equals(\"water garden\", StringComparison.OrdinalIgnoreCase)) ctl.TurnOn(d);\n                break;\n        }\n    }\n}\n\nclass SceneManager {\n    private readonly SmartHomeController ctl = new SmartHomeController();\n    public void ApplyScene(string name, List<SmartDevice> devices) {\n        foreach (SmartDevice d in devices) {\n            switch (name) {\n                case \"Evening\":\n                    switch (d.GetTypeDevice()) {\n                        case DeviceType.LIGHT: ctl.TurnOn(d); ctl.SetMode(d, Mode.COMFORT); break;\n                        case DeviceType.THERMOSTAT: ctl.SetMode(d, Mode.COMFORT); break;\n                        case DeviceType.CAMERA: ctl.TurnOn(d); break;\n                        case DeviceType.DOOR_LOCK: ctl.TurnOn(d); break;\n                        case DeviceType.SPRINKLER: ctl.TurnOff(d); break;\n                    }\n                    break;\n                case \"Away\":\n                    switch (d.GetTypeDevice()) {\n                        case DeviceType.LIGHT: ctl.TurnOff(d); break;\n                        case DeviceType.THERMOSTAT: ctl.SetMode(d, Mode.AWAY); break;\n                        case DeviceType.CAMERA: ctl.TurnOn(d); break;\n                        case DeviceType.DOOR_LOCK: ctl.TurnOn(d); break;\n                        case DeviceType.SPRINKLER: ctl.TurnOff(d); break;\n                    }\n                    break;\n            }\n        }\n    }\n}\n\nclass EnergyEstimator {\n    private readonly SmartHomeController ctl = new SmartHomeController();\n    public double EstimateRoom(Room room, int minutes) {\n        double sum = 0;\n        foreach (SmartDevice d in room.GetDevices()) sum += ctl.EnergyUsageKwh(d, minutes);\n        return sum;\n    }\n}\n",
            "output": "using System;\nusing System.Collections.Generic;\nusing System.Globalization;\n\nenum DeviceType { LIGHT, THERMOSTAT, DOOR_LOCK, CAMERA, SPRINKLER }\nenum RoomType { LIVING, KITCHEN, BEDROOM, GARDEN }\nenum Mode { ECO, COMFORT, AWAY, NIGHT }\n\nclass SmartDevice {\n    private readonly string id;\n    private readonly DeviceType type;\n    private Mode mode = Mode.ECO;\n    private bool online = true;\n\n    public SmartDevice(string id, DeviceType type) { this.id = id; this.type = type; }\n    public string getId() { return id; }\n    public DeviceType getType() { return type; }\n    public Mode getMode() { return mode; }\n    public bool isOnline() { return online; }\n    public void setMode(Mode m) { this.mode = m; }\n    public void setOnline(bool o) { this.online = o; }\n}\n\nclass Room {\n    private readonly string name;\n    private readonly RoomType type;\n    private readonly List<SmartDevice> devices = new List<SmartDevice>();\n    public Room(string name, RoomType type) { this.name = name; this.type = type; }\n    public void add(SmartDevice d) { devices.Add(d); }\n    public List<SmartDevice> getDevices() { return devices; }\n    public string getName() { return name; }\n    public RoomType getType() { return type; }\n}\n\nclass ScheduleEntry {\n    public readonly SmartDevice device;\n    public readonly string cron;\n    public readonly string action;\n    public ScheduleEntry(SmartDevice device, string cron, string action) {\n        this.device = device; this.cron = cron; this.action = action;\n    }\n}\n\ninterface DeviceOps {\n    void turnOn(SmartDevice d);\n    void turnOff(SmartDevice d);\n    void setMode(SmartDevice d, Mode m);\n    double energyUsageKwh(int minutes);\n    string icon();\n    List<string> firmwareUpdateSteps();\n    void notifyOwner(SmartDevice d, string @event);\n    string health(SmartDevice d);\n    double maintenanceCostYearly();\n    bool actionAllowed(string action, bool userHome);\n    void handleVoice(string phrase, SmartHomeController ctl, SmartDevice d);\n    void applyScene(string scene, SmartHomeController ctl, SmartDevice d);\n}\n\nclass StringList : List<string> {\n    public StringList(IEnumerable<string> items) : base(items) { }\n    public override string ToString() { return \"[\" + string.Join(\", \", this) + \"]\"; }\n}\n\nclass DeviceOpsRegistry {\n    private static readonly Dictionary<DeviceType, DeviceOps> map = new Dictionary<DeviceType, DeviceOps>();\n    static DeviceOpsRegistry() {\n        map[DeviceType.LIGHT] = new LightOps();\n        map[DeviceType.THERMOSTAT] = new ThermostatOps();\n        map[DeviceType.DOOR_LOCK] = new DoorLockOps();\n        map[DeviceType.CAMERA] = new CameraOps();\n        map[DeviceType.SPRINKLER] = new SprinklerOps();\n    }\n    public static DeviceOps get(DeviceType t) { return map[t]; }\n    public static void register(DeviceType t, DeviceOps ops) { map[t] = ops; }\n}\n\nclass LightOps : DeviceOps {\n    public void turnOn(SmartDevice d) { Console.WriteLine(\"Light \" + d.getId() + \" ON\"); }\n    public void turnOff(SmartDevice d) { Console.WriteLine(\"Light \" + d.getId() + \" OFF\"); }\n    public void setMode(SmartDevice d, Mode m) { d.setMode(m); Console.WriteLine(\"Light \" + d.getId() + \" mode \" + m); }\n    public double energyUsageKwh(int minutes) { return 0.012 * minutes; }\n    public string icon() { return \"ð¡\"; }\n    public List<string> firmwareUpdateSteps() { return new StringList(new[] { \"Ping\", \"Push FW\", \"Reboot\" }); }\n    public void notifyOwner(SmartDevice d, string @event) { Console.WriteLine(\"Notify: Light \" + d.getId() + \" -> \" + @event); }\n    public string health(SmartDevice d) { return d.isOnline() ? \"OK\" : \"Bulb Offline\"; }\n    public double maintenanceCostYearly() { return 5.0; }\n    public bool actionAllowed(string action, bool userHome) { return true; }\n    public void handleVoice(string phrase, SmartHomeController ctl, SmartDevice d) {\n        if (string.Equals(phrase, \"lights on\", StringComparison.OrdinalIgnoreCase)) ctl.turnOn(d);\n        else if (string.Equals(phrase, \"lights off\", StringComparison.OrdinalIgnoreCase)) ctl.turnOff(d);\n        else if (string.Equals(phrase, \"night mode\", StringComparison.OrdinalIgnoreCase)) ctl.setMode(d, Mode.NIGHT);\n    }\n    public void applyScene(string scene, SmartHomeController ctl, SmartDevice d) {\n        if (\"Evening\".Equals(scene)) { ctl.turnOn(d); ctl.setMode(d, Mode.COMFORT); }\n        else if (\"Away\".Equals(scene)) { ctl.turnOff(d); }\n    }\n}\n\nclass ThermostatOps : DeviceOps {\n    public void turnOn(SmartDevice d) { Console.WriteLine(\"Thermostat \" + d.getId() + \" heating\"); }\n    public void turnOff(SmartDevice d) { Console.WriteLine(\"Thermostat \" + d.getId() + \" idle\"); }\n    public void setMode(SmartDevice d, Mode m) { d.setMode(m); Console.WriteLine(\"Thermostat \" + d.getId() + \" mode \" + m); }\n    public double energyUsageKwh(int minutes) { return 0.08 * minutes; }\n    public string icon() { return \"ð¡ï¸\"; }\n    public List<string> firmwareUpdateSteps() { return new StringList(new[] { \"Ping\", \"Backup Profile\", \"Push FW\", \"Recalibrate\" }); }\n    public void notifyOwner(SmartDevice d, string @event) { Console.WriteLine(\"Notify: Thermostat \" + d.getId() + \" -> \" + @event); }\n    public string health(SmartDevice d) { return d.isOnline() ? \"OK\" : \"Sensor Offline\"; }\n    public double maintenanceCostYearly() { return 20.0; }\n    public bool actionAllowed(string action, bool userHome) { return true; }\n    public void handleVoice(string phrase, SmartHomeController ctl, SmartDevice d) {\n        if (string.Equals(phrase, \"heat on\", StringComparison.OrdinalIgnoreCase)) ctl.turnOn(d);\n        else if (string.Equals(phrase, \"eco mode\", StringComparison.OrdinalIgnoreCase)) ctl.setMode(d, Mode.ECO);\n    }\n    public void applyScene(string scene, SmartHomeController ctl, SmartDevice d) {\n        if (\"Evening\".Equals(scene)) { ctl.setMode(d, Mode.COMFORT); }\n        else if (\"Away\".Equals(scene)) { ctl.setMode(d, Mode.AWAY); }\n    }\n}\n\nclass DoorLockOps : DeviceOps {\n    public void turnOn(SmartDevice d) { Console.WriteLine(\"Lock \" + d.getId() + \" stays locked\"); }\n    public void turnOff(SmartDevice d) { Console.WriteLine(\"Lock \" + d.getId() + \" remains locked\"); }\n    public void setMode(SmartDevice d, Mode m) { d.setMode(m); Console.WriteLine(\"Lock \" + d.getId() + \" mode \" + m); }\n    public double energyUsageKwh(int minutes) { return 0.0002 * minutes; }\n    public string icon() { return \"ð\"; }\n    public List<string> firmwareUpdateSteps() { return new StringList(new[] { \"Ping\", \"Secure Channel\", \"Push FW\", \"Reauth\" }); }\n    public void notifyOwner(SmartDevice d, string @event) { Console.WriteLine(\"Notify: Lock \" + d.getId() + \" -> \" + @event); }\n    public string health(SmartDevice d) { return d.isOnline() ? \"OK\" : \"Battery Low\"; }\n    public double maintenanceCostYearly() { return 12.0; }\n    public bool actionAllowed(string action, bool userHome) { return action.Equals(\"unlock\") ? userHome : true; }\n    public void handleVoice(string phrase, SmartHomeController ctl, SmartDevice d) {\n        if (string.Equals(phrase, \"lock door\", StringComparison.OrdinalIgnoreCase)) ctl.turnOn(d);\n    }\n    public void applyScene(string scene, SmartHomeController ctl, SmartDevice d) {\n        if (\"Evening\".Equals(scene) || \"Away\".Equals(scene)) { ctl.turnOn(d); }\n    }\n}\n\nclass CameraOps : DeviceOps {\n    public void turnOn(SmartDevice d) { Console.WriteLine(\"Camera \" + d.getId() + \" recording\"); }\n    public void turnOff(SmartDevice d) { Console.WriteLine(\"Camera \" + d.getId() + \" standby\"); }\n    public void setMode(SmartDevice d, Mode m) { d.setMode(m); Console.WriteLine(\"Camera \" + d.getId() + \" mode \" + m); }\n    public double energyUsageKwh(int minutes) { return 0.01 * minutes; }\n    public string icon() { return \"ð·\"; }\n    public List<string> firmwareUpdateSteps() { return new StringList(new[] { \"Ping\", \"Push FW\", \"Restart Stream\" }); }\n    public void notifyOwner(SmartDevice d, string @event) { Console.WriteLine(\"Notify: Camera \" + d.getId() + \" -> \" + @event); }\n    public string health(SmartDevice d) { return d.isOnline() ? \"OK\" : \"Stream Error\"; }\n    public double maintenanceCostYearly() { return 18.0; }\n    public bool actionAllowed(string action, bool userHome) { return true; }\n    public void handleVoice(string phrase, SmartHomeController ctl, SmartDevice d) {\n        if (string.Equals(phrase, \"start recording\", StringComparison.OrdinalIgnoreCase)) ctl.turnOn(d);\n    }\n    public void applyScene(string scene, SmartHomeController ctl, SmartDevice d) {\n        if (\"Evening\".Equals(scene) || \"Away\".Equals(scene)) { ctl.turnOn(d); }\n    }\n}\n\nclass SprinklerOps : DeviceOps {\n    public void turnOn(SmartDevice d) { Console.WriteLine(\"Sprinkler \" + d.getId() + \" watering\"); }\n    public void turnOff(SmartDevice d) { Console.WriteLine(\"Sprinkler \" + d.getId() + \" stopped\"); }\n    public void setMode(SmartDevice d, Mode m) { d.setMode(m); Console.WriteLine(\"Sprinkler \" + d.getId() + \" mode \" + m); }\n    public double energyUsageKwh(int minutes) { return 0.03 * minutes; }\n    public string icon() { return \"ð§\"; }\n    public List<string> firmwareUpdateSteps() { return new StringList(new[] { \"Ping\", \"Push FW\", \"Valve Test\" }); }\n    public void notifyOwner(SmartDevice d, string @event) { Console.WriteLine(\"Notify: Sprinkler \" + d.getId() + \" -> \" + @event); }\n    public string health(SmartDevice d) { return d.isOnline() ? \"OK\" : \"Valve Error\"; }\n    public double maintenanceCostYearly() { return 15.0; }\n    public bool actionAllowed(string action, bool userHome) { return !action.Equals(\"on\") || !userHome; }\n    public void handleVoice(string phrase, SmartHomeController ctl, SmartDevice d) {\n        if (string.Equals(phrase, \"water garden\", StringComparison.OrdinalIgnoreCase)) ctl.turnOn(d);\n    }\n    public void applyScene(string scene, SmartHomeController ctl, SmartDevice d) {\n        if (\"Evening\".Equals(scene) || \"Away\".Equals(scene)) { ctl.turnOff(d); }\n    }\n}\n\nclass SmartHomeController {\n    public void turnOn(SmartDevice d) { DeviceOpsRegistry.get(d.getType()).turnOn(d); }\n    public void turnOff(SmartDevice d) { DeviceOpsRegistry.get(d.getType()).turnOff(d); }\n    public void setMode(SmartDevice d, Mode m) { DeviceOpsRegistry.get(d.getType()).setMode(d, m); }\n    public double energyUsageKwh(SmartDevice d, int minutes) { return DeviceOpsRegistry.get(d.getType()).energyUsageKwh(minutes); }\n    public string deviceIcon(SmartDevice d) { return DeviceOpsRegistry.get(d.getType()).icon(); }\n    public List<string> firmwareUpdateSteps(SmartDevice d) { return DeviceOpsRegistry.get(d.getType()).firmwareUpdateSteps(); }\n}\n\nclass NotificationService {\n    public void notifyOwner(SmartDevice d, string @event) { DeviceOpsRegistry.get(d.getType()).notifyOwner(d, @event); }\n}\n\nclass DiagnosticsService {\n    public string health(SmartDevice d) { return DeviceOpsRegistry.get(d.getType()).health(d); }\n    public double maintenanceCostYearly(SmartDevice d) { return DeviceOpsRegistry.get(d.getType()).maintenanceCostYearly(); }\n}\n\nclass SecurityPolicy {\n    public bool actionAllowed(SmartDevice d, string action, bool userHome) {\n        return DeviceOpsRegistry.get(d.getType()).actionAllowed(action, userHome);\n    }\n}\n\nclass VoiceCommandProcessor {\n    private readonly SmartHomeController ctl = new SmartHomeController();\n    public void handle(string phrase, SmartDevice d) {\n        DeviceOpsRegistry.get(d.getType()).handleVoice(phrase, ctl, d);\n    }\n}\n\nclass SceneManager {\n    private readonly SmartHomeController ctl = new SmartHomeController();\n    public void applyScene(string name, List<SmartDevice> devices) {\n        foreach (var d in devices) DeviceOpsRegistry.get(d.getType()).applyScene(name, ctl, d);\n    }\n}\n\nclass EnergyEstimator {\n    private readonly SmartHomeController ctl = new SmartHomeController();\n    public double estimateRoom(Room room, int minutes) {\n        double sum = 0;\n        foreach (var d in room.getDevices()) sum += ctl.energyUsageKwh(d, minutes);\n        return sum;\n    }\n}",
            "level": "MODERATE",
            "language": "CSHARP",
            "violation": "OCP"
        },
        {
            "input": "class Shape {\n    private String type;\n    \n    public Shape(String type) {\n        this.type = type;\n    }\n    \n    public String getType() {\n        return type;\n    }\n}\n\nclass Rectangle extends Shape {\n    private double width;\n    private double height;\n    \n    public Rectangle(double width, double height) {\n        super(\"rectangle\");\n        this.width = width;\n        this.height = height;\n    }\n    \n    public double getWidth() {\n        return width;\n    }\n    \n    public double getHeight() {\n        return height;\n    }\n}\n\nclass Circle extends Shape {\n    private double radius;\n    \n    public Circle(double radius) {\n        super(\"circle\");\n        this.radius = radius;\n    }\n    \n    public double getRadius() {\n        return radius;\n    }\n}\n\nclass AreaCalculator {\n    public double calculateArea(Shape shape) {\n        if (shape.getType().equals(\"rectangle\")) {\n            Rectangle rectangle = (Rectangle) shape;\n            return rectangle.getWidth() * rectangle.getHeight();\n        } else if (shape.getType().equals(\"circle\")) {\n            Circle circle = (Circle) shape;\n            return Math.PI * circle.getRadius() * circle.getRadius();\n        }\n        return 0;\n    }\n}\n",
            "output": "interface Shape {\n    double getArea();\n}\n\nclass Rectangle implements Shape {\n    private final double width;\n    private final double height;\n\n    public Rectangle(double width, double height) {\n        this.width = width;\n        this.height = height;\n    }\n\n    public double getArea() {\n        return width * height;\n    }\n}\n\nclass Circle implements Shape {\n    private final double radius;\n\n    public Circle(double radius) {\n        this.radius = radius;\n    }\n\n    public double getArea() {\n        return Math.PI * radius * radius;\n    }\n}\n\nclass AreaCalculator {\n    public double calculateArea(Shape shape) {\n        return shape.getArea();\n    }\n}\n",
            "level": "EASY",
            "language": "JAVA",
            "violation": "OCP"
        },
        {
            "input": "import java.util.*;\n\nenum CharacterType {\n    WARRIOR,\n    MAGE,\n    ARCHER\n}\n\nclass GameCharacter {\n    private final String name;\n    private final CharacterType type;\n    private final int baseAttack;\n\n    public GameCharacter(String name, CharacterType type, int baseAttack) {\n        this.name = name;\n        this.type = type;\n        this.baseAttack = baseAttack;\n    }\n\n    public String getName() { return name; }\n    public CharacterType getType() { return type; }\n    public int getBaseAttack() { return baseAttack; }\n}\n\nclass DamageCalculator {\n    public int calculateDamage(GameCharacter character) {\n        switch (character.getType()) {\n            case WARRIOR:\n                // Warriors hit harder but less consistent\n                return (int) (character.getBaseAttack() * 1.5);\n            case MAGE:\n                // Mages scale with a flat bonus\n                return character.getBaseAttack() + 20;\n            case ARCHER:\n                // Archers crit sometimes (simulated with random here)\n                boolean crit = new Random().nextBoolean();\n                return crit ? character.getBaseAttack() * 2 : character.getBaseAttack();\n            default:\n                throw new IllegalArgumentException(\"Unknown character type: \" + character.getType());\n        }\n    }\n}\n\n",
            "output": "import java.util.*;\n\ninterface DamageDealer {\n    int calculateDamage();\n    String getName();\n    CharacterType getType();\n}\n\nenum CharacterType {\n    WARRIOR,\n    MAGE,\n    ARCHER\n}\n\nabstract class GameCharacter implements DamageDealer {\n    private final String name;\n    private final CharacterType type;\n    private final int baseAttack;\n\n    protected GameCharacter(String name, CharacterType type, int baseAttack) {\n        this.name = name;\n        this.type = type;\n        this.baseAttack = baseAttack;\n    }\n\n    public String getName() { return name; }\n    public CharacterType getType() { return type; }\n    public int getBaseAttack() { return baseAttack; }\n}\n\nclass Warrior extends GameCharacter {\n    public Warrior(String name, int baseAttack) {\n        super(name, CharacterType.WARRIOR, baseAttack);\n    }\n\n    @Override\n    public int calculateDamage() {\n        return (int) (getBaseAttack() * 1.5);\n    }\n}\n\nclass Mage extends GameCharacter {\n    public Mage(String name, int baseAttack) {\n        super(name, CharacterType.MAGE, baseAttack);\n    }\n\n    @Override\n    public int calculateDamage() {\n        return getBaseAttack() + 20;\n    }\n}\n\nclass Archer extends GameCharacter {\n    private final Random random = new Random();\n\n    public Archer(String name, int baseAttack) {\n        super(name, CharacterType.ARCHER, baseAttack);\n    }\n\n    @Override\n    public int calculateDamage() {\n        boolean crit = random.nextBoolean();\n        return crit ? getBaseAttack() * 2 : getBaseAttack();\n    }\n}\n",
            "level": "EASY",
            "language": "JAVA",
            "violation": "OCP"
        },
        {
            "input": "import java.util.*;\n\nenum FoodType {\n    BURGER,\n    FRIES,\n    PIZZA,\n    DRINK\n}\n\nclass FoodItem {\n    private final String name;\n    private final FoodType type;\n    public FoodItem(String name, FoodType type) {\n        this.name = name; this.type = type;\n    }\n    public String getName() { return name; }\n    public FoodType getType() { return type; }\n}\n\nclass PriceCalculator {\n    public double calculatePrice(FoodItem item) {\n        switch (item.getType()) {\n            case BURGER: return 5.99;\n            case FRIES: return 2.49;\n            case PIZZA: return 7.99;\n            case DRINK: return 1.50;\n            default: throw new IllegalArgumentException(\"Unknown type\");\n        }\n    }\n}\n\nclass Order {\n    private final List<FoodItem> items = new ArrayList<>();\n    public void addItem(FoodItem item) { items.add(item); }\n    public List<FoodItem> getItems() { return items; }\n}\n\n",
            "output": "import java.util.*;\n\ninterface PricedItem {\n    String getName();\n    double getPrice();\n}\n\nabstract class FoodItem implements PricedItem {\n    private final String name;\n\n    protected FoodItem(String name) {\n        this.name = name;\n    }\n\n    @Override\n    public String getName() { return name; }\n}\n\nclass Burger extends FoodItem {\n    public Burger(String name) { super(name); }\n    @Override public double getPrice() { return 5.99; }\n}\n\nclass Fries extends FoodItem {\n    public Fries(String name) { super(name); }\n    @Override public double getPrice() { return 2.49; }\n}\n\nclass Pizza extends FoodItem {\n    public Pizza(String name) { super(name); }\n    @Override public double getPrice() { return 7.99; }\n}\n\nclass Drink extends FoodItem {\n    public Drink(String name) { super(name); }\n    @Override public double getPrice() { return 1.50; }\n}\n\nclass Order {\n    private final List<FoodItem> items = new ArrayList<>();\n    public void addItem(FoodItem item) { items.add(item); }\n    public List<FoodItem> getItems() { return items; }\n}\n",
            "level": "EASY",
            "language": "JAVA",
            "violation": "OCP"
        },
        {
            "input": "import java.util.*;\n\nenum DeviceType { LIGHT, THERMOSTAT, DOOR_LOCK }\n\nclass SmartDevice {\n    private final String id;\n    private final DeviceType type;\n    public SmartDevice(String id, DeviceType type) { this.id = id; this.type = type; }\n    public String getId() { return id; }\n    public DeviceType getType() { return type; }\n}\n\nclass SmartHomeController {\n    public void turnOn(SmartDevice d) {\n        switch (d.getType()) {\n            case LIGHT: System.out.println(\"Light \" + d.getId() + \" is ON\"); break;\n            case THERMOSTAT: System.out.println(\"Thermostat \" + d.getId() + \" heating to 22Â°C\"); break;\n            case DOOR_LOCK: System.out.println(\"Door lock \" + d.getId() + \" cannot be turned ON\"); break;\n            default: throw new IllegalArgumentException(\"Unknown device\");\n        }\n    }\n    public double energyUsageKwh(SmartDevice d, int minutes) {\n        switch (d.getType()) {\n            case LIGHT: return 0.012 * minutes;       // ~12W bulb\n            case THERMOSTAT: return 0.08 * minutes;   // HVAC running\n            case DOOR_LOCK: return 0.0002 * minutes;  // idle electronics\n            default: throw new IllegalArgumentException(\"Unknown device\");\n        }\n    }\n}\n\n",
            "output": "import java.util.*;\n\ninterface SmartDevice {\n    String getId();\n    void turnOn();\n    double energyUsageKwh(int minutes);\n}\n\nclass Light implements SmartDevice {\n    private final String id;\n    public Light(String id) { this.id = id; }\n    public String getId() { return id; }\n\n    @Override\n    public void turnOn() {\n        System.out.println(\"Light \" + id + \" is ON\");\n    }\n\n    @Override\n    public double energyUsageKwh(int minutes) {\n        return 0.012 * minutes; // 12W bulb\n    }\n}\n\nclass Thermostat implements SmartDevice {\n    private final String id;\n    public Thermostat(String id) { this.id = id; }\n    public String getId() { return id; }\n\n    @Override\n    public void turnOn() {\n        System.out.println(\"Thermostat \" + id + \" heating to 22Â°C\");\n    }\n\n    @Override\n    public double energyUsageKwh(int minutes) {\n        return 0.08 * minutes; // HVAC\n    }\n}\n-\nclass DoorLock implements SmartDevice {\n    private final String id;\n    public DoorLock(String id) { this.id = id; }\n    public String getId() { return id; }\n\n    @Override\n    public void turnOn() {\n        System.out.println(\"Door lock \" + id + \" cannot be turned ON\");\n    }\n\n    @Override\n    public double energyUsageKwh(int minutes) {\n        return 0.0002 * minutes; // idle electronics\n    }\n}\n\nclass SmartHomeController {\n    public void activateDevice(SmartDevice d) {\n        d.turnOn();\n    }\n\n    public double energyUsageKwh(SmartDevice d, int minutes) {\n        return d.energyUsageKwh(minutes);\n    }\n}\n",
            "level": "EASY",
            "language": "JAVA",
            "violation": "OCP"
        },
        {
            "input": "abstract class Entity {\n    private static long NEXT_ID = 1;\n    private final long id;\n\n    protected Entity() {\n        this.id = NEXT_ID++;\n    }\n\n    public long getId() {\n        return id;\n    }\n}\n\nabstract class GraphicObject extends Entity {\n    private final String color;\n    private final int layer;\n\n    protected GraphicObject(String color, int layer) {\n        this.color = color;\n        this.layer = layer;\n    }\n\n    public String getColor() { return color; }\n    public int getLayer()    { return layer; }\n}\n\nenum ShapeKind { RECTANGLE, CIRCLE, TRIANGLE, CUBE, SPHERE }\n\nabstract class Shape extends GraphicObject {\n    private final ShapeKind kind;\n\n    protected Shape(ShapeKind kind, String color, int layer) {\n        super(color, layer);\n        this.kind = kind;\n    }\n\n    public ShapeKind getKind() { return kind; }\n}\n\nabstract class TwoDShape extends Shape {\n    protected TwoDShape(ShapeKind kind, String color, int layer) {\n        super(kind, color, layer);\n    }\n}\n\nabstract class ThreeDShape extends Shape {\n    protected ThreeDShape(ShapeKind kind, String color, int layer) {\n        super(kind, color, layer);\n    }\n}\n\n\nclass Rectangle extends TwoDShape {\n    private final double width, height;\n\n    public Rectangle(double width, double height, String color, int layer) {\n        super(ShapeKind.RECTANGLE, color, layer);\n        this.width = width; this.height = height;\n    }\n    public double getWidth()  { return width; }\n    public double getHeight() { return height; }\n}\n\nclass Circle extends TwoDShape {\n    private final double radius;\n\n    public Circle(double radius, String color, int layer) {\n        super(ShapeKind.CIRCLE, color, layer);\n        this.radius = radius;\n    }\n    public double getRadius() { return radius; }\n}\n\nclass Triangle extends TwoDShape {\n    private final double a, b, c; // sides\n\n    public Triangle(double a, double b, double c, String color, int layer) {\n        super(ShapeKind.TRIANGLE, color, layer);\n        this.a = a; this.b = b; this.c = c;\n    }\n    public double getA() { return a; }\n    public double getB() { return b; }\n    public double getC() { return c; }\n}\n\nclass Cube extends ThreeDShape {\n    private final double edge;\n\n    public Cube(double edge, String color, int layer) {\n        super(ShapeKind.CUBE, color, layer);\n        this.edge = edge;\n    }\n    public double getEdge() { return edge; }\n}\n\nclass Sphere extends ThreeDShape {\n    private final double radius;\n\n    public Sphere(double radius, String color, int layer) {\n        super(ShapeKind.SPHERE, color, layer);\n        this.radius = radius;\n    }\n    public double getRadius() { return radius; }\n}\n\n\nenum Metric { AREA, PERIMETER, VOLUME, DIAGONAL, BOUNDING_BOX_WIDTH }\n\nclass BoundingBox {\n    public final double width;\n    public final double height;\n    public BoundingBox(double width, double height) { this.width = width; this.height = height; }\n    @Override public String toString() { return \"BBox(\" + width + \"x\" + height + \")\"; }\n}\n\nclass MetricCalculator {\n    public double compute(Shape shape, Metric metric) {\n        switch (shape.getKind()) {\n            case RECTANGLE: {\n                Rectangle r = (Rectangle) shape;\n                return switch (metric) {\n                    case AREA -> r.getWidth() * r.getHeight();\n                    case PERIMETER -> 2 * (r.getWidth() + r.getHeight());\n                    case DIAGONAL -> Math.hypot(r.getWidth(), r.getHeight());\n                    case BOUNDING_BOX_WIDTH -> r.getWidth();\n                    case VOLUME -> 0;\n                };\n            }\n            case CIRCLE: {\n                Circle c = (Circle) shape;\n                return switch (metric) {\n                    case AREA -> Math.PI * c.getRadius() * c.getRadius();\n                    case PERIMETER -> 2 * Math.PI * c.getRadius();\n                    case DIAGONAL -> 2 * c.getRadius(); // diameter\n                    case BOUNDING_BOX_WIDTH -> 2 * c.getRadius();\n                    case VOLUME -> 0;\n                };\n            }\n            case TRIANGLE: {\n                Triangle t = (Triangle) shape;\n                double s = (t.getA() + t.getB() + t.getC()) / 2.0;\n                return switch (metric) {\n                    case AREA -> Math.sqrt(Math.max(0, s * (s - t.getA()) * (s - t.getB()) * (s - t.getC())));\n                    case PERIMETER -> (t.getA() + t.getB() + t.getC());\n                    case DIAGONAL -> Math.max(t.getA(), Math.max(t.getB(), t.getC()));\n                    case BOUNDING_BOX_WIDTH -> Math.max(t.getA(), Math.max(t.getB(), t.getC())); // bogus, but consistent\n                    case VOLUME -> 0;\n                };\n            }\n            case CUBE: {\n                Cube cube = (Cube) shape;\n                return switch (metric) {\n                    case AREA -> 6 * cube.getEdge() * cube.getEdge();\n                    case PERIMETER -> 12 * cube.getEdge();\n                    case VOLUME -> Math.pow(cube.getEdge(), 3);\n                    case DIAGONAL -> Math.sqrt(3) * cube.getEdge();\n                    case BOUNDING_BOX_WIDTH -> cube.getEdge();\n                };\n            }\n            case SPHERE: {\n                Sphere s = (Sphere) shape;\n                return switch (metric) {\n                    case AREA -> 4 * Math.PI * s.getRadius() * s.getRadius();\n                    case PERIMETER -> 0; // not meaningful\n                    case VOLUME -> (4.0 / 3.0) * Math.PI * Math.pow(s.getRadius(), 3);\n                    case DIAGONAL -> 2 * s.getRadius(); // diameter\n                    case BOUNDING_BOX_WIDTH -> 2 * s.getRadius();\n                };\n            }\n            default: return 0;\n        }\n    }\n}\n\nclass ShapeValidator {\n    public boolean isValid(Shape shape) {\n        switch (shape.getKind()) {\n            case RECTANGLE: {\n                Rectangle r = (Rectangle) shape;\n                return r.getWidth() > 0 && r.getHeight() > 0;\n            }\n            case CIRCLE: {\n                Circle c = (Circle) shape;\n                return c.getRadius() > 0;\n            }\n            case TRIANGLE: {\n                Triangle t = (Triangle) shape;\n                return t.getA() > 0 && t.getB() > 0 && t.getC() > 0\n                    && t.getA() + t.getB() > t.getC()\n                    && t.getA() + t.getC() > t.getB()\n                    && t.getB() + t.getC() > t.getA();\n            }\n            case CUBE: {\n                Cube cube = (Cube) shape;\n                return cube.getEdge() > 0;\n            }\n            case SPHERE: {\n                Sphere s = (Sphere) shape;\n                return s.getRadius() > 0;\n            }\n            default: return false;\n        }\n    }\n}\n\nclass ShapeRenderer {\n    public String renderPseudoSvg(Shape shape) {\n        switch (shape.getKind()) {\n            case RECTANGLE: {\n                Rectangle r = (Rectangle) shape;\n                return \"<rect w=\\\"\" + r.getWidth() + \"\\\" h=\\\"\" + r.getHeight()\n                        + \"\\\" fill=\\\"\" + shape.getColor() + \"\\\" layer=\\\"\" + shape.getLayer() + \"\\\"/>\";\n            }\n            case CIRCLE: {\n                Circle c = (Circle) shape;\n                return \"<circle r=\\\"\" + c.getRadius()\n                        + \"\\\" fill=\\\"\" + shape.getColor() + \"\\\" layer=\\\"\" + shape.getLayer() + \"\\\"/>\";\n            }\n            case TRIANGLE: {\n                Triangle t = (Triangle) shape;\n                return \"<polygon a=\\\"\" + t.getA() + \"\\\" b=\\\"\" + t.getB() + \"\\\" c=\\\"\" + t.getC()\n                        + \"\\\" fill=\\\"\" + shape.getColor() + \"\\\" layer=\\\"\" + shape.getLayer() + \"\\\"/>\";\n            }\n            case CUBE: {\n                Cube cube = (Cube) shape;\n                return \"<cube edge=\\\"\" + cube.getEdge()\n                        + \"\\\" materialColor=\\\"\" + shape.getColor() + \"\\\" layer=\\\"\" + shape.getLayer() + \"\\\"/>\";\n            }\n            case SPHERE: {\n                Sphere s = (Sphere) shape;\n                return \"<sphere r=\\\"\" + s.getRadius()\n                        + \"\\\" materialColor=\\\"\" + shape.getColor() + \"\\\" layer=\\\"\" + shape.getLayer() + \"\\\"/>\";\n            }\n            default: return \"<unknown/>\";\n        }\n    }\n}\n\nclass ShapeSerializer {\n    public String toCsvRow(Shape shape) {\n        switch (shape.getKind()) {\n            case RECTANGLE: {\n                Rectangle r = (Rectangle) shape;\n                return \"rectangle,\" + r.getWidth() + \",\" + r.getHeight() + \",\" + shape.getColor() + \",\" + shape.getLayer();\n            }\n            case CIRCLE: {\n                Circle c = (Circle) shape;\n                return \"circle,\" + c.getRadius() + \",\" + shape.getColor() + \",\" + shape.getLayer();\n            }\n            case TRIANGLE: {\n                Triangle t = (Triangle) shape;\n                return \"triangle,\" + t.getA() + \",\" + t.getB() + \",\" + t.getC() + \",\" + shape.getColor() + \",\" + shape.getLayer();\n            }\n            case CUBE: {\n                Cube cube = (Cube) shape;\n                return \"cube,\" + cube.getEdge() + \",\" + shape.getColor() + \",\" + shape.getLayer();\n            }\n            case SPHERE: {\n                Sphere s = (Sphere) shape;\n                return \"sphere,\" + s.getRadius() + \",\" + shape.getColor() + \",\" + shape.getLayer();\n            }\n            default: return \"unknown\";\n        }\n    }\n}\n\nclass ShapeFactory {\n    public Shape create(String spec) {\n        String[] parts = spec.split(\";\");\n        String type = parts[0].trim().toLowerCase();\n        java.util.Map<String,String> map = new java.util.HashMap<>();\n        for (int i = 1; i < parts.length; i++) {\n            String[] kv = parts[i].split(\"=\");\n            if (kv.length == 2) map.put(kv[0].trim().toLowerCase(), kv[1].trim());\n        }\n        String color = map.getOrDefault(\"color\", \"black\");\n        int layer = Integer.parseInt(map.getOrDefault(\"layer\", \"0\"));\n\n        switch (type) {\n            case \"rectangle\":\n                return new Rectangle(\n                    Double.parseDouble(map.getOrDefault(\"width\",\"0\")),\n                    Double.parseDouble(map.getOrDefault(\"height\",\"0\")),\n                    color, layer\n                );\n            case \"circle\":\n                return new Circle(\n                    Double.parseDouble(map.getOrDefault(\"radius\",\"0\")),\n                    color, layer\n                );\n            case \"triangle\":\n                return new Triangle(\n                    Double.parseDouble(map.getOrDefault(\"a\",\"0\")),\n                    Double.parseDouble(map.getOrDefault(\"b\",\"0\")),\n                    Double.parseDouble(map.getOrDefault(\"c\",\"0\")),\n                    color, layer\n                );\n            case \"cube\":\n                return new Cube(\n                    Double.parseDouble(map.getOrDefault(\"edge\",\"0\")),\n                    color, layer\n                );\n            case \"sphere\":\n                return new Sphere(\n                    Double.parseDouble(map.getOrDefault(\"radius\",\"0\")),\n                    color, layer\n                );\n            default:\n                throw new IllegalArgumentException(\"Unknown shape type: \" + type);\n        }\n    }\n}\n\nclass ShapePricing {\n    private final MetricCalculator calc = new MetricCalculator();\n\n    public double price(Shape shape) {\n        switch (shape.getKind()) {\n            case RECTANGLE: {\n                double area = calc.compute(shape, Metric.AREA);\n                return 0.5 * area + shape.getLayer() * 2;\n            }\n            case CIRCLE: {\n                double area = calc.compute(shape, Metric.AREA);\n                double diag = calc.compute(shape, Metric.DIAGONAL);\n                return 0.6 * area + 0.1 * diag;\n            }\n            case TRIANGLE: {\n                double per = calc.compute(shape, Metric.PERIMETER);\n                return per * 0.8;\n            }\n            case CUBE: {\n                double vol = calc.compute(shape, Metric.VOLUME);\n                return 1.2 * vol;\n            }\n            case SPHERE: {\n                double vol = calc.compute(shape, Metric.VOLUME);\n                return 1.0 * vol + 10;\n            }\n            default: return 0;\n        }\n    }\n}\n\nclass LegendBuilder {\n    public String legendSymbol(Shape shape) {\n        switch (shape.getKind()) {\n            case RECTANGLE: return \"â­\";\n            case CIRCLE:    return \"â¯\";\n            case TRIANGLE:  return \"â³\";\n            case CUBE:      return \"â¬\";\n            case SPHERE:    return \"â¯\";\n            default:        return \"?\";\n        }\n    }\n}\n\nclass CollisionEngine {\n    public BoundingBox boundingBox(Shape shape) {\n        switch (shape.getKind()) {\n            case RECTANGLE: {\n                Rectangle r = (Rectangle) shape;\n                return new BoundingBox(r.getWidth(), r.getHeight());\n            }\n            case CIRCLE: {\n                Circle c = (Circle) shape;\n                double d = 2 * c.getRadius();\n                return new BoundingBox(d, d);\n            }\n            case TRIANGLE: {\n                Triangle t = (Triangle) shape;\n                // naive placeholder: longest side Ã (average of other sides)\n                double max = Math.max(t.getA(), Math.max(t.getB(), t.getC()));\n                double avg = (t.getA() + t.getB() + t.getC() - max) / 2.0;\n                return new BoundingBox(max, avg);\n            }\n            case CUBE: {\n                Cube cube = (Cube) shape;\n                return new BoundingBox(cube.getEdge(), cube.getEdge());\n            }\n            case SPHERE: {\n                Sphere s = (Sphere) shape;\n                double d = 2 * s.getRadius();\n                return new BoundingBox(d, d);\n            }\n            default: return new BoundingBox(0, 0);\n        }\n    }\n\n    public boolean overlaps(Shape a, Shape b) {\n        BoundingBox A = boundingBox(a);\n        BoundingBox B = boundingBox(b);\n        return (A.width * A.height) > 0 && (B.width * B.height) > 0;\n    }\n}\n\nclass ShapeReport {\n    private final MetricCalculator calc = new MetricCalculator();\n    private final ShapeSerializer ser = new ShapeSerializer();\n    private final ShapeRenderer rnd = new ShapeRenderer();\n    private final CollisionEngine col = new CollisionEngine();\n    private final ShapePricing price = new ShapePricing();\n    private final LegendBuilder legend = new LegendBuilder();\n\n    public String summarize(java.util.List<Shape> shapes) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"=== Shape Report (OCP-violating) ===\\n\");\n        for (Shape s : shapes) {\n            sb.append(\"ID \").append(s.getId())\n              .append(\" \").append(s.getKind())\n              .append(\" color=\").append(s.getColor())\n              .append(\" layer=\").append(s.getLayer()).append(\"\\n\");\n\n            sb.append(\"  CSV: \").append(ser.toCsvRow(s)).append(\"\\n\");\n            sb.append(\"  SVG: \").append(rnd.renderPseudoSvg(s)).append(\"\\n\");\n            sb.append(\"  Legend: \").append(legend.legendSymbol(s)).append(\"\\n\");\n\n            sb.append(\"  Metrics: \");\n            sb.append(\" area=\").append(calc.compute(s, Metric.AREA));\n            sb.append(\" perim=\").append(calc.compute(s, Metric.PERIMETER));\n            sb.append(\" diag=\").append(calc.compute(s, Metric.DIAGONAL));\n            if (s instanceof ThreeDShape) {\n                sb.append(\" vol=\").append(calc.compute(s, Metric.VOLUME));\n            }\n            sb.append(\"\\n\");\n\n            sb.append(\"  BBox: \").append(col.boundingBox(s)).append(\"\\n\");\n            sb.append(\"  Price: \").append(price.price(s)).append(\"\\n\\n\");\n        }\n        return sb.toString();\n    }\n}\n",
            "output": "import java.util.*;\nimport java.util.function.Function;\n\nabstract class Entity {\n    private static long NEXT_ID = 1;\n    private final long id;\n    protected Entity() { this.id = NEXT_ID++; }\n    public long getId() { return id; }\n}\n\nabstract class GraphicObject extends Entity {\n    private final String color;\n    private final int layer;\n    protected GraphicObject(String color, int layer) { this.color = color; this.layer = layer; }\n    public String getColor() { return color; }\n    public int getLayer() { return layer; }\n}\n\nenum ShapeKind { RECTANGLE, CIRCLE, TRIANGLE, CUBE, SPHERE }\n\nfinal class BoundingBox {\n    public final double width;\n    public final double height;\n    public BoundingBox(double width, double height) { this.width = width; this.height = height; }\n    @Override public String toString() { return \"BBox(\" + width + \"x\" + height + \")\"; }\n}\n\ninterface HasWidthHeight { double getWidth(); double getHeight(); }\ninterface HasRadius { double getRadius(); }\ninterface HasTriangleSides { double getA(); double getB(); double getC(); }\ninterface HasEdge { double getEdge(); }\n\nabstract class Shape extends GraphicObject {\n    private final ShapeKind kind;\n    protected Shape(ShapeKind kind, String color, int layer) { super(color, layer); this.kind = kind; }\n    public ShapeKind getKind() { return kind; }\n    public abstract boolean isValid();\n    public abstract String renderPseudoSvg();\n    public abstract String toCsvRow();\n    public abstract String legendSymbol();\n    public abstract BoundingBox boundingBox();\n    public abstract double price(MetricCalculator calc);\n}\n\nabstract class TwoDShape extends Shape {\n    protected TwoDShape(ShapeKind kind, String color, int layer) { super(kind, color, layer); }\n}\nabstract class ThreeDShape extends Shape {\n    protected ThreeDShape(ShapeKind kind, String color, int layer) { super(kind, color, layer); }\n}\n\nfinal class Rectangle extends TwoDShape implements HasWidthHeight {\n    private final double width, height;\n    public Rectangle(double width, double height, String color, int layer) { super(ShapeKind.RECTANGLE, color, layer); this.width = width; this.height = height; }\n    public double getWidth() { return width; }\n    public double getHeight() { return height; }\n    public boolean isValid() { return width > 0 && height > 0; }\n    public String renderPseudoSvg() { return \"<rect w=\\\"\" + width + \"\\\" h=\\\"\" + height + \"\\\" fill=\\\"\" + getColor() + \"\\\" layer=\\\"\" + getLayer() + \"\\\"/>\"; }\n    public String toCsvRow() { return \"rectangle,\" + width + \",\" + height + \",\" + getColor() + \",\" + getLayer(); }\n    public String legendSymbol() { return \"â­\"; }\n    public BoundingBox boundingBox() { return new BoundingBox(width, height); }\n    public double price(MetricCalculator calc) {\n        double area = calc.compute(this, \"area\");\n        return 0.5 * area + getLayer() * 2;\n    }\n}\n\nfinal class Circle extends TwoDShape implements HasRadius {\n    private final double radius;\n    public Circle(double radius, String color, int layer) { super(ShapeKind.CIRCLE, color, layer); this.radius = radius; }\n    public double getRadius() { return radius; }\n    public boolean isValid() { return radius > 0; }\n    public String renderPseudoSvg() { return \"<circle r=\\\"\" + radius + \"\\\" fill=\\\"\" + getColor() + \"\\\" layer=\\\"\" + getLayer() + \"\\\"/>\"; }\n    public String toCsvRow() { return \"circle,\" + radius + \",\" + getColor() + \",\" + getLayer(); }\n    public String legendSymbol() { return \"â¯\"; }\n    public BoundingBox boundingBox() { double d = 2 * radius; return new BoundingBox(d, d); }\n    public double price(MetricCalculator calc) {\n        double area = calc.compute(this, \"area\");\n        double diag = calc.compute(this, \"diagonal\");\n        return 0.6 * area + 0.1 * diag;\n    }\n}\n\nfinal class Triangle extends TwoDShape implements HasTriangleSides {\n    private final double a, b, c;\n    public Triangle(double a, double b, double c, String color, int layer) { super(ShapeKind.TRIANGLE, color, layer); this.a = a; this.b = b; this.c = c; }\n    public double getA() { return a; } public double getB() { return b; } public double getC() { return c; }\n    public boolean isValid() { return a > 0 && b > 0 && c > 0 && a + b > c && a + c > b && b + c > a; }\n    public String renderPseudoSvg() { return \"<polygon a=\\\"\" + a + \"\\\" b=\\\"\" + b + \"\\\" c=\\\"\" + c + \"\\\" fill=\\\"\" + getColor() + \"\\\" layer=\\\"\" + getLayer() + \"\\\"/>\"; }\n    public String toCsvRow() { return \"triangle,\" + a + \",\" + b + \",\" + c + \",\" + getColor() + \",\" + getLayer(); }\n    public String legendSymbol() { return \"â³\"; }\n    public BoundingBox boundingBox() { double max = Math.max(a, Math.max(b, c)); double avg = (a + b + c - max) / 2.0; return new BoundingBox(max, avg); }\n    public double price(MetricCalculator calc) {\n        double per = calc.compute(this, \"perimeter\");\n        return per * 0.8;\n    }\n}\n\nfinal class Cube extends ThreeDShape implements HasEdge {\n    private final double edge;\n    public Cube(double edge, String color, int layer) { super(ShapeKind.CUBE, color, layer); this.edge = edge; }\n    public double getEdge() { return edge; }\n    public boolean isValid() { return edge > 0; }\n    public String renderPseudoSvg() { return \"<cube edge=\\\"\" + edge + \"\\\" materialColor=\\\"\" + getColor() + \"\\\" layer=\\\"\" + getLayer() + \"\\\"/>\"; }\n    public String toCsvRow() { return \"cube,\" + edge + \",\" + getColor() + \",\" + getLayer(); }\n    public String legendSymbol() { return \"â¬\"; }\n    public BoundingBox boundingBox() { return new BoundingBox(edge, edge); }\n    public double price(MetricCalculator calc) {\n        double vol = calc.compute(this, \"volume\");\n        return 1.2 * vol;\n    }\n}\n\nfinal class Sphere extends ThreeDShape implements HasRadius {\n    private final double radius;\n    public Sphere(double radius, String color, int layer) { super(ShapeKind.SPHERE, color, layer); this.radius = radius; }\n    public double getRadius() { return radius; }\n    public boolean isValid() { return radius > 0; }\n    public String renderPseudoSvg() { return \"<sphere r=\\\"\" + radius + \"\\\" materialColor=\\\"\" + getColor() + \"\\\" layer=\\\"\" + getLayer() + \"\\\"/>\"; }\n    public String toCsvRow() { return \"sphere,\" + radius + \",\" + getColor() + \",\" + getLayer(); }\n    public String legendSymbol() { return \"â¯\"; }\n    public BoundingBox boundingBox() { double d = 2 * radius; return new BoundingBox(d, d); }\n    public double price(MetricCalculator calc) {\n        double vol = calc.compute(this, \"volume\");\n        return 1.0 * vol + 10;\n    }\n}\n\nfinal class RegisteredMetric {\n    private final String name;\n    private final Map<Class<?>, Function<Object, Double>> handlers = new LinkedHashMap<>();\n    public RegisteredMetric(String name) { this.name = name; }\n    public String name() { return name; }\n    public <T> RegisteredMetric on(Class<T> type, Function<T, Double> fn) { handlers.put(type, o -> fn.apply(type.cast(o))); return this; }\n    public double apply(Shape s) {\n        for (Map.Entry<Class<?>, Function<Object, Double>> e : handlers.entrySet()) {\n            if (e.getKey().isInstance(s)) return e.getValue().apply(s);\n        }\n        return 0;\n    }\n}\n\nfinal class MetricCalculator {\n    private final Map<String, RegisteredMetric> metrics = new HashMap<>();\n    public void register(RegisteredMetric metric) { metrics.put(metric.name(), metric); }\n    public double compute(Shape shape, String metricName) {\n        RegisteredMetric m = metrics.get(metricName);\n        if (m == null) throw new IllegalArgumentException(\"Unknown metric: \" + metricName);\n        return m.apply(shape);\n    }\n}\n\nfinal class ShapeValidator { public boolean isValid(Shape shape) { return shape.isValid(); } }\nfinal class ShapeRenderer { public String renderPseudoSvg(Shape shape) { return shape.renderPseudoSvg(); } }\nfinal class ShapeSerializer { public String toCsvRow(Shape shape) { return shape.toCsvRow(); } }\n\nfinal class ShapeFactory {\n    interface Creator { Shape create(Map<String,String> map, String color, int layer); }\n    private final Map<String, Creator> creators = new HashMap<>();\n    public void register(String type, Creator c) { creators.put(type.toLowerCase(), c); }\n    public Shape create(String spec) {\n        String[] parts = spec.split(\";\");\n        String type = parts[0].trim().toLowerCase();\n        Map<String,String> map = new HashMap<>();\n        for (int i = 1; i < parts.length; i++) {\n            String[] kv = parts[i].split(\"=\");\n            if (kv.length == 2) map.put(kv[0].trim().toLowerCase(), kv[1].trim());\n        }\n        String color = map.getOrDefault(\"color\", \"black\");\n        int layer = Integer.parseInt(map.getOrDefault(\"layer\", \"0\"));\n        Creator c = creators.get(type);\n        if (c == null) throw new IllegalArgumentException(\"Unknown shape type: \" + type);\n        return c.create(map, color, layer);\n    }\n}\n\nfinal class ShapePricing {\n    private final MetricCalculator calc;\n    public ShapePricing(MetricCalculator calc) { this.calc = calc; }\n    public double price(Shape shape) { return shape.price(calc); }\n}\n\nfinal class LegendBuilder { public String legendSymbol(Shape shape) { return shape.legendSymbol(); } }\n\nfinal class CollisionEngine {\n    public BoundingBox boundingBox(Shape shape) { return shape.boundingBox(); }\n    public boolean overlaps(Shape a, Shape b) {\n        BoundingBox A = boundingBox(a);\n        BoundingBox B = boundingBox(b);\n        return (A.width * A.height) > 0 && (B.width * B.height) > 0;\n    }\n}\n\nfinal class ShapeReport {\n    private final MetricCalculator calc;\n    private final ShapeSerializer ser = new ShapeSerializer();\n    private final ShapeRenderer rnd = new ShapeRenderer();\n    private final CollisionEngine col = new CollisionEngine();\n    private final ShapePricing price;\n    private final LegendBuilder legend = new LegendBuilder();\n    public ShapeReport(MetricCalculator calc) { this.calc = calc; this.price = new ShapePricing(calc); }\n    public String summarize(List<Shape> shapes) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"=== Shape Report (OCP-violating) ===\\n\");\n        for (Shape s : shapes) {\n            sb.append(\"ID \").append(s.getId())\n              .append(\" \").append(s.getKind())\n              .append(\" color=\").append(s.getColor())\n              .append(\" layer=\").append(s.getLayer()).append(\"\\n\");\n\n            sb.append(\"  CSV: \").append(ser.toCsvRow(s)).append(\"\\n\");\n            sb.append(\"  SVG: \").append(rnd.renderPseudoSvg(s)).append(\"\\n\");\n            sb.append(\"  Legend: \").append(legend.legendSymbol(s)).append(\"\\n\");\n\n            sb.append(\"  Metrics: \");\n            sb.append(\" area=\").append(calc.compute(s, \"area\"));\n            sb.append(\" perim=\").append(calc.compute(s, \"perimeter\"));\n            sb.append(\" diag=\").append(calc.compute(s, \"diagonal\"));\n            if (s instanceof ThreeDShape) {\n                sb.append(\" vol=\").append(calc.compute(s, \"volume\"));\n            }\n            sb.append(\"\\n\");\n\n            sb.append(\"  BBox: \").append(col.boundingBox(s)).append(\"\\n\");\n            sb.append(\"  Price: \").append(price.price(s)).append(\"\\n\\n\");\n        }\n        return sb.toString();\n    }\n}\n",
            "level": "HARD",
            "language": "JAVA",
            "violation": "OCP"
        },
        {
            "input": "import java.util.*;\n\nenum CharacterType { WARRIOR, MAGE, ARCHER, ROGUE }\nenum SkillType { BASIC, SPECIAL, SUPPORT }\nenum WeaponType { SWORD, STAFF, BOW, DAGGER }\nenum PetType { WOLF, FAIRY, HAWK, SHADOW_CAT }\n\nclass Stats {\n    int hp, mp, atk, mag, def, res, spd, crit;\n    Stats(int hp,int mp,int atk,int mag,int def,int res,int spd,int crit){\n        this.hp=hp; this.mp=mp; this.atk=atk; this.mag=mag; this.def=def; this.res=res; this.spd=spd; this.crit=crit;\n    }\n    Stats copy(){ return new Stats(hp,mp,atk,mag,def,res,spd,crit); }\n}\n\nclass Skill {\n    final String name; final SkillType type; final int cost;\n    Skill(String n, SkillType t, int c){ name=n; type=t; cost=c; }\n}\n\nclass Weapon {\n    final String name; final WeaponType type; final int power;\n    Weapon(String n, WeaponType t, int p){ name=n; type=t; power=p; }\n}\n\nclass Pet {\n    final String name; final PetType type; final int bond;\n    Pet(String n, PetType t, int b){ name=n; type=t; bond=b; }\n}\n\nclass Enemy {\n    final String name; final Stats stats;\n    Enemy(String n, Stats s){ name=n; stats=s; }\n}\n\nclass GameCharacter {\n    final String name; final CharacterType type; final int level; final Stats stats;\n    final List<Skill> skills; final Weapon weapon; final Pet pet;\n    GameCharacter(String n, CharacterType t, int lvl, Stats s, List<Skill> k, Weapon w, Pet p){\n        name=n; type=t; level=lvl; stats=s; skills=k; weapon=w; pet=p;\n    }\n}\n\nclass PetBoostSystem {\n    int offenseBoost(GameCharacter c){\n        switch(c.pet.type){\n            case WOLF: return (int)(c.stats.atk * Math.min(0.25, 0.05 + c.pet.bond/100.0));\n            case FAIRY: return (int)(c.stats.mag * Math.min(0.25, 0.05 + c.pet.bond/120.0));\n            case HAWK: return c.stats.spd/3 + c.pet.bond/6;\n            case SHADOW_CAT: return 5 + c.pet.bond/5;\n        }\n        return 0;\n    }\n    int defenseBoost(GameCharacter c){\n        switch(c.pet.type){\n            case WOLF: return c.stats.def/6;\n            case FAIRY: return c.stats.res/4;\n            case HAWK: return c.stats.spd/6;\n            case SHADOW_CAT: return 3;\n        }\n        return 0;\n    }\n    boolean petAssist(GameCharacter c){\n        switch(c.pet.type){\n            case WOLF: return new Random().nextInt(100) < Math.min(35, 10 + c.pet.bond/3);\n            case FAIRY: return new Random().nextInt(100) < Math.min(40, 15 + c.pet.bond/2);\n            case HAWK: return new Random().nextInt(100) < Math.min(30, 8 + c.pet.bond/4);\n            case SHADOW_CAT: return new Random().nextInt(100) < Math.min(45, 12 + c.pet.bond/2);\n        }\n        return false;\n    }\n    int petAssistDamage(GameCharacter c){\n        switch(c.pet.type){\n            case WOLF: return 6 + c.pet.bond/4;\n            case FAIRY: return 4 + c.pet.bond/5;\n            case HAWK: return 5 + c.pet.bond/6;\n            case SHADOW_CAT: return 7 + c.pet.bond/5;\n        }\n        return 0;\n    }\n    int petAssistHeal(GameCharacter c){\n        switch(c.pet.type){\n            case FAIRY: return 8 + c.pet.bond/3;\n            default: return 0;\n        }\n    }\n}\n\nclass WeaponRuleSet {\n    int applyWeapon(GameCharacter c, int base){\n        switch(c.weapon.type){\n            case SWORD: return base + c.weapon.power + c.stats.atk/4;\n            case STAFF: return base + c.weapon.power/2 + c.stats.mag/2;\n            case BOW: return base + c.weapon.power + c.stats.spd/3;\n            case DAGGER: return base + c.weapon.power + c.stats.spd/2;\n        }\n        return base;\n    }\n    int critChance(GameCharacter c){\n        switch(c.weapon.type){\n            case SWORD: return 8 + c.stats.crit;\n            case STAFF: return 5 + c.stats.crit/2;\n            case BOW: return 15 + c.stats.crit;\n            case DAGGER: return 18 + c.stats.crit;\n        }\n        return 0;\n    }\n}\n\nclass DamageCalculator {\n    final Random rng = new Random();\n    final WeaponRuleSet wr = new WeaponRuleSet();\n    final PetBoostSystem pets = new PetBoostSystem();\n\n    int calc(GameCharacter c, Skill s, Enemy e){\n        int base;\n        switch(c.type){\n            case WARRIOR:\n                base = (int)(c.stats.atk * (1.1 + c.level*0.03)) - e.stats.def/3;\n                if(s.type==SkillType.SPECIAL) base += 12;\n                break;\n            case MAGE:\n                base = c.stats.mag*2 + (s.type==SkillType.SPECIAL?18:0) - e.stats.res/2;\n                break;\n            case ARCHER:\n                base = c.stats.atk + c.stats.spd/2 + (s.type==SkillType.SPECIAL?10:0) - e.stats.def/4;\n                break;\n            case ROGUE:\n                base = c.stats.atk + c.stats.spd + (s.type==SkillType.SPECIAL?14:0) - e.stats.def/5;\n                break;\n            default:\n                base = 0;\n        }\n        base = wr.applyWeapon(c, base);\n        base += pets.offenseBoost(c);\n        if (pets.petAssist(c)) base += pets.petAssistDamage(c);\n        int critChance = wr.critChance(c) + (c.type==CharacterType.ARCHER?10:0);\n        if (rng.nextInt(100) < critChance) base *= 2;\n        return Math.max(0, base);\n    }\n}\n\nclass HealCalculator {\n    final PetBoostSystem pets = new PetBoostSystem();\n    int heal(GameCharacter c, Skill s){\n        int amt;\n        switch(c.type){\n            case WARRIOR: amt = c.stats.atk/3 + 6; break;\n            case MAGE: amt = c.stats.mag + 14; break;\n            case ARCHER: amt = c.stats.atk/4 + c.stats.spd/5; break;\n            case ROGUE: amt = c.stats.atk/2; break;\n            default: amt = 0;\n        }\n        if (s.type==SkillType.SPECIAL) amt += 6;\n        amt += pets.defenseBoost(c)/2 + pets.petAssistHeal(c);\n        return Math.max(0, amt);\n    }\n}\n\nclass LootCalculator {\n    int gold(GameCharacter c, Enemy e){\n        switch(c.type){\n            case WARRIOR: return 10 + c.level + e.stats.def/5;\n            case MAGE: return 9 + c.level*2 + e.stats.res/4;\n            case ARCHER: return 11 + c.level + e.stats.def/6;\n            case ROGUE: return 14 + c.level;\n        }\n        return 0;\n    }\n}\n\nclass TargetingSystem {\n    Enemy pick(List<Enemy> enemies){\n        Enemy t = enemies.get(0);\n        for(Enemy e: enemies) if(e.stats.hp < t.stats.hp) t=e;\n        return t;\n    }\n}\n\nclass SkillSelector {\n    Skill choose(GameCharacter c){\n        for(Skill s: c.skills) if(s.type!=SkillType.BASIC) return s;\n        return c.skills.get(0);\n    }\n}\n\nclass TurnEngine {\n    final DamageCalculator dmg=new DamageCalculator();\n    final HealCalculator healCalc=new HealCalculator();\n    final LootCalculator loot=new LootCalculator();\n    final TargetingSystem targeting=new TargetingSystem();\n    final SkillSelector selector=new SkillSelector();\n\n    void turn(List<GameCharacter> party, List<Enemy> enemies){\n        for(GameCharacter c: party){\n            Skill s = selector.choose(c);\n            if(s.type==SkillType.SUPPORT){\n                int h = healCalc.heal(c,s);\n                c.stats.hp += h;\n                continue;\n            }\n            Enemy target = targeting.pick(enemies);\n            int d = dmg.calc(c,s,target);\n            target.stats.hp = Math.max(0, target.stats.hp - d);\n        }\n    }\n    int totalGold(List<GameCharacter> party, Enemy e){\n        int g=0; for(GameCharacter c: party) g+=loot.gold(c,e); return g;\n    }\n}",
            "output": "import java.util.*;\n\nenum CharacterType { WARRIOR, MAGE, ARCHER, ROGUE }\nenum SkillType { BASIC, SPECIAL, SUPPORT }\nenum WeaponType { SWORD, STAFF, BOW, DAGGER }\nenum PetType { WOLF, FAIRY, HAWK, SHADOW_CAT }\n\nclass Stats {\n    int hp, mp, atk, mag, def, res, spd, crit;\n    Stats(int hp,int mp,int atk,int mag,int def,int res,int spd,int crit){\n        this.hp=hp; this.mp=mp; this.atk=atk; this.mag=mag; this.def=def; this.res=res; this.spd=spd; this.crit=crit;\n    }\n    Stats copy(){ return new Stats(hp,mp,atk,mag,def,res,spd,crit); }\n}\n\nclass Skill {\n    final String name; final SkillType type; final int cost;\n    Skill(String n, SkillType t, int c){ name=n; type=t; cost=c; }\n}\n\nclass Weapon {\n    final String name; final WeaponType type; final int power;\n    Weapon(String n, WeaponType t, int p){ name=n; type=t; power=p; }\n}\n\nclass Pet {\n    final String name; final PetType type; final int bond;\n    Pet(String n, PetType t, int b){ name=n; type=t; bond=b; }\n}\n\nclass Enemy {\n    final String name; final Stats stats;\n    Enemy(String n, Stats s){ name=n; stats=s; }\n}\n\ninterface PetLogic {\n    int offenseBoost(GameCharacter c);\n    int defenseBoost(GameCharacter c);\n    boolean assist(GameCharacter c);\n    int assistDamage(GameCharacter c);\n    int assistHeal(GameCharacter c);\n}\n\nclass WolfPetLogic implements PetLogic {\n    public int offenseBoost(GameCharacter c){\n        return (int)(c.stats.atk * Math.min(0.25, 0.05 + c.pet.bond/100.0));\n    }\n    public int defenseBoost(GameCharacter c){\n        return c.stats.def/6;\n    }\n    public boolean assist(GameCharacter c){\n        return new Random().nextInt(100) < Math.min(35, 10 + c.pet.bond/3);\n    }\n    public int assistDamage(GameCharacter c){\n        return 6 + c.pet.bond/4;\n    }\n    public int assistHeal(GameCharacter c){\n        return 0;\n    }\n}\n\nclass FairyPetLogic implements PetLogic {\n    public int offenseBoost(GameCharacter c){\n        return (int)(c.stats.mag * Math.min(0.25, 0.05 + c.pet.bond/120.0));\n    }\n    public int defenseBoost(GameCharacter c){\n        return c.stats.res/4;\n    }\n    public boolean assist(GameCharacter c){\n        return new Random().nextInt(100) < Math.min(40, 15 + c.pet.bond/2);\n    }\n    public int assistDamage(GameCharacter c){\n        return 4 + c.pet.bond/5;\n    }\n    public int assistHeal(GameCharacter c){\n        return 8 + c.pet.bond/3;\n    }\n}\n\nclass HawkPetLogic implements PetLogic {\n    public int offenseBoost(GameCharacter c){\n        return c.stats.spd/3 + c.pet.bond/6;\n    }\n    public int defenseBoost(GameCharacter c){\n        return c.stats.spd/6;\n    }\n    public boolean assist(GameCharacter c){\n        return new Random().nextInt(100) < Math.min(30, 8 + c.pet.bond/4);\n    }\n    public int assistDamage(GameCharacter c){\n        return 5 + c.pet.bond/6;\n    }\n    public int assistHeal(GameCharacter c){\n        return 0;\n    }\n}\n\nclass ShadowCatPetLogic implements PetLogic {\n    public int offenseBoost(GameCharacter c){\n        return 5 + c.pet.bond/5;\n    }\n    public int defenseBoost(GameCharacter c){\n        return 3;\n    }\n    public boolean assist(GameCharacter c){\n        return new Random().nextInt(100) < Math.min(45, 12 + c.pet.bond/2);\n    }\n    public int assistDamage(GameCharacter c){\n        return 7 + c.pet.bond/5;\n    }\n    public int assistHeal(GameCharacter c){\n        return 0;\n    }\n}\n\nclass PetLogicRegistry {\n    private static final Map<PetType, PetLogic> map = new EnumMap<>(PetType.class);\n    static {\n        map.put(PetType.WOLF, new WolfPetLogic());\n        map.put(PetType.FAIRY, new FairyPetLogic());\n        map.put(PetType.HAWK, new HawkPetLogic());\n        map.put(PetType.SHADOW_CAT, new ShadowCatPetLogic());\n    }\n    static PetLogic of(PetType t){ return map.get(t); }\n}\n\ninterface WeaponLogic {\n    int applyWeapon(GameCharacter c, int base);\n    int critChance(GameCharacter c);\n}\n\nclass SwordLogic implements WeaponLogic {\n    public int applyWeapon(GameCharacter c, int base){\n        return base + c.weapon.power + c.stats.atk/4;\n    }\n    public int critChance(GameCharacter c){\n        return 8 + c.stats.crit;\n    }\n}\n\nclass StaffLogic implements WeaponLogic {\n    public int applyWeapon(GameCharacter c, int base){\n        return base + c.weapon.power/2 + c.stats.mag/2;\n    }\n    public int critChance(GameCharacter c){\n        return 5 + c.stats.crit/2;\n    }\n}\n\nclass BowLogic implements WeaponLogic {\n    public int applyWeapon(GameCharacter c, int base){\n        return base + c.weapon.power + c.stats.spd/3;\n    }\n    public int critChance(GameCharacter c){\n        return 15 + c.stats.crit;\n    }\n}\n\nclass DaggerLogic implements WeaponLogic {\n    public int applyWeapon(GameCharacter c, int base){\n        return base + c.weapon.power + c.stats.spd/2;\n    }\n    public int critChance(GameCharacter c){\n        return 18 + c.stats.crit;\n    }\n}\n\nclass WeaponLogicRegistry {\n    private static final Map<WeaponType, WeaponLogic> map = new EnumMap<>(WeaponType.class);\n    static {\n        map.put(WeaponType.SWORD, new SwordLogic());\n        map.put(WeaponType.STAFF, new StaffLogic());\n        map.put(WeaponType.BOW, new BowLogic());\n        map.put(WeaponType.DAGGER, new DaggerLogic());\n    }\n    static WeaponLogic of(WeaponType t){ return map.get(t); }\n}\n\ninterface RoleLogic {\n    int baseDamage(GameCharacter c, Skill s, Enemy e);\n    int baseHeal(GameCharacter c, Skill s);\n    int gold(GameCharacter c, Enemy e);\n    int extraCrit(GameCharacter c);\n}\n\nclass WarriorLogic implements RoleLogic {\n    public int baseDamage(GameCharacter c, Skill s, Enemy e){\n        int base = (int)(c.stats.atk * (1.1 + c.level*0.03)) - e.stats.def/3;\n        if(s.type==SkillType.SPECIAL) base += 12;\n        return base;\n    }\n    public int baseHeal(GameCharacter c, Skill s){\n        int amt = c.stats.atk/3 + 6;\n        if (s.type==SkillType.SPECIAL) amt += 6;\n        return amt;\n    }\n    public int gold(GameCharacter c, Enemy e){\n        return 10 + c.level + e.stats.def/5;\n    }\n    public int extraCrit(GameCharacter c){ return 0; }\n}\n\nclass MageLogic implements RoleLogic {\n    public int baseDamage(GameCharacter c, Skill s, Enemy e){\n        int base = c.stats.mag*2 + (s.type==SkillType.SPECIAL?18:0) - e.stats.res/2;\n        return base;\n    }\n    public int baseHeal(GameCharacter c, Skill s){\n        int amt = c.stats.mag + 14;\n        if (s.type==SkillType.SPECIAL) amt += 6;\n        return amt;\n    }\n    public int gold(GameCharacter c, Enemy e){\n        return 9 + c.level*2 + e.stats.res/4;\n    }\n    public int extraCrit(GameCharacter c){ return 0; }\n}\n\nclass ArcherLogic implements RoleLogic {\n    public int baseDamage(GameCharacter c, Skill s, Enemy e){\n        int base = c.stats.atk + c.stats.spd/2 + (s.type==SkillType.SPECIAL?10:0) - e.stats.def/4;\n        return base;\n    }\n    public int baseHeal(GameCharacter c, Skill s){\n        int amt = c.stats.atk/4 + c.stats.spd/5;\n        if (s.type==SkillType.SPECIAL) amt += 6;\n        return amt;\n    }\n    public int gold(GameCharacter c, Enemy e){\n        return 11 + c.level + e.stats.def/6;\n    }\n    public int extraCrit(GameCharacter c){ return 10; }\n}\n\nclass RogueLogic implements RoleLogic {\n    public int baseDamage(GameCharacter c, Skill s, Enemy e){\n        int base = c.stats.atk + c.stats.spd + (s.type==SkillType.SPECIAL?14:0) - e.stats.def/5;\n        return base;\n    }\n    public int baseHeal(GameCharacter c, Skill s){\n        int amt = c.stats.atk/2;\n        if (s.type==SkillType.SPECIAL) amt += 6;\n        return amt;\n    }\n    public int gold(GameCharacter c, Enemy e){\n        return 14 + c.level;\n    }\n    public int extraCrit(GameCharacter c){ return 0; }\n}\n\nclass RoleLogicRegistry {\n    private static final Map<CharacterType, RoleLogic> map = new EnumMap<>(CharacterType.class);\n    static {\n        map.put(CharacterType.WARRIOR, new WarriorLogic());\n        map.put(CharacterType.MAGE, new MageLogic());\n        map.put(CharacterType.ARCHER, new ArcherLogic());\n        map.put(CharacterType.ROGUE, new RogueLogic());\n    }\n    static RoleLogic of(CharacterType t){ return map.get(t); }\n}\n\nclass GameCharacter {\n    final String name; final CharacterType type; final int level; final Stats stats;\n    final List<Skill> skills; final Weapon weapon; final Pet pet;\n    GameCharacter(String n, CharacterType t, int lvl, Stats s, List<Skill> k, Weapon w, Pet p){\n        name=n; type=t; level=lvl; stats=s; skills=k; weapon=w; pet=p;\n    }\n}\n\nclass PetBoostSystem {\n    int offenseBoost(GameCharacter c){\n        return PetLogicRegistry.of(c.pet.type).offenseBoost(c);\n    }\n    int defenseBoost(GameCharacter c){\n        return PetLogicRegistry.of(c.pet.type).defenseBoost(c);\n    }\n    boolean petAssist(GameCharacter c){\n        return PetLogicRegistry.of(c.pet.type).assist(c);\n    }\n    int petAssistDamage(GameCharacter c){\n        return PetLogicRegistry.of(c.pet.type).assistDamage(c);\n    }\n    int petAssistHeal(GameCharacter c){\n        return PetLogicRegistry.of(c.pet.type).assistHeal(c);\n    }\n}\n\nclass WeaponRuleSet {\n    int applyWeapon(GameCharacter c, int base){\n        return WeaponLogicRegistry.of(c.weapon.type).applyWeapon(c, base);\n    }\n    int critChance(GameCharacter c){\n        return WeaponLogicRegistry.of(c.weapon.type).critChance(c);\n    }\n}\n\nclass RoleRuleSet {\n    int baseDamage(GameCharacter c, Skill s, Enemy e){\n        return RoleLogicRegistry.of(c.type).baseDamage(c, s, e);\n    }\n    int baseHeal(GameCharacter c, Skill s){\n        return RoleLogicRegistry.of(c.type).baseHeal(c, s);\n    }\n    int gold(GameCharacter c, Enemy e){\n        return RoleLogicRegistry.of(c.type).gold(c, e);\n    }\n    int extraCrit(GameCharacter c){\n        return RoleLogicRegistry.of(c.type).extraCrit(c);\n    }\n}\n\nclass DamageCalculator {\n    final Random rng = new Random();\n    final WeaponRuleSet wr = new WeaponRuleSet();\n    final PetBoostSystem pets = new PetBoostSystem();\n    final RoleRuleSet roles = new RoleRuleSet();\n\n    int calc(GameCharacter c, Skill s, Enemy e){\n        int base = roles.baseDamage(c, s, e);\n        base = wr.applyWeapon(c, base);\n        base += pets.offenseBoost(c);\n        if (pets.petAssist(c)) base += pets.petAssistDamage(c);\n        int critChance = wr.critChance(c) + roles.extraCrit(c);\n        if (rng.nextInt(100) < critChance) base *= 2;\n        return Math.max(0, base);\n    }\n}\n\nclass HealCalculator {\n    final PetBoostSystem pets = new PetBoostSystem();\n    final RoleRuleSet roles = new RoleRuleSet();\n    int heal(GameCharacter c, Skill s){\n        int amt = roles.baseHeal(c, s);\n        amt += pets.defenseBoost(c)/2 + pets.petAssistHeal(c);\n        return Math.max(0, amt);\n    }\n}\n\nclass LootCalculator {\n    final RoleRuleSet roles = new RoleRuleSet();\n    int gold(GameCharacter c, Enemy e){\n        return roles.gold(c, e);\n    }\n}\n\nclass TargetingSystem {\n    Enemy pick(List<Enemy> enemies){\n        Enemy t = enemies.get(0);\n        for(Enemy e: enemies) if(e.stats.hp < t.stats.hp) t=e;\n        return t;\n    }\n}\n\nclass SkillSelector {\n    Skill choose(GameCharacter c){\n        for(Skill s: c.skills) if(s.type!=SkillType.BASIC) return s;\n        return c.skills.get(0);\n    }\n}\n\nclass TurnEngine {\n    final DamageCalculator dmg=new DamageCalculator();\n    final HealCalculator healCalc=new HealCalculator();\n    final LootCalculator loot=new LootCalculator();\n    final TargetingSystem targeting=new TargetingSystem();\n    final SkillSelector selector=new SkillSelector();\n\n    void turn(List<GameCharacter> party, List<Enemy> enemies){\n        for(GameCharacter c: party){\n            Skill s = selector.choose(c);\n            if(s.type==SkillType.SUPPORT){\n                int h = healCalc.heal(c,s);\n                c.stats.hp += h;\n                continue;\n            }\n            Enemy target = targeting.pick(enemies);\n            int d = dmg.calc(c,s,target);\n            target.stats.hp = Math.max(0, target.stats.hp - d);\n        }\n    }\n    int totalGold(List<GameCharacter> party, Enemy e){\n        int g=0; for(GameCharacter c: party) g+=loot.gold(c,e); return g;\n    }\n}\n",
            "level": "HARD",
            "language": "JAVA",
            "violation": "OCP"
        },
        {
            "input": "import java.util.*;\n\nenum FoodType { BURGER, FRIES, PIZZA, DRINK, SALAD, DESSERT }\nenum Size { SMALL, MEDIUM, LARGE }\n\nclass FoodItem {\n    private final String name;\n    private final FoodType type;\n    private final Size size;\n    private final Set<String> extras;\n\n    public FoodItem(String name, FoodType type, Size size, Set<String> extras) {\n        this.name = name; this.type = type; this.size = size; this.extras = extras == null ? new HashSet<>() : extras;\n    }\n    public String getName() { return name; }\n    public FoodType getType() { return type; }\n    public Size getSize() { return size; }\n    public Set<String> getExtras() { return extras; }\n}\n\nclass Order {\n    private final String customer;\n    private final List<FoodItem> items = new ArrayList<>();\n    public Order(String customer) { this.customer = customer; }\n    public void add(FoodItem item) { items.add(item); }\n    public List<FoodItem> items() { return items; }\n    public String customer() { return customer; }\n}\n\nclass PriceCalculator {\n    public double price(FoodItem item) {\n        switch (item.getType()) {\n            case BURGER:\n                switch (item.getSize()) {\n                    case SMALL: return 5.49;\n                    case MEDIUM: return 6.49;\n                    default: return 7.49;\n                }\n            case FRIES:\n                switch (item.getSize()) {\n                    case SMALL: return 1.99;\n                    case MEDIUM: return 2.49;\n                    default: return 2.99;\n                }\n            case PIZZA:\n                switch (item.getSize()) {\n                    case SMALL: return 7.99;\n                    case MEDIUM: return 9.99;\n                    default: return 12.49;\n                }\n            case DRINK:\n                switch (item.getSize()) {\n                    case SMALL: return 1.29;\n                    case MEDIUM: return 1.49;\n                    default: return 1.79;\n                }\n            case SALAD:\n                switch (item.getSize()) {\n                    case SMALL: return 4.49;\n                    case MEDIUM: return 5.49;\n                    default: return 6.49;\n                }\n            case DESSERT:\n                switch (item.getSize()) {\n                    case SMALL: return 2.99;\n                    case MEDIUM: return 3.49;\n                    default: return 3.99;\n                }\n            default:\n                throw new IllegalArgumentException(\"Unknown type\");\n        }\n    }\n}\n\nclass TaxCalculator {\n    public double taxFor(FoodItem item) {\n        switch (item.getType()) {\n            case DRINK: return 0.10;\n            case DESSERT: return 0.08;\n            case PIZZA: return 0.06;\n            default: return 0.05;\n        }\n    }\n}\n\nclass NutritionCalculator {\n    public int calories(FoodItem item) {\n        switch (item.getType()) {\n            case BURGER:\n                switch (item.getSize()) {\n                    case SMALL: return 480;\n                    case MEDIUM: return 650;\n                    default: return 820;\n                }\n            case FRIES:\n                switch (item.getSize()) {\n                    case SMALL: return 220;\n                    case MEDIUM: return 330;\n                    default: return 440;\n                }\n            case PIZZA:\n                switch (item.getSize()) {\n                    case SMALL: return 700;\n                    case MEDIUM: return 950;\n                    default: return 1200;\n                }\n            case DRINK:\n                switch (item.getSize()) {\n                    case SMALL: return 110;\n                    case MEDIUM: return 160;\n                    default: return 210;\n                }\n            case SALAD:\n                switch (item.getSize()) {\n                    case SMALL: return 180;\n                    case MEDIUM: return 260;\n                    default: return 340;\n                }\n            case DESSERT:\n                switch (item.getSize()) {\n                    case SMALL: return 250;\n                    case MEDIUM: return 320;\n                    default: return 390;\n                }\n            default:\n                return 0;\n        }\n    }\n}\n\nclass PromotionEngine {\n    public double discount(FoodItem item) {\n        switch (item.getType()) {\n            case BURGER: return item.getExtras().contains(\"extra-cheese\") ? 0.50 : 0.0;\n            case FRIES: return item.getSize() == Size.LARGE ? 0.20 : 0.0;\n            case DRINK: return item.getExtras().contains(\"no-ice\") ? 0.10 : 0.0;\n            case SALAD: return item.getExtras().contains(\"chicken\") ? 0.30 : 0.0;\n            case PIZZA: return item.getExtras().contains(\"pepperoni\") ? 0.40 : 0.0;\n            case DESSERT: return 0.0;\n            default: return 0.0;\n        }\n    }\n}\n\nclass KitchenStationRouter {\n    public String station(FoodItem item) {\n        switch (item.getType()) {\n            case BURGER: return \"Grill\";\n            case FRIES: return \"Fryer\";\n            case PIZZA: return \"Oven\";\n            case DRINK: return \"Beverage\";\n            case SALAD: return \"Cold Prep\";\n            case DESSERT: return \"Dessert Bar\";\n            default: return \"Unknown\";\n        }\n    }\n}\n\nclass InventoryManager {\n    private final Map<String, Integer> stock = new HashMap<>();\n    public InventoryManager() {\n        stock.put(\"bun\", 50); stock.put(\"patty\", 50); stock.put(\"potato\", 80);\n        stock.put(\"dough\", 30); stock.put(\"soda\", 100); stock.put(\"greens\", 40); stock.put(\"dessertBase\", 30);\n    }\n    public boolean reserve(FoodItem item) {\n        switch (item.getType()) {\n            case BURGER: return take(\"bun\",1) && take(\"patty\",1);\n            case FRIES: return take(\"potato\",2);\n            case PIZZA: return take(\"dough\",1);\n            case DRINK: return take(\"soda\",1);\n            case SALAD: return take(\"greens\",1);\n            case DESSERT: return take(\"dessertBase\",1);\n            default: return false;\n        }\n    }\n    private boolean take(String key, int qty) {\n        int have = stock.getOrDefault(key,0);\n        if (have < qty) return false;\n        stock.put(key, have - qty);\n        return true;\n    }\n    public Map<String,Integer> getStock(){ return Collections.unmodifiableMap(stock); }\n}\n\nclass Chef {\n    public void prepare(FoodItem item) {\n        switch (item.getType()) {\n            case BURGER: System.out.println(\"Chef grills patty and assembles burger\"); break;\n            case FRIES: System.out.println(\"Chef drops fries in fryer\"); break;\n            case PIZZA: System.out.println(\"Chef stretches dough and bakes pizza\"); break;\n            case DRINK: System.out.println(\"Chef fills cup and lids drink\"); break;\n            case SALAD: System.out.println(\"Chef chops and tosses salad\"); break;\n            case DESSERT: System.out.println(\"Chef plates dessert\"); break;\n        }\n    }\n}\n\nclass Waiter {\n    public void take(Order order, FoodItem item) {\n        System.out.println(\"Waiter records item: \" + item.getName());\n        order.add(item);\n    }\n    public void serve(FoodItem item) {\n        switch (item.getType()) {\n            case BURGER: System.out.println(\"Waiter serves burger with napkins\"); break;\n            case FRIES: System.out.println(\"Waiter serves fries with ketchup\"); break;\n            case PIZZA: System.out.println(\"Waiter serves pizza with slicer\"); break;\n            case DRINK: System.out.println(\"Waiter serves drink with straw\"); break;\n            case SALAD: System.out.println(\"Waiter serves salad with dressing\"); break;\n            case DESSERT: System.out.println(\"Waiter serves dessert with spoon\"); break;\n        }\n    }\n}\n\nclass Cashier {\n    private final PriceCalculator prices = new PriceCalculator();\n    private final TaxCalculator taxes = new TaxCalculator();\n    private final PromotionEngine promos = new PromotionEngine();\n    public double total(Order order) {\n        double sum = 0.0;\n        for (FoodItem item : order.items()) {\n            double base = prices.price(item);\n            double discount = promos.discount(item);\n            double taxed = (base - discount) * (1.0 + taxes.taxFor(item));\n            sum += taxed;\n        }\n        return Math.round(sum * 100.0) / 100.0;\n    }\n}\n\nclass ReceiptPrinter {\n    private final PriceCalculator prices = new PriceCalculator();\n    private final TaxCalculator taxes = new TaxCalculator();\n    private final PromotionEngine promos = new PromotionEngine();\n    private final NutritionCalculator nutrition = new NutritionCalculator();\n    public void print(Order order) {\n        System.out.println(\"Customer: \" + order.customer());\n        for (FoodItem item : order.items()) {\n            double base = prices.price(item);\n            double discount = promos.discount(item);\n            double taxRate = taxes.taxFor(item);\n            int kcal = nutrition.calories(item);\n            System.out.println(item.getName() + \" (\" + item.getType() + \" \" + item.getSize() + \") base $\" + base + \" disc $\" + discount + \" tax \" + (int)(taxRate*100) + \"% kcal \" + kcal);\n        }\n    }\n}\n\nclass PackagingSelector {\n    public String packaging(FoodItem item) {\n        switch (item.getType()) {\n            case BURGER: return item.getSize()==Size.LARGE ? \"Clamshell XL\" : \"Clamshell\";\n            case FRIES: return item.getSize()==Size.LARGE ? \"Carton L\" : \"Carton\";\n            case PIZZA: return item.getSize()==Size.SMALL ? \"Box S\" : item.getSize()==Size.MEDIUM ? \"Box M\" : \"Box L\";\n            case DRINK: return item.getSize()==Size.LARGE ? \"Cup 24oz\" : item.getSize()==Size.MEDIUM ? \"Cup 16oz\" : \"Cup 12oz\";\n            case SALAD: return \"Bowl\";\n            case DESSERT: return \"Dessert Cup\";\n            default: return \"Generic\";\n        }\n    }\n}\n\nclass AllergyChecker {\n    public Set<String> allergens(FoodItem item) {\n        switch (item.getType()) {\n            case BURGER: return new HashSet<>(Arrays.asList(\"gluten\",\"dairy\"));\n            case FRIES: return new HashSet<>();\n            case PIZZA: return new HashSet<>(Arrays.asList(\"gluten\",\"dairy\"));\n            case DRINK: return new HashSet<>();\n            case SALAD: return item.getExtras().contains(\"chicken\") ? new HashSet<>(Arrays.asList(\"none\")) : new HashSet<>();\n            case DESSERT: return new HashSet<>(Arrays.asList(\"dairy\"));\n            default: return new HashSet<>();\n        }\n    }\n}\n\nclass DeliveryPlanner {\n    public String courier(FoodItem item) {\n        switch (item.getType()) {\n            case PIZZA: return \"Insulated Bag\";\n            case DRINK: return \"Cup Holder\";\n            case FRIES: return \"Thermal Pouch\";\n            case BURGER: return \"Standard Bag\";\n            case SALAD: return \"Cold Pack\";\n            case DESSERT: return \"Cold Sleeve\";\n            default: return \"Bag\";\n        }\n    }\n}\n\nclass ComboEngine {\n    public double comboDiscount(List<FoodItem> items) {\n        boolean hasBurger = items.stream().anyMatch(i -> i.getType()==FoodType.BURGER);\n        boolean hasFries = items.stream().anyMatch(i -> i.getType()==FoodType.FRIES);\n        boolean hasDrink = items.stream().anyMatch(i -> i.getType()==FoodType.DRINK);\n        boolean hasPizza = items.stream().anyMatch(i -> i.getType()==FoodType.PIZZA);\n        if (hasBurger && hasFries && hasDrink) return 1.00;\n        if (hasPizza && hasDrink) return 0.50;\n        return 0.0;\n    }\n}\n\nclass LoyaltyPointsCalculator {\n    public int points(FoodItem item) {\n        switch (item.getType()) {\n            case BURGER: return 12;\n            case FRIES: return 6;\n            case PIZZA: return 18;\n            case DRINK: return 4;\n            case SALAD: return 10;\n            case DESSERT: return 8;\n            default: return 0;\n        }\n    }\n}\n\nclass WasteTracker {\n    public int prepWasteGrams(FoodItem item) {\n        switch (item.getType()) {\n            case BURGER: return 15;\n            case FRIES: return 12;\n            case PIZZA: return 20;\n            case DRINK: return 3;\n            case SALAD: return 8;\n            case DESSERT: return 6;\n            default: return 0;\n        }\n    }\n}\n\nclass KitchenLoadBalancer {\n    public int stationLoadWeight(FoodItem item) {\n        switch (item.getType()) {\n            case BURGER: return 3;\n            case FRIES: return 2;\n            case PIZZA: return 4;\n            case DRINK: return 1;\n            case SALAD: return 2;\n            case DESSERT: return 2;\n            default: return 1;\n        }\n    }\n}\n\nclass QualityInspector {\n    public boolean pass(FoodItem item) {\n        switch (item.getType()) {\n            case BURGER: return !item.getExtras().contains(\"raw\");\n            case FRIES: return !item.getExtras().contains(\"soggy\");\n            case PIZZA: return !item.getExtras().contains(\"burnt\");\n            case DRINK: return !item.getExtras().contains(\"flat\");\n            case SALAD: return !item.getExtras().contains(\"wilted\");\n            case DESSERT: return !item.getExtras().contains(\"melted\");\n            default: return true;\n        }\n    }\n}\n\nclass CookingTimer {\n    public int seconds(FoodItem item) {\n        switch (item.getType()) {\n            case BURGER: return item.getSize()==Size.LARGE ? 420 : 360;\n            case FRIES: return item.getSize()==Size.LARGE ? 210 : 180;\n            case PIZZA: return item.getSize()==Size.LARGE ? 540 : 480;\n            case DRINK: return 30;\n            case SALAD: return 120;\n            case DESSERT: return 90;\n            default: return 60;\n        }\n    }\n}\n\nclass MenuAvailability {\n    public boolean availableNow(FoodItem item, int hour) {\n        switch (item.getType()) {\n            case BURGER: return true;\n            case FRIES: return true;\n            case PIZZA: return hour >= 11;\n            case DRINK: return true;\n            case SALAD: return hour >= 10 && hour <= 22;\n            case DESSERT: return hour >= 11 && hour <= 23;\n            default: return true;\n        }\n    }\n}\n\nclass SpicinessRegulator {\n    public int spiceLevel(FoodItem item) {\n        switch (item.getType()) {\n            case BURGER: return item.getExtras().contains(\"jalapeno\") ? 3 : 1;\n            case FRIES: return item.getExtras().contains(\"peri-peri\") ? 2 : 0;\n            case PIZZA: return item.getExtras().contains(\"pepperoni\") ? 2 : 1;\n            case DRINK: return 0;\n            case SALAD: return item.getExtras().contains(\"chili\") ? 2 : 0;\n            case DESSERT: return 0;\n            default: return 0;\n        }\n    }\n}\n\nclass UpsellEngine {\n    public String suggest(FoodItem item) {\n        switch (item.getType()) {\n            case BURGER: return \"Add Fries\";\n            case FRIES: return \"Add Drink\";\n            case PIZZA: return \"Add Dessert\";\n            case DRINK: return \"Add Burger\";\n            case SALAD: return \"Add Chicken\";\n            case DESSERT: return \"Add Coffee\";\n            default: return \"Add Deal\";\n        }\n    }\n}\n\n",
            "output": "import java.util.*;\n\nenum FoodType { BURGER, FRIES, PIZZA, DRINK, SALAD, DESSERT }\nenum Size { SMALL, MEDIUM, LARGE }\n\nclass FoodItem {\n    private final String name;\n    private final FoodType type;\n    private final Size size;\n    private final Set<String> extras;\n    private final FoodStrategy strategy;\n\n    public FoodItem(String name, FoodType type, Size size, Set<String> extras) {\n        this.name = name; \n        this.type = type; \n        this.size = size; \n        this.extras = extras == null ? new HashSet<>() : extras;\n        this.strategy = FoodStrategyFactory.create(type);\n    }\n    public String getName() { return name; }\n    public FoodType getType() { return type; }\n    public Size getSize() { return size; }\n    public Set<String> getExtras() { return extras; }\n    public FoodStrategy getStrategy() { return strategy; }\n}\n\nclass Order {\n    private final String customer;\n    private final List<FoodItem> items = new ArrayList<>();\n    public Order(String customer) { this.customer = customer; }\n    public void add(FoodItem item) { items.add(item); }\n    public List<FoodItem> items() { return items; }\n    public String customer() { return customer; }\n}\n\ninterface FoodStrategy {\n    double getPrice(Size size);\n    double getTaxRate();\n    int getCalories(Size size);\n    double getDiscount(FoodItem item);\n    String getStation();\n    boolean reserveInventory(Map<String, Integer> stock);\n    void prepare();\n    void serve();\n    String getPackaging(Size size);\n    Set<String> getAllergens(FoodItem item);\n    String getCourier();\n    int getLoyaltyPoints();\n    int getPrepWasteGrams();\n    int getStationLoadWeight();\n    boolean passQuality(FoodItem item);\n    int getCookingSeconds(Size size);\n    boolean isAvailable(int hour);\n    int getSpiceLevel(FoodItem item);\n    String getUpsellSuggestion();\n}\n\nabstract class BaseFoodStrategy implements FoodStrategy {\n    protected boolean takeFromStock(Map<String, Integer> stock, String key, int qty) {\n        int have = stock.getOrDefault(key, 0);\n        if (have < qty) return false;\n        stock.put(key, have - qty);\n        return true;\n    }\n}\n\nclass BurgerStrategy extends BaseFoodStrategy {\n    public double getPrice(Size size) {\n        switch (size) {\n            case SMALL: return 5.49;\n            case MEDIUM: return 6.49;\n            default: return 7.49;\n        }\n    }\n    public double getTaxRate() { return 0.05; }\n    public int getCalories(Size size) {\n        switch (size) {\n            case SMALL: return 480;\n            case MEDIUM: return 650;\n            default: return 820;\n        }\n    }\n    public double getDiscount(FoodItem item) {\n        return item.getExtras().contains(\"extra-cheese\") ? 0.50 : 0.0;\n    }\n    public String getStation() { return \"Grill\"; }\n    public boolean reserveInventory(Map<String, Integer> stock) {\n        return takeFromStock(stock, \"bun\", 1) && takeFromStock(stock, \"patty\", 1);\n    }\n    public void prepare() {\n        System.out.println(\"Chef grills patty and assembles burger\");\n    }\n    public void serve() {\n        System.out.println(\"Waiter serves burger with napkins\");\n    }\n    public String getPackaging(Size size) {\n        return size == Size.LARGE ? \"Clamshell XL\" : \"Clamshell\";\n    }\n    public Set<String> getAllergens(FoodItem item) {\n        return new HashSet<>(Arrays.asList(\"gluten\", \"dairy\"));\n    }\n    public String getCourier() { return \"Standard Bag\"; }\n    public int getLoyaltyPoints() { return 12; }\n    public int getPrepWasteGrams() { return 15; }\n    public int getStationLoadWeight() { return 3; }\n    public boolean passQuality(FoodItem item) {\n        return !item.getExtras().contains(\"raw\");\n    }\n    public int getCookingSeconds(Size size) {\n        return size == Size.LARGE ? 420 : 360;\n    }\n    public boolean isAvailable(int hour) { return true; }\n    public int getSpiceLevel(FoodItem item) {\n        return item.getExtras().contains(\"jalapeno\") ? 3 : 1;\n    }\n    public String getUpsellSuggestion() { return \"Add Fries\"; }\n}\n\nclass FriesStrategy extends BaseFoodStrategy {\n    public double getPrice(Size size) {\n        switch (size) {\n            case SMALL: return 1.99;\n            case MEDIUM: return 2.49;\n            default: return 2.99;\n        }\n    }\n    public double getTaxRate() { return 0.05; }\n    public int getCalories(Size size) {\n        switch (size) {\n            case SMALL: return 220;\n            case MEDIUM: return 330;\n            default: return 440;\n        }\n    }\n    public double getDiscount(FoodItem item) {\n        return item.getSize() == Size.LARGE ? 0.20 : 0.0;\n    }\n    public String getStation() { return \"Fryer\"; }\n    public boolean reserveInventory(Map<String, Integer> stock) {\n        return takeFromStock(stock, \"potato\", 2);\n    }\n    public void prepare() {\n        System.out.println(\"Chef drops fries in fryer\");\n    }\n    public void serve() {\n        System.out.println(\"Waiter serves fries with ketchup\");\n    }\n    public String getPackaging(Size size) {\n        return size == Size.LARGE ? \"Carton L\" : \"Carton\";\n    }\n    public Set<String> getAllergens(FoodItem item) {\n        return new HashSet<>();\n    }\n    public String getCourier() { return \"Thermal Pouch\"; }\n    public int getLoyaltyPoints() { return 6; }\n    public int getPrepWasteGrams() { return 12; }\n    public int getStationLoadWeight() { return 2; }\n    public boolean passQuality(FoodItem item) {\n        return !item.getExtras().contains(\"soggy\");\n    }\n    public int getCookingSeconds(Size size) {\n        return size == Size.LARGE ? 210 : 180;\n    }\n    public boolean isAvailable(int hour) { return true; }\n    public int getSpiceLevel(FoodItem item) {\n        return item.getExtras().contains(\"peri-peri\") ? 2 : 0;\n    }\n    public String getUpsellSuggestion() { return \"Add Drink\"; }\n}\n\nclass PizzaStrategy extends BaseFoodStrategy {\n    public double getPrice(Size size) {\n        switch (size) {\n            case SMALL: return 7.99;\n            case MEDIUM: return 9.99;\n            default: return 12.49;\n        }\n    }\n    public double getTaxRate() { return 0.06; }\n    public int getCalories(Size size) {\n        switch (size) {\n            case SMALL: return 700;\n            case MEDIUM: return 950;\n            default: return 1200;\n        }\n    }\n    public double getDiscount(FoodItem item) {\n        return item.getExtras().contains(\"pepperoni\") ? 0.40 : 0.0;\n    }\n    public String getStation() { return \"Oven\"; }\n    public boolean reserveInventory(Map<String, Integer> stock) {\n        return takeFromStock(stock, \"dough\", 1);\n    }\n    public void prepare() {\n        System.out.println(\"Chef stretches dough and bakes pizza\");\n    }\n    public void serve() {\n        System.out.println(\"Waiter serves pizza with slicer\");\n    }\n    public String getPackaging(Size size) {\n        return size == Size.SMALL ? \"Box S\" : size == Size.MEDIUM ? \"Box M\" : \"Box L\";\n    }\n    public Set<String> getAllergens(FoodItem item) {\n        return new HashSet<>(Arrays.asList(\"gluten\", \"dairy\"));\n    }\n    public String getCourier() { return \"Insulated Bag\"; }\n    public int getLoyaltyPoints() { return 18; }\n    public int getPrepWasteGrams() { return 20; }\n    public int getStationLoadWeight() { return 4; }\n    public boolean passQuality(FoodItem item) {\n        return !item.getExtras().contains(\"burnt\");\n    }\n    public int getCookingSeconds(Size size) {\n        return size == Size.LARGE ? 540 : 480;\n    }\n    public boolean isAvailable(int hour) { return hour >= 11; }\n    public int getSpiceLevel(FoodItem item) {\n        return item.getExtras().contains(\"pepperoni\") ? 2 : 1;\n    }\n    public String getUpsellSuggestion() { return \"Add Dessert\"; }\n}\n\nclass DrinkStrategy extends BaseFoodStrategy {\n    public double getPrice(Size size) {\n        switch (size) {\n            case SMALL: return 1.29;\n            case MEDIUM: return 1.49;\n            default: return 1.79;\n        }\n    }\n    public double getTaxRate() { return 0.10; }\n    public int getCalories(Size size) {\n        switch (size) {\n            case SMALL: return 110;\n            case MEDIUM: return 160;\n            default: return 210;\n        }\n    }\n    public double getDiscount(FoodItem item) {\n        return item.getExtras().contains(\"no-ice\") ? 0.10 : 0.0;\n    }\n    public String getStation() { return \"Beverage\"; }\n    public boolean reserveInventory(Map<String, Integer> stock) {\n        return takeFromStock(stock, \"soda\", 1);\n    }\n    public void prepare() {\n        System.out.println(\"Chef fills cup and lids drink\");\n    }\n    public void serve() {\n        System.out.println(\"Waiter serves drink with straw\");\n    }\n    public String getPackaging(Size size) {\n        return size == Size.LARGE ? \"Cup 24oz\" : size == Size.MEDIUM ? \"Cup 16oz\" : \"Cup 12oz\";\n    }\n    public Set<String> getAllergens(FoodItem item) {\n        return new HashSet<>();\n    }\n    public String getCourier() { return \"Cup Holder\"; }\n    public int getLoyaltyPoints() { return 4; }\n    public int getPrepWasteGrams() { return 3; }\n    public int getStationLoadWeight() { return 1; }\n    public boolean passQuality(FoodItem item) {\n        return !item.getExtras().contains(\"flat\");\n    }\n    public int getCookingSeconds(Size size) { return 30; }\n    public boolean isAvailable(int hour) { return true; }\n    public int getSpiceLevel(FoodItem item) { return 0; }\n    public String getUpsellSuggestion() { return \"Add Burger\"; }\n}\n\nclass SaladStrategy extends BaseFoodStrategy {\n    public double getPrice(Size size) {\n        switch (size) {\n            case SMALL: return 4.49;\n            case MEDIUM: return 5.49;\n            default: return 6.49;\n        }\n    }\n    public double getTaxRate() { return 0.05; }\n    public int getCalories(Size size) {\n        switch (size) {\n            case SMALL: return 180;\n            case MEDIUM: return 260;\n            default: return 340;\n        }\n    }\n    public double getDiscount(FoodItem item) {\n        return item.getExtras().contains(\"chicken\") ? 0.30 : 0.0;\n    }\n    public String getStation() { return \"Cold Prep\"; }\n    public boolean reserveInventory(Map<String, Integer> stock) {\n        return takeFromStock(stock, \"greens\", 1);\n    }\n    public void prepare() {\n        System.out.println(\"Chef chops and tosses salad\");\n    }\n    public void serve() {\n        System.out.println(\"Waiter serves salad with dressing\");\n    }\n    public String getPackaging(Size size) { return \"Bowl\"; }\n    public Set<String> getAllergens(FoodItem item) {\n        return item.getExtras().contains(\"chicken\") ? new HashSet<>(Arrays.asList(\"none\")) : new HashSet<>();\n    }\n    public String getCourier() { return \"Cold Pack\"; }\n    public int getLoyaltyPoints() { return 10; }\n    public int getPrepWasteGrams() { return 8; }\n    public int getStationLoadWeight() { return 2; }\n    public boolean passQuality(FoodItem item) {\n        return !item.getExtras().contains(\"wilted\");\n    }\n    public int getCookingSeconds(Size size) { return 120; }\n    public boolean isAvailable(int hour) {\n        return hour >= 10 && hour <= 22;\n    }\n    public int getSpiceLevel(FoodItem item) {\n        return item.getExtras().contains(\"chili\") ? 2 : 0;\n    }\n    public String getUpsellSuggestion() { return \"Add Chicken\"; }\n}\n\nclass DessertStrategy extends BaseFoodStrategy {\n    public double getPrice(Size size) {\n        switch (size) {\n            case SMALL: return 2.99;\n            case MEDIUM: return 3.49;\n            default: return 3.99;\n        }\n    }\n    public double getTaxRate() { return 0.08; }\n    public int getCalories(Size size) {\n        switch (size) {\n            case SMALL: return 250;\n            case MEDIUM: return 320;\n            default: return 390;\n        }\n    }\n    public double getDiscount(FoodItem item) { return 0.0; }\n    public String getStation() { return \"Dessert Bar\"; }\n    public boolean reserveInventory(Map<String, Integer> stock) {\n        return takeFromStock(stock, \"dessertBase\", 1);\n    }\n    public void prepare() {\n        System.out.println(\"Chef plates dessert\");\n    }\n    public void serve() {\n        System.out.println(\"Waiter serves dessert with spoon\");\n    }\n    public String getPackaging(Size size) { return \"Dessert Cup\"; }\n    public Set<String> getAllergens(FoodItem item) {\n        return new HashSet<>(Arrays.asList(\"dairy\"));\n    }\n    public String getCourier() { return \"Cold Sleeve\"; }\n    public int getLoyaltyPoints() { return 8; }\n    public int getPrepWasteGrams() { return 6; }\n    public int getStationLoadWeight() { return 2; }\n    public boolean passQuality(FoodItem item) {\n        return !item.getExtras().contains(\"melted\");\n    }\n    public int getCookingSeconds(Size size) { return 90; }\n    public boolean isAvailable(int hour) {\n        return hour >= 11 && hour <= 23;\n    }\n    public int getSpiceLevel(FoodItem item) { return 0; }\n    public String getUpsellSuggestion() { return \"Add Coffee\"; }\n}\n\nclass DefaultStrategy extends BaseFoodStrategy {\n    public double getPrice(Size size) { throw new IllegalArgumentException(\"Unknown type\"); }\n    public double getTaxRate() { return 0.05; }\n    public int getCalories(Size size) { return 0; }\n    public double getDiscount(FoodItem item) { return 0.0; }\n    public String getStation() { return \"Unknown\"; }\n    public boolean reserveInventory(Map<String, Integer> stock) { return false; }\n    public void prepare() { }\n    public void serve() { }\n    public String getPackaging(Size size) { return \"Generic\"; }\n    public Set<String> getAllergens(FoodItem item) { return new HashSet<>(); }\n    public String getCourier() { return \"Bag\"; }\n    public int getLoyaltyPoints() { return 0; }\n    public int getPrepWasteGrams() { return 0; }\n    public int getStationLoadWeight() { return 1; }\n    public boolean passQuality(FoodItem item) { return true; }\n    public int getCookingSeconds(Size size) { return 60; }\n    public boolean isAvailable(int hour) { return true; }\n    public int getSpiceLevel(FoodItem item) { return 0; }\n    public String getUpsellSuggestion() { return \"Add Deal\"; }\n}\n\nclass FoodStrategyFactory {\n    private static final Map<FoodType, FoodStrategy> strategies = new HashMap<>();\n    \n    static {\n        strategies.put(FoodType.BURGER, new BurgerStrategy());\n        strategies.put(FoodType.FRIES, new FriesStrategy());\n        strategies.put(FoodType.PIZZA, new PizzaStrategy());\n        strategies.put(FoodType.DRINK, new DrinkStrategy());\n        strategies.put(FoodType.SALAD, new SaladStrategy());\n        strategies.put(FoodType.DESSERT, new DessertStrategy());\n    }\n    \n    public static FoodStrategy create(FoodType type) {\n        return strategies.getOrDefault(type, new DefaultStrategy());\n    }\n}\n\nclass PriceCalculator {\n    public double price(FoodItem item) {\n        return item.getStrategy().getPrice(item.getSize());\n    }\n}\n\nclass TaxCalculator {\n    public double taxFor(FoodItem item) {\n        return item.getStrategy().getTaxRate();\n    }\n}\n\nclass NutritionCalculator {\n    public int calories(FoodItem item) {\n        return item.getStrategy().getCalories(item.getSize());\n    }\n}\n\nclass PromotionEngine {\n    public double discount(FoodItem item) {\n        return item.getStrategy().getDiscount(item);\n    }\n}\n\nclass KitchenStationRouter {\n    public String station(FoodItem item) {\n        return item.getStrategy().getStation();\n    }\n}\n\nclass InventoryManager {\n    private final Map<String, Integer> stock = new HashMap<>();\n    public InventoryManager() {\n        stock.put(\"bun\", 50); stock.put(\"patty\", 50); stock.put(\"potato\", 80);\n        stock.put(\"dough\", 30); stock.put(\"soda\", 100); stock.put(\"greens\", 40); stock.put(\"dessertBase\", 30);\n    }\n    public boolean reserve(FoodItem item) {\n        return item.getStrategy().reserveInventory(stock);\n    }\n    public Map<String,Integer> getStock(){ return Collections.unmodifiableMap(stock); }\n}\n\nclass Chef {\n    public void prepare(FoodItem item) {\n        item.getStrategy().prepare();\n    }\n}\n\nclass Waiter {\n    public void take(Order order, FoodItem item) {\n        System.out.println(\"Waiter records item: \" + item.getName());\n        order.add(item);\n    }\n    public void serve(FoodItem item) {\n        item.getStrategy().serve();\n    }\n}\n\nclass Cashier {\n    private final PriceCalculator prices = new PriceCalculator();\n    private final TaxCalculator taxes = new TaxCalculator();\n    private final PromotionEngine promos = new PromotionEngine();\n    public double total(Order order) {\n        double sum = 0.0;\n        for (FoodItem item : order.items()) {\n            double base = prices.price(item);\n            double discount = promos.discount(item);\n            double taxed = (base - discount) * (1.0 + taxes.taxFor(item));\n            sum += taxed;\n        }\n        return Math.round(sum * 100.0) / 100.0;\n    }\n}\n\nclass ReceiptPrinter {\n    private final PriceCalculator prices = new PriceCalculator();\n    private final TaxCalculator taxes = new TaxCalculator();\n    private final PromotionEngine promos = new PromotionEngine();\n    private final NutritionCalculator nutrition = new NutritionCalculator();\n    public void print(Order order) {\n        System.out.println(\"Customer: \" + order.customer());\n        for (FoodItem item : order.items()) {\n            double base = prices.price(item);\n            double discount = promos.discount(item);\n            double taxRate = taxes.taxFor(item);\n            int kcal = nutrition.calories(item);\n            System.out.println(item.getName() + \" (\" + item.getType() + \" \" + item.getSize() + \") base $\" + base + \" disc $\" + discount + \" tax \" + (int)(taxRate*100) + \"% kcal \" + kcal);\n        }\n    }\n}\n\nclass PackagingSelector {\n    public String packaging(FoodItem item) {\n        return item.getStrategy().getPackaging(item.getSize());\n    }\n}\n\nclass AllergyChecker {\n    public Set<String> allergens(FoodItem item) {\n        return item.getStrategy().getAllergens(item);\n    }\n}\n\nclass DeliveryPlanner {\n    public String courier(FoodItem item) {\n        return item.getStrategy().getCourier();\n    }\n}\n\nclass ComboEngine {\n    public double comboDiscount(List<FoodItem> items) {\n        boolean hasBurger = items.stream().anyMatch(i -> i.getType()==FoodType.BURGER);\n        boolean hasFries = items.stream().anyMatch(i -> i.getType()==FoodType.FRIES);\n        boolean hasDrink = items.stream().anyMatch(i -> i.getType()==FoodType.DRINK);\n        boolean hasPizza = items.stream().anyMatch(i -> i.getType()==FoodType.PIZZA);\n        if (hasBurger && hasFries && hasDrink) return 1.00;\n        if (hasPizza && hasDrink) return 0.50;\n        return 0.0;\n    }\n}\n\nclass LoyaltyPointsCalculator {\n    public int points(FoodItem item) {\n        return item.getStrategy().getLoyaltyPoints();\n    }\n}\n\nclass WasteTracker {\n    public int prepWasteGrams(FoodItem item) {\n        return item.getStrategy().getPrepWasteGrams();\n    }\n}\n\nclass KitchenLoadBalancer {\n    public int stationLoadWeight(FoodItem item) {\n        return item.getStrategy().getStationLoadWeight();\n    }\n}\n\nclass QualityInspector {\n    public boolean pass(FoodItem item) {\n        return item.getStrategy().passQuality(item);\n    }\n}\n\nclass CookingTimer {\n    public int seconds(FoodItem item) {\n        return item.getStrategy().getCookingSeconds(item.getSize());\n    }\n}\n\nclass MenuAvailability {\n    public boolean availableNow(FoodItem item, int hour) {\n        return item.getStrategy().isAvailable(hour);\n    }\n}\n\nclass SpicinessRegulator {\n    public int spiceLevel(FoodItem item) {\n        return item.getStrategy().getSpiceLevel(item);\n    }\n}\n\nclass UpsellEngine {\n    public String suggest(FoodItem item) {\n        return item.getStrategy().getUpsellSuggestion();\n    }\n}\n",
            "level": "HARD",
            "language": "JAVA",
            "violation": "OCP"
        },
        {
            "input": "import java.util.*;\n\nenum DeviceType { LIGHT, THERMOSTAT, DOOR_LOCK, CAMERA, SPRINKLER, BLIND, SPEAKER }\nenum RoomType { LIVING, KITCHEN, BEDROOM, BATHROOM, GARDEN, GARAGE }\nenum Mode { ECO, COMFORT, AWAY, NIGHT, PARTY }\nenum AlertType { INFO, WARN, CRITICAL }\n\nclass SmartDevice {\n    private final String id;\n    private final DeviceType type;\n    private Mode mode = Mode.ECO;\n    private boolean online = true;\n\n    public SmartDevice(String id, DeviceType type) { this.id = id; this.type = type; }\n    public String getId() { return id; }\n    public DeviceType getType() { return type; }\n    public Mode getMode() { return mode; }\n    public boolean isOnline() { return online; }\n    public void setMode(Mode m) { mode = m; }\n    public void setOnline(boolean o) { online = o; }\n}\n\nclass Room {\n    private final String name;\n    private final RoomType type;\n    private final List<SmartDevice> devices = new ArrayList<>();\n    public Room(String name, RoomType type) { this.name = name; this.type = type; }\n    public void add(SmartDevice d) { devices.add(d); }\n    public List<SmartDevice> getDevices() { return devices; }\n    public String getName() { return name; }\n    public RoomType getType() { return type; }\n}\n\nclass SmartHomeController {\n    public void turnOn(SmartDevice d) {\n        switch (d.getType()) {\n            case LIGHT: System.out.println(\"Light \" + d.getId() + \" ON\"); break;\n            case THERMOSTAT: System.out.println(\"Thermostat \" + d.getId() + \" heating\"); break;\n            case DOOR_LOCK: System.out.println(\"Lock \" + d.getId() + \" locked\"); break;\n            case CAMERA: System.out.println(\"Camera \" + d.getId() + \" recording\"); break;\n            case SPRINKLER: System.out.println(\"Sprinkler \" + d.getId() + \" watering\"); break;\n            case BLIND: System.out.println(\"Blind \" + d.getId() + \" open\"); break;\n            case SPEAKER: System.out.println(\"Speaker \" + d.getId() + \" playing\"); break;\n        }\n    }\n    public void turnOff(SmartDevice d) {\n        switch (d.getType()) {\n            case LIGHT: System.out.println(\"Light \" + d.getId() + \" OFF\"); break;\n            case THERMOSTAT: System.out.println(\"Thermostat \" + d.getId() + \" idle\"); break;\n            case DOOR_LOCK: System.out.println(\"Lock \" + d.getId() + \" secured\"); break;\n            case CAMERA: System.out.println(\"Camera \" + d.getId() + \" standby\"); break;\n            case SPRINKLER: System.out.println(\"Sprinkler \" + d.getId() + \" stopped\"); break;\n            case BLIND: System.out.println(\"Blind \" + d.getId() + \" closed\"); break;\n            case SPEAKER: System.out.println(\"Speaker \" + d.getId() + \" paused\"); break;\n        }\n    }\n    public void setMode(SmartDevice d, Mode m) {\n        d.setMode(m);\n        switch (d.getType()) {\n            case LIGHT: System.out.println(\"Light \" + d.getId() + \" -> \" + m); break;\n            case THERMOSTAT: System.out.println(\"Thermostat \" + d.getId() + \" -> \" + m); break;\n            case DOOR_LOCK: System.out.println(\"Lock \" + d.getId() + \" -> \" + m); break;\n            case CAMERA: System.out.println(\"Camera \" + d.getId() + \" -> \" + m); break;\n            case SPRINKLER: System.out.println(\"Sprinkler \" + d.getId() + \" -> \" + m); break;\n            case BLIND: System.out.println(\"Blind \" + d.getId() + \" -> \" + m); break;\n            case SPEAKER: System.out.println(\"Speaker \" + d.getId() + \" -> \" + m); break;\n        }\n    }\n    public double energyUsageKwh(SmartDevice d, int minutes) {\n        switch (d.getType()) {\n            case LIGHT: return 0.012 * minutes;\n            case THERMOSTAT: return 0.08 * minutes;\n            case DOOR_LOCK: return 0.0002 * minutes;\n            case CAMERA: return 0.01 * minutes;\n            case SPRINKLER: return 0.03 * minutes;\n            case BLIND: return minutes == 0 ? 0 : 0.001 * minutes;\n            case SPEAKER: return 0.015 * minutes;\n            default: return 0;\n        }\n    }\n}\n\nclass NotificationService {\n    public void push(SmartDevice d, AlertType t, String msg) {\n        switch (d.getType()) {\n            case LIGHT: System.out.println(\"[\" + t + \"] Light \" + d.getId() + \": \" + msg); break;\n            case THERMOSTAT: System.out.println(\"[\" + t + \"] Thermostat \" + d.getId() + \": \" + msg); break;\n            case DOOR_LOCK: System.out.println(\"[\" + t + \"] Lock \" + d.getId() + \": \" + msg); break;\n            case CAMERA: System.out.println(\"[\" + t + \"] Camera \" + d.getId() + \": \" + msg); break;\n            case SPRINKLER: System.out.println(\"[\" + t + \"] Sprinkler \" + d.getId() + \": \" + msg); break;\n            case BLIND: System.out.println(\"[\" + t + \"] Blind \" + d.getId() + \": \" + msg); break;\n            case SPEAKER: System.out.println(\"[\" + t + \"] Speaker \" + d.getId() + \": \" + msg); break;\n        }\n    }\n}\n\nclass DiagnosticsService {\n    public String health(SmartDevice d) {\n        switch (d.getType()) {\n            case LIGHT: return d.isOnline() ? \"OK\" : \"Bulb Offline\";\n            case THERMOSTAT: return d.isOnline() ? \"OK\" : \"Sensor Offline\";\n            case DOOR_LOCK: return d.isOnline() ? \"OK\" : \"Battery Low\";\n            case CAMERA: return d.isOnline() ? \"OK\" : \"Stream Error\";\n            case SPRINKLER: return d.isOnline() ? \"OK\" : \"Valve Error\";\n            case BLIND: return d.isOnline() ? \"OK\" : \"Motor Jam\";\n            case SPEAKER: return d.isOnline() ? \"OK\" : \"Audio Fault\";\n            default: return \"Unknown\";\n        }\n    }\n}\n\nclass SecurityPolicy {\n    public boolean allowed(SmartDevice d, String action, boolean userHome) {\n        switch (d.getType()) {\n            case DOOR_LOCK: return action.equals(\"unlock\") ? userHome : true;\n            case CAMERA: return !action.equals(\"disable\") || userHome;\n            case SPRINKLER: return !(action.equals(\"on\") && userHome && d.getMode()==Mode.PARTY);\n            case SPEAKER: return !(action.equals(\"play\") && !userHome);\n            default: return true;\n        }\n    }\n}\n\nclass VoiceCommandProcessor {\n    private final SmartHomeController ctl = new SmartHomeController();\n    public void handle(String phrase, SmartDevice d) {\n        switch (d.getType()) {\n            case LIGHT:\n                if (phrase.equalsIgnoreCase(\"lights on\")) ctl.turnOn(d);\n                else if (phrase.equalsIgnoreCase(\"lights off\")) ctl.turnOff(d);\n                break;\n            case THERMOSTAT:\n                if (phrase.equalsIgnoreCase(\"heat on\")) ctl.turnOn(d);\n                else if (phrase.equalsIgnoreCase(\"eco\")) ctl.setMode(d, Mode.ECO);\n                break;\n            case DOOR_LOCK:\n                if (phrase.equalsIgnoreCase(\"lock door\")) ctl.turnOn(d);\n                break;\n            case CAMERA:\n                if (phrase.equalsIgnoreCase(\"record\")) ctl.turnOn(d);\n                break;\n            case SPRINKLER:\n                if (phrase.equalsIgnoreCase(\"water\")) ctl.turnOn(d);\n                break;\n            case BLIND:\n                if (phrase.equalsIgnoreCase(\"open blinds\")) ctl.turnOn(d);\n                else if (phrase.equalsIgnoreCase(\"close blinds\")) ctl.turnOff(d);\n                break;\n            case SPEAKER:\n                if (phrase.equalsIgnoreCase(\"play music\")) ctl.turnOn(d);\n                else if (phrase.equalsIgnoreCase(\"pause music\")) ctl.turnOff(d);\n                break;\n        }\n    }\n}\n\nclass SceneManager {\n    private final SmartHomeController ctl = new SmartHomeController();\n    public void apply(String scene, List<SmartDevice> devices) {\n        for (SmartDevice d : devices) {\n            switch (scene) {\n                case \"Evening\":\n                    switch (d.getType()) {\n                        case LIGHT: ctl.turnOn(d); ctl.setMode(d, Mode.COMFORT); break;\n                        case THERMOSTAT: ctl.setMode(d, Mode.COMFORT); break;\n                        case CAMERA: ctl.turnOn(d); break;\n                        case DOOR_LOCK: ctl.turnOn(d); break;\n                        case SPRINKLER: ctl.turnOff(d); break;\n                        case BLIND: ctl.turnOff(d); break;\n                        case SPEAKER: ctl.turnOn(d); break;\n                    }\n                    break;\n                case \"Away\":\n                    switch (d.getType()) {\n                        case LIGHT: ctl.turnOff(d); break;\n                        case THERMOSTAT: ctl.setMode(d, Mode.AWAY); break;\n                        case CAMERA: ctl.turnOn(d); break;\n                        case DOOR_LOCK: ctl.turnOn(d); break;\n                        case SPRINKLER: ctl.turnOff(d); break;\n                        case BLIND: ctl.turnOff(d); break;\n                        case SPEAKER: ctl.turnOff(d); break;\n                    }\n                    break;\n                case \"Party\":\n                    switch (d.getType()) {\n                        case LIGHT: ctl.turnOn(d); ctl.setMode(d, Mode.PARTY); break;\n                        case THERMOSTAT: ctl.setMode(d, Mode.COMFORT); break;\n                        case SPEAKER: ctl.turnOn(d); break;\n                        case CAMERA: ctl.turnOff(d); break;\n                        case BLIND: ctl.turnOn(d); break;\n                        case SPRINKLER: ctl.turnOff(d); break;\n                        case DOOR_LOCK: ctl.turnOn(d); break;\n                    }\n                    break;\n            }\n        }\n    }\n}\n\nclass FirmwareManager {\n    public List<String> steps(SmartDevice d) {\n        switch (d.getType()) {\n            case LIGHT: return Arrays.asList(\"Ping\",\"PushFW\",\"Reboot\");\n            case THERMOSTAT: return Arrays.asList(\"Ping\",\"Backup\",\"PushFW\",\"Recalibrate\");\n            case DOOR_LOCK: return Arrays.asList(\"SecureChannel\",\"PushFW\",\"Reauth\");\n            case CAMERA: return Arrays.asList(\"Ping\",\"PushFW\",\"RestartStream\");\n            case SPRINKLER: return Arrays.asList(\"Ping\",\"PushFW\",\"ValveTest\");\n            case BLIND: return Arrays.asList(\"Ping\",\"PushFW\",\"AlignMotor\");\n            case SPEAKER: return Arrays.asList(\"Ping\",\"PushFW\",\"RestartAudio\");\n            default: return Collections.emptyList();\n        }\n    }\n}\n\nclass ScheduleEngine {\n    static class Entry {\n        final SmartDevice device; final String cron; final String action;\n        Entry(SmartDevice d, String c, String a){ device=d; cron=c; action=a; }\n    }\n    public void run(Entry e, SmartHomeController ctl) {\n        switch (e.device.getType()) {\n            case LIGHT: if (e.action.equals(\"on\")) ctl.turnOn(e.device); else ctl.turnOff(e.device); break;\n            case SPRINKLER: if (e.action.equals(\"on\")) ctl.turnOn(e.device); else ctl.turnOff(e.device); break;\n            case THERMOSTAT: if (e.action.equals(\"comfort\")) ctl.setMode(e.device, Mode.COMFORT); break;\n            case BLIND: if (e.action.equals(\"open\")) ctl.turnOn(e.device); else ctl.turnOff(e.device); break;\n            case SPEAKER: if (e.action.equals(\"play\")) ctl.turnOn(e.device); else ctl.turnOff(e.device); break;\n            default: ctl.turnOff(e.device);\n        }\n    }\n}\n\nclass WeatherAdvisor {\n    public boolean shouldWater(String condition) {\n        switch (condition) {\n            case \"rain\": return false;\n            case \"dry\": return true;\n            case \"windy\": return false;\n            default: return false;\n        }\n    }\n    public int lightLevelFor(String condition) {\n        switch (condition) {\n            case \"sunny\": return 100;\n            case \"cloudy\": return 70;\n            case \"rain\": return 50;\n            default: return 60;\n        }\n    }\n}\n\nclass GeoFence {\n    public boolean inside(String user, double distanceMeters) {\n        switch (user) {\n            case \"owner\": return distanceMeters < 50;\n            case \"guest\": return distanceMeters < 10;\n            default: return false;\n        }\n    }\n}\n\nclass AccessController {\n    public boolean canControl(SmartDevice d, String role) {\n        switch (d.getType()) {\n            case DOOR_LOCK: return role.equals(\"owner\");\n            case CAMERA: return role.equals(\"owner\") || role.equals(\"admin\");\n            case THERMOSTAT: return !role.equals(\"guest\");\n            case SPEAKER: return true;\n            default: return true;\n        }\n    }\n}\n\nclass DeviceRenderer {\n    public String icon(SmartDevice d) {\n        switch (d.getType()) {\n            case LIGHT: return \"ð¡\";\n            case THERMOSTAT: return \"ð¡ï¸\";\n            case DOOR_LOCK: return \"ð\";\n            case CAMERA: return \"ð·\";\n            case SPRINKLER: return \"ð§\";\n            case BLIND: return \"ðª\";\n            case SPEAKER: return \"ð\";\n            default: return \"â\";\n        }\n    }\n    public String label(SmartDevice d) {\n        switch (d.getType()) {\n            case LIGHT: return \"Light-\" + d.getId();\n            case THERMOSTAT: return \"Thermo-\" + d.getId();\n            case DOOR_LOCK: return \"Lock-\" + d.getId();\n            case CAMERA: return \"Cam-\" + d.getId();\n            case SPRINKLER: return \"Sprink-\" + d.getId();\n            case BLIND: return \"Blind-\" + d.getId();\n            case SPEAKER: return \"Speaker-\" + d.getId();\n            default: return d.getId();\n        }\n    }\n}\n\nclass DeviceRegistry {\n    private final Map<String, SmartDevice> byId = new HashMap<>();\n    public void register(SmartDevice d) { byId.put(d.getId(), d); }\n    public SmartDevice find(String id) { return byId.get(id); }\n    public List<String> groups(SmartDevice d) {\n        switch (d.getType()) {\n            case LIGHT: return Arrays.asList(\"lighting\",\"grid\");\n            case THERMOSTAT: return Arrays.asList(\"climate\",\"grid\");\n            case DOOR_LOCK: return Arrays.asList(\"security\");\n            case CAMERA: return Arrays.asList(\"security\",\"video\");\n            case SPRINKLER: return Arrays.asList(\"garden\",\"water\");\n            case BLIND: return Arrays.asList(\"lighting\",\"shades\");\n            case SPEAKER: return Arrays.asList(\"media\");\n            default: return Collections.emptyList();\n        }\n    }\n}\n\nclass AutomationRuleEngine {\n    private final SmartHomeController ctl = new SmartHomeController();\n    public void onEvent(String event, SmartDevice d) {\n        switch (event) {\n            case \"motion\":\n                switch (d.getType()) {\n                    case CAMERA: ctl.turnOn(d); break;\n                    case LIGHT: ctl.turnOn(d); break;\n                    default: break;\n                }\n                break;\n            case \"sunset\":\n                switch (d.getType()) {\n                    case LIGHT: ctl.turnOn(d); break;\n                    case BLIND: ctl.turnOff(d); break;\n                    default: break;\n                }\n                break;\n            case \"door-open\":\n                switch (d.getType()) {\n                    case DOOR_LOCK: ctl.turnOn(d); break;\n                    case CAMERA: ctl.turnOn(d); break;\n                    default: break;\n                }\n                break;\n        }\n    }\n}\n\nclass ReportPrinter {\n    private final SmartHomeController ctl = new SmartHomeController();\n    private final DiagnosticsService diag = new DiagnosticsService();\n    private final DeviceRenderer render = new DeviceRenderer();\n    public void printRoom(Room room) {\n        System.out.println(\"Room: \" + room.getName() + \" (\" + room.getType() + \")\");\n        for (SmartDevice d : room.getDevices()) {\n            double e = ctl.energyUsageKwh(d, 30);\n            System.out.println(render.icon(d) + \" \" + render.label(d) + \" mode=\" + d.getMode() + \" health=\" + diag.health(d) + \" 30m=\" + String.format(\"%.3f\", e) + \"kWh\");\n        }\n    }\n}\n",
            "output": "import java.util.*;\n\nenum DeviceType { LIGHT, THERMOSTAT, DOOR_LOCK, CAMERA, SPRINKLER, BLIND, SPEAKER }\nenum RoomType { LIVING, KITCHEN, BEDROOM, BATHROOM, GARDEN, GARAGE }\nenum Mode { ECO, COMFORT, AWAY, NIGHT, PARTY }\nenum AlertType { INFO, WARN, CRITICAL }\n\nabstract class SmartDevice {\n    protected final String id;\n    protected final DeviceType type;\n    protected Mode mode = Mode.ECO;\n    protected boolean online = true;\n\n    public SmartDevice(String id, DeviceType type) { this.id = id; this.type = type; }\n    public String getId() { return id; }\n    public DeviceType getType() { return type; }\n    public Mode getMode() { return mode; }\n    public boolean isOnline() { return online; }\n    public void setMode(Mode m) { mode = m; }\n    public void setOnline(boolean o) { online = o; }\n    \n    public abstract void turnOn();\n    public abstract void turnOff();\n    public abstract void setModeAction(Mode m);\n    public abstract double getEnergyUsagePerMinute();\n    public abstract String getHealthStatus();\n    public abstract String getNotificationPrefix();\n    public abstract boolean isActionAllowed(String action, boolean userHome);\n    public abstract void handleVoiceCommand(String phrase, SmartHomeController ctl);\n    public abstract void applyEveningScene(SmartHomeController ctl);\n    public abstract void applyAwayScene(SmartHomeController ctl);\n    public abstract void applyPartyScene(SmartHomeController ctl);\n    public abstract List<String> getFirmwareSteps();\n    public abstract void executeScheduledAction(String action, SmartHomeController ctl);\n    public abstract void handleMotionEvent(SmartHomeController ctl);\n    public abstract void handleSunsetEvent(SmartHomeController ctl);\n    public abstract void handleDoorOpenEvent(SmartHomeController ctl);\n    public abstract String getIcon();\n    public abstract String getLabel();\n    public abstract List<String> getGroups();\n    public abstract boolean canUserControl(String role);\n}\n\nclass LightDevice extends SmartDevice {\n    public LightDevice(String id) { super(id, DeviceType.LIGHT); }\n    public void turnOn() { System.out.println(\"Light \" + id + \" ON\"); }\n    public void turnOff() { System.out.println(\"Light \" + id + \" OFF\"); }\n    public void setModeAction(Mode m) { System.out.println(\"Light \" + id + \" -> \" + m); }\n    public double getEnergyUsagePerMinute() { return 0.012; }\n    public String getHealthStatus() { return online ? \"OK\" : \"Bulb Offline\"; }\n    public String getNotificationPrefix() { return \"Light\"; }\n    public boolean isActionAllowed(String action, boolean userHome) { return true; }\n    public void handleVoiceCommand(String phrase, SmartHomeController ctl) {\n        if (phrase.equalsIgnoreCase(\"lights on\")) ctl.turnOn(this);\n        else if (phrase.equalsIgnoreCase(\"lights off\")) ctl.turnOff(this);\n    }\n    public void applyEveningScene(SmartHomeController ctl) { ctl.turnOn(this); ctl.setMode(this, Mode.COMFORT); }\n    public void applyAwayScene(SmartHomeController ctl) { ctl.turnOff(this); }\n    public void applyPartyScene(SmartHomeController ctl) { ctl.turnOn(this); ctl.setMode(this, Mode.PARTY); }\n    public List<String> getFirmwareSteps() { return Arrays.asList(\"Ping\",\"PushFW\",\"Reboot\"); }\n    public void executeScheduledAction(String action, SmartHomeController ctl) {\n        if (action.equals(\"on\")) ctl.turnOn(this); else ctl.turnOff(this);\n    }\n    public void handleMotionEvent(SmartHomeController ctl) { ctl.turnOn(this); }\n    public void handleSunsetEvent(SmartHomeController ctl) { ctl.turnOn(this); }\n    public void handleDoorOpenEvent(SmartHomeController ctl) {}\n    public String getIcon() { return \"ð¡\"; }\n    public String getLabel() { return \"Light-\" + id; }\n    public List<String> getGroups() { return Arrays.asList(\"lighting\",\"grid\"); }\n    public boolean canUserControl(String role) { return true; }\n}\n\nclass ThermostatDevice extends SmartDevice {\n    public ThermostatDevice(String id) { super(id, DeviceType.THERMOSTAT); }\n    public void turnOn() { System.out.println(\"Thermostat \" + id + \" heating\"); }\n    public void turnOff() { System.out.println(\"Thermostat \" + id + \" idle\"); }\n    public void setModeAction(Mode m) { System.out.println(\"Thermostat \" + id + \" -> \" + m); }\n    public double getEnergyUsagePerMinute() { return 0.08; }\n    public String getHealthStatus() { return online ? \"OK\" : \"Sensor Offline\"; }\n    public String getNotificationPrefix() { return \"Thermostat\"; }\n    public boolean isActionAllowed(String action, boolean userHome) { return true; }\n    public void handleVoiceCommand(String phrase, SmartHomeController ctl) {\n        if (phrase.equalsIgnoreCase(\"heat on\")) ctl.turnOn(this);\n        else if (phrase.equalsIgnoreCase(\"eco\")) ctl.setMode(this, Mode.ECO);\n    }\n    public void applyEveningScene(SmartHomeController ctl) { ctl.setMode(this, Mode.COMFORT); }\n    public void applyAwayScene(SmartHomeController ctl) { ctl.setMode(this, Mode.AWAY); }\n    public void applyPartyScene(SmartHomeController ctl) { ctl.setMode(this, Mode.COMFORT); }\n    public List<String> getFirmwareSteps() { return Arrays.asList(\"Ping\",\"Backup\",\"PushFW\",\"Recalibrate\"); }\n    public void executeScheduledAction(String action, SmartHomeController ctl) {\n        if (action.equals(\"comfort\")) ctl.setMode(this, Mode.COMFORT);\n    }\n    public void handleMotionEvent(SmartHomeController ctl) {}\n    public void handleSunsetEvent(SmartHomeController ctl) {}\n    public void handleDoorOpenEvent(SmartHomeController ctl) {}\n    public String getIcon() { return \"ð¡ï¸\"; }\n    public String getLabel() { return \"Thermo-\" + id; }\n    public List<String> getGroups() { return Arrays.asList(\"climate\",\"grid\"); }\n    public boolean canUserControl(String role) { return !role.equals(\"guest\"); }\n}\n\nclass DoorLockDevice extends SmartDevice {\n    public DoorLockDevice(String id) { super(id, DeviceType.DOOR_LOCK); }\n    public void turnOn() { System.out.println(\"Lock \" + id + \" locked\"); }\n    public void turnOff() { System.out.println(\"Lock \" + id + \" secured\"); }\n    public void setModeAction(Mode m) { System.out.println(\"Lock \" + id + \" -> \" + m); }\n    public double getEnergyUsagePerMinute() { return 0.0002; }\n    public String getHealthStatus() { return online ? \"OK\" : \"Battery Low\"; }\n    public String getNotificationPrefix() { return \"Lock\"; }\n    public boolean isActionAllowed(String action, boolean userHome) {\n        return action.equals(\"unlock\") ? userHome : true;\n    }\n    public void handleVoiceCommand(String phrase, SmartHomeController ctl) {\n        if (phrase.equalsIgnoreCase(\"lock door\")) ctl.turnOn(this);\n    }\n    public void applyEveningScene(SmartHomeController ctl) { ctl.turnOn(this); }\n    public void applyAwayScene(SmartHomeController ctl) { ctl.turnOn(this); }\n    public void applyPartyScene(SmartHomeController ctl) { ctl.turnOn(this); }\n    public List<String> getFirmwareSteps() { return Arrays.asList(\"SecureChannel\",\"PushFW\",\"Reauth\"); }\n    public void executeScheduledAction(String action, SmartHomeController ctl) { ctl.turnOff(this); }\n    public void handleMotionEvent(SmartHomeController ctl) {}\n    public void handleSunsetEvent(SmartHomeController ctl) {}\n    public void handleDoorOpenEvent(SmartHomeController ctl) { ctl.turnOn(this); }\n    public String getIcon() { return \"ð\"; }\n    public String getLabel() { return \"Lock-\" + id; }\n    public List<String> getGroups() { return Arrays.asList(\"security\"); }\n    public boolean canUserControl(String role) { return role.equals(\"owner\"); }\n}\n\nclass CameraDevice extends SmartDevice {\n    public CameraDevice(String id) { super(id, DeviceType.CAMERA); }\n    public void turnOn() { System.out.println(\"Camera \" + id + \" recording\"); }\n    public void turnOff() { System.out.println(\"Camera \" + id + \" standby\"); }\n    public void setModeAction(Mode m) { System.out.println(\"Camera \" + id + \" -> \" + m); }\n    public double getEnergyUsagePerMinute() { return 0.01; }\n    public String getHealthStatus() { return online ? \"OK\" : \"Stream Error\"; }\n    public String getNotificationPrefix() { return \"Camera\"; }\n    public boolean isActionAllowed(String action, boolean userHome) {\n        return !action.equals(\"disable\") || userHome;\n    }\n    public void handleVoiceCommand(String phrase, SmartHomeController ctl) {\n        if (phrase.equalsIgnoreCase(\"record\")) ctl.turnOn(this);\n    }\n    public void applyEveningScene(SmartHomeController ctl) { ctl.turnOn(this); }\n    public void applyAwayScene(SmartHomeController ctl) { ctl.turnOn(this); }\n    public void applyPartyScene(SmartHomeController ctl) { ctl.turnOff(this); }\n    public List<String> getFirmwareSteps() { return Arrays.asList(\"Ping\",\"PushFW\",\"RestartStream\"); }\n    public void executeScheduledAction(String action, SmartHomeController ctl) { ctl.turnOff(this); }\n    public void handleMotionEvent(SmartHomeController ctl) { ctl.turnOn(this); }\n    public void handleSunsetEvent(SmartHomeController ctl) {}\n    public void handleDoorOpenEvent(SmartHomeController ctl) { ctl.turnOn(this); }\n    public String getIcon() { return \"ð·\"; }\n    public String getLabel() { return \"Cam-\" + id; }\n    public List<String> getGroups() { return Arrays.asList(\"security\",\"video\"); }\n    public boolean canUserControl(String role) { return role.equals(\"owner\") || role.equals(\"admin\"); }\n}\n\nclass SprinklerDevice extends SmartDevice {\n    public SprinklerDevice(String id) { super(id, DeviceType.SPRINKLER); }\n    public void turnOn() { System.out.println(\"Sprinkler \" + id + \" watering\"); }\n    public void turnOff() { System.out.println(\"Sprinkler \" + id + \" stopped\"); }\n    public void setModeAction(Mode m) { System.out.println(\"Sprinkler \" + id + \" -> \" + m); }\n    public double getEnergyUsagePerMinute() { return 0.03; }\n    public String getHealthStatus() { return online ? \"OK\" : \"Valve Error\"; }\n    public String getNotificationPrefix() { return \"Sprinkler\"; }\n    public boolean isActionAllowed(String action, boolean userHome) {\n        return !(action.equals(\"on\") && userHome && mode==Mode.PARTY);\n    }\n    public void handleVoiceCommand(String phrase, SmartHomeController ctl) {\n        if (phrase.equalsIgnoreCase(\"water\")) ctl.turnOn(this);\n    }\n    public void applyEveningScene(SmartHomeController ctl) { ctl.turnOff(this); }\n    public void applyAwayScene(SmartHomeController ctl) { ctl.turnOff(this); }\n    public void applyPartyScene(SmartHomeController ctl) { ctl.turnOff(this); }\n    public List<String> getFirmwareSteps() { return Arrays.asList(\"Ping\",\"PushFW\",\"ValveTest\"); }\n    public void executeScheduledAction(String action, SmartHomeController ctl) {\n        if (action.equals(\"on\")) ctl.turnOn(this); else ctl.turnOff(this);\n    }\n    public void handleMotionEvent(SmartHomeController ctl) {}\n    public void handleSunsetEvent(SmartHomeController ctl) {}\n    public void handleDoorOpenEvent(SmartHomeController ctl) {}\n    public String getIcon() { return \"ð§\"; }\n    public String getLabel() { return \"Sprink-\" + id; }\n    public List<String> getGroups() { return Arrays.asList(\"garden\",\"water\"); }\n    public boolean canUserControl(String role) { return true; }\n}\n\nclass BlindDevice extends SmartDevice {\n    public BlindDevice(String id) { super(id, DeviceType.BLIND); }\n    public void turnOn() { System.out.println(\"Blind \" + id + \" open\"); }\n    public void turnOff() { System.out.println(\"Blind \" + id + \" closed\"); }\n    public void setModeAction(Mode m) { System.out.println(\"Blind \" + id + \" -> \" + m); }\n    public double getEnergyUsagePerMinute() { return 0.001; }\n    public String getHealthStatus() { return online ? \"OK\" : \"Motor Jam\"; }\n    public String getNotificationPrefix() { return \"Blind\"; }\n    public boolean isActionAllowed(String action, boolean userHome) { return true; }\n    public void handleVoiceCommand(String phrase, SmartHomeController ctl) {\n        if (phrase.equalsIgnoreCase(\"open blinds\")) ctl.turnOn(this);\n        else if (phrase.equalsIgnoreCase(\"close blinds\")) ctl.turnOff(this);\n    }\n    public void applyEveningScene(SmartHomeController ctl) { ctl.turnOff(this); }\n    public void applyAwayScene(SmartHomeController ctl) { ctl.turnOff(this); }\n    public void applyPartyScene(SmartHomeController ctl) { ctl.turnOn(this); }\n    public List<String> getFirmwareSteps() { return Arrays.asList(\"Ping\",\"PushFW\",\"AlignMotor\"); }\n    public void executeScheduledAction(String action, SmartHomeController ctl) {\n        if (action.equals(\"open\")) ctl.turnOn(this); else ctl.turnOff(this);\n    }\n    public void handleMotionEvent(SmartHomeController ctl) {}\n    public void handleSunsetEvent(SmartHomeController ctl) { ctl.turnOff(this); }\n    public void handleDoorOpenEvent(SmartHomeController ctl) {}\n    public String getIcon() { return \"ðª\"; }\n    public String getLabel() { return \"Blind-\" + id; }\n    public List<String> getGroups() { return Arrays.asList(\"lighting\",\"shades\"); }\n    public boolean canUserControl(String role) { return true; }\n}\n\nclass SpeakerDevice extends SmartDevice {\n    public SpeakerDevice(String id) { super(id, DeviceType.SPEAKER); }\n    public void turnOn() { System.out.println(\"Speaker \" + id + \" playing\"); }\n    public void turnOff() { System.out.println(\"Speaker \" + id + \" paused\"); }\n    public void setModeAction(Mode m) { System.out.println(\"Speaker \" + id + \" -> \" + m); }\n    public double getEnergyUsagePerMinute() { return 0.015; }\n    public String getHealthStatus() { return online ? \"OK\" : \"Audio Fault\"; }\n    public String getNotificationPrefix() { return \"Speaker\"; }\n    public boolean isActionAllowed(String action, boolean userHome) {\n        return !(action.equals(\"play\") && !userHome);\n    }\n    public void handleVoiceCommand(String phrase, SmartHomeController ctl) {\n        if (phrase.equalsIgnoreCase(\"play music\")) ctl.turnOn(this);\n        else if (phrase.equalsIgnoreCase(\"pause music\")) ctl.turnOff(this);\n    }\n    public void applyEveningScene(SmartHomeController ctl) { ctl.turnOn(this); }\n    public void applyAwayScene(SmartHomeController ctl) { ctl.turnOff(this); }\n    public void applyPartyScene(SmartHomeController ctl) { ctl.turnOn(this); }\n    public List<String> getFirmwareSteps() { return Arrays.asList(\"Ping\",\"PushFW\",\"RestartAudio\"); }\n    public void executeScheduledAction(String action, SmartHomeController ctl) {\n        if (action.equals(\"play\")) ctl.turnOn(this); else ctl.turnOff(this);\n    }\n    public void handleMotionEvent(SmartHomeController ctl) {}\n    public void handleSunsetEvent(SmartHomeController ctl) {}\n    public void handleDoorOpenEvent(SmartHomeController ctl) {}\n    public String getIcon() { return \"ð\"; }\n    public String getLabel() { return \"Speaker-\" + id; }\n    public List<String> getGroups() { return Arrays.asList(\"media\"); }\n    public boolean canUserControl(String role) { return true; }\n}\n\nclass Room {\n    private final String name;\n    private final RoomType type;\n    private final List<SmartDevice> devices = new ArrayList<>();\n    public Room(String name, RoomType type) { this.name = name; this.type = type; }\n    public void add(SmartDevice d) { devices.add(d); }\n    public List<SmartDevice> getDevices() { return devices; }\n    public String getName() { return name; }\n    public RoomType getType() { return type; }\n}\n\nclass SmartHomeController {\n    public void turnOn(SmartDevice d) { d.turnOn(); }\n    public void turnOff(SmartDevice d) { d.turnOff(); }\n    public void setMode(SmartDevice d, Mode m) { d.setMode(m); d.setModeAction(m); }\n    public double energyUsageKwh(SmartDevice d, int minutes) {\n        return d.getEnergyUsagePerMinute() * minutes;\n    }\n}\n\nclass NotificationService {\n    public void push(SmartDevice d, AlertType t, String msg) {\n        System.out.println(\"[\" + t + \"] \" + d.getNotificationPrefix() + \" \" + d.getId() + \": \" + msg);\n    }\n}\n\nclass DiagnosticsService {\n    public String health(SmartDevice d) { return d.getHealthStatus(); }\n}\n\nclass SecurityPolicy {\n    public boolean allowed(SmartDevice d, String action, boolean userHome) {\n        return d.isActionAllowed(action, userHome);\n    }\n}\n\nclass VoiceCommandProcessor {\n    private final SmartHomeController ctl = new SmartHomeController();\n    public void handle(String phrase, SmartDevice d) {\n        d.handleVoiceCommand(phrase, ctl);\n    }\n}\n\nclass SceneManager {\n    private final SmartHomeController ctl = new SmartHomeController();\n    public void apply(String scene, List<SmartDevice> devices) {\n        for (SmartDevice d : devices) {\n            switch (scene) {\n                case \"Evening\": d.applyEveningScene(ctl); break;\n                case \"Away\": d.applyAwayScene(ctl); break;\n                case \"Party\": d.applyPartyScene(ctl); break;\n            }\n        }\n    }\n}\n\nclass FirmwareManager {\n    public List<String> steps(SmartDevice d) { return d.getFirmwareSteps(); }\n}\n\nclass ScheduleEngine {\n    static class Entry {\n        final SmartDevice device; final String cron; final String action;\n        Entry(SmartDevice d, String c, String a){ device=d; cron=c; action=a; }\n    }\n    public void run(Entry e, SmartHomeController ctl) {\n        e.device.executeScheduledAction(e.action, ctl);\n    }\n}\n\nclass WeatherAdvisor {\n    public boolean shouldWater(String condition) {\n        switch (condition) {\n            case \"rain\": return false;\n            case \"dry\": return true;\n            case \"windy\": return false;\n            default: return false;\n        }\n    }\n    public int lightLevelFor(String condition) {\n        switch (condition) {\n            case \"sunny\": return 100;\n            case \"cloudy\": return 70;\n            case \"rain\": return 50;\n            default: return 60;\n        }\n    }\n}\n\nclass GeoFence {\n    public boolean inside(String user, double distanceMeters) {\n        switch (user) {\n            case \"owner\": return distanceMeters < 50;\n            case \"guest\": return distanceMeters < 10;\n            default: return false;\n        }\n    }\n}\n\nclass AccessController {\n    public boolean canControl(SmartDevice d, String role) {\n        return d.canUserControl(role);\n    }\n}\n\nclass DeviceRenderer {\n    public String icon(SmartDevice d) { return d.getIcon(); }\n    public String label(SmartDevice d) { return d.getLabel(); }\n}\n\nclass DeviceRegistry {\n    private final Map<String, SmartDevice> byId = new HashMap<>();\n    public void register(SmartDevice d) { byId.put(d.getId(), d); }\n    public SmartDevice find(String id) { return byId.get(id); }\n    public List<String> groups(SmartDevice d) { return d.getGroups(); }\n}\n\nclass AutomationRuleEngine {\n    private final SmartHomeController ctl = new SmartHomeController();\n    public void onEvent(String event, SmartDevice d) {\n        switch (event) {\n            case \"motion\": d.handleMotionEvent(ctl); break;\n            case \"sunset\": d.handleSunsetEvent(ctl); break;\n            case \"door-open\": d.handleDoorOpenEvent(ctl); break;\n        }\n    }\n}\n\nclass ReportPrinter {\n    private final SmartHomeController ctl = new SmartHomeController();\n    private final DiagnosticsService diag = new DiagnosticsService();\n    private final DeviceRenderer render = new DeviceRenderer();\n    public void printRoom(Room room) {\n        System.out.println(\"Room: \" + room.getName() + \" (\" + room.getType() + \")\");\n        for (SmartDevice d : room.getDevices()) {\n            double e = ctl.energyUsageKwh(d, 30);\n            System.out.println(render.icon(d) + \" \" + render.label(d) + \" mode=\" + d.getMode() + \" health=\" + diag.health(d) + \" 30m=\" + String.format(\"%.3f\", e) + \"kWh\");\n        }\n    }\n}\n",
            "level": "HARD",
            "language": "JAVA",
            "violation": "OCP"
        },
        {
            "input": "abstract class GraphicObject {\n    private final String color;\n\n    protected GraphicObject(String color) {\n        this.color = color;\n    }\n\n    public String getColor() {\n        return color;\n    }\n}\n\nenum ShapeKind {\n    RECTANGLE, CIRCLE, CUBE\n}\n\nabstract class Shape extends GraphicObject {\n    private final ShapeKind kind;\n\n    protected Shape(ShapeKind kind, String color) {\n        super(color);\n        this.kind = kind;\n    }\n\n    public ShapeKind getKind() {\n        return kind;\n    }\n}\n\nabstract class TwoDShape extends Shape {\n    protected TwoDShape(ShapeKind kind, String color) {\n        super(kind, color);\n    }\n}\n\nabstract class ThreeDShape extends Shape {\n    protected ThreeDShape(ShapeKind kind, String color) {\n        super(kind, color);\n    }\n}\n\n\nclass Rectangle extends TwoDShape {\n    private final double width;\n    private final double height;\n\n    public Rectangle(double width, double height, String color) {\n        super(ShapeKind.RECTANGLE, color);\n        this.width = width;\n        this.height = height;\n    }\n\n    public double getWidth()  { return width;  }\n    public double getHeight() { return height; }\n}\n\nclass Circle extends TwoDShape {\n    private final double radius;\n\n    public Circle(double radius, String color) {\n        super(ShapeKind.CIRCLE, color);\n        this.radius = radius;\n    }\n\n    public double getRadius() { return radius; }\n}\n\nclass Cube extends ThreeDShape {\n    private final double edge;\n\n    public Cube(double edge, String color) {\n        super(ShapeKind.CUBE, color);\n        this.edge = edge;\n    }\n\n    public double getEdge() { return edge; }\n}\n\nenum Metric { AREA, PERIMETER, VOLUME }\n\nclass MetricCalculator {\n    public double compute(Shape shape, Metric metric) {\n        switch (shape.getKind()) {\n            case RECTANGLE: {\n                Rectangle r = (Rectangle) shape;\n                return switch (metric) {\n                    case AREA      -> r.getWidth() * r.getHeight();\n                    case PERIMETER -> 2 * (r.getWidth() + r.getHeight());\n                    case VOLUME    -> 0;\n                };\n            }\n            case CIRCLE: {\n                Circle c = (Circle) shape;\n                return switch (metric) {\n                    case AREA      -> Math.PI * c.getRadius() * c.getRadius();\n                    case PERIMETER -> 2 * Math.PI * c.getRadius(); \n                    case VOLUME    -> 0;\n                };\n            }\n            case CUBE: {\n                Cube cube = (Cube) shape;\n                return switch (metric) {\n                    case AREA      -> 6 * cube.getEdge() * cube.getEdge();\n                    case PERIMETER -> 12 * cube.getEdge();\n                    case VOLUME    -> Math.pow(cube.getEdge(), 3);\n                };\n            }\n            default:\n                return 0;\n        }\n    }\n}\n\nclass ShapeExporter {\n    public String toJson(Shape shape) {\n        switch (shape.getKind()) {\n            case RECTANGLE: {\n                Rectangle r = (Rectangle) shape;\n                return String.format(\n                    \"{\\\"type\\\":\\\"rectangle\\\",\\\"color\\\":\\\"%s\\\",\\\"width\\\":%.2f,\\\"height\\\":%.2f}\",\n                    r.getColor(), r.getWidth(), r.getHeight()\n                );\n            }\n            case CIRCLE: {\n                Circle c = (Circle) shape;\n                return String.format(\n                    \"{\\\"type\\\":\\\"circle\\\",\\\"color\\\":\\\"%s\\\",\\\"radius\\\":%.2f}\",\n                    c.getColor(), c.getRadius()\n                );\n            }\n            case CUBE: {\n                Cube cube = (Cube) shape;\n                return String.format(\n                    \"{\\\"type\\\":\\\"cube\\\",\\\"color\\\":\\\"%s\\\",\\\"edge\\\":%.2f}\",\n                    cube.getColor(), cube.getEdge()\n                );\n            }\n            default:\n                return \"{}\";\n        }\n    }\n}\n\nclass ShapeFactory {\n    public Shape create(String spec) {\n        String[] parts = spec.split(\":\", 2);\n        String type = parts[0].trim();\n        String[] kvs = (parts.length > 1 ? parts[1] : \"\").split(\";\");\n        java.util.Map<String, String> map = new java.util.HashMap<>();\n        for (String kv : kvs) {\n            String[] p = kv.split(\"=\");\n            if (p.length == 2) map.put(p[0].trim(), p[1].trim());\n        }\n        String color = map.getOrDefault(\"color\", \"black\");\n\n        switch (type.toLowerCase()) {\n            case \"rectangle\":\n                return new Rectangle(\n                    Double.parseDouble(map.getOrDefault(\"width\", \"0\")),\n                    Double.parseDouble(map.getOrDefault(\"height\", \"0\")),\n                    color\n                );\n            case \"circle\":\n                return new Circle(\n                    Double.parseDouble(map.getOrDefault(\"radius\", \"0\")),\n                    color\n                );\n            case \"cube\":\n                return new Cube(\n                    Double.parseDouble(map.getOrDefault(\"edge\", \"0\")),\n                    color\n                );\n            default:\n                throw new IllegalArgumentException(\"Unknown shape: \" + type);\n        }\n    }\n}",
            "output": "abstract class GraphicObject {\n    private final String color;\n\n    protected GraphicObject(String color) {\n        this.color = color;\n    }\n\n    public String getColor() {\n        return color;\n    }\n}\n\nabstract class Shape extends GraphicObject {\n    protected Shape(String color) {\n        super(color);\n    }\n\n    public abstract double area();\n    public abstract double perimeter();\n    public abstract double volume();\n    public abstract String toJson();\n}\n\nabstract class TwoDShape extends Shape {\n    protected TwoDShape(String color) {\n        super(color);\n    }\n\n    @Override\n    public double volume() {\n        return 0;\n    }\n}\n\nabstract class ThreeDShape extends Shape {\n    protected ThreeDShape(String color) {\n        super(color);\n    }\n}\n\nclass Rectangle extends TwoDShape {\n    private final double width;\n    private final double height;\n\n    public Rectangle(double width, double height, String color) {\n        super(color);\n        this.width = width;\n        this.height = height;\n    }\n\n    public double getWidth() { return width; }\n    public double getHeight() { return height; }\n\n    @Override\n    public double area() {\n        return width * height;\n    }\n\n    @Override\n    public double perimeter() {\n        return 2 * (width + height);\n    }\n\n    @Override\n    public String toJson() {\n        return String.format(\n            \"{\\\"type\\\":\\\"rectangle\\\",\\\"color\\\":\\\"%s\\\",\\\"width\\\":%.2f,\\\"height\\\":%.2f}\",\n            getColor(), width, height\n        );\n    }\n}\n\nclass Circle extends TwoDShape {\n    private final double radius;\n\n    public Circle(double radius, String color) {\n        super(color);\n        this.radius = radius;\n    }\n\n    public double getRadius() { return radius; }\n\n    @Override\n    public double area() {\n        return Math.PI * radius * radius;\n    }\n\n    @Override\n    public double perimeter() {\n        return 2 * Math.PI * radius;\n    }\n\n    @Override\n    public String toJson() {\n        return String.format(\n            \"{\\\"type\\\":\\\"circle\\\",\\\"color\\\":\\\"%s\\\",\\\"radius\\\":%.2f}\",\n            getColor(), radius\n        );\n    }\n}\n\nclass Cube extends ThreeDShape {\n    private final double edge;\n\n    public Cube(double edge, String color) {\n        super(color);\n        this.edge = edge;\n    }\n\n    public double getEdge() { return edge; }\n\n    @Override\n    public double area() {\n        return 6 * edge * edge;\n    }\n\n    @Override\n    public double perimeter() {\n        return 12 * edge;\n    }\n\n    @Override\n    public double volume() {\n        return Math.pow(edge, 3);\n    }\n\n    @Override\n    public String toJson() {\n        return String.format(\n            \"{\\\"type\\\":\\\"cube\\\",\\\"color\\\":\\\"%s\\\",\\\"edge\\\":%.2f}\",\n            getColor(), edge\n        );\n    }\n}\n\nenum Metric { AREA, PERIMETER, VOLUME }\n\nclass MetricCalculator {\n    public double compute(Shape shape, Metric metric) {\n        return switch (metric) {\n            case AREA -> shape.area();\n            case PERIMETER -> shape.perimeter();\n            case VOLUME -> shape.volume();\n        };\n    }\n}\n\nclass ShapeExporter {\n    public String toJson(Shape shape) {\n        return shape.toJson();\n    }\n}\n\nclass ShapeFactory {\n    public Shape create(String spec) {\n        String[] parts = spec.split(\":\", 2);\n        String type = parts[0].trim();\n        String[] kvs = (parts.length > 1 ? parts[1] : \"\").split(\";\");\n        java.util.Map<String, String> map = new java.util.HashMap<>();\n        for (String kv : kvs) {\n            String[] p = kv.split(\"=\");\n            if (p.length == 2) map.put(p[0].trim(), p[1].trim());\n        }\n        String color = map.getOrDefault(\"color\", \"black\");\n\n        return switch (type.toLowerCase()) {\n            case \"rectangle\" -> new Rectangle(\n                Double.parseDouble(map.getOrDefault(\"width\", \"0\")),\n                Double.parseDouble(map.getOrDefault(\"height\", \"0\")),\n                color\n            );\n            case \"circle\" -> new Circle(\n                Double.parseDouble(map.getOrDefault(\"radius\", \"0\")),\n                color\n            );\n            case \"cube\" -> new Cube(\n                Double.parseDouble(map.getOrDefault(\"edge\", \"0\")),\n                color\n            );\n            default -> throw new IllegalArgumentException(\"Unknown shape: \" + type);\n        };\n    }\n}\n",
            "level": "MODERATE",
            "language": "JAVA",
            "violation": "OCP"
        },
        {
            "input": "import java.util.*;\n\nenum CharacterType {\n    WARRIOR,\n    MAGE,\n    ARCHER\n}\n\nenum SkillType {\n    BASIC,\n    SPECIAL\n}\n\nclass GameCharacter {\n    private final String name;\n    private final CharacterType type;\n    private final int baseAttack;\n    private final int level;\n\n    public GameCharacter(String name, CharacterType type, int baseAttack, int level) {\n        this.name = name;\n        this.type = type;\n        this.baseAttack = baseAttack;\n        this.level = level;\n    }\n\n    public String getName() { return name; }\n    public CharacterType getType() { return type; }\n    public int getBaseAttack() { return baseAttack; }\n    public int getLevel() { return level; }\n}\n\nclass Skill {\n    private final SkillType type;\n    private final String name;\n\n    public Skill(SkillType type, String name) {\n        this.type = type;\n        this.name = name;\n    }\n\n    public SkillType getType() { return type; }\n    public String getName() { return name; }\n}\n\nclass Enemy {\n    private final String name;\n    private final int armor;\n    private final int resistance;\n\n    public Enemy(String name, int armor, int resistance) {\n        this.name = name;\n        this.armor = armor;\n        this.resistance = resistance;\n    }\n\n    public String getName() { return name; }\n    public int getArmor() { return armor; }\n    public int getResistance() { return resistance; }\n}\n\nclass DamageCalculator {\n    private final Random rng = new Random();\n\n    public int calculateDamage(GameCharacter c, Skill s, Enemy e) {\n        int raw;\n        switch (c.getType()) {\n            case WARRIOR:\n                raw = (int) (c.getBaseAttack() * (1.2 + c.getLevel() * 0.05));\n                if (s.getType() == SkillType.SPECIAL) raw *= 1.5;\n                raw -= e.getArmor();\n                return Math.max(raw, 0);\n            case MAGE:\n                raw = c.getBaseAttack() + (int) (c.getLevel() * 3.5);\n                if (s.getType() == SkillType.SPECIAL) raw += 25;\n                raw -= e.getResistance();\n                return Math.max(raw, 0);\n            case ARCHER:\n                raw = c.getBaseAttack();\n                boolean crit = rng.nextInt(100) < (20 + c.getLevel());\n                if (crit) raw *= 2;\n                if (s.getType() == SkillType.SPECIAL) raw += 10;\n                raw -= (int) (e.getArmor() * 0.5);\n                return Math.max(raw, 0);\n            default:\n                throw new IllegalArgumentException(\"Unknown type\");\n        }\n    }\n}\n\nclass LootCalculator {\n    public int calculateGold(GameCharacter c, Enemy e) {\n        switch (c.getType()) {\n            case WARRIOR:\n                return 10 + c.getLevel() + e.getArmor() / 5;\n            case MAGE:\n                return 8 + c.getLevel() * 2 + e.getResistance() / 4;\n            case ARCHER:\n                return 9 + (int) Math.round(c.getLevel() * 1.5);\n            default:\n                throw new IllegalArgumentException(\"Unknown type\");\n        }\n    }\n}\n",
            "output": "import java.util.*;\n\nenum SkillType {\n    BASIC,\n    SPECIAL\n}\n\nclass Skill {\n    private final SkillType type;\n    private final String name;\n\n    public Skill(SkillType type, String name) {\n        this.type = type;\n        this.name = name;\n    }\n\n    public SkillType getType() { return type; }\n    public String getName() { return name; }\n}\n\nclass Enemy {\n    private final String name;\n    private final int armor;\n    private final int resistance;\n\n    public Enemy(String name, int armor, int resistance) {\n        this.name = name;\n        this.armor = armor;\n        this.resistance = resistance;\n    }\n\n    public String getName() { return name; }\n    public int getArmor() { return armor; }\n    public int getResistance() { return resistance; }\n}\n\nabstract class GameCharacter {\n    private final String name;\n    private final int baseAttack;\n    private final int level;\n\n    protected GameCharacter(String name, int baseAttack, int level) {\n        this.name = name;\n        this.baseAttack = baseAttack;\n        this.level = level;\n    }\n\n    public String getName() { return name; }\n    public int getBaseAttack() { return baseAttack; }\n    public int getLevel() { return level; }\n\n    public abstract int calculateDamage(Skill s, Enemy e, Random rng);\n    public abstract int calculateGold(Enemy e);\n}\n\nclass Warrior extends GameCharacter {\n    public Warrior(String name, int baseAttack, int level) {\n        super(name, baseAttack, level);\n    }\n\n    @Override\n    public int calculateDamage(Skill s, Enemy e, Random rng) {\n        int raw = (int) (getBaseAttack() * (1.2 + getLevel() * 0.05));\n        if (s.getType() == SkillType.SPECIAL) raw *= 1.5;\n        raw -= e.getArmor();\n        return Math.max(raw, 0);\n    }\n\n    @Override\n    public int calculateGold(Enemy e) {\n        return 10 + getLevel() + e.getArmor() / 5;\n    }\n}\n\nclass Mage extends GameCharacter {\n    public Mage(String name, int baseAttack, int level) {\n        super(name, baseAttack, level);\n    }\n\n    @Override\n    public int calculateDamage(Skill s, Enemy e, Random rng) {\n        int raw = getBaseAttack() + (int) (getLevel() * 3.5);\n        if (s.getType() == SkillType.SPECIAL) raw += 25;\n        raw -= e.getResistance();\n        return Math.max(raw, 0);\n    }\n\n    @Override\n    public int calculateGold(Enemy e) {\n        return 8 + getLevel() * 2 + e.getResistance() / 4;\n    }\n}\n\nclass Archer extends GameCharacter {\n    public Archer(String name, int baseAttack, int level) {\n        super(name, baseAttack, level);\n    }\n\n    @Override\n    public int calculateDamage(Skill s, Enemy e, Random rng) {\n        int raw = getBaseAttack();\n        boolean crit = rng.nextInt(100) < (20 + getLevel());\n        if (crit) raw *= 2;\n        if (s.getType() == SkillType.SPECIAL) raw += 10;\n        raw -= (int) (e.getArmor() * 0.5);\n        return Math.max(raw, 0);\n    }\n\n    @Override\n    public int calculateGold(Enemy e) {\n        return 9 + (int) Math.round(getLevel() * 1.5);\n    }\n}\n",
            "level": "MODERATE",
            "language": "JAVA",
            "violation": "OCP"
        },
        {
            "input": "import java.util.*;\n\nenum FoodType { BURGER, FRIES, PIZZA, DRINK, SALAD, DESSERT }\nenum Size { SMALL, MEDIUM, LARGE }\n\nclass FoodItem {\n    private final String name;\n    private final FoodType type;\n    private final Size size;\n    private final Set<String> extras;\n\n    public FoodItem(String name, FoodType type, Size size, Set<String> extras) {\n        this.name = name; this.type = type; this.size = size; this.extras = extras == null ? new HashSet<>() : extras;\n    }\n    public String getName() { return name; }\n    public FoodType getType() { return type; }\n    public Size getSize() { return size; }\n    public Set<String> getExtras() { return extras; }\n}\n\nclass Order {\n    private final String customer;\n    private final List<FoodItem> items = new ArrayList<>();\n    public Order(String customer) { this.customer = customer; }\n    public void add(FoodItem item) { items.add(item); }\n    public List<FoodItem> items() { return items; }\n    public String customer() { return customer; }\n}\n\nclass PriceCalculator {\n    public double price(FoodItem item) {\n        switch (item.getType()) {\n            case BURGER:\n                switch (item.getSize()) {\n                    case SMALL: return 5.49;\n                    case MEDIUM: return 6.49;\n                    default: return 7.49;\n                }\n            case FRIES:\n                switch (item.getSize()) {\n                    case SMALL: return 1.99;\n                    case MEDIUM: return 2.49;\n                    default: return 2.99;\n                }\n            case PIZZA:\n                switch (item.getSize()) {\n                    case SMALL: return 7.99;\n                    case MEDIUM: return 9.99;\n                    default: return 12.49;\n                }\n            case DRINK:\n                switch (item.getSize()) {\n                    case SMALL: return 1.29;\n                    case MEDIUM: return 1.49;\n                    default: return 1.79;\n                }\n            case SALAD:\n                switch (item.getSize()) {\n                    case SMALL: return 4.49;\n                    case MEDIUM: return 5.49;\n                    default: return 6.49;\n                }\n            case DESSERT:\n                switch (item.getSize()) {\n                    case SMALL: return 2.99;\n                    case MEDIUM: return 3.49;\n                    default: return 3.99;\n                }\n            default:\n                throw new IllegalArgumentException(\"Unknown type\");\n        }\n    }\n}\n\nclass TaxCalculator {\n    public double taxFor(FoodItem item) {\n        switch (item.getType()) {\n            case DRINK: return 0.10;\n            case DESSERT: return 0.08;\n            case PIZZA: return 0.06;\n            default: return 0.05;\n        }\n    }\n}\n\nclass NutritionCalculator {\n    public int calories(FoodItem item) {\n        switch (item.getType()) {\n            case BURGER:\n                switch (item.getSize()) {\n                    case SMALL: return 480;\n                    case MEDIUM: return 650;\n                    default: return 820;\n                }\n            case FRIES:\n                switch (item.getSize()) {\n                    case SMALL: return 220;\n                    case MEDIUM: return 330;\n                    default: return 440;\n                }\n            case PIZZA:\n                switch (item.getSize()) {\n                    case SMALL: return 700;\n                    case MEDIUM: return 950;\n                    default: return 1200;\n                }\n            case DRINK:\n                switch (item.getSize()) {\n                    case SMALL: return 110;\n                    case MEDIUM: return 160;\n                    default: return 210;\n                }\n            case SALAD:\n                switch (item.getSize()) {\n                    case SMALL: return 180;\n                    case MEDIUM: return 260;\n                    default: return 340;\n                }\n            case DESSERT:\n                switch (item.getSize()) {\n                    case SMALL: return 250;\n                    case MEDIUM: return 320;\n                    default: return 390;\n                }\n            default:\n                return 0;\n        }\n    }\n}\n\nclass PromotionEngine {\n    public double discount(FoodItem item) {\n        switch (item.getType()) {\n            case BURGER: return item.getExtras().contains(\"extra-cheese\") ? 0.50 : 0.0;\n            case FRIES: return item.getSize() == Size.LARGE ? 0.20 : 0.0;\n            case DRINK: return item.getExtras().contains(\"no-ice\") ? 0.10 : 0.0;\n            case SALAD: return item.getExtras().contains(\"chicken\") ? 0.30 : 0.0;\n            case PIZZA: return item.getExtras().contains(\"pepperoni\") ? 0.40 : 0.0;\n            case DESSERT: return 0.0;\n            default: return 0.0;\n        }\n    }\n}\n\nclass KitchenStationRouter {\n    public String station(FoodItem item) {\n        switch (item.getType()) {\n            case BURGER: return \"Grill\";\n            case FRIES: return \"Fryer\";\n            case PIZZA: return \"Oven\";\n            case DRINK: return \"Beverage\";\n            case SALAD: return \"Cold Prep\";\n            case DESSERT: return \"Dessert Bar\";\n            default: return \"Unknown\";\n        }\n    }\n}\n\nclass InventoryManager {\n    private final Map<String, Integer> stock = new HashMap<>();\n    public InventoryManager() {\n        stock.put(\"bun\", 50); stock.put(\"patty\", 50); stock.put(\"potato\", 80);\n        stock.put(\"dough\", 30); stock.put(\"soda\", 100); stock.put(\"greens\", 40); stock.put(\"dessertBase\", 30);\n    }\n    public boolean reserve(FoodItem item) {\n        switch (item.getType()) {\n            case BURGER:\n                return take(\"bun\",1) && take(\"patty\",1);\n            case FRIES:\n                return take(\"potato\",2);\n            case PIZZA:\n                return take(\"dough\",1);\n            case DRINK:\n                return take(\"soda\",1);\n            case SALAD:\n                return take(\"greens\",1);\n            case DESSERT:\n                return take(\"dessertBase\",1);\n            default:\n                return false;\n        }\n    }\n    private boolean take(String key, int qty) {\n        int have = stock.getOrDefault(key,0);\n        if (have < qty) return false;\n        stock.put(key, have - qty);\n        return true;\n    }\n    public Map<String,Integer> getStock(){ return Collections.unmodifiableMap(stock); }\n}\n\nclass Chef {\n    public void prepare(FoodItem item) {\n        switch (item.getType()) {\n            case BURGER:\n                System.out.println(\"Chef grills patty and assembles burger\");\n                break;\n            case FRIES:\n                System.out.println(\"Chef drops fries in fryer\");\n                break;\n            case PIZZA:\n                System.out.println(\"Chef stretches dough and bakes pizza\");\n                break;\n            case DRINK:\n                System.out.println(\"Chef fills cup and lids drink\");\n                break;\n            case SALAD:\n                System.out.println(\"Chef chops and tosses salad\");\n                break;\n            case DESSERT:\n                System.out.println(\"Chef plates dessert\");\n                break;\n        }\n    }\n}\n\nclass Waiter {\n    public void take(Order order, FoodItem item) {\n        System.out.println(\"Waiter records item: \" + item.getName());\n        order.add(item);\n    }\n    public void serve(FoodItem item) {\n        switch (item.getType()) {\n            case BURGER:\n                System.out.println(\"Waiter serves burger with napkins\");\n                break;\n            case FRIES:\n                System.out.println(\"Waiter serves fries with ketchup\");\n                break;\n            case PIZZA:\n                System.out.println(\"Waiter serves pizza with slicer\");\n                break;\n            case DRINK:\n                System.out.println(\"Waiter serves drink with straw\");\n                break;\n            case SALAD:\n                System.out.println(\"Waiter serves salad with dressing\");\n                break;\n            case DESSERT:\n                System.out.println(\"Waiter serves dessert with spoon\");\n                break;\n        }\n    }\n}\n\nclass Cashier {\n    private final PriceCalculator prices = new PriceCalculator();\n    private final TaxCalculator taxes = new TaxCalculator();\n    private final PromotionEngine promos = new PromotionEngine();\n\n    public double total(Order order) {\n        double sum = 0.0;\n        for (FoodItem item : order.items()) {\n            double base = prices.price(item);\n            double discount = promos.discount(item);\n            double taxed = (base - discount) * (1.0 + taxes.taxFor(item));\n            sum += taxed;\n        }\n        return Math.round(sum * 100.0) / 100.0;\n    }\n}\n\nclass ReceiptPrinter {\n    private final PriceCalculator prices = new PriceCalculator();\n    private final TaxCalculator taxes = new TaxCalculator();\n    private final PromotionEngine promos = new PromotionEngine();\n    private final NutritionCalculator nutrition = new NutritionCalculator();\n\n    public void print(Order order) {\n        System.out.println(\"Customer: \" + order.customer());\n        for (FoodItem item : order.items()) {\n            double base = prices.price(item);\n            double discount = promos.discount(item);\n            double taxRate = taxes.taxFor(item);\n            int kcal = nutrition.calories(item);\n            System.out.println(item.getName() + \" (\" + item.getType() + \" \" + item.getSize() + \") \"\n                    + \"base $\" + base + \" disc $\" + discount + \" tax \" + (int)(taxRate*100) + \"% kcal \" + kcal);\n        }\n    }\n}\n",
            "output": "import java.util.*;\n\nenum FoodType { BURGER, FRIES, PIZZA, DRINK, SALAD, DESSERT }\nenum Size { SMALL, MEDIUM, LARGE }\n\nclass FoodItem {\n    private final String name;\n    private final FoodType type;\n    private final Size size;\n    private final Set<String> extras;\n\n    public FoodItem(String name, FoodType type, Size size, Set<String> extras) {\n        this.name = name; this.type = type; this.size = size; this.extras = extras == null ? new HashSet<>() : extras;\n    }\n    public String getName() { return name; }\n    public FoodType getType() { return type; }\n    public Size getSize() { return size; }\n    public Set<String> getExtras() { return extras; }\n}\n\nclass Order {\n    private final String customer;\n    private final List<FoodItem> items = new ArrayList<>();\n    public Order(String customer) { this.customer = customer; }\n    public void add(FoodItem item) { items.add(item); }\n    public List<FoodItem> items() { return items; }\n    public String customer() { return customer; }\n}\n\ninterface FoodOps {\n    FoodType type();\n    double tax();\n    double discount(FoodItem item);\n    String station();\n    void prepare();\n    void serve();\n    boolean reserve(InventoryManager inventory, FoodItem item);\n}\n\nclass FoodOpsRegistry {\n    private static final Map<FoodType, FoodOps> OPS = new EnumMap<>(FoodType.class);\n    static void register(FoodOps ops) { OPS.put(ops.type(), ops); }\n    static FoodOps of(FoodType t) {\n        FoodOps o = OPS.get(t);\n        if (o == null) throw new IllegalArgumentException(\"Unknown type\");\n        return o;\n    }\n    static {\n        register(new BurgerOps());\n        register(new FriesOps());\n        register(new PizzaOps());\n        register(new DrinkOps());\n        register(new SaladOps());\n        register(new DessertOps());\n    }\n}\n\nclass BurgerOps implements FoodOps {\n    public FoodType type() { return FoodType.BURGER; }\n    public double tax() { return 0.05; }\n    public double discount(FoodItem item) { return item.getExtras().contains(\"extra-cheese\")?0.50:0.0; }\n    public String station() { return \"Grill\"; }\n    public void prepare() { System.out.println(\"Chef grills patty and assembles burger\"); }\n    public void serve() { System.out.println(\"Waiter serves burger with napkins\"); }\n    public boolean reserve(InventoryManager inv, FoodItem i) { return inv.consume(\"bun\",1) && inv.consume(\"patty\",1); }\n}\nclass FriesOps implements FoodOps {\n    public FoodType type() { return FoodType.FRIES; }\n    public double tax() { return 0.05; }\n    public double discount(FoodItem item) { return item.getSize()==Size.LARGE?0.20:0.0; }\n    public String station() { return \"Fryer\"; }\n    public void prepare() { System.out.println(\"Chef drops fries in fryer\"); }\n    public void serve() { System.out.println(\"Waiter serves fries with ketchup\"); }\n    public boolean reserve(InventoryManager inv, FoodItem i) { return inv.consume(\"potato\",2); }\n}\nclass PizzaOps implements FoodOps {\n    public FoodType type() { return FoodType.PIZZA; }\n    public double tax() { return 0.06; }\n    public double discount(FoodItem item) { return item.getExtras().contains(\"pepperoni\")?0.40:0.0; }\n    public String station() { return \"Oven\"; }\n    public void prepare() { System.out.println(\"Chef stretches dough and bakes pizza\"); }\n    public void serve() { System.out.println(\"Waiter serves pizza with slicer\"); }\n    public boolean reserve(InventoryManager inv, FoodItem i) { return inv.consume(\"dough\",1); }\n}\nclass DrinkOps implements FoodOps {\n    public FoodType type() { return FoodType.DRINK; }\n    public double tax() { return 0.10; }\n    public double discount(FoodItem item) { return item.getExtras().contains(\"no-ice\")?0.10:0.0; }\n    public String station() { return \"Beverage\"; }\n    public void prepare() { System.out.println(\"Chef fills cup and lids drink\"); }\n    public void serve() { System.out.println(\"Waiter serves drink with straw\"); }\n    public boolean reserve(InventoryManager inv, FoodItem i) { return inv.consume(\"soda\",1); }\n}\nclass SaladOps implements FoodOps {\n    public FoodType type() { return FoodType.SALAD; }\n    public double tax() { return 0.05; }\n    public double discount(FoodItem item) { return item.getExtras().contains(\"chicken\")?0.30:0.0; }\n    public String station() { return \"Cold Prep\"; }\n    public void prepare() { System.out.println(\"Chef chops and tosses salad\"); }\n    public void serve() { System.out.println(\"Waiter serves salad with dressing\"); }\n    public boolean reserve(InventoryManager inv, FoodItem i) { return inv.consume(\"greens\",1); }\n}\nclass DessertOps implements FoodOps {\n    public FoodType type() { return FoodType.DESSERT; }\n    public double tax() { return 0.08; }\n    public double discount(FoodItem item) { return 0.0; }\n    public String station() { return \"Dessert Bar\"; }\n    public void prepare() { System.out.println(\"Chef plates dessert\"); }\n    public void serve() { System.out.println(\"Waiter serves dessert with spoon\"); }\n    public boolean reserve(InventoryManager inv, FoodItem i) { return inv.consume(\"dessertBase\",1); }\n}\n\nclass PriceTable {\n    private static final Map<FoodType, EnumMap<Size, Double>> PRICES = new EnumMap<>(FoodType.class);\n    static {\n        PRICES.put(FoodType.BURGER, map(5.49,6.49,7.49));\n        PRICES.put(FoodType.FRIES, map(1.99,2.49,2.99));\n        PRICES.put(FoodType.PIZZA, map(7.99,9.99,12.49));\n        PRICES.put(FoodType.DRINK, map(1.29,1.49,1.79));\n        PRICES.put(FoodType.SALAD, map(4.49,5.49,6.49));\n        PRICES.put(FoodType.DESSERT, map(2.99,3.49,3.99));\n    }\n    private static EnumMap<Size, Double> map(double s, double m, double l){\n        EnumMap<Size, Double> mapp = new EnumMap<>(Size.class);\n        mapp.put(Size.SMALL, s); mapp.put(Size.MEDIUM, m); mapp.put(Size.LARGE, l);\n        return mapp;\n    }\n    static double get(FoodItem item){\n        EnumMap<Size, Double> m = PRICES.get(item.getType());\n        if (m == null || !m.containsKey(item.getSize())) throw new IllegalArgumentException(\"Missing price\");\n        return m.get(item.getSize());\n    }\n}\n\nclass CalorieTable {\n    private static final Map<FoodType, EnumMap<Size, Integer>> CALS = new EnumMap<>(FoodType.class);\n    static {\n        CALS.put(FoodType.BURGER, map(480,650,820));\n        CALS.put(FoodType.FRIES, map(220,330,440));\n        CALS.put(FoodType.PIZZA, map(700,950,1200));\n        CALS.put(FoodType.DRINK, map(110,160,210));\n        CALS.put(FoodType.SALAD, map(180,260,340));\n        CALS.put(FoodType.DESSERT, map(250,320,390));\n    }\n    private static EnumMap<Size, Integer> map(int s, int m, int l){\n        EnumMap<Size, Integer> mapp = new EnumMap<>(Size.class);\n        mapp.put(Size.SMALL, s); mapp.put(Size.MEDIUM, m); mapp.put(Size.LARGE, l);\n        return mapp;\n    }\n    static int get(FoodItem item){\n        EnumMap<Size, Integer> m = CALS.get(item.getType());\n        if (m == null || !m.containsKey(item.getSize())) return 0;\n        return m.get(item.getSize());\n    }\n}\n\nclass PriceCalculator {\n    public double price(FoodItem item) { return PriceTable.get(item); }\n}\n\nclass TaxCalculator {\n    public double taxFor(FoodItem item) { return FoodOpsRegistry.of(item.getType()).tax(); }\n}\n\nclass NutritionCalculator {\n    public int calories(FoodItem item) { return CalorieTable.get(item); }\n}\n\nclass PromotionEngine {\n    public double discount(FoodItem item) { return FoodOpsRegistry.of(item.getType()).discount(item); }\n}\n\nclass KitchenStationRouter {\n    public String station(FoodItem item) { return FoodOpsRegistry.of(item.getType()).station(); }\n}\n\nclass InventoryManager {\n    private final Map<String, Integer> stock = new HashMap<>();\n    public InventoryManager() {\n        stock.put(\"bun\", 50); stock.put(\"patty\", 50); stock.put(\"potato\", 80);\n        stock.put(\"dough\", 30); stock.put(\"soda\", 100); stock.put(\"greens\", 40); stock.put(\"dessertBase\", 30);\n    }\n    public boolean reserve(FoodItem item) { return FoodOpsRegistry.of(item.getType()).reserve(this, item); }\n    public boolean consume(String key, int qty) { return take(key, qty); }\n    private boolean take(String key, int qty) {\n        int have = stock.getOrDefault(key,0);\n        if (have < qty) return false;\n        stock.put(key, have - qty);\n        return true;\n    }\n    public Map<String,Integer> getStock(){ return Collections.unmodifiableMap(stock); }\n}\n\nclass Chef {\n    public void prepare(FoodItem item) { FoodOpsRegistry.of(item.getType()).prepare(); }\n}\n\nclass Waiter {\n    public void take(Order order, FoodItem item) {\n        System.out.println(\"Waiter records item: \" + item.getName());\n        order.add(item);\n    }\n    public void serve(FoodItem item) { FoodOpsRegistry.of(item.getType()).serve(); }\n}\n\nclass Cashier {\n    private final PriceCalculator prices = new PriceCalculator();\n    private final TaxCalculator taxes = new TaxCalculator();\n    private final PromotionEngine promos = new PromotionEngine();\n\n    public double total(Order order) {\n        double sum = 0.0;\n        for (FoodItem item : order.items()) {\n            double base = prices.price(item);\n            double discount = promos.discount(item);\n            double taxed = (base - discount) * (1.0 + taxes.taxFor(item));\n            sum += taxed;\n        }\n        return Math.round(sum * 100.0) / 100.0;\n    }\n}\n\nclass ReceiptPrinter {\n    private final PriceCalculator prices = new PriceCalculator();\n    private final TaxCalculator taxes = new TaxCalculator();\n    private final PromotionEngine promos = new PromotionEngine();\n    private final NutritionCalculator nutrition = new NutritionCalculator();\n\n    public void print(Order order) {\n        System.out.println(\"Customer: \" + order.customer());\n        for (FoodItem item : order.items()) {\n            double base = prices.price(item);\n            double discount = promos.discount(item);\n            double taxRate = taxes.taxFor(item);\n            int kcal = nutrition.calories(item);\n            System.out.println(item.getName() + \" (\" + item.getType() + \" \" + item.getSize() + \") \"\n                    + \"base $\" + base + \" disc $\" + discount + \" tax \" + (int)(taxRate*100) + \"% kcal \" + kcal);\n        }\n    }\n}\n",
            "level": "MODERATE",
            "language": "JAVA",
            "violation": "OCP"
        },
        {
            "input": "import java.util.*;\n\nenum DeviceType { LIGHT, THERMOSTAT, DOOR_LOCK, CAMERA, SPRINKLER }\nenum RoomType { LIVING, KITCHEN, BEDROOM, GARDEN }\nenum Mode { ECO, COMFORT, AWAY, NIGHT }\n\nclass SmartDevice {\n    private final String id;\n    private final DeviceType type;\n    private Mode mode = Mode.ECO;\n    private boolean online = true;\n\n    public SmartDevice(String id, DeviceType type) {\n        this.id = id; this.type = type;\n    }\n    public String getId() { return id; }\n    public DeviceType getType() { return type; }\n    public Mode getMode() { return mode; }\n    public boolean isOnline() { return online; }\n    public void setMode(Mode m) { this.mode = m; }\n    public void setOnline(boolean o) { this.online = o; }\n}\n\nclass Room {\n    private final String name;\n    private final RoomType type;\n    private final List<SmartDevice> devices = new ArrayList<>();\n    public Room(String name, RoomType type) { this.name = name; this.type = type; }\n    public void add(SmartDevice d) { devices.add(d); }\n    public List<SmartDevice> getDevices() { return devices; }\n    public String getName() { return name; }\n    public RoomType getType() { return type; }\n}\n\nclass ScheduleEntry {\n    public final SmartDevice device;\n    public final String cron;\n    public final String action;\n    public ScheduleEntry(SmartDevice device, String cron, String action) {\n        this.device = device; this.cron = cron; this.action = action;\n    }\n}\n\nclass SmartHomeController {\n    public void turnOn(SmartDevice d) {\n        switch (d.getType()) {\n            case LIGHT: System.out.println(\"Light \" + d.getId() + \" ON\"); break;\n            case THERMOSTAT: System.out.println(\"Thermostat \" + d.getId() + \" heating\"); break;\n            case DOOR_LOCK: System.out.println(\"Lock \" + d.getId() + \" stays locked\"); break;\n            case CAMERA: System.out.println(\"Camera \" + d.getId() + \" recording\"); break;\n            case SPRINKLER: System.out.println(\"Sprinkler \" + d.getId() + \" watering\"); break;\n        }\n    }\n    public void turnOff(SmartDevice d) {\n        switch (d.getType()) {\n            case LIGHT: System.out.println(\"Light \" + d.getId() + \" OFF\"); break;\n            case THERMOSTAT: System.out.println(\"Thermostat \" + d.getId() + \" idle\"); break;\n            case DOOR_LOCK: System.out.println(\"Lock \" + d.getId() + \" remains locked\"); break;\n            case CAMERA: System.out.println(\"Camera \" + d.getId() + \" standby\"); break;\n            case SPRINKLER: System.out.println(\"Sprinkler \" + d.getId() + \" stopped\"); break;\n        }\n    }\n    public void setMode(SmartDevice d, Mode m) {\n        d.setMode(m);\n        switch (d.getType()) {\n            case LIGHT: System.out.println(\"Light \" + d.getId() + \" mode \" + m); break;\n            case THERMOSTAT: System.out.println(\"Thermostat \" + d.getId() + \" mode \" + m); break;\n            case DOOR_LOCK: System.out.println(\"Lock \" + d.getId() + \" mode \" + m); break;\n            case CAMERA: System.out.println(\"Camera \" + d.getId() + \" mode \" + m); break;\n            case SPRINKLER: System.out.println(\"Sprinkler \" + d.getId() + \" mode \" + m); break;\n        }\n    }\n    public double energyUsageKwh(SmartDevice d, int minutes) {\n        switch (d.getType()) {\n            case LIGHT: return 0.012 * minutes;\n            case THERMOSTAT: return 0.08 * minutes;\n            case DOOR_LOCK: return 0.0002 * minutes;\n            case CAMERA: return 0.01 * minutes;\n            case SPRINKLER: return 0.03 * minutes;\n            default: return 0;\n        }\n    }\n    public String deviceIcon(SmartDevice d) {\n        switch (d.getType()) {\n            case LIGHT: return \"ð¡\";\n            case THERMOSTAT: return \"ð¡ï¸\";\n            case DOOR_LOCK: return \"ð\";\n            case CAMERA: return \"ð·\";\n            case SPRINKLER: return \"ð§\";\n            default: return \"â\";\n        }\n    }\n    public List<String> firmwareUpdateSteps(SmartDevice d) {\n        switch (d.getType()) {\n            case LIGHT: return Arrays.asList(\"Ping\", \"Push FW\", \"Reboot\");\n            case THERMOSTAT: return Arrays.asList(\"Ping\", \"Backup Profile\", \"Push FW\", \"Recalibrate\");\n            case DOOR_LOCK: return Arrays.asList(\"Ping\", \"Secure Channel\", \"Push FW\", \"Reauth\");\n            case CAMERA: return Arrays.asList(\"Ping\", \"Push FW\", \"Restart Stream\");\n            case SPRINKLER: return Arrays.asList(\"Ping\", \"Push FW\", \"Valve Test\");\n            default: return Collections.emptyList();\n        }\n    }\n}\n\nclass NotificationService {\n    public void notifyOwner(SmartDevice d, String event) {\n        switch (d.getType()) {\n            case LIGHT: System.out.println(\"Notify: Light \" + d.getId() + \" -> \" + event); break;\n            case THERMOSTAT: System.out.println(\"Notify: Thermostat \" + d.getId() + \" -> \" + event); break;\n            case DOOR_LOCK: System.out.println(\"Notify: Lock \" + d.getId() + \" -> \" + event); break;\n            case CAMERA: System.out.println(\"Notify: Camera \" + d.getId() + \" -> \" + event); break;\n            case SPRINKLER: System.out.println(\"Notify: Sprinkler \" + d.getId() + \" -> \" + event); break;\n        }\n    }\n}\n\nclass DiagnosticsService {\n    public String health(SmartDevice d) {\n        switch (d.getType()) {\n            case LIGHT: return d.isOnline() ? \"OK\" : \"Bulb Offline\";\n            case THERMOSTAT: return d.isOnline() ? \"OK\" : \"Sensor Offline\";\n            case DOOR_LOCK: return d.isOnline() ? \"OK\" : \"Battery Low\";\n            case CAMERA: return d.isOnline() ? \"OK\" : \"Stream Error\";\n            case SPRINKLER: return d.isOnline() ? \"OK\" : \"Valve Error\";\n            default: return \"Unknown\";\n        }\n    }\n    public double maintenanceCostYearly(SmartDevice d) {\n        switch (d.getType()) {\n            case LIGHT: return 5.0;\n            case THERMOSTAT: return 20.0;\n            case DOOR_LOCK: return 12.0;\n            case CAMERA: return 18.0;\n            case SPRINKLER: return 15.0;\n            default: return 0.0;\n        }\n    }\n}\n\nclass SecurityPolicy {\n    public boolean actionAllowed(SmartDevice d, String action, boolean userHome) {\n        switch (d.getType()) {\n            case DOOR_LOCK: return action.equals(\"unlock\") ? userHome : true;\n            case CAMERA: return action.equals(\"record\") ? true : true;\n            case THERMOSTAT: return true;\n            case LIGHT: return true;\n            case SPRINKLER: return !action.equals(\"on\") || !userHome;\n            default: return false;\n        }\n    }\n}\n\nclass VoiceCommandProcessor {\n    private final SmartHomeController ctl = new SmartHomeController();\n    public void handle(String phrase, SmartDevice d) {\n        switch (d.getType()) {\n            case LIGHT:\n                if (phrase.equalsIgnoreCase(\"lights on\")) ctl.turnOn(d);\n                else if (phrase.equalsIgnoreCase(\"lights off\")) ctl.turnOff(d);\n                else if (phrase.equalsIgnoreCase(\"night mode\")) ctl.setMode(d, Mode.NIGHT);\n                break;\n            case THERMOSTAT:\n                if (phrase.equalsIgnoreCase(\"heat on\")) ctl.turnOn(d);\n                else if (phrase.equalsIgnoreCase(\"eco mode\")) ctl.setMode(d, Mode.ECO);\n                break;\n            case DOOR_LOCK:\n                if (phrase.equalsIgnoreCase(\"lock door\")) ctl.turnOn(d);\n                break;\n            case CAMERA:\n                if (phrase.equalsIgnoreCase(\"start recording\")) ctl.turnOn(d);\n                break;\n            case SPRINKLER:\n                if (phrase.equalsIgnoreCase(\"water garden\")) ctl.turnOn(d);\n                break;\n        }\n    }\n}\n\nclass SceneManager {\n    private final SmartHomeController ctl = new SmartHomeController();\n    public void applyScene(String name, List<SmartDevice> devices) {\n        for (SmartDevice d : devices) {\n            switch (name) {\n                case \"Evening\":\n                    switch (d.getType()) {\n                        case LIGHT: ctl.turnOn(d); ctl.setMode(d, Mode.COMFORT); break;\n                        case THERMOSTAT: ctl.setMode(d, Mode.COMFORT); break;\n                        case CAMERA: ctl.turnOn(d); break;\n                        case DOOR_LOCK: ctl.turnOn(d); break;\n                        case SPRINKLER: ctl.turnOff(d); break;\n                    }\n                    break;\n                case \"Away\":\n                    switch (d.getType()) {\n                        case LIGHT: ctl.turnOff(d); break;\n                        case THERMOSTAT: ctl.setMode(d, Mode.AWAY); break;\n                        case CAMERA: ctl.turnOn(d); break;\n                        case DOOR_LOCK: ctl.turnOn(d); break;\n                        case SPRINKLER: ctl.turnOff(d); break;\n                    }\n                    break;\n            }\n        }\n    }\n}\n\nclass EnergyEstimator {\n    private final SmartHomeController ctl = new SmartHomeController();\n    public double estimateRoom(Room room, int minutes) {\n        double sum = 0;\n        for (SmartDevice d : room.getDevices()) sum += ctl.energyUsageKwh(d, minutes);\n        return sum;\n    }\n}\n",
            "output": "import java.util.*;\n\nenum DeviceType { LIGHT, THERMOSTAT, DOOR_LOCK, CAMERA, SPRINKLER }\nenum RoomType { LIVING, KITCHEN, BEDROOM, GARDEN }\nenum Mode { ECO, COMFORT, AWAY, NIGHT }\n\nclass SmartDevice {\n    private final String id;\n    private final DeviceType type;\n    private Mode mode = Mode.ECO;\n    private boolean online = true;\n\n    public SmartDevice(String id, DeviceType type) { this.id = id; this.type = type; }\n    public String getId() { return id; }\n    public DeviceType getType() { return type; }\n    public Mode getMode() { return mode; }\n    public boolean isOnline() { return online; }\n    public void setMode(Mode m) { this.mode = m; }\n    public void setOnline(boolean o) { this.online = o; }\n}\n\nclass Room {\n    private final String name;\n    private final RoomType type;\n    private final List<SmartDevice> devices = new ArrayList<>();\n    public Room(String name, RoomType type) { this.name = name; this.type = type; }\n    public void add(SmartDevice d) { devices.add(d); }\n    public List<SmartDevice> getDevices() { return devices; }\n    public String getName() { return name; }\n    public RoomType getType() { return type; }\n}\n\nclass ScheduleEntry {\n    public final SmartDevice device;\n    public final String cron;\n    public final String action;\n    public ScheduleEntry(SmartDevice device, String cron, String action) {\n        this.device = device; this.cron = cron; this.action = action;\n    }\n}\n\ninterface DeviceOps {\n    void turnOn(SmartDevice d);\n    void turnOff(SmartDevice d);\n    void setMode(SmartDevice d, Mode m);\n    double energyUsageKwh(int minutes);\n    String icon();\n    List<String> firmwareUpdateSteps();\n    void notifyOwner(SmartDevice d, String event);\n    String health(SmartDevice d);\n    double maintenanceCostYearly();\n    boolean actionAllowed(String action, boolean userHome);\n    void handleVoice(String phrase, SmartHomeController ctl, SmartDevice d);\n    void applyScene(String scene, SmartHomeController ctl, SmartDevice d);\n}\n\nclass DeviceOpsRegistry {\n    private static final Map<DeviceType, DeviceOps> map = new EnumMap<>(DeviceType.class);\n    static {\n        map.put(DeviceType.LIGHT, new LightOps());\n        map.put(DeviceType.THERMOSTAT, new ThermostatOps());\n        map.put(DeviceType.DOOR_LOCK, new DoorLockOps());\n        map.put(DeviceType.CAMERA, new CameraOps());\n        map.put(DeviceType.SPRINKLER, new SprinklerOps());\n    }\n    public static DeviceOps get(DeviceType t) { return map.get(t); }\n    public static void register(DeviceType t, DeviceOps ops) { map.put(t, ops); }\n}\n\nclass LightOps implements DeviceOps {\n    public void turnOn(SmartDevice d) { System.out.println(\"Light \" + d.getId() + \" ON\"); }\n    public void turnOff(SmartDevice d) { System.out.println(\"Light \" + d.getId() + \" OFF\"); }\n    public void setMode(SmartDevice d, Mode m) { d.setMode(m); System.out.println(\"Light \" + d.getId() + \" mode \" + m); }\n    public double energyUsageKwh(int minutes) { return 0.012 * minutes; }\n    public String icon() { return \"ð¡\"; }\n    public List<String> firmwareUpdateSteps() { return Arrays.asList(\"Ping\", \"Push FW\", \"Reboot\"); }\n    public void notifyOwner(SmartDevice d, String event) { System.out.println(\"Notify: Light \" + d.getId() + \" -> \" + event); }\n    public String health(SmartDevice d) { return d.isOnline() ? \"OK\" : \"Bulb Offline\"; }\n    public double maintenanceCostYearly() { return 5.0; }\n    public boolean actionAllowed(String action, boolean userHome) { return true; }\n    public void handleVoice(String phrase, SmartHomeController ctl, SmartDevice d) {\n        if (phrase.equalsIgnoreCase(\"lights on\")) ctl.turnOn(d);\n        else if (phrase.equalsIgnoreCase(\"lights off\")) ctl.turnOff(d);\n        else if (phrase.equalsIgnoreCase(\"night mode\")) ctl.setMode(d, Mode.NIGHT);\n    }\n    public void applyScene(String scene, SmartHomeController ctl, SmartDevice d) {\n        if (\"Evening\".equals(scene)) { ctl.turnOn(d); ctl.setMode(d, Mode.COMFORT); }\n        else if (\"Away\".equals(scene)) { ctl.turnOff(d); }\n    }\n}\n\nclass ThermostatOps implements DeviceOps {\n    public void turnOn(SmartDevice d) { System.out.println(\"Thermostat \" + d.getId() + \" heating\"); }\n    public void turnOff(SmartDevice d) { System.out.println(\"Thermostat \" + d.getId() + \" idle\"); }\n    public void setMode(SmartDevice d, Mode m) { d.setMode(m); System.out.println(\"Thermostat \" + d.getId() + \" mode \" + m); }\n    public double energyUsageKwh(int minutes) { return 0.08 * minutes; }\n    public String icon() { return \"ð¡ï¸\"; }\n    public List<String> firmwareUpdateSteps() { return Arrays.asList(\"Ping\", \"Backup Profile\", \"Push FW\", \"Recalibrate\"); }\n    public void notifyOwner(SmartDevice d, String event) { System.out.println(\"Notify: Thermostat \" + d.getId() + \" -> \" + event); }\n    public String health(SmartDevice d) { return d.isOnline() ? \"OK\" : \"Sensor Offline\"; }\n    public double maintenanceCostYearly() { return 20.0; }\n    public boolean actionAllowed(String action, boolean userHome) { return true; }\n    public void handleVoice(String phrase, SmartHomeController ctl, SmartDevice d) {\n        if (phrase.equalsIgnoreCase(\"heat on\")) ctl.turnOn(d);\n        else if (phrase.equalsIgnoreCase(\"eco mode\")) ctl.setMode(d, Mode.ECO);\n    }\n    public void applyScene(String scene, SmartHomeController ctl, SmartDevice d) {\n        if (\"Evening\".equals(scene)) { ctl.setMode(d, Mode.COMFORT); }\n        else if (\"Away\".equals(scene)) { ctl.setMode(d, Mode.AWAY); }\n    }\n}\n\nclass DoorLockOps implements DeviceOps {\n    public void turnOn(SmartDevice d) { System.out.println(\"Lock \" + d.getId() + \" stays locked\"); }\n    public void turnOff(SmartDevice d) { System.out.println(\"Lock \" + d.getId() + \" remains locked\"); }\n    public void setMode(SmartDevice d, Mode m) { d.setMode(m); System.out.println(\"Lock \" + d.getId() + \" mode \" + m); }\n    public double energyUsageKwh(int minutes) { return 0.0002 * minutes; }\n    public String icon() { return \"ð\"; }\n    public List<String> firmwareUpdateSteps() { return Arrays.asList(\"Ping\", \"Secure Channel\", \"Push FW\", \"Reauth\"); }\n    public void notifyOwner(SmartDevice d, String event) { System.out.println(\"Notify: Lock \" + d.getId() + \" -> \" + event); }\n    public String health(SmartDevice d) { return d.isOnline() ? \"OK\" : \"Battery Low\"; }\n    public double maintenanceCostYearly() { return 12.0; }\n    public boolean actionAllowed(String action, boolean userHome) { return action.equals(\"unlock\") ? userHome : true; }\n    public void handleVoice(String phrase, SmartHomeController ctl, SmartDevice d) {\n        if (phrase.equalsIgnoreCase(\"lock door\")) ctl.turnOn(d);\n    }\n    public void applyScene(String scene, SmartHomeController ctl, SmartDevice d) {\n        if (\"Evening\".equals(scene) || \"Away\".equals(scene)) { ctl.turnOn(d); }\n    }\n}\n\nclass CameraOps implements DeviceOps {\n    public void turnOn(SmartDevice d) { System.out.println(\"Camera \" + d.getId() + \" recording\"); }\n    public void turnOff(SmartDevice d) { System.out.println(\"Camera \" + d.getId() + \" standby\"); }\n    public void setMode(SmartDevice d, Mode m) { d.setMode(m); System.out.println(\"Camera \" + d.getId() + \" mode \" + m); }\n    public double energyUsageKwh(int minutes) { return 0.01 * minutes; }\n    public String icon() { return \"ð·\"; }\n    public List<String> firmwareUpdateSteps() { return Arrays.asList(\"Ping\", \"Push FW\", \"Restart Stream\"); }\n    public void notifyOwner(SmartDevice d, String event) { System.out.println(\"Notify: Camera \" + d.getId() + \" -> \" + event); }\n    public String health(SmartDevice d) { return d.isOnline() ? \"OK\" : \"Stream Error\"; }\n    public double maintenanceCostYearly() { return 18.0; }\n    public boolean actionAllowed(String action, boolean userHome) { return true; }\n    public void handleVoice(String phrase, SmartHomeController ctl, SmartDevice d) {\n        if (phrase.equalsIgnoreCase(\"start recording\")) ctl.turnOn(d);\n    }\n    public void applyScene(String scene, SmartHomeController ctl, SmartDevice d) {\n        if (\"Evening\".equals(scene) || \"Away\".equals(scene)) { ctl.turnOn(d); }\n    }\n}\n\nclass SprinklerOps implements DeviceOps {\n    public void turnOn(SmartDevice d) { System.out.println(\"Sprinkler \" + d.getId() + \" watering\"); }\n    public void turnOff(SmartDevice d) { System.out.println(\"Sprinkler \" + d.getId() + \" stopped\"); }\n    public void setMode(SmartDevice d, Mode m) { d.setMode(m); System.out.println(\"Sprinkler \" + d.getId() + \" mode \" + m); }\n    public double energyUsageKwh(int minutes) { return 0.03 * minutes; }\n    public String icon() { return \"ð§\"; }\n    public List<String> firmwareUpdateSteps() { return Arrays.asList(\"Ping\", \"Push FW\", \"Valve Test\"); }\n    public void notifyOwner(SmartDevice d, String event) { System.out.println(\"Notify: Sprinkler \" + d.getId() + \" -> \" + event); }\n    public String health(SmartDevice d) { return d.isOnline() ? \"OK\" : \"Valve Error\"; }\n    public double maintenanceCostYearly() { return 15.0; }\n    public boolean actionAllowed(String action, boolean userHome) { return !action.equals(\"on\") || !userHome; }\n    public void handleVoice(String phrase, SmartHomeController ctl, SmartDevice d) {\n        if (phrase.equalsIgnoreCase(\"water garden\")) ctl.turnOn(d);\n    }\n    public void applyScene(String scene, SmartHomeController ctl, SmartDevice d) {\n        if (\"Evening\".equals(scene) || \"Away\".equals(scene)) { ctl.turnOff(d); }\n    }\n}\n\nclass SmartHomeController {\n    public void turnOn(SmartDevice d) { DeviceOpsRegistry.get(d.getType()).turnOn(d); }\n    public void turnOff(SmartDevice d) { DeviceOpsRegistry.get(d.getType()).turnOff(d); }\n    public void setMode(SmartDevice d, Mode m) { DeviceOpsRegistry.get(d.getType()).setMode(d, m); }\n    public double energyUsageKwh(SmartDevice d, int minutes) { return DeviceOpsRegistry.get(d.getType()).energyUsageKwh(minutes); }\n    public String deviceIcon(SmartDevice d) { return DeviceOpsRegistry.get(d.getType()).icon(); }\n    public List<String> firmwareUpdateSteps(SmartDevice d) { return DeviceOpsRegistry.get(d.getType()).firmwareUpdateSteps(); }\n}\n\nclass NotificationService {\n    public void notifyOwner(SmartDevice d, String event) { DeviceOpsRegistry.get(d.getType()).notifyOwner(d, event); }\n}\n\nclass DiagnosticsService {\n    public String health(SmartDevice d) { return DeviceOpsRegistry.get(d.getType()).health(d); }\n    public double maintenanceCostYearly(SmartDevice d) { return DeviceOpsRegistry.get(d.getType()).maintenanceCostYearly(); }\n}\n\nclass SecurityPolicy {\n    public boolean actionAllowed(SmartDevice d, String action, boolean userHome) {\n        return DeviceOpsRegistry.get(d.getType()).actionAllowed(action, userHome);\n    }\n}\n\nclass VoiceCommandProcessor {\n    private final SmartHomeController ctl = new SmartHomeController();\n    public void handle(String phrase, SmartDevice d) {\n        DeviceOpsRegistry.get(d.getType()).handleVoice(phrase, ctl, d);\n    }\n}\n\nclass SceneManager {\n    private final SmartHomeController ctl = new SmartHomeController();\n    public void applyScene(String name, List<SmartDevice> devices) {\n        for (SmartDevice d : devices) DeviceOpsRegistry.get(d.getType()).applyScene(name, ctl, d);\n    }\n}\n\nclass EnergyEstimator {\n    private final SmartHomeController ctl = new SmartHomeController();\n    public double estimateRoom(Room room, int minutes) {\n        double sum = 0;\n        for (SmartDevice d : room.getDevices()) sum += ctl.energyUsageKwh(d, minutes);\n        return sum;\n    }\n}\n",
            "level": "MODERATE",
            "language": "JAVA",
            "violation": "OCP"
        },
        {
            "input": "open class Shape(private val type: String) {\n    fun getType(): String {\n        return type\n    }\n}\n\nclass Rectangle(private val width: Double, private val height: Double) : Shape(\"Rectangle\") {\n    fun getWidth(): Double {\n        return width\n    }\n\n    fun getHeight(): Double {\n        return height\n    }\n}\n\nclass Circle(private val radius: Double) : Shape(\"Circle\") {\n    fun getRadius(): Double {\n        return radius\n    }\n}\n\nclass AreaCalculator {\n    fun calculateArea(shape: Shape): Double {\n        return when (shape) {\n            is Rectangle -> shape.getWidth() * shape.getHeight()\n            is Circle -> Math.PI * shape.getRadius() * shape.getRadius()\n            else -> 0.0\n        }\n    }\n}\n",
            "output": "interface Shape {\n    fun getArea(): Double\n}\n\nclass Rectangle(private val width: Double, private val height: Double) : Shape {\n    override fun getArea(): Double {\n        return width * height\n    }\n}\n\nclass Circle(private val radius: Double) : Shape {\n    override fun getArea(): Double {\n        return Math.PI * radius * radius\n    }\n}\n\nclass AreaCalculator {\n    fun calculateArea(shape: Shape): Double {\n        return shape.getArea()\n    }\n}\n",
            "level": "EASY",
            "language": "KOTLIN",
            "violation": "OCP"
        },
        {
            "input": "import kotlin.random.Random\n\nenum class CharacterType {\n    WARRIOR,\n    MAGE,\n    ARCHER\n}\n\nclass GameCharacter(\n    val name: String,\n    val type: CharacterType,\n    val baseAttack: Int\n)\n\nclass DamageCalculator {\n    fun calculateDamage(character: GameCharacter): Int {\n        return when (character.type) {\n            CharacterType.WARRIOR -> (character.baseAttack * 1.5).toInt()\n            CharacterType.MAGE -> character.baseAttack + 20\n            CharacterType.ARCHER -> {\n                val crit = Random.nextBoolean()\n                if (crit) character.baseAttack * 2 else character.baseAttack\n            }\n        }\n    }\n}\n",
            "output": "import java.util.*\n\ninterface DamageDealer {\n    fun calculateDamage(): Int\n    fun getName(): String\n    fun getType(): CharacterType\n}\n\nenum class CharacterType {\n    WARRIOR,\n    MAGE,\n    ARCHER\n}\n\nabstract class GameCharacter(\n    private val name: String,\n    private val type: CharacterType,\n    private val baseAttack: Int\n) : DamageDealer {\n    fun getBaseAttack(): Int = baseAttack\n    override fun getName(): String = name\n    override fun getType(): CharacterType = type\n}\n\nclass Warrior(name: String, baseAttack: Int) : GameCharacter(name, CharacterType.WARRIOR, baseAttack) {\n    override fun calculateDamage(): Int {\n        return (getBaseAttack() * 1.5).toInt()\n    }\n}\n\nclass Mage(name: String, baseAttack: Int) : GameCharacter(name, CharacterType.MAGE, baseAttack) {\n    override fun calculateDamage(): Int {\n        return getBaseAttack() + 20\n    }\n}\n\nclass Archer(name: String, baseAttack: Int) : GameCharacter(name, CharacterType.ARCHER, baseAttack) {\n    private val random = Random()\n\n    override fun calculateDamage(): Int {\n        val crit = random.nextBoolean()\n        return if (crit) getBaseAttack() * 2 else getBaseAttack()\n    }\n}\n",
            "level": "EASY",
            "language": "KOTLIN",
            "violation": "OCP"
        },
        {
            "input": "enum class FoodType {\n    BURGER,\n    FRIES,\n    PIZZA,\n    DRINK\n}\n\nclass FoodItem(\n    val name: String,\n    val type: FoodType\n)\n\nclass PriceCalculator {\n    fun calculatePrice(item: FoodItem): Double {\n        return when (item.type) {\n            FoodType.BURGER -> 5.99\n            FoodType.FRIES -> 2.49\n            FoodType.PIZZA -> 7.99\n            FoodType.DRINK -> 1.50\n        }\n    }\n}\n\nclass Order {\n    private val items = mutableListOf<FoodItem>()\n    fun addItem(item: FoodItem) { items.add(item) }\n    fun getItems(): List<FoodItem> = items\n}\n",
            "output": "interface PricedItem {\n    fun getName(): String\n    fun getPrice(): Double\n}\n\nabstract class FoodItem(private val name: String) : PricedItem {\n    override fun getName(): String = name\n}\n\nclass Burger(name: String) : FoodItem(name) {\n    override fun getPrice(): Double = 5.99\n}\n\nclass Fries(name: String) : FoodItem(name) {\n    override fun getPrice(): Double = 2.49\n}\n\nclass Pizza(name: String) : FoodItem(name) {\n    override fun getPrice(): Double = 7.99\n}\n\nclass Drink(name: String) : FoodItem(name) {\n    override fun getPrice(): Double = 1.50\n}\n\nclass Order {\n    private val items = mutableListOf<FoodItem>()\n    fun addItem(item: FoodItem) { items.add(item) }\n    fun getItems(): List<FoodItem> = items\n}\n",
            "level": "EASY",
            "language": "KOTLIN",
            "violation": "OCP"
        },
        {
            "input": "enum class DeviceType { LIGHT, THERMOSTAT, DOOR_LOCK }\n\nclass SmartDevice(\n    val id: String,\n    val type: DeviceType\n)\n\nclass SmartHomeController {\n    fun turnOn(d: SmartDevice) {\n        when (d.type) {\n            DeviceType.LIGHT -> println(\"Light ${d.id} is ON\")\n            DeviceType.THERMOSTAT -> println(\"Thermostat ${d.id} heating to 22Â°C\")\n            DeviceType.DOOR_LOCK -> println(\"Door lock ${d.id} cannot be turned ON\")\n        }\n    }\n\n    fun energyUsageKwh(d: SmartDevice, minutes: Int): Double {\n        return when (d.type) {\n            DeviceType.LIGHT -> 0.012 * minutes\n            DeviceType.THERMOSTAT -> 0.08 * minutes\n            DeviceType.DOOR_LOCK -> 0.0002 * minutes\n        }\n    }\n}\n\n",
            "output": "interface SmartDevice {\n    fun getId(): String\n    fun turnOn()\n    fun energyUsageKwh(minutes: Int): Double\n}\n\nclass Light(private val id: String) : SmartDevice {\n    override fun getId(): String = id\n\n    override fun turnOn() {\n        println(\"Light $id is ON\")\n    }\n\n    override fun energyUsageKwh(minutes: Int): Double {\n        return 0.012 * minutes\n    }\n}\n\nclass Thermostat(private val id: String) : SmartDevice {\n    override fun getId(): String = id\n\n    override fun turnOn() {\n        println(\"Thermostat $id heating to 22Â°C\")\n    }\n\n    override fun energyUsageKwh(minutes: Int): Double {\n        return 0.08 * minutes\n    }\n}\n\nclass DoorLock(private val id: String) : SmartDevice {\n    override fun getId(): String = id\n\n    override fun turnOn() {\n        println(\"Door lock $id cannot be turned ON\")\n    }\n\n    override fun energyUsageKwh(minutes: Int): Double {\n        return 0.0002 * minutes\n    }\n}\n\nclass SmartHomeController {\n    fun activateDevice(d: SmartDevice) {\n        d.turnOn()\n    }\n\n    fun energyUsageKwh(d: SmartDevice, minutes: Int): Double {\n        return d.energyUsageKwh(minutes)\n    }\n}\n",
            "level": "EASY",
            "language": "KOTLIN",
            "violation": "OCP"
        },
        {
            "input": "import kotlin.math.*\n\nabstract class Entity {\n    companion object {\n        private var NEXT_ID = 1L\n    }\n    val id: Long = NEXT_ID++\n}\n\nabstract class GraphicObject(val color: String, val layer: Int) : Entity()\n\nenum class ShapeKind { RECTANGLE, CIRCLE, TRIANGLE, CUBE, SPHERE }\n\nabstract class Shape(val kind: ShapeKind, color: String, layer: Int) : GraphicObject(color, layer)\nabstract class TwoDShape(kind: ShapeKind, color: String, layer: Int) : Shape(kind, color, layer)\nabstract class ThreeDShape(kind: ShapeKind, color: String, layer: Int) : Shape(kind, color, layer)\n\nclass Rectangle(val width: Double, val height: Double, color: String, layer: Int)\n    : TwoDShape(ShapeKind.RECTANGLE, color, layer)\n\nclass Circle(val radius: Double, color: String, layer: Int)\n    : TwoDShape(ShapeKind.CIRCLE, color, layer)\n\nclass Triangle(val a: Double, val b: Double, val c: Double, color: String, layer: Int)\n    : TwoDShape(ShapeKind.TRIANGLE, color, layer)\n\nclass Cube(val edge: Double, color: String, layer: Int)\n    : ThreeDShape(ShapeKind.CUBE, color, layer)\n\nclass Sphere(val radius: Double, color: String, layer: Int)\n    : ThreeDShape(ShapeKind.SPHERE, color, layer)\n\nenum class Metric { AREA, PERIMETER, VOLUME, DIAGONAL, BOUNDING_BOX_WIDTH }\n\ndata class BoundingBox(val width: Double, val height: Double) {\n    override fun toString(): String = \"BBox(${width}x$height)\"\n}\n\nclass MetricCalculator {\n    fun compute(shape: Shape, metric: Metric): Double {\n        return when (shape.kind) {\n            ShapeKind.RECTANGLE -> {\n                val r = shape as Rectangle\n                when (metric) {\n                    Metric.AREA -> r.width * r.height\n                    Metric.PERIMETER -> 2 * (r.width + r.height)\n                    Metric.DIAGONAL -> hypot(r.width, r.height)\n                    Metric.BOUNDING_BOX_WIDTH -> r.width\n                    Metric.VOLUME -> 0.0\n                }\n            }\n            ShapeKind.CIRCLE -> {\n                val c = shape as Circle\n                when (metric) {\n                    Metric.AREA -> PI * c.radius * c.radius\n                    Metric.PERIMETER -> 2 * PI * c.radius\n                    Metric.DIAGONAL -> 2 * c.radius\n                    Metric.BOUNDING_BOX_WIDTH -> 2 * c.radius\n                    Metric.VOLUME -> 0.0\n                }\n            }\n            ShapeKind.TRIANGLE -> {\n                val t = shape as Triangle\n                val s = (t.a + t.b + t.c) / 2.0\n                when (metric) {\n                    Metric.AREA -> sqrt(max(0.0, s * (s - t.a) * (s - t.b) * (s - t.c)))\n                    Metric.PERIMETER -> t.a + t.b + t.c\n                    Metric.DIAGONAL -> maxOf(t.a, t.b, t.c)\n                    Metric.BOUNDING_BOX_WIDTH -> maxOf(t.a, t.b, t.c)\n                    Metric.VOLUME -> 0.0\n                }\n            }\n            ShapeKind.CUBE -> {\n                val cube = shape as Cube\n                when (metric) {\n                    Metric.AREA -> 6 * cube.edge * cube.edge\n                    Metric.PERIMETER -> 12 * cube.edge\n                    Metric.VOLUME -> cube.edge.pow(3)\n                    Metric.DIAGONAL -> sqrt(3.0) * cube.edge\n                    Metric.BOUNDING_BOX_WIDTH -> cube.edge\n                }\n            }\n            ShapeKind.SPHERE -> {\n                val s = shape as Sphere\n                when (metric) {\n                    Metric.AREA -> 4 * PI * s.radius * s.radius\n                    Metric.PERIMETER -> 0.0\n                    Metric.VOLUME -> (4.0 / 3.0) * PI * s.radius.pow(3)\n                    Metric.DIAGONAL -> 2 * s.radius\n                    Metric.BOUNDING_BOX_WIDTH -> 2 * s.radius\n                }\n            }\n        }\n    }\n}\n\nclass ShapeValidator {\n    fun isValid(shape: Shape): Boolean {\n        return when (shape.kind) {\n            ShapeKind.RECTANGLE -> {\n                val r = shape as Rectangle\n                r.width > 0 && r.height > 0\n            }\n            ShapeKind.CIRCLE -> (shape as Circle).radius > 0\n            ShapeKind.TRIANGLE -> {\n                val t = shape as Triangle\n                t.a > 0 && t.b > 0 && t.c > 0 &&\n                t.a + t.b > t.c && t.a + t.c > t.b && t.b + t.c > t.a\n            }\n            ShapeKind.CUBE -> (shape as Cube).edge > 0\n            ShapeKind.SPHERE -> (shape as Sphere).radius > 0\n        }\n    }\n}\n\nclass ShapeRenderer {\n    fun renderPseudoSvg(shape: Shape): String {\n        return when (shape.kind) {\n            ShapeKind.RECTANGLE -> {\n                val r = shape as Rectangle\n                \"<rect w=\\\"${r.width}\\\" h=\\\"${r.height}\\\" fill=\\\"${shape.color}\\\" layer=\\\"${shape.layer}\\\"/>\"\n            }\n            ShapeKind.CIRCLE -> {\n                val c = shape as Circle\n                \"<circle r=\\\"${c.radius}\\\" fill=\\\"${shape.color}\\\" layer=\\\"${shape.layer}\\\"/>\"\n            }\n            ShapeKind.TRIANGLE -> {\n                val t = shape as Triangle\n                \"<polygon a=\\\"${t.a}\\\" b=\\\"${t.b}\\\" c=\\\"${t.c}\\\" fill=\\\"${shape.color}\\\" layer=\\\"${shape.layer}\\\"/>\"\n            }\n            ShapeKind.CUBE -> {\n                val cube = shape as Cube\n                \"<cube edge=\\\"${cube.edge}\\\" materialColor=\\\"${shape.color}\\\" layer=\\\"${shape.layer}\\\"/>\"\n            }\n            ShapeKind.SPHERE -> {\n                val s = shape as Sphere\n                \"<sphere r=\\\"${s.radius}\\\" materialColor=\\\"${shape.color}\\\" layer=\\\"${shape.layer}\\\"/>\"\n            }\n        }\n    }\n}\n\nclass ShapeSerializer {\n    fun toCsvRow(shape: Shape): String {\n        return when (shape.kind) {\n            ShapeKind.RECTANGLE -> {\n                val r = shape as Rectangle\n                \"rectangle,${r.width},${r.height},${shape.color},${shape.layer}\"\n            }\n            ShapeKind.CIRCLE -> {\n                val c = shape as Circle\n                \"circle,${c.radius},${shape.color},${shape.layer}\"\n            }\n            ShapeKind.TRIANGLE -> {\n                val t = shape as Triangle\n                \"triangle,${t.a},${t.b},${t.c},${shape.color},${shape.layer}\"\n            }\n            ShapeKind.CUBE -> {\n                val cube = shape as Cube\n                \"cube,${cube.edge},${shape.color},${shape.layer}\"\n            }\n            ShapeKind.SPHERE -> {\n                val s = shape as Sphere\n                \"sphere,${s.radius},${shape.color},${shape.layer}\"\n            }\n        }\n    }\n}\n\nclass ShapeFactory {\n    fun create(spec: String): Shape {\n        val parts = spec.split(\";\")\n        val type = parts[0].trim().lowercase()\n        val map = parts.drop(1).associate {\n            val (k, v) = it.split(\"=\")\n            k.trim().lowercase() to v.trim()\n        }\n        val color = map.getOrDefault(\"color\", \"black\")\n        val layer = map.getOrDefault(\"layer\", \"0\").toInt()\n\n        return when (type) {\n            \"rectangle\" -> Rectangle(\n                map.getOrDefault(\"width\", \"0\").toDouble(),\n                map.getOrDefault(\"height\", \"0\").toDouble(),\n                color, layer\n            )\n            \"circle\" -> Circle(\n                map.getOrDefault(\"radius\", \"0\").toDouble(),\n                color, layer\n            )\n            \"triangle\" -> Triangle(\n                map.getOrDefault(\"a\", \"0\").toDouble(),\n                map.getOrDefault(\"b\", \"0\").toDouble(),\n                map.getOrDefault(\"c\", \"0\").toDouble(),\n                color, layer\n            )\n            \"cube\" -> Cube(\n                map.getOrDefault(\"edge\", \"0\").toDouble(),\n                color, layer\n            )\n            \"sphere\" -> Sphere(\n                map.getOrDefault(\"radius\", \"0\").toDouble(),\n                color, layer\n            )\n            else -> throw IllegalArgumentException(\"Unknown shape type: $type\")\n        }\n    }\n}\n\nclass ShapePricing {\n    private val calc = MetricCalculator()\n    fun price(shape: Shape): Double = when (shape.kind) {\n        ShapeKind.RECTANGLE -> 0.5 * calc.compute(shape, Metric.AREA) + shape.layer * 2\n        ShapeKind.CIRCLE -> 0.6 * calc.compute(shape, Metric.AREA) + 0.1 * calc.compute(shape, Metric.DIAGONAL)\n        ShapeKind.TRIANGLE -> 0.8 * calc.compute(shape, Metric.PERIMETER)\n        ShapeKind.CUBE -> 1.2 * calc.compute(shape, Metric.VOLUME)\n        ShapeKind.SPHERE -> 1.0 * calc.compute(shape, Metric.VOLUME) + 10\n    }\n}\n\nclass LegendBuilder {\n    fun legendSymbol(shape: Shape): String = when (shape.kind) {\n        ShapeKind.RECTANGLE -> \"â­\"\n        ShapeKind.CIRCLE -> \"â¯\"\n        ShapeKind.TRIANGLE -> \"â³\"\n        ShapeKind.CUBE -> \"â¬\"\n        ShapeKind.SPHERE -> \"â¯\"\n    }\n}\n\nclass CollisionEngine {\n    fun boundingBox(shape: Shape): BoundingBox = when (shape.kind) {\n        ShapeKind.RECTANGLE -> {\n            val r = shape as Rectangle\n            BoundingBox(r.width, r.height)\n        }\n        ShapeKind.CIRCLE -> {\n            val c = shape as Circle\n            val d = 2 * c.radius\n            BoundingBox(d, d)\n        }\n        ShapeKind.TRIANGLE -> {\n            val t = shape as Triangle\n            val max = maxOf(t.a, t.b, t.c)\n            val avg = (t.a + t.b + t.c - max) / 2.0\n            BoundingBox(max, avg)\n        }\n        ShapeKind.CUBE -> {\n            val cube = shape as Cube\n            BoundingBox(cube.edge, cube.edge)\n        }\n        ShapeKind.SPHERE -> {\n            val s = shape as Sphere\n            val d = 2 * s.radius\n            BoundingBox(d, d)\n        }\n    }\n\n    fun overlaps(a: Shape, b: Shape): Boolean {\n        val A = boundingBox(a)\n        val B = boundingBox(b)\n        return A.width * A.height > 0 && B.width * B.height > 0\n    }\n}\n\nclass ShapeReport {\n    private val calc = MetricCalculator()\n    private val ser = ShapeSerializer()\n    private val rnd = ShapeRenderer()\n    private val col = CollisionEngine()\n    private val price = ShapePricing()\n    private val legend = LegendBuilder()\n\n    fun summarize(shapes: List<Shape>): String {\n        val sb = StringBuilder(\"=== Shape Report (OCP-violating) ===\\n\")\n        for (s in shapes) {\n            sb.append(\"ID ${s.id} ${s.kind} color=${s.color} layer=${s.layer}\\n\")\n            sb.append(\"  CSV: ${ser.toCsvRow(s)}\\n\")\n            sb.append(\"  SVG: ${rnd.renderPseudoSvg(s)}\\n\")\n            sb.append(\"  Legend: ${legend.legendSymbol(s)}\\n\")\n            sb.append(\"  Metrics: area=${calc.compute(s, Metric.AREA)} perim=${calc.compute(s, Metric.PERIMETER)} diag=${calc.compute(s, Metric.DIAGONAL)}\")\n            if (s is ThreeDShape) sb.append(\" vol=${calc.compute(s, Metric.VOLUME)}\")\n            sb.append(\"\\n\")\n            sb.append(\"  BBox: ${col.boundingBox(s)}\\n\")\n            sb.append(\"  Price: ${price.price(s)}\\n\\n\")\n        }\n        return sb.toString()\n    }\n}\n\n",
            "output": "import kotlin.math.*\n\nabstract class Entity {\n    companion object {\n        private var NEXT_ID = 1L\n    }\n    private val id: Long\n    init { this.id = NEXT_ID++ }\n    fun getId(): Long = id\n}\n\nabstract class GraphicObject(private val color: String, private val layer: Int) : Entity() {\n    fun getColor(): String = color\n    fun getLayer(): Int = layer\n}\n\nenum class ShapeKind { RECTANGLE, CIRCLE, TRIANGLE, CUBE, SPHERE }\n\ndata class BoundingBox(val width: Double, val height: Double) {\n    override fun toString(): String = \"BBox(${width}x${height})\"\n}\n\ninterface HasWidthHeight { fun getWidth(): Double; fun getHeight(): Double }\ninterface HasRadius { fun getRadius(): Double }\ninterface HasTriangleSides { fun getA(): Double; fun getB(): Double; fun getC(): Double }\ninterface HasEdge { fun getEdge(): Double }\n\nabstract class Shape(private val kind: ShapeKind, color: String, layer: Int) : GraphicObject(color, layer) {\n    fun getKind(): ShapeKind = kind\n    abstract fun isValid(): Boolean\n    abstract fun renderPseudoSvg(): String\n    abstract fun toCsvRow(): String\n    abstract fun legendSymbol(): String\n    abstract fun boundingBox(): BoundingBox\n    abstract fun price(calc: MetricCalculator): Double\n}\n\nabstract class TwoDShape(kind: ShapeKind, color: String, layer: Int) : Shape(kind, color, layer)\nabstract class ThreeDShape(kind: ShapeKind, color: String, layer: Int) : Shape(kind, color, layer)\n\nclass Rectangle(private val width: Double, private val height: Double, color: String, layer: Int) \n    : TwoDShape(ShapeKind.RECTANGLE, color, layer), HasWidthHeight {\n    override fun getWidth(): Double = width\n    override fun getHeight(): Double = height\n    override fun isValid(): Boolean = width > 0 && height > 0\n    override fun renderPseudoSvg(): String = \"<rect w=\\\"$width\\\" h=\\\"$height\\\" fill=\\\"${getColor()}\\\" layer=\\\"${getLayer()}\\\"/>\"\n    override fun toCsvRow(): String = \"rectangle,$width,$height,${getColor()},${getLayer()}\"\n    override fun legendSymbol(): String = \"â­\"\n    override fun boundingBox(): BoundingBox = BoundingBox(width, height)\n    override fun price(calc: MetricCalculator): Double {\n        val area = calc.compute(this, \"area\")\n        return 0.5 * area + getLayer() * 2\n    }\n}\n\nclass Circle(private val radius: Double, color: String, layer: Int) \n    : TwoDShape(ShapeKind.CIRCLE, color, layer), HasRadius {\n    override fun getRadius(): Double = radius\n    override fun isValid(): Boolean = radius > 0\n    override fun renderPseudoSvg(): String = \"<circle r=\\\"$radius\\\" fill=\\\"${getColor()}\\\" layer=\\\"${getLayer()}\\\"/>\"\n    override fun toCsvRow(): String = \"circle,$radius,${getColor()},${getLayer()}\"\n    override fun legendSymbol(): String = \"â¯\"\n    override fun boundingBox(): BoundingBox {\n        val d = 2 * radius\n        return BoundingBox(d, d)\n    }\n    override fun price(calc: MetricCalculator): Double {\n        val area = calc.compute(this, \"area\")\n        val diag = calc.compute(this, \"diagonal\")\n        return 0.6 * area + 0.1 * diag\n    }\n}\n\nclass Triangle(private val a: Double, private val b: Double, private val c: Double, color: String, layer: Int) \n    : TwoDShape(ShapeKind.TRIANGLE, color, layer), HasTriangleSides {\n    override fun getA(): Double = a\n    override fun getB(): Double = b\n    override fun getC(): Double = c\n    override fun isValid(): Boolean = a > 0 && b > 0 && c > 0 && a + b > c && a + c > b && b + c > a\n    override fun renderPseudoSvg(): String = \"<polygon a=\\\"$a\\\" b=\\\"$b\\\" c=\\\"$c\\\" fill=\\\"${getColor()}\\\" layer=\\\"${getLayer()}\\\"/>\"\n    override fun toCsvRow(): String = \"triangle,$a,$b,$c,${getColor()},${getLayer()}\"\n    override fun legendSymbol(): String = \"â³\"\n    override fun boundingBox(): BoundingBox {\n        val max = maxOf(a, b, c)\n        val avg = (a + b + c - max) / 2.0\n        return BoundingBox(max, avg)\n    }\n    override fun price(calc: MetricCalculator): Double {\n        val per = calc.compute(this, \"perimeter\")\n        return per * 0.8\n    }\n}\n\nclass Cube(private val edge: Double, color: String, layer: Int) \n    : ThreeDShape(ShapeKind.CUBE, color, layer), HasEdge {\n    override fun getEdge(): Double = edge\n    override fun isValid(): Boolean = edge > 0\n    override fun renderPseudoSvg(): String = \"<cube edge=\\\"$edge\\\" materialColor=\\\"${getColor()}\\\" layer=\\\"${getLayer()}\\\"/>\"\n    override fun toCsvRow(): String = \"cube,$edge,${getColor()},${getLayer()}\"\n    override fun legendSymbol(): String = \"â¬\"\n    override fun boundingBox(): BoundingBox = BoundingBox(edge, edge)\n    override fun price(calc: MetricCalculator): Double {\n        val vol = calc.compute(this, \"volume\")\n        return 1.2 * vol\n    }\n}\n\nclass Sphere(private val radius: Double, color: String, layer: Int) \n    : ThreeDShape(ShapeKind.SPHERE, color, layer), HasRadius {\n    override fun getRadius(): Double = radius\n    override fun isValid(): Boolean = radius > 0\n    override fun renderPseudoSvg(): String = \"<sphere r=\\\"$radius\\\" materialColor=\\\"${getColor()}\\\" layer=\\\"${getLayer()}\\\"/>\"\n    override fun toCsvRow(): String = \"sphere,$radius,${getColor()},${getLayer()}\"\n    override fun legendSymbol(): String = \"â¯\"\n    override fun boundingBox(): BoundingBox {\n        val d = 2 * radius\n        return BoundingBox(d, d)\n    }\n    override fun price(calc: MetricCalculator): Double {\n        val vol = calc.compute(this, \"volume\")\n        return 1.0 * vol + 10\n    }\n}\n\nclass RegisteredMetric(private val name: String) {\n    private val handlers = linkedMapOf<Class<*>, (Any) -> Double>()\n    fun name(): String = name\n    fun <T> on(type: Class<T>, fn: (T) -> Double): RegisteredMetric {\n        handlers[type] = { o -> fn(type.cast(o)) }\n        return this\n    }\n    fun apply(s: Shape): Double {\n        for ((key, value) in handlers) {\n            if (key.isInstance(s)) return value(s)\n        }\n        return 0.0\n    }\n}\n\nclass MetricCalculator {\n    private val metrics = hashMapOf<String, RegisteredMetric>()\n    fun register(metric: RegisteredMetric) { metrics[metric.name()] = metric }\n    fun compute(shape: Shape, metricName: String): Double {\n        val m = metrics[metricName] ?: throw IllegalArgumentException(\"Unknown metric: $metricName\")\n        return m.apply(shape)\n    }\n}\n\nclass ShapeValidator { fun isValid(shape: Shape): Boolean = shape.isValid() }\nclass ShapeRenderer { fun renderPseudoSvg(shape: Shape): String = shape.renderPseudoSvg() }\nclass ShapeSerializer { fun toCsvRow(shape: Shape): String = shape.toCsvRow() }\n\nclass ShapeFactory {\n    fun interface Creator { fun create(map: Map<String, String>, color: String, layer: Int): Shape }\n    private val creators = hashMapOf<String, Creator>()\n    fun register(type: String, c: Creator) { creators[type.lowercase()] = c }\n    fun create(spec: String): Shape {\n        val parts = spec.split(\";\")\n        val type = parts[0].trim().lowercase()\n        val map = hashMapOf<String, String>()\n        for (i in 1 until parts.size) {\n            val kv = parts[i].split(\"=\")\n            if (kv.size == 2) map[kv[0].trim().lowercase()] = kv[1].trim()\n        }\n        val color = map.getOrDefault(\"color\", \"black\")\n        val layer = map.getOrDefault(\"layer\", \"0\").toInt()\n        val c = creators[type] ?: throw IllegalArgumentException(\"Unknown shape type: $type\")\n        return c.create(map, color, layer)\n    }\n}\n\nclass ShapePricing(private val calc: MetricCalculator) {\n    fun price(shape: Shape): Double = shape.price(calc)\n}\n\nclass LegendBuilder { fun legendSymbol(shape: Shape): String = shape.legendSymbol() }\n\nclass CollisionEngine {\n    fun boundingBox(shape: Shape): BoundingBox = shape.boundingBox()\n    fun overlaps(a: Shape, b: Shape): Boolean {\n        val A = boundingBox(a)\n        val B = boundingBox(b)\n        return (A.width * A.height) > 0 && (B.width * B.height) > 0\n    }\n}\n\nclass ShapeReport(private val calc: MetricCalculator) {\n    private val ser = ShapeSerializer()\n    private val rnd = ShapeRenderer()\n    private val col = CollisionEngine()\n    private val price = ShapePricing(calc)\n    private val legend = LegendBuilder()\n    \n    fun summarize(shapes: List<Shape>): String {\n        val sb = StringBuilder()\n        sb.append(\"=== Shape Report (OCP-violating) ===\\n\")\n        for (s in shapes) {\n            sb.append(\"ID \").append(s.getId())\n              .append(\" \").append(s.getKind())\n              .append(\" color=\").append(s.getColor())\n              .append(\" layer=\").append(s.getLayer()).append(\"\\n\")\n\n            sb.append(\"  CSV: \").append(ser.toCsvRow(s)).append(\"\\n\")\n            sb.append(\"  SVG: \").append(rnd.renderPseudoSvg(s)).append(\"\\n\")\n            sb.append(\"  Legend: \").append(legend.legendSymbol(s)).append(\"\\n\")\n\n            sb.append(\"  Metrics: \")\n            sb.append(\" area=\").append(calc.compute(s, \"area\"))\n            sb.append(\" perim=\").append(calc.compute(s, \"perimeter\"))\n            sb.append(\" diag=\").append(calc.compute(s, \"diagonal\"))\n            if (s is ThreeDShape) {\n                sb.append(\" vol=\").append(calc.compute(s, \"volume\"))\n            }\n            sb.append(\"\\n\")\n\n            sb.append(\"  BBox: \").append(col.boundingBox(s)).append(\"\\n\")\n            sb.append(\"  Price: \").append(price.price(s)).append(\"\\n\\n\")\n        }\n        return sb.toString()\n    }\n}\n",
            "level": "HARD",
            "language": "KOTLIN",
            "violation": "OCP"
        },
        {
            "input": "import java.util.*\n\nenum class CharacterType { WARRIOR, MAGE, ARCHER, ROGUE }\nenum class SkillType { BASIC, SPECIAL, SUPPORT }\nenum class WeaponType { SWORD, STAFF, BOW, DAGGER }\nenum class PetType { WOLF, FAIRY, HAWK, SHADOW_CAT }\n\ndata class Stats(var hp: Int, var mp: Int, var atk: Int, var mag: Int, var def: Int, var res: Int, var spd: Int, var crit: Int) {\n    fun copy() = Stats(hp, mp, atk, mag, def, res, spd, crit)\n}\n\ndata class Skill(val name: String, val type: SkillType, val cost: Int)\ndata class Weapon(val name: String, val type: WeaponType, val power: Int)\ndata class Pet(val name: String, val type: PetType, val bond: Int)\ndata class Enemy(val name: String, val stats: Stats)\n\ndata class GameCharacter(\n    val name: String,\n    val type: CharacterType,\n    val level: Int,\n    val stats: Stats,\n    val skills: List<Skill>,\n    val weapon: Weapon,\n    val pet: Pet\n)\n\nclass PetBoostSystem {\n    fun offenseBoost(c: GameCharacter): Int = when (c.pet.type) {\n        PetType.WOLF -> (c.stats.atk * minOf(0.25, 0.05 + c.pet.bond / 100.0)).toInt()\n        PetType.FAIRY -> (c.stats.mag * minOf(0.25, 0.05 + c.pet.bond / 120.0)).toInt()\n        PetType.HAWK -> c.stats.spd / 3 + c.pet.bond / 6\n        PetType.SHADOW_CAT -> 5 + c.pet.bond / 5\n    }\n\n    fun defenseBoost(c: GameCharacter): Int = when (c.pet.type) {\n        PetType.WOLF -> c.stats.def / 6\n        PetType.FAIRY -> c.stats.res / 4\n        PetType.HAWK -> c.stats.spd / 6\n        PetType.SHADOW_CAT -> 3\n    }\n\n    fun petAssist(c: GameCharacter): Boolean = when (c.pet.type) {\n        PetType.WOLF -> Random().nextInt(100) < minOf(35, 10 + c.pet.bond / 3)\n        PetType.FAIRY -> Random().nextInt(100) < minOf(40, 15 + c.pet.bond / 2)\n        PetType.HAWK -> Random().nextInt(100) < minOf(30, 8 + c.pet.bond / 4)\n        PetType.SHADOW_CAT -> Random().nextInt(100) < minOf(45, 12 + c.pet.bond / 2)\n    }\n\n    fun petAssistDamage(c: GameCharacter): Int = when (c.pet.type) {\n        PetType.WOLF -> 6 + c.pet.bond / 4\n        PetType.FAIRY -> 4 + c.pet.bond / 5\n        PetType.HAWK -> 5 + c.pet.bond / 6\n        PetType.SHADOW_CAT -> 7 + c.pet.bond / 5\n    }\n\n    fun petAssistHeal(c: GameCharacter): Int = when (c.pet.type) {\n        PetType.FAIRY -> 8 + c.pet.bond / 3\n        else -> 0\n    }\n}\n\nclass WeaponRuleSet {\n    fun applyWeapon(c: GameCharacter, base: Int): Int = when (c.weapon.type) {\n        WeaponType.SWORD -> base + c.weapon.power + c.stats.atk / 4\n        WeaponType.STAFF -> base + c.weapon.power / 2 + c.stats.mag / 2\n        WeaponType.BOW -> base + c.weapon.power + c.stats.spd / 3\n        WeaponType.DAGGER -> base + c.weapon.power + c.stats.spd / 2\n    }\n\n    fun critChance(c: GameCharacter): Int = when (c.weapon.type) {\n        WeaponType.SWORD -> 8 + c.stats.crit\n        WeaponType.STAFF -> 5 + c.stats.crit / 2\n        WeaponType.BOW -> 15 + c.stats.crit\n        WeaponType.DAGGER -> 18 + c.stats.crit\n    }\n}\n\nclass DamageCalculator {\n    private val rng = Random()\n    private val wr = WeaponRuleSet()\n    private val pets = PetBoostSystem()\n\n    fun calc(c: GameCharacter, s: Skill, e: Enemy): Int {\n        var base = when (c.type) {\n            CharacterType.WARRIOR -> (c.stats.atk * (1.1 + c.level * 0.03)).toInt() - e.stats.def / 3 + if (s.type == SkillType.SPECIAL) 12 else 0\n            CharacterType.MAGE -> c.stats.mag * 2 + if (s.type == SkillType.SPECIAL) 18 else 0 - e.stats.res / 2\n            CharacterType.ARCHER -> c.stats.atk + c.stats.spd / 2 + if (s.type == SkillType.SPECIAL) 10 else 0 - e.stats.def / 4\n            CharacterType.ROGUE -> c.stats.atk + c.stats.spd + if (s.type == SkillType.SPECIAL) 14 else 0 - e.stats.def / 5\n        }\n        base = wr.applyWeapon(c, base)\n        base += pets.offenseBoost(c)\n        if (pets.petAssist(c)) base += pets.petAssistDamage(c)\n        val critChance = wr.critChance(c) + if (c.type == CharacterType.ARCHER) 10 else 0\n        if (rng.nextInt(100) < critChance) base *= 2\n        return maxOf(0, base)\n    }\n}\n\nclass HealCalculator {\n    private val pets = PetBoostSystem()\n    fun heal(c: GameCharacter, s: Skill): Int {\n        var amt = when (c.type) {\n            CharacterType.WARRIOR -> c.stats.atk / 3 + 6\n            CharacterType.MAGE -> c.stats.mag + 14\n            CharacterType.ARCHER -> c.stats.atk / 4 + c.stats.spd / 5\n            CharacterType.ROGUE -> c.stats.atk / 2\n        }\n        if (s.type == SkillType.SPECIAL) amt += 6\n        amt += pets.defenseBoost(c) / 2 + pets.petAssistHeal(c)\n        return maxOf(0, amt)\n    }\n}\n\nclass LootCalculator {\n    fun gold(c: GameCharacter, e: Enemy): Int = when (c.type) {\n        CharacterType.WARRIOR -> 10 + c.level + e.stats.def / 5\n        CharacterType.MAGE -> 9 + c.level * 2 + e.stats.res / 4\n        CharacterType.ARCHER -> 11 + c.level + e.stats.def / 6\n        CharacterType.ROGUE -> 14 + c.level\n    }\n}\n\nclass TargetingSystem {\n    fun pick(enemies: List<Enemy>): Enemy {\n        var t = enemies[0]\n        for (e in enemies) if (e.stats.hp < t.stats.hp) t = e\n        return t\n    }\n}\n\nclass SkillSelector {\n    fun choose(c: GameCharacter): Skill = c.skills.firstOrNull { it.type != SkillType.BASIC } ?: c.skills[0]\n}\n\nclass TurnEngine {\n    private val dmg = DamageCalculator()\n    private val healCalc = HealCalculator()\n    private val loot = LootCalculator()\n    private val targeting = TargetingSystem()\n    private val selector = SkillSelector()\n\n    fun turn(party: List<GameCharacter>, enemies: MutableList<Enemy>) {\n        for (c in party) {\n            val s = selector.choose(c)\n            if (s.type == SkillType.SUPPORT) {\n                val h = healCalc.heal(c, s)\n                c.stats.hp += h\n                continue\n            }\n            val target = targeting.pick(enemies)\n            val d = dmg.calc(c, s, target)\n            target.stats.hp = maxOf(0, target.stats.hp - d)\n        }\n    }\n\n    fun totalGold(party: List<GameCharacter>, e: Enemy): Int = party.sumOf { loot.gold(it, e) }\n}\n\n",
            "output": "import java.util.EnumMap\nimport java.util.Random\n\nenum class CharacterType { WARRIOR, MAGE, ARCHER, ROGUE }\nenum class SkillType { BASIC, SPECIAL, SUPPORT }\nenum class WeaponType { SWORD, STAFF, BOW, DAGGER }\nenum class PetType { WOLF, FAIRY, HAWK, SHADOW_CAT }\n\ndata class Stats(var hp: Int, var mp: Int, var atk: Int, var mag: Int, var def: Int, var res: Int, var spd: Int, var crit: Int)\n\ndata class Skill(val name: String, val type: SkillType, val cost: Int)\n\ndata class Weapon(val name: String, val type: WeaponType, val power: Int)\n\ndata class Pet(val name: String, val type: PetType, val bond: Int)\n\ndata class Enemy(val name: String, val stats: Stats)\n\ninterface PetLogic {\n    fun offenseBoost(c: GameCharacter): Int\n    fun defenseBoost(c: GameCharacter): Int\n    fun assist(c: GameCharacter): Boolean\n    fun assistDamage(c: GameCharacter): Int\n    fun assistHeal(c: GameCharacter): Int\n}\n\nclass WolfPetLogic : PetLogic {\n    override fun offenseBoost(c: GameCharacter): Int {\n        return (c.stats.atk * kotlin.math.min(0.25, 0.05 + c.pet.bond / 100.0)).toInt()\n    }\n    override fun defenseBoost(c: GameCharacter): Int {\n        return c.stats.def / 6\n    }\n    override fun assist(c: GameCharacter): Boolean {\n        return Random().nextInt(100) < kotlin.math.min(35, 10 + c.pet.bond / 3)\n    }\n    override fun assistDamage(c: GameCharacter): Int {\n        return 6 + c.pet.bond / 4\n    }\n    override fun assistHeal(c: GameCharacter): Int {\n        return 0\n    }\n}\n\nclass FairyPetLogic : PetLogic {\n    override fun offenseBoost(c: GameCharacter): Int {\n        return (c.stats.mag * kotlin.math.min(0.25, 0.05 + c.pet.bond / 120.0)).toInt()\n    }\n    override fun defenseBoost(c: GameCharacter): Int {\n        return c.stats.res / 4\n    }\n    override fun assist(c: GameCharacter): Boolean {\n        return Random().nextInt(100) < kotlin.math.min(40, 15 + c.pet.bond / 2)\n    }\n    override fun assistDamage(c: GameCharacter): Int {\n        return 4 + c.pet.bond / 5\n    }\n    override fun assistHeal(c: GameCharacter): Int {\n        return 8 + c.pet.bond / 3\n    }\n}\n\nclass HawkPetLogic : PetLogic {\n    override fun offenseBoost(c: GameCharacter): Int {\n        return c.stats.spd / 3 + c.pet.bond / 6\n    }\n    override fun defenseBoost(c: GameCharacter): Int {\n        return c.stats.spd / 6\n    }\n    override fun assist(c: GameCharacter): Boolean {\n        return Random().nextInt(100) < kotlin.math.min(30, 8 + c.pet.bond / 4)\n    }\n    override fun assistDamage(c: GameCharacter): Int {\n        return 5 + c.pet.bond / 6\n    }\n    override fun assistHeal(c: GameCharacter): Int {\n        return 0\n    }\n}\n\nclass ShadowCatPetLogic : PetLogic {\n    override fun offenseBoost(c: GameCharacter): Int {\n        return 5 + c.pet.bond / 5\n    }\n    override fun defenseBoost(c: GameCharacter): Int {\n        return 3\n    }\n    override fun assist(c: GameCharacter): Boolean {\n        return Random().nextInt(100) < kotlin.math.min(45, 12 + c.pet.bond / 2)\n    }\n    override fun assistDamage(c: GameCharacter): Int {\n        return 7 + c.pet.bond / 5\n    }\n    override fun assistHeal(c: GameCharacter): Int {\n        return 0\n    }\n}\n\nobject PetLogicRegistry {\n    private val map: EnumMap<PetType, PetLogic> = EnumMap<PetType, PetLogic>(PetType::class.java).apply {\n        put(PetType.WOLF, WolfPetLogic())\n        put(PetType.FAIRY, FairyPetLogic())\n        put(PetType.HAWK, HawkPetLogic())\n        put(PetType.SHADOW_CAT, ShadowCatPetLogic())\n    }\n    fun of(t: PetType): PetLogic = map[t]!!\n}\n\ninterface WeaponLogic {\n    fun applyWeapon(c: GameCharacter, base: Int): Int\n    fun critChance(c: GameCharacter): Int\n}\n\nclass SwordLogic : WeaponLogic {\n    override fun applyWeapon(c: GameCharacter, base: Int): Int {\n        return base + c.weapon.power + c.stats.atk / 4\n    }\n    override fun critChance(c: GameCharacter): Int {\n        return 8 + c.stats.crit\n    }\n}\n\nclass StaffLogic : WeaponLogic {\n    override fun applyWeapon(c: GameCharacter, base: Int): Int {\n        return base + c.weapon.power / 2 + c.stats.mag / 2\n    }\n    override fun critChance(c: GameCharacter): Int {\n        return 5 + c.stats.crit / 2\n    }\n}\n\nclass BowLogic : WeaponLogic {\n    override fun applyWeapon(c: GameCharacter, base: Int): Int {\n        return base + c.weapon.power + c.stats.spd / 3\n    }\n    override fun critChance(c: GameCharacter): Int {\n        return 15 + c.stats.crit\n    }\n}\n\nclass DaggerLogic : WeaponLogic {\n    override fun applyWeapon(c: GameCharacter, base: Int): Int {\n        return base + c.weapon.power + c.stats.spd / 2\n    }\n    override fun critChance(c: GameCharacter): Int {\n        return 18 + c.stats.crit\n    }\n}\n\nobject WeaponLogicRegistry {\n    private val map: EnumMap<WeaponType, WeaponLogic> = EnumMap<WeaponType, WeaponLogic>(WeaponType::class.java).apply {\n        put(WeaponType.SWORD, SwordLogic())\n        put(WeaponType.STAFF, StaffLogic())\n        put(WeaponType.BOW, BowLogic())\n        put(WeaponType.DAGGER, DaggerLogic())\n    }\n    fun of(t: WeaponType): WeaponLogic = map[t]!!\n}\n\ninterface RoleLogic {\n    fun baseDamage(c: GameCharacter, s: Skill, e: Enemy): Int\n    fun baseHeal(c: GameCharacter, s: Skill): Int\n    fun gold(c: GameCharacter, e: Enemy): Int\n    fun extraCrit(c: GameCharacter): Int\n}\n\nclass WarriorLogic : RoleLogic {\n    override fun baseDamage(c: GameCharacter, s: Skill, e: Enemy): Int {\n        var base = (c.stats.atk * (1.1 + c.level * 0.03)).toInt() - e.stats.def / 3\n        if (s.type == SkillType.SPECIAL) base += 12\n        return base\n    }\n    override fun baseHeal(c: GameCharacter, s: Skill): Int {\n        var amt = c.stats.atk / 3 + 6\n        if (s.type == SkillType.SPECIAL) amt += 6\n        return amt\n    }\n    override fun gold(c: GameCharacter, e: Enemy): Int {\n        return 10 + c.level + e.stats.def / 5\n    }\n    override fun extraCrit(c: GameCharacter): Int = 0\n}\n\nclass MageLogic : RoleLogic {\n    override fun baseDamage(c: GameCharacter, s: Skill, e: Enemy): Int {\n        val base = c.stats.mag * 2 + if (s.type == SkillType.SPECIAL) 18 else 0 - e.stats.res / 2\n        return base\n    }\n    override fun baseHeal(c: GameCharacter, s: Skill): Int {\n        var amt = c.stats.mag + 14\n        if (s.type == SkillType.SPECIAL) amt += 6\n        return amt\n    }\n    override fun gold(c: GameCharacter, e: Enemy): Int {\n        return 9 + c.level * 2 + e.stats.res / 4\n    }\n    override fun extraCrit(c: GameCharacter): Int = 0\n}\n\nclass ArcherLogic : RoleLogic {\n    override fun baseDamage(c: GameCharacter, s: Skill, e: Enemy): Int {\n        val base = c.stats.atk + c.stats.spd / 2 + if (s.type == SkillType.SPECIAL) 10 else 0 - e.stats.def / 4\n        return base\n    }\n    override fun baseHeal(c: GameCharacter, s: Skill): Int {\n        var amt = c.stats.atk / 4 + c.stats.spd / 5\n        if (s.type == SkillType.SPECIAL) amt += 6\n        return amt\n    }\n    override fun gold(c: GameCharacter, e: Enemy): Int {\n        return 11 + c.level + e.stats.def / 6\n    }\n    override fun extraCrit(c: GameCharacter): Int = 10\n}\n\nclass RogueLogic : RoleLogic {\n    override fun baseDamage(c: GameCharacter, s: Skill, e: Enemy): Int {\n        val base = c.stats.atk + c.stats.spd + if (s.type == SkillType.SPECIAL) 14 else 0 - e.stats.def / 5\n        return base\n    }\n    override fun baseHeal(c: GameCharacter, s: Skill): Int {\n        var amt = c.stats.atk / 2\n        if (s.type == SkillType.SPECIAL) amt += 6\n        return amt\n    }\n    override fun gold(c: GameCharacter, e: Enemy): Int {\n        return 14 + c.level\n    }\n    override fun extraCrit(c: GameCharacter): Int = 0\n}\n\nobject RoleLogicRegistry {\n    private val map: EnumMap<CharacterType, RoleLogic> = EnumMap<CharacterType, RoleLogic>(CharacterType::class.java).apply {\n        put(CharacterType.WARRIOR, WarriorLogic())\n        put(CharacterType.MAGE, MageLogic())\n        put(CharacterType.ARCHER, ArcherLogic())\n        put(CharacterType.ROGUE, RogueLogic())\n    }\n    fun of(t: CharacterType): RoleLogic = map[t]!!\n}\n\ndata class GameCharacter(\n    val name: String,\n    val type: CharacterType,\n    val level: Int,\n    val stats: Stats,\n    val skills: List<Skill>,\n    val weapon: Weapon,\n    val pet: Pet\n)\n\nclass PetBoostSystem {\n    fun offenseBoost(c: GameCharacter): Int {\n        return PetLogicRegistry.of(c.pet.type).offenseBoost(c)\n    }\n    fun defenseBoost(c: GameCharacter): Int {\n        return PetLogicRegistry.of(c.pet.type).defenseBoost(c)\n    }\n    fun petAssist(c: GameCharacter): Boolean {\n        return PetLogicRegistry.of(c.pet.type).assist(c)\n    }\n    fun petAssistDamage(c: GameCharacter): Int {\n        return PetLogicRegistry.of(c.pet.type).assistDamage(c)\n    }\n    fun petAssistHeal(c: GameCharacter): Int {\n        return PetLogicRegistry.of(c.pet.type).assistHeal(c)\n    }\n}\n\nclass WeaponRuleSet {\n    fun applyWeapon(c: GameCharacter, base: Int): Int {\n        return WeaponLogicRegistry.of(c.weapon.type).applyWeapon(c, base)\n    }\n    fun critChance(c: GameCharacter): Int {\n        return WeaponLogicRegistry.of(c.weapon.type).critChance(c)\n    }\n}\n\nclass RoleRuleSet {\n    fun baseDamage(c: GameCharacter, s: Skill, e: Enemy): Int {\n        return RoleLogicRegistry.of(c.type).baseDamage(c, s, e)\n    }\n    fun baseHeal(c: GameCharacter, s: Skill): Int {\n        return RoleLogicRegistry.of(c.type).baseHeal(c, s)\n    }\n    fun gold(c: GameCharacter, e: Enemy): Int {\n        return RoleLogicRegistry.of(c.type).gold(c, e)\n    }\n    fun extraCrit(c: GameCharacter): Int {\n        return RoleLogicRegistry.of(c.type).extraCrit(c)\n    }\n}\n\nclass DamageCalculator {\n    private val rng = Random()\n    private val wr = WeaponRuleSet()\n    private val pets = PetBoostSystem()\n    private val roles = RoleRuleSet()\n\n    fun calc(c: GameCharacter, s: Skill, e: Enemy): Int {\n        var base = roles.baseDamage(c, s, e)\n        base = wr.applyWeapon(c, base)\n        base += pets.offenseBoost(c)\n        if (pets.petAssist(c)) base += pets.petAssistDamage(c)\n        val critChance = wr.critChance(c) + roles.extraCrit(c)\n        if (rng.nextInt(100) < critChance) base *= 2\n        return kotlin.math.max(0, base)\n    }\n}\n\nclass HealCalculator {\n    private val pets = PetBoostSystem()\n    private val roles = RoleRuleSet()\n    fun heal(c: GameCharacter, s: Skill): Int {\n        var amt = roles.baseHeal(c, s)\n        amt += pets.defenseBoost(c) / 2 + pets.petAssistHeal(c)\n        return kotlin.math.max(0, amt)\n    }\n}\n\nclass LootCalculator {\n    private val roles = RoleRuleSet()\n    fun gold(c: GameCharacter, e: Enemy): Int {\n        return roles.gold(c, e)\n    }\n}\n\nclass TargetingSystem {\n    fun pick(enemies: List<Enemy>): Enemy {\n        var t = enemies[0]\n        for (e in enemies) if (e.stats.hp < t.stats.hp) t = e\n        return t\n    }\n}\n\nclass SkillSelector {\n    fun choose(c: GameCharacter): Skill {\n        for (s in c.skills) if (s.type != SkillType.BASIC) return s\n        return c.skills[0]\n    }\n}\n\nclass TurnEngine {\n    private val dmg = DamageCalculator()\n    private val healCalc = HealCalculator()\n    private val loot = LootCalculator()\n    private val targeting = TargetingSystem()\n    private val selector = SkillSelector()\n\n    fun turn(party: List<GameCharacter>, enemies: MutableList<Enemy>) {\n        for (c in party) {\n            val s = selector.choose(c)\n            if (s.type == SkillType.SUPPORT) {\n                val h = healCalc.heal(c, s)\n                c.stats.hp += h\n                continue\n            }\n            val target = targeting.pick(enemies)\n            val d = dmg.calc(c, s, target)\n            target.stats.hp = kotlin.math.max(0, target.stats.hp - d)\n        }\n    }\n    fun totalGold(party: List<GameCharacter>, e: Enemy): Int {\n        var g = 0\n        for (c in party) g += loot.gold(c, e)\n        return g\n    }\n}",
            "level": "HARD",
            "language": "KOTLIN",
            "violation": "OCP"
        },
        {
            "input": "import java.util.*\n\nenum class FoodType { BURGER, FRIES, PIZZA, DRINK, SALAD, DESSERT }\nenum class Size { SMALL, MEDIUM, LARGE }\n\nclass FoodItem(\n    private val name: String,\n    private val type: FoodType,\n    private val size: Size,\n    private val extras: Set<String>?\n) {\n    fun getName() = name\n    fun getType() = type\n    fun getSize() = size\n    fun getExtras() = extras ?: HashSet()\n}\n\nclass Order(private val customer: String) {\n    private val items: MutableList<FoodItem> = ArrayList()\n    fun add(item: FoodItem) { items.add(item) }\n    fun items(): List<FoodItem> = items\n    fun customer() = customer\n}\n\nclass PriceCalculator {\n    fun price(item: FoodItem): Double = when (item.getType()) {\n        FoodType.BURGER -> when (item.getSize()) {\n            Size.SMALL -> 5.49; Size.MEDIUM -> 6.49; else -> 7.49\n        }\n        FoodType.FRIES -> when (item.getSize()) {\n            Size.SMALL -> 1.99; Size.MEDIUM -> 2.49; else -> 2.99\n        }\n        FoodType.PIZZA -> when (item.getSize()) {\n            Size.SMALL -> 7.99; Size.MEDIUM -> 9.99; else -> 12.49\n        }\n        FoodType.DRINK -> when (item.getSize()) {\n            Size.SMALL -> 1.29; Size.MEDIUM -> 1.49; else -> 1.79\n        }\n        FoodType.SALAD -> when (item.getSize()) {\n            Size.SMALL -> 4.49; Size.MEDIUM -> 5.49; else -> 6.49\n        }\n        FoodType.DESSERT -> when (item.getSize()) {\n            Size.SMALL -> 2.99; Size.MEDIUM -> 3.49; else -> 3.99\n        }\n    }\n}\n\nclass TaxCalculator {\n    fun taxFor(item: FoodItem): Double = when (item.getType()) {\n        FoodType.DRINK -> 0.10\n        FoodType.DESSERT -> 0.08\n        FoodType.PIZZA -> 0.06\n        else -> 0.05\n    }\n}\n\nclass NutritionCalculator {\n    fun calories(item: FoodItem): Int = when (item.getType()) {\n        FoodType.BURGER -> when (item.getSize()) {\n            Size.SMALL -> 480; Size.MEDIUM -> 650; else -> 820\n        }\n        FoodType.FRIES -> when (item.getSize()) {\n            Size.SMALL -> 220; Size.MEDIUM -> 330; else -> 440\n        }\n        FoodType.PIZZA -> when (item.getSize()) {\n            Size.SMALL -> 700; Size.MEDIUM -> 950; else -> 1200\n        }\n        FoodType.DRINK -> when (item.getSize()) {\n            Size.SMALL -> 110; Size.MEDIUM -> 160; else -> 210\n        }\n        FoodType.SALAD -> when (item.getSize()) {\n            Size.SMALL -> 180; Size.MEDIUM -> 260; else -> 340\n        }\n        FoodType.DESSERT -> when (item.getSize()) {\n            Size.SMALL -> 250; Size.MEDIUM -> 320; else -> 390\n        }\n    }\n}\n\nclass PromotionEngine {\n    fun discount(item: FoodItem): Double = when (item.getType()) {\n        FoodType.BURGER -> if (item.getExtras().contains(\"extra-cheese\")) 0.50 else 0.0\n        FoodType.FRIES -> if (item.getSize() == Size.LARGE) 0.20 else 0.0\n        FoodType.DRINK -> if (item.getExtras().contains(\"no-ice\")) 0.10 else 0.0\n        FoodType.SALAD -> if (item.getExtras().contains(\"chicken\")) 0.30 else 0.0\n        FoodType.PIZZA -> if (item.getExtras().contains(\"pepperoni\")) 0.40 else 0.0\n        else -> 0.0\n    }\n}\n\nclass KitchenStationRouter {\n    fun station(item: FoodItem): String = when (item.getType()) {\n        FoodType.BURGER -> \"Grill\"\n        FoodType.FRIES -> \"Fryer\"\n        FoodType.PIZZA -> \"Oven\"\n        FoodType.DRINK -> \"Beverage\"\n        FoodType.SALAD -> \"Cold Prep\"\n        FoodType.DESSERT -> \"Dessert Bar\"\n    }\n}\n\nclass InventoryManager {\n    private val stock: MutableMap<String, Int> = HashMap()\n    init {\n        stock[\"bun\"] = 50; stock[\"patty\"] = 50; stock[\"potato\"] = 80\n        stock[\"dough\"] = 30; stock[\"soda\"] = 100; stock[\"greens\"] = 40; stock[\"dessertBase\"] = 30\n    }\n    fun reserve(item: FoodItem): Boolean = when (item.getType()) {\n        FoodType.BURGER -> take(\"bun\",1) && take(\"patty\",1)\n        FoodType.FRIES -> take(\"potato\",2)\n        FoodType.PIZZA -> take(\"dough\",1)\n        FoodType.DRINK -> take(\"soda\",1)\n        FoodType.SALAD -> take(\"greens\",1)\n        FoodType.DESSERT -> take(\"dessertBase\",1)\n    }\n    private fun take(key: String, qty: Int): Boolean {\n        val have = stock.getOrDefault(key,0)\n        if (have < qty) return false\n        stock[key] = have - qty\n        return true\n    }\n    fun getStock(): Map<String, Int> = Collections.unmodifiableMap(stock)\n}\n\nclass Chef {\n    fun prepare(item: FoodItem) {\n        when (item.getType()) {\n            FoodType.BURGER -> println(\"Chef grills patty and assembles burger\")\n            FoodType.FRIES -> println(\"Chef drops fries in fryer\")\n            FoodType.PIZZA -> println(\"Chef stretches dough and bakes pizza\")\n            FoodType.DRINK -> println(\"Chef fills cup and lids drink\")\n            FoodType.SALAD -> println(\"Chef chops and tosses salad\")\n            FoodType.DESSERT -> println(\"Chef plates dessert\")\n        }\n    }\n}\n\nclass Waiter {\n    fun take(order: Order, item: FoodItem) {\n        println(\"Waiter records item: \" + item.getName())\n        order.add(item)\n    }\n    fun serve(item: FoodItem) {\n        when (item.getType()) {\n            FoodType.BURGER -> println(\"Waiter serves burger with napkins\")\n            FoodType.FRIES -> println(\"Waiter serves fries with ketchup\")\n            FoodType.PIZZA -> println(\"Waiter serves pizza with slicer\")\n            FoodType.DRINK -> println(\"Waiter serves drink with straw\")\n            FoodType.SALAD -> println(\"Waiter serves salad with dressing\")\n            FoodType.DESSERT -> println(\"Waiter serves dessert with spoon\")\n        }\n    }\n}\n\nclass Cashier {\n    private val prices = PriceCalculator()\n    private val taxes = TaxCalculator()\n    private val promos = PromotionEngine()\n    fun total(order: Order): Double {\n        var sum = 0.0\n        for (item in order.items()) {\n            val base = prices.price(item)\n            val discount = promos.discount(item)\n            val taxed = (base - discount) * (1.0 + taxes.taxFor(item))\n            sum += taxed\n        }\n        return Math.round(sum * 100.0) / 100.0\n    }\n}\n\nclass ReceiptPrinter {\n    private val prices = PriceCalculator()\n    private val taxes = TaxCalculator()\n    private val promos = PromotionEngine()\n    private val nutrition = NutritionCalculator()\n    fun print(order: Order) {\n        println(\"Customer: \" + order.customer())\n        for (item in order.items()) {\n            val base = prices.price(item)\n            val discount = promos.discount(item)\n            val taxRate = taxes.taxFor(item)\n            val kcal = nutrition.calories(item)\n            println(item.getName() + \" (\" + item.getType() + \" \" + item.getSize() + \") base $\" + base + \" disc $\" + discount + \" tax \" + (taxRate*100).toInt() + \"% kcal \" + kcal)\n        }\n    }\n}\n\nclass PackagingSelector {\n    fun packaging(item: FoodItem): String = when (item.getType()) {\n        FoodType.BURGER -> if (item.getSize()==Size.LARGE) \"Clamshell XL\" else \"Clamshell\"\n        FoodType.FRIES -> if (item.getSize()==Size.LARGE) \"Carton L\" else \"Carton\"\n        FoodType.PIZZA -> if (item.getSize()==Size.SMALL) \"Box S\" else if (item.getSize()==Size.MEDIUM) \"Box M\" else \"Box L\"\n        FoodType.DRINK -> if (item.getSize()==Size.LARGE) \"Cup 24oz\" else if (item.getSize()==Size.MEDIUM) \"Cup 16oz\" else \"Cup 12oz\"\n        FoodType.SALAD -> \"Bowl\"\n        FoodType.DESSERT -> \"Dessert Cup\"\n    }\n}\n\nclass AllergyChecker {\n    fun allergens(item: FoodItem): Set<String> = when (item.getType()) {\n        FoodType.BURGER -> HashSet(Arrays.asList(\"gluten\",\"dairy\"))\n        FoodType.FRIES -> HashSet()\n        FoodType.PIZZA -> HashSet(Arrays.asList(\"gluten\",\"dairy\"))\n        FoodType.DRINK -> HashSet()\n        FoodType.SALAD -> if (item.getExtras().contains(\"chicken\")) HashSet(Arrays.asList(\"none\")) else HashSet()\n        FoodType.DESSERT -> HashSet(Arrays.asList(\"dairy\"))\n    }\n}\n\nclass DeliveryPlanner {\n    fun courier(item: FoodItem): String = when (item.getType()) {\n        FoodType.PIZZA -> \"Insulated Bag\"\n        FoodType.DRINK -> \"Cup Holder\"\n        FoodType.FRIES -> \"Thermal Pouch\"\n        FoodType.BURGER -> \"Standard Bag\"\n        FoodType.SALAD -> \"Cold Pack\"\n        FoodType.DESSERT -> \"Cold Sleeve\"\n    }\n}\n\nclass ComboEngine {\n    fun comboDiscount(items: List<FoodItem>): Double {\n        val hasBurger = items.any { it.getType()==FoodType.BURGER }\n        val hasFries = items.any { it.getType()==FoodType.FRIES }\n        val hasDrink = items.any { it.getType()==FoodType.DRINK }\n        val hasPizza = items.any { it.getType()==FoodType.PIZZA }\n        return if (hasBurger && hasFries && hasDrink) 1.00\n        else if (hasPizza && hasDrink) 0.50\n        else 0.0\n    }\n}\n\nclass LoyaltyPointsCalculator {\n    fun points(item: FoodItem): Int = when (item.getType()) {\n        FoodType.BURGER -> 12\n        FoodType.FRIES -> 6\n        FoodType.PIZZA -> 18\n        FoodType.DRINK -> 4\n        FoodType.SALAD -> 10\n        FoodType.DESSERT -> 8\n    }\n}\n\nclass WasteTracker {\n    fun prepWasteGrams(item: FoodItem): Int = when (item.getType()) {\n        FoodType.BURGER -> 15\n        FoodType.FRIES -> 12\n        FoodType.PIZZA -> 20\n        FoodType.DRINK -> 3\n        FoodType.SALAD -> 8\n        FoodType.DESSERT -> 6\n    }\n}\n\nclass KitchenLoadBalancer {\n    fun stationLoadWeight(item: FoodItem): Int = when (item.getType()) {\n        FoodType.BURGER -> 3\n        FoodType.FRIES -> 2\n        FoodType.PIZZA -> 4\n        FoodType.DRINK -> 1\n        FoodType.SALAD -> 2\n        FoodType.DESSERT -> 2\n    }\n}\n\nclass QualityInspector {\n    fun pass(item: FoodItem): Boolean = when (item.getType()) {\n        FoodType.BURGER -> !item.getExtras().contains(\"raw\")\n        FoodType.FRIES -> !item.getExtras().contains(\"soggy\")\n        FoodType.PIZZA -> !item.getExtras().contains(\"burnt\")\n        FoodType.DRINK -> !item.getExtras().contains(\"flat\")\n        FoodType.SALAD -> !item.getExtras().contains(\"wilted\")\n        FoodType.DESSERT -> !item.getExtras().contains(\"melted\")\n    }\n}\n\nclass CookingTimer {\n    fun seconds(item: FoodItem): Int = when (item.getType()) {\n        FoodType.BURGER -> if (item.getSize()==Size.LARGE) 420 else 360\n        FoodType.FRIES -> if (item.getSize()==Size.LARGE) 210 else 180\n        FoodType.PIZZA -> if (item.getSize()==Size.LARGE) 540 else 480\n        FoodType.DRINK -> 30\n        FoodType.SALAD -> 120\n        FoodType.DESSERT -> 90\n    }\n}\n\nclass MenuAvailability {\n    fun availableNow(item: FoodItem, hour: Int): Boolean = when (item.getType()) {\n        FoodType.BURGER -> true\n        FoodType.FRIES -> true\n        FoodType.PIZZA -> hour >= 11\n        FoodType.DRINK -> true\n        FoodType.SALAD -> hour in 10..22\n        FoodType.DESSERT -> hour in 11..23\n    }\n}\n\nclass SpicinessRegulator {\n    fun spiceLevel(item: FoodItem): Int = when (item.getType()) {\n        FoodType.BURGER -> if (item.getExtras().contains(\"jalapeno\")) 3 else 1\n        FoodType.FRIES -> if (item.getExtras().contains(\"peri-peri\")) 2 else 0\n        FoodType.PIZZA -> if (item.getExtras().contains(\"pepperoni\")) 2 else 1\n        FoodType.DRINK -> 0\n        FoodType.SALAD -> if (item.getExtras().contains(\"chili\")) 2 else 0\n        FoodType.DESSERT -> 0\n    }\n}\n\nclass UpsellEngine {\n    fun suggest(item: FoodItem): String = when (item.getType()) {\n        FoodType.BURGER -> \"Add Fries\"\n        FoodType.FRIES -> \"Add Drink\"\n        FoodType.PIZZA -> \"Add Dessert\"\n        FoodType.DRINK -> \"Add Burger\"\n        FoodType.SALAD -> \"Add Chicken\"\n        FoodType.DESSERT -> \"Add Coffee\"\n    }\n}\n",
            "output": "import java.util.*\n\nenum class FoodType { BURGER, FRIES, PIZZA, DRINK, SALAD, DESSERT }\nenum class Size { SMALL, MEDIUM, LARGE }\n\nclass FoodItem(\n    private val name: String,\n    private val type: FoodType,\n    private val size: Size,\n    extras: MutableSet<String>?\n) {\n    private val extras: MutableSet<String> = extras ?: HashSet()\n    private val strategy: FoodStrategy = FoodStrategyFactory.create(type)\n    fun getName(): String = name\n    fun getType(): FoodType = type\n    fun getSize(): Size = size\n    fun getExtras(): MutableSet<String> = extras\n    fun getStrategy(): FoodStrategy = strategy\n}\n\nclass Order(private val customer: String) {\n    private val items: MutableList<FoodItem> = ArrayList()\n    fun add(item: FoodItem) { items.add(item) }\n    fun items(): MutableList<FoodItem> = items\n    fun customer(): String = customer\n}\n\ninterface FoodStrategy {\n    fun getPrice(size: Size): Double\n    fun getTaxRate(): Double\n    fun getCalories(size: Size): Int\n    fun getDiscount(item: FoodItem): Double\n    fun getStation(): String\n    fun reserveInventory(stock: MutableMap<String, Int>): Boolean\n    fun prepare()\n    fun serve()\n    fun getPackaging(size: Size): String\n    fun getAllergens(item: FoodItem): MutableSet<String>\n    fun getCourier(): String\n    fun getLoyaltyPoints(): Int\n    fun getPrepWasteGrams(): Int\n    fun getStationLoadWeight(): Int\n    fun passQuality(item: FoodItem): Boolean\n    fun getCookingSeconds(size: Size): Int\n    fun isAvailable(hour: Int): Boolean\n    fun getSpiceLevel(item: FoodItem): Int\n    fun getUpsellSuggestion(): String\n}\n\nabstract class BaseFoodStrategy : FoodStrategy {\n    protected fun takeFromStock(stock: MutableMap<String, Int>, key: String, qty: Int): Boolean {\n        val have = stock.getOrDefault(key, 0)\n        if (have < qty) return false\n        stock[key] = have - qty\n        return true\n    }\n}\n\nclass BurgerStrategy : BaseFoodStrategy() {\n    override fun getPrice(size: Size): Double {\n        return when (size) {\n            Size.SMALL -> 5.49\n            Size.MEDIUM -> 6.49\n            else -> 7.49\n        }\n    }\n    override fun getTaxRate(): Double = 0.05\n    override fun getCalories(size: Size): Int {\n        return when (size) {\n            Size.SMALL -> 480\n            Size.MEDIUM -> 650\n            else -> 820\n        }\n    }\n    override fun getDiscount(item: FoodItem): Double {\n        return if (item.getExtras().contains(\"extra-cheese\")) 0.50 else 0.0\n    }\n    override fun getStation(): String = \"Grill\"\n    override fun reserveInventory(stock: MutableMap<String, Int>): Boolean {\n        return takeFromStock(stock, \"bun\", 1) && takeFromStock(stock, \"patty\", 1)\n    }\n    override fun prepare() {\n        println(\"Chef grills patty and assembles burger\")\n    }\n    override fun serve() {\n        println(\"Waiter serves burger with napkins\")\n    }\n    override fun getPackaging(size: Size): String {\n        return if (size == Size.LARGE) \"Clamshell XL\" else \"Clamshell\"\n    }\n    override fun getAllergens(item: FoodItem): MutableSet<String> {\n        return HashSet(Arrays.asList(\"gluten\", \"dairy\"))\n    }\n    override fun getCourier(): String = \"Standard Bag\"\n    override fun getLoyaltyPoints(): Int = 12\n    override fun getPrepWasteGrams(): Int = 15\n    override fun getStationLoadWeight(): Int = 3\n    override fun passQuality(item: FoodItem): Boolean {\n        return !item.getExtras().contains(\"raw\")\n    }\n    override fun getCookingSeconds(size: Size): Int {\n        return if (size == Size.LARGE) 420 else 360\n    }\n    override fun isAvailable(hour: Int): Boolean = true\n    override fun getSpiceLevel(item: FoodItem): Int {\n        return if (item.getExtras().contains(\"jalapeno\")) 3 else 1\n    }\n    override fun getUpsellSuggestion(): String = \"Add Fries\"\n}\n\nclass FriesStrategy : BaseFoodStrategy() {\n    override fun getPrice(size: Size): Double {\n        return when (size) {\n            Size.SMALL -> 1.99\n            Size.MEDIUM -> 2.49\n            else -> 2.99\n        }\n    }\n    override fun getTaxRate(): Double = 0.05\n    override fun getCalories(size: Size): Int {\n        return when (size) {\n            Size.SMALL -> 220\n            Size.MEDIUM -> 330\n            else -> 440\n        }\n    }\n    override fun getDiscount(item: FoodItem): Double {\n        return if (item.getSize() == Size.LARGE) 0.20 else 0.0\n    }\n    override fun getStation(): String = \"Fryer\"\n    override fun reserveInventory(stock: MutableMap<String, Int>): Boolean {\n        return takeFromStock(stock, \"potato\", 2)\n    }\n    override fun prepare() {\n        println(\"Chef drops fries in fryer\")\n    }\n    override fun serve() {\n        println(\"Waiter serves fries with ketchup\")\n    }\n    override fun getPackaging(size: Size): String {\n        return if (size == Size.LARGE) \"Carton L\" else \"Carton\"\n    }\n    override fun getAllergens(item: FoodItem): MutableSet<String> {\n        return HashSet()\n    }\n    override fun getCourier(): String = \"Thermal Pouch\"\n    override fun getLoyaltyPoints(): Int = 6\n    override fun getPrepWasteGrams(): Int = 12\n    override fun getStationLoadWeight(): Int = 2\n    override fun passQuality(item: FoodItem): Boolean {\n        return !item.getExtras().contains(\"soggy\")\n    }\n    override fun getCookingSeconds(size: Size): Int {\n        return if (size == Size.LARGE) 210 else 180\n    }\n    override fun isAvailable(hour: Int): Boolean = true\n    override fun getSpiceLevel(item: FoodItem): Int {\n        return if (item.getExtras().contains(\"peri-peri\")) 2 else 0\n    }\n    override fun getUpsellSuggestion(): String = \"Add Drink\"\n}\n\nclass PizzaStrategy : BaseFoodStrategy() {\n    override fun getPrice(size: Size): Double {\n        return when (size) {\n            Size.SMALL -> 7.99\n            Size.MEDIUM -> 9.99\n            else -> 12.49\n        }\n    }\n    override fun getTaxRate(): Double = 0.06\n    override fun getCalories(size: Size): Int {\n        return when (size) {\n            Size.SMALL -> 700\n            Size.MEDIUM -> 950\n            else -> 1200\n        }\n    }\n    override fun getDiscount(item: FoodItem): Double {\n        return if (item.getExtras().contains(\"pepperoni\")) 0.40 else 0.0\n    }\n    override fun getStation(): String = \"Oven\"\n    override fun reserveInventory(stock: MutableMap<String, Int>): Boolean {\n        return takeFromStock(stock, \"dough\", 1)\n    }\n    override fun prepare() {\n        println(\"Chef stretches dough and bakes pizza\")\n    }\n    override fun serve() {\n        println(\"Waiter serves pizza with slicer\")\n    }\n    override fun getPackaging(size: Size): String {\n        return if (size == Size.SMALL) \"Box S\" else if (size == Size.MEDIUM) \"Box M\" else \"Box L\"\n    }\n    override fun getAllergens(item: FoodItem): MutableSet<String> {\n        return HashSet(Arrays.asList(\"gluten\", \"dairy\"))\n    }\n    override fun getCourier(): String = \"Insulated Bag\"\n    override fun getLoyaltyPoints(): Int = 18\n    override fun getPrepWasteGrams(): Int = 20\n    override fun getStationLoadWeight(): Int = 4\n    override fun passQuality(item: FoodItem): Boolean {\n        return !item.getExtras().contains(\"burnt\")\n    }\n    override fun getCookingSeconds(size: Size): Int {\n        return if (size == Size.LARGE) 540 else 480\n    }\n    override fun isAvailable(hour: Int): Boolean = hour >= 11\n    override fun getSpiceLevel(item: FoodItem): Int {\n        return if (item.getExtras().contains(\"pepperoni\")) 2 else 1\n    }\n    override fun getUpsellSuggestion(): String = \"Add Dessert\"\n}\n\nclass DrinkStrategy : BaseFoodStrategy() {\n    override fun getPrice(size: Size): Double {\n        return when (size) {\n            Size.SMALL -> 1.29\n            Size.MEDIUM -> 1.49\n            else -> 1.79\n        }\n    }\n    override fun getTaxRate(): Double = 0.10\n    override fun getCalories(size: Size): Int {\n        return when (size) {\n            Size.SMALL -> 110\n            Size.MEDIUM -> 160\n            else -> 210\n        }\n    }\n    override fun getDiscount(item: FoodItem): Double {\n        return if (item.getExtras().contains(\"no-ice\")) 0.10 else 0.0\n    }\n    override fun getStation(): String = \"Beverage\"\n    override fun reserveInventory(stock: MutableMap<String, Int>): Boolean {\n        return takeFromStock(stock, \"soda\", 1)\n    }\n    override fun prepare() {\n        println(\"Chef fills cup and lids drink\")\n    }\n    override fun serve() {\n        println(\"Waiter serves drink with straw\")\n    }\n    override fun getPackaging(size: Size): String {\n        return if (size == Size.LARGE) \"Cup 24oz\" else if (size == Size.MEDIUM) \"Cup 16oz\" else \"Cup 12oz\"\n    }\n    override fun getAllergens(item: FoodItem): MutableSet<String> {\n        return HashSet()\n    }\n    override fun getCourier(): String = \"Cup Holder\"\n    override fun getLoyaltyPoints(): Int = 4\n    override fun getPrepWasteGrams(): Int = 3\n    override fun getStationLoadWeight(): Int = 1\n    override fun passQuality(item: FoodItem): Boolean {\n        return !item.getExtras().contains(\"flat\")\n    }\n    override fun getCookingSeconds(size: Size): Int = 30\n    override fun isAvailable(hour: Int): Boolean = true\n    override fun getSpiceLevel(item: FoodItem): Int = 0\n    override fun getUpsellSuggestion(): String = \"Add Burger\"\n}\n\nclass SaladStrategy : BaseFoodStrategy() {\n    override fun getPrice(size: Size): Double {\n        return when (size) {\n            Size.SMALL -> 4.49\n            Size.MEDIUM -> 5.49\n            else -> 6.49\n        }\n    }\n    override fun getTaxRate(): Double = 0.05\n    override fun getCalories(size: Size): Int {\n        return when (size) {\n            Size.SMALL -> 180\n            Size.MEDIUM -> 260\n            else -> 340\n        }\n    }\n    override fun getDiscount(item: FoodItem): Double {\n        return if (item.getExtras().contains(\"chicken\")) 0.30 else 0.0\n    }\n    override fun getStation(): String = \"Cold Prep\"\n    override fun reserveInventory(stock: MutableMap<String, Int>): Boolean {\n        return takeFromStock(stock, \"greens\", 1)\n    }\n    override fun prepare() {\n        println(\"Chef chops and tosses salad\")\n    }\n    override fun serve() {\n        println(\"Waiter serves salad with dressing\")\n    }\n    override fun getPackaging(size: Size): String = \"Bowl\"\n    override fun getAllergens(item: FoodItem): MutableSet<String> {\n        return if (item.getExtras().contains(\"chicken\")) HashSet(Arrays.asList(\"none\")) else HashSet()\n    }\n    override fun getCourier(): String = \"Cold Pack\"\n    override fun getLoyaltyPoints(): Int = 10\n    override fun getPrepWasteGrams(): Int = 8\n    override fun getStationLoadWeight(): Int = 2\n    override fun passQuality(item: FoodItem): Boolean {\n        return !item.getExtras().contains(\"wilted\")\n    }\n    override fun getCookingSeconds(size: Size): Int = 120\n    override fun isAvailable(hour: Int): Boolean {\n        return hour >= 10 && hour <= 22\n    }\n    override fun getSpiceLevel(item: FoodItem): Int {\n        return if (item.getExtras().contains(\"chili\")) 2 else 0\n    }\n    override fun getUpsellSuggestion(): String = \"Add Chicken\"\n}\n\nclass DessertStrategy : BaseFoodStrategy() {\n    override fun getPrice(size: Size): Double {\n        return when (size) {\n            Size.SMALL -> 2.99\n            Size.MEDIUM -> 3.49\n            else -> 3.99\n        }\n    }\n    override fun getTaxRate(): Double = 0.08\n    override fun getCalories(size: Size): Int {\n        return when (size) {\n            Size.SMALL -> 250\n            Size.MEDIUM -> 320\n            else -> 390\n        }\n    }\n    override fun getDiscount(item: FoodItem): Double = 0.0\n    override fun getStation(): String = \"Dessert Bar\"\n    override fun reserveInventory(stock: MutableMap<String, Int>): Boolean {\n        return takeFromStock(stock, \"dessertBase\", 1)\n    }\n    override fun prepare() {\n        println(\"Chef plates dessert\")\n    }\n    override fun serve() {\n        println(\"Waiter serves dessert with spoon\")\n    }\n    override fun getPackaging(size: Size): String = \"Dessert Cup\"\n    override fun getAllergens(item: FoodItem): MutableSet<String> {\n        return HashSet(Arrays.asList(\"dairy\"))\n    }\n    override fun getCourier(): String = \"Cold Sleeve\"\n    override fun getLoyaltyPoints(): Int = 8\n    override fun getPrepWasteGrams(): Int = 6\n    override fun getStationLoadWeight(): Int = 2\n    override fun passQuality(item: FoodItem): Boolean {\n        return !item.getExtras().contains(\"melted\")\n    }\n    override fun getCookingSeconds(size: Size): Int = 90\n    override fun isAvailable(hour: Int): Boolean {\n        return hour >= 11 && hour <= 23\n    }\n    override fun getSpiceLevel(item: FoodItem): Int = 0\n    override fun getUpsellSuggestion(): String = \"Add Coffee\"\n}\n\nclass DefaultStrategy : BaseFoodStrategy() {\n    override fun getPrice(size: Size): Double { throw IllegalArgumentException(\"Unknown type\") }\n    override fun getTaxRate(): Double = 0.05\n    override fun getCalories(size: Size): Int = 0\n    override fun getDiscount(item: FoodItem): Double = 0.0\n    override fun getStation(): String = \"Unknown\"\n    override fun reserveInventory(stock: MutableMap<String, Int>): Boolean = false\n    override fun prepare() {}\n    override fun serve() {}\n    override fun getPackaging(size: Size): String = \"Generic\"\n    override fun getAllergens(item: FoodItem): MutableSet<String> = HashSet()\n    override fun getCourier(): String = \"Bag\"\n    override fun getLoyaltyPoints(): Int = 0\n    override fun getPrepWasteGrams(): Int = 0\n    override fun getStationLoadWeight(): Int = 1\n    override fun passQuality(item: FoodItem): Boolean = true\n    override fun getCookingSeconds(size: Size): Int = 60\n    override fun isAvailable(hour: Int): Boolean = true\n    override fun getSpiceLevel(item: FoodItem): Int = 0\n    override fun getUpsellSuggestion(): String = \"Add Deal\"\n}\n\nobject FoodStrategyFactory {\n    private val strategies: MutableMap<FoodType, FoodStrategy> = HashMap<FoodType, FoodStrategy>().apply {\n        put(FoodType.BURGER, BurgerStrategy())\n        put(FoodType.FRIES, FriesStrategy())\n        put(FoodType.PIZZA, PizzaStrategy())\n        put(FoodType.DRINK, DrinkStrategy())\n        put(FoodType.SALAD, SaladStrategy())\n        put(FoodType.DESSERT, DessertStrategy())\n    }\n    fun create(type: FoodType): FoodStrategy {\n        return strategies.getOrDefault(type, DefaultStrategy())\n    }\n}\n\nclass PriceCalculator {\n    fun price(item: FoodItem): Double {\n        return item.getStrategy().getPrice(item.getSize())\n    }\n}\n\nclass TaxCalculator {\n    fun taxFor(item: FoodItem): Double {\n        return item.getStrategy().getTaxRate()\n    }\n}\n\nclass NutritionCalculator {\n    fun calories(item: FoodItem): Int {\n        return item.getStrategy().getCalories(item.getSize())\n    }\n}\n\nclass PromotionEngine {\n    fun discount(item: FoodItem): Double {\n        return item.getStrategy().getDiscount(item)\n    }\n}\n\nclass KitchenStationRouter {\n    fun station(item: FoodItem): String {\n        return item.getStrategy().getStation()\n    }\n}\n\nclass InventoryManager {\n    private val stock: MutableMap<String, Int> = HashMap()\n    init {\n        stock[\"bun\"] = 50; stock[\"patty\"] = 50; stock[\"potato\"] = 80\n        stock[\"dough\"] = 30; stock[\"soda\"] = 100; stock[\"greens\"] = 40; stock[\"dessertBase\"] = 30\n    }\n    fun reserve(item: FoodItem): Boolean {\n        return item.getStrategy().reserveInventory(stock)\n    }\n    fun getStock(): Map<String, Int> { return Collections.unmodifiableMap(stock) }\n}\n\nclass Chef {\n    fun prepare(item: FoodItem) {\n        item.getStrategy().prepare()\n    }\n}\n\nclass Waiter {\n    fun take(order: Order, item: FoodItem) {\n        println(\"Waiter records item: \" + item.getName())\n        order.add(item)\n    }\n    fun serve(item: FoodItem) {\n        item.getStrategy().serve()\n    }\n}\n\nclass Cashier {\n    private val prices = PriceCalculator()\n    private val taxes = TaxCalculator()\n    private val promos = PromotionEngine()\n    fun total(order: Order): Double {\n        var sum = 0.0\n        for (item in order.items()) {\n            val base = prices.price(item)\n            val discount = promos.discount(item)\n            val taxed = (base - discount) * (1.0 + taxes.taxFor(item))\n            sum += taxed\n        }\n        return Math.round(sum * 100.0) / 100.0\n    }\n}\n\nclass ReceiptPrinter {\n    private val prices = PriceCalculator()\n    private val taxes = TaxCalculator()\n    private val promos = PromotionEngine()\n    private val nutrition = NutritionCalculator()\n    fun print(order: Order) {\n        println(\"Customer: \" + order.customer())\n        for (item in order.items()) {\n            val base = prices.price(item)\n            val discount = promos.discount(item)\n            val taxRate = taxes.taxFor(item)\n            val kcal = nutrition.calories(item)\n            println(item.getName() + \" (\" + item.getType() + \" \" + item.getSize() + \") base $\" + base + \" disc $\" + discount + \" tax \" + (taxRate * 100).toInt() + \"% kcal \" + kcal)\n        }\n    }\n}\n\nclass PackagingSelector {\n    fun packaging(item: FoodItem): String {\n        return item.getStrategy().getPackaging(item.getSize())\n    }\n}\n\nclass AllergyChecker {\n    fun allergens(item: FoodItem): MutableSet<String> {\n        return item.getStrategy().getAllergens(item)\n    }\n}\n\nclass DeliveryPlanner {\n    fun courier(item: FoodItem): String {\n        return item.getStrategy().getCourier()\n    }\n}\n\nclass ComboEngine {\n    fun comboDiscount(items: List<FoodItem>): Double {\n        val hasBurger = items.any { it.getType() == FoodType.BURGER }\n        val hasFries = items.any { it.getType() == FoodType.FRIES }\n        val hasDrink = items.any { it.getType() == FoodType.DRINK }\n        val hasPizza = items.any { it.getType() == FoodType.PIZZA }\n        if (hasBurger && hasFries && hasDrink) return 1.00\n        if (hasPizza && hasDrink) return 0.50\n        return 0.0\n    }\n}\n\nclass LoyaltyPointsCalculator {\n    fun points(item: FoodItem): Int {\n        return item.getStrategy().getLoyaltyPoints()\n    }\n}\n\nclass WasteTracker {\n    fun prepWasteGrams(item: FoodItem): Int {\n        return item.getStrategy().getPrepWasteGrams()\n    }\n}\n\nclass KitchenLoadBalancer {\n    fun stationLoadWeight(item: FoodItem): Int {\n        return item.getStrategy().getStationLoadWeight()\n    }\n}\n\nclass QualityInspector {\n    fun pass(item: FoodItem): Boolean {\n        return item.getStrategy().passQuality(item)\n    }\n}\n\nclass CookingTimer {\n    fun seconds(item: FoodItem): Int {\n        return item.getStrategy().getCookingSeconds(item.getSize())\n    }\n}\n\nclass MenuAvailability {\n    fun availableNow(item: FoodItem, hour: Int): Boolean {\n        return item.getStrategy().isAvailable(hour)\n    }\n}\n\nclass SpicinessRegulator {\n    fun spiceLevel(item: FoodItem): Int {\n        return item.getStrategy().getSpiceLevel(item)\n    }\n}\n\nclass UpsellEngine {\n    fun suggest(item: FoodItem): String {\n        return item.getStrategy().getUpsellSuggestion()\n    }\n}\n",
            "level": "HARD",
            "language": "KOTLIN",
            "violation": "OCP"
        },
        {
            "input": "import java.util.*\n\nenum class DeviceType { LIGHT, THERMOSTAT, DOOR_LOCK, CAMERA, SPRINKLER, BLIND, SPEAKER }\nenum class RoomType { LIVING, KITCHEN, BEDROOM, BATHROOM, GARDEN, GARAGE }\nenum class Mode { ECO, COMFORT, AWAY, NIGHT, PARTY }\nenum class AlertType { INFO, WARN, CRITICAL }\n\nclass SmartDevice(private val id: String, private val type: DeviceType) {\n    private var mode: Mode = Mode.ECO\n    private var online: Boolean = true\n    fun getId() = id\n    fun getType() = type\n    fun getMode() = mode\n    fun isOnline() = online\n    fun setMode(m: Mode) { mode = m }\n    fun setOnline(o: Boolean) { online = o }\n}\n\nclass Room(private val name: String, private val type: RoomType) {\n    private val devices: MutableList<SmartDevice> = ArrayList()\n    fun add(d: SmartDevice) { devices.add(d) }\n    fun getDevices() = devices\n    fun getName() = name\n    fun getType() = type\n}\n\nclass SmartHomeController {\n    fun turnOn(d: SmartDevice) {\n        when (d.getType()) {\n            DeviceType.LIGHT -> println(\"Light ${d.getId()} ON\")\n            DeviceType.THERMOSTAT -> println(\"Thermostat ${d.getId()} heating\")\n            DeviceType.DOOR_LOCK -> println(\"Lock ${d.getId()} locked\")\n            DeviceType.CAMERA -> println(\"Camera ${d.getId()} recording\")\n            DeviceType.SPRINKLER -> println(\"Sprinkler ${d.getId()} watering\")\n            DeviceType.BLIND -> println(\"Blind ${d.getId()} open\")\n            DeviceType.SPEAKER -> println(\"Speaker ${d.getId()} playing\")\n        }\n    }\n    fun turnOff(d: SmartDevice) {\n        when (d.getType()) {\n            DeviceType.LIGHT -> println(\"Light ${d.getId()} OFF\")\n            DeviceType.THERMOSTAT -> println(\"Thermostat ${d.getId()} idle\")\n            DeviceType.DOOR_LOCK -> println(\"Lock ${d.getId()} secured\")\n            DeviceType.CAMERA -> println(\"Camera ${d.getId()} standby\")\n            DeviceType.SPRINKLER -> println(\"Sprinkler ${d.getId()} stopped\")\n            DeviceType.BLIND -> println(\"Blind ${d.getId()} closed\")\n            DeviceType.SPEAKER -> println(\"Speaker ${d.getId()} paused\")\n        }\n    }\n    fun setMode(d: SmartDevice, m: Mode) {\n        d.setMode(m)\n        println(\"${d.getType().name.lowercase().replaceFirstChar { it.uppercase() }} ${d.getId()} -> $m\")\n    }\n    fun energyUsageKwh(d: SmartDevice, minutes: Int): Double = when (d.getType()) {\n        DeviceType.LIGHT -> 0.012 * minutes\n        DeviceType.THERMOSTAT -> 0.08 * minutes\n        DeviceType.DOOR_LOCK -> 0.0002 * minutes\n        DeviceType.CAMERA -> 0.01 * minutes\n        DeviceType.SPRINKLER -> 0.03 * minutes\n        DeviceType.BLIND -> if (minutes == 0) 0.0 else 0.001 * minutes\n        DeviceType.SPEAKER -> 0.015 * minutes\n    }\n}\n\nclass NotificationService {\n    fun push(d: SmartDevice, t: AlertType, msg: String) {\n        println(\"[$t] ${d.getType().name.lowercase().replaceFirstChar { it.uppercase() }} ${d.getId()}: $msg\")\n    }\n}\n\nclass DiagnosticsService {\n    fun health(d: SmartDevice): String = when (d.getType()) {\n        DeviceType.LIGHT -> if (d.isOnline()) \"OK\" else \"Bulb Offline\"\n        DeviceType.THERMOSTAT -> if (d.isOnline()) \"OK\" else \"Sensor Offline\"\n        DeviceType.DOOR_LOCK -> if (d.isOnline()) \"OK\" else \"Battery Low\"\n        DeviceType.CAMERA -> if (d.isOnline()) \"OK\" else \"Stream Error\"\n        DeviceType.SPRINKLER -> if (d.isOnline()) \"OK\" else \"Valve Error\"\n        DeviceType.BLIND -> if (d.isOnline()) \"OK\" else \"Motor Jam\"\n        DeviceType.SPEAKER -> if (d.isOnline()) \"OK\" else \"Audio Fault\"\n    }\n}\n\nclass SecurityPolicy {\n    fun allowed(d: SmartDevice, action: String, userHome: Boolean): Boolean = when (d.getType()) {\n        DeviceType.DOOR_LOCK -> if (action == \"unlock\") userHome else true\n        DeviceType.CAMERA -> !(action == \"disable\" && !userHome)\n        DeviceType.SPRINKLER -> !(action == \"on\" && userHome && d.getMode() == Mode.PARTY)\n        DeviceType.SPEAKER -> !(action == \"play\" && !userHome)\n        else -> true\n    }\n}\n\nclass VoiceCommandProcessor {\n    private val ctl = SmartHomeController()\n    fun handle(phrase: String, d: SmartDevice) {\n        when (d.getType()) {\n            DeviceType.LIGHT -> when (phrase.lowercase()) {\n                \"lights on\" -> ctl.turnOn(d)\n                \"lights off\" -> ctl.turnOff(d)\n            }\n            DeviceType.THERMOSTAT -> when (phrase.lowercase()) {\n                \"heat on\" -> ctl.turnOn(d)\n                \"eco\" -> ctl.setMode(d, Mode.ECO)\n            }\n            DeviceType.DOOR_LOCK -> if (phrase.equals(\"lock door\", true)) ctl.turnOn(d)\n            DeviceType.CAMERA -> if (phrase.equals(\"record\", true)) ctl.turnOn(d)\n            DeviceType.SPRINKLER -> if (phrase.equals(\"water\", true)) ctl.turnOn(d)\n            DeviceType.BLIND -> when (phrase.lowercase()) {\n                \"open blinds\" -> ctl.turnOn(d)\n                \"close blinds\" -> ctl.turnOff(d)\n            }\n            DeviceType.SPEAKER -> when (phrase.lowercase()) {\n                \"play music\" -> ctl.turnOn(d)\n                \"pause music\" -> ctl.turnOff(d)\n            }\n        }\n    }\n}\n\nclass SceneManager {\n    private val ctl = SmartHomeController()\n    fun apply(scene: String, devices: List<SmartDevice>) {\n        for (d in devices) {\n            when (scene) {\n                \"Evening\" -> when (d.getType()) {\n                    DeviceType.LIGHT -> { ctl.turnOn(d); ctl.setMode(d, Mode.COMFORT) }\n                    DeviceType.THERMOSTAT -> ctl.setMode(d, Mode.COMFORT)\n                    DeviceType.CAMERA -> ctl.turnOn(d)\n                    DeviceType.DOOR_LOCK -> ctl.turnOn(d)\n                    DeviceType.SPRINKLER -> ctl.turnOff(d)\n                    DeviceType.BLIND -> ctl.turnOff(d)\n                    DeviceType.SPEAKER -> ctl.turnOn(d)\n                }\n                \"Away\" -> when (d.getType()) {\n                    DeviceType.LIGHT -> ctl.turnOff(d)\n                    DeviceType.THERMOSTAT -> ctl.setMode(d, Mode.AWAY)\n                    DeviceType.CAMERA -> ctl.turnOn(d)\n                    DeviceType.DOOR_LOCK -> ctl.turnOn(d)\n                    DeviceType.SPRINKLER -> ctl.turnOff(d)\n                    DeviceType.BLIND -> ctl.turnOff(d)\n                    DeviceType.SPEAKER -> ctl.turnOff(d)\n                }\n                \"Party\" -> when (d.getType()) {\n                    DeviceType.LIGHT -> { ctl.turnOn(d); ctl.setMode(d, Mode.PARTY) }\n                    DeviceType.THERMOSTAT -> ctl.setMode(d, Mode.COMFORT)\n                    DeviceType.SPEAKER -> ctl.turnOn(d)\n                    DeviceType.CAMERA -> ctl.turnOff(d)\n                    DeviceType.BLIND -> ctl.turnOn(d)\n                    DeviceType.SPRINKLER -> ctl.turnOff(d)\n                    DeviceType.DOOR_LOCK -> ctl.turnOn(d)\n                }\n            }\n        }\n    }\n}\n\nclass FirmwareManager {\n    fun steps(d: SmartDevice): List<String> = when (d.getType()) {\n        DeviceType.LIGHT -> listOf(\"Ping\",\"PushFW\",\"Reboot\")\n        DeviceType.THERMOSTAT -> listOf(\"Ping\",\"Backup\",\"PushFW\",\"Recalibrate\")\n        DeviceType.DOOR_LOCK -> listOf(\"SecureChannel\",\"PushFW\",\"Reauth\")\n        DeviceType.CAMERA -> listOf(\"Ping\",\"PushFW\",\"RestartStream\")\n        DeviceType.SPRINKLER -> listOf(\"Ping\",\"PushFW\",\"ValveTest\")\n        DeviceType.BLIND -> listOf(\"Ping\",\"PushFW\",\"AlignMotor\")\n        DeviceType.SPEAKER -> listOf(\"Ping\",\"PushFW\",\"RestartAudio\")\n    }\n}\n\nclass ScheduleEngine {\n    class Entry(val device: SmartDevice, val cron: String, val action: String)\n    fun run(e: Entry, ctl: SmartHomeController) {\n        when (e.device.getType()) {\n            DeviceType.LIGHT -> if (e.action == \"on\") ctl.turnOn(e.device) else ctl.turnOff(e.device)\n            DeviceType.SPRINKLER -> if (e.action == \"on\") ctl.turnOn(e.device) else ctl.turnOff(e.device)\n            DeviceType.THERMOSTAT -> if (e.action == \"comfort\") ctl.setMode(e.device, Mode.COMFORT)\n            DeviceType.BLIND -> if (e.action == \"open\") ctl.turnOn(e.device) else ctl.turnOff(e.device)\n            DeviceType.SPEAKER -> if (e.action == \"play\") ctl.turnOn(e.device) else ctl.turnOff(e.device)\n            else -> ctl.turnOff(e.device)\n        }\n    }\n}\n\nclass WeatherAdvisor {\n    fun shouldWater(condition: String): Boolean = when (condition) {\n        \"rain\" -> false\n        \"dry\" -> true\n        \"windy\" -> false\n        else -> false\n    }\n    fun lightLevelFor(condition: String): Int = when (condition) {\n        \"sunny\" -> 100\n        \"cloudy\" -> 70\n        \"rain\" -> 50\n        else -> 60\n    }\n}\n\nclass GeoFence {\n    fun inside(user: String, distanceMeters: Double): Boolean = when (user) {\n        \"owner\" -> distanceMeters < 50\n        \"guest\" -> distanceMeters < 10\n        else -> false\n    }\n}\n\nclass AccessController {\n    fun canControl(d: SmartDevice, role: String): Boolean = when (d.getType()) {\n        DeviceType.DOOR_LOCK -> role == \"owner\"\n        DeviceType.CAMERA -> role == \"owner\" || role == \"admin\"\n        DeviceType.THERMOSTAT -> role != \"guest\"\n        DeviceType.SPEAKER -> true\n        else -> true\n    }\n}\n\nclass DeviceRenderer {\n    fun icon(d: SmartDevice): String = when (d.getType()) {\n        DeviceType.LIGHT -> \"ð¡\"\n        DeviceType.THERMOSTAT -> \"ð¡ï¸\"\n        DeviceType.DOOR_LOCK -> \"ð\"\n        DeviceType.CAMERA -> \"ð·\"\n        DeviceType.SPRINKLER -> \"ð§\"\n        DeviceType.BLIND -> \"ðª\"\n        DeviceType.SPEAKER -> \"ð\"\n    }\n    fun label(d: SmartDevice): String = when (d.getType()) {\n        DeviceType.LIGHT -> \"Light-${d.getId()}\"\n        DeviceType.THERMOSTAT -> \"Thermo-${d.getId()}\"\n        DeviceType.DOOR_LOCK -> \"Lock-${d.getId()}\"\n        DeviceType.CAMERA -> \"Cam-${d.getId()}\"\n        DeviceType.SPRINKLER -> \"Sprink-${d.getId()}\"\n        DeviceType.BLIND -> \"Blind-${d.getId()}\"\n        DeviceType.SPEAKER -> \"Speaker-${d.getId()}\"\n    }\n}\n\nclass DeviceRegistry {\n    private val byId: MutableMap<String, SmartDevice> = HashMap()\n    fun register(d: SmartDevice) { byId[d.getId()] = d }\n    fun find(id: String): SmartDevice? = byId[id]\n    fun groups(d: SmartDevice): List<String> = when (d.getType()) {\n        DeviceType.LIGHT -> listOf(\"lighting\",\"grid\")\n        DeviceType.THERMOSTAT -> listOf(\"climate\",\"grid\")\n        DeviceType.DOOR_LOCK -> listOf(\"security\")\n        DeviceType.CAMERA -> listOf(\"security\",\"video\")\n        DeviceType.SPRINKLER -> listOf(\"garden\",\"water\")\n        DeviceType.BLIND -> listOf(\"lighting\",\"shades\")\n        DeviceType.SPEAKER -> listOf(\"media\")\n    }\n}\n\nclass AutomationRuleEngine {\n    private val ctl = SmartHomeController()\n    fun onEvent(event: String, d: SmartDevice) {\n        when (event) {\n            \"motion\" -> when (d.getType()) {\n                DeviceType.CAMERA -> ctl.turnOn(d)\n                DeviceType.LIGHT -> ctl.turnOn(d)\n                else -> {}\n            }\n            \"sunset\" -> when (d.getType()) {\n                DeviceType.LIGHT -> ctl.turnOn(d)\n                DeviceType.BLIND -> ctl.turnOff(d)\n                else -> {}\n            }\n            \"door-open\" -> when (d.getType()) {\n                DeviceType.DOOR_LOCK -> ctl.turnOn(d)\n                DeviceType.CAMERA -> ctl.turnOn(d)\n                else -> {}\n            }\n        }\n    }\n}\n\nclass ReportPrinter {\n    private val ctl = SmartHomeController()\n    private val diag = DiagnosticsService()\n    private val render = DeviceRenderer()\n    fun printRoom(room: Room) {\n        println(\"Room: ${room.getName()} (${room.getType()})\")\n        for (d in room.getDevices()) {\n            val e = ctl.energyUsageKwh(d, 30)\n            println(\"${render.icon(d)} ${render.label(d)} mode=${d.getMode()} health=${diag.health(d)} 30m=${\"%.3f\".format(e)}kWh\")\n        }\n    }\n}\n",
            "output": "import java.util.*\n\nenum class DeviceType { LIGHT, THERMOSTAT, DOOR_LOCK, CAMERA, SPRINKLER, BLIND, SPEAKER }\nenum class RoomType { LIVING, KITCHEN, BEDROOM, BATHROOM, GARDEN, GARAGE }\nenum class Mode { ECO, COMFORT, AWAY, NIGHT, PARTY }\nenum class AlertType { INFO, WARN, CRITICAL }\n\nabstract class SmartDevice(protected val id0: String, protected val type0: DeviceType) {\n    protected var currentMode: Mode = Mode.ECO\n    protected var onlineFlag: Boolean = true\n\n    fun getId(): String = id0\n    fun getType(): DeviceType = type0\n    fun getMode(): Mode = currentMode\n    fun isOnline(): Boolean = onlineFlag\n    fun setMode(m: Mode) { currentMode = m }\n    fun setOnline(o: Boolean) { onlineFlag = o }\n\n    abstract fun turnOn()\n    abstract fun turnOff()\n    abstract fun setModeAction(m: Mode)\n    abstract fun getEnergyUsagePerMinute(): Double\n    abstract fun getHealthStatus(): String\n    abstract fun getNotificationPrefix(): String\n    abstract fun isActionAllowed(action: String, userHome: Boolean): Boolean\n    abstract fun handleVoiceCommand(phrase: String, ctl: SmartHomeController)\n    abstract fun applyEveningScene(ctl: SmartHomeController)\n    abstract fun applyAwayScene(ctl: SmartHomeController)\n    abstract fun applyPartyScene(ctl: SmartHomeController)\n    abstract fun getFirmwareSteps(): List<String>\n    abstract fun executeScheduledAction(action: String, ctl: SmartHomeController)\n    abstract fun handleMotionEvent(ctl: SmartHomeController)\n    abstract fun handleSunsetEvent(ctl: SmartHomeController)\n    abstract fun handleDoorOpenEvent(ctl: SmartHomeController)\n    abstract fun getIcon(): String\n    abstract fun getLabel(): String\n    abstract fun getGroups(): List<String>\n    abstract fun canUserControl(role: String): Boolean\n}\n\nclass LightDevice(id: String) : SmartDevice(id, DeviceType.LIGHT) {\n    override fun turnOn() { println(\"Light $id0 ON\") }\n    override fun turnOff() { println(\"Light $id0 OFF\") }\n    override fun setModeAction(m: Mode) { println(\"Light $id0 -> $m\") }\n    override fun getEnergyUsagePerMinute(): Double = 0.012\n    override fun getHealthStatus(): String = if (onlineFlag) \"OK\" else \"Bulb Offline\"\n    override fun getNotificationPrefix(): String = \"Light\"\n    override fun isActionAllowed(action: String, userHome: Boolean): Boolean = true\n    override fun handleVoiceCommand(phrase: String, ctl: SmartHomeController) {\n        if (phrase.equals(\"lights on\", ignoreCase = true)) ctl.turnOn(this)\n        else if (phrase.equals(\"lights off\", ignoreCase = true)) ctl.turnOff(this)\n    }\n    override fun applyEveningScene(ctl: SmartHomeController) { ctl.turnOn(this); ctl.setMode(this, Mode.COMFORT) }\n    override fun applyAwayScene(ctl: SmartHomeController) { ctl.turnOff(this) }\n    override fun applyPartyScene(ctl: SmartHomeController) { ctl.turnOn(this); ctl.setMode(this, Mode.PARTY) }\n    override fun getFirmwareSteps(): List<String> = listOf(\"Ping\",\"PushFW\",\"Reboot\")\n    override fun executeScheduledAction(action: String, ctl: SmartHomeController) {\n        if (action == \"on\") ctl.turnOn(this) else ctl.turnOff(this)\n    }\n    override fun handleMotionEvent(ctl: SmartHomeController) { ctl.turnOn(this) }\n    override fun handleSunsetEvent(ctl: SmartHomeController) { ctl.turnOn(this) }\n    override fun handleDoorOpenEvent(ctl: SmartHomeController) {}\n    override fun getIcon(): String = \"ð¡\"\n    override fun getLabel(): String = \"Light-$id0\"\n    override fun getGroups(): List<String> = listOf(\"lighting\",\"grid\")\n    override fun canUserControl(role: String): Boolean = true\n}\n\nclass ThermostatDevice(id: String) : SmartDevice(id, DeviceType.THERMOSTAT) {\n    override fun turnOn() { println(\"Thermostat $id0 heating\") }\n    override fun turnOff() { println(\"Thermostat $id0 idle\") }\n    override fun setModeAction(m: Mode) { println(\"Thermostat $id0 -> $m\") }\n    override fun getEnergyUsagePerMinute(): Double = 0.08\n    override fun getHealthStatus(): String = if (onlineFlag) \"OK\" else \"Sensor Offline\"\n    override fun getNotificationPrefix(): String = \"Thermostat\"\n    override fun isActionAllowed(action: String, userHome: Boolean): Boolean = true\n    override fun handleVoiceCommand(phrase: String, ctl: SmartHomeController) {\n        if (phrase.equals(\"heat on\", ignoreCase = true)) ctl.turnOn(this)\n        else if (phrase.equals(\"eco\", ignoreCase = true)) ctl.setMode(this, Mode.ECO)\n    }\n    override fun applyEveningScene(ctl: SmartHomeController) { ctl.setMode(this, Mode.COMFORT) }\n    override fun applyAwayScene(ctl: SmartHomeController) { ctl.setMode(this, Mode.AWAY) }\n    override fun applyPartyScene(ctl: SmartHomeController) { ctl.setMode(this, Mode.COMFORT) }\n    override fun getFirmwareSteps(): List<String> = listOf(\"Ping\",\"Backup\",\"PushFW\",\"Recalibrate\")\n    override fun executeScheduledAction(action: String, ctl: SmartHomeController) {\n        if (action == \"comfort\") ctl.setMode(this, Mode.COMFORT)\n    }\n    override fun handleMotionEvent(ctl: SmartHomeController) {}\n    override fun handleSunsetEvent(ctl: SmartHomeController) {}\n    override fun handleDoorOpenEvent(ctl: SmartHomeController) {}\n    override fun getIcon(): String = \"ð¡ï¸\"\n    override fun getLabel(): String = \"Thermo-$id0\"\n    override fun getGroups(): List<String> = listOf(\"climate\",\"grid\")\n    override fun canUserControl(role: String): Boolean = role != \"guest\"\n}\n\nclass DoorLockDevice(id: String) : SmartDevice(id, DeviceType.DOOR_LOCK) {\n    override fun turnOn() { println(\"Lock $id0 locked\") }\n    override fun turnOff() { println(\"Lock $id0 secured\") }\n    override fun setModeAction(m: Mode) { println(\"Lock $id0 -> $m\") }\n    override fun getEnergyUsagePerMinute(): Double = 0.0002\n    override fun getHealthStatus(): String = if (onlineFlag) \"OK\" else \"Battery Low\"\n    override fun getNotificationPrefix(): String = \"Lock\"\n    override fun isActionAllowed(action: String, userHome: Boolean): Boolean {\n        return if (action == \"unlock\") userHome else true\n    }\n    override fun handleVoiceCommand(phrase: String, ctl: SmartHomeController) {\n        if (phrase.equals(\"lock door\", ignoreCase = true)) ctl.turnOn(this)\n    }\n    override fun applyEveningScene(ctl: SmartHomeController) { ctl.turnOn(this) }\n    override fun applyAwayScene(ctl: SmartHomeController) { ctl.turnOn(this) }\n    override fun applyPartyScene(ctl: SmartHomeController) { ctl.turnOn(this) }\n    override fun getFirmwareSteps(): List<String> = listOf(\"SecureChannel\",\"PushFW\",\"Reauth\")\n    override fun executeScheduledAction(action: String, ctl: SmartHomeController) { ctl.turnOff(this) }\n    override fun handleMotionEvent(ctl: SmartHomeController) {}\n    override fun handleSunsetEvent(ctl: SmartHomeController) {}\n    override fun handleDoorOpenEvent(ctl: SmartHomeController) { ctl.turnOn(this) }\n    override fun getIcon(): String = \"ð\"\n    override fun getLabel(): String = \"Lock-$id0\"\n    override fun getGroups(): List<String> = listOf(\"security\")\n    override fun canUserControl(role: String): Boolean = role == \"owner\"\n}\n\nclass CameraDevice(id: String) : SmartDevice(id, DeviceType.CAMERA) {\n    override fun turnOn() { println(\"Camera $id0 recording\") }\n    override fun turnOff() { println(\"Camera $id0 standby\") }\n    override fun setModeAction(m: Mode) { println(\"Camera $id0 -> $m\") }\n    override fun getEnergyUsagePerMinute(): Double = 0.01\n    override fun getHealthStatus(): String = if (onlineFlag) \"OK\" else \"Stream Error\"\n    override fun getNotificationPrefix(): String = \"Camera\"\n    override fun isActionAllowed(action: String, userHome: Boolean): Boolean {\n        return action != \"disable\" || userHome\n    }\n    override fun handleVoiceCommand(phrase: String, ctl: SmartHomeController) {\n        if (phrase.equals(\"record\", ignoreCase = true)) ctl.turnOn(this)\n    }\n    override fun applyEveningScene(ctl: SmartHomeController) { ctl.turnOn(this) }\n    override fun applyAwayScene(ctl: SmartHomeController) { ctl.turnOn(this) }\n    override fun applyPartyScene(ctl: SmartHomeController) { ctl.turnOff(this) }\n    override fun getFirmwareSteps(): List<String> = listOf(\"Ping\",\"PushFW\",\"RestartStream\")\n    override fun executeScheduledAction(action: String, ctl: SmartHomeController) { ctl.turnOff(this) }\n    override fun handleMotionEvent(ctl: SmartHomeController) { ctl.turnOn(this) }\n    override fun handleSunsetEvent(ctl: SmartHomeController) {}\n    override fun handleDoorOpenEvent(ctl: SmartHomeController) { ctl.turnOn(this) }\n    override fun getIcon(): String = \"ð·\"\n    override fun getLabel(): String = \"Cam-$id0\"\n    override fun getGroups(): List<String> = listOf(\"security\",\"video\")\n    override fun canUserControl(role: String): Boolean = role == \"owner\" || role == \"admin\"\n}\n\nclass SprinklerDevice(id: String) : SmartDevice(id, DeviceType.SPRINKLER) {\n    override fun turnOn() { println(\"Sprinkler $id0 watering\") }\n    override fun turnOff() { println(\"Sprinkler $id0 stopped\") }\n    override fun setModeAction(m: Mode) { println(\"Sprinkler $id0 -> $m\") }\n    override fun getEnergyUsagePerMinute(): Double = 0.03\n    override fun getHealthStatus(): String = if (onlineFlag) \"OK\" else \"Valve Error\"\n    override fun getNotificationPrefix(): String = \"Sprinkler\"\n    override fun isActionAllowed(action: String, userHome: Boolean): Boolean {\n        return !(action == \"on\" && userHome && currentMode == Mode.PARTY)\n    }\n    override fun handleVoiceCommand(phrase: String, ctl: SmartHomeController) {\n        if (phrase.equals(\"water\", ignoreCase = true)) ctl.turnOn(this)\n    }\n    override fun applyEveningScene(ctl: SmartHomeController) { ctl.turnOff(this) }\n    override fun applyAwayScene(ctl: SmartHomeController) { ctl.turnOff(this) }\n    override fun applyPartyScene(ctl: SmartHomeController) { ctl.turnOff(this) }\n    override fun getFirmwareSteps(): List<String> = listOf(\"Ping\",\"PushFW\",\"ValveTest\")\n    override fun executeScheduledAction(action: String, ctl: SmartHomeController) {\n        if (action == \"on\") ctl.turnOn(this) else ctl.turnOff(this)\n    }\n    override fun handleMotionEvent(ctl: SmartHomeController) {}\n    override fun handleSunsetEvent(ctl: SmartHomeController) {}\n    override fun handleDoorOpenEvent(ctl: SmartHomeController) {}\n    override fun getIcon(): String = \"ð§\"\n    override fun getLabel(): String = \"Sprink-$id0\"\n    override fun getGroups(): List<String> = listOf(\"garden\",\"water\")\n    override fun canUserControl(role: String): Boolean = true\n}\n\nclass BlindDevice(id: String) : SmartDevice(id, DeviceType.BLIND) {\n    override fun turnOn() { println(\"Blind $id0 open\") }\n    override fun turnOff() { println(\"Blind $id0 closed\") }\n    override fun setModeAction(m: Mode) { println(\"Blind $id0 -> $m\") }\n    override fun getEnergyUsagePerMinute(): Double = 0.001\n    override fun getHealthStatus(): String = if (onlineFlag) \"OK\" else \"Motor Jam\"\n    override fun getNotificationPrefix(): String = \"Blind\"\n    override fun isActionAllowed(action: String, userHome: Boolean): Boolean = true\n    override fun handleVoiceCommand(phrase: String, ctl: SmartHomeController) {\n        if (phrase.equals(\"open blinds\", ignoreCase = true)) ctl.turnOn(this)\n        else if (phrase.equals(\"close blinds\", ignoreCase = true)) ctl.turnOff(this)\n    }\n    override fun applyEveningScene(ctl: SmartHomeController) { ctl.turnOff(this) }\n    override fun applyAwayScene(ctl: SmartHomeController) { ctl.turnOff(this) }\n    override fun applyPartyScene(ctl: SmartHomeController) { ctl.turnOn(this) }\n    override fun getFirmwareSteps(): List<String> = listOf(\"Ping\",\"PushFW\",\"AlignMotor\")\n    override fun executeScheduledAction(action: String, ctl: SmartHomeController) {\n        if (action == \"open\") ctl.turnOn(this) else ctl.turnOff(this)\n    }\n    override fun handleMotionEvent(ctl: SmartHomeController) {}\n    override fun handleSunsetEvent(ctl: SmartHomeController) { ctl.turnOff(this) }\n    override fun handleDoorOpenEvent(ctl: SmartHomeController) {}\n    override fun getIcon(): String = \"ðª\"\n    override fun getLabel(): String = \"Blind-$id0\"\n    override fun getGroups(): List<String> = listOf(\"lighting\",\"shades\")\n    override fun canUserControl(role: String): Boolean = true\n}\n\nclass SpeakerDevice(id: String) : SmartDevice(id, DeviceType.SPEAKER) {\n    override fun turnOn() { println(\"Speaker $id0 playing\") }\n    override fun turnOff() { println(\"Speaker $id0 paused\") }\n    override fun setModeAction(m: Mode) { println(\"Speaker $id0 -> $m\") }\n    override fun getEnergyUsagePerMinute(): Double = 0.015\n    override fun getHealthStatus(): String = if (onlineFlag) \"OK\" else \"Audio Fault\"\n    override fun getNotificationPrefix(): String = \"Speaker\"\n    override fun isActionAllowed(action: String, userHome: Boolean): Boolean {\n        return !(action == \"play\" && !userHome)\n    }\n    override fun handleVoiceCommand(phrase: String, ctl: SmartHomeController) {\n        if (phrase.equals(\"play music\", ignoreCase = true)) ctl.turnOn(this)\n        else if (phrase.equals(\"pause music\", ignoreCase = true)) ctl.turnOff(this)\n    }\n    override fun applyEveningScene(ctl: SmartHomeController) { ctl.turnOn(this) }\n    override fun applyAwayScene(ctl: SmartHomeController) { ctl.turnOff(this) }\n    override fun applyPartyScene(ctl: SmartHomeController) { ctl.turnOn(this) }\n    override fun getFirmwareSteps(): List<String> = listOf(\"Ping\",\"PushFW\",\"RestartAudio\")\n    override fun executeScheduledAction(action: String, ctl: SmartHomeController) {\n        if (action == \"play\") ctl.turnOn(this) else ctl.turnOff(this)\n    }\n    override fun handleMotionEvent(ctl: SmartHomeController) {}\n    override fun handleSunsetEvent(ctl: SmartHomeController) {}\n    override fun handleDoorOpenEvent(ctl: SmartHomeController) {}\n    override fun getIcon(): String = \"ð\"\n    override fun getLabel(): String = \"Speaker-$id0\"\n    override fun getGroups(): List<String> = listOf(\"media\")\n    override fun canUserControl(role: String): Boolean = true\n}\n\nclass Room(private val name: String, private val type: RoomType) {\n    private val devices: MutableList<SmartDevice> = ArrayList()\n    fun add(d: SmartDevice) { devices.add(d) }\n    fun getDevices(): List<SmartDevice> = devices\n    fun getName(): String = name\n    fun getType(): RoomType = type\n}\n\nclass SmartHomeController {\n    fun turnOn(d: SmartDevice) { d.turnOn() }\n    fun turnOff(d: SmartDevice) { d.turnOff() }\n    fun setMode(d: SmartDevice, m: Mode) { d.setMode(m); d.setModeAction(m) }\n    fun energyUsageKwh(d: SmartDevice, minutes: Int): Double {\n        return d.getEnergyUsagePerMinute() * minutes\n    }\n}\n\nclass NotificationService {\n    fun push(d: SmartDevice, t: AlertType, msg: String) {\n        println(\"[$t] ${d.getNotificationPrefix()} ${d.getId()}: $msg\")\n    }\n}\n\nclass DiagnosticsService {\n    fun health(d: SmartDevice): String = d.getHealthStatus()\n}\n\nclass SecurityPolicy {\n    fun allowed(d: SmartDevice, action: String, userHome: Boolean): Boolean {\n        return d.isActionAllowed(action, userHome)\n    }\n}\n\nclass VoiceCommandProcessor {\n    private val ctl = SmartHomeController()\n    fun handle(phrase: String, d: SmartDevice) {\n        d.handleVoiceCommand(phrase, ctl)\n    }\n}\n\nclass SceneManager {\n    private val ctl = SmartHomeController()\n    fun apply(scene: String, devices: List<SmartDevice>) {\n        for (d in devices) {\n            when (scene) {\n                \"Evening\" -> d.applyEveningScene(ctl)\n                \"Away\" -> d.applyAwayScene(ctl)\n                \"Party\" -> d.applyPartyScene(ctl)\n            }\n        }\n    }\n}\n\nclass FirmwareManager {\n    fun steps(d: SmartDevice): List<String> = d.getFirmwareSteps()\n}\n\nclass ScheduleEngine {\n    class Entry(val device: SmartDevice, val cron: String, val action: String)\n    fun run(e: Entry, ctl: SmartHomeController) {\n        e.device.executeScheduledAction(e.action, ctl)\n    }\n}\n\nclass WeatherAdvisor {\n    fun shouldWater(condition: String): Boolean {\n        return when (condition) {\n            \"rain\" -> false\n            \"dry\" -> true\n            \"windy\" -> false\n            else -> false\n        }\n    }\n    fun lightLevelFor(condition: String): Int {\n        return when (condition) {\n            \"sunny\" -> 100\n            \"cloudy\" -> 70\n            \"rain\" -> 50\n            else -> 60\n        }\n    }\n}\n\nclass GeoFence {\n    fun inside(user: String, distanceMeters: Double): Boolean {\n        return when (user) {\n            \"owner\" -> distanceMeters < 50\n            \"guest\" -> distanceMeters < 10\n            else -> false\n        }\n    }\n}\n\nclass AccessController {\n    fun canControl(d: SmartDevice, role: String): Boolean {\n        return d.canUserControl(role)\n    }\n}\n\nclass DeviceRenderer {\n    fun icon(d: SmartDevice): String = d.getIcon()\n    fun label(d: SmartDevice): String = d.getLabel()\n}\n\nclass DeviceRegistry {\n    private val byId: MutableMap<String, SmartDevice> = HashMap()\n    fun register(d: SmartDevice) { byId[d.getId()] = d }\n    fun find(id: String): SmartDevice? = byId[id]\n    fun groups(d: SmartDevice): List<String> = d.getGroups()\n}\n\nclass AutomationRuleEngine {\n    private val ctl = SmartHomeController()\n    fun onEvent(event: String, d: SmartDevice) {\n        when (event) {\n            \"motion\" -> d.handleMotionEvent(ctl)\n            \"sunset\" -> d.handleSunsetEvent(ctl)\n            \"door-open\" -> d.handleDoorOpenEvent(ctl)\n        }\n    }\n}\n\nclass ReportPrinter {\n    private val ctl = SmartHomeController()\n    private val diag = DiagnosticsService()\n    private val render = DeviceRenderer()\n    fun printRoom(room: Room) {\n        println(\"Room: ${room.getName()} (${room.getType()})\")\n        for (d in room.getDevices()) {\n            val e = ctl.energyUsageKwh(d, 30)\n            println(\"${render.icon(d)} ${render.label(d)} mode=${d.getMode()} health=${diag.health(d)} 30m=${String.format(\"%.3f\", e)}kWh\")\n        }\n    }\n}\n",
            "level": "HARD",
            "language": "KOTLIN",
            "violation": "OCP"
        },
        {
            "input": "abstract class GraphicObject(private val color: String) {\n    fun getColor(): String = color\n}\n\nenum class ShapeKind {\n    RECTANGLE, CIRCLE, CUBE\n}\n\nabstract class Shape(private val kind: ShapeKind, color: String) : GraphicObject(color) {\n    fun getKind(): ShapeKind = kind\n}\n\nabstract class TwoDShape(kind: ShapeKind, color: String) : Shape(kind, color)\nabstract class ThreeDShape(kind: ShapeKind, color: String) : Shape(kind, color)\n\nclass Rectangle(private val width: Double, private val height: Double, color: String) :\n    TwoDShape(ShapeKind.RECTANGLE, color) {\n    fun getWidth(): Double = width\n    fun getHeight(): Double = height\n}\n\nclass Circle(private val radius: Double, color: String) :\n    TwoDShape(ShapeKind.CIRCLE, color) {\n    fun getRadius(): Double = radius\n}\n\nclass Cube(private val edge: Double, color: String) :\n    ThreeDShape(ShapeKind.CUBE, color) {\n    fun getEdge(): Double = edge\n}\n\nenum class Metric { AREA, PERIMETER, VOLUME }\n\nclass MetricCalculator {\n    fun compute(shape: Shape, metric: Metric): Double {\n        return when (shape.getKind()) {\n            ShapeKind.RECTANGLE -> {\n                val r = shape as Rectangle\n                when (metric) {\n                    Metric.AREA -> r.getWidth() * r.getHeight()\n                    Metric.PERIMETER -> 2 * (r.getWidth() + r.getHeight())\n                    Metric.VOLUME -> 0.0\n                }\n            }\n            ShapeKind.CIRCLE -> {\n                val c = shape as Circle\n                when (metric) {\n                    Metric.AREA -> Math.PI * c.getRadius() * c.getRadius()\n                    Metric.PERIMETER -> 2 * Math.PI * c.getRadius()\n                    Metric.VOLUME -> 0.0\n                }\n            }\n            ShapeKind.CUBE -> {\n                val cube = shape as Cube\n                when (metric) {\n                    Metric.AREA -> 6 * cube.getEdge() * cube.getEdge()\n                    Metric.PERIMETER -> 12 * cube.getEdge()\n                    Metric.VOLUME -> Math.pow(cube.getEdge(), 3.0)\n                }\n            }\n        }\n    }\n}\n\nclass ShapeExporter {\n    fun toJson(shape: Shape): String {\n        return when (shape.getKind()) {\n            ShapeKind.RECTANGLE -> {\n                val r = shape as Rectangle\n                String.format(\n                    \"{\\\"type\\\":\\\"rectangle\\\",\\\"color\\\":\\\"%s\\\",\\\"width\\\":%.2f,\\\"height\\\":%.2f}\",\n                    r.getColor(), r.getWidth(), r.getHeight()\n                )\n            }\n            ShapeKind.CIRCLE -> {\n                val c = shape as Circle\n                String.format(\n                    \"{\\\"type\\\":\\\"circle\\\",\\\"color\\\":\\\"%s\\\",\\\"radius\\\":%.2f}\",\n                    c.getColor(), c.getRadius()\n                )\n            }\n            ShapeKind.CUBE -> {\n                val cube = shape as Cube\n                String.format(\n                    \"{\\\"type\\\":\\\"cube\\\",\\\"color\\\":\\\"%s\\\",\\\"edge\\\":%.2f}\",\n                    cube.getColor(), cube.getEdge()\n                )\n            }\n        }\n    }\n}\n\nclass ShapeFactory {\n    fun create(spec: String): Shape {\n        val parts = spec.split(\":\", limit = 2)\n        val type = parts[0].trim()\n        val kvs = if (parts.size > 1) parts[1] else \"\"\n        val map = mutableMapOf<String, String>()\n        for (kv in kvs.split(\";\")) {\n            val p = kv.split(\"=\")\n            if (p.size == 2) map[p[0].trim()] = p[1].trim()\n        }\n        val color = map.getOrDefault(\"color\", \"black\")\n        return when (type.lowercase()) {\n            \"rectangle\" -> Rectangle(\n                map.getOrDefault(\"width\", \"0\").toDouble(),\n                map.getOrDefault(\"height\", \"0\").toDouble(),\n                color\n            )\n            \"circle\" -> Circle(\n                map.getOrDefault(\"radius\", \"0\").toDouble(),\n                color\n            )\n            \"cube\" -> Cube(\n                map.getOrDefault(\"edge\", \"0\").toDouble(),\n                color\n            )\n            else -> throw IllegalArgumentException(\"Unknown shape: $type\")\n        }\n    }\n}\n",
            "output": "abstract class GraphicObject(private val color: String) {\n    fun getColor(): String = color\n}\n\nabstract class Shape(color: String) : GraphicObject(color) {\n    abstract fun area(): Double\n    abstract fun perimeter(): Double\n    abstract fun volume(): Double\n    abstract fun toJson(): String\n}\n\nabstract class TwoDShape(color: String) : Shape(color) {\n    override fun volume(): Double = 0.0\n}\n\nabstract class ThreeDShape(color: String) : Shape(color)\n\nclass Rectangle(private val width: Double, private val height: Double, color: String) : TwoDShape(color) {\n    fun getWidth(): Double = width\n    fun getHeight(): Double = height\n\n    override fun area(): Double = width * height\n    override fun perimeter(): Double = 2 * (width + height)\n\n    override fun toJson(): String =\n        String.format(\"{\\\"type\\\":\\\"rectangle\\\",\\\"color\\\":\\\"%s\\\",\\\"width\\\":%.2f,\\\"height\\\":%.2f}\",\n            getColor(), width, height)\n}\n\nclass Circle(private val radius: Double, color: String) : TwoDShape(color) {\n    fun getRadius(): Double = radius\n\n    override fun area(): Double = Math.PI * radius * radius\n    override fun perimeter(): Double = 2 * Math.PI * radius\n\n    override fun toJson(): String =\n        String.format(\"{\\\"type\\\":\\\"circle\\\",\\\"color\\\":\\\"%s\\\",\\\"radius\\\":%.2f}\",\n            getColor(), radius)\n}\n\nclass Cube(private val edge: Double, color: String) : ThreeDShape(color) {\n    fun getEdge(): Double = edge\n\n    override fun area(): Double = 6 * edge * edge\n    override fun perimeter(): Double = 12 * edge\n    override fun volume(): Double = Math.pow(edge, 3.0)\n\n    override fun toJson(): String =\n        String.format(\"{\\\"type\\\":\\\"cube\\\",\\\"color\\\":\\\"%s\\\",\\\"edge\\\":%.2f}\",\n            getColor(), edge)\n}\n\nenum class Metric { AREA, PERIMETER, VOLUME }\n\nclass MetricCalculator {\n    fun compute(shape: Shape, metric: Metric): Double =\n        when (metric) {\n            Metric.AREA -> shape.area()\n            Metric.PERIMETER -> shape.perimeter()\n            Metric.VOLUME -> shape.volume()\n        }\n}\n\nclass ShapeExporter {\n    fun toJson(shape: Shape): String = shape.toJson()\n}\n\nclass ShapeFactory {\n    fun create(spec: String): Shape {\n        val parts = spec.split(\":\", limit = 2)\n        val type = parts[0].trim()\n        val kvs = if (parts.size > 1) parts[1].split(\";\") else emptyList()\n        val map = mutableMapOf<String, String>()\n        for (kv in kvs) {\n            val p = kv.split(\"=\")\n            if (p.size == 2) map[p[0].trim()] = p[1].trim()\n        }\n        val color = map.getOrDefault(\"color\", \"black\")\n\n        return when (type.lowercase()) {\n            \"rectangle\" -> Rectangle(\n                map.getOrDefault(\"width\", \"0\").toDouble(),\n                map.getOrDefault(\"height\", \"0\").toDouble(),\n                color\n            )\n            \"circle\" -> Circle(\n                map.getOrDefault(\"radius\", \"0\").toDouble(),\n                color\n            )\n            \"cube\" -> Cube(\n                map.getOrDefault(\"edge\", \"0\").toDouble(),\n                color\n            )\n            else -> throw IllegalArgumentException(\"Unknown shape: $type\")\n        }\n    }\n}\n",
            "level": "MODERATE",
            "language": "KOTLIN",
            "violation": "OCP"
        },
        {
            "input": "import kotlin.random.Random\nimport kotlin.math.roundToInt\n\n\nenum class CharacterType {\n    WARRIOR,\n    MAGE,\n    ARCHER\n}\n\nenum class SkillType {\n    BASIC,\n    SPECIAL\n}\n\nclass GameCharacter(\n    private val name: String,\n    private val type: CharacterType,\n    private val baseAttack: Int,\n    private val level: Int\n) {\n    fun getName() = name\n    fun getType() = type\n    fun getBaseAttack() = baseAttack\n    fun getLevel() = level\n}\n\nclass Skill(\n    private val type: SkillType,\n    private val name: String\n) {\n    fun getType() = type\n    fun getName() = name\n}\n\nclass Enemy(\n    private val name: String,\n    private val armor: Int,\n    private val resistance: Int\n) {\n    fun getName() = name\n    fun getArmor() = armor\n    fun getResistance() = resistance\n}\n\nclass DamageCalculator {\n    private val rng = Random.Default\n\n    fun calculateDamage(c: GameCharacter, s: Skill, e: Enemy): Int {\n        return when (c.getType()) {\n            CharacterType.WARRIOR -> {\n                var raw = (c.getBaseAttack() * (1.2 + c.getLevel() * 0.05)).toInt()\n                if (s.getType() == SkillType.SPECIAL) raw = (raw * 1.5).toInt()\n                raw -= e.getArmor()\n                maxOf(raw, 0)\n            }\n            CharacterType.MAGE -> {\n                var raw = c.getBaseAttack() + (c.getLevel() * 3.5).toInt()\n                if (s.getType() == SkillType.SPECIAL) raw += 25\n                raw -= e.getResistance()\n                maxOf(raw, 0)\n            }\n            CharacterType.ARCHER -> {\n                var raw = c.getBaseAttack()\n                val crit = rng.nextInt(100) < (20 + c.getLevel())\n                if (crit) raw *= 2\n                if (s.getType() == SkillType.SPECIAL) raw += 10\n                raw -= (e.getArmor() * 0.5).toInt()\n                maxOf(raw, 0)\n            }\n        }\n    }\n}\n\nclass LootCalculator {\n    fun calculateGold(c: GameCharacter, e: Enemy): Int {\n        return when (c.getType()) {\n            CharacterType.WARRIOR -> 10 + c.getLevel() + e.getArmor() / 5\n            CharacterType.MAGE -> 8 + c.getLevel() * 2 + e.getResistance() / 4\n            CharacterType.ARCHER -> 9 + (c.getLevel() * 1.5).roundToInt()\n        }\n    }\n}\n\n",
            "output": "import java.util.Random\n\nenum class SkillType {\n    BASIC,\n    SPECIAL\n}\n\nclass Skill(private val type: SkillType, private val name: String) {\n    fun getType(): SkillType = type\n    fun getName(): String = name\n}\n\nclass Enemy(private val name: String, private val armor: Int, private val resistance: Int) {\n    fun getName(): String = name\n    fun getArmor(): Int = armor\n    fun getResistance(): Int = resistance\n}\n\nabstract class GameCharacter(private val name: String, private val baseAttack: Int, private val level: Int) {\n    fun getName(): String = name\n    fun getBaseAttack(): Int = baseAttack\n    fun getLevel(): Int = level\n\n    abstract fun calculateDamage(s: Skill, e: Enemy, rng: Random): Int\n    abstract fun calculateGold(e: Enemy): Int\n}\n\nclass Warrior(name: String, baseAttack: Int, level: Int) : GameCharacter(name, baseAttack, level) {\n    override fun calculateDamage(s: Skill, e: Enemy, rng: Random): Int {\n        var raw = (getBaseAttack() * (1.2 + getLevel() * 0.05)).toInt()\n        if (s.getType() == SkillType.SPECIAL) raw = (raw * 1.5).toInt()\n        raw -= e.getArmor()\n        return Math.max(raw, 0)\n    }\n\n    override fun calculateGold(e: Enemy): Int {\n        return 10 + getLevel() + e.getArmor() / 5\n    }\n}\n\nclass Mage(name: String, baseAttack: Int, level: Int) : GameCharacter(name, baseAttack, level) {\n    override fun calculateDamage(s: Skill, e: Enemy, rng: Random): Int {\n        var raw = getBaseAttack() + (getLevel() * 3.5).toInt()\n        if (s.getType() == SkillType.SPECIAL) raw += 25\n        raw -= e.getResistance()\n        return Math.max(raw, 0)\n    }\n\n    override fun calculateGold(e: Enemy): Int {\n        return 8 + getLevel() * 2 + e.getResistance() / 4\n    }\n}\n\nclass Archer(name: String, baseAttack: Int, level: Int) : GameCharacter(name, baseAttack, level) {\n    override fun calculateDamage(s: Skill, e: Enemy, rng: Random): Int {\n        var raw = getBaseAttack()\n        val crit = rng.nextInt(100) < (20 + getLevel())\n        if (crit) raw *= 2\n        if (s.getType() == SkillType.SPECIAL) raw += 10\n        raw -= (e.getArmor() * 0.5).toInt()\n        return Math.max(raw, 0)\n    }\n\n    override fun calculateGold(e: Enemy): Int {\n        return 9 + Math.round(getLevel() * 1.5).toInt()\n    }\n}\n",
            "level": "MODERATE",
            "language": "KOTLIN",
            "violation": "OCP"
        },
        {
            "input": "import kotlin.math.round\nimport java.util.*\n\nenum class FoodType { BURGER, FRIES, PIZZA, DRINK, SALAD, DESSERT }\nenum class Size { SMALL, MEDIUM, LARGE }\n\nclass FoodItem(\n    private val name: String,\n    private val type: FoodType,\n    private val size: Size,\n    private val extras: Set<String> = emptySet()\n) {\n    fun getName() = name\n    fun getType() = type\n    fun getSize() = size\n    fun getExtras() = extras\n}\n\nclass Order(private val customer: String) {\n    private val items = mutableListOf<FoodItem>()\n    fun add(item: FoodItem) = items.add(item)\n    fun items() = items\n    fun customer() = customer\n}\n\nclass PriceCalculator {\n    fun price(item: FoodItem): Double = when (item.getType()) {\n        FoodType.BURGER -> when (item.getSize()) {\n            Size.SMALL -> 5.49\n            Size.MEDIUM -> 6.49\n            Size.LARGE -> 7.49\n        }\n        FoodType.FRIES -> when (item.getSize()) {\n            Size.SMALL -> 1.99\n            Size.MEDIUM -> 2.49\n            Size.LARGE -> 2.99\n        }\n        FoodType.PIZZA -> when (item.getSize()) {\n            Size.SMALL -> 7.99\n            Size.MEDIUM -> 9.99\n            Size.LARGE -> 12.49\n        }\n        FoodType.DRINK -> when (item.getSize()) {\n            Size.SMALL -> 1.29\n            Size.MEDIUM -> 1.49\n            Size.LARGE -> 1.79\n        }\n        FoodType.SALAD -> when (item.getSize()) {\n            Size.SMALL -> 4.49\n            Size.MEDIUM -> 5.49\n            Size.LARGE -> 6.49\n        }\n        FoodType.DESSERT -> when (item.getSize()) {\n            Size.SMALL -> 2.99\n            Size.MEDIUM -> 3.49\n            Size.LARGE -> 3.99\n        }\n    }\n}\n\nclass TaxCalculator {\n    fun taxFor(item: FoodItem): Double = when (item.getType()) {\n        FoodType.DRINK -> 0.10\n        FoodType.DESSERT -> 0.08\n        FoodType.PIZZA -> 0.06\n        else -> 0.05\n    }\n}\n\nclass NutritionCalculator {\n    fun calories(item: FoodItem): Int = when (item.getType()) {\n        FoodType.BURGER -> when (item.getSize()) {\n            Size.SMALL -> 480\n            Size.MEDIUM -> 650\n            Size.LARGE -> 820\n        }\n        FoodType.FRIES -> when (item.getSize()) {\n            Size.SMALL -> 220\n            Size.MEDIUM -> 330\n            Size.LARGE -> 440\n        }\n        FoodType.PIZZA -> when (item.getSize()) {\n            Size.SMALL -> 700\n            Size.MEDIUM -> 950\n            Size.LARGE -> 1200\n        }\n        FoodType.DRINK -> when (item.getSize()) {\n            Size.SMALL -> 110\n            Size.MEDIUM -> 160\n            Size.LARGE -> 210\n        }\n        FoodType.SALAD -> when (item.getSize()) {\n            Size.SMALL -> 180\n            Size.MEDIUM -> 260\n            Size.LARGE -> 340\n        }\n        FoodType.DESSERT -> when (item.getSize()) {\n            Size.SMALL -> 250\n            Size.MEDIUM -> 320\n            Size.LARGE -> 390\n        }\n    }\n}\n\nclass PromotionEngine {\n    fun discount(item: FoodItem): Double = when (item.getType()) {\n        FoodType.BURGER -> if (\"extra-cheese\" in item.getExtras()) 0.50 else 0.0\n        FoodType.FRIES -> if (item.getSize() == Size.LARGE) 0.20 else 0.0\n        FoodType.DRINK -> if (\"no-ice\" in item.getExtras()) 0.10 else 0.0\n        FoodType.SALAD -> if (\"chicken\" in item.getExtras()) 0.30 else 0.0\n        FoodType.PIZZA -> if (\"pepperoni\" in item.getExtras()) 0.40 else 0.0\n        FoodType.DESSERT -> 0.0\n    }\n}\n\nclass KitchenStationRouter {\n    fun station(item: FoodItem): String = when (item.getType()) {\n        FoodType.BURGER -> \"Grill\"\n        FoodType.FRIES -> \"Fryer\"\n        FoodType.PIZZA -> \"Oven\"\n        FoodType.DRINK -> \"Beverage\"\n        FoodType.SALAD -> \"Cold Prep\"\n        FoodType.DESSERT -> \"Dessert Bar\"\n    }\n}\n\nclass InventoryManager {\n    private val stock = mutableMapOf(\n        \"bun\" to 50, \"patty\" to 50, \"potato\" to 80,\n        \"dough\" to 30, \"soda\" to 100, \"greens\" to 40, \"dessertBase\" to 30\n    )\n\n    fun reserve(item: FoodItem): Boolean = when (item.getType()) {\n        FoodType.BURGER -> take(\"bun\", 1) && take(\"patty\", 1)\n        FoodType.FRIES -> take(\"potato\", 2)\n        FoodType.PIZZA -> take(\"dough\", 1)\n        FoodType.DRINK -> take(\"soda\", 1)\n        FoodType.SALAD -> take(\"greens\", 1)\n        FoodType.DESSERT -> take(\"dessertBase\", 1)\n    }\n\n    private fun take(key: String, qty: Int): Boolean {\n        val have = stock.getOrDefault(key, 0)\n        return if (have >= qty) {\n            stock[key] = have - qty\n            true\n        } else false\n    }\n\n    fun getStock(): Map<String, Int> = Collections.unmodifiableMap(stock)\n}\n\nclass Chef {\n    fun prepare(item: FoodItem) {\n        when (item.getType()) {\n            FoodType.BURGER -> println(\"Chef grills patty and assembles burger\")\n            FoodType.FRIES -> println(\"Chef drops fries in fryer\")\n            FoodType.PIZZA -> println(\"Chef stretches dough and bakes pizza\")\n            FoodType.DRINK -> println(\"Chef fills cup and lids drink\")\n            FoodType.SALAD -> println(\"Chef chops and tosses salad\")\n            FoodType.DESSERT -> println(\"Chef plates dessert\")\n        }\n    }\n}\n\nclass Waiter {\n    fun take(order: Order, item: FoodItem) {\n        println(\"Waiter records item: ${item.getName()}\")\n        order.add(item)\n    }\n\n    fun serve(item: FoodItem) {\n        when (item.getType()) {\n            FoodType.BURGER -> println(\"Waiter serves burger with napkins\")\n            FoodType.FRIES -> println(\"Waiter serves fries with ketchup\")\n            FoodType.PIZZA -> println(\"Waiter serves pizza with slicer\")\n            FoodType.DRINK -> println(\"Waiter serves drink with straw\")\n            FoodType.SALAD -> println(\"Waiter serves salad with dressing\")\n            FoodType.DESSERT -> println(\"Waiter serves dessert with spoon\")\n        }\n    }\n}\n\nclass Cashier {\n    private val prices = PriceCalculator()\n    private val taxes = TaxCalculator()\n    private val promos = PromotionEngine()\n\n    fun total(order: Order): Double {\n        var sum = 0.0\n        for (item in order.items()) {\n            val base = prices.price(item)\n            val discount = promos.discount(item)\n            val taxed = (base - discount) * (1.0 + taxes.taxFor(item))\n            sum += taxed\n        }\n        return round(sum * 100.0) / 100.0\n    }\n}\n\nclass ReceiptPrinter {\n    private val prices = PriceCalculator()\n    private val taxes = TaxCalculator()\n    private val promos = PromotionEngine()\n    private val nutrition = NutritionCalculator()\n\n    fun print(order: Order) {\n        println(\"Customer: ${order.customer()}\")\n        for (item in order.items()) {\n            val base = prices.price(item)\n            val discount = promos.discount(item)\n            val taxRate = taxes.taxFor(item)\n            val kcal = nutrition.calories(item)\n            println(\"${item.getName()} (${item.getType()} ${item.getSize()}) base \\$$base disc \\$$discount tax ${(taxRate * 100).toInt()}% kcal $kcal\")\n        }\n    }\n}\n",
            "output": "import java.util.Collections\nimport java.util.EnumMap\nimport java.util.HashMap\nimport java.util.HashSet\n\nenum class FoodType { BURGER, FRIES, PIZZA, DRINK, SALAD, DESSERT }\nenum class Size { SMALL, MEDIUM, LARGE }\n\nclass FoodItem(private val name: String, private val type: FoodType, private val size: Size, extras: MutableSet<String>?) {\n    private val extras: MutableSet<String> = extras ?: HashSet()\n    fun getName(): String = name\n    fun getType(): FoodType = type\n    fun getSize(): Size = size\n    fun getExtras(): MutableSet<String> = extras\n}\n\nclass Order(private val customer: String) {\n    private val items: MutableList<FoodItem> = ArrayList()\n    fun add(item: FoodItem) { items.add(item) }\n    fun items(): MutableList<FoodItem> = items\n    fun customer(): String = customer\n}\n\ninterface FoodOps {\n    fun type(): FoodType\n    fun tax(): Double\n    fun discount(item: FoodItem): Double\n    fun station(): String\n    fun prepare()\n    fun serve()\n    fun reserve(inventory: InventoryManager, item: FoodItem): Boolean\n}\n\nobject FoodOpsRegistry {\n    private val OPS: MutableMap<FoodType, FoodOps> = EnumMap(FoodType::class.java)\n    fun register(ops: FoodOps) { OPS[ops.type()] = ops }\n    fun of(t: FoodType): FoodOps {\n        val o = OPS[t]\n        if (o == null) throw IllegalArgumentException(\"Unknown type\")\n        return o\n    }\n    init {\n        register(BurgerOps())\n        register(FriesOps())\n        register(PizzaOps())\n        register(DrinkOps())\n        register(SaladOps())\n        register(DessertOps())\n    }\n}\n\nclass BurgerOps : FoodOps {\n    override fun type(): FoodType = FoodType.BURGER\n    override fun tax(): Double = 0.05\n    override fun discount(item: FoodItem): Double = if (item.getExtras().contains(\"extra-cheese\")) 0.50 else 0.0\n    override fun station(): String = \"Grill\"\n    override fun prepare() { println(\"Chef grills patty and assembles burger\") }\n    override fun serve() { println(\"Waiter serves burger with napkins\") }\n    override fun reserve(inventory: InventoryManager, item: FoodItem): Boolean = inventory.consume(\"bun\", 1) && inventory.consume(\"patty\", 1)\n}\nclass FriesOps : FoodOps {\n    override fun type(): FoodType = FoodType.FRIES\n    override fun tax(): Double = 0.05\n    override fun discount(item: FoodItem): Double = if (item.getSize() == Size.LARGE) 0.20 else 0.0\n    override fun station(): String = \"Fryer\"\n    override fun prepare() { println(\"Chef drops fries in fryer\") }\n    override fun serve() { println(\"Waiter serves fries with ketchup\") }\n    override fun reserve(inventory: InventoryManager, item: FoodItem): Boolean = inventory.consume(\"potato\", 2)\n}\nclass PizzaOps : FoodOps {\n    override fun type(): FoodType = FoodType.PIZZA\n    override fun tax(): Double = 0.06\n    override fun discount(item: FoodItem): Double = if (item.getExtras().contains(\"pepperoni\")) 0.40 else 0.0\n    override fun station(): String = \"Oven\"\n    override fun prepare() { println(\"Chef stretches dough and bakes pizza\") }\n    override fun serve() { println(\"Waiter serves pizza with slicer\") }\n    override fun reserve(inventory: InventoryManager, item: FoodItem): Boolean = inventory.consume(\"dough\", 1)\n}\nclass DrinkOps : FoodOps {\n    override fun type(): FoodType = FoodType.DRINK\n    override fun tax(): Double = 0.10\n    override fun discount(item: FoodItem): Double = if (item.getExtras().contains(\"no-ice\")) 0.10 else 0.0\n    override fun station(): String = \"Beverage\"\n    override fun prepare() { println(\"Chef fills cup and lids drink\") }\n    override fun serve() { println(\"Waiter serves drink with straw\") }\n    override fun reserve(inventory: InventoryManager, item: FoodItem): Boolean = inventory.consume(\"soda\", 1)\n}\nclass SaladOps : FoodOps {\n    override fun type(): FoodType = FoodType.SALAD\n    override fun tax(): Double = 0.05\n    override fun discount(item: FoodItem): Double = if (item.getExtras().contains(\"chicken\")) 0.30 else 0.0\n    override fun station(): String = \"Cold Prep\"\n    override fun prepare() { println(\"Chef chops and tosses salad\") }\n    override fun serve() { println(\"Waiter serves salad with dressing\") }\n    override fun reserve(inventory: InventoryManager, item: FoodItem): Boolean = inventory.consume(\"greens\", 1)\n}\nclass DessertOps : FoodOps {\n    override fun type(): FoodType = FoodType.DESSERT\n    override fun tax(): Double = 0.08\n    override fun discount(item: FoodItem): Double = 0.0\n    override fun station(): String = \"Dessert Bar\"\n    override fun prepare() { println(\"Chef plates dessert\") }\n    override fun serve() { println(\"Waiter serves dessert with spoon\") }\n    override fun reserve(inventory: InventoryManager, item: FoodItem): Boolean = inventory.consume(\"dessertBase\", 1)\n}\n\nobject PriceTable {\n    private val PRICES: MutableMap<FoodType, EnumMap<Size, Double>> = EnumMap(FoodType::class.java)\n    private fun map(s: Double, m: Double, l: Double): EnumMap<Size, Double> {\n        val mapp = EnumMap<Size, Double>(Size::class.java)\n        mapp[Size.SMALL] = s; mapp[Size.MEDIUM] = m; mapp[Size.LARGE] = l\n        return mapp\n    }\n    init {\n        PRICES[FoodType.BURGER] = map(5.49, 6.49, 7.49)\n        PRICES[FoodType.FRIES] = map(1.99, 2.49, 2.99)\n        PRICES[FoodType.PIZZA] = map(7.99, 9.99, 12.49)\n        PRICES[FoodType.DRINK] = map(1.29, 1.49, 1.79)\n        PRICES[FoodType.SALAD] = map(4.49, 5.49, 6.49)\n        PRICES[FoodType.DESSERT] = map(2.99, 3.49, 3.99)\n    }\n    fun get(item: FoodItem): Double {\n        val m = PRICES[item.getType()]\n        if (m == null || !m.containsKey(item.getSize())) throw IllegalArgumentException(\"Missing price\")\n        return m[item.getSize()]!!\n    }\n}\n\nobject CalorieTable {\n    private val CALS: MutableMap<FoodType, EnumMap<Size, Int>> = EnumMap(FoodType::class.java)\n    private fun map(s: Int, m: Int, l: Int): EnumMap<Size, Int> {\n        val mapp = EnumMap<Size, Int>(Size::class.java)\n        mapp[Size.SMALL] = s; mapp[Size.MEDIUM] = m; mapp[Size.LARGE] = l\n        return mapp\n    }\n    init {\n        CALS[FoodType.BURGER] = map(480, 650, 820)\n        CALS[FoodType.FRIES] = map(220, 330, 440)\n        CALS[FoodType.PIZZA] = map(700, 950, 1200)\n        CALS[FoodType.DRINK] = map(110, 160, 210)\n        CALS[FoodType.SALAD] = map(180, 260, 340)\n        CALS[FoodType.DESSERT] = map(250, 320, 390)\n    }\n    fun get(item: FoodItem): Int {\n        val m = CALS[item.getType()]\n        if (m == null || !m.containsKey(item.getSize())) return 0\n        return m[item.getSize()]!!\n    }\n}\n\nclass PriceCalculator {\n    fun price(item: FoodItem): Double = PriceTable.get(item)\n}\n\nclass TaxCalculator {\n    fun taxFor(item: FoodItem): Double = FoodOpsRegistry.of(item.getType()).tax()\n}\n\nclass NutritionCalculator {\n    fun calories(item: FoodItem): Int = CalorieTable.get(item)\n}\n\nclass PromotionEngine {\n    fun discount(item: FoodItem): Double = FoodOpsRegistry.of(item.getType()).discount(item)\n}\n\nclass KitchenStationRouter {\n    fun station(item: FoodItem): String = FoodOpsRegistry.of(item.getType()).station()\n}\n\nclass InventoryManager {\n    private val stock: MutableMap<String, Int> = HashMap()\n    init {\n        stock[\"bun\"] = 50; stock[\"patty\"] = 50; stock[\"potato\"] = 80\n        stock[\"dough\"] = 30; stock[\"soda\"] = 100; stock[\"greens\"] = 40; stock[\"dessertBase\"] = 30\n    }\n    fun reserve(item: FoodItem): Boolean = FoodOpsRegistry.of(item.getType()).reserve(this, item)\n    fun consume(key: String, qty: Int): Boolean = take(key, qty)\n    private fun take(key: String, qty: Int): Boolean {\n        val have = stock.getOrDefault(key, 0)\n        if (have < qty) return false\n        stock[key] = have - qty\n        return true\n    }\n    fun getStock(): Map<String, Int> = Collections.unmodifiableMap(stock)\n}\n\nclass Chef {\n    fun prepare(item: FoodItem) { FoodOpsRegistry.of(item.getType()).prepare() }\n}\n\nclass Waiter {\n    fun take(order: Order, item: FoodItem) {\n        println(\"Waiter records item: \" + item.getName())\n        order.add(item)\n    }\n    fun serve(item: FoodItem) { FoodOpsRegistry.of(item.getType()).serve() }\n}\n\nclass Cashier {\n    private val prices = PriceCalculator()\n    private val taxes = TaxCalculator()\n    private val promos = PromotionEngine()\n\n    fun total(order: Order): Double {\n        var sum = 0.0\n        for (item in order.items()) {\n            val base = prices.price(item)\n            val discount = promos.discount(item)\n            val taxed = (base - discount) * (1.0 + taxes.taxFor(item))\n            sum += taxed\n        }\n        return Math.round(sum * 100.0) / 100.0\n    }\n}\n\nclass ReceiptPrinter {\n    private val prices = PriceCalculator()\n    private val taxes = TaxCalculator()\n    private val promos = PromotionEngine()\n    private val nutrition = NutritionCalculator()\n\n    fun print(order: Order) {\n        println(\"Customer: \" + order.customer())\n        for (item in order.items()) {\n            val base = prices.price(item)\n            val discount = promos.discount(item)\n            val taxRate = taxes.taxFor(item)\n            val kcal = nutrition.calories(item)\n            println(\n                item.getName() + \" (\" + item.getType() + \" \" + item.getSize() + \") \" +\n                        \"base $\" + base + \" disc $\" + discount + \" tax \" + (taxRate * 100).toInt() + \"% kcal \" + kcal\n            )\n        }\n    }\n}\n",
            "level": "MODERATE",
            "language": "KOTLIN",
            "violation": "OCP"
        },
        {
            "input": "import java.util.*\n\nenum class DeviceType { LIGHT, THERMOSTAT, DOOR_LOCK, CAMERA, SPRINKLER }\nenum class RoomType { LIVING, KITCHEN, BEDROOM, GARDEN }\nenum class Mode { ECO, COMFORT, AWAY, NIGHT }\n\nclass SmartDevice(val id: String, val type: DeviceType) {\n    var mode: Mode = Mode.ECO\n    var online: Boolean = true\n}\n\nclass Room(val name: String, val type: RoomType) {\n    private val devices = mutableListOf<SmartDevice>()\n    fun add(d: SmartDevice) = devices.add(d)\n    fun getDevices(): List<SmartDevice> = devices\n}\n\nclass ScheduleEntry(val device: SmartDevice, val cron: String, val action: String)\n\nclass SmartHomeController {\n    fun turnOn(d: SmartDevice) {\n        when (d.type) {\n            DeviceType.LIGHT -> println(\"Light ${d.id} ON\")\n            DeviceType.THERMOSTAT -> println(\"Thermostat ${d.id} heating\")\n            DeviceType.DOOR_LOCK -> println(\"Lock ${d.id} stays locked\")\n            DeviceType.CAMERA -> println(\"Camera ${d.id} recording\")\n            DeviceType.SPRINKLER -> println(\"Sprinkler ${d.id} watering\")\n        }\n    }\n\n    fun turnOff(d: SmartDevice) {\n        when (d.type) {\n            DeviceType.LIGHT -> println(\"Light ${d.id} OFF\")\n            DeviceType.THERMOSTAT -> println(\"Thermostat ${d.id} idle\")\n            DeviceType.DOOR_LOCK -> println(\"Lock ${d.id} remains locked\")\n            DeviceType.CAMERA -> println(\"Camera ${d.id} standby\")\n            DeviceType.SPRINKLER -> println(\"Sprinkler ${d.id} stopped\")\n        }\n    }\n\n    fun setMode(d: SmartDevice, m: Mode) {\n        d.mode = m\n        when (d.type) {\n            DeviceType.LIGHT -> println(\"Light ${d.id} mode $m\")\n            DeviceType.THERMOSTAT -> println(\"Thermostat ${d.id} mode $m\")\n            DeviceType.DOOR_LOCK -> println(\"Lock ${d.id} mode $m\")\n            DeviceType.CAMERA -> println(\"Camera ${d.id} mode $m\")\n            DeviceType.SPRINKLER -> println(\"Sprinkler ${d.id} mode $m\")\n        }\n    }\n\n    fun energyUsageKwh(d: SmartDevice, minutes: Int): Double = when (d.type) {\n        DeviceType.LIGHT -> 0.012 * minutes\n        DeviceType.THERMOSTAT -> 0.08 * minutes\n        DeviceType.DOOR_LOCK -> 0.0002 * minutes\n        DeviceType.CAMERA -> 0.01 * minutes\n        DeviceType.SPRINKLER -> 0.03 * minutes\n    }\n\n    fun deviceIcon(d: SmartDevice): String = when (d.type) {\n        DeviceType.LIGHT -> \"ð¡\"\n        DeviceType.THERMOSTAT -> \"ð¡ï¸\"\n        DeviceType.DOOR_LOCK -> \"ð\"\n        DeviceType.CAMERA -> \"ð·\"\n        DeviceType.SPRINKLER -> \"ð§\"\n    }\n\n    fun firmwareUpdateSteps(d: SmartDevice): List<String> = when (d.type) {\n        DeviceType.LIGHT -> listOf(\"Ping\", \"Push FW\", \"Reboot\")\n        DeviceType.THERMOSTAT -> listOf(\"Ping\", \"Backup Profile\", \"Push FW\", \"Recalibrate\")\n        DeviceType.DOOR_LOCK -> listOf(\"Ping\", \"Secure Channel\", \"Push FW\", \"Reauth\")\n        DeviceType.CAMERA -> listOf(\"Ping\", \"Push FW\", \"Restart Stream\")\n        DeviceType.SPRINKLER -> listOf(\"Ping\", \"Push FW\", \"Valve Test\")\n    }\n}\n\nclass NotificationService {\n    fun notifyOwner(d: SmartDevice, event: String) {\n        val label = when (d.type) {\n            DeviceType.LIGHT -> \"Light\"\n            DeviceType.THERMOSTAT -> \"Thermostat\"\n            DeviceType.DOOR_LOCK -> \"Lock\"\n            DeviceType.CAMERA -> \"Camera\"\n            DeviceType.SPRINKLER -> \"Sprinkler\"\n        }\n        println(\"Notify: $label ${d.id} -> $event\")\n    }\n}\n\nclass DiagnosticsService {\n    fun health(d: SmartDevice): String = when (d.type) {\n        DeviceType.LIGHT -> if (d.online) \"OK\" else \"Bulb Offline\"\n        DeviceType.THERMOSTAT -> if (d.online) \"OK\" else \"Sensor Offline\"\n        DeviceType.DOOR_LOCK -> if (d.online) \"OK\" else \"Battery Low\"\n        DeviceType.CAMERA -> if (d.online) \"OK\" else \"Stream Error\"\n        DeviceType.SPRINKLER -> if (d.online) \"OK\" else \"Valve Error\"\n    }\n\n    fun maintenanceCostYearly(d: SmartDevice): Double = when (d.type) {\n        DeviceType.LIGHT -> 5.0\n        DeviceType.THERMOSTAT -> 20.0\n        DeviceType.DOOR_LOCK -> 12.0\n        DeviceType.CAMERA -> 18.0\n        DeviceType.SPRINKLER -> 15.0\n    }\n}\n\nclass SecurityPolicy {\n    fun actionAllowed(d: SmartDevice, action: String, userHome: Boolean): Boolean = when (d.type) {\n        DeviceType.DOOR_LOCK -> if (action == \"unlock\") userHome else true\n        DeviceType.CAMERA -> true\n        DeviceType.THERMOSTAT -> true\n        DeviceType.LIGHT -> true\n        DeviceType.SPRINKLER -> !(action == \"on\" && userHome)\n    }\n}\n\nclass VoiceCommandProcessor {\n    private val ctl = SmartHomeController()\n\n    fun handle(phrase: String, d: SmartDevice) {\n        when (d.type) {\n            DeviceType.LIGHT -> {\n                when (phrase.lowercase()) {\n                    \"lights on\" -> ctl.turnOn(d)\n                    \"lights off\" -> ctl.turnOff(d)\n                    \"night mode\" -> ctl.setMode(d, Mode.NIGHT)\n                }\n            }\n            DeviceType.THERMOSTAT -> {\n                when (phrase.lowercase()) {\n                    \"heat on\" -> ctl.turnOn(d)\n                    \"eco mode\" -> ctl.setMode(d, Mode.ECO)\n                }\n            }\n            DeviceType.DOOR_LOCK -> {\n                if (phrase.lowercase() == \"lock door\") ctl.turnOn(d)\n            }\n            DeviceType.CAMERA -> {\n                if (phrase.lowercase() == \"start recording\") ctl.turnOn(d)\n            }\n            DeviceType.SPRINKLER -> {\n                if (phrase.lowercase() == \"water garden\") ctl.turnOn(d)\n            }\n        }\n    }\n}\n\nclass SceneManager {\n    private val ctl = SmartHomeController()\n\n    fun applyScene(name: String, devices: List<SmartDevice>) {\n        for (d in devices) {\n            when (name) {\n                \"Evening\" -> {\n                    when (d.type) {\n                        DeviceType.LIGHT -> { ctl.turnOn(d); ctl.setMode(d, Mode.COMFORT) }\n                        DeviceType.THERMOSTAT -> ctl.setMode(d, Mode.COMFORT)\n                        DeviceType.CAMERA -> ctl.turnOn(d)\n                        DeviceType.DOOR_LOCK -> ctl.turnOn(d)\n                        DeviceType.SPRINKLER -> ctl.turnOff(d)\n                    }\n                }\n                \"Away\" -> {\n                    when (d.type) {\n                        DeviceType.LIGHT -> ctl.turnOff(d)\n                        DeviceType.THERMOSTAT -> ctl.setMode(d, Mode.AWAY)\n                        DeviceType.CAMERA -> ctl.turnOn(d)\n                        DeviceType.DOOR_LOCK -> ctl.turnOn(d)\n                        DeviceType.SPRINKLER -> ctl.turnOff(d)\n                    }\n                }\n            }\n        }\n    }\n}\n\nclass EnergyEstimator {\n    private val ctl = SmartHomeController()\n\n    fun estimateRoom(room: Room, minutes: Int): Double {\n        return room.getDevices().sumOf { ctl.energyUsageKwh(it, minutes) }\n    }\n}\n",
            "output": "import java.util.*\n\nenum class DeviceType { LIGHT, THERMOSTAT, DOOR_LOCK, CAMERA, SPRINKLER }\nenum class RoomType { LIVING, KITCHEN, BEDROOM, GARDEN }\nenum class Mode { ECO, COMFORT, AWAY, NIGHT }\n\nclass SmartDevice(private val id: String, private val type: DeviceType) {\n    private var mode: Mode = Mode.ECO\n    private var online: Boolean = true\n    fun getId(): String = id\n    fun getType(): DeviceType = type\n    fun getMode(): Mode = mode\n    fun isOnline(): Boolean = online\n    fun setMode(m: Mode) { this.mode = m }\n    fun setOnline(o: Boolean) { this.online = o }\n}\n\nclass Room(private val name: String, private val type: RoomType) {\n    private val devices: MutableList<SmartDevice> = ArrayList()\n    fun add(d: SmartDevice) { devices.add(d) }\n    fun getDevices(): List<SmartDevice> = devices\n    fun getName(): String = name\n    fun getType(): RoomType = type\n}\n\nclass ScheduleEntry(val device: SmartDevice, val cron: String, val action: String)\n\ninterface DeviceOps {\n    fun turnOn(d: SmartDevice)\n    fun turnOff(d: SmartDevice)\n    fun setMode(d: SmartDevice, m: Mode)\n    fun energyUsageKwh(minutes: Int): Double\n    fun icon(): String\n    fun firmwareUpdateSteps(): List<String>\n    fun notifyOwner(d: SmartDevice, event: String)\n    fun health(d: SmartDevice): String\n    fun maintenanceCostYearly(): Double\n    fun actionAllowed(action: String, userHome: Boolean): Boolean\n    fun handleVoice(phrase: String, ctl: SmartHomeController, d: SmartDevice)\n    fun applyScene(scene: String, ctl: SmartHomeController, d: SmartDevice)\n}\n\nobject DeviceOpsRegistry {\n    private val map: MutableMap<DeviceType, DeviceOps> = EnumMap(DeviceType::class.java)\n    init {\n        map[DeviceType.LIGHT] = LightOps()\n        map[DeviceType.THERMOSTAT] = ThermostatOps()\n        map[DeviceType.DOOR_LOCK] = DoorLockOps()\n        map[DeviceType.CAMERA] = CameraOps()\n        map[DeviceType.SPRINKLER] = SprinklerOps()\n    }\n    fun get(t: DeviceType): DeviceOps? = map[t]\n    fun register(t: DeviceType, ops: DeviceOps) { map[t] = ops }\n}\n\nclass LightOps : DeviceOps {\n    override fun turnOn(d: SmartDevice) { println(\"Light \" + d.getId() + \" ON\") }\n    override fun turnOff(d: SmartDevice) { println(\"Light \" + d.getId() + \" OFF\") }\n    override fun setMode(d: SmartDevice, m: Mode) { d.setMode(m); println(\"Light \" + d.getId() + \" mode \" + m) }\n    override fun energyUsageKwh(minutes: Int): Double = 0.012 * minutes\n    override fun icon(): String = \"ð¡\"\n    override fun firmwareUpdateSteps(): List<String> = Arrays.asList(\"Ping\", \"Push FW\", \"Reboot\")\n    override fun notifyOwner(d: SmartDevice, event: String) { println(\"Notify: Light \" + d.getId() + \" -> \" + event) }\n    override fun health(d: SmartDevice): String = if (d.isOnline()) \"OK\" else \"Bulb Offline\"\n    override fun maintenanceCostYearly(): Double = 5.0\n    override fun actionAllowed(action: String, userHome: Boolean): Boolean = true\n    override fun handleVoice(phrase: String, ctl: SmartHomeController, d: SmartDevice) {\n        if (phrase.equals(\"lights on\", ignoreCase = true)) ctl.turnOn(d)\n        else if (phrase.equals(\"lights off\", ignoreCase = true)) ctl.turnOff(d)\n        else if (phrase.equals(\"night mode\", ignoreCase = true)) ctl.setMode(d, Mode.NIGHT)\n    }\n    override fun applyScene(scene: String, ctl: SmartHomeController, d: SmartDevice) {\n        if (\"Evening\" == scene) { ctl.turnOn(d); ctl.setMode(d, Mode.COMFORT) }\n        else if (\"Away\" == scene) { ctl.turnOff(d) }\n    }\n}\n\nclass ThermostatOps : DeviceOps {\n    override fun turnOn(d: SmartDevice) { println(\"Thermostat \" + d.getId() + \" heating\") }\n    override fun turnOff(d: SmartDevice) { println(\"Thermostat \" + d.getId() + \" idle\") }\n    override fun setMode(d: SmartDevice, m: Mode) { d.setMode(m); println(\"Thermostat \" + d.getId() + \" mode \" + m) }\n    override fun energyUsageKwh(minutes: Int): Double = 0.08 * minutes\n    override fun icon(): String = \"ð¡ï¸\"\n    override fun firmwareUpdateSteps(): List<String> = Arrays.asList(\"Ping\", \"Backup Profile\", \"Push FW\", \"Recalibrate\")\n    override fun notifyOwner(d: SmartDevice, event: String) { println(\"Notify: Thermostat \" + d.getId() + \" -> \" + event) }\n    override fun health(d: SmartDevice): String = if (d.isOnline()) \"OK\" else \"Sensor Offline\"\n    override fun maintenanceCostYearly(): Double = 20.0\n    override fun actionAllowed(action: String, userHome: Boolean): Boolean = true\n    override fun handleVoice(phrase: String, ctl: SmartHomeController, d: SmartDevice) {\n        if (phrase.equals(\"heat on\", ignoreCase = true)) ctl.turnOn(d)\n        else if (phrase.equals(\"eco mode\", ignoreCase = true)) ctl.setMode(d, Mode.ECO)\n    }\n    override fun applyScene(scene: String, ctl: SmartHomeController, d: SmartDevice) {\n        if (\"Evening\" == scene) { ctl.setMode(d, Mode.COMFORT) }\n        else if (\"Away\" == scene) { ctl.setMode(d, Mode.AWAY) }\n    }\n}\n\nclass DoorLockOps : DeviceOps {\n    override fun turnOn(d: SmartDevice) { println(\"Lock \" + d.getId() + \" stays locked\") }\n    override fun turnOff(d: SmartDevice) { println(\"Lock \" + d.getId() + \" remains locked\") }\n    override fun setMode(d: SmartDevice, m: Mode) { d.setMode(m); println(\"Lock \" + d.getId() + \" mode \" + m) }\n    override fun energyUsageKwh(minutes: Int): Double = 0.0002 * minutes\n    override fun icon(): String = \"ð\"\n    override fun firmwareUpdateSteps(): List<String> = Arrays.asList(\"Ping\", \"Secure Channel\", \"Push FW\", \"Reauth\")\n    override fun notifyOwner(d: SmartDevice, event: String) { println(\"Notify: Lock \" + d.getId() + \" -> \" + event) }\n    override fun health(d: SmartDevice): String = if (d.isOnline()) \"OK\" else \"Battery Low\"\n    override fun maintenanceCostYearly(): Double = 12.0\n    override fun actionAllowed(action: String, userHome: Boolean): Boolean = if (action == \"unlock\") userHome else true\n    override fun handleVoice(phrase: String, ctl: SmartHomeController, d: SmartDevice) {\n        if (phrase.equals(\"lock door\", ignoreCase = true)) ctl.turnOn(d)\n    }\n    override fun applyScene(scene: String, ctl: SmartHomeController, d: SmartDevice) {\n        if (\"Evening\" == scene || \"Away\" == scene) { ctl.turnOn(d) }\n    }\n}\n\nclass CameraOps : DeviceOps {\n    override fun turnOn(d: SmartDevice) { println(\"Camera \" + d.getId() + \" recording\") }\n    override fun turnOff(d: SmartDevice) { println(\"Camera \" + d.getId() + \" standby\") }\n    override fun setMode(d: SmartDevice, m: Mode) { d.setMode(m); println(\"Camera \" + d.getId() + \" mode \" + m) }\n    override fun energyUsageKwh(minutes: Int): Double = 0.01 * minutes\n    override fun icon(): String = \"ð·\"\n    override fun firmwareUpdateSteps(): List<String> = Arrays.asList(\"Ping\", \"Push FW\", \"Restart Stream\")\n    override fun notifyOwner(d: SmartDevice, event: String) { println(\"Notify: Camera \" + d.getId() + \" -> \" + event) }\n    override fun health(d: SmartDevice): String = if (d.isOnline()) \"OK\" else \"Stream Error\"\n    override fun maintenanceCostYearly(): Double = 18.0\n    override fun actionAllowed(action: String, userHome: Boolean): Boolean = true\n    override fun handleVoice(phrase: String, ctl: SmartHomeController, d: SmartDevice) {\n        if (phrase.equals(\"start recording\", ignoreCase = true)) ctl.turnOn(d)\n    }\n    override fun applyScene(scene: String, ctl: SmartHomeController, d: SmartDevice) {\n        if (\"Evening\" == scene || \"Away\" == scene) { ctl.turnOn(d) }\n    }\n}\n\nclass SprinklerOps : DeviceOps {\n    override fun turnOn(d: SmartDevice) { println(\"Sprinkler \" + d.getId() + \" watering\") }\n    override fun turnOff(d: SmartDevice) { println(\"Sprinkler \" + d.getId() + \" stopped\") }\n    override fun setMode(d: SmartDevice, m: Mode) { d.setMode(m); println(\"Sprinkler \" + d.getId() + \" mode \" + m) }\n    override fun energyUsageKwh(minutes: Int): Double = 0.03 * minutes\n    override fun icon(): String = \"ð§\"\n    override fun firmwareUpdateSteps(): List<String> = Arrays.asList(\"Ping\", \"Push FW\", \"Valve Test\")\n    override fun notifyOwner(d: SmartDevice, event: String) { println(\"Notify: Sprinkler \" + d.getId() + \" -> \" + event) }\n    override fun health(d: SmartDevice): String = if (d.isOnline()) \"OK\" else \"Valve Error\"\n    override fun maintenanceCostYearly(): Double = 15.0\n    override fun actionAllowed(action: String, userHome: Boolean): Boolean = action != \"on\" || !userHome\n    override fun handleVoice(phrase: String, ctl: SmartHomeController, d: SmartDevice) {\n        if (phrase.equals(\"water garden\", ignoreCase = true)) ctl.turnOn(d)\n    }\n    override fun applyScene(scene: String, ctl: SmartHomeController, d: SmartDevice) {\n        if (\"Evening\" == scene || \"Away\" == scene) { ctl.turnOff(d) }\n    }\n}\n\nclass SmartHomeController {\n    fun turnOn(d: SmartDevice) { DeviceOpsRegistry.get(d.getType())!!.turnOn(d) }\n    fun turnOff(d: SmartDevice) { DeviceOpsRegistry.get(d.getType())!!.turnOff(d) }\n    fun setMode(d: SmartDevice, m: Mode) { DeviceOpsRegistry.get(d.getType())!!.setMode(d, m) }\n    fun energyUsageKwh(d: SmartDevice, minutes: Int): Double = DeviceOpsRegistry.get(d.getType())!!.energyUsageKwh(minutes)\n    fun deviceIcon(d: SmartDevice): String = DeviceOpsRegistry.get(d.getType())!!.icon()\n    fun firmwareUpdateSteps(d: SmartDevice): List<String> = DeviceOpsRegistry.get(d.getType())!!.firmwareUpdateSteps()\n}\n\nclass NotificationService {\n    fun notifyOwner(d: SmartDevice, event: String) { DeviceOpsRegistry.get(d.getType())!!.notifyOwner(d, event) }\n}\n\nclass DiagnosticsService {\n    fun health(d: SmartDevice): String = DeviceOpsRegistry.get(d.getType())!!.health(d)\n    fun maintenanceCostYearly(d: SmartDevice): Double = DeviceOpsRegistry.get(d.getType())!!.maintenanceCostYearly()\n}\n\nclass SecurityPolicy {\n    fun actionAllowed(d: SmartDevice, action: String, userHome: Boolean): Boolean =\n        DeviceOpsRegistry.get(d.getType())!!.actionAllowed(action, userHome)\n}\n\nclass VoiceCommandProcessor {\n    private val ctl = SmartHomeController()\n    fun handle(phrase: String, d: SmartDevice) {\n        DeviceOpsRegistry.get(d.getType())!!.handleVoice(phrase, ctl, d)\n    }\n}\n\nclass SceneManager {\n    private val ctl = SmartHomeController()\n    fun applyScene(name: String, devices: List<SmartDevice>) {\n        for (d in devices) DeviceOpsRegistry.get(d.getType())!!.applyScene(name, ctl, d)\n    }\n}\n\nclass EnergyEstimator {\n    private val ctl = SmartHomeController()\n    fun estimateRoom(room: Room, minutes: Int): Double {\n        var sum = 0.0\n        for (d in room.getDevices()) sum += ctl.energyUsageKwh(d, minutes)\n        return sum\n    }\n}\n\n",
            "level": "MODERATE",
            "language": "KOTLIN",
            "violation": "OCP"
        },
        {
            "input": "import math\n\nclass Shape:\n    def __init__(self, type):\n        self._type = type\n\n    def get_type(self):\n        return self._type\n\n\nclass Rectangle(Shape):\n    def __init__(self, width, height):\n        super().__init__(\"rectangle\")\n        self._width = width\n        self._height = height\n\n    def get_width(self):\n        return self._width\n\n    def get_height(self):\n        return self._height\n\n\nclass Circle(Shape):\n    def __init__(self, radius):\n        super().__init__(\"circle\")\n        self._radius = radius\n\n    def get_radius(self):\n        return self._radius\n\n\nclass AreaCalculator:\n    def calculate_area(self, shape):\n        if shape.get_type() == \"rectangle\":\n            rectangle = shape\n            return rectangle.get_width() * rectangle.get_height()\n        elif shape.get_type() == \"circle\":\n            circle = shape\n            return math.pi * circle.get_radius() * circle.get_radius()\n        return 0",
            "output": "import math\n\nclass Shape:\n    def get_area(self):\n        raise NotImplementedError\n\nclass Rectangle(Shape):\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n\n    def get_area(self):\n        return self.width * self.height\n\nclass Circle(Shape):\n    def __init__(self, radius):\n        self.radius = radius\n\n    def get_area(self):\n        return math.pi * self.radius * self.radius\n\nclass AreaCalculator:\n    def calculate_area(self, shape):\n        return shape.get_area()\n",
            "level": "EASY",
            "language": "PYTHON",
            "violation": "OCP"
        },
        {
            "input": "import random\nfrom enum import Enum\n\n\nclass CharacterType(Enum):\n    WARRIOR = 1\n    MAGE = 2\n    ARCHER = 3\n\n\nclass GameCharacter:\n    def __init__(self, name, type, base_attack):\n        self._name = name\n        self._type = type\n        self._base_attack = base_attack\n\n    def get_name(self):\n        return self._name\n\n    def get_type(self):\n        return self._type\n\n    def get_base_attack(self):\n        return self._base_attack\n\n\nclass DamageCalculator:\n    def calculate_damage(self, character):\n        if character.get_type() == CharacterType.WARRIOR:\n            return int(character.get_base_attack() * 1.5)\n        elif character.get_type() == CharacterType.MAGE:\n            return character.get_base_attack() + 20\n        elif character.get_type() == CharacterType.ARCHER:\n            crit = random.choice([True, False])\n            return character.get_base_attack() * 2 if crit else character.get_base_attack()\n        else:\n            raise ValueError(f\"Unknown character type: {character.get_type()}\")\n\n",
            "output": "import random\nfrom abc import ABC, abstractmethod\nfrom enum import Enum\n\n\nclass CharacterType(Enum):\n    WARRIOR = \"WARRIOR\"\n    MAGE = \"MAGE\"\n    ARCHER = \"ARCHER\"\n\n\nclass DamageDealer(ABC):\n    @abstractmethod\n    def calculate_damage(self) -> int:\n        pass\n\n    @abstractmethod\n    def get_name(self) -> str:\n        pass\n\n    @abstractmethod\n    def get_type(self) -> CharacterType:\n        pass\n\n\nclass GameCharacter(DamageDealer, ABC):\n    def __init__(self, name: str, type_: CharacterType, base_attack: int):\n        self._name = name\n        self._type = type_\n        self._base_attack = base_attack\n\n    def get_name(self) -> str:\n        return self._name\n\n    def get_type(self) -> CharacterType:\n        return self._type\n\n    def get_base_attack(self) -> int:\n        return self._base_attack\n\n\nclass Warrior(GameCharacter):\n    def __init__(self, name: str, base_attack: int):\n        super().__init__(name, CharacterType.WARRIOR, base_attack)\n\n    def calculate_damage(self) -> int:\n        return int(self.get_base_attack() * 1.5)\n\n\nclass Mage(GameCharacter):\n    def __init__(self, name: str, base_attack: int):\n        super().__init__(name, CharacterType.MAGE, base_attack)\n\n    def calculate_damage(self) -> int:\n        return self.get_base_attack() + 20\n\n\nclass Archer(GameCharacter):\n    def __init__(self, name: str, base_attack: int):\n        super().__init__(name, CharacterType.ARCHER, base_attack)\n\n    def calculate_damage(self) -> int:\n        crit = random.choice([True, False])\n        return self.get_base_attack() * 2 if crit else self.get_base_attack()\n\n",
            "level": "EASY",
            "language": "PYTHON",
            "violation": "OCP"
        },
        {
            "input": "from enum import Enum\n\n\nclass FoodType(Enum):\n    BURGER = 1\n    FRIES = 2\n    PIZZA = 3\n    DRINK = 4\n\n\nclass FoodItem:\n    def __init__(self, name, type):\n        self._name = name\n        self._type = type\n\n    def get_name(self):\n        return self._name\n\n    def get_type(self):\n        return self._type\n\n\nclass PriceCalculator:\n    def calculate_price(self, item):\n        if item.get_type() == FoodType.BURGER:\n            return 5.99\n        elif item.get_type() == FoodType.FRIES:\n            return 2.49\n        elif item.get_type() == FoodType.PIZZA:\n            return 7.99\n        elif item.get_type() == FoodType.DRINK:\n            return 1.50\n        else:\n            raise ValueError(\"Unknown type\")\n\n\nclass Order:\n    def __init__(self):\n        self._items = []\n\n    def add_item(self, item):\n        self._items.append(item)\n\n    def get_items(self):\n        return self._items\n\n",
            "output": "from abc import ABC, abstractmethod\n\n\nclass PricedItem(ABC):\n    @abstractmethod\n    def get_name(self) -> str:\n        pass\n\n    @abstractmethod\n    def get_price(self) -> float:\n        pass\n\n\nclass FoodItem(PricedItem, ABC):\n    def __init__(self, name: str):\n        self._name = name\n\n    def get_name(self) -> str:\n        return self._name\n\n\nclass Burger(FoodItem):\n    def __init__(self, name: str):\n        super().__init__(name)\n\n    def get_price(self) -> float:\n        return 5.99\n\n\nclass Fries(FoodItem):\n    def __init__(self, name: str):\n        super().__init__(name)\n\n    def get_price(self) -> float:\n        return 2.49\n\n\nclass Pizza(FoodItem):\n    def __init__(self, name: str):\n        super().__init__(name)\n\n    def get_price(self) -> float:\n        return 7.99\n\n\nclass Drink(FoodItem):\n    def __init__(self, name: str):\n        super().__init__(name)\n\n    def get_price(self) -> float:\n        return 1.50\n\n\nclass Order:\n    def __init__(self):\n        self._items: list[FoodItem] = []\n\n    def add_item(self, item: FoodItem):\n        self._items.append(item)\n\n    def get_items(self) -> list[FoodItem]:\n        return self._items\n\n",
            "level": "EASY",
            "language": "PYTHON",
            "violation": "OCP"
        },
        {
            "input": "from enum import Enum\n\n\nclass DeviceType(Enum):\n    LIGHT = 1\n    THERMOSTAT = 2\n    DOOR_LOCK = 3\n\n\nclass SmartDevice:\n    def __init__(self, id, type):\n        self._id = id\n        self._type = type\n\n    def get_id(self):\n        return self._id\n\n    def get_type(self):\n        return self._type\n\n\nclass SmartHomeController:\n    def turn_on(self, d):\n        if d.get_type() == DeviceType.LIGHT:\n            print(f\"Light {d.get_id()} is ON\")\n        elif d.get_type() == DeviceType.THERMOSTAT:\n            print(f\"Thermostat {d.get_id()} heating to 22Â°C\")\n        elif d.get_type() == DeviceType.DOOR_LOCK:\n            print(f\"Door lock {d.get_id()} cannot be turned ON\")\n        else:\n            raise ValueError(\"Unknown device\")\n\n    def energy_usage_kwh(self, d, minutes):\n        if d.get_type() == DeviceType.LIGHT:\n            return 0.012 * minutes\n        elif d.get_type() == DeviceType.THERMOSTAT:\n            return 0.08 * minutes\n        elif d.get_type() == DeviceType.DOOR_LOCK:\n            return 0.0002 * minutes\n        else:\n            raise ValueError(\"Unknown device\")\n\n",
            "output": "from abc import ABC, abstractmethod\n\n\nclass SmartDevice(ABC):\n    @abstractmethod\n    def get_id(self) -> str:\n        pass\n\n    @abstractmethod\n    def turn_on(self) -> None:\n        pass\n\n    @abstractmethod\n    def energy_usage_kwh(self, minutes: int) -> float:\n        pass\n\n\nclass Light(SmartDevice):\n    def __init__(self, id_: str):\n        self._id = id_\n\n    def get_id(self) -> str:\n        return self._id\n\n    def turn_on(self) -> None:\n        print(f\"Light {self._id} is ON\")\n\n    def energy_usage_kwh(self, minutes: int) -> float:\n        return 0.012 * minutes  # 12W bulb\n\n\nclass Thermostat(SmartDevice):\n    def __init__(self, id_: str):\n        self._id = id_\n\n    def get_id(self) -> str:\n        return self._id\n\n    def turn_on(self) -> None:\n        print(f\"Thermostat {self._id} heating to 22Â°C\")\n\n    def energy_usage_kwh(self, minutes: int) -> float:\n        return 0.08 * minutes  # HVAC\n\n\nclass DoorLock(SmartDevice):\n    def __init__(self, id_: str):\n        self._id = id_\n\n    def get_id(self) -> str:\n        return self._id\n\n    def turn_on(self) -> None:\n        print(f\"Door lock {self._id} cannot be turned ON\")\n\n    def energy_usage_kwh(self, minutes: int) -> float:\n        return 0.0002 * minutes  # idle electronics\n\n\nclass SmartHomeController:\n    def activate_device(self, d: SmartDevice) -> None:\n        d.turn_on()\n\n    def energy_usage_kwh(self, d: SmartDevice, minutes: int) -> float:\n        return d.energy_usage_kwh(minutes)\n\n\n",
            "level": "EASY",
            "language": "PYTHON",
            "violation": "OCP"
        },
        {
            "input": "from abc import ABC\nfrom enum import Enum\nimport math\n\n\nclass Entity(ABC):\n    _NEXT_ID = 1\n\n    def __init__(self):\n        self._id = Entity._NEXT_ID\n        Entity._NEXT_ID += 1\n\n    @property\n    def id(self):\n        return self._id\n\n\nclass GraphicObject(Entity, ABC):\n    def __init__(self, color, layer):\n        super().__init__()\n        self._color = color\n        self._layer = layer\n\n    @property\n    def color(self):\n        return self._color\n\n    @property\n    def layer(self):\n        return self._layer\n\n\nclass ShapeKind(Enum):\n    RECTANGLE = 1\n    CIRCLE = 2\n    TRIANGLE = 3\n    CUBE = 4\n    SPHERE = 5\n\n\nclass Shape(GraphicObject, ABC):\n    def __init__(self, kind, color, layer):\n        super().__init__(color, layer)\n        self._kind = kind\n\n    @property\n    def kind(self):\n        return self._kind\n\n\nclass TwoDShape(Shape, ABC):\n    def __init__(self, kind, color, layer):\n        super().__init__(kind, color, layer)\n\n\nclass ThreeDShape(Shape, ABC):\n    def __init__(self, kind, color, layer):\n        super().__init__(kind, color, layer)\n\n\nclass Rectangle(TwoDShape):\n    def __init__(self, width, height, color, layer):\n        super().__init__(ShapeKind.RECTANGLE, color, layer)\n        self._width = width\n        self._height = height\n\n    @property\n    def width(self):\n        return self._width\n\n    @property\n    def height(self):\n        return self._height\n\n\nclass Circle(TwoDShape):\n    def __init__(self, radius, color, layer):\n        super().__init__(ShapeKind.CIRCLE, color, layer)\n        self._radius = radius\n\n    @property\n    def radius(self):\n        return self._radius\n\n\nclass Triangle(TwoDShape):\n    def __init__(self, a, b, c, color, layer):\n        super().__init__(ShapeKind.TRIANGLE, color, layer)\n        self._a = a\n        self._b = b\n        self._c = c\n\n    @property\n    def a(self):\n        return self._a\n\n    @property\n    def b(self):\n        return self._b\n\n    @property\n    def c(self):\n        return self._c\n\n\nclass Cube(ThreeDShape):\n    def __init__(self, edge, color, layer):\n        super().__init__(ShapeKind.CUBE, color, layer)\n        self._edge = edge\n\n    @property\n    def edge(self):\n        return self._edge\n\n\nclass Sphere(ThreeDShape):\n    def __init__(self, radius, color, layer):\n        super().__init__(ShapeKind.SPHERE, color, layer)\n        self._radius = radius\n\n    @property\n    def radius(self):\n        return self._radius\n\n\nclass Metric(Enum):\n    AREA = 1\n    PERIMETER = 2\n    VOLUME = 3\n    DIAGONAL = 4\n    BOUNDING_BOX_WIDTH = 5\n\n\nclass BoundingBox:\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n\n    def __str__(self):\n        return f\"BBox({self.width}x{self.height})\"\n\n\nclass MetricCalculator:\n    def compute(self, shape, metric):\n        if shape.kind == ShapeKind.RECTANGLE:\n            r = shape\n            if metric == Metric.AREA:\n                return r.width * r.height\n            if metric == Metric.PERIMETER:\n                return 2 * (r.width + r.height)\n            if metric == Metric.DIAGONAL:\n                return math.hypot(r.width, r.height)\n            if metric == Metric.BOUNDING_BOX_WIDTH:\n                return r.width\n            if metric == Metric.VOLUME:\n                return 0\n        elif shape.kind == ShapeKind.CIRCLE:\n            c = shape\n            if metric == Metric.AREA:\n                return math.pi * c.radius * c.radius\n            if metric == Metric.PERIMETER:\n                return 2 * math.pi * c.radius\n            if metric == Metric.DIAGONAL:\n                return 2 * c.radius\n            if metric == Metric.BOUNDING_BOX_WIDTH:\n                return 2 * c.radius\n            if metric == Metric.VOLUME:\n                return 0\n        elif shape.kind == ShapeKind.TRIANGLE:\n            t = shape\n            s = (t.a + t.b + t.c) / 2.0\n            if metric == Metric.AREA:\n                return math.sqrt(max(0, s * (s - t.a) * (s - t.b) * (s - t.c)))\n            if metric == Metric.PERIMETER:\n                return t.a + t.b + t.c\n            if metric == Metric.DIAGONAL:\n                return max(t.a, t.b, t.c)\n            if metric == Metric.BOUNDING_BOX_WIDTH:\n                return max(t.a, t.b, t.c)\n            if metric == Metric.VOLUME:\n                return 0\n        elif shape.kind == ShapeKind.CUBE:\n            cube = shape\n            if metric == Metric.AREA:\n                return 6 * cube.edge * cube.edge\n            if metric == Metric.PERIMETER:\n                return 12 * cube.edge\n            if metric == Metric.VOLUME:\n                return cube.edge ** 3\n            if metric == Metric.DIAGONAL:\n                return math.sqrt(3) * cube.edge\n            if metric == Metric.BOUNDING_BOX_WIDTH:\n                return cube.edge\n        elif shape.kind == ShapeKind.SPHERE:\n            s = shape\n            if metric == Metric.AREA:\n                return 4 * math.pi * s.radius * s.radius\n            if metric == Metric.PERIMETER:\n                return 0\n            if metric == Metric.VOLUME:\n                return (4.0 / 3.0) * math.pi * (s.radius ** 3)\n            if metric == Metric.DIAGONAL:\n                return 2 * s.radius\n            if metric == Metric.BOUNDING_BOX_WIDTH:\n                return 2 * s.radius\n        return 0\n\n\nclass ShapeValidator:\n    def is_valid(self, shape):\n        if shape.kind == ShapeKind.RECTANGLE:\n            return shape.width > 0 and shape.height > 0\n        if shape.kind == ShapeKind.CIRCLE:\n            return shape.radius > 0\n        if shape.kind == ShapeKind.TRIANGLE:\n            return (\n                shape.a > 0 and shape.b > 0 and shape.c > 0\n                and shape.a + shape.b > shape.c\n                and shape.a + shape.c > shape.b\n                and shape.b + shape.c > shape.a\n            )\n        if shape.kind == ShapeKind.CUBE:\n            return shape.edge > 0\n        if shape.kind == ShapeKind.SPHERE:\n            return shape.radius > 0\n        return False\n\n\nclass ShapeRenderer:\n    def render_pseudo_svg(self, shape):\n        if shape.kind == ShapeKind.RECTANGLE:\n            return f'<rect w=\"{shape.width}\" h=\"{shape.height}\" fill=\"{shape.color}\" layer=\"{shape.layer}\"/>'\n        if shape.kind == ShapeKind.CIRCLE:\n            return f'<circle r=\"{shape.radius}\" fill=\"{shape.color}\" layer=\"{shape.layer}\"/>'\n        if shape.kind == ShapeKind.TRIANGLE:\n            return f'<polygon a=\"{shape.a}\" b=\"{shape.b}\" c=\"{shape.c}\" fill=\"{shape.color}\" layer=\"{shape.layer}\"/>'\n        if shape.kind == ShapeKind.CUBE:\n            return f'<cube edge=\"{shape.edge}\" materialColor=\"{shape.color}\" layer=\"{shape.layer}\"/>'\n        if shape.kind == ShapeKind.SPHERE:\n            return f'<sphere r=\"{shape.radius}\" materialColor=\"{shape.color}\" layer=\"{shape.layer}\"/>'\n        return \"<unknown/>\"\n\n\nclass ShapeSerializer:\n    def to_csv_row(self, shape):\n        if shape.kind == ShapeKind.RECTANGLE:\n            return f\"rectangle,{shape.width},{shape.height},{shape.color},{shape.layer}\"\n        if shape.kind == ShapeKind.CIRCLE:\n            return f\"circle,{shape.radius},{shape.color},{shape.layer}\"\n        if shape.kind == ShapeKind.TRIANGLE:\n            return f\"triangle,{shape.a},{shape.b},{shape.c},{shape.color},{shape.layer}\"\n        if shape.kind == ShapeKind.CUBE:\n            return f\"cube,{shape.edge},{shape.color},{shape.layer}\"\n        if shape.kind == ShapeKind.SPHERE:\n            return f\"sphere,{shape.radius},{shape.color},{shape.layer}\"\n        return \"unknown\"\n\n\nclass ShapeFactory:\n    def create(self, spec):\n        parts = spec.split(\";\")\n        type_ = parts[0].strip().lower()\n        map_ = {}\n        for kv in parts[1:]:\n            pair = kv.split(\"=\")\n            if len(pair) == 2:\n                map_[pair[0].strip().lower()] = pair[1].strip()\n        color = map_.get(\"color\", \"black\")\n        layer = int(map_.get(\"layer\", \"0\"))\n        if type_ == \"rectangle\":\n            return Rectangle(float(map_.get(\"width\", \"0\")), float(map_.get(\"height\", \"0\")), color, layer)\n        if type_ == \"circle\":\n            return Circle(float(map_.get(\"radius\", \"0\")), color, layer)\n        if type_ == \"triangle\":\n            return Triangle(float(map_.get(\"a\", \"0\")), float(map_.get(\"b\", \"0\")), float(map_.get(\"c\", \"0\")), color, layer)\n        if type_ == \"cube\":\n            return Cube(float(map_.get(\"edge\", \"0\")), color, layer)\n        if type_ == \"sphere\":\n            return Sphere(float(map_.get(\"radius\", \"0\")), color, layer)\n        raise ValueError(f\"Unknown shape type: {type_}\")\n\n\nclass ShapePricing:\n    def __init__(self):\n        self.calc = MetricCalculator()\n\n    def price(self, shape):\n        if shape.kind == ShapeKind.RECTANGLE:\n            area = self.calc.compute(shape, Metric.AREA)\n            return 0.5 * area + shape.layer * 2\n        if shape.kind == ShapeKind.CIRCLE:\n            area = self.calc.compute(shape, Metric.AREA)\n            diag = self.calc.compute(shape, Metric.DIAGONAL)\n            return 0.6 * area + 0.1 * diag\n        if shape.kind == ShapeKind.TRIANGLE:\n            per = self.calc.compute(shape, Metric.PERIMETER)\n            return per * 0.8\n        if shape.kind == ShapeKind.CUBE:\n            vol = self.calc.compute(shape, Metric.VOLUME)\n            return 1.2 * vol\n        if shape.kind == ShapeKind.SPHERE:\n            vol = self.calc.compute(shape, Metric.VOLUME)\n            return 1.0 * vol + 10\n        return 0\n\n\nclass LegendBuilder:\n    def legend_symbol(self, shape):\n        if shape.kind == ShapeKind.RECTANGLE:\n            return \"â­\"\n        if shape.kind == ShapeKind.CIRCLE:\n            return \"â¯\"\n        if shape.kind == ShapeKind.TRIANGLE:\n            return \"â³\"\n        if shape.kind == ShapeKind.CUBE:\n            return \"â¬\"\n        if shape.kind == ShapeKind.SPHERE:\n            return \"â¯\"\n        return \"?\"\n\n\nclass CollisionEngine:\n    def bounding_box(self, shape):\n        if shape.kind == ShapeKind.RECTANGLE:\n            return BoundingBox(shape.width, shape.height)\n        if shape.kind == ShapeKind.CIRCLE:\n            d = 2 * shape.radius\n            return BoundingBox(d, d)\n        if shape.kind == ShapeKind.TRIANGLE:\n            max_side = max(shape.a, shape.b, shape.c)\n            avg = (shape.a + shape.b + shape.c - max_side) / 2.0\n            return BoundingBox(max_side, avg)\n        if shape.kind == ShapeKind.CUBE:\n            return BoundingBox(shape.edge, shape.edge)\n        if shape.kind == ShapeKind.SPHERE:\n            d = 2 * shape.radius\n            return BoundingBox(d, d)\n        return BoundingBox(0, 0)\n\n    def overlaps(self, a, b):\n        A = self.bounding_box(a)\n        B = self.bounding_box(b)\n        return (A.width * A.height) > 0 and (B.width * B.height) > 0\n\n\nclass ShapeReport:\n    def __init__(self):\n        self.calc = MetricCalculator()\n        self.ser = ShapeSerializer()\n        self.rnd = ShapeRenderer()\n        self.col = CollisionEngine()\n        self.price = ShapePricing()\n        self.legend = LegendBuilder()\n\n    def summarize(self, shapes):\n        sb = []\n        sb.append(\"=== Shape Report (OCP-violating) ===\\n\")\n        for s in shapes:\n            sb.append(f\"ID {s.id} {s.kind.name} color={s.color} layer={s.layer}\\n\")\n            sb.append(f\"  CSV: {self.ser.to_csv_row(s)}\\n\")\n            sb.append(f\"  SVG: {self.rnd.render_pseudo_svg(s)}\\n\")\n            sb.append(f\"  Legend: {self.legend.legend_symbol(s)}\\n\")\n            sb.append(\"  Metrics: \")\n            sb.append(f\" area={self.calc.compute(s, Metric.AREA)}\")\n            sb.append(f\" perim={self.calc.compute(s, Metric.PERIMETER)}\")\n            sb.append(f\" diag={self.calc.compute(s, Metric.DIAGONAL)}\")\n            if isinstance(s, ThreeDShape):\n                sb.append(f\" vol={self.calc.compute(s, Metric.VOLUME)}\")\n            sb.append(\"\\n\")\n            sb.append(f\"  BBox: {self.col.bounding_box(s)}\\n\")\n            sb.append(f\"  Price: {self.price.price(s)}\\n\\n\")\n        return \"\".join(sb)\n\n\n",
            "output": "import math\nfrom abc import ABC, abstractmethod\nfrom enum import Enum\nfrom typing import Dict, Callable, Any, List\n\n\nclass Entity:\n    _NEXT_ID = 1\n    \n    def __init__(self):\n        self.id = Entity._NEXT_ID\n        Entity._NEXT_ID += 1\n    \n    def get_id(self):\n        return self.id\n\n\nclass GraphicObject(Entity):\n    def __init__(self, color: str, layer: int):\n        super().__init__()\n        self.color = color\n        self.layer = layer\n    \n    def get_color(self):\n        return self.color\n    \n    def get_layer(self):\n        return self.layer\n\n\nclass ShapeKind(Enum):\n    RECTANGLE = \"RECTANGLE\"\n    CIRCLE = \"CIRCLE\"\n    TRIANGLE = \"TRIANGLE\"\n    CUBE = \"CUBE\"\n    SPHERE = \"SPHERE\"\n\n\nclass BoundingBox:\n    def __init__(self, width: float, height: float):\n        self.width = width\n        self.height = height\n    \n    def __str__(self):\n        return f\"BBox({self.width}x{self.height})\"\n\n\nclass HasWidthHeight(ABC):\n    @abstractmethod\n    def get_width(self):\n        pass\n    \n    @abstractmethod\n    def get_height(self):\n        pass\n\n\nclass HasRadius(ABC):\n    @abstractmethod\n    def get_radius(self):\n        pass\n\n\nclass HasTriangleSides(ABC):\n    @abstractmethod\n    def get_a(self):\n        pass\n    \n    @abstractmethod\n    def get_b(self):\n        pass\n    \n    @abstractmethod\n    def get_c(self):\n        pass\n\n\nclass HasEdge(ABC):\n    @abstractmethod\n    def get_edge(self):\n        pass\n\n\nclass Shape(GraphicObject, ABC):\n    def __init__(self, kind: ShapeKind, color: str, layer: int):\n        super().__init__(color, layer)\n        self.kind = kind\n    \n    def get_kind(self):\n        return self.kind\n    \n    @abstractmethod\n    def is_valid(self):\n        pass\n    \n    @abstractmethod\n    def render_pseudo_svg(self):\n        pass\n    \n    @abstractmethod\n    def to_csv_row(self):\n        pass\n    \n    @abstractmethod\n    def legend_symbol(self):\n        pass\n    \n    @abstractmethod\n    def bounding_box(self):\n        pass\n    \n    @abstractmethod\n    def price(self, calc):\n        pass\n\n\nclass TwoDShape(Shape):\n    def __init__(self, kind: ShapeKind, color: str, layer: int):\n        super().__init__(kind, color, layer)\n\n\nclass ThreeDShape(Shape):\n    def __init__(self, kind: ShapeKind, color: str, layer: int):\n        super().__init__(kind, color, layer)\n\n\nclass Rectangle(TwoDShape, HasWidthHeight):\n    def __init__(self, width: float, height: float, color: str, layer: int):\n        super().__init__(ShapeKind.RECTANGLE, color, layer)\n        self.width = width\n        self.height = height\n    \n    def get_width(self):\n        return self.width\n    \n    def get_height(self):\n        return self.height\n    \n    def is_valid(self):\n        return self.width > 0 and self.height > 0\n    \n    def render_pseudo_svg(self):\n        return f'<rect w=\"{self.width}\" h=\"{self.height}\" fill=\"{self.get_color()}\" layer=\"{self.get_layer()}\"/>'\n    \n    def to_csv_row(self):\n        return f\"rectangle,{self.width},{self.height},{self.get_color()},{self.get_layer()}\"\n    \n    def legend_symbol(self):\n        return \"â­\"\n    \n    def bounding_box(self):\n        return BoundingBox(self.width, self.height)\n    \n    def price(self, calc):\n        area = calc.compute(self, \"area\")\n        return 0.5 * area + self.get_layer() * 2\n\n\nclass Circle(TwoDShape, HasRadius):\n    def __init__(self, radius: float, color: str, layer: int):\n        super().__init__(ShapeKind.CIRCLE, color, layer)\n        self.radius = radius\n    \n    def get_radius(self):\n        return self.radius\n    \n    def is_valid(self):\n        return self.radius > 0\n    \n    def render_pseudo_svg(self):\n        return f'<circle r=\"{self.radius}\" fill=\"{self.get_color()}\" layer=\"{self.get_layer()}\"/>'\n    \n    def to_csv_row(self):\n        return f\"circle,{self.radius},{self.get_color()},{self.get_layer()}\"\n    \n    def legend_symbol(self):\n        return \"â¯\"\n    \n    def bounding_box(self):\n        d = 2 * self.radius\n        return BoundingBox(d, d)\n    \n    def price(self, calc):\n        area = calc.compute(self, \"area\")\n        diag = calc.compute(self, \"diagonal\")\n        return 0.6 * area + 0.1 * diag\n\n\nclass Triangle(TwoDShape, HasTriangleSides):\n    def __init__(self, a: float, b: float, c: float, color: str, layer: int):\n        super().__init__(ShapeKind.TRIANGLE, color, layer)\n        self.a = a\n        self.b = b\n        self.c = c\n    \n    def get_a(self):\n        return self.a\n    \n    def get_b(self):\n        return self.b\n    \n    def get_c(self):\n        return self.c\n    \n    def is_valid(self):\n        return (self.a > 0 and self.b > 0 and self.c > 0 and \n                self.a + self.b > self.c and self.a + self.c > self.b and \n                self.b + self.c > self.a)\n    \n    def render_pseudo_svg(self):\n        return f'<polygon a=\"{self.a}\" b=\"{self.b}\" c=\"{self.c}\" fill=\"{self.get_color()}\" layer=\"{self.get_layer()}\"/>'\n    \n    def to_csv_row(self):\n        return f\"triangle,{self.a},{self.b},{self.c},{self.get_color()},{self.get_layer()}\"\n    \n    def legend_symbol(self):\n        return \"â³\"\n    \n    def bounding_box(self):\n        max_side = max(self.a, max(self.b, self.c))\n        avg = (self.a + self.b + self.c - max_side) / 2.0\n        return BoundingBox(max_side, avg)\n    \n    def price(self, calc):\n        per = calc.compute(self, \"perimeter\")\n        return per * 0.8\n\n\nclass Cube(ThreeDShape, HasEdge):\n    def __init__(self, edge: float, color: str, layer: int):\n        super().__init__(ShapeKind.CUBE, color, layer)\n        self.edge = edge\n    \n    def get_edge(self):\n        return self.edge\n    \n    def is_valid(self):\n        return self.edge > 0\n    \n    def render_pseudo_svg(self):\n        return f'<cube edge=\"{self.edge}\" materialColor=\"{self.get_color()}\" layer=\"{self.get_layer()}\"/>'\n    \n    def to_csv_row(self):\n        return f\"cube,{self.edge},{self.get_color()},{self.get_layer()}\"\n    \n    def legend_symbol(self):\n        return \"â¬\"\n    \n    def bounding_box(self):\n        return BoundingBox(self.edge, self.edge)\n    \n    def price(self, calc):\n        vol = calc.compute(self, \"volume\")\n        return 1.2 * vol\n\n\nclass Sphere(ThreeDShape, HasRadius):\n    def __init__(self, radius: float, color: str, layer: int):\n        super().__init__(ShapeKind.SPHERE, color, layer)\n        self.radius = radius\n    \n    def get_radius(self):\n        return self.radius\n    \n    def is_valid(self):\n        return self.radius > 0\n    \n    def render_pseudo_svg(self):\n        return f'<sphere r=\"{self.radius}\" materialColor=\"{self.get_color()}\" layer=\"{self.get_layer()}\"/>'\n    \n    def to_csv_row(self):\n        return f\"sphere,{self.radius},{self.get_color()},{self.get_layer()}\"\n    \n    def legend_symbol(self):\n        return \"â¯\"\n    \n    def bounding_box(self):\n        d = 2 * self.radius\n        return BoundingBox(d, d)\n    \n    def price(self, calc):\n        vol = calc.compute(self, \"volume\")\n        return 1.0 * vol + 10\n\n\nclass RegisteredMetric:\n    def __init__(self, name: str):\n        self.name_val = name\n        self.handlers = {}\n    \n    def name(self):\n        return self.name_val\n    \n    def on(self, type_class: type, fn: Callable):\n        self.handlers[type_class] = fn\n        return self\n    \n    def apply(self, s: Shape):\n        for cls, handler in self.handlers.items():\n            if isinstance(s, cls):\n                return handler(s)\n        return 0\n\n\nclass MetricCalculator:\n    def __init__(self):\n        self.metrics = {}\n    \n    def register(self, metric: RegisteredMetric):\n        self.metrics[metric.name()] = metric\n    \n    def compute(self, shape: Shape, metric_name: str):\n        m = self.metrics.get(metric_name)\n        if m is None:\n            raise ValueError(f\"Unknown metric: {metric_name}\")\n        return m.apply(shape)\n\n\nclass ShapeValidator:\n    def is_valid(self, shape: Shape):\n        return shape.is_valid()\n\n\nclass ShapeRenderer:\n    def render_pseudo_svg(self, shape: Shape):\n        return shape.render_pseudo_svg()\n\n\nclass ShapeSerializer:\n    def to_csv_row(self, shape: Shape):\n        return shape.to_csv_row()\n\n\nclass ShapeFactory:\n    def __init__(self):\n        self.creators = {}\n    \n    def register(self, type_name: str, creator: Callable):\n        self.creators[type_name.lower()] = creator\n    \n    def create(self, spec: str):\n        parts = spec.split(\";\")\n        type_name = parts[0].strip().lower()\n        map_vals = {}\n        for i in range(1, len(parts)):\n            kv = parts[i].split(\"=\")\n            if len(kv) == 2:\n                map_vals[kv[0].strip().lower()] = kv[1].strip()\n        \n        color = map_vals.get(\"color\", \"black\")\n        layer = int(map_vals.get(\"layer\", \"0\"))\n        c = self.creators.get(type_name)\n        if c is None:\n            raise ValueError(f\"Unknown shape type: {type_name}\")\n        return c(map_vals, color, layer)\n\n\nclass ShapePricing:\n    def __init__(self, calc: MetricCalculator):\n        self.calc = calc\n    \n    def price(self, shape: Shape):\n        return shape.price(self.calc)\n\n\nclass LegendBuilder:\n    def legend_symbol(self, shape: Shape):\n        return shape.legend_symbol()\n\n\nclass CollisionEngine:\n    def bounding_box(self, shape: Shape):\n        return shape.bounding_box()\n    \n    def overlaps(self, a: Shape, b: Shape):\n        A = self.bounding_box(a)\n        B = self.bounding_box(b)\n        return (A.width * A.height) > 0 and (B.width * B.height) > 0\n\n\nclass ShapeReport:\n    def __init__(self, calc: MetricCalculator):\n        self.calc = calc\n        self.ser = ShapeSerializer()\n        self.rnd = ShapeRenderer()\n        self.col = CollisionEngine()\n        self.price = ShapePricing(calc)\n        self.legend = LegendBuilder()\n    \n    def summarize(self, shapes: List[Shape]):\n        sb = []\n        sb.append(\"=== Shape Report (OCP-violating) ===\\n\")\n        for s in shapes:\n            sb.append(f\"ID {s.get_id()} {s.get_kind().value} color={s.get_color()} layer={s.get_layer()}\\n\")\n            \n            sb.append(f\"  CSV: {self.ser.to_csv_row(s)}\\n\")\n            sb.append(f\"  SVG: {self.rnd.render_pseudo_svg(s)}\\n\")\n            sb.append(f\"  Legend: {self.legend.legend_symbol(s)}\\n\")\n            \n            sb.append(\"  Metrics:\")\n            sb.append(f\" area={self.calc.compute(s, 'area')}\")\n            sb.append(f\" perim={self.calc.compute(s, 'perimeter')}\")\n            sb.append(f\" diag={self.calc.compute(s, 'diagonal')}\")\n            if isinstance(s, ThreeDShape):\n                sb.append(f\" vol={self.calc.compute(s, 'volume')}\")\n            sb.append(\"\\n\")\n            \n            sb.append(f\"  BBox: {self.col.bounding_box(s)}\\n\")\n            sb.append(f\"  Price: {self.price.price(s)}\\n\\n\")\n        \n        return \"\".join(sb)\n\n",
            "level": "HARD",
            "language": "PYTHON",
            "violation": "OCP"
        },
        {
            "input": "from enum import Enum\nimport random\n\n\nclass CharacterType(Enum):\n    WARRIOR = 1\n    MAGE = 2\n    ARCHER = 3\n    ROGUE = 4\n\n\nclass SkillType(Enum):\n    BASIC = 1\n    SPECIAL = 2\n    SUPPORT = 3\n\n\nclass WeaponType(Enum):\n    SWORD = 1\n    STAFF = 2\n    BOW = 3\n    DAGGER = 4\n\n\nclass PetType(Enum):\n    WOLF = 1\n    FAIRY = 2\n    HAWK = 3\n    SHADOW_CAT = 4\n\n\nclass Stats:\n    def __init__(self, hp, mp, atk, mag, def_, res, spd, crit):\n        self.hp = hp\n        self.mp = mp\n        self.atk = atk\n        self.mag = mag\n        self.def_ = def_\n        self.res = res\n        self.spd = spd\n        self.crit = crit\n\n    def copy(self):\n        return Stats(self.hp, self.mp, self.atk, self.mag, self.def_, self.res, self.spd, self.crit)\n\n\nclass Skill:\n    def __init__(self, n, t, c):\n        self.name = n\n        self.type = t\n        self.cost = c\n\n\nclass Weapon:\n    def __init__(self, n, t, p):\n        self.name = n\n        self.type = t\n        self.power = p\n\n\nclass Pet:\n    def __init__(self, n, t, b):\n        self.name = n\n        self.type = t\n        self.bond = b\n\n\nclass Enemy:\n    def __init__(self, n, s):\n        self.name = n\n        self.stats = s\n\n\nclass GameCharacter:\n    def __init__(self, n, t, lvl, s, k, w, p):\n        self.name = n\n        self.type = t\n        self.level = lvl\n        self.stats = s\n        self.skills = k\n        self.weapon = w\n        self.pet = p\n\n\nclass PetBoostSystem:\n    def offense_boost(self, c):\n        if c.pet.type == PetType.WOLF:\n            return int(c.stats.atk * min(0.25, 0.05 + c.pet.bond / 100.0))\n        if c.pet.type == PetType.FAIRY:\n            return int(c.stats.mag * min(0.25, 0.05 + c.pet.bond / 120.0))\n        if c.pet.type == PetType.HAWK:\n            return c.stats.spd // 3 + c.pet.bond // 6\n        if c.pet.type == PetType.SHADOW_CAT:\n            return 5 + c.pet.bond // 5\n        return 0\n\n    def defense_boost(self, c):\n        if c.pet.type == PetType.WOLF:\n            return c.stats.def_ // 6\n        if c.pet.type == PetType.FAIRY:\n            return c.stats.res // 4\n        if c.pet.type == PetType.HAWK:\n            return c.stats.spd // 6\n        if c.pet.type == PetType.SHADOW_CAT:\n            return 3\n        return 0\n\n    def pet_assist(self, c):\n        if c.pet.type == PetType.WOLF:\n            return random.randint(0, 99) < min(35, 10 + c.pet.bond // 3)\n        if c.pet.type == PetType.FAIRY:\n            return random.randint(0, 99) < min(40, 15 + c.pet.bond // 2)\n        if c.pet.type == PetType.HAWK:\n            return random.randint(0, 99) < min(30, 8 + c.pet.bond // 4)\n        if c.pet.type == PetType.SHADOW_CAT:\n            return random.randint(0, 99) < min(45, 12 + c.pet.bond // 2)\n        return False\n\n    def pet_assist_damage(self, c):\n        if c.pet.type == PetType.WOLF:\n            return 6 + c.pet.bond // 4\n        if c.pet.type == PetType.FAIRY:\n            return 4 + c.pet.bond // 5\n        if c.pet.type == PetType.HAWK:\n            return 5 + c.pet.bond // 6\n        if c.pet.type == PetType.SHADOW_CAT:\n            return 7 + c.pet.bond // 5\n        return 0\n\n    def pet_assist_heal(self, c):\n        if c.pet.type == PetType.FAIRY:\n            return 8 + c.pet.bond // 3\n        return 0\n\n\nclass WeaponRuleSet:\n    def apply_weapon(self, c, base):\n        if c.weapon.type == WeaponType.SWORD:\n            return base + c.weapon.power + c.stats.atk // 4\n        if c.weapon.type == WeaponType.STAFF:\n            return base + c.weapon.power // 2 + c.stats.mag // 2\n        if c.weapon.type == WeaponType.BOW:\n            return base + c.weapon.power + c.stats.spd // 3\n        if c.weapon.type == WeaponType.DAGGER:\n            return base + c.weapon.power + c.stats.spd // 2\n        return base\n\n    def crit_chance(self, c):\n        if c.weapon.type == WeaponType.SWORD:\n            return 8 + c.stats.crit\n        if c.weapon.type == WeaponType.STAFF:\n            return 5 + c.stats.crit // 2\n        if c.weapon.type == WeaponType.BOW:\n            return 15 + c.stats.crit\n        if c.weapon.type == WeaponType.DAGGER:\n            return 18 + c.stats.crit\n        return 0\n\n\nclass DamageCalculator:\n    def __init__(self):\n        self.rng = random.Random()\n        self.wr = WeaponRuleSet()\n        self.pets = PetBoostSystem()\n\n    def calc(self, c, s, e):\n        base = 0\n        if c.type == CharacterType.WARRIOR:\n            base = int(c.stats.atk * (1.1 + c.level * 0.03)) - e.stats.def_ // 3\n            if s.type == SkillType.SPECIAL:\n                base += 12\n        elif c.type == CharacterType.MAGE:\n            base = c.stats.mag * 2 + (18 if s.type == SkillType.SPECIAL else 0) - e.stats.res // 2\n        elif c.type == CharacterType.ARCHER:\n            base = c.stats.atk + c.stats.spd // 2 + (10 if s.type == SkillType.SPECIAL else 0) - e.stats.def_ // 4\n        elif c.type == CharacterType.ROGUE:\n            base = c.stats.atk + c.stats.spd + (14 if s.type == SkillType.SPECIAL else 0) - e.stats.def_ // 5\n        base = self.wr.apply_weapon(c, base)\n        base += self.pets.offense_boost(c)\n        if self.pets.pet_assist(c):\n            base += self.pets.pet_assist_damage(c)\n        critChance = self.wr.crit_chance(c) + (10 if c.type == CharacterType.ARCHER else 0)\n        if self.rng.randint(0, 99) < critChance:\n            base *= 2\n        return max(0, base)\n\n\nclass HealCalculator:\n    def __init__(self):\n        self.pets = PetBoostSystem()\n\n    def heal(self, c, s):\n        amt = 0\n        if c.type == CharacterType.WARRIOR:\n            amt = c.stats.atk // 3 + 6\n        elif c.type == CharacterType.MAGE:\n            amt = c.stats.mag + 14\n        elif c.type == CharacterType.ARCHER:\n            amt = c.stats.atk // 4 + c.stats.spd // 5\n        elif c.type == CharacterType.ROGUE:\n            amt = c.stats.atk // 2\n        if s.type == SkillType.SPECIAL:\n            amt += 6\n        amt += self.pets.defense_boost(c) // 2 + self.pets.pet_assist_heal(c)\n        return max(0, amt)\n\n\nclass LootCalculator:\n    def gold(self, c, e):\n        if c.type == CharacterType.WARRIOR:\n            return 10 + c.level + e.stats.def_ // 5\n        if c.type == CharacterType.MAGE:\n            return 9 + c.level * 2 + e.stats.res // 4\n        if c.type == CharacterType.ARCHER:\n            return 11 + c.level + e.stats.def_ // 6\n        if c.type == CharacterType.ROGUE:\n            return 14 + c.level\n        return 0\n\n\nclass TargetingSystem:\n    def pick(self, enemies):\n        t = enemies[0]\n        for e in enemies:\n            if e.stats.hp < t.stats.hp:\n                t = e\n        return t\n\n\nclass SkillSelector:\n    def choose(self, c):\n        for s in c.skills:\n            if s.type != SkillType.BASIC:\n                return s\n        return c.skills[0]\n\n\nclass TurnEngine:\n    def __init__(self):\n        self.dmg = DamageCalculator()\n        self.healCalc = HealCalculator()\n        self.loot = LootCalculator()\n        self.targeting = TargetingSystem()\n        self.selector = SkillSelector()\n\n    def turn(self, party, enemies):\n        for c in party:\n            s = self.selector.choose(c)\n            if s.type == SkillType.SUPPORT:\n                h = self.healCalc.heal(c, s)\n                c.stats.hp += h\n                continue\n            target = self.targeting.pick(enemies)\n            d = self.dmg.calc(c, s, target)\n            target.stats.hp = max(0, target.stats.hp - d)\n\n    def total_gold(self, party, e):\n        g = 0\n        for c in party:\n            g += self.loot.gold(c, e)\n        return g\n\n",
            "output": "import random\nfrom enum import Enum\n\nclass CharacterType(Enum):\n    WARRIOR = 1\n    MAGE = 2\n    ARCHER = 3\n    ROGUE = 4\n\nclass SkillType(Enum):\n    BASIC = 1\n    SPECIAL = 2\n    SUPPORT = 3\n\nclass WeaponType(Enum):\n    SWORD = 1\n    STAFF = 2\n    BOW = 3\n    DAGGER = 4\n\nclass PetType(Enum):\n    WOLF = 1\n    FAIRY = 2\n    HAWK = 3\n    SHADOW_CAT = 4\n\nclass Stats:\n    def __init__(self, hp, mp, atk, mag, def_, res, spd, crit):\n        self.hp = hp\n        self.mp = mp\n        self.atk = atk\n        self.mag = mag\n        self.def_ = def_\n        self.res = res\n        self.spd = spd\n        self.crit = crit\n    def copy(self):\n        return Stats(self.hp, self.mp, self.atk, self.mag, self.def_, self.res, self.spd, self.crit)\n\nclass Skill:\n    def __init__(self, n, t, c):\n        self.name = n\n        self.type = t\n        self.cost = c\n\nclass Weapon:\n    def __init__(self, n, t, p):\n        self.name = n\n        self.type = t\n        self.power = p\n\nclass Pet:\n    def __init__(self, n, t, b):\n        self.name = n\n        self.type = t\n        self.bond = b\n\nclass Enemy:\n    def __init__(self, n, s):\n        self.name = n\n        self.stats = s\n\nclass PetLogic:\n    def offenseBoost(self, c):\n        raise NotImplementedError\n    def defenseBoost(self, c):\n        raise NotImplementedError\n    def assist(self, c):\n        raise NotImplementedError\n    def assistDamage(self, c):\n        raise NotImplementedError\n    def assistHeal(self, c):\n        raise NotImplementedError\n\nclass WolfPetLogic(PetLogic):\n    def offenseBoost(self, c):\n        return int(c.stats.atk * min(0.25, 0.05 + c.pet.bond/100.0))\n    def defenseBoost(self, c):\n        return c.stats.def_ // 6\n    def assist(self, c):\n        return random.Random().randrange(100) < min(35, 10 + c.pet.bond//3)\n    def assistDamage(self, c):\n        return 6 + c.pet.bond // 4\n    def assistHeal(self, c):\n        return 0\n\nclass FairyPetLogic(PetLogic):\n    def offenseBoost(self, c):\n        return int(c.stats.mag * min(0.25, 0.05 + c.pet.bond/120.0))\n    def defenseBoost(self, c):\n        return c.stats.res // 4\n    def assist(self, c):\n        return random.Random().randrange(100) < min(40, 15 + c.pet.bond//2)\n    def assistDamage(self, c):\n        return 4 + c.pet.bond // 5\n    def assistHeal(self, c):\n        return 8 + c.pet.bond // 3\n\nclass HawkPetLogic(PetLogic):\n    def offenseBoost(self, c):\n        return c.stats.spd // 3 + c.pet.bond // 6\n    def defenseBoost(self, c):\n        return c.stats.spd // 6\n    def assist(self, c):\n        return random.Random().randrange(100) < min(30, 8 + c.pet.bond//4)\n    def assistDamage(self, c):\n        return 5 + c.pet.bond // 6\n    def assistHeal(self, c):\n        return 0\n\nclass ShadowCatPetLogic(PetLogic):\n    def offenseBoost(self, c):\n        return 5 + c.pet.bond // 5\n    def defenseBoost(self, c):\n        return 3\n    def assist(self, c):\n        return random.Random().randrange(100) < min(45, 12 + c.pet.bond//2)\n    def assistDamage(self, c):\n        return 7 + c.pet.bond // 5\n    def assistHeal(self, c):\n        return 0\n\nclass PetLogicRegistry:\n    _map = {\n        PetType.WOLF: WolfPetLogic(),\n        PetType.FAIRY: FairyPetLogic(),\n        PetType.HAWK: HawkPetLogic(),\n        PetType.SHADOW_CAT: ShadowCatPetLogic(),\n    }\n    @staticmethod\n    def of(t):\n        return PetLogicRegistry._map.get(t)\n\nclass WeaponLogic:\n    def applyWeapon(self, c, base):\n        raise NotImplementedError\n    def critChance(self, c):\n        raise NotImplementedError\n\nclass SwordLogic(WeaponLogic):\n    def applyWeapon(self, c, base):\n        return base + c.weapon.power + c.stats.atk // 4\n    def critChance(self, c):\n        return 8 + c.stats.crit\n\nclass StaffLogic(WeaponLogic):\n    def applyWeapon(self, c, base):\n        return base + c.weapon.power // 2 + c.stats.mag // 2\n    def critChance(self, c):\n        return 5 + c.stats.crit // 2\n\nclass BowLogic(WeaponLogic):\n    def applyWeapon(self, c, base):\n        return base + c.weapon.power + c.stats.spd // 3\n    def critChance(self, c):\n        return 15 + c.stats.crit\n\nclass DaggerLogic(WeaponLogic):\n    def applyWeapon(self, c, base):\n        return base + c.weapon.power + c.stats.spd // 2\n    def critChance(self, c):\n        return 18 + c.stats.crit\n\nclass WeaponLogicRegistry:\n    _map = {\n        WeaponType.SWORD: SwordLogic(),\n        WeaponType.STAFF: StaffLogic(),\n        WeaponType.BOW: BowLogic(),\n        WeaponType.DAGGER: DaggerLogic(),\n    }\n    @staticmethod\n    def of(t):\n        return WeaponLogicRegistry._map.get(t)\n\nclass RoleLogic:\n    def baseDamage(self, c, s, e):\n        raise NotImplementedError\n    def baseHeal(self, c, s):\n        raise NotImplementedError\n    def gold(self, c, e):\n        raise NotImplementedError\n    def extraCrit(self, c):\n        raise NotImplementedError\n\nclass WarriorLogic(RoleLogic):\n    def baseDamage(self, c, s, e):\n        base = int(c.stats.atk * (1.1 + c.level * 0.03)) - e.stats.def_ // 3\n        if s.type == SkillType.SPECIAL:\n            base += 12\n        return base\n    def baseHeal(self, c, s):\n        amt = c.stats.atk // 3 + 6\n        if s.type == SkillType.SPECIAL:\n            amt += 6\n        return amt\n    def gold(self, c, e):\n        return 10 + c.level + e.stats.def_ // 5\n    def extraCrit(self, c):\n        return 0\n\nclass MageLogic(RoleLogic):\n    def baseDamage(self, c, s, e):\n        base = c.stats.mag * 2 + (18 if s.type == SkillType.SPECIAL else 0) - e.stats.res // 2\n        return base\n    def baseHeal(self, c, s):\n        amt = c.stats.mag + 14\n        if s.type == SkillType.SPECIAL:\n            amt += 6\n        return amt\n    def gold(self, c, e):\n        return 9 + c.level * 2 + e.stats.res // 4\n    def extraCrit(self, c):\n        return 0\n\nclass ArcherLogic(RoleLogic):\n    def baseDamage(self, c, s, e):\n        base = c.stats.atk + c.stats.spd // 2 + (10 if s.type == SkillType.SPECIAL else 0) - e.stats.def_ // 4\n        return base\n    def baseHeal(self, c, s):\n        amt = c.stats.atk // 4 + c.stats.spd // 5\n        if s.type == SkillType.SPECIAL:\n            amt += 6\n        return amt\n    def gold(self, c, e):\n        return 11 + c.level + e.stats.def_ // 6\n    def extraCrit(self, c):\n        return 10\n\nclass RogueLogic(RoleLogic):\n    def baseDamage(self, c, s, e):\n        base = c.stats.atk + c.stats.spd + (14 if s.type == SkillType.SPECIAL else 0) - e.stats.def_ // 5\n        return base\n    def baseHeal(self, c, s):\n        amt = c.stats.atk // 2\n        if s.type == SkillType.SPECIAL:\n            amt += 6\n        return amt\n    def gold(self, c, e):\n        return 14 + c.level\n    def extraCrit(self, c):\n        return 0\n\nclass RoleLogicRegistry:\n    _map = {\n        CharacterType.WARRIOR: WarriorLogic(),\n        CharacterType.MAGE: MageLogic(),\n        CharacterType.ARCHER: ArcherLogic(),\n        CharacterType.ROGUE: RogueLogic(),\n    }\n    @staticmethod\n    def of(t):\n        return RoleLogicRegistry._map.get(t)\n\nclass GameCharacter:\n    def __init__(self, n, t, lvl, s, k, w, p):\n        self.name = n\n        self.type = t\n        self.level = lvl\n        self.stats = s\n        self.skills = k\n        self.weapon = w\n        self.pet = p\n\nclass PetBoostSystem:\n    def offenseBoost(self, c):\n        return PetLogicRegistry.of(c.pet.type).offenseBoost(c)\n    def defenseBoost(self, c):\n        return PetLogicRegistry.of(c.pet.type).defenseBoost(c)\n    def petAssist(self, c):\n        return PetLogicRegistry.of(c.pet.type).assist(c)\n    def petAssistDamage(self, c):\n        return PetLogicRegistry.of(c.pet.type).assistDamage(c)\n    def petAssistHeal(self, c):\n        return PetLogicRegistry.of(c.pet.type).assistHeal(c)\n\nclass WeaponRuleSet:\n    def applyWeapon(self, c, base):\n        return WeaponLogicRegistry.of(c.weapon.type).applyWeapon(c, base)\n    def critChance(self, c):\n        return WeaponLogicRegistry.of(c.weapon.type).critChance(c)\n\nclass RoleRuleSet:\n    def baseDamage(self, c, s, e):\n        return RoleLogicRegistry.of(c.type).baseDamage(c, s, e)\n    def baseHeal(self, c, s):\n        return RoleLogicRegistry.of(c.type).baseHeal(c, s)\n    def gold(self, c, e):\n        return RoleLogicRegistry.of(c.type).gold(c, e)\n    def extraCrit(self, c):\n        return RoleLogicRegistry.of(c.type).extraCrit(c)\n\nclass DamageCalculator:\n    def __init__(self):\n        self.rng = random.Random()\n        self.wr = WeaponRuleSet()\n        self.pets = PetBoostSystem()\n        self.roles = RoleRuleSet()\n    def calc(self, c, s, e):\n        base = self.roles.baseDamage(c, s, e)\n        base = self.wr.applyWeapon(c, base)\n        base += self.pets.offenseBoost(c)\n        if self.pets.petAssist(c):\n            base += self.pets.petAssistDamage(c)\n        critChance = self.wr.critChance(c) + self.roles.extraCrit(c)\n        if self.rng.randrange(100) < critChance:\n            base *= 2\n        return max(0, base)\n\nclass HealCalculator:\n    def __init__(self):\n        self.pets = PetBoostSystem()\n        self.roles = RoleRuleSet()\n    def heal(self, c, s):\n        amt = self.roles.baseHeal(c, s)\n        amt += self.pets.defenseBoost(c) // 2 + self.pets.petAssistHeal(c)\n        return max(0, amt)\n\nclass LootCalculator:\n    def __init__(self):\n        self.roles = RoleRuleSet()\n    def gold(self, c, e):\n        return self.roles.gold(c, e)\n\nclass TargetingSystem:\n    def pick(self, enemies):\n        t = enemies[0]\n        for e in enemies:\n            if e.stats.hp < t.stats.hp:\n                t = e\n        return t\n\nclass SkillSelector:\n    def choose(self, c):\n        for s in c.skills:\n            if s.type != SkillType.BASIC:\n                return s\n        return c.skills[0]\n\nclass TurnEngine:\n    def __init__(self):\n        self.dmg = DamageCalculator()\n        self.healCalc = HealCalculator()\n        self.loot = LootCalculator()\n        self.targeting = TargetingSystem()\n        self.selector = SkillSelector()\n    def turn(self, party, enemies):\n        for c in party:\n            s = self.selector.choose(c)\n            if s.type == SkillType.SUPPORT:\n                h = self.healCalc.heal(c, s)\n                c.stats.hp += h\n                continue\n            target = self.targeting.pick(enemies)\n            d = self.dmg.calc(c, s, target)\n            target.stats.hp = max(0, target.stats.hp - d)\n    def totalGold(self, party, e):\n        g = 0\n        for c in party:\n            g += self.loot.gold(c, e)\n        return g\n\n",
            "level": "HARD",
            "language": "PYTHON",
            "violation": "OCP"
        },
        {
            "input": "from enum import Enum\nimport random\n\n\nclass FoodType(Enum):\n    BURGER = 1\n    FRIES = 2\n    PIZZA = 3\n    DRINK = 4\n    SALAD = 5\n    DESSERT = 6\n\n\nclass Size(Enum):\n    SMALL = 1\n    MEDIUM = 2\n    LARGE = 3\n\n\nclass FoodItem:\n    def __init__(self, name, type_, size, extras=None):\n        self._name = name\n        self._type = type_\n        self._size = size\n        self._extras = set() if extras is None else extras\n\n    def getName(self): return self._name\n    def getType(self): return self._type\n    def getSize(self): return self._size\n    def getExtras(self): return self._extras\n\n\nclass Order:\n    def __init__(self, customer):\n        self._customer = customer\n        self._items = []\n\n    def add(self, item): self._items.append(item)\n    def items(self): return self._items\n    def customer(self): return self._customer\n\n\nclass PriceCalculator:\n    def price(self, item):\n        if item.getType() == FoodType.BURGER:\n            return {Size.SMALL: 5.49, Size.MEDIUM: 6.49}.get(item.getSize(), 7.49)\n        if item.getType() == FoodType.FRIES:\n            return {Size.SMALL: 1.99, Size.MEDIUM: 2.49}.get(item.getSize(), 2.99)\n        if item.getType() == FoodType.PIZZA:\n            return {Size.SMALL: 7.99, Size.MEDIUM: 9.99}.get(item.getSize(), 12.49)\n        if item.getType() == FoodType.DRINK:\n            return {Size.SMALL: 1.29, Size.MEDIUM: 1.49}.get(item.getSize(), 1.79)\n        if item.getType() == FoodType.SALAD:\n            return {Size.SMALL: 4.49, Size.MEDIUM: 5.49}.get(item.getSize(), 6.49)\n        if item.getType() == FoodType.DESSERT:\n            return {Size.SMALL: 2.99, Size.MEDIUM: 3.49}.get(item.getSize(), 3.99)\n        raise ValueError(\"Unknown type\")\n\n\nclass TaxCalculator:\n    def taxFor(self, item):\n        if item.getType() == FoodType.DRINK: return 0.10\n        if item.getType() == FoodType.DESSERT: return 0.08\n        if item.getType() == FoodType.PIZZA: return 0.06\n        return 0.05\n\n\nclass NutritionCalculator:\n    def calories(self, item):\n        t, s = item.getType(), item.getSize()\n        if t == FoodType.BURGER: return {Size.SMALL: 480, Size.MEDIUM: 650}.get(s, 820)\n        if t == FoodType.FRIES: return {Size.SMALL: 220, Size.MEDIUM: 330}.get(s, 440)\n        if t == FoodType.PIZZA: return {Size.SMALL: 700, Size.MEDIUM: 950}.get(s, 1200)\n        if t == FoodType.DRINK: return {Size.SMALL: 110, Size.MEDIUM: 160}.get(s, 210)\n        if t == FoodType.SALAD: return {Size.SMALL: 180, Size.MEDIUM: 260}.get(s, 340)\n        if t == FoodType.DESSERT: return {Size.SMALL: 250, Size.MEDIUM: 320}.get(s, 390)\n        return 0\n\n\nclass PromotionEngine:\n    def discount(self, item):\n        t = item.getType()\n        if t == FoodType.BURGER: return 0.50 if \"extra-cheese\" in item.getExtras() else 0.0\n        if t == FoodType.FRIES: return 0.20 if item.getSize() == Size.LARGE else 0.0\n        if t == FoodType.DRINK: return 0.10 if \"no-ice\" in item.getExtras() else 0.0\n        if t == FoodType.SALAD: return 0.30 if \"chicken\" in item.getExtras() else 0.0\n        if t == FoodType.PIZZA: return 0.40 if \"pepperoni\" in item.getExtras() else 0.0\n        return 0.0\n\n\nclass KitchenStationRouter:\n    def station(self, item):\n        return {\n            FoodType.BURGER: \"Grill\",\n            FoodType.FRIES: \"Fryer\",\n            FoodType.PIZZA: \"Oven\",\n            FoodType.DRINK: \"Beverage\",\n            FoodType.SALAD: \"Cold Prep\",\n            FoodType.DESSERT: \"Dessert Bar\"\n        }.get(item.getType(), \"Unknown\")\n\n\nclass InventoryManager:\n    def __init__(self):\n        self._stock = {\"bun\": 50, \"patty\": 50, \"potato\": 80,\n                       \"dough\": 30, \"soda\": 100, \"greens\": 40, \"dessertBase\": 30}\n\n    def reserve(self, item):\n        t = item.getType()\n        if t == FoodType.BURGER: return self._take(\"bun\", 1) and self._take(\"patty\", 1)\n        if t == FoodType.FRIES: return self._take(\"potato\", 2)\n        if t == FoodType.PIZZA: return self._take(\"dough\", 1)\n        if t == FoodType.DRINK: return self._take(\"soda\", 1)\n        if t == FoodType.SALAD: return self._take(\"greens\", 1)\n        if t == FoodType.DESSERT: return self._take(\"dessertBase\", 1)\n        return False\n\n    def _take(self, key, qty):\n        have = self._stock.get(key, 0)\n        if have < qty: return False\n        self._stock[key] = have - qty\n        return True\n\n    def getStock(self): return dict(self._stock)\n\n\nclass Chef:\n    def prepare(self, item):\n        msgs = {\n            FoodType.BURGER: \"Chef grills patty and assembles burger\",\n            FoodType.FRIES: \"Chef drops fries in fryer\",\n            FoodType.PIZZA: \"Chef stretches dough and bakes pizza\",\n            FoodType.DRINK: \"Chef fills cup and lids drink\",\n            FoodType.SALAD: \"Chef chops and tosses salad\",\n            FoodType.DESSERT: \"Chef plates dessert\"\n        }\n        print(msgs.get(item.getType(), \"\"))\n\n\nclass Waiter:\n    def take(self, order, item):\n        print(\"Waiter records item: \" + item.getName())\n        order.add(item)\n\n    def serve(self, item):\n        msgs = {\n            FoodType.BURGER: \"Waiter serves burger with napkins\",\n            FoodType.FRIES: \"Waiter serves fries with ketchup\",\n            FoodType.PIZZA: \"Waiter serves pizza with slicer\",\n            FoodType.DRINK: \"Waiter serves drink with straw\",\n            FoodType.SALAD: \"Waiter serves salad with dressing\",\n            FoodType.DESSERT: \"Waiter serves dessert with spoon\"\n        }\n        print(msgs.get(item.getType(), \"\"))\n\n\nclass Cashier:\n    def __init__(self):\n        self.prices = PriceCalculator()\n        self.taxes = TaxCalculator()\n        self.promos = PromotionEngine()\n\n    def total(self, order):\n        sum_ = 0.0\n        for item in order.items():\n            base = self.prices.price(item)\n            discount = self.promos.discount(item)\n            taxed = (base - discount) * (1.0 + self.taxes.taxFor(item))\n            sum_ += taxed\n        return round(sum_, 2)\n\n\nclass ReceiptPrinter:\n    def __init__(self):\n        self.prices = PriceCalculator()\n        self.taxes = TaxCalculator()\n        self.promos = PromotionEngine()\n        self.nutrition = NutritionCalculator()\n\n    def print(self, order):\n        print(\"Customer: \" + order.customer())\n        for item in order.items():\n            base = self.prices.price(item)\n            discount = self.promos.discount(item)\n            taxRate = self.taxes.taxFor(item)\n            kcal = self.nutrition.calories(item)\n            print(f\"{item.getName()} ({item.getType().name} {item.getSize().name}) base ${base} disc ${discount} tax {int(taxRate*100)}% kcal {kcal}\")\n\n\nclass PackagingSelector:\n    def packaging(self, item):\n        t, s = item.getType(), item.getSize()\n        if t == FoodType.BURGER: return \"Clamshell XL\" if s == Size.LARGE else \"Clamshell\"\n        if t == FoodType.FRIES: return \"Carton L\" if s == Size.LARGE else \"Carton\"\n        if t == FoodType.PIZZA: return {Size.SMALL: \"Box S\", Size.MEDIUM: \"Box M\"}.get(s, \"Box L\")\n        if t == FoodType.DRINK: return {Size.LARGE: \"Cup 24oz\", Size.MEDIUM: \"Cup 16oz\"}.get(s, \"Cup 12oz\")\n        if t == FoodType.SALAD: return \"Bowl\"\n        if t == FoodType.DESSERT: return \"Dessert Cup\"\n        return \"Generic\"\n\n\nclass AllergyChecker:\n    def allergens(self, item):\n        t = item.getType()\n        if t == FoodType.BURGER: return {\"gluten\", \"dairy\"}\n        if t == FoodType.FRIES: return set()\n        if t == FoodType.PIZZA: return {\"gluten\", \"dairy\"}\n        if t == FoodType.DRINK: return set()\n        if t == FoodType.SALAD: return {\"none\"} if \"chicken\" in item.getExtras() else set()\n        if t == FoodType.DESSERT: return {\"dairy\"}\n        return set()\n\n\nclass DeliveryPlanner:\n    def courier(self, item):\n        return {\n            FoodType.PIZZA: \"Insulated Bag\",\n            FoodType.DRINK: \"Cup Holder\",\n            FoodType.FRIES: \"Thermal Pouch\",\n            FoodType.BURGER: \"Standard Bag\",\n            FoodType.SALAD: \"Cold Pack\",\n            FoodType.DESSERT: \"Cold Sleeve\"\n        }.get(item.getType(), \"Bag\")\n\n\nclass ComboEngine:\n    def comboDiscount(self, items):\n        hasBurger = any(i.getType() == FoodType.BURGER for i in items)\n        hasFries = any(i.getType() == FoodType.FRIES for i in items)\n        hasDrink = any(i.getType() == FoodType.DRINK for i in items)\n        hasPizza = any(i.getType() == FoodType.PIZZA for i in items)\n        if hasBurger and hasFries and hasDrink: return 1.00\n        if hasPizza and hasDrink: return 0.50\n        return 0.0\n\n\nclass LoyaltyPointsCalculator:\n    def points(self, item):\n        return {\n            FoodType.BURGER: 12, FoodType.FRIES: 6, FoodType.PIZZA: 18,\n            FoodType.DRINK: 4, FoodType.SALAD: 10, FoodType.DESSERT: 8\n        }.get(item.getType(), 0)\n\n\nclass WasteTracker:\n    def prepWasteGrams(self, item):\n        return {\n            FoodType.BURGER: 15, FoodType.FRIES: 12, FoodType.PIZZA: 20,\n            FoodType.DRINK: 3, FoodType.SALAD: 8, FoodType.DESSERT: 6\n        }.get(item.getType(), 0)\n\n\nclass KitchenLoadBalancer:\n    def stationLoadWeight(self, item):\n        return {\n            FoodType.BURGER: 3, FoodType.FRIES: 2, FoodType.PIZZA: 4,\n            FoodType.DRINK: 1, FoodType.SALAD: 2, FoodType.DESSERT: 2\n        }.get(item.getType(), 1)\n\n\nclass QualityInspector:\n    def pass_(self, item):\n        bad = {\n            FoodType.BURGER: \"raw\",\n            FoodType.FRIES: \"soggy\",\n            FoodType.PIZZA: \"burnt\",\n            FoodType.DRINK: \"flat\",\n            FoodType.SALAD: \"wilted\",\n            FoodType.DESSERT: \"melted\"\n        }\n        key = bad.get(item.getType())\n        return key not in item.getExtras()\n\n\nclass CookingTimer:\n    def seconds(self, item):\n        t, s = item.getType(), item.getSize()\n        if t == FoodType.BURGER: return 420 if s == Size.LARGE else 360\n        if t == FoodType.FRIES: return 210 if s == Size.LARGE else 180\n        if t == FoodType.PIZZA: return 540 if s == Size.LARGE else 480\n        if t == FoodType.DRINK: return 30\n        if t == FoodType.SALAD: return 120\n        if t == FoodType.DESSERT: return 90\n        return 60\n\n\nclass MenuAvailability:\n    def availableNow(self, item, hour):\n        t = item.getType()\n        if t == FoodType.PIZZA: return hour >= 11\n        if t == FoodType.SALAD: return 10 <= hour <= 22\n        if t == FoodType.DESSERT: return 11 <= hour <= 23\n        return True\n\n\nclass SpicinessRegulator:\n    def spiceLevel(self, item):\n        t = item.getType()\n        if t == FoodType.BURGER: return 3 if \"jalapeno\" in item.getExtras() else 1\n        if t == FoodType.FRIES: return 2 if \"peri-peri\" in item.getExtras() else 0\n        if t == FoodType.PIZZA: return 2 if \"pepperoni\" in item.getExtras() else 1\n        if t == FoodType.SALAD: return 2 if \"chili\" in item.getExtras() else 0\n        return 0\n\n\nclass UpsellEngine:\n    def suggest(self, item):\n        return {\n            FoodType.BURGER: \"Add Fries\",\n            FoodType.FRIES: \"Add Drink\",\n            FoodType.PIZZA: \"Add Dessert\",\n            FoodType.DRINK: \"Add Burger\",\n            FoodType.SALAD: \"Add Chicken\",\n            FoodType.DESSERT: \"Add Coffee\"\n        }.get(item.getType(), \"Add Deal\")\n\n",
            "output": "from enum import Enum\nfrom types import MappingProxyType\nimport math\n\nclass FoodType(Enum):\n    BURGER = 1\n    FRIES = 2\n    PIZZA = 3\n    DRINK = 4\n    SALAD = 5\n    DESSERT = 6\n\nclass Size(Enum):\n    SMALL = 1\n    MEDIUM = 2\n    LARGE = 3\n\nclass FoodItem:\n    def __init__(self, name, type, size, extras):\n        self._name = name\n        self._type = type\n        self._size = size\n        self._extras = set() if extras is None else set(extras)\n        self._strategy = FoodStrategyFactory.create(type)\n    def getName(self):\n        return self._name\n    def getType(self):\n        return self._type\n    def getSize(self):\n        return self._size\n    def getExtras(self):\n        return self._extras\n    def getStrategy(self):\n        return self._strategy\n\nclass Order:\n    def __init__(self, customer):\n        self._customer = customer\n        self._items = []\n    def add(self, item):\n        self._items.append(item)\n    def items(self):\n        return self._items\n    def customer(self):\n        return self._customer\n\nclass FoodStrategy:\n    def getPrice(self, size): raise NotImplementedError\n    def getTaxRate(self): raise NotImplementedError\n    def getCalories(self, size): raise NotImplementedError\n    def getDiscount(self, item): raise NotImplementedError\n    def getStation(self): raise NotImplementedError\n    def reserveInventory(self, stock): raise NotImplementedError\n    def prepare(self): raise NotImplementedError\n    def serve(self): raise NotImplementedError\n    def getPackaging(self, size): raise NotImplementedError\n    def getAllergens(self, item): raise NotImplementedError\n    def getCourier(self): raise NotImplementedError\n    def getLoyaltyPoints(self): raise NotImplementedError\n    def getPrepWasteGrams(self): raise NotImplementedError\n    def getStationLoadWeight(self): raise NotImplementedError\n    def passQuality(self, item): raise NotImplementedError\n    def getCookingSeconds(self, size): raise NotImplementedError\n    def isAvailable(self, hour): raise NotImplementedError\n    def getSpiceLevel(self, item): raise NotImplementedError\n    def getUpsellSuggestion(self): raise NotImplementedError\n\nclass BaseFoodStrategy(FoodStrategy):\n    def takeFromStock(self, stock, key, qty):\n        have = stock.get(key, 0)\n        if have < qty:\n            return False\n        stock[key] = have - qty\n        return True\n\nclass BurgerStrategy(BaseFoodStrategy):\n    def getPrice(self, size):\n        if size == Size.SMALL: return 5.49\n        if size == Size.MEDIUM: return 6.49\n        return 7.49\n    def getTaxRate(self): return 0.05\n    def getCalories(self, size):\n        if size == Size.SMALL: return 480\n        if size == Size.MEDIUM: return 650\n        return 820\n    def getDiscount(self, item):\n        return 0.50 if \"extra-cheese\" in item.getExtras() else 0.0\n    def getStation(self): return \"Grill\"\n    def reserveInventory(self, stock):\n        return self.takeFromStock(stock, \"bun\", 1) and self.takeFromStock(stock, \"patty\", 1)\n    def prepare(self):\n        print(\"Chef grills patty and assembles burger\")\n    def serve(self):\n        print(\"Waiter serves burger with napkins\")\n    def getPackaging(self, size):\n        return \"Clamshell XL\" if size == Size.LARGE else \"Clamshell\"\n    def getAllergens(self, item):\n        return set([\"gluten\", \"dairy\"])\n    def getCourier(self): return \"Standard Bag\"\n    def getLoyaltyPoints(self): return 12\n    def getPrepWasteGrams(self): return 15\n    def getStationLoadWeight(self): return 3\n    def passQuality(self, item):\n        return \"raw\" not in item.getExtras()\n    def getCookingSeconds(self, size):\n        return 420 if size == Size.LARGE else 360\n    def isAvailable(self, hour): return True\n    def getSpiceLevel(self, item):\n        return 3 if \"jalapeno\" in item.getExtras() else 1\n    def getUpsellSuggestion(self): return \"Add Fries\"\n\nclass FriesStrategy(BaseFoodStrategy):\n    def getPrice(self, size):\n        if size == Size.SMALL: return 1.99\n        if size == Size.MEDIUM: return 2.49\n        return 2.99\n    def getTaxRate(self): return 0.05\n    def getCalories(self, size):\n        if size == Size.SMALL: return 220\n        if size == Size.MEDIUM: return 330\n        return 440\n    def getDiscount(self, item):\n        return 0.20 if item.getSize() == Size.LARGE else 0.0\n    def getStation(self): return \"Fryer\"\n    def reserveInventory(self, stock):\n        return self.takeFromStock(stock, \"potato\", 2)\n    def prepare(self):\n        print(\"Chef drops fries in fryer\")\n    def serve(self):\n        print(\"Waiter serves fries with ketchup\")\n    def getPackaging(self, size):\n        return \"Carton L\" if size == Size.LARGE else \"Carton\"\n    def getAllergens(self, item):\n        return set()\n    def getCourier(self): return \"Thermal Pouch\"\n    def getLoyaltyPoints(self): return 6\n    def getPrepWasteGrams(self): return 12\n    def getStationLoadWeight(self): return 2\n    def passQuality(self, item):\n        return \"soggy\" not in item.getExtras()\n    def getCookingSeconds(self, size):\n        return 210 if size == Size.LARGE else 180\n    def isAvailable(self, hour): return True\n    def getSpiceLevel(self, item):\n        return 2 if \"peri-peri\" in item.getExtras() else 0\n    def getUpsellSuggestion(self): return \"Add Drink\"\n\nclass PizzaStrategy(BaseFoodStrategy):\n    def getPrice(self, size):\n        if size == Size.SMALL: return 7.99\n        if size == Size.MEDIUM: return 9.99\n        return 12.49\n    def getTaxRate(self): return 0.06\n    def getCalories(self, size):\n        if size == Size.SMALL: return 700\n        if size == Size.MEDIUM: return 950\n        return 1200\n    def getDiscount(self, item):\n        return 0.40 if \"pepperoni\" in item.getExtras() else 0.0\n    def getStation(self): return \"Oven\"\n    def reserveInventory(self, stock):\n        return self.takeFromStock(stock, \"dough\", 1)\n    def prepare(self):\n        print(\"Chef stretches dough and bakes pizza\")\n    def serve(self):\n        print(\"Waiter serves pizza with slicer\")\n    def getPackaging(self, size):\n        return \"Box S\" if size == Size.SMALL else (\"Box M\" if size == Size.MEDIUM else \"Box L\")\n    def getAllergens(self, item):\n        return set([\"gluten\", \"dairy\"])\n    def getCourier(self): return \"Insulated Bag\"\n    def getLoyaltyPoints(self): return 18\n    def getPrepWasteGrams(self): return 20\n    def getStationLoadWeight(self): return 4\n    def passQuality(self, item):\n        return \"burnt\" not in item.getExtras()\n    def getCookingSeconds(self, size):\n        return 540 if size == Size.LARGE else 480\n    def isAvailable(self, hour): return hour >= 11\n    def getSpiceLevel(self, item):\n        return 2 if \"pepperoni\" in item.getExtras() else 1\n    def getUpsellSuggestion(self): return \"Add Dessert\"\n\nclass DrinkStrategy(BaseFoodStrategy):\n    def getPrice(self, size):\n        if size == Size.SMALL: return 1.29\n        if size == Size.MEDIUM: return 1.49\n        return 1.79\n    def getTaxRate(self): return 0.10\n    def getCalories(self, size):\n        if size == Size.SMALL: return 110\n        if size == Size.MEDIUM: return 160\n        return 210\n    def getDiscount(self, item):\n        return 0.10 if \"no-ice\" in item.getExtras() else 0.0\n    def getStation(self): return \"Beverage\"\n    def reserveInventory(self, stock):\n        return self.takeFromStock(stock, \"soda\", 1)\n    def prepare(self):\n        print(\"Chef fills cup and lids drink\")\n    def serve(self):\n        print(\"Waiter serves drink with straw\")\n    def getPackaging(self, size):\n        return \"Cup 24oz\" if size == Size.LARGE else (\"Cup 16oz\" if size == Size.MEDIUM else \"Cup 12oz\")\n    def getAllergens(self, item):\n        return set()\n    def getCourier(self): return \"Cup Holder\"\n    def getLoyaltyPoints(self): return 4\n    def getPrepWasteGrams(self): return 3\n    def getStationLoadWeight(self): return 1\n    def passQuality(self, item):\n        return \"flat\" not in item.getExtras()\n    def getCookingSeconds(self, size): return 30\n    def isAvailable(self, hour): return True\n    def getSpiceLevel(self, item): return 0\n    def getUpsellSuggestion(self): return \"Add Burger\"\n\nclass SaladStrategy(BaseFoodStrategy):\n    def getPrice(self, size):\n        if size == Size.SMALL: return 4.49\n        if size == Size.MEDIUM: return 5.49\n        return 6.49\n    def getTaxRate(self): return 0.05\n    def getCalories(self, size):\n        if size == Size.SMALL: return 180\n        if size == Size.MEDIUM: return 260\n        return 340\n    def getDiscount(self, item):\n        return 0.30 if \"chicken\" in item.getExtras() else 0.0\n    def getStation(self): return \"Cold Prep\"\n    def reserveInventory(self, stock):\n        return self.takeFromStock(stock, \"greens\", 1)\n    def prepare(self):\n        print(\"Chef chops and tosses salad\")\n    def serve(self):\n        print(\"Waiter serves salad with dressing\")\n    def getPackaging(self, size): return \"Bowl\"\n    def getAllergens(self, item):\n        return set([\"none\"]) if \"chicken\" in item.getExtras() else set()\n    def getCourier(self): return \"Cold Pack\"\n    def getLoyaltyPoints(self): return 10\n    def getPrepWasteGrams(self): return 8\n    def getStationLoadWeight(self): return 2\n    def passQuality(self, item):\n        return \"wilted\" not in item.getExtras()\n    def getCookingSeconds(self, size): return 120\n    def isAvailable(self, hour):\n        return hour >= 10 and hour <= 22\n    def getSpiceLevel(self, item):\n        return 2 if \"chili\" in item.getExtras() else 0\n    def getUpsellSuggestion(self): return \"Add Chicken\"\n\nclass DessertStrategy(BaseFoodStrategy):\n    def getPrice(self, size):\n        if size == Size.SMALL: return 2.99\n        if size == Size.MEDIUM: return 3.49\n        return 3.99\n    def getTaxRate(self): return 0.08\n    def getCalories(self, size):\n        if size == Size.SMALL: return 250\n        if size == Size.MEDIUM: return 320\n        return 390\n    def getDiscount(self, item): return 0.0\n    def getStation(self): return \"Dessert Bar\"\n    def reserveInventory(self, stock):\n        return self.takeFromStock(stock, \"dessertBase\", 1)\n    def prepare(self):\n        print(\"Chef plates dessert\")\n    def serve(self):\n        print(\"Waiter serves dessert with spoon\")\n    def getPackaging(self, size): return \"Dessert Cup\"\n    def getAllergens(self, item):\n        return set([\"dairy\"])\n    def getCourier(self): return \"Cold Sleeve\"\n    def getLoyaltyPoints(self): return 8\n    def getPrepWasteGrams(self): return 6\n    def getStationLoadWeight(self): return 2\n    def passQuality(self, item):\n        return \"melted\" not in item.getExtras()\n    def getCookingSeconds(self, size): return 90\n    def isAvailable(self, hour):\n        return hour >= 11 and hour <= 23\n    def getSpiceLevel(self, item): return 0\n    def getUpsellSuggestion(self): return \"Add Coffee\"\n\nclass DefaultStrategy(BaseFoodStrategy):\n    def getPrice(self, size): raise ValueError(\"Unknown type\")\n    def getTaxRate(self): return 0.05\n    def getCalories(self, size): return 0\n    def getDiscount(self, item): return 0.0\n    def getStation(self): return \"Unknown\"\n    def reserveInventory(self, stock): return False\n    def prepare(self): pass\n    def serve(self): pass\n    def getPackaging(self, size): return \"Generic\"\n    def getAllergens(self, item): return set()\n    def getCourier(self): return \"Bag\"\n    def getLoyaltyPoints(self): return 0\n    def getPrepWasteGrams(self): return 0\n    def getStationLoadWeight(self): return 1\n    def passQuality(self, item): return True\n    def getCookingSeconds(self, size): return 60\n    def isAvailable(self, hour): return True\n    def getSpiceLevel(self, item): return 0\n    def getUpsellSuggestion(self): return \"Add Deal\"\n\nclass FoodStrategyFactory:\n    _strategies = {\n        FoodType.BURGER: BurgerStrategy(),\n        FoodType.FRIES: FriesStrategy(),\n        FoodType.PIZZA: PizzaStrategy(),\n        FoodType.DRINK: DrinkStrategy(),\n        FoodType.SALAD: SaladStrategy(),\n        FoodType.DESSERT: DessertStrategy()\n    }\n    @staticmethod\n    def create(type):\n        return FoodStrategyFactory._strategies.get(type, DefaultStrategy())\n\nclass PriceCalculator:\n    def price(self, item):\n        return item.getStrategy().getPrice(item.getSize())\n\nclass TaxCalculator:\n    def taxFor(self, item):\n        return item.getStrategy().getTaxRate()\n\nclass NutritionCalculator:\n    def calories(self, item):\n        return item.getStrategy().getCalories(item.getSize())\n\nclass PromotionEngine:\n    def discount(self, item):\n        return item.getStrategy().getDiscount(item)\n\nclass KitchenStationRouter:\n    def station(self, item):\n        return item.getStrategy().getStation()\n\nclass InventoryManager:\n    def __init__(self):\n        self._stock = {\n            \"bun\": 50, \"patty\": 50, \"potato\": 80,\n            \"dough\": 30, \"soda\": 100, \"greens\": 40, \"dessertBase\": 30\n        }\n    def reserve(self, item):\n        return item.getStrategy().reserveInventory(self._stock)\n    def getStock(self):\n        return MappingProxyType(self._stock)\n\nclass Chef:\n    def prepare(self, item):\n        item.getStrategy().prepare()\n\nclass Waiter:\n    def take(self, order, item):\n        print(\"Waiter records item: \" + item.getName())\n        order.add(item)\n    def serve(self, item):\n        item.getStrategy().serve()\n\nclass Cashier:\n    def __init__(self):\n        self._prices = PriceCalculator()\n        self._taxes = TaxCalculator()\n        self._promos = PromotionEngine()\n    def total(self, order):\n        s = 0.0\n        for item in order.items():\n            base = self._prices.price(item)\n            discount = self._promos.discount(item)\n            taxed = (base - discount) * (1.0 + self._taxes.taxFor(item))\n            s += taxed\n        return math.floor(s * 100.0 + 0.5) / 100.0\n\nclass ReceiptPrinter:\n    def __init__(self):\n        self._prices = PriceCalculator()\n        self._taxes = TaxCalculator()\n        self._promos = PromotionEngine()\n        self._nutrition = NutritionCalculator()\n    def print(self, order):\n        print(\"Customer: \" + order.customer())\n        for item in order.items():\n            base = self._prices.price(item)\n            discount = self._promos.discount(item)\n            taxRate = self._taxes.taxFor(item)\n            kcal = self._nutrition.calories(item)\n            print(item.getName() + \" (\" + str(item.getType().name) + \" \" + str(item.getSize().name) + \") base $\" + str(base) + \" disc $\" + str(discount) + \" tax \" + str(int(taxRate * 100)) + \"% kcal \" + str(kcal))\n\nclass PackagingSelector:\n    def packaging(self, item):\n        return item.getStrategy().getPackaging(item.getSize())\n\nclass AllergyChecker:\n    def allergens(self, item):\n        return item.getStrategy().getAllergens(item)\n\nclass DeliveryPlanner:\n    def courier(self, item):\n        return item.getStrategy().getCourier()\n\nclass ComboEngine:\n    def comboDiscount(self, items):\n        hasBurger = any(i.getType() == FoodType.BURGER for i in items)\n        hasFries = any(i.getType() == FoodType.FRIES for i in items)\n        hasDrink = any(i.getType() == FoodType.DRINK for i in items)\n        hasPizza = any(i.getType() == FoodType.PIZZA for i in items)\n        if hasBurger and hasFries and hasDrink: return 1.00\n        if hasPizza and hasDrink: return 0.50\n        return 0.0\n\nclass LoyaltyPointsCalculator:\n    def points(self, item):\n        return item.getStrategy().getLoyaltyPoints()\n\nclass WasteTracker:\n    def prepWasteGrams(self, item):\n        return item.getStrategy().getPrepWasteGrams()\n\nclass KitchenLoadBalancer:\n    def stationLoadWeight(self, item):\n        return item.getStrategy().getStationLoadWeight()\n\nclass QualityInspector:\n    def pass_(self, item):\n        return item.getStrategy().passQuality(item)\n\nclass CookingTimer:\n    def seconds(self, item):\n        return item.getStrategy().getCookingSeconds(item.getSize())\n\nclass MenuAvailability:\n    def availableNow(self, item, hour):\n        return item.getStrategy().isAvailable(hour)\n\nclass SpicinessRegulator:\n    def spiceLevel(self, item):\n        return item.getStrategy().getSpiceLevel(item)\n\nclass UpsellEngine:\n    def suggest(self, item):\n        return item.getStrategy().getUpsellSuggestion()\n",
            "level": "HARD",
            "language": "PYTHON",
            "violation": "OCP"
        },
        {
            "input": "from enum import Enum\n\n\nclass DeviceType(Enum):\n    LIGHT = 1\n    THERMOSTAT = 2\n    DOOR_LOCK = 3\n    CAMERA = 4\n    SPRINKLER = 5\n    BLIND = 6\n    SPEAKER = 7\n\n\nclass RoomType(Enum):\n    LIVING = 1\n    KITCHEN = 2\n    BEDROOM = 3\n    BATHROOM = 4\n    GARDEN = 5\n    GARAGE = 6\n\n\nclass Mode(Enum):\n    ECO = 1\n    COMFORT = 2\n    AWAY = 3\n    NIGHT = 4\n    PARTY = 5\n\n\nclass AlertType(Enum):\n    INFO = 1\n    WARN = 2\n    CRITICAL = 3\n\n\nclass SmartDevice:\n    def __init__(self, id_, type_):\n        self._id = id_\n        self._type = type_\n        self._mode = Mode.ECO\n        self._online = True\n\n    def getId(self): return self._id\n    def getType(self): return self._type\n    def getMode(self): return self._mode\n    def isOnline(self): return self._online\n    def setMode(self, m): self._mode = m\n    def setOnline(self, o): self._online = o\n\n\nclass Room:\n    def __init__(self, name, type_):\n        self._name = name\n        self._type = type_\n        self._devices = []\n\n    def add(self, d): self._devices.append(d)\n    def getDevices(self): return self._devices\n    def getName(self): return self._name\n    def getType(self): return self._type\n\n\nclass SmartHomeController:\n    def turnOn(self, d):\n        t, id_ = d.getType(), d.getId()\n        if t == DeviceType.LIGHT: print(\"Light\", id_, \"ON\")\n        elif t == DeviceType.THERMOSTAT: print(\"Thermostat\", id_, \"heating\")\n        elif t == DeviceType.DOOR_LOCK: print(\"Lock\", id_, \"locked\")\n        elif t == DeviceType.CAMERA: print(\"Camera\", id_, \"recording\")\n        elif t == DeviceType.SPRINKLER: print(\"Sprinkler\", id_, \"watering\")\n        elif t == DeviceType.BLIND: print(\"Blind\", id_, \"open\")\n        elif t == DeviceType.SPEAKER: print(\"Speaker\", id_, \"playing\")\n\n    def turnOff(self, d):\n        t, id_ = d.getType(), d.getId()\n        if t == DeviceType.LIGHT: print(\"Light\", id_, \"OFF\")\n        elif t == DeviceType.THERMOSTAT: print(\"Thermostat\", id_, \"idle\")\n        elif t == DeviceType.DOOR_LOCK: print(\"Lock\", id_, \"secured\")\n        elif t == DeviceType.CAMERA: print(\"Camera\", id_, \"standby\")\n        elif t == DeviceType.SPRINKLER: print(\"Sprinkler\", id_, \"stopped\")\n        elif t == DeviceType.BLIND: print(\"Blind\", id_, \"closed\")\n        elif t == DeviceType.SPEAKER: print(\"Speaker\", id_, \"paused\")\n\n    def setMode(self, d, m):\n        d.setMode(m)\n        print(d.getType().name.capitalize(), d.getId(), \"->\", m)\n\n    def energyUsageKwh(self, d, minutes):\n        t = d.getType()\n        if t == DeviceType.LIGHT: return 0.012 * minutes\n        if t == DeviceType.THERMOSTAT: return 0.08 * minutes\n        if t == DeviceType.DOOR_LOCK: return 0.0002 * minutes\n        if t == DeviceType.CAMERA: return 0.01 * minutes\n        if t == DeviceType.SPRINKLER: return 0.03 * minutes\n        if t == DeviceType.BLIND: return 0 if minutes == 0 else 0.001 * minutes\n        if t == DeviceType.SPEAKER: return 0.015 * minutes\n        return 0\n\n\nclass NotificationService:\n    def push(self, d, t, msg):\n        print(f\"[{t.name}] {d.getType().name.title()} {d.getId()}: {msg}\")\n\n\nclass DiagnosticsService:\n    def health(self, d):\n        t = d.getType()\n        if t == DeviceType.LIGHT: return \"OK\" if d.isOnline() else \"Bulb Offline\"\n        if t == DeviceType.THERMOSTAT: return \"OK\" if d.isOnline() else \"Sensor Offline\"\n        if t == DeviceType.DOOR_LOCK: return \"OK\" if d.isOnline() else \"Battery Low\"\n        if t == DeviceType.CAMERA: return \"OK\" if d.isOnline() else \"Stream Error\"\n        if t == DeviceType.SPRINKLER: return \"OK\" if d.isOnline() else \"Valve Error\"\n        if t == DeviceType.BLIND: return \"OK\" if d.isOnline() else \"Motor Jam\"\n        if t == DeviceType.SPEAKER: return \"OK\" if d.isOnline() else \"Audio Fault\"\n        return \"Unknown\"\n\n\nclass SecurityPolicy:\n    def allowed(self, d, action, userHome):\n        t = d.getType()\n        if t == DeviceType.DOOR_LOCK: return action == \"unlock\" and userHome or action != \"unlock\"\n        if t == DeviceType.CAMERA: return action != \"disable\" or userHome\n        if t == DeviceType.SPRINKLER: return not (action == \"on\" and userHome and d.getMode() == Mode.PARTY)\n        if t == DeviceType.SPEAKER: return not (action == \"play\" and not userHome)\n        return True\n\n\nclass VoiceCommandProcessor:\n    def __init__(self): self.ctl = SmartHomeController()\n    def handle(self, phrase, d):\n        t = d.getType()\n        if t == DeviceType.LIGHT:\n            if phrase.lower() == \"lights on\": self.ctl.turnOn(d)\n            elif phrase.lower() == \"lights off\": self.ctl.turnOff(d)\n        elif t == DeviceType.THERMOSTAT:\n            if phrase.lower() == \"heat on\": self.ctl.turnOn(d)\n            elif phrase.lower() == \"eco\": self.ctl.setMode(d, Mode.ECO)\n        elif t == DeviceType.DOOR_LOCK and phrase.lower() == \"lock door\": self.ctl.turnOn(d)\n        elif t == DeviceType.CAMERA and phrase.lower() == \"record\": self.ctl.turnOn(d)\n        elif t == DeviceType.SPRINKLER and phrase.lower() == \"water\": self.ctl.turnOn(d)\n        elif t == DeviceType.BLIND:\n            if phrase.lower() == \"open blinds\": self.ctl.turnOn(d)\n            elif phrase.lower() == \"close blinds\": self.ctl.turnOff(d)\n        elif t == DeviceType.SPEAKER:\n            if phrase.lower() == \"play music\": self.ctl.turnOn(d)\n            elif phrase.lower() == \"pause music\": self.ctl.turnOff(d)\n\n\nclass SceneManager:\n    def __init__(self): self.ctl = SmartHomeController()\n    def apply(self, scene, devices):\n        for d in devices:\n            if scene == \"Evening\":\n                if d.getType() == DeviceType.LIGHT: self.ctl.turnOn(d); self.ctl.setMode(d, Mode.COMFORT)\n                elif d.getType() == DeviceType.THERMOSTAT: self.ctl.setMode(d, Mode.COMFORT)\n                elif d.getType() == DeviceType.CAMERA: self.ctl.turnOn(d)\n                elif d.getType() == DeviceType.DOOR_LOCK: self.ctl.turnOn(d)\n                elif d.getType() == DeviceType.SPRINKLER: self.ctl.turnOff(d)\n                elif d.getType() == DeviceType.BLIND: self.ctl.turnOff(d)\n                elif d.getType() == DeviceType.SPEAKER: self.ctl.turnOn(d)\n            elif scene == \"Away\":\n                if d.getType() == DeviceType.LIGHT: self.ctl.turnOff(d)\n                elif d.getType() == DeviceType.THERMOSTAT: self.ctl.setMode(d, Mode.AWAY)\n                elif d.getType() == DeviceType.CAMERA: self.ctl.turnOn(d)\n                elif d.getType() == DeviceType.DOOR_LOCK: self.ctl.turnOn(d)\n                elif d.getType() == DeviceType.SPRINKLER: self.ctl.turnOff(d)\n                elif d.getType() == DeviceType.BLIND: self.ctl.turnOff(d)\n                elif d.getType() == DeviceType.SPEAKER: self.ctl.turnOff(d)\n            elif scene == \"Party\":\n                if d.getType() == DeviceType.LIGHT: self.ctl.turnOn(d); self.ctl.setMode(d, Mode.PARTY)\n                elif d.getType() == DeviceType.THERMOSTAT: self.ctl.setMode(d, Mode.COMFORT)\n                elif d.getType() == DeviceType.SPEAKER: self.ctl.turnOn(d)\n                elif d.getType() == DeviceType.CAMERA: self.ctl.turnOff(d)\n                elif d.getType() == DeviceType.BLIND: self.ctl.turnOn(d)\n                elif d.getType() == DeviceType.SPRINKLER: self.ctl.turnOff(d)\n                elif d.getType() == DeviceType.DOOR_LOCK: self.ctl.turnOn(d)\n\n\nclass FirmwareManager:\n    def steps(self, d):\n        t = d.getType()\n        if t == DeviceType.LIGHT: return [\"Ping\",\"PushFW\",\"Reboot\"]\n        if t == DeviceType.THERMOSTAT: return [\"Ping\",\"Backup\",\"PushFW\",\"Recalibrate\"]\n        if t == DeviceType.DOOR_LOCK: return [\"SecureChannel\",\"PushFW\",\"Reauth\"]\n        if t == DeviceType.CAMERA: return [\"Ping\",\"PushFW\",\"RestartStream\"]\n        if t == DeviceType.SPRINKLER: return [\"Ping\",\"PushFW\",\"ValveTest\"]\n        if t == DeviceType.BLIND: return [\"Ping\",\"PushFW\",\"AlignMotor\"]\n        if t == DeviceType.SPEAKER: return [\"Ping\",\"PushFW\",\"RestartAudio\"]\n        return []\n\n\nclass ScheduleEngine:\n    class Entry:\n        def __init__(self, d, cron, action):\n            self.device, self.cron, self.action = d, cron, action\n    def run(self, e, ctl):\n        t, a = e.device.getType(), e.action\n        if t == DeviceType.LIGHT: ctl.turnOn(e.device) if a==\"on\" else ctl.turnOff(e.device)\n        elif t == DeviceType.SPRINKLER: ctl.turnOn(e.device) if a==\"on\" else ctl.turnOff(e.device)\n        elif t == DeviceType.THERMOSTAT and a==\"comfort\": ctl.setMode(e.device, Mode.COMFORT)\n        elif t == DeviceType.BLIND: ctl.turnOn(e.device) if a==\"open\" else ctl.turnOff(e.device)\n        elif t == DeviceType.SPEAKER: ctl.turnOn(e.device) if a==\"play\" else ctl.turnOff(e.device)\n        else: ctl.turnOff(e.device)\n\n\nclass WeatherAdvisor:\n    def shouldWater(self, condition): return condition==\"dry\"\n    def lightLevelFor(self, condition):\n        return {\"sunny\":100,\"cloudy\":70,\"rain\":50}.get(condition,60)\n\n\nclass GeoFence:\n    def inside(self, user, distanceMeters):\n        if user==\"owner\": return distanceMeters<50\n        if user==\"guest\": return distanceMeters<10\n        return False\n\n\nclass AccessController:\n    def canControl(self, d, role):\n        t = d.getType()\n        if t == DeviceType.DOOR_LOCK: return role==\"owner\"\n        if t == DeviceType.CAMERA: return role in (\"owner\",\"admin\")\n        if t == DeviceType.THERMOSTAT: return role!=\"guest\"\n        return True\n\n\nclass DeviceRenderer:\n    def icon(self, d):\n        return {\n            DeviceType.LIGHT:\"ð¡\", DeviceType.THERMOSTAT:\"ð¡ï¸\", DeviceType.DOOR_LOCK:\"ð\",\n            DeviceType.CAMERA:\"ð·\", DeviceType.SPRINKLER:\"ð§\", DeviceType.BLIND:\"ðª\",\n            DeviceType.SPEAKER:\"ð\"\n        }.get(d.getType(),\"â\")\n    def label(self,d):\n        return {\n            DeviceType.LIGHT:\"Light-\", DeviceType.THERMOSTAT:\"Thermo-\", DeviceType.DOOR_LOCK:\"Lock-\",\n            DeviceType.CAMERA:\"Cam-\", DeviceType.SPRINKLER:\"Sprink-\", DeviceType.BLIND:\"Blind-\",\n            DeviceType.SPEAKER:\"Speaker-\"\n        }.get(d.getType(),\"\")+d.getId()\n\n\nclass DeviceRegistry:\n    def __init__(self): self.byId={}\n    def register(self,d): self.byId[d.getId()]=d\n    def find(self,id_): return self.byId.get(id_)\n    def groups(self,d):\n        t=d.getType()\n        if t==DeviceType.LIGHT: return [\"lighting\",\"grid\"]\n        if t==DeviceType.THERMOSTAT: return [\"climate\",\"grid\"]\n        if t==DeviceType.DOOR_LOCK: return [\"security\"]\n        if t==DeviceType.CAMERA: return [\"security\",\"video\"]\n        if t==DeviceType.SPRINKLER: return [\"garden\",\"water\"]\n        if t==DeviceType.BLIND: return [\"lighting\",\"shades\"]\n        if t==DeviceType.SPEAKER: return [\"media\"]\n        return []\n\n\nclass AutomationRuleEngine:\n    def __init__(self): self.ctl=SmartHomeController()\n    def onEvent(self,event,d):\n        if event==\"motion\":\n            if d.getType() in (DeviceType.CAMERA,DeviceType.LIGHT): self.ctl.turnOn(d)\n        elif event==\"sunset\":\n            if d.getType()==DeviceType.LIGHT: self.ctl.turnOn(d)\n            elif d.getType()==DeviceType.BLIND: self.ctl.turnOff(d)\n        elif event==\"door-open\":\n            if d.getType() in (DeviceType.DOOR_LOCK,DeviceType.CAMERA): self.ctl.turnOn(d)\n\n\nclass ReportPrinter:\n    def __init__(self):\n        self.ctl=SmartHomeController(); self.diag=DiagnosticsService(); self.render=DeviceRenderer()\n    def printRoom(self,room):\n        print(\"Room:\",room.getName(),\"(\",room.getType().name,\")\")\n        for d in room.getDevices():\n            e=self.ctl.energyUsageKwh(d,30)\n            print(self.render.icon(d),self.render.label(d),\"mode=\",d.getMode().name,\"health=\",self.diag.health(d),\"30m=\",\"%.3f\"%e,\"kWh\")\n\n",
            "output": "from enum import Enum\nfrom abc import ABC, abstractmethod\n\nclass DeviceType(Enum):\n    LIGHT = 1\n    THERMOSTAT = 2\n    DOOR_LOCK = 3\n    CAMERA = 4\n    SPRINKLER = 5\n    BLIND = 6\n    SPEAKER = 7\n\nclass RoomType(Enum):\n    LIVING = 1\n    KITCHEN = 2\n    BEDROOM = 3\n    BATHROOM = 4\n    GARDEN = 5\n    GARAGE = 6\n\nclass Mode(Enum):\n    ECO = 1\n    COMFORT = 2\n    AWAY = 3\n    NIGHT = 4\n    PARTY = 5\n\nclass AlertType(Enum):\n    INFO = 1\n    WARN = 2\n    CRITICAL = 3\n\nclass SmartDevice(ABC):\n    def __init__(self, id, type):\n        self.id = id\n        self.type = type\n        self.mode = Mode.ECO\n        self.online = True\n\n    def getId(self): return self.id\n    def getType(self): return self.type\n    def getMode(self): return self.mode\n    def isOnline(self): return self.online\n    def setMode(self, m): self.mode = m\n    def setOnline(self, o): self.online = o\n\n    @abstractmethod\n    def turnOn(self): ...\n    @abstractmethod\n    def turnOff(self): ...\n    @abstractmethod\n    def setModeAction(self, m): ...\n    @abstractmethod\n    def getEnergyUsagePerMinute(self): ...\n    @abstractmethod\n    def getHealthStatus(self): ...\n    @abstractmethod\n    def getNotificationPrefix(self): ...\n    @abstractmethod\n    def isActionAllowed(self, action, userHome): ...\n    @abstractmethod\n    def handleVoiceCommand(self, phrase, ctl): ...\n    @abstractmethod\n    def applyEveningScene(self, ctl): ...\n    @abstractmethod\n    def applyAwayScene(self, ctl): ...\n    @abstractmethod\n    def applyPartyScene(self, ctl): ...\n    @abstractmethod\n    def getFirmwareSteps(self): ...\n    @abstractmethod\n    def executeScheduledAction(self, action, ctl): ...\n    @abstractmethod\n    def handleMotionEvent(self, ctl): ...\n    @abstractmethod\n    def handleSunsetEvent(self, ctl): ...\n    @abstractmethod\n    def handleDoorOpenEvent(self, ctl): ...\n    @abstractmethod\n    def getIcon(self): ...\n    @abstractmethod\n    def getLabel(self): ...\n    @abstractmethod\n    def getGroups(self): ...\n    @abstractmethod\n    def canUserControl(self, role): ...\n\nclass LightDevice(SmartDevice):\n    def __init__(self, id): super().__init__(id, DeviceType.LIGHT)\n    def turnOn(self): print(f\"Light {self.id} ON\")\n    def turnOff(self): print(f\"Light {self.id} OFF\")\n    def setModeAction(self, m): print(f\"Light {self.id} -> {m.name}\")\n    def getEnergyUsagePerMinute(self): return 0.012\n    def getHealthStatus(self): return \"OK\" if self.online else \"Bulb Offline\"\n    def getNotificationPrefix(self): return \"Light\"\n    def isActionAllowed(self, action, userHome): return True\n    def handleVoiceCommand(self, phrase, ctl):\n        if phrase.lower() == \"lights on\": ctl.turnOn(self)\n        elif phrase.lower() == \"lights off\": ctl.turnOff(self)\n    def applyEveningScene(self, ctl): ctl.turnOn(self); ctl.setMode(self, Mode.COMFORT)\n    def applyAwayScene(self, ctl): ctl.turnOff(self)\n    def applyPartyScene(self, ctl): ctl.turnOn(self); ctl.setMode(self, Mode.PARTY)\n    def getFirmwareSteps(self): return [\"Ping\",\"PushFW\",\"Reboot\"]\n    def executeScheduledAction(self, action, ctl):\n        if action == \"on\": ctl.turnOn(self)\n        else: ctl.turnOff(self)\n    def handleMotionEvent(self, ctl): ctl.turnOn(self)\n    def handleSunsetEvent(self, ctl): ctl.turnOn(self)\n    def handleDoorOpenEvent(self, ctl): pass\n    def getIcon(self): return \"ð¡\"\n    def getLabel(self): return \"Light-\" + self.id\n    def getGroups(self): return [\"lighting\",\"grid\"]\n    def canUserControl(self, role): return True\n\nclass ThermostatDevice(SmartDevice):\n    def __init__(self, id): super().__init__(id, DeviceType.THERMOSTAT)\n    def turnOn(self): print(f\"Thermostat {self.id} heating\")\n    def turnOff(self): print(f\"Thermostat {self.id} idle\")\n    def setModeAction(self, m): print(f\"Thermostat {self.id} -> {m.name}\")\n    def getEnergyUsagePerMinute(self): return 0.08\n    def getHealthStatus(self): return \"OK\" if self.online else \"Sensor Offline\"\n    def getNotificationPrefix(self): return \"Thermostat\"\n    def isActionAllowed(self, action, userHome): return True\n    def handleVoiceCommand(self, phrase, ctl):\n        if phrase.lower() == \"heat on\": ctl.turnOn(self)\n        elif phrase.lower() == \"eco\": ctl.setMode(self, Mode.ECO)\n    def applyEveningScene(self, ctl): ctl.setMode(self, Mode.COMFORT)\n    def applyAwayScene(self, ctl): ctl.setMode(self, Mode.AWAY)\n    def applyPartyScene(self, ctl): ctl.setMode(self, Mode.COMFORT)\n    def getFirmwareSteps(self): return [\"Ping\",\"Backup\",\"PushFW\",\"Recalibrate\"]\n    def executeScheduledAction(self, action, ctl):\n        if action == \"comfort\": ctl.setMode(self, Mode.COMFORT)\n    def handleMotionEvent(self, ctl): pass\n    def handleSunsetEvent(self, ctl): pass\n    def handleDoorOpenEvent(self, ctl): pass\n    def getIcon(self): return \"ð¡ï¸\"\n    def getLabel(self): return \"Thermo-\" + self.id\n    def getGroups(self): return [\"climate\",\"grid\"]\n    def canUserControl(self, role): return role != \"guest\"\n\nclass DoorLockDevice(SmartDevice):\n    def __init__(self, id): super().__init__(id, DeviceType.DOOR_LOCK)\n    def turnOn(self): print(f\"Lock {self.id} locked\")\n    def turnOff(self): print(f\"Lock {self.id} secured\")\n    def setModeAction(self, m): print(f\"Lock {self.id} -> {m.name}\")\n    def getEnergyUsagePerMinute(self): return 0.0002\n    def getHealthStatus(self): return \"OK\" if self.online else \"Battery Low\"\n    def getNotificationPrefix(self): return \"Lock\"\n    def isActionAllowed(self, action, userHome):\n        return userHome if action == \"unlock\" else True\n    def handleVoiceCommand(self, phrase, ctl):\n        if phrase.lower() == \"lock door\": ctl.turnOn(self)\n    def applyEveningScene(self, ctl): ctl.turnOn(self)\n    def applyAwayScene(self, ctl): ctl.turnOn(self)\n    def applyPartyScene(self, ctl): ctl.turnOn(self)\n    def getFirmwareSteps(self): return [\"SecureChannel\",\"PushFW\",\"Reauth\"]\n    def executeScheduledAction(self, action, ctl): ctl.turnOff(self)\n    def handleMotionEvent(self, ctl): pass\n    def handleSunsetEvent(self, ctl): pass\n    def handleDoorOpenEvent(self, ctl): ctl.turnOn(self)\n    def getIcon(self): return \"ð\"\n    def getLabel(self): return \"Lock-\" + self.id\n    def getGroups(self): return [\"security\"]\n    def canUserControl(self, role): return role == \"owner\"\n\nclass CameraDevice(SmartDevice):\n    def __init__(self, id): super().__init__(id, DeviceType.CAMERA)\n    def turnOn(self): print(f\"Camera {self.id} recording\")\n    def turnOff(self): print(f\"Camera {self.id} standby\")\n    def setModeAction(self, m): print(f\"Camera {self.id} -> {m.name}\")\n    def getEnergyUsagePerMinute(self): return 0.01\n    def getHealthStatus(self): return \"OK\" if self.online else \"Stream Error\"\n    def getNotificationPrefix(self): return \"Camera\"\n    def isActionAllowed(self, action, userHome):\n        return action != \"disable\" or userHome\n    def handleVoiceCommand(self, phrase, ctl):\n        if phrase.lower() == \"record\": ctl.turnOn(self)\n    def applyEveningScene(self, ctl): ctl.turnOn(self)\n    def applyAwayScene(self, ctl): ctl.turnOn(self)\n    def applyPartyScene(self, ctl): ctl.turnOff(self)\n    def getFirmwareSteps(self): return [\"Ping\",\"PushFW\",\"RestartStream\"]\n    def executeScheduledAction(self, action, ctl): ctl.turnOff(self)\n    def handleMotionEvent(self, ctl): ctl.turnOn(self)\n    def handleSunsetEvent(self, ctl): pass\n    def handleDoorOpenEvent(self, ctl): ctl.turnOn(self)\n    def getIcon(self): return \"ð·\"\n    def getLabel(self): return \"Cam-\" + self.id\n    def getGroups(self): return [\"security\",\"video\"]\n    def canUserControl(self, role): return role == \"owner\" or role == \"admin\"\n\nclass SprinklerDevice(SmartDevice):\n    def __init__(self, id): super().__init__(id, DeviceType.SPRINKLER)\n    def turnOn(self): print(f\"Sprinkler {self.id} watering\")\n    def turnOff(self): print(f\"Sprinkler {self.id} stopped\")\n    def setModeAction(self, m): print(f\"Sprinkler {self.id} -> {m.name}\")\n    def getEnergyUsagePerMinute(self): return 0.03\n    def getHealthStatus(self): return \"OK\" if self.online else \"Valve Error\"\n    def getNotificationPrefix(self): return \"Sprinkler\"\n    def isActionAllowed(self, action, userHome):\n        return not (action == \"on\" and userHome and self.mode == Mode.PARTY)\n    def handleVoiceCommand(self, phrase, ctl):\n        if phrase.lower() == \"water\": ctl.turnOn(self)\n    def applyEveningScene(self, ctl): ctl.turnOff(self)\n    def applyAwayScene(self, ctl): ctl.turnOff(self)\n    def applyPartyScene(self, ctl): ctl.turnOff(self)\n    def getFirmwareSteps(self): return [\"Ping\",\"PushFW\",\"ValveTest\"]\n    def executeScheduledAction(self, action, ctl):\n        if action == \"on\": ctl.turnOn(self)\n        else: ctl.turnOff(self)\n    def handleMotionEvent(self, ctl): pass\n    def handleSunsetEvent(self, ctl): pass\n    def handleDoorOpenEvent(self, ctl): pass\n    def getIcon(self): return \"ð§\"\n    def getLabel(self): return \"Sprink-\" + self.id\n    def getGroups(self): return [\"garden\",\"water\"]\n    def canUserControl(self, role): return True\n\nclass BlindDevice(SmartDevice):\n    def __init__(self, id): super().__init__(id, DeviceType.BLIND)\n    def turnOn(self): print(f\"Blind {self.id} open\")\n    def turnOff(self): print(f\"Blind {self.id} closed\")\n    def setModeAction(self, m): print(f\"Blind {self.id} -> {m.name}\")\n    def getEnergyUsagePerMinute(self): return 0.001\n    def getHealthStatus(self): return \"OK\" if self.online else \"Motor Jam\"\n    def getNotificationPrefix(self): return \"Blind\"\n    def isActionAllowed(self, action, userHome): return True\n    def handleVoiceCommand(self, phrase, ctl):\n        pl = phrase.lower()\n        if pl == \"open blinds\": ctl.turnOn(self)\n        elif pl == \"close blinds\": ctl.turnOff(self)\n    def applyEveningScene(self, ctl): ctl.turnOff(self)\n    def applyAwayScene(self, ctl): ctl.turnOff(self)\n    def applyPartyScene(self, ctl): ctl.turnOn(self)\n    def getFirmwareSteps(self): return [\"Ping\",\"PushFW\",\"AlignMotor\"]\n    def executeScheduledAction(self, action, ctl):\n        if action == \"open\": ctl.turnOn(self)\n        else: ctl.turnOff(self)\n    def handleMotionEvent(self, ctl): pass\n    def handleSunsetEvent(self, ctl): ctl.turnOff(self)\n    def handleDoorOpenEvent(self, ctl): pass\n    def getIcon(self): return \"ðª\"\n    def getLabel(self): return \"Blind-\" + self.id\n    def getGroups(self): return [\"lighting\",\"shades\"]\n    def canUserControl(self, role): return True\n\nclass SpeakerDevice(SmartDevice):\n    def __init__(self, id): super().__init__(id, DeviceType.SPEAKER)\n    def turnOn(self): print(f\"Speaker {self.id} playing\")\n    def turnOff(self): print(f\"Speaker {self.id} paused\")\n    def setModeAction(self, m): print(f\"Speaker {self.id} -> {m.name}\")\n    def getEnergyUsagePerMinute(self): return 0.015\n    def getHealthStatus(self): return \"OK\" if self.online else \"Audio Fault\"\n    def getNotificationPrefix(self): return \"Speaker\"\n    def isActionAllowed(self, action, userHome):\n        return not (action == \"play\" and not userHome)\n    def handleVoiceCommand(self, phrase, ctl):\n        pl = phrase.lower()\n        if pl == \"play music\": ctl.turnOn(self)\n        elif pl == \"pause music\": ctl.turnOff(self)\n    def applyEveningScene(self, ctl): ctl.turnOn(self)\n    def applyAwayScene(self, ctl): ctl.turnOff(self)\n    def applyPartyScene(self, ctl): ctl.turnOn(self)\n    def getFirmwareSteps(self): return [\"Ping\",\"PushFW\",\"RestartAudio\"]\n    def executeScheduledAction(self, action, ctl):\n        if action == \"play\": ctl.turnOn(self)\n        else: ctl.turnOff(self)\n    def handleMotionEvent(self, ctl): pass\n    def handleSunsetEvent(self, ctl): pass\n    def handleDoorOpenEvent(self, ctl): pass\n    def getIcon(self): return \"ð\"\n    def getLabel(self): return \"Speaker-\" + self.id\n    def getGroups(self): return [\"media\"]\n    def canUserControl(self, role): return True\n\nclass Room:\n    def __init__(self, name, type):\n        self.name = name\n        self.type = type\n        self.devices = []\n    def add(self, d): self.devices.append(d)\n    def getDevices(self): return self.devices\n    def getName(self): return self.name\n    def getType(self): return self.type\n\nclass SmartHomeController:\n    def turnOn(self, d): d.turnOn()\n    def turnOff(self, d): d.turnOff()\n    def setMode(self, d, m): d.setMode(m); d.setModeAction(m)\n    def energyUsageKwh(self, d, minutes):\n        return d.getEnergyUsagePerMinute() * minutes\n\nclass NotificationService:\n    def push(self, d, t, msg):\n        print(f\"[{t.name}] {d.getNotificationPrefix()} {d.getId()}: {msg}\")\n\nclass DiagnosticsService:\n    def health(self, d): return d.getHealthStatus()\n\nclass SecurityPolicy:\n    def allowed(self, d, action, userHome):\n        return d.isActionAllowed(action, userHome)\n\nclass VoiceCommandProcessor:\n    def __init__(self):\n        self.ctl = SmartHomeController()\n    def handle(self, phrase, d):\n        d.handleVoiceCommand(phrase, self.ctl)\n\nclass SceneManager:\n    def __init__(self):\n        self.ctl = SmartHomeController()\n    def apply(self, scene, devices):\n        for d in devices:\n            if scene == \"Evening\": d.applyEveningScene(self.ctl)\n            elif scene == \"Away\": d.applyAwayScene(self.ctl)\n            elif scene == \"Party\": d.applyPartyScene(self.ctl)\n\nclass FirmwareManager:\n    def steps(self, d): return d.getFirmwareSteps()\n\nclass ScheduleEngine:\n    class Entry:\n        def __init__(self, device, cron, action):\n            self.device = device; self.cron = cron; self.action = action\n    def run(self, e, ctl):\n        e.device.executeScheduledAction(e.action, ctl)\n\nclass WeatherAdvisor:\n    def shouldWater(self, condition):\n        if condition == \"rain\": return False\n        if condition == \"dry\": return True\n        if condition == \"windy\": return False\n        return False\n    def lightLevelFor(self, condition):\n        if condition == \"sunny\": return 100\n        if condition == \"cloudy\": return 70\n        if condition == \"rain\": return 50\n        return 60\n\nclass GeoFence:\n    def inside(self, user, distanceMeters):\n        if user == \"owner\": return distanceMeters < 50\n        if user == \"guest\": return distanceMeters < 10\n        return False\n\nclass AccessController:\n    def canControl(self, d, role):\n        return d.canUserControl(role)\n\nclass DeviceRenderer:\n    def icon(self, d): return d.getIcon()\n    def label(self, d): return d.getLabel()\n\nclass DeviceRegistry:\n    def __init__(self):\n        self.byId = {}\n    def register(self, d): self.byId[d.getId()] = d\n    def find(self, id): return self.byId.get(id)\n    def groups(self, d): return d.getGroups()\n\nclass AutomationRuleEngine:\n    def __init__(self):\n        self.ctl = SmartHomeController()\n    def onEvent(self, event, d):\n        if event == \"motion\": d.handleMotionEvent(self.ctl)\n        elif event == \"sunset\": d.handleSunsetEvent(self.ctl)\n        elif event == \"door-open\": d.handleDoorOpenEvent(self.ctl)\n\nclass ReportPrinter:\n    def __init__(self):\n        self.ctl = SmartHomeController()\n        self.diag = DiagnosticsService()\n        self.render = DeviceRenderer()\n    def printRoom(self, room):\n        print(f\"Room: {room.getName()} ({room.getType().name})\")\n        for d in room.getDevices():\n            e = self.ctl.energyUsageKwh(d, 30)\n            print(f\"{self.render.icon(d)} {self.render.label(d)} mode={d.getMode().name} health={self.diag.health(d)} 30m={format(e, '.3f')}kWh\")\n\n\n",
            "level": "HARD",
            "language": "PYTHON",
            "violation": "OCP"
        },
        {
            "input": "from enum import Enum\nimport math\n\n\nclass GraphicObject:\n    def __init__(self, color: str):\n        self._color = color\n\n    def get_color(self):\n        return self._color\n\n\nclass ShapeKind(Enum):\n    RECTANGLE = 1\n    CIRCLE = 2\n    CUBE = 3\n\n\nclass Shape(GraphicObject):\n    def __init__(self, kind: ShapeKind, color: str):\n        super().__init__(color)\n        self._kind = kind\n\n    def get_kind(self):\n        return self._kind\n\n\nclass TwoDShape(Shape):\n    def __init__(self, kind: ShapeKind, color: str):\n        super().__init__(kind, color)\n\n\nclass ThreeDShape(Shape):\n    def __init__(self, kind: ShapeKind, color: str):\n        super().__init__(kind, color)\n\n\nclass Rectangle(TwoDShape):\n    def __init__(self, width: float, height: float, color: str):\n        super().__init__(ShapeKind.RECTANGLE, color)\n        self._width = width\n        self._height = height\n\n    def get_width(self):\n        return self._width\n\n    def get_height(self):\n        return self._height\n\n\nclass Circle(TwoDShape):\n    def __init__(self, radius: float, color: str):\n        super().__init__(ShapeKind.CIRCLE, color)\n        self._radius = radius\n\n    def get_radius(self):\n        return self._radius\n\n\nclass Cube(ThreeDShape):\n    def __init__(self, edge: float, color: str):\n        super().__init__(ShapeKind.CUBE, color)\n        self._edge = edge\n\n    def get_edge(self):\n        return self._edge\n\n\nclass Metric(Enum):\n    AREA = 1\n    PERIMETER = 2\n    VOLUME = 3\n\n\nclass MetricCalculator:\n    def compute(self, shape: Shape, metric: Metric):\n        if shape.get_kind() == ShapeKind.RECTANGLE:\n            r: Rectangle = shape\n            if metric == Metric.AREA:\n                return r.get_width() * r.get_height()\n            elif metric == Metric.PERIMETER:\n                return 2 * (r.get_width() + r.get_height())\n            elif metric == Metric.VOLUME:\n                return 0\n        elif shape.get_kind() == ShapeKind.CIRCLE:\n            c: Circle = shape\n            if metric == Metric.AREA:\n                return math.pi * c.get_radius() ** 2\n            elif metric == Metric.PERIMETER:\n                return 2 * math.pi * c.get_radius()\n            elif metric == Metric.VOLUME:\n                return 0\n        elif shape.get_kind() == ShapeKind.CUBE:\n            cube: Cube = shape\n            if metric == Metric.AREA:\n                return 6 * cube.get_edge() ** 2\n            elif metric == Metric.PERIMETER:\n                return 12 * cube.get_edge()\n            elif metric == Metric.VOLUME:\n                return cube.get_edge() ** 3\n        return 0\n\n\nclass ShapeExporter:\n    def to_json(self, shape: Shape):\n        if shape.get_kind() == ShapeKind.RECTANGLE:\n            r: Rectangle = shape\n            return '{{\"type\":\"rectangle\",\"color\":\"{}\",\"width\":{:.2f},\"height\":{:.2f}}}'.format(\n                r.get_color(), r.get_width(), r.get_height()\n            )\n        elif shape.get_kind() == ShapeKind.CIRCLE:\n            c: Circle = shape\n            return '{{\"type\":\"circle\",\"color\":\"{}\",\"radius\":{:.2f}}}'.format(\n                c.get_color(), c.get_radius()\n            )\n        elif shape.get_kind() == ShapeKind.CUBE:\n            cube: Cube = shape\n            return '{{\"type\":\"cube\",\"color\":\"{}\",\"edge\":{:.2f}}}'.format(\n                cube.get_color(), cube.get_edge()\n            )\n        return \"{}\"\n\n\nclass ShapeFactory:\n    def create(self, spec: str) -> Shape:\n        parts = spec.split(\":\", 1)\n        type_ = parts[0].strip()\n        kvs = (parts[1] if len(parts) > 1 else \"\").split(\";\")\n        map_ = {}\n        for kv in kvs:\n            p = kv.split(\"=\")\n            if len(p) == 2:\n                map_[p[0].strip()] = p[1].strip()\n        color = map_.get(\"color\", \"black\")\n\n        if type_.lower() == \"rectangle\":\n            return Rectangle(\n                float(map_.get(\"width\", \"0\")),\n                float(map_.get(\"height\", \"0\")),\n                color\n            )\n        elif type_.lower() == \"circle\":\n            return Circle(\n                float(map_.get(\"radius\", \"0\")),\n                color\n            )\n        elif type_.lower() == \"cube\":\n            return Cube(\n                float(map_.get(\"edge\", \"0\")),\n                color\n            )\n        else:\n            raise ValueError(\"Unknown shape: \" + type_)\n\n",
            "output": "from abc import ABC, abstractmethod\nimport math\n\n\nclass GraphicObject(ABC):\n    def __init__(self, color: str):\n        self._color = color\n\n    def get_color(self) -> str:\n        return self._color\n\n\nclass Shape(GraphicObject):\n    @abstractmethod\n    def area(self) -> float:\n        pass\n\n    @abstractmethod\n    def perimeter(self) -> float:\n        pass\n\n    @abstractmethod\n    def volume(self) -> float:\n        pass\n\n    @abstractmethod\n    def to_json(self) -> str:\n        pass\n\n\nclass TwoDShape(Shape):\n    def volume(self) -> float:\n        return 0.0\n\n\nclass ThreeDShape(Shape):\n    pass\n\n\nclass Rectangle(TwoDShape):\n    def __init__(self, width: float, height: float, color: str):\n        super().__init__(color)\n        self._width = width\n        self._height = height\n\n    def get_width(self) -> float:\n        return self._width\n\n    def get_height(self) -> float:\n        return self._height\n\n    def area(self) -> float:\n        return self._width * self._height\n\n    def perimeter(self) -> float:\n        return 2 * (self._width + self._height)\n\n    def to_json(self) -> str:\n        return '{{\"type\":\"rectangle\",\"color\":\"{}\",\"width\":{:.2f},\"height\":{:.2f}}}'.format(\n            self.get_color(), self._width, self._height\n        )\n\n\nclass Circle(TwoDShape):\n    def __init__(self, radius: float, color: str):\n        super().__init__(color)\n        self._radius = radius\n\n    def get_radius(self) -> float:\n        return self._radius\n\n    def area(self) -> float:\n        return math.pi * self._radius * self._radius\n\n    def perimeter(self) -> float:\n        return 2 * math.pi * self._radius\n\n    def to_json(self) -> str:\n        return '{{\"type\":\"circle\",\"color\":\"{}\",\"radius\":{:.2f}}}'.format(\n            self.get_color(), self._radius\n        )\n\n\nclass Cube(ThreeDShape):\n    def __init__(self, edge: float, color: str):\n        super().__init__(color)\n        self._edge = edge\n\n    def get_edge(self) -> float:\n        return self._edge\n\n    def area(self) -> float:\n        return 6 * self._edge * self._edge\n\n    def perimeter(self) -> float:\n        return 12 * self._edge\n\n    def volume(self) -> float:\n        return self._edge ** 3\n\n    def to_json(self) -> str:\n        return '{{\"type\":\"cube\",\"color\":\"{}\",\"edge\":{:.2f}}}'.format(\n            self.get_color(), self._edge\n        )\n\n\nclass Metric:\n    AREA = \"AREA\"\n    PERIMETER = \"PERIMETER\"\n    VOLUME = \"VOLUME\"\n\n\nclass MetricCalculator:\n    def compute(self, shape: Shape, metric: str) -> float:\n        if metric == Metric.AREA:\n            return shape.area()\n        elif metric == Metric.PERIMETER:\n            return shape.perimeter()\n        elif metric == Metric.VOLUME:\n            return shape.volume()\n        else:\n            raise ValueError(\"Unknown metric: \" + metric)\n\n\nclass ShapeExporter:\n    def to_json(self, shape: Shape) -> str:\n        return shape.to_json()\n\n\nclass ShapeFactory:\n    def create(self, spec: str) -> Shape:\n        parts = spec.split(\":\", 1)\n        type_ = parts[0].strip()\n        kvs = parts[1].split(\";\") if len(parts) > 1 else []\n        map_ = {}\n        for kv in kvs:\n            p = kv.split(\"=\")\n            if len(p) == 2:\n                map_[p[0].strip()] = p[1].strip()\n        color = map_.get(\"color\", \"black\")\n\n        if type_.lower() == \"rectangle\":\n            return Rectangle(\n                float(map_.get(\"width\", \"0\")),\n                float(map_.get(\"height\", \"0\")),\n                color\n            )\n        elif type_.lower() == \"circle\":\n            return Circle(\n                float(map_.get(\"radius\", \"0\")),\n                color\n            )\n        elif type_.lower() == \"cube\":\n            return Cube(\n                float(map_.get(\"edge\", \"0\")),\n                color\n            )\n        else:\n            raise ValueError(\"Unknown shape: \" + type_)\n",
            "level": "MODERATE",
            "language": "PYTHON",
            "violation": "OCP"
        },
        {
            "input": "import random\nfrom enum import Enum\n\n\nclass CharacterType(Enum):\n    WARRIOR = 1\n    MAGE = 2\n    ARCHER = 3\n\n\nclass SkillType(Enum):\n    BASIC = 1\n    SPECIAL = 2\n\n\nclass GameCharacter:\n    def __init__(self, name: str, type_: CharacterType, base_attack: int, level: int):\n        self._name = name\n        self._type = type_\n        self._base_attack = base_attack\n        self._level = level\n\n    def get_name(self):\n        return self._name\n\n    def get_type(self):\n        return self._type\n\n    def get_base_attack(self):\n        return self._base_attack\n\n    def get_level(self):\n        return self._level\n\n\nclass Skill:\n    def __init__(self, type_: SkillType, name: str):\n        self._type = type_\n        self._name = name\n\n    def get_type(self):\n        return self._type\n\n    def get_name(self):\n        return self._name\n\n\nclass Enemy:\n    def __init__(self, name: str, armor: int, resistance: int):\n        self._name = name\n        self._armor = armor\n        self._resistance = resistance\n\n    def get_name(self):\n        return self._name\n\n    def get_armor(self):\n        return self._armor\n\n    def get_resistance(self):\n        return self._resistance\n\n\nclass DamageCalculator:\n    def __init__(self):\n        self._rng = random.Random()\n\n    def calculate_damage(self, c: GameCharacter, s: Skill, e: Enemy) -> int:\n        if c.get_type() == CharacterType.WARRIOR:\n            raw = int(c.get_base_attack() * (1.2 + c.get_level() * 0.05))\n            if s.get_type() == SkillType.SPECIAL:\n                raw = int(raw * 1.5)\n            raw -= e.get_armor()\n            return max(raw, 0)\n        elif c.get_type() == CharacterType.MAGE:\n            raw = c.get_base_attack() + int(c.get_level() * 3.5)\n            if s.get_type() == SkillType.SPECIAL:\n                raw += 25\n            raw -= e.get_resistance()\n            return max(raw, 0)\n        elif c.get_type() == CharacterType.ARCHER:\n            raw = c.get_base_attack()\n            crit = self._rng.randint(0, 99) < (20 + c.get_level())\n            if crit:\n                raw *= 2\n            if s.get_type() == SkillType.SPECIAL:\n                raw += 10\n            raw -= int(e.get_armor() * 0.5)\n            return max(raw, 0)\n        else:\n            raise ValueError(\"Unknown type\")\n\n\nclass LootCalculator:\n    def calculate_gold(self, c: GameCharacter, e: Enemy) -> int:\n        if c.get_type() == CharacterType.WARRIOR:\n            return 10 + c.get_level() + e.get_armor() // 5\n        elif c.get_type() == CharacterType.MAGE:\n            return 8 + c.get_level() * 2 + e.get_resistance() // 4\n        elif c.get_type() == CharacterType.ARCHER:\n            return 9 + round(c.get_level() * 1.5)\n        else:\n            raise ValueError(\"Unknown type\")\n",
            "output": "import math\nimport random\nfrom enum import Enum\n\n\nclass SkillType(Enum):\n    BASIC = 1\n    SPECIAL = 2\n\n\nclass Skill:\n    def __init__(self, type_: SkillType, name: str):\n        self._type = type_\n        self._name = name\n\n    def getType(self) -> SkillType:\n        return self._type\n\n    def getName(self) -> str:\n        return self._name\n\n\nclass Enemy:\n    def __init__(self, name: str, armor: int, resistance: int):\n        self._name = name\n        self._armor = armor\n        self._resistance = resistance\n\n    def getName(self) -> str:\n        return self._name\n\n    def getArmor(self) -> int:\n        return self._armor\n\n    def getResistance(self) -> int:\n        return self._resistance\n\n\nclass GameCharacter:\n    def __init__(self, name: str, baseAttack: int, level: int):\n        self._name = name\n        self._baseAttack = baseAttack\n        self._level = level\n\n    def getName(self) -> str:\n        return self._name\n\n    def getBaseAttack(self) -> int:\n        return self._baseAttack\n\n    def getLevel(self) -> int:\n        return self._level\n\n    def calculateDamage(self, s: Skill, e: Enemy, rng: random.Random) -> int:\n        raise NotImplementedError\n\n    def calculateGold(self, e: Enemy) -> int:\n        raise NotImplementedError\n\n\nclass Warrior(GameCharacter):\n    def calculateDamage(self, s: Skill, e: Enemy, rng: random.Random) -> int:\n        raw = int(self.getBaseAttack() * (1.2 + self.getLevel() * 0.05))\n        if s.getType() == SkillType.SPECIAL:\n            raw = int(raw * 1.5)\n        raw -= e.getArmor()\n        return max(raw, 0)\n\n    def calculateGold(self, e: Enemy) -> int:\n        return 10 + self.getLevel() + e.getArmor() // 5\n\n\nclass Mage(GameCharacter):\n    def calculateDamage(self, s: Skill, e: Enemy, rng: random.Random) -> int:\n        raw = self.getBaseAttack() + int(self.getLevel() * 3.5)\n        if s.getType() == SkillType.SPECIAL:\n            raw += 25\n        raw -= e.getResistance()\n        return max(raw, 0)\n\n    def calculateGold(self, e: Enemy) -> int:\n        return 8 + self.getLevel() * 2 + e.getResistance() // 4\n\n\nclass Archer(GameCharacter):\n    def calculateDamage(self, s: Skill, e: Enemy, rng: random.Random) -> int:\n        raw = self.getBaseAttack()\n        crit = rng.randrange(100) < (20 + self.getLevel())\n        if crit:\n            raw *= 2\n        if s.getType() == SkillType.SPECIAL:\n            raw += 10\n        raw -= int(e.getArmor() * 0.5)\n        return max(raw, 0)\n\n    def calculateGold(self, e: Enemy) -> int:\n        val = self.getLevel() * 1.5\n        return 9 + int(math.floor(val + 0.5))\n",
            "level": "MODERATE",
            "language": "PYTHON",
            "violation": "OCP"
        },
        {
            "input": "from enum import Enum\nfrom typing import List, Set, Dict\n\n\nclass FoodType(Enum):\n    BURGER = 1\n    FRIES = 2\n    PIZZA = 3\n    DRINK = 4\n    SALAD = 5\n    DESSERT = 6\n\n\nclass Size(Enum):\n    SMALL = 1\n    MEDIUM = 2\n    LARGE = 3\n\n\nclass FoodItem:\n    def __init__(self, name: str, type_: FoodType, size: Size, extras: Set[str] = None):\n        self._name = name\n        self._type = type_\n        self._size = size\n        self._extras = extras if extras else set()\n\n    def get_name(self): return self._name\n    def get_type(self): return self._type\n    def get_size(self): return self._size\n    def get_extras(self): return self._extras\n\n\nclass Order:\n    def __init__(self, customer: str):\n        self._customer = customer\n        self._items: List[FoodItem] = []\n\n    def add(self, item: FoodItem):\n        self._items.append(item)\n\n    def items(self): return self._items\n    def customer(self): return self._customer\n\n\nclass PriceCalculator:\n    def price(self, item: FoodItem) -> float:\n        if item.get_type() == FoodType.BURGER:\n            return {Size.SMALL: 5.49, Size.MEDIUM: 6.49, Size.LARGE: 7.49}[item.get_size()]\n        elif item.get_type() == FoodType.FRIES:\n            return {Size.SMALL: 1.99, Size.MEDIUM: 2.49, Size.LARGE: 2.99}[item.get_size()]\n        elif item.get_type() == FoodType.PIZZA:\n            return {Size.SMALL: 7.99, Size.MEDIUM: 9.99, Size.LARGE: 12.49}[item.get_size()]\n        elif item.get_type() == FoodType.DRINK:\n            return {Size.SMALL: 1.29, Size.MEDIUM: 1.49, Size.LARGE: 1.79}[item.get_size()]\n        elif item.get_type() == FoodType.SALAD:\n            return {Size.SMALL: 4.49, Size.MEDIUM: 5.49, Size.LARGE: 6.49}[item.get_size()]\n        elif item.get_type() == FoodType.DESSERT:\n            return {Size.SMALL: 2.99, Size.MEDIUM: 3.49, Size.LARGE: 3.99}[item.get_size()]\n        else:\n            raise ValueError(\"Unknown type\")\n\n\nclass TaxCalculator:\n    def tax_for(self, item: FoodItem) -> float:\n        if item.get_type() == FoodType.DRINK:\n            return 0.10\n        elif item.get_type() == FoodType.DESSERT:\n            return 0.08\n        elif item.get_type() == FoodType.PIZZA:\n            return 0.06\n        else:\n            return 0.05\n\n\nclass NutritionCalculator:\n    def calories(self, item: FoodItem) -> int:\n        if item.get_type() == FoodType.BURGER:\n            return {Size.SMALL: 480, Size.MEDIUM: 650, Size.LARGE: 820}[item.get_size()]\n        elif item.get_type() == FoodType.FRIES:\n            return {Size.SMALL: 220, Size.MEDIUM: 330, Size.LARGE: 440}[item.get_size()]\n        elif item.get_type() == FoodType.PIZZA:\n            return {Size.SMALL: 700, Size.MEDIUM: 950, Size.LARGE: 1200}[item.get_size()]\n        elif item.get_type() == FoodType.DRINK:\n            return {Size.SMALL: 110, Size.MEDIUM: 160, Size.LARGE: 210}[item.get_size()]\n        elif item.get_type() == FoodType.SALAD:\n            return {Size.SMALL: 180, Size.MEDIUM: 260, Size.LARGE: 340}[item.get_size()]\n        elif item.get_type() == FoodType.DESSERT:\n            return {Size.SMALL: 250, Size.MEDIUM: 320, Size.LARGE: 390}[item.get_size()]\n        else:\n            return 0\n\n\nclass PromotionEngine:\n    def discount(self, item: FoodItem) -> float:\n        if item.get_type() == FoodType.BURGER:\n            return 0.50 if \"extra-cheese\" in item.get_extras() else 0.0\n        elif item.get_type() == FoodType.FRIES:\n            return 0.20 if item.get_size() == Size.LARGE else 0.0\n        elif item.get_type() == FoodType.DRINK:\n            return 0.10 if \"no-ice\" in item.get_extras() else 0.0\n        elif item.get_type() == FoodType.SALAD:\n            return 0.30 if \"chicken\" in item.get_extras() else 0.0\n        elif item.get_type() == FoodType.PIZZA:\n            return 0.40 if \"pepperoni\" in item.get_extras() else 0.0\n        else:\n            return 0.0\n\n\nclass KitchenStationRouter:\n    def station(self, item: FoodItem) -> str:\n        return {\n            FoodType.BURGER: \"Grill\",\n            FoodType.FRIES: \"Fryer\",\n            FoodType.PIZZA: \"Oven\",\n            FoodType.DRINK: \"Beverage\",\n            FoodType.SALAD: \"Cold Prep\",\n            FoodType.DESSERT: \"Dessert Bar\",\n        }[item.get_type()]\n\n\nclass InventoryManager:\n    def __init__(self):\n        self._stock: Dict[str, int] = {\n            \"bun\": 50, \"patty\": 50, \"potato\": 80,\n            \"dough\": 30, \"soda\": 100, \"greens\": 40, \"dessertBase\": 30\n        }\n\n    def reserve(self, item: FoodItem) -> bool:\n        if item.get_type() == FoodType.BURGER:\n            return self._take(\"bun\", 1) and self._take(\"patty\", 1)\n        elif item.get_type() == FoodType.FRIES:\n            return self._take(\"potato\", 2)\n        elif item.get_type() == FoodType.PIZZA:\n            return self._take(\"dough\", 1)\n        elif item.get_type() == FoodType.DRINK:\n            return self._take(\"soda\", 1)\n        elif item.get_type() == FoodType.SALAD:\n            return self._take(\"greens\", 1)\n        elif item.get_type() == FoodType.DESSERT:\n            return self._take(\"dessertBase\", 1)\n        return False\n\n    def _take(self, key: str, qty: int) -> bool:\n        have = self._stock.get(key, 0)\n        if have < qty: return False\n        self._stock[key] = have - qty\n        return True\n\n    def get_stock(self) -> Dict[str, int]:\n        return dict(self._stock)\n\n\nclass Chef:\n    def prepare(self, item: FoodItem):\n        actions = {\n            FoodType.BURGER: \"Chef grills patty and assembles burger\",\n            FoodType.FRIES: \"Chef drops fries in fryer\",\n            FoodType.PIZZA: \"Chef stretches dough and bakes pizza\",\n            FoodType.DRINK: \"Chef fills cup and lids drink\",\n            FoodType.SALAD: \"Chef chops and tosses salad\",\n            FoodType.DESSERT: \"Chef plates dessert\",\n        }\n        print(actions[item.get_type()])\n\n\nclass Waiter:\n    def take(self, order: Order, item: FoodItem):\n        print(\"Waiter records item:\", item.get_name())\n        order.add(item)\n\n    def serve(self, item: FoodItem):\n        actions = {\n            FoodType.BURGER: \"Waiter serves burger with napkins\",\n            FoodType.FRIES: \"Waiter serves fries with ketchup\",\n            FoodType.PIZZA: \"Waiter serves pizza with slicer\",\n            FoodType.DRINK: \"Waiter serves drink with straw\",\n            FoodType.SALAD: \"Waiter serves salad with dressing\",\n            FoodType.DESSERT: \"Waiter serves dessert with spoon\",\n        }\n        print(actions[item.get_type()])\n\n\nclass Cashier:\n    def __init__(self):\n        self._prices = PriceCalculator()\n        self._taxes = TaxCalculator()\n        self._promos = PromotionEngine()\n\n    def total(self, order: Order) -> float:\n        sum_ = 0.0\n        for item in order.items():\n            base = self._prices.price(item)\n            discount = self._promos.discount(item)\n            taxed = (base - discount) * (1.0 + self._taxes.tax_for(item))\n            sum_ += taxed\n        return round(sum_, 2)\n\n\nclass ReceiptPrinter:\n    def __init__(self):\n        self._prices = PriceCalculator()\n        self._taxes = TaxCalculator()\n        self._promos = PromotionEngine()\n        self._nutrition = NutritionCalculator()\n\n    def print(self, order: Order):\n        print(\"Customer:\", order.customer())\n        for item in order.items():\n            base = self._prices.price(item)\n            discount = self._promos.discount(item)\n            tax_rate = self._taxes.tax_for(item)\n            kcal = self._nutrition.calories(item)\n            print(f\"{item.get_name()} ({item.get_type().name} {item.get_size().name}) \"\n                  f\"base ${base} disc ${discount} tax {int(tax_rate*100)}% kcal {kcal}\")\n\n\n",
            "output": "import math\nfrom enum import Enum\nfrom typing import Dict, Set, List, Optional\n\n\nclass FoodType(Enum):\n    BURGER = 1\n    FRIES = 2\n    PIZZA = 3\n    DRINK = 4\n    SALAD = 5\n    DESSERT = 6\n\n\nclass Size(Enum):\n    SMALL = 1\n    MEDIUM = 2\n    LARGE = 3\n\n\nclass FoodItem:\n    def __init__(self, name: str, type_: FoodType, size: Size, extras: Optional[Set[str]]):\n        self._name = name\n        self._type = type_\n        self._size = size\n        self._extras: Set[str] = set() if extras is None else extras\n\n    def getName(self) -> str:\n        return self._name\n\n    def getType(self) -> FoodType:\n        return self._type\n\n    def getSize(self) -> Size:\n        return self._size\n\n    def getExtras(self) -> Set[str]:\n        return self._extras\n\n\nclass Order:\n    def __init__(self, customer: str):\n        self._customer = customer\n        self._items: List[FoodItem] = []\n\n    def add(self, item: FoodItem) -> None:\n        self._items.append(item)\n\n    def items(self) -> List[FoodItem]:\n        return self._items\n\n    def customer(self) -> str:\n        return self._customer\n\n\nclass FoodOps:\n    def type(self) -> FoodType:\n        raise NotImplementedError\n\n    def tax(self) -> float:\n        raise NotImplementedError\n\n    def discount(self, item: FoodItem) -> float:\n        raise NotImplementedError\n\n    def station(self) -> str:\n        raise NotImplementedError\n\n    def prepare(self) -> None:\n        raise NotImplementedError\n\n    def serve(self) -> None:\n        raise NotImplementedError\n\n    def reserve(self, inventory: \"InventoryManager\", item: FoodItem) -> bool:\n        raise NotImplementedError\n\n\nclass FoodOpsRegistry:\n    OPS: Dict[FoodType, FoodOps] = {}\n\n    @classmethod\n    def register(cls, ops: FoodOps) -> None:\n        cls.OPS[ops.type()] = ops\n\n    @classmethod\n    def of(cls, t: FoodType) -> FoodOps:\n        o = cls.OPS.get(t)\n        if o is None:\n            raise ValueError(\"Unknown type\")\n        return o\n\n\nclass BurgerOps(FoodOps):\n    def type(self) -> FoodType:\n        return FoodType.BURGER\n\n    def tax(self) -> float:\n        return 0.05\n\n    def discount(self, item: FoodItem) -> float:\n        return 0.50 if \"extra-cheese\" in item.getExtras() else 0.0\n\n    def station(self) -> str:\n        return \"Grill\"\n\n    def prepare(self) -> None:\n        print(\"Chef grills patty and assembles burger\")\n\n    def serve(self) -> None:\n        print(\"Waiter serves burger with napkins\")\n\n    def reserve(self, inventory: \"InventoryManager\", item: FoodItem) -> bool:\n        return inventory.consume(\"bun\", 1) and inventory.consume(\"patty\", 1)\n\n\nclass FriesOps(FoodOps):\n    def type(self) -> FoodType:\n        return FoodType.FRIES\n\n    def tax(self) -> float:\n        return 0.05\n\n    def discount(self, item: FoodItem) -> float:\n        return 0.20 if item.getSize() == Size.LARGE else 0.0\n\n    def station(self) -> str:\n        return \"Fryer\"\n\n    def prepare(self) -> None:\n        print(\"Chef drops fries in fryer\")\n\n    def serve(self) -> None:\n        print(\"Waiter serves fries with ketchup\")\n\n    def reserve(self, inventory: \"InventoryManager\", item: FoodItem) -> bool:\n        return inventory.consume(\"potato\", 2)\n\n\nclass PizzaOps(FoodOps):\n    def type(self) -> FoodType:\n        return FoodType.PIZZA\n\n    def tax(self) -> float:\n        return 0.06\n\n    def discount(self, item: FoodItem) -> float:\n        return 0.40 if \"pepperoni\" in item.getExtras() else 0.0\n\n    def station(self) -> str:\n        return \"Oven\"\n\n    def prepare(self) -> None:\n        print(\"Chef stretches dough and bakes pizza\")\n\n    def serve(self) -> None:\n        print(\"Waiter serves pizza with slicer\")\n\n    def reserve(self, inventory: \"InventoryManager\", item: FoodItem) -> bool:\n        return inventory.consume(\"dough\", 1)\n\n\nclass DrinkOps(FoodOps):\n    def type(self) -> FoodType:\n        return FoodType.DRINK\n\n    def tax(self) -> float:\n        return 0.10\n\n    def discount(self, item: FoodItem) -> float:\n        return 0.10 if \"no-ice\" in item.getExtras() else 0.0\n\n    def station(self) -> str:\n        return \"Beverage\"\n\n    def prepare(self) -> None:\n        print(\"Chef fills cup and lids drink\")\n\n    def serve(self) -> None:\n        print(\"Waiter serves drink with straw\")\n\n    def reserve(self, inventory: \"InventoryManager\", item: FoodItem) -> bool:\n        return inventory.consume(\"soda\", 1)\n\n\nclass SaladOps(FoodOps):\n    def type(self) -> FoodType:\n        return FoodType.SALAD\n\n    def tax(self) -> float:\n        return 0.05\n\n    def discount(self, item: FoodItem) -> float:\n        return 0.30 if \"chicken\" in item.getExtras() else 0.0\n\n    def station(self) -> str:\n        return \"Cold Prep\"\n\n    def prepare(self) -> None:\n        print(\"Chef chops and tosses salad\")\n\n    def serve(self) -> None:\n        print(\"Waiter serves salad with dressing\")\n\n    def reserve(self, inventory: \"InventoryManager\", item: FoodItem) -> bool:\n        return inventory.consume(\"greens\", 1)\n\n\nclass DessertOps(FoodOps):\n    def type(self) -> FoodType:\n        return FoodType.DESSERT\n\n    def tax(self) -> float:\n        return 0.08\n\n    def discount(self, item: FoodItem) -> float:\n        return 0.0\n\n    def station(self) -> str:\n        return \"Dessert Bar\"\n\n    def prepare(self) -> None:\n        print(\"Chef plates dessert\")\n\n    def serve(self) -> None:\n        print(\"Waiter serves dessert with spoon\")\n\n    def reserve(self, inventory: \"InventoryManager\", item: FoodItem) -> bool:\n        return inventory.consume(\"dessertBase\", 1)\n\n\nFoodOpsRegistry.register(BurgerOps())\nFoodOpsRegistry.register(FriesOps())\nFoodOpsRegistry.register(PizzaOps())\nFoodOpsRegistry.register(DrinkOps())\nFoodOpsRegistry.register(SaladOps())\nFoodOpsRegistry.register(DessertOps())\n\n\nclass PriceTable:\n    PRICES: Dict[FoodType, Dict[Size, float]] = {\n        FoodType.BURGER: {Size.SMALL: 5.49, Size.MEDIUM: 6.49, Size.LARGE: 7.49},\n        FoodType.FRIES: {Size.SMALL: 1.99, Size.MEDIUM: 2.49, Size.LARGE: 2.99},\n        FoodType.PIZZA: {Size.SMALL: 7.99, Size.MEDIUM: 9.99, Size.LARGE: 12.49},\n        FoodType.DRINK: {Size.SMALL: 1.29, Size.MEDIUM: 1.49, Size.LARGE: 1.79},\n        FoodType.SALAD: {Size.SMALL: 4.49, Size.MEDIUM: 5.49, Size.LARGE: 6.49},\n        FoodType.DESSERT: {Size.SMALL: 2.99, Size.MEDIUM: 3.49, Size.LARGE: 3.99},\n    }\n\n    @classmethod\n    def get(cls, item: FoodItem) -> float:\n        m = cls.PRICES.get(item.getType())\n        if m is None or item.getSize() not in m:\n            raise ValueError(\"Missing price\")\n        return m[item.getSize()]\n\n\nclass CalorieTable:\n    CALS: Dict[FoodType, Dict[Size, int]] = {\n        FoodType.BURGER: {Size.SMALL: 480, Size.MEDIUM: 650, Size.LARGE: 820},\n        FoodType.FRIES: {Size.SMALL: 220, Size.MEDIUM: 330, Size.LARGE: 440},\n        FoodType.PIZZA: {Size.SMALL: 700, Size.MEDIUM: 950, Size.LARGE: 1200},\n        FoodType.DRINK: {Size.SMALL: 110, Size.MEDIUM: 160, Size.LARGE: 210},\n        FoodType.SALAD: {Size.SMALL: 180, Size.MEDIUM: 260, Size.LARGE: 340},\n        FoodType.DESSERT: {Size.SMALL: 250, Size.MEDIUM: 320, Size.LARGE: 390},\n    }\n\n    @classmethod\n    def get(cls, item: FoodItem) -> int:\n        m = cls.CALS.get(item.getType())\n        if m is None or item.getSize() not in m:\n            return 0\n        return m[item.getSize()]\n\n\nclass PriceCalculator:\n    def price(self, item: FoodItem) -> float:\n        return PriceTable.get(item)\n\n\nclass TaxCalculator:\n    def taxFor(self, item: FoodItem) -> float:\n        return FoodOpsRegistry.of(item.getType()).tax()\n\n\nclass NutritionCalculator:\n    def calories(self, item: FoodItem) -> int:\n        return CalorieTable.get(item)\n\n\nclass PromotionEngine:\n    def discount(self, item: FoodItem) -> float:\n        return FoodOpsRegistry.of(item.getType()).discount(item)\n\n\nclass KitchenStationRouter:\n    def station(self, item: FoodItem) -> str:\n        return FoodOpsRegistry.of(item.getType()).station()\n\n\nclass InventoryManager:\n    def __init__(self):\n        self._stock: Dict[str, int] = {\n            \"bun\": 50,\n            \"patty\": 50,\n            \"potato\": 80,\n            \"dough\": 30,\n            \"soda\": 100,\n            \"greens\": 40,\n            \"dessertBase\": 30,\n        }\n\n    def reserve(self, item: FoodItem) -> bool:\n        return FoodOpsRegistry.of(item.getType()).reserve(self, item)\n\n    def consume(self, key: str, qty: int) -> bool:\n        return self._take(key, qty)\n\n    def _take(self, key: str, qty: int) -> bool:\n        have = self._stock.get(key, 0)\n        if have < qty:\n            return False\n        self._stock[key] = have - qty\n        return True\n\n    def getStock(self) -> Dict[str, int]:\n        return dict(self._stock)\n\n\nclass Chef:\n    def prepare(self, item: FoodItem) -> None:\n        FoodOpsRegistry.of(item.getType()).prepare()\n\n\nclass Waiter:\n    def take(self, order: Order, item: FoodItem) -> None:\n        print(\"Waiter records item: \" + item.getName())\n        order.add(item)\n\n    def serve(self, item: FoodItem) -> None:\n        FoodOpsRegistry.of(item.getType()).serve()\n\n\nclass Cashier:\n    def __init__(self):\n        self._prices = PriceCalculator()\n        self._taxes = TaxCalculator()\n        self._promos = PromotionEngine()\n\n    def total(self, order: Order) -> float:\n        sum_ = 0.0\n        for item in order.items():\n            base = self._prices.price(item)\n            discount = self._promos.discount(item)\n            taxed = (base - discount) * (1.0 + self._taxes.taxFor(item))\n            sum_ += taxed\n        return int(sum_ * 100.0 + 0.5) / 100.0\n\n\nclass ReceiptPrinter:\n    def __init__(self):\n        self._prices = PriceCalculator()\n        self._taxes = TaxCalculator()\n        self._promos = PromotionEngine()\n        self._nutrition = NutritionCalculator()\n\n    def print(self, order: Order) -> None:\n        print(\"Customer: \" + order.customer())\n        for item in order.items():\n            base = self._prices.price(item)\n            discount = self._promos.discount(item)\n            taxRate = self._taxes.taxFor(item)\n            kcal = self._nutrition.calories(item)\n            print(\n                f\"{item.getName()} ({item.getType().name} {item.getSize().name}) \"\n                f\"base ${base} disc ${discount} tax {int(taxRate*100)}% kcal {kcal}\"\n            )\n\n",
            "level": "MODERATE",
            "language": "PYTHON",
            "violation": "OCP"
        },
        {
            "input": "from enum import Enum\nfrom typing import List\n\n\nclass DeviceType(Enum):\n    LIGHT = 1\n    THERMOSTAT = 2\n    DOOR_LOCK = 3\n    CAMERA = 4\n    SPRINKLER = 5\n\n\nclass RoomType(Enum):\n    LIVING = 1\n    KITCHEN = 2\n    BEDROOM = 3\n    GARDEN = 4\n\n\nclass Mode(Enum):\n    ECO = 1\n    COMFORT = 2\n    AWAY = 3\n    NIGHT = 4\n\n\nclass SmartDevice:\n    def __init__(self, id_: str, type_: DeviceType):\n        self._id = id_\n        self._type = type_\n        self._mode = Mode.ECO\n        self._online = True\n\n    def getId(self): return self._id\n    def getType(self): return self._type\n    def getMode(self): return self._mode\n    def isOnline(self): return self._online\n    def setMode(self, m: Mode): self._mode = m\n    def setOnline(self, o: bool): self._online = o\n\n\nclass Room:\n    def __init__(self, name: str, type_: RoomType):\n        self._name = name\n        self._type = type_\n        self._devices: List[SmartDevice] = []\n\n    def add(self, d: SmartDevice): self._devices.append(d)\n    def getDevices(self): return self._devices\n    def getName(self): return self._name\n    def getType(self): return self._type\n\n\nclass ScheduleEntry:\n    def __init__(self, device: SmartDevice, cron: str, action: str):\n        self.device = device\n        self.cron = cron\n        self.action = action\n\n\nclass SmartHomeController:\n    def turnOn(self, d: SmartDevice):\n        if d.getType() == DeviceType.LIGHT: print(\"Light\", d.getId(), \"ON\")\n        elif d.getType() == DeviceType.THERMOSTAT: print(\"Thermostat\", d.getId(), \"heating\")\n        elif d.getType() == DeviceType.DOOR_LOCK: print(\"Lock\", d.getId(), \"stays locked\")\n        elif d.getType() == DeviceType.CAMERA: print(\"Camera\", d.getId(), \"recording\")\n        elif d.getType() == DeviceType.SPRINKLER: print(\"Sprinkler\", d.getId(), \"watering\")\n\n    def turnOff(self, d: SmartDevice):\n        if d.getType() == DeviceType.LIGHT: print(\"Light\", d.getId(), \"OFF\")\n        elif d.getType() == DeviceType.THERMOSTAT: print(\"Thermostat\", d.getId(), \"idle\")\n        elif d.getType() == DeviceType.DOOR_LOCK: print(\"Lock\", d.getId(), \"remains locked\")\n        elif d.getType() == DeviceType.CAMERA: print(\"Camera\", d.getId(), \"standby\")\n        elif d.getType() == DeviceType.SPRINKLER: print(\"Sprinkler\", d.getId(), \"stopped\")\n\n    def setMode(self, d: SmartDevice, m: Mode):\n        d.setMode(m)\n        print(d.getType().name.capitalize(), d.getId(), \"mode\", m.name)\n\n    def energyUsageKwh(self, d: SmartDevice, minutes: int) -> float:\n        if d.getType() == DeviceType.LIGHT: return 0.012 * minutes\n        elif d.getType() == DeviceType.THERMOSTAT: return 0.08 * minutes\n        elif d.getType() == DeviceType.DOOR_LOCK: return 0.0002 * minutes\n        elif d.getType() == DeviceType.CAMERA: return 0.01 * minutes\n        elif d.getType() == DeviceType.SPRINKLER: return 0.03 * minutes\n        return 0.0\n\n    def deviceIcon(self, d: SmartDevice) -> str:\n        return {\n            DeviceType.LIGHT: \"ð¡\",\n            DeviceType.THERMOSTAT: \"ð¡ï¸\",\n            DeviceType.DOOR_LOCK: \"ð\",\n            DeviceType.CAMERA: \"ð·\",\n            DeviceType.SPRINKLER: \"ð§\"\n        }.get(d.getType(), \"â\")\n\n    def firmwareUpdateSteps(self, d: SmartDevice) -> List[str]:\n        if d.getType() == DeviceType.LIGHT: return [\"Ping\", \"Push FW\", \"Reboot\"]\n        elif d.getType() == DeviceType.THERMOSTAT: return [\"Ping\", \"Backup Profile\", \"Push FW\", \"Recalibrate\"]\n        elif d.getType() == DeviceType.DOOR_LOCK: return [\"Ping\", \"Secure Channel\", \"Push FW\", \"Reauth\"]\n        elif d.getType() == DeviceType.CAMERA: return [\"Ping\", \"Push FW\", \"Restart Stream\"]\n        elif d.getType() == DeviceType.SPRINKLER: return [\"Ping\", \"Push FW\", \"Valve Test\"]\n        return []\n\n\nclass NotificationService:\n    def notifyOwner(self, d: SmartDevice, event: str):\n        print(\"Notify:\", d.getType().name.capitalize(), d.getId(), \"->\", event)\n\n\nclass DiagnosticsService:\n    def health(self, d: SmartDevice) -> str:\n        if d.getType() == DeviceType.LIGHT: return \"OK\" if d.isOnline() else \"Bulb Offline\"\n        elif d.getType() == DeviceType.THERMOSTAT: return \"OK\" if d.isOnline() else \"Sensor Offline\"\n        elif d.getType() == DeviceType.DOOR_LOCK: return \"OK\" if d.isOnline() else \"Battery Low\"\n        elif d.getType() == DeviceType.CAMERA: return \"OK\" if d.isOnline() else \"Stream Error\"\n        elif d.getType() == DeviceType.SPRINKLER: return \"OK\" if d.isOnline() else \"Valve Error\"\n        return \"Unknown\"\n\n    def maintenanceCostYearly(self, d: SmartDevice) -> float:\n        return {\n            DeviceType.LIGHT: 5.0,\n            DeviceType.THERMOSTAT: 20.0,\n            DeviceType.DOOR_LOCK: 12.0,\n            DeviceType.CAMERA: 18.0,\n            DeviceType.SPRINKLER: 15.0\n        }.get(d.getType(), 0.0)\n\n\nclass SecurityPolicy:\n    def actionAllowed(self, d: SmartDevice, action: str, userHome: bool) -> bool:\n        if d.getType() == DeviceType.DOOR_LOCK:\n            return action == \"unlock\" and userHome or action != \"unlock\"\n        elif d.getType() == DeviceType.CAMERA:\n            return True\n        elif d.getType() in [DeviceType.THERMOSTAT, DeviceType.LIGHT]:\n            return True\n        elif d.getType() == DeviceType.SPRINKLER:\n            return not (action == \"on\" and userHome)\n        return False\n\n\nclass VoiceCommandProcessor:\n    def __init__(self): self._ctl = SmartHomeController()\n    def handle(self, phrase: str, d: SmartDevice):\n        if d.getType() == DeviceType.LIGHT:\n            if phrase.lower() == \"lights on\": self._ctl.turnOn(d)\n            elif phrase.lower() == \"lights off\": self._ctl.turnOff(d)\n            elif phrase.lower() == \"night mode\": self._ctl.setMode(d, Mode.NIGHT)\n        elif d.getType() == DeviceType.THERMOSTAT:\n            if phrase.lower() == \"heat on\": self._ctl.turnOn(d)\n            elif phrase.lower() == \"eco mode\": self._ctl.setMode(d, Mode.ECO)\n        elif d.getType() == DeviceType.DOOR_LOCK:\n            if phrase.lower() == \"lock door\": self._ctl.turnOn(d)\n        elif d.getType() == DeviceType.CAMERA:\n            if phrase.lower() == \"start recording\": self._ctl.turnOn(d)\n        elif d.getType() == DeviceType.SPRINKLER:\n            if phrase.lower() == \"water garden\": self._ctl.turnOn(d)\n\n\nclass SceneManager:\n    def __init__(self): self._ctl = SmartHomeController()\n    def applyScene(self, name: str, devices: List[SmartDevice]):\n        for d in devices:\n            if name == \"Evening\":\n                if d.getType() == DeviceType.LIGHT: self._ctl.turnOn(d); self._ctl.setMode(d, Mode.COMFORT)\n                elif d.getType() == DeviceType.THERMOSTAT: self._ctl.setMode(d, Mode.COMFORT)\n                elif d.getType() == DeviceType.CAMERA: self._ctl.turnOn(d)\n                elif d.getType() == DeviceType.DOOR_LOCK: self._ctl.turnOn(d)\n                elif d.getType() == DeviceType.SPRINKLER: self._ctl.turnOff(d)\n            elif name == \"Away\":\n                if d.getType() == DeviceType.LIGHT: self._ctl.turnOff(d)\n                elif d.getType() == DeviceType.THERMOSTAT: self._ctl.setMode(d, Mode.AWAY)\n                elif d.getType() == DeviceType.CAMERA: self._ctl.turnOn(d)\n                elif d.getType() == DeviceType.DOOR_LOCK: self._ctl.turnOn(d)\n                elif d.getType() == DeviceType.SPRINKLER: self._ctl.turnOff(d)\n\n\nclass EnergyEstimator:\n    def __init__(self): self._ctl = SmartHomeController()\n    def estimateRoom(self, room: Room, minutes: int) -> float:\n        return sum(self._ctl.energyUsageKwh(d, minutes) for d in room.getDevices())\n\n",
            "output": "from enum import Enum\nfrom typing import List, Dict\n\nclass DeviceType(Enum):\n    LIGHT = 1\n    THERMOSTAT = 2\n    DOOR_LOCK = 3\n    CAMERA = 4\n    SPRINKLER = 5\n\nclass RoomType(Enum):\n    LIVING = 1\n    KITCHEN = 2\n    BEDROOM = 3\n    GARDEN = 4\n\nclass Mode(Enum):\n    ECO = 1\n    COMFORT = 2\n    AWAY = 3\n    NIGHT = 4\n\nclass SmartDevice:\n    def __init__(self, id: str, type: DeviceType):\n        self._id = id\n        self._type = type\n        self._mode = Mode.ECO\n        self._online = True\n    def getId(self): return self._id\n    def getType(self): return self._type\n    def getMode(self): return self._mode\n    def isOnline(self): return self._online\n    def setMode(self, m: Mode): self._mode = m\n    def setOnline(self, o: bool): self._online = o\n\nclass Room:\n    def __init__(self, name: str, type: RoomType):\n        self._name = name\n        self._type = type\n        self._devices: List[SmartDevice] = []\n    def add(self, d: SmartDevice): self._devices.append(d)\n    def getDevices(self): return self._devices\n    def getName(self): return self._name\n    def getType(self): return self._type\n\nclass ScheduleEntry:\n    def __init__(self, device: SmartDevice, cron: str, action: str):\n        self.device = device\n        self.cron = cron\n        self.action = action\n\nclass DeviceOps:\n    def turnOn(self, d: SmartDevice): ...\n    def turnOff(self, d: SmartDevice): ...\n    def setMode(self, d: SmartDevice, m: Mode): ...\n    def energyUsageKwh(self, minutes: int) -> float: ...\n    def icon(self) -> str: ...\n    def firmwareUpdateSteps(self) -> List[str]: ...\n    def notifyOwner(self, d: SmartDevice, event: str): ...\n    def health(self, d: SmartDevice) -> str: ...\n    def maintenanceCostYearly(self) -> float: ...\n    def actionAllowed(self, action: str, userHome: bool) -> bool: ...\n    def handleVoice(self, phrase: str, ctl, d: SmartDevice): ...\n    def applyScene(self, scene: str, ctl, d: SmartDevice): ...\n\nclass DeviceOpsRegistry:\n    _map: Dict[DeviceType, DeviceOps] = {}\n    @classmethod\n    def get(cls, t: DeviceType) -> DeviceOps:\n        return cls._map.get(t)\n    @classmethod\n    def register(cls, t: DeviceType, ops: DeviceOps):\n        cls._map[t] = ops\n\nclass LightOps(DeviceOps):\n    def turnOn(self, d: SmartDevice): print(\"Light \" + d.getId() + \" ON\")\n    def turnOff(self, d: SmartDevice): print(\"Light \" + d.getId() + \" OFF\")\n    def setMode(self, d: SmartDevice, m: Mode): d.setMode(m); print(\"Light \" + d.getId() + \" mode \" + str(m.name))\n    def energyUsageKwh(self, minutes: int) -> float: return 0.012 * minutes\n    def icon(self) -> str: return \"ð¡\"\n    def firmwareUpdateSteps(self) -> List[str]: return [\"Ping\", \"Push FW\", \"Reboot\"]\n    def notifyOwner(self, d: SmartDevice, event: str): print(\"Notify: Light \" + d.getId() + \" -> \" + event)\n    def health(self, d: SmartDevice) -> str: return \"OK\" if d.isOnline() else \"Bulb Offline\"\n    def maintenanceCostYearly(self) -> float: return 5.0\n    def actionAllowed(self, action: str, userHome: bool) -> bool: return True\n    def handleVoice(self, phrase: str, ctl, d: SmartDevice):\n        p = phrase.lower()\n        if p == \"lights on\": ctl.turnOn(d)\n        elif p == \"lights off\": ctl.turnOff(d)\n        elif p == \"night mode\": ctl.setMode(d, Mode.NIGHT)\n    def applyScene(self, scene: str, ctl, d: SmartDevice):\n        if scene == \"Evening\": ctl.turnOn(d); ctl.setMode(d, Mode.COMFORT)\n        elif scene == \"Away\": ctl.turnOff(d)\n\nclass ThermostatOps(DeviceOps):\n    def turnOn(self, d: SmartDevice): print(\"Thermostat \" + d.getId() + \" heating\")\n    def turnOff(self, d: SmartDevice): print(\"Thermostat \" + d.getId() + \" idle\")\n    def setMode(self, d: SmartDevice, m: Mode): d.setMode(m); print(\"Thermostat \" + d.getId() + \" mode \" + str(m.name))\n    def energyUsageKwh(self, minutes: int) -> float: return 0.08 * minutes\n    def icon(self) -> str: return \"ð¡ï¸\"\n    def firmwareUpdateSteps(self) -> List[str]: return [\"Ping\", \"Backup Profile\", \"Push FW\", \"Recalibrate\"]\n    def notifyOwner(self, d: SmartDevice, event: str): print(\"Notify: Thermostat \" + d.getId() + \" -> \" + event)\n    def health(self, d: SmartDevice) -> str: return \"OK\" if d.isOnline() else \"Sensor Offline\"\n    def maintenanceCostYearly(self) -> float: return 20.0\n    def actionAllowed(self, action: str, userHome: bool) -> bool: return True\n    def handleVoice(self, phrase: str, ctl, d: SmartDevice):\n        p = phrase.lower()\n        if p == \"heat on\": ctl.turnOn(d)\n        elif p == \"eco mode\": ctl.setMode(d, Mode.ECO)\n    def applyScene(self, scene: str, ctl, d: SmartDevice):\n        if scene == \"Evening\": ctl.setMode(d, Mode.COMFORT)\n        elif scene == \"Away\": ctl.setMode(d, Mode.AWAY)\n\nclass DoorLockOps(DeviceOps):\n    def turnOn(self, d: SmartDevice): print(\"Lock \" + d.getId() + \" stays locked\")\n    def turnOff(self, d: SmartDevice): print(\"Lock \" + d.getId() + \" remains locked\")\n    def setMode(self, d: SmartDevice, m: Mode): d.setMode(m); print(\"Lock \" + d.getId() + \" mode \" + str(m.name))\n    def energyUsageKwh(self, minutes: int) -> float: return 0.0002 * minutes\n    def icon(self) -> str: return \"ð\"\n    def firmwareUpdateSteps(self) -> List[str]: return [\"Ping\", \"Secure Channel\", \"Push FW\", \"Reauth\"]\n    def notifyOwner(self, d: SmartDevice, event: str): print(\"Notify: Lock \" + d.getId() + \" -> \" + event)\n    def health(self, d: SmartDevice) -> str: return \"OK\" if d.isOnline() else \"Battery Low\"\n    def maintenanceCostYearly(self) -> float: return 12.0\n    def actionAllowed(self, action: str, userHome: bool) -> bool: return (userHome if action == \"unlock\" else True)\n    def handleVoice(self, phrase: str, ctl, d: SmartDevice):\n        if phrase.lower() == \"lock door\": ctl.turnOn(d)\n    def applyScene(self, scene: str, ctl, d: SmartDevice):\n        if scene == \"Evening\" or scene == \"Away\": ctl.turnOn(d)\n\nclass CameraOps(DeviceOps):\n    def turnOn(self, d: SmartDevice): print(\"Camera \" + d.getId() + \" recording\")\n    def turnOff(self, d: SmartDevice): print(\"Camera \" + d.getId() + \" standby\")\n    def setMode(self, d: SmartDevice, m: Mode): d.setMode(m); print(\"Camera \" + d.getId() + \" mode \" + str(m.name))\n    def energyUsageKwh(self, minutes: int) -> float: return 0.01 * minutes\n    def icon(self) -> str: return \"ð·\"\n    def firmwareUpdateSteps(self) -> List[str]: return [\"Ping\", \"Push FW\", \"Restart Stream\"]\n    def notifyOwner(self, d: SmartDevice, event: str): print(\"Notify: Camera \" + d.getId() + \" -> \" + event)\n    def health(self, d: SmartDevice) -> str: return \"OK\" if d.isOnline() else \"Stream Error\"\n    def maintenanceCostYearly(self) -> float: return 18.0\n    def actionAllowed(self, action: str, userHome: bool) -> bool: return True\n    def handleVoice(self, phrase: str, ctl, d: SmartDevice):\n        if phrase.lower() == \"start recording\": ctl.turnOn(d)\n    def applyScene(self, scene: str, ctl, d: SmartDevice):\n        if scene == \"Evening\" or scene == \"Away\": ctl.turnOn(d)\n\nclass SprinklerOps(DeviceOps):\n    def turnOn(self, d: SmartDevice): print(\"Sprinkler \" + d.getId() + \" watering\")\n    def turnOff(self, d: SmartDevice): print(\"Sprinkler \" + d.getId() + \" stopped\")\n    def setMode(self, d: SmartDevice, m: Mode): d.setMode(m); print(\"Sprinkler \" + d.getId() + \" mode \" + str(m.name))\n    def energyUsageKwh(self, minutes: int) -> float: return 0.03 * minutes\n    def icon(self) -> str: return \"ð§\"\n    def firmwareUpdateSteps(self) -> List[str]: return [\"Ping\", \"Push FW\", \"Valve Test\"]\n    def notifyOwner(self, d: SmartDevice, event: str): print(\"Notify: Sprinkler \" + d.getId() + \" -> \" + event)\n    def health(self, d: SmartDevice) -> str: return \"OK\" if d.isOnline() else \"Valve Error\"\n    def maintenanceCostYearly(self) -> float: return 15.0\n    def actionAllowed(self, action: str, userHome: bool) -> bool: return (action != \"on\") or (not userHome)\n    def handleVoice(self, phrase: str, ctl, d: SmartDevice):\n        if phrase.lower() == \"water garden\": ctl.turnOn(d)\n    def applyScene(self, scene: str, ctl, d: SmartDevice):\n        if scene == \"Evening\" or scene == \"Away\": ctl.turnOff(d)\n\nclass SmartHomeController:\n    def turnOn(self, d: SmartDevice): DeviceOpsRegistry.get(d.getType()).turnOn(d)\n    def turnOff(self, d: SmartDevice): DeviceOpsRegistry.get(d.getType()).turnOff(d)\n    def setMode(self, d: SmartDevice, m: Mode): DeviceOpsRegistry.get(d.getType()).setMode(d, m)\n    def energyUsageKwh(self, d: SmartDevice, minutes: int) -> float: return DeviceOpsRegistry.get(d.getType()).energyUsageKwh(minutes)\n    def deviceIcon(self, d: SmartDevice) -> str: return DeviceOpsRegistry.get(d.getType()).icon()\n    def firmwareUpdateSteps(self, d: SmartDevice) -> List[str]: return DeviceOpsRegistry.get(d.getType()).firmwareUpdateSteps()\n\nclass NotificationService:\n    def notifyOwner(self, d: SmartDevice, event: str): DeviceOpsRegistry.get(d.getType()).notifyOwner(d, event)\n\nclass DiagnosticsService:\n    def health(self, d: SmartDevice) -> str: return DeviceOpsRegistry.get(d.getType()).health(d)\n    def maintenanceCostYearly(self, d: SmartDevice) -> float: return DeviceOpsRegistry.get(d.getType()).maintenanceCostYearly()\n\nclass SecurityPolicy:\n    def actionAllowed(self, d: SmartDevice, action: str, userHome: bool) -> bool:\n        return DeviceOpsRegistry.get(d.getType()).actionAllowed(action, userHome)\n\nclass VoiceCommandProcessor:\n    def __init__(self):\n        self._ctl = SmartHomeController()\n    def handle(self, phrase: str, d: SmartDevice):\n        DeviceOpsRegistry.get(d.getType()).handleVoice(phrase, self._ctl, d)\n\nclass SceneManager:\n    def __init__(self):\n        self._ctl = SmartHomeController()\n    def applyScene(self, name: str, devices: List[SmartDevice]):\n        for d in devices:\n            DeviceOpsRegistry.get(d.getType()).applyScene(name, self._ctl, d)\n\nclass EnergyEstimator:\n    def __init__(self):\n        self._ctl = SmartHomeController()\n    def estimateRoom(self, room: Room, minutes: int) -> float:\n        sum_ = 0.0\n        for d in room.getDevices():\n            sum_ += self._ctl.energyUsageKwh(d, minutes)\n        return sum_\n\n",
            "level": "MODERATE",
            "language": "PYTHON",
            "violation": "OCP"
        }
    ]
}