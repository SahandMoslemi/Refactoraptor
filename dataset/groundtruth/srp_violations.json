{
  "code_examples": [
    {
      "input": "public class User {\n    private String name;\n    private String email;\n    \n    public User(String name, String email) {\n        this.name = name;\n        this.email = email;\n    }\n    \n    public void saveToDatabase() {\n        System.out.println(\"Saving user \" + name + \" to database\");\n    }\n    \n    public void sendWelcomeEmail() {\n        System.out.println(\"Sending welcome email to \" + email);\n    }\n}",
      "output": "public class User {\n    private String name;\n    private String email;\n    \n    public User(String name, String email) {\n        this.name = name;\n        this.email = email;\n    }\n    \n    public String getName() {\n        return name;\n    }\n    \n    public String getEmail() {\n        return email;\n    }\n}\n\nclass UserRepository {\n    public void save(User user) {\n        System.out.println(\"Saving user \" + user.getName() + \" to database\");\n    }\n}\n\nclass EmailService {\n    public void sendWelcomeEmail(User user) {\n        System.out.println(\"Sending welcome email to \" + user.getEmail());\n    }\n}",
      "level": "EASY",
      "language": "JAVA",
      "violation": "SRP",
      "description": "User database email operations"
    },
    {
      "input": "public class Employee {\n    private String name;\n    private double baseSalary;\n    private int yearsOfService;\n    \n    public Employee(String name, double baseSalary, int yearsOfService) {\n        this.name = name;\n        this.baseSalary = baseSalary;\n        this.yearsOfService = yearsOfService;\n    }\n    \n    public double calculateSalary() {\n        return baseSalary + (yearsOfService * 1000);\n    }\n    \n    public void printPaySlip() {\n        System.out.println(\"Pay slip for \" + name + \": $\" + calculateSalary());\n    }\n}",
      "output": "public class Employee {\n    private String name;\n    private double baseSalary;\n    private int yearsOfService;\n    \n    public Employee(String name, double baseSalary, int yearsOfService) {\n        this.name = name;\n        this.baseSalary = baseSalary;\n        this.yearsOfService = yearsOfService;\n    }\n    \n    public String getName() {\n        return name;\n    }\n    \n    public double getBaseSalary() {\n        return baseSalary;\n    }\n    \n    public int getYearsOfService() {\n        return yearsOfService;\n    }\n}\n\nclass SalaryCalculator {\n    public double calculate(Employee employee) {\n        return employee.getBaseSalary() + (employee.getYearsOfService() * 1000);\n    }\n}\n\nclass PaySlipPrinter {\n    private SalaryCalculator calculator;\n    \n    public PaySlipPrinter(SalaryCalculator calculator) {\n        this.calculator = calculator;\n    }\n    \n    public void print(Employee employee) {\n        System.out.println(\"Pay slip for \" + employee.getName() + \": $\" + calculator.calculate(employee));\n    }\n}",
      "level": "EASY",
      "language": "JAVA",
      "violation": "SRP",
      "description": "Employee salary payslip system"
    },
    {
      "input": "public class Book {\n    private String title;\n    private String author;\n    private String content;\n    \n    public Book(String title, String author, String content) {\n        this.title = title;\n        this.author = author;\n        this.content = content;\n    }\n    \n    public void printBook() {\n        System.out.println(\"Title: \" + title);\n        System.out.println(\"Author: \" + author);\n        System.out.println(\"Content: \" + content);\n    }\n    \n    public void saveToFile(String filename) {\n        System.out.println(\"Saving book to \" + filename);\n    }\n}",
      "output": "public class Book {\n    private String title;\n    private String author;\n    private String content;\n    \n    public Book(String title, String author, String content) {\n        this.title = title;\n        this.author = author;\n        this.content = content;\n    }\n    \n    public String getTitle() {\n        return title;\n    }\n    \n    public String getAuthor() {\n        return author;\n    }\n    \n    public String getContent() {\n        return content;\n    }\n}\n\nclass BookPrinter {\n    public void print(Book book) {\n        System.out.println(\"Title: \" + book.getTitle());\n        System.out.println(\"Author: \" + book.getAuthor());\n        System.out.println(\"Content: \" + book.getContent());\n    }\n}\n\nclass BookFileSaver {\n    public void saveToFile(Book book, String filename) {\n        System.out.println(\"Saving book to \" + filename);\n    }\n}",
      "level": "EASY",
      "language": "JAVA",
      "violation": "SRP",
      "description": "Book printing file saving"
    },
      {
        "input": "public class Product {\n    private String name;\n    private double price;\n    \n    public Product(String name, double price) {\n        this.name = name;\n        this.price = price;\n    }\n    \n    public double applyDiscount(double percentage) {\n        return price * (1 - percentage / 100);\n    }\n    \n    public void displayProduct() {\n        System.out.println(\"Product: \" + name + \", Price: $\" + price);\n    }\n}",
        "output": "public class Product {\n    private String name;\n    private double price;\n    \n    public Product(String name, double price) {\n        this.name = name;\n        this.price = price;\n    }\n    \n    public String getName() {\n        return name;\n    }\n    \n    public double getPrice() {\n        return price;\n    }\n}\n\nclass DiscountCalculator {\n    public double applyDiscount(Product product, double percentage) {\n        return product.getPrice() * (1 - percentage / 100);\n    }\n}\n\nclass ProductDisplay {\n    public void display(Product product) {\n        System.out.println(\"Product: \" + product.getName() + \", Price: $\" + product.getPrice());\n    }\n}",
        "level": "EASY",
        "language": "JAVA",
        "violation": "SRP",
        "description": "Product discount display system"
      },
    {
      "input": "public class ReportGenerator {\n    private DataSource dataSource;\n    private EmailService emailService;\n    \n    public ReportGenerator(DataSource dataSource, EmailService emailService) {\n        this.dataSource = dataSource;\n        this.emailService = emailService;\n    }\n    \n    public void generateAndSendMonthlyReport(String month, String recipientEmail) {\n        List<SalesData> salesData = dataSource.getSalesDataForMonth(month);\n        \n        StringBuilder report = new StringBuilder();\n        report.append(\"Monthly Sales Report - \" + month + \"\\n\");\n        report.append(\"================================\\n\\n\");\n        \n        double totalSales = 0;\n        Map<String, Double> productSales = new HashMap<>();\n        \n        for (SalesData data : salesData) {\n            totalSales += data.getAmount();\n            productSales.put(data.getProductName(), \n                productSales.getOrDefault(data.getProductName(), 0.0) + data.getAmount());\n        }\n        \n        report.append(\"Total Sales: $\" + String.format(\"%.2f\", totalSales) + \"\\n\\n\");\n        report.append(\"Sales by Product:\\n\");\n        report.append(\"-----------------\\n\");\n        \n        for (Map.Entry<String, Double> entry : productSales.entrySet()) {\n            report.append(entry.getKey() + \": $\" + String.format(\"%.2f\", entry.getValue()) + \"\\n\");\n        }\n        \n        report.append(\"\\nTop Performing Products:\\n\");\n        report.append(\"------------------------\\n\");\n        \n        productSales.entrySet().stream()\n            .sorted(Map.Entry.<String, Double>comparingByValue().reversed())\n            .limit(5)\n            .forEach(entry -> report.append(entry.getKey() + \": $\" + \n                String.format(\"%.2f\", entry.getValue()) + \"\\n\"));\n        \n        String reportContent = report.toString();\n        \n        String subject = \"Monthly Sales Report - \" + month;\n        String body = \"Please find attached the monthly sales report.\\n\\n\" + reportContent;\n        \n        emailService.sendEmail(recipientEmail, subject, body);\n        \n        System.out.println(\"Report sent successfully to \" + recipientEmail);\n    }\n}\n\nclass SalesData {\n    private String productName;\n    private double amount;\n    private Date date;\n    \n    public SalesData(String productName, double amount, Date date) {\n        this.productName = productName;\n        this.amount = amount;\n        this.date = date;\n    }\n    \n    public String getProductName() { return productName; }\n    public double getAmount() { return amount; }\n    public Date getDate() { return date; }\n}\n\ninterface DataSource {\n    List<SalesData> getSalesDataForMonth(String month);\n}\n\ninterface EmailService {\n    void sendEmail(String to, String subject, String body);\n}",
      "output": "public class ReportGenerator {\n    private DataSource dataSource;\n    \n    public ReportGenerator(DataSource dataSource) {\n        this.dataSource = dataSource;\n    }\n    \n    public String generateMonthlyReport(String month) {\n        List<SalesData> salesData = dataSource.getSalesDataForMonth(month);\n        \n        StringBuilder report = new StringBuilder();\n        report.append(\"Monthly Sales Report - \" + month + \"\\n\");\n        report.append(\"================================\\n\\n\");\n        \n        double totalSales = 0;\n        Map<String, Double> productSales = new HashMap<>();\n        \n        for (SalesData data : salesData) {\n            totalSales += data.getAmount();\n            productSales.put(data.getProductName(), \n                productSales.getOrDefault(data.getProductName(), 0.0) + data.getAmount());\n        }\n        \n        report.append(\"Total Sales: $\" + String.format(\"%.2f\", totalSales) + \"\\n\\n\");\n        report.append(\"Sales by Product:\\n\");\n        report.append(\"-----------------\\n\");\n        \n        for (Map.Entry<String, Double> entry : productSales.entrySet()) {\n            report.append(entry.getKey() + \": $\" + String.format(\"%.2f\", entry.getValue()) + \"\\n\");\n        }\n        \n        report.append(\"\\nTop Performing Products:\\n\");\n        report.append(\"------------------------\\n\");\n        \n        productSales.entrySet().stream()\n            .sorted(Map.Entry.<String, Double>comparingByValue().reversed())\n            .limit(5)\n            .forEach(entry -> report.append(entry.getKey() + \": $\" + \n                String.format(\"%.2f\", entry.getValue()) + \"\\n\"));\n        \n        return report.toString();\n    }\n}\n\nclass ReportDeliveryService {\n    private EmailService emailService;\n    \n    public ReportDeliveryService(EmailService emailService) {\n        this.emailService = emailService;\n    }\n    \n    public void sendReport(String reportContent, String month, String recipientEmail) {\n        String subject = \"Monthly Sales Report - \" + month;\n        String body = \"Please find attached the monthly sales report.\\n\\n\" + reportContent;\n        \n        emailService.sendEmail(recipientEmail, subject, body);\n        \n        System.out.println(\"Report sent successfully to \" + recipientEmail);\n    }\n}\n\nclass SalesData {\n    private String productName;\n    private double amount;\n    private Date date;\n    \n    public SalesData(String productName, double amount, Date date) {\n        this.productName = productName;\n        this.amount = amount;\n        this.date = date;\n    }\n    \n    public String getProductName() { return productName; }\n    public double getAmount() { return amount; }\n    public Date getDate() { return date; }\n}\n\ninterface DataSource {\n    List<SalesData> getSalesDataForMonth(String month);\n}\n\ninterface EmailService {\n    void sendEmail(String to, String subject, String body);\n}",
      "level": "MODERATE",
      "language": "JAVA",
      "violation": "SRP",
       "description": "Sales report generation delivery"
    },
    {
      "input": "public class UserManager {\n    private Map<String, User> users = new HashMap<>();\n    private Map<String, String> sessions = new HashMap<>();\n    private SecureRandom random = new SecureRandom();\n    \n    public void createUser(String username, String password, String email) {\n        if (users.containsKey(username)) {\n            throw new IllegalArgumentException(\"Username already exists\");\n        }\n        \n        if (!isValidEmail(email)) {\n            throw new IllegalArgumentException(\"Invalid email format\");\n        }\n        \n        if (password.length() < 8) {\n            throw new IllegalArgumentException(\"Password must be at least 8 characters\");\n        }\n        \n        String hashedPassword = hashPassword(password);\n        User user = new User(username, hashedPassword, email, new Date());\n        users.put(username, user);\n        \n        System.out.println(\"User created successfully: \" + username);\n    }\n    \n    public String login(String username, String password) {\n        User user = users.get(username);\n        if (user == null) {\n            throw new IllegalArgumentException(\"Invalid username or password\");\n        }\n        \n        if (!verifyPassword(password, user.getPasswordHash())) {\n            throw new IllegalArgumentException(\"Invalid username or password\");\n        }\n        \n        String sessionToken = generateSessionToken();\n        sessions.put(sessionToken, username);\n        \n        user.setLastLogin(new Date());\n        \n        System.out.println(\"User logged in: \" + username);\n        return sessionToken;\n    }\n    \n    public void logout(String sessionToken) {\n        String username = sessions.remove(sessionToken);\n        if (username != null) {\n            System.out.println(\"User logged out: \" + username);\n        }\n    }\n    \n    public boolean isLoggedIn(String sessionToken) {\n        return sessions.containsKey(sessionToken);\n    }\n    \n    public User getUserBySession(String sessionToken) {\n        String username = sessions.get(sessionToken);\n        if (username == null) {\n            return null;\n        }\n        return users.get(username);\n    }\n    \n    private boolean isValidEmail(String email) {\n        return email.matches(\"^[A-Za-z0-9+_.-]+@(.+)$\");\n    }\n    \n    private String hashPassword(String password) {\n        return Base64.getEncoder().encodeToString(password.getBytes());\n    }\n    \n    private boolean verifyPassword(String password, String hash) {\n        return hashPassword(password).equals(hash);\n    }\n    \n    private String generateSessionToken() {\n        byte[] bytes = new byte[32];\n        random.nextBytes(bytes);\n        return Base64.getEncoder().encodeToString(bytes);\n    }\n    \n    public void updateUserEmail(String username, String newEmail) {\n        User user = users.get(username);\n        if (user == null) {\n            throw new IllegalArgumentException(\"User not found\");\n        }\n        \n        if (!isValidEmail(newEmail)) {\n            throw new IllegalArgumentException(\"Invalid email format\");\n        }\n        \n        user.setEmail(newEmail);\n        System.out.println(\"Email updated for user: \" + username);\n    }\n    \n    public List<User> getAllUsers() {\n        return new ArrayList<>(users.values());\n    }\n}\n\nclass User {\n    private String username;\n    private String passwordHash;\n    private String email;\n    private Date createdAt;\n    private Date lastLogin;\n    \n    public User(String username, String passwordHash, String email, Date createdAt) {\n        this.username = username;\n        this.passwordHash = passwordHash;\n        this.email = email;\n        this.createdAt = createdAt;\n    }\n    \n    public String getUsername() { return username; }\n    public String getPasswordHash() { return passwordHash; }\n    public String getEmail() { return email; }\n    public void setEmail(String email) { this.email = email; }\n    public Date getCreatedAt() { return createdAt; }\n    public Date getLastLogin() { return lastLogin; }\n    public void setLastLogin(Date lastLogin) { this.lastLogin = lastLogin; }\n}",
      "output": "public class UserManager {\n    private Map<String, User> users = new HashMap<>();\n    private UserValidator validator = new UserValidator();\n    \n    public void createUser(String username, String password, String email) {\n        if (users.containsKey(username)) {\n            throw new IllegalArgumentException(\"Username already exists\");\n        }\n        \n        validator.validateUserData(username, password, email);\n        \n        String hashedPassword = PasswordUtil.hashPassword(password);\n        User user = new User(username, hashedPassword, email, new Date());\n        users.put(username, user);\n        \n        System.out.println(\"User created successfully: \" + username);\n    }\n    \n    public void updateUserEmail(String username, String newEmail) {\n        User user = users.get(username);\n        if (user == null) {\n            throw new IllegalArgumentException(\"User not found\");\n        }\n        \n        validator.validateEmail(newEmail);\n        \n        user.setEmail(newEmail);\n        System.out.println(\"Email updated for user: \" + username);\n    }\n    \n    public User findByUsername(String username) {\n        return users.get(username);\n    }\n    \n    public List<User> getAllUsers() {\n        return new ArrayList<>(users.values());\n    }\n}\n\nclass AuthenticationService {\n    private Map<String, String> sessions = new HashMap<>();\n    private SecureRandom random = new SecureRandom();\n    private UserManager userManager;\n    \n    public AuthenticationService(UserManager userManager) {\n        this.userManager = userManager;\n    }\n    \n    public String login(String username, String password) {\n        User user = userManager.findByUsername(username);\n        if (user == null) {\n            throw new IllegalArgumentException(\"Invalid username or password\");\n        }\n        \n        if (!PasswordUtil.verifyPassword(password, user.getPasswordHash())) {\n            throw new IllegalArgumentException(\"Invalid username or password\");\n        }\n        \n        String sessionToken = generateSessionToken();\n        sessions.put(sessionToken, username);\n        \n        user.setLastLogin(new Date());\n        \n        System.out.println(\"User logged in: \" + username);\n        return sessionToken;\n    }\n    \n    public void logout(String sessionToken) {\n        String username = sessions.remove(sessionToken);\n        if (username != null) {\n            System.out.println(\"User logged out: \" + username);\n        }\n    }\n    \n    public boolean isLoggedIn(String sessionToken) {\n        return sessions.containsKey(sessionToken);\n    }\n    \n    public User getUserBySession(String sessionToken) {\n        String username = sessions.get(sessionToken);\n        if (username == null) {\n            return null;\n        }\n        return userManager.findByUsername(username);\n    }\n    \n    private String generateSessionToken() {\n        byte[] bytes = new byte[32];\n        random.nextBytes(bytes);\n        return Base64.getEncoder().encodeToString(bytes);\n    }\n}\n\nclass UserValidator {\n    public void validateUserData(String username, String password, String email) {\n        validateUsername(username);\n        validatePassword(password);\n        validateEmail(email);\n    }\n    \n    public void validateUsername(String username) {\n        if (username == null || username.trim().isEmpty()) {\n            throw new IllegalArgumentException(\"Username cannot be empty\");\n        }\n    }\n    \n    public void validatePassword(String password) {\n        if (password.length() < 8) {\n            throw new IllegalArgumentException(\"Password must be at least 8 characters\");\n        }\n    }\n    \n    public void validateEmail(String email) {\n        if (!email.matches(\"^[A-Za-z0-9+_.-]+@(.+)$\")) {\n            throw new IllegalArgumentException(\"Invalid email format\");\n        }\n    }\n}\n\nclass PasswordUtil {\n    public static String hashPassword(String password) {\n        return Base64.getEncoder().encodeToString(password.getBytes());\n    }\n    \n    public static boolean verifyPassword(String password, String hash) {\n        return hashPassword(password).equals(hash);\n    }\n}\n\nclass User {\n    private String username;\n    private String passwordHash;\n    private String email;\n    private Date createdAt;\n    private Date lastLogin;\n    \n    public User(String username, String passwordHash, String email, Date createdAt) {\n        this.username = username;\n        this.passwordHash = passwordHash;\n        this.email = email;\n        this.createdAt = createdAt;\n    }\n    \n    public String getUsername() { return username; }\n    public String getPasswordHash() { return passwordHash; }\n    public String getEmail() { return email; }\n    public void setEmail(String email) { this.email = email; }\n    public Date getCreatedAt() { return createdAt; }\n    public Date getLastLogin() { return lastLogin; }\n    public void setLastLogin(Date lastLogin) { this.lastLogin = lastLogin; }\n}",
      "level": "MODERATE",
      "language": "JAVA",
      "violation": "SRP",
       "description": "User authentication session management"
    },
    {
      "input": "public class FileProcessor {\n    private String inputDirectory;\n    private String outputDirectory;\n    private String archiveDirectory;\n    \n    public FileProcessor(String inputDirectory, String outputDirectory, String archiveDirectory) {\n        this.inputDirectory = inputDirectory;\n        this.outputDirectory = outputDirectory;\n        this.archiveDirectory = archiveDirectory;\n    }\n    \n    public void processAndArchiveFiles() {\n        File inputDir = new File(inputDirectory);\n        File[] files = inputDir.listFiles((dir, name) -> name.endsWith(\".csv\"));\n        \n        if (files == null || files.length == 0) {\n            System.out.println(\"No CSV files found to process\");\n            return;\n        }\n        \n        for (File file : files) {\n            try {\n                List<String> lines = readFile(file);\n                List<String> processedLines = new ArrayList<>();\n                \n                processedLines.add(\"PROCESSED_HEADER,ORIGINAL_DATA,TIMESTAMP\");\n                \n                for (int i = 1; i < lines.size(); i++) {\n                    String line = lines.get(i);\n                    String[] parts = line.split(\",\");\n                    \n                    StringBuilder processedLine = new StringBuilder();\n                    processedLine.append(\"PROCESSED\");\n                    \n                    for (String part : parts) {\n                        processedLine.append(\",\").append(part.trim().toUpperCase());\n                    }\n                    \n                    processedLine.append(\",\").append(new Date().toString());\n                    processedLines.add(processedLine.toString());\n                }\n                \n                String outputFileName = \"processed_\" + file.getName();\n                File outputFile = new File(outputDirectory, outputFileName);\n                writeFile(outputFile, processedLines);\n                \n                System.out.println(\"Processed file: \" + file.getName() + \" -> \" + outputFileName);\n                \n                String archiveName = \"archive_\" + System.currentTimeMillis() + \"_\" + file.getName();\n                File archiveFile = new File(archiveDirectory, archiveName);\n                \n                if (file.renameTo(archiveFile)) {\n                    System.out.println(\"Archived original file: \" + file.getName() + \" -> \" + archiveName);\n                } else {\n                    System.err.println(\"Failed to archive file: \" + file.getName());\n                }\n                \n            } catch (IOException e) {\n                System.err.println(\"Error processing file \" + file.getName() + \": \" + e.getMessage());\n            }\n        }\n    }\n    \n    private List<String> readFile(File file) throws IOException {\n        List<String> lines = new ArrayList<>();\n        try (BufferedReader reader = new BufferedReader(new FileReader(file))) {\n            String line;\n            while ((line = reader.readLine()) != null) {\n                lines.add(line);\n            }\n        }\n        return lines;\n    }\n    \n    private void writeFile(File file, List<String> lines) throws IOException {\n        try (BufferedWriter writer = new BufferedWriter(new FileWriter(file))) {\n            for (String line : lines) {\n                writer.write(line);\n                writer.newLine();\n            }\n        }\n    }\n    \n    public List<String> getProcessingHistory() {\n        List<String> history = new ArrayList<>();\n        File archiveDir = new File(archiveDirectory);\n        File[] archivedFiles = archiveDir.listFiles();\n        \n        if (archivedFiles != null) {\n            for (File file : archivedFiles) {\n                history.add(\"Archived: \" + file.getName() + \" at \" + new Date(file.lastModified()));\n            }\n        }\n        \n        return history;\n    }\n}",
      "output": "public class FileProcessor {\n    private String inputDirectory;\n    private String outputDirectory;\n    private FileReader fileReader;\n    private FileWriter fileWriter;\n    \n    public FileProcessor(String inputDirectory, String outputDirectory, \n                        FileReader fileReader, FileWriter fileWriter) {\n        this.inputDirectory = inputDirectory;\n        this.outputDirectory = outputDirectory;\n        this.fileReader = fileReader;\n        this.fileWriter = fileWriter;\n    }\n    \n    public List<ProcessedFile> processFiles() {\n        File inputDir = new File(inputDirectory);\n        File[] files = inputDir.listFiles((dir, name) -> name.endsWith(\".csv\"));\n        List<ProcessedFile> processedFiles = new ArrayList<>();\n        \n        if (files == null || files.length == 0) {\n            System.out.println(\"No CSV files found to process\");\n            return processedFiles;\n        }\n        \n        for (File file : files) {\n            try {\n                List<String> lines = fileReader.readFile(file);\n                List<String> processedLines = processContent(lines);\n                \n                String outputFileName = \"processed_\" + file.getName();\n                File outputFile = new File(outputDirectory, outputFileName);\n                fileWriter.writeFile(outputFile, processedLines);\n                \n                System.out.println(\"Processed file: \" + file.getName() + \" -> \" + outputFileName);\n                processedFiles.add(new ProcessedFile(file, outputFile));\n                \n            } catch (IOException e) {\n                System.err.println(\"Error processing file \" + file.getName() + \": \" + e.getMessage());\n            }\n        }\n        \n        return processedFiles;\n    }\n    \n    private List<String> processContent(List<String> lines) {\n        List<String> processedLines = new ArrayList<>();\n        processedLines.add(\"PROCESSED_HEADER,ORIGINAL_DATA,TIMESTAMP\");\n        \n        for (int i = 1; i < lines.size(); i++) {\n            String line = lines.get(i);\n            String[] parts = line.split(\",\");\n            \n            StringBuilder processedLine = new StringBuilder();\n            processedLine.append(\"PROCESSED\");\n            \n            for (String part : parts) {\n                processedLine.append(\",\").append(part.trim().toUpperCase());\n            }\n            \n            processedLine.append(\",\").append(new Date().toString());\n            processedLines.add(processedLine.toString());\n        }\n        \n        return processedLines;\n    }\n}\n\nclass FileArchiver {\n    private String archiveDirectory;\n    \n    public FileArchiver(String archiveDirectory) {\n        this.archiveDirectory = archiveDirectory;\n    }\n    \n    public void archiveFiles(List<ProcessedFile> processedFiles) {\n        for (ProcessedFile pf : processedFiles) {\n            String archiveName = \"archive_\" + System.currentTimeMillis() + \"_\" + pf.getOriginalFile().getName();\n            File archiveFile = new File(archiveDirectory, archiveName);\n            \n            if (pf.getOriginalFile().renameTo(archiveFile)) {\n                System.out.println(\"Archived original file: \" + pf.getOriginalFile().getName() + \" -> \" + archiveName);\n            } else {\n                System.err.println(\"Failed to archive file: \" + pf.getOriginalFile().getName());\n            }\n        }\n    }\n    \n    public List<String> getArchiveHistory() {\n        List<String> history = new ArrayList<>();\n        File archiveDir = new File(archiveDirectory);\n        File[] archivedFiles = archiveDir.listFiles();\n        \n        if (archivedFiles != null) {\n            for (File file : archivedFiles) {\n                history.add(\"Archived: \" + file.getName() + \" at \" + new Date(file.lastModified()));\n            }\n        }\n        \n        return history;\n    }\n}\n\nclass FileReader {\n    public List<String> readFile(File file) throws IOException {\n        List<String> lines = new ArrayList<>();\n        try (BufferedReader reader = new BufferedReader(new java.io.FileReader(file))) {\n            String line;\n            while ((line = reader.readLine()) != null) {\n                lines.add(line);\n            }\n        }\n        return lines;\n    }\n}\n\nclass FileWriter {\n    public void writeFile(File file, List<String> lines) throws IOException {\n        try (BufferedWriter writer = new BufferedWriter(new java.io.FileWriter(file))) {\n            for (String line : lines) {\n                writer.write(line);\n                writer.newLine();\n            }\n        }\n    }\n}\n\nclass ProcessedFile {\n    private File originalFile;\n    private File outputFile;\n    \n    public ProcessedFile(File originalFile, File outputFile) {\n        this.originalFile = originalFile;\n        this.outputFile = outputFile;\n    }\n    \n    public File getOriginalFile() { return originalFile; }\n    public File getOutputFile() { return outputFile; }\n}",
      "level": "MODERATE",
      "language": "JAVA",
      "violation": "SRP",
       "description": "File processing archiving system"
    },
    {
      "input": "public class CustomerService {\n    private Map<String, Customer> customers = new HashMap<>();\n    private List<String> blacklistedEmails = Arrays.asList(\"spam@test.com\", \"fake@test.com\");\n    \n    public void registerCustomer(String name, String email, String phone) {\n        if (customers.containsKey(email)) {\n            throw new IllegalArgumentException(\"Customer already exists\");\n        }\n        \n        if (blacklistedEmails.contains(email)) {\n            throw new IllegalArgumentException(\"Email is blacklisted\");\n        }\n        \n        if (!email.matches(\"^[A-Za-z0-9+_.-]+@(.+)$\")) {\n            throw new IllegalArgumentException(\"Invalid email format\");\n        }\n        \n        Customer customer = new Customer(UUID.randomUUID().toString(), name, email, phone);\n        customers.put(email, customer);\n        \n        sendWelcomeNotification(customer);\n        \n        System.out.println(\"Customer registered: \" + name);\n    }\n    \n    public void updateCustomerInfo(String email, String newPhone) {\n        Customer customer = customers.get(email);\n        if (customer == null) {\n            throw new IllegalArgumentException(\"Customer not found\");\n        }\n        \n        String oldPhone = customer.getPhone();\n        customer.setPhone(newPhone);\n        \n        sendUpdateNotification(customer, oldPhone, newPhone);\n        \n        System.out.println(\"Customer info updated: \" + email);\n    }\n    \n    private void sendWelcomeNotification(Customer customer) {\n        String subject = \"Welcome to Our Service!\";\n        String message = \"Dear \" + customer.getName() + \",\\n\\n\" +\n                        \"Thank you for registering with us.\\n\" +\n                        \"Your customer ID is: \" + customer.getId() + \"\\n\\n\" +\n                        \"Best regards,\\nThe Team\";\n        \n        System.out.println(\"Sending email to: \" + customer.getEmail());\n        System.out.println(\"Subject: \" + subject);\n        System.out.println(\"Message: \" + message);\n        \n        String smsMessage = \"Welcome \" + customer.getName() + \"! Your ID: \" + customer.getId();\n        System.out.println(\"Sending SMS to: \" + customer.getPhone());\n        System.out.println(\"SMS: \" + smsMessage);\n    }\n    \n    private void sendUpdateNotification(Customer customer, String oldPhone, String newPhone) {\n        String subject = \"Your Information Has Been Updated\";\n        String message = \"Dear \" + customer.getName() + \",\\n\\n\" +\n                        \"Your phone number has been updated from \" + oldPhone + \n                        \" to \" + newPhone + \".\\n\\n\" +\n                        \"If you didn't make this change, please contact us.\\n\\n\" +\n                        \"Best regards,\\nThe Team\";\n        \n        System.out.println(\"Sending email to: \" + customer.getEmail());\n        System.out.println(\"Subject: \" + subject);\n        System.out.println(\"Message: \" + message);\n    }\n    \n    public Customer findByEmail(String email) {\n        return customers.get(email);\n    }\n    \n    public List<Customer> getAllCustomers() {\n        return new ArrayList<>(customers.values());\n    }\n}\n\nclass Customer {\n    private String id;\n    private String name;\n    private String email;\n    private String phone;\n    \n    public Customer(String id, String name, String email, String phone) {\n        this.id = id;\n        this.name = name;\n        this.email = email;\n        this.phone = phone;\n    }\n    \n    public String getId() { return id; }\n    public String getName() { return name; }\n    public String getEmail() { return email; }\n    public String getPhone() { return phone; }\n    public void setPhone(String phone) { this.phone = phone; }\n}",
      "output": "public class CustomerService {\n    private Map<String, Customer> customers = new HashMap<>();\n    private CustomerValidator validator = new CustomerValidator();\n    private NotificationService notificationService;\n    \n    public CustomerService(NotificationService notificationService) {\n        this.notificationService = notificationService;\n    }\n    \n    public void registerCustomer(String name, String email, String phone) {\n        if (customers.containsKey(email)) {\n            throw new IllegalArgumentException(\"Customer already exists\");\n        }\n        \n        validator.validateEmail(email);\n        \n        Customer customer = new Customer(UUID.randomUUID().toString(), name, email, phone);\n        customers.put(email, customer);\n        \n        notificationService.sendWelcomeNotification(customer);\n        \n        System.out.println(\"Customer registered: \" + name);\n    }\n    \n    public void updateCustomerInfo(String email, String newPhone) {\n        Customer customer = customers.get(email);\n        if (customer == null) {\n            throw new IllegalArgumentException(\"Customer not found\");\n        }\n        \n        String oldPhone = customer.getPhone();\n        customer.setPhone(newPhone);\n        \n        notificationService.sendUpdateNotification(customer, oldPhone, newPhone);\n        \n        System.out.println(\"Customer info updated: \" + email);\n    }\n    \n    public Customer findByEmail(String email) {\n        return customers.get(email);\n    }\n    \n    public List<Customer> getAllCustomers() {\n        return new ArrayList<>(customers.values());\n    }\n}\n\nclass CustomerValidator {\n    private List<String> blacklistedEmails = Arrays.asList(\"spam@test.com\", \"fake@test.com\");\n    \n    public void validateEmail(String email) {\n        if (blacklistedEmails.contains(email)) {\n            throw new IllegalArgumentException(\"Email is blacklisted\");\n        }\n        \n        if (!email.matches(\"^[A-Za-z0-9+_.-]+@(.+)$\")) {\n            throw new IllegalArgumentException(\"Invalid email format\");\n        }\n    }\n}\n\nclass NotificationService {\n    private EmailSender emailSender = new EmailSender();\n    private SmsSender smsSender = new SmsSender();\n    \n    public void sendWelcomeNotification(Customer customer) {\n        String subject = \"Welcome to Our Service!\";\n        String message = \"Dear \" + customer.getName() + \",\\n\\n\" +\n                        \"Thank you for registering with us.\\n\" +\n                        \"Your customer ID is: \" + customer.getId() + \"\\n\\n\" +\n                        \"Best regards,\\nThe Team\";\n        \n        emailSender.send(customer.getEmail(), subject, message);\n        \n        String smsMessage = \"Welcome \" + customer.getName() + \"! Your ID: \" + customer.getId();\n        smsSender.send(customer.getPhone(), smsMessage);\n    }\n    \n    public void sendUpdateNotification(Customer customer, String oldPhone, String newPhone) {\n        String subject = \"Your Information Has Been Updated\";\n        String message = \"Dear \" + customer.getName() + \",\\n\\n\" +\n                        \"Your phone number has been updated from \" + oldPhone + \n                        \" to \" + newPhone + \".\\n\\n\" +\n                        \"If you didn't make this change, please contact us.\\n\\n\" +\n                        \"Best regards,\\nThe Team\";\n        \n        emailSender.send(customer.getEmail(), subject, message);\n    }\n}\n\nclass EmailSender {\n    public void send(String to, String subject, String message) {\n        System.out.println(\"Sending email to: \" + to);\n        System.out.println(\"Subject: \" + subject);\n        System.out.println(\"Message: \" + message);\n    }\n}\n\nclass SmsSender {\n    public void send(String phoneNumber, String message) {\n        System.out.println(\"Sending SMS to: \" + phoneNumber);\n        System.out.println(\"SMS: \" + message);\n    }\n}\n\nclass Customer {\n    private String id;\n    private String name;\n    private String email;\n    private String phone;\n    \n    public Customer(String id, String name, String email, String phone) {\n        this.id = id;\n        this.name = name;\n        this.email = email;\n        this.phone = phone;\n    }\n    \n    public String getId() { return id; }\n    public String getName() { return name; }\n    public String getEmail() { return email; }\n    public String getPhone() { return phone; }\n    public void setPhone(String phone) { this.phone = phone; }\n}",
      "level": "MODERATE",
      "language": "JAVA",
      "violation": "SRP",
      "description": "Customer registration notification system"
    },
    {
      "input": "import java.util.*;\nimport java.io.*;\nimport java.time.LocalDateTime;\nimport java.time.format.DateTimeFormatter;\nimport java.sql.*;\nimport javax.mail.*;\nimport javax.mail.internet.*;\n\npublic class OrderManager {\n    private List<Order> orders;\n    private Connection dbConnection;\n    private Properties emailProperties;\n    \n    public OrderManager() {\n        this.orders = new ArrayList<>();\n        initializeDatabase();\n        setupEmailConfiguration();\n    }\n    \n    // Order management responsibility\n    public void addOrder(Order order) {\n        if (validateOrder(order)) {\n            orders.add(order);\n            saveOrderToDatabase(order);\n            sendOrderConfirmationEmail(order);\n            generateInvoice(order);\n            updateInventory(order);\n            logOrderActivity(order, \"ORDER_CREATED\");\n        }\n    }\n    \n    public void updateOrderStatus(int orderId, String status) {\n        Order order = findOrderById(orderId);\n        if (order != null) {\n            order.setStatus(status);\n            updateOrderInDatabase(order);\n            sendStatusUpdateEmail(order);\n            logOrderActivity(order, \"STATUS_UPDATED\");\n        }\n    }\n    \n    public Order findOrderById(int orderId) {\n        return orders.stream()\n            .filter(order -> order.getId() == orderId)\n            .findFirst()\n            .orElse(null);\n    }\n    \n    // Validation responsibility\n    private boolean validateOrder(Order order) {\n        if (order == null || order.getCustomer() == null) {\n            return false;\n        }\n        if (order.getItems().isEmpty()) {\n            return false;\n        }\n        if (order.getTotalAmount() <= 0) {\n            return false;\n        }\n        return validateCustomerCreditLimit(order);\n    }\n    \n    private boolean validateCustomerCreditLimit(Order order) {\n        double customerCreditLimit = getCustomerCreditLimit(order.getCustomer().getId());\n        double outstandingAmount = getCustomerOutstandingAmount(order.getCustomer().getId());\n        return (outstandingAmount + order.getTotalAmount()) <= customerCreditLimit;\n    }\n    \n    // Database operations responsibility\n    private void initializeDatabase() {\n        try {\n            String url = \"jdbc:mysql://localhost:3306/orders\";\n            String username = \"admin\";\n            String password = \"password\";\n            dbConnection = DriverManager.getConnection(url, username, password);\n        } catch (SQLException e) {\n            System.err.println(\"Database connection failed: \" + e.getMessage());\n        }\n    }\n    \n    private void saveOrderToDatabase(Order order) {\n        try {\n            String sql = \"INSERT INTO orders (customer_id, total_amount, status, created_date) VALUES (?, ?, ?, ?)\";\n            PreparedStatement stmt = dbConnection.prepareStatement(sql);\n            stmt.setInt(1, order.getCustomer().getId());\n            stmt.setDouble(2, order.getTotalAmount());\n            stmt.setString(3, order.getStatus());\n            stmt.setTimestamp(4, Timestamp.valueOf(LocalDateTime.now()));\n            stmt.executeUpdate();\n        } catch (SQLException e) {\n            System.err.println(\"Failed to save order: \" + e.getMessage());\n        }\n    }\n    \n    private void updateOrderInDatabase(Order order) {\n        try {\n            String sql = \"UPDATE orders SET status = ?, updated_date = ? WHERE id = ?\";\n            PreparedStatement stmt = dbConnection.prepareStatement(sql);\n            stmt.setString(1, order.getStatus());\n            stmt.setTimestamp(2, Timestamp.valueOf(LocalDateTime.now()));\n            stmt.setInt(3, order.getId());\n            stmt.executeUpdate();\n        } catch (SQLException e) {\n            System.err.println(\"Failed to update order: \" + e.getMessage());\n        }\n    }\n    \n    private double getCustomerCreditLimit(int customerId) {\n        try {\n            String sql = \"SELECT credit_limit FROM customers WHERE id = ?\";\n            PreparedStatement stmt = dbConnection.prepareStatement(sql);\n            stmt.setInt(1, customerId);\n            ResultSet rs = stmt.executeQuery();\n            if (rs.next()) {\n                return rs.getDouble(\"credit_limit\");\n            }\n        } catch (SQLException e) {\n            System.err.println(\"Failed to get credit limit: \" + e.getMessage());\n        }\n        return 0;\n    }\n    \n    private double getCustomerOutstandingAmount(int customerId) {\n        try {\n            String sql = \"SELECT SUM(total_amount) FROM orders WHERE customer_id = ? AND status = 'PENDING'\";\n            PreparedStatement stmt = dbConnection.prepareStatement(sql);\n            stmt.setInt(1, customerId);\n            ResultSet rs = stmt.executeQuery();\n            if (rs.next()) {\n                return rs.getDouble(1);\n            }\n        } catch (SQLException e) {\n            System.err.println(\"Failed to get outstanding amount: \" + e.getMessage());\n        }\n        return 0;\n    }\n    \n    // Email notification responsibility\n    private void setupEmailConfiguration() {\n        emailProperties = new Properties();\n        emailProperties.put(\"mail.smtp.host\", \"smtp.gmail.com\");\n        emailProperties.put(\"mail.smtp.port\", \"587\");\n        emailProperties.put(\"mail.smtp.auth\", \"true\");\n        emailProperties.put(\"mail.smtp.starttls.enable\", \"true\");\n    }\n    \n    private void sendOrderConfirmationEmail(Order order) {\n        try {\n            Session session = Session.getInstance(emailProperties);\n            Message message = new MimeMessage(session);\n            message.setFrom(new InternetAddress(\"orders@company.com\"));\n            message.setRecipients(Message.RecipientType.TO, \n                InternetAddress.parse(order.getCustomer().getEmail()));\n            message.setSubject(\"Order Confirmation - Order #\" + order.getId());\n            message.setText(\"Your order has been confirmed. Total: $\" + order.getTotalAmount());\n            Transport.send(message);\n        } catch (MessagingException e) {\n            System.err.println(\"Failed to send confirmation email: \" + e.getMessage());\n        }\n    }\n    \n    private void sendStatusUpdateEmail(Order order) {\n        try {\n            Session session = Session.getInstance(emailProperties);\n            Message message = new MimeMessage(session);\n            message.setFrom(new InternetAddress(\"orders@company.com\"));\n            message.setRecipients(Message.RecipientType.TO, \n                InternetAddress.parse(order.getCustomer().getEmail()));\n            message.setSubject(\"Order Status Update - Order #\" + order.getId());\n            message.setText(\"Your order status has been updated to: \" + order.getStatus());\n            Transport.send(message);\n        } catch (MessagingException e) {\n            System.err.println(\"Failed to send status email: \" + e.getMessage());\n        }\n    }\n    \n    // Invoice generation responsibility\n    private void generateInvoice(Order order) {\n        try {\n            String filename = \"invoice_\" + order.getId() + \".txt\";\n            FileWriter writer = new FileWriter(filename);\n            writer.write(\"INVOICE\\n\");\n            writer.write(\"Order ID: \" + order.getId() + \"\\n\");\n            writer.write(\"Customer: \" + order.getCustomer().getName() + \"\\n\");\n            writer.write(\"Date: \" + LocalDateTime.now().format(DateTimeFormatter.ISO_LOCAL_DATE) + \"\\n\");\n            writer.write(\"Total Amount: $\" + order.getTotalAmount() + \"\\n\");\n            writer.close();\n        } catch (IOException e) {\n            System.err.println(\"Failed to generate invoice: \" + e.getMessage());\n        }\n    }\n    \n    // Inventory management responsibility\n    private void updateInventory(Order order) {\n        for (OrderItem item : order.getItems()) {\n            try {\n                String sql = \"UPDATE inventory SET quantity = quantity - ? WHERE product_id = ?\";\n                PreparedStatement stmt = dbConnection.prepareStatement(sql);\n                stmt.setInt(1, item.getQuantity());\n                stmt.setInt(2, item.getProductId());\n                stmt.executeUpdate();\n            } catch (SQLException e) {\n                System.err.println(\"Failed to update inventory: \" + e.getMessage());\n            }\n        }\n    }\n    \n    // Logging responsibility\n    private void logOrderActivity(Order order, String activity) {\n        try {\n            String filename = \"order_log.txt\";\n            FileWriter writer = new FileWriter(filename, true);\n            String logEntry = String.format(\"%s - Order %d: %s\\n\", \n                LocalDateTime.now().format(DateTimeFormatter.ISO_LOCAL_DATE_TIME),\n                order.getId(), activity);\n            writer.write(logEntry);\n            writer.close();\n        } catch (IOException e) {\n            System.err.println(\"Failed to log activity: \" + e.getMessage());\n        }\n    }\n}",
      "output": "import java.util.*;\nimport java.io.*;\nimport java.time.LocalDateTime;\nimport java.time.format.DateTimeFormatter;\nimport java.sql.*;\nimport javax.mail.*;\nimport javax.mail.internet.*;\n\npublic class OrderService {\n    private List<Order> orders;\n    private OrderRepository orderRepository;\n    private OrderValidator orderValidator;\n    private EmailNotificationService emailService;\n    private InvoiceGenerator invoiceGenerator;\n    private InventoryService inventoryService;\n    private OrderLogger orderLogger;\n    \n    public OrderService(OrderRepository orderRepository, OrderValidator orderValidator,\n                       EmailNotificationService emailService, InvoiceGenerator invoiceGenerator,\n                       InventoryService inventoryService, OrderLogger orderLogger) {\n        this.orders = new ArrayList<>();\n        this.orderRepository = orderRepository;\n        this.orderValidator = orderValidator;\n        this.emailService = emailService;\n        this.invoiceGenerator = invoiceGenerator;\n        this.inventoryService = inventoryService;\n        this.orderLogger = orderLogger;\n    }\n    \n    public void addOrder(Order order) {\n        if (orderValidator.validateOrder(order)) {\n            orders.add(order);\n            orderRepository.save(order);\n            emailService.sendOrderConfirmation(order);\n            invoiceGenerator.generateInvoice(order);\n            inventoryService.updateInventory(order);\n            orderLogger.logActivity(order, \"ORDER_CREATED\");\n        }\n    }\n    \n    public void updateOrderStatus(int orderId, String status) {\n        Order order = findOrderById(orderId);\n        if (order != null) {\n            order.setStatus(status);\n            orderRepository.update(order);\n            emailService.sendStatusUpdate(order);\n            orderLogger.logActivity(order, \"STATUS_UPDATED\");\n        }\n    }\n    \n    public Order findOrderById(int orderId) {\n        return orders.stream()\n            .filter(order -> order.getId() == orderId)\n            .findFirst()\n            .orElse(null);\n    }\n}\n\npublic class OrderValidator {\n    private CustomerService customerService;\n    \n    public OrderValidator(CustomerService customerService) {\n        this.customerService = customerService;\n    }\n    \n    public boolean validateOrder(Order order) {\n        return isOrderValid(order) && validateCustomerCreditLimit(order);\n    }\n    \n    private boolean isOrderValid(Order order) {\n        return order != null && order.getCustomer() != null && \n               !order.getItems().isEmpty() && order.getTotalAmount() > 0;\n    }\n    \n    private boolean validateCustomerCreditLimit(Order order) {\n        double creditLimit = customerService.getCreditLimit(order.getCustomer().getId());\n        double outstanding = customerService.getOutstandingAmount(order.getCustomer().getId());\n        return (outstanding + order.getTotalAmount()) <= creditLimit;\n    }\n}\n\npublic class OrderRepository {\n    private Connection dbConnection;\n    \n    public OrderRepository() {\n        initializeConnection();\n    }\n    \n    private void initializeConnection() {\n        try {\n            String url = \"jdbc:mysql://localhost:3306/orders\";\n            dbConnection = DriverManager.getConnection(url, \"admin\", \"password\");\n        } catch (SQLException e) {\n            throw new RuntimeException(\"Database connection failed\", e);\n        }\n    }\n    \n    public void save(Order order) {\n        try {\n            String sql = \"INSERT INTO orders (customer_id, total_amount, status, created_date) VALUES (?, ?, ?, ?)\";\n            PreparedStatement stmt = dbConnection.prepareStatement(sql);\n            stmt.setInt(1, order.getCustomer().getId());\n            stmt.setDouble(2, order.getTotalAmount());\n            stmt.setString(3, order.getStatus());\n            stmt.setTimestamp(4, Timestamp.valueOf(LocalDateTime.now()));\n            stmt.executeUpdate();\n        } catch (SQLException e) {\n            throw new RuntimeException(\"Failed to save order\", e);\n        }\n    }\n    \n    public void update(Order order) {\n        try {\n            String sql = \"UPDATE orders SET status = ?, updated_date = ? WHERE id = ?\";\n            PreparedStatement stmt = dbConnection.prepareStatement(sql);\n            stmt.setString(1, order.getStatus());\n            stmt.setTimestamp(2, Timestamp.valueOf(LocalDateTime.now()));\n            stmt.setInt(3, order.getId());\n            stmt.executeUpdate();\n        } catch (SQLException e) {\n            throw new RuntimeException(\"Failed to update order\", e);\n        }\n    }\n}\n\npublic class CustomerService {\n    private Connection dbConnection;\n    \n    public CustomerService(Connection dbConnection) {\n        this.dbConnection = dbConnection;\n    }\n    \n    public double getCreditLimit(int customerId) {\n        try {\n            String sql = \"SELECT credit_limit FROM customers WHERE id = ?\";\n            PreparedStatement stmt = dbConnection.prepareStatement(sql);\n            stmt.setInt(1, customerId);\n            ResultSet rs = stmt.executeQuery();\n            return rs.next() ? rs.getDouble(\"credit_limit\") : 0;\n        } catch (SQLException e) {\n            throw new RuntimeException(\"Failed to get credit limit\", e);\n        }\n    }\n    \n    public double getOutstandingAmount(int customerId) {\n        try {\n            String sql = \"SELECT SUM(total_amount) FROM orders WHERE customer_id = ? AND status = 'PENDING'\";\n            PreparedStatement stmt = dbConnection.prepareStatement(sql);\n            stmt.setInt(1, customerId);\n            ResultSet rs = stmt.executeQuery();\n            return rs.next() ? rs.getDouble(1) : 0;\n        } catch (SQLException e) {\n            throw new RuntimeException(\"Failed to get outstanding amount\", e);\n        }\n    }\n}\n\npublic class EmailNotificationService {\n    private Properties emailProperties;\n    \n    public EmailNotificationService() {\n        setupConfiguration();\n    }\n    \n    private void setupConfiguration() {\n        emailProperties = new Properties();\n        emailProperties.put(\"mail.smtp.host\", \"smtp.gmail.com\");\n        emailProperties.put(\"mail.smtp.port\", \"587\");\n        emailProperties.put(\"mail.smtp.auth\", \"true\");\n        emailProperties.put(\"mail.smtp.starttls.enable\", \"true\");\n    }\n    \n    public void sendOrderConfirmation(Order order) {\n        sendEmail(order.getCustomer().getEmail(), \n                 \"Order Confirmation - Order #\" + order.getId(),\n                 \"Your order has been confirmed. Total: $\" + order.getTotalAmount());\n    }\n    \n    public void sendStatusUpdate(Order order) {\n        sendEmail(order.getCustomer().getEmail(),\n                 \"Order Status Update - Order #\" + order.getId(),\n                 \"Your order status has been updated to: \" + order.getStatus());\n    }\n    \n    private void sendEmail(String to, String subject, String body) {\n        try {\n            Session session = Session.getInstance(emailProperties);\n            Message message = new MimeMessage(session);\n            message.setFrom(new InternetAddress(\"orders@company.com\"));\n            message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(to));\n            message.setSubject(subject);\n            message.setText(body);\n            Transport.send(message);\n        } catch (MessagingException e) {\n            throw new RuntimeException(\"Failed to send email\", e);\n        }\n    }\n}\n\npublic class InvoiceGenerator {\n    public void generateInvoice(Order order) {\n        try {\n            String filename = \"invoice_\" + order.getId() + \".txt\";\n            FileWriter writer = new FileWriter(filename);\n            writer.write(buildInvoiceContent(order));\n            writer.close();\n        } catch (IOException e) {\n            throw new RuntimeException(\"Failed to generate invoice\", e);\n        }\n    }\n    \n    private String buildInvoiceContent(Order order) {\n        return String.format(\"INVOICE\\nOrder ID: %d\\nCustomer: %s\\nDate: %s\\nTotal Amount: $%.2f\\n\",\n                           order.getId(), order.getCustomer().getName(),\n                           LocalDateTime.now().format(DateTimeFormatter.ISO_LOCAL_DATE),\n                           order.getTotalAmount());\n    }\n}\n\npublic class InventoryService {\n    private Connection dbConnection;\n    \n    public InventoryService(Connection dbConnection) {\n        this.dbConnection = dbConnection;\n    }\n    \n    public void updateInventory(Order order) {\n        for (OrderItem item : order.getItems()) {\n            updateProductQuantity(item.getProductId(), item.getQuantity());\n        }\n    }\n    \n    private void updateProductQuantity(int productId, int quantity) {\n        try {\n            String sql = \"UPDATE inventory SET quantity = quantity - ? WHERE product_id = ?\";\n            PreparedStatement stmt = dbConnection.prepareStatement(sql);\n            stmt.setInt(1, quantity);\n            stmt.setInt(2, productId);\n            stmt.executeUpdate();\n        } catch (SQLException e) {\n            throw new RuntimeException(\"Failed to update inventory\", e);\n        }\n    }\n}\n\npublic class OrderLogger {\n    public void logActivity(Order order, String activity) {\n        try {\n            FileWriter writer = new FileWriter(\"order_log.txt\", true);\n            String logEntry = String.format(\"%s - Order %d: %s\\n\",\n                                           LocalDateTime.now().format(DateTimeFormatter.ISO_LOCAL_DATE_TIME),\n                                           order.getId(), activity);\n            writer.write(logEntry);\n            writer.close();\n        } catch (IOException e) {\n            throw new RuntimeException(\"Failed to log activity\", e);\n        }\n    }\n}",
      "level": "HARD",
      "language": "JAVA",
      "violation": "SRP",
       "description": "Order management processing system"
    },
    {
      "input": "import java.util.*;\nimport java.io.*;\nimport java.time.LocalDateTime;\nimport java.security.MessageDigest;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.regex.Pattern;\n\npublic class BlogPostManager {\n    private Map<Integer, BlogPost> posts = new ConcurrentHashMap<>();\n    private Map<String, List<String>> userSessions = new ConcurrentHashMap<>();\n    private Map<String, Integer> userPermissions = new HashMap<>();\n    private int nextPostId = 1;\n    \n    public BlogPostManager() {\n        initializeDefaultUsers();\n        setupLogging();\n    }\n    \n    public void createPost(String sessionToken, String title, String content, List<String> tags) {\n        if (!isValidSession(sessionToken)) {\n            throw new SecurityException(\"Invalid session\");\n        }\n        \n        String username = getUserFromSession(sessionToken);\n        if (!hasPermission(username, \"CREATE_POST\")) {\n            throw new SecurityException(\"Insufficient permissions\");\n        }\n        \n        if (!validatePostContent(title, content)) {\n            throw new IllegalArgumentException(\"Invalid post content\");\n        }\n        \n        String sanitizedTitle = sanitizeHtml(title);\n        String sanitizedContent = sanitizeHtml(content);\n        List<String> processedTags = processTags(tags);\n        \n        BlogPost post = new BlogPost(nextPostId++, sanitizedTitle, sanitizedContent, \n                                   username, LocalDateTime.now(), processedTags);\n        posts.put(post.getId(), post);\n        \n        updateSearchIndex(post);\n        generateSitemap();\n        notifySubscribers(post);\n        logActivity(username, \"POST_CREATED\", post.getId());\n        \n        System.out.println(\"Blog post created successfully: \" + post.getId());\n    }\n    \n    public void updatePost(String sessionToken, int postId, String newTitle, String newContent) {\n        if (!isValidSession(sessionToken)) {\n            throw new SecurityException(\"Invalid session\");\n        }\n        \n        String username = getUserFromSession(sessionToken);\n        BlogPost post = posts.get(postId);\n        \n        if (post == null) {\n            throw new IllegalArgumentException(\"Post not found\");\n        }\n        \n        if (!post.getAuthor().equals(username) && !hasPermission(username, \"EDIT_ANY_POST\")) {\n            throw new SecurityException(\"Cannot edit this post\");\n        }\n        \n        if (!validatePostContent(newTitle, newContent)) {\n            throw new IllegalArgumentException(\"Invalid post content\");\n        }\n        \n        post.setTitle(sanitizeHtml(newTitle));\n        post.setContent(sanitizeHtml(newContent));\n        post.setLastModified(LocalDateTime.now());\n        \n        updateSearchIndex(post);\n        generateSitemap();\n        logActivity(username, \"POST_UPDATED\", postId);\n        \n        System.out.println(\"Post updated: \" + postId);\n    }\n    \n    public void deletePost(String sessionToken, int postId) {\n        if (!isValidSession(sessionToken)) {\n            throw new SecurityException(\"Invalid session\");\n        }\n        \n        String username = getUserFromSession(sessionToken);\n        BlogPost post = posts.get(postId);\n        \n        if (post == null) {\n            throw new IllegalArgumentException(\"Post not found\");\n        }\n        \n        if (!post.getAuthor().equals(username) && !hasPermission(username, \"DELETE_ANY_POST\")) {\n            throw new SecurityException(\"Cannot delete this post\");\n        }\n        \n        posts.remove(postId);\n        removeFromSearchIndex(postId);\n        generateSitemap();\n        logActivity(username, \"POST_DELETED\", postId);\n        \n        System.out.println(\"Post deleted: \" + postId);\n    }\n    \n    private void initializeDefaultUsers() {\n        userPermissions.put(\"admin\", 7); // All permissions\n        userPermissions.put(\"editor\", 3); // Create and edit\n        userPermissions.put(\"author\", 1); // Create only\n    }\n    \n    private void setupLogging() {\n        try {\n            File logDir = new File(\"logs\");\n            if (!logDir.exists()) {\n                logDir.mkdirs();\n            }\n        } catch (Exception e) {\n            System.err.println(\"Failed to setup logging: \" + e.getMessage());\n        }\n    }\n    \n    private boolean isValidSession(String sessionToken) {\n        return sessionToken != null && userSessions.containsKey(sessionToken);\n    }\n    \n    private String getUserFromSession(String sessionToken) {\n        List<String> sessionData = userSessions.get(sessionToken);\n        return sessionData != null ? sessionData.get(0) : null;\n    }\n    \n    private boolean hasPermission(String username, String permission) {\n        Integer userLevel = userPermissions.get(username);\n        if (userLevel == null) return false;\n        \n        switch (permission) {\n            case \"CREATE_POST\": return (userLevel & 1) != 0;\n            case \"EDIT_ANY_POST\": return (userLevel & 2) != 0;\n            case \"DELETE_ANY_POST\": return (userLevel & 4) != 0;\n            default: return false;\n        }\n    }\n    \n    private boolean validatePostContent(String title, String content) {\n        if (title == null || title.trim().isEmpty() || title.length() > 200) {\n            return false;\n        }\n        if (content == null || content.trim().isEmpty() || content.length() > 10000) {\n            return false;\n        }\n        \n        Pattern scriptPattern = Pattern.compile(\"<script[^>]*>.*?</script>\", Pattern.CASE_INSENSITIVE);\n        return !scriptPattern.matcher(title).find() && !scriptPattern.matcher(content).find();\n    }\n    \n    private String sanitizeHtml(String input) {\n        if (input == null) return \"\";\n        return input.replaceAll(\"<script[^>]*>.*?</script>\", \"\")\n                   .replaceAll(\"<[^>]+>\", \"\")\n                   .replaceAll(\"&\", \"&amp;\")\n                   .replaceAll(\"<\", \"&lt;\")\n                   .replaceAll(\">\", \"&gt;\");\n    }\n    \n    private List<String> processTags(List<String> tags) {\n        if (tags == null) return new ArrayList<>();\n        \n        return tags.stream()\n                  .map(tag -> tag.toLowerCase().trim())\n                  .filter(tag -> !tag.isEmpty() && tag.length() <= 50)\n                  .distinct()\n                  .collect(ArrayList::new, (list, item) -> list.add(item), (list1, list2) -> list1.addAll(list2));\n    }\n    \n    private void updateSearchIndex(BlogPost post) {\n        try {\n            String indexFile = \"search_index.txt\";\n            FileWriter writer = new FileWriter(indexFile, true);\n            writer.write(post.getId() + \"|\" + post.getTitle() + \"|\" + post.getContent() + \"\\n\");\n            writer.close();\n        } catch (IOException e) {\n            System.err.println(\"Failed to update search index: \" + e.getMessage());\n        }\n    }\n    \n    private void removeFromSearchIndex(int postId) {\n        try {\n            File indexFile = new File(\"search_index.txt\");\n            if (!indexFile.exists()) return;\n            \n            List<String> lines = new ArrayList<>();\n            BufferedReader reader = new BufferedReader(new FileReader(indexFile));\n            String line;\n            while ((line = reader.readLine()) != null) {\n                if (!line.startsWith(postId + \"|\")) {\n                    lines.add(line);\n                }\n            }\n            reader.close();\n            \n            FileWriter writer = new FileWriter(indexFile);\n            for (String l : lines) {\n                writer.write(l + \"\\n\");\n            }\n            writer.close();\n        } catch (IOException e) {\n            System.err.println(\"Failed to update search index: \" + e.getMessage());\n        }\n    }\n    \n    private void generateSitemap() {\n        try {\n            FileWriter writer = new FileWriter(\"sitemap.xml\");\n            writer.write(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\");\n            writer.write(\"<urlset xmlns=\\\"http://www.sitemaps.org/schemas/sitemap/0.9\\\">\\n\");\n            \n            for (BlogPost post : posts.values()) {\n                writer.write(\"  <url>\\n\");\n                writer.write(\"    <loc>https://blog.com/post/\" + post.getId() + \"</loc>\\n\");\n                writer.write(\"    <lastmod>\" + post.getLastModified() + \"</lastmod>\\n\");\n                writer.write(\"  </url>\\n\");\n            }\n            \n            writer.write(\"</urlset>\\n\");\n            writer.close();\n        } catch (IOException e) {\n            System.err.println(\"Failed to generate sitemap: \" + e.getMessage());\n        }\n    }\n    \n    private void notifySubscribers(BlogPost post) {\n        System.out.println(\"Sending notifications for new post: \" + post.getTitle());\n        // Simulate email notifications\n        try {\n            Thread.sleep(100); // Simulate network delay\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n        }\n    }\n    \n    private void logActivity(String username, String action, int postId) {\n        try {\n            String logFile = \"logs/activity_\" + LocalDateTime.now().toLocalDate() + \".log\";\n            FileWriter writer = new FileWriter(logFile, true);\n            String logEntry = String.format(\"%s - User: %s, Action: %s, Post: %d\\n\",\n                                           LocalDateTime.now(), username, action, postId);\n            writer.write(logEntry);\n            writer.close();\n        } catch (IOException e) {\n            System.err.println(\"Failed to log activity: \" + e.getMessage());\n        }\n    }\n    \n    public List<BlogPost> searchPosts(String query) {\n        List<BlogPost> results = new ArrayList<>();\n        String lowerQuery = query.toLowerCase();\n        \n        for (BlogPost post : posts.values()) {\n            if (post.getTitle().toLowerCase().contains(lowerQuery) ||\n                post.getContent().toLowerCase().contains(lowerQuery) ||\n                post.getTags().stream().anyMatch(tag -> tag.contains(lowerQuery))) {\n                results.add(post);\n            }\n        }\n        \n        return results;\n    }\n    \n    public String loginUser(String username, String password) {\n        String hashedPassword = hashPassword(password);\n        if (validateCredentials(username, hashedPassword)) {\n            String sessionToken = generateSessionToken(username);\n            userSessions.put(sessionToken, Arrays.asList(username, LocalDateTime.now().toString()));\n            logActivity(username, \"LOGIN\", 0);\n            return sessionToken;\n        }\n        throw new SecurityException(\"Invalid credentials\");\n    }\n    \n    private String hashPassword(String password) {\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n            byte[] hash = md.digest(password.getBytes());\n            StringBuilder hexString = new StringBuilder();\n            for (byte b : hash) {\n                String hex = Integer.toHexString(0xff & b);\n                if (hex.length() == 1) hexString.append('0');\n                hexString.append(hex);\n            }\n            return hexString.toString();\n        } catch (Exception e) {\n            throw new RuntimeException(\"Password hashing failed\", e);\n        }\n    }\n    \n    private boolean validateCredentials(String username, String hashedPassword) {\n        // Simulate credential validation\n        return userPermissions.containsKey(username);\n    }\n    \n    private String generateSessionToken(String username) {\n        return hashPassword(username + System.currentTimeMillis());\n    }\n}\n\nclass BlogPost {\n    private int id;\n    private String title;\n    private String content;\n    private String author;\n    private LocalDateTime createdAt;\n    private LocalDateTime lastModified;\n    private List<String> tags;\n    \n    public BlogPost(int id, String title, String content, String author, LocalDateTime createdAt, List<String> tags) {\n        this.id = id;\n        this.title = title;\n        this.content = content;\n        this.author = author;\n        this.createdAt = createdAt;\n        this.lastModified = createdAt;\n        this.tags = tags != null ? tags : new ArrayList<>();\n    }\n    \n    public int getId() { return id; }\n    public String getTitle() { return title; }\n    public void setTitle(String title) { this.title = title; }\n    public String getContent() { return content; }\n    public void setContent(String content) { this.content = content; }\n    public String getAuthor() { return author; }\n    public LocalDateTime getCreatedAt() { return createdAt; }\n    public LocalDateTime getLastModified() { return lastModified; }\n    public void setLastModified(LocalDateTime lastModified) { this.lastModified = lastModified; }\n    public List<String> getTags() { return tags; }\n}",
      "output": "import java.util.*;\nimport java.io.*;\nimport java.time.LocalDateTime;\nimport java.security.MessageDigest;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.regex.Pattern;\n\npublic class BlogPostService {\n    private Map<Integer, BlogPost> posts = new ConcurrentHashMap<>();\n    private int nextPostId = 1;\n    private BlogPostValidator validator;\n    private ContentSanitizer sanitizer;\n    private AuthenticationService authService;\n    private SearchIndexService searchService;\n    private SitemapGenerator sitemapGenerator;\n    private NotificationService notificationService;\n    private ActivityLogger activityLogger;\n    \n    public BlogPostService(BlogPostValidator validator, ContentSanitizer sanitizer,\n                          AuthenticationService authService, SearchIndexService searchService,\n                          SitemapGenerator sitemapGenerator, NotificationService notificationService,\n                          ActivityLogger activityLogger) {\n        this.validator = validator;\n        this.sanitizer = sanitizer;\n        this.authService = authService;\n        this.searchService = searchService;\n        this.sitemapGenerator = sitemapGenerator;\n        this.notificationService = notificationService;\n        this.activityLogger = activityLogger;\n    }\n    \n    public void createPost(String sessionToken, String title, String content, List<String> tags) {\n        String username = authService.validateSessionAndGetUser(sessionToken);\n        authService.checkPermission(username, \"CREATE_POST\");\n        \n        validator.validatePostContent(title, content);\n        \n        String sanitizedTitle = sanitizer.sanitizeHtml(title);\n        String sanitizedContent = sanitizer.sanitizeHtml(content);\n        List<String> processedTags = sanitizer.processTags(tags);\n        \n        BlogPost post = new BlogPost(nextPostId++, sanitizedTitle, sanitizedContent, \n                                   username, LocalDateTime.now(), processedTags);\n        posts.put(post.getId(), post);\n        \n        searchService.updateIndex(post);\n        sitemapGenerator.regenerate(posts.values());\n        notificationService.notifySubscribers(post);\n        activityLogger.logActivity(username, \"POST_CREATED\", post.getId());\n        \n        System.out.println(\"Blog post created successfully: \" + post.getId());\n    }\n    \n    public void updatePost(String sessionToken, int postId, String newTitle, String newContent) {\n        String username = authService.validateSessionAndGetUser(sessionToken);\n        BlogPost post = getPostById(postId);\n        \n        authService.checkPostEditPermission(username, post);\n        validator.validatePostContent(newTitle, newContent);\n        \n        post.setTitle(sanitizer.sanitizeHtml(newTitle));\n        post.setContent(sanitizer.sanitizeHtml(newContent));\n        post.setLastModified(LocalDateTime.now());\n        \n        searchService.updateIndex(post);\n        sitemapGenerator.regenerate(posts.values());\n        activityLogger.logActivity(username, \"POST_UPDATED\", postId);\n        \n        System.out.println(\"Post updated: \" + postId);\n    }\n    \n    public void deletePost(String sessionToken, int postId) {\n        String username = authService.validateSessionAndGetUser(sessionToken);\n        BlogPost post = getPostById(postId);\n        \n        authService.checkPostDeletePermission(username, post);\n        \n        posts.remove(postId);\n        searchService.removeFromIndex(postId);\n        sitemapGenerator.regenerate(posts.values());\n        activityLogger.logActivity(username, \"POST_DELETED\", postId);\n        \n        System.out.println(\"Post deleted: \" + postId);\n    }\n    \n    private BlogPost getPostById(int postId) {\n        BlogPost post = posts.get(postId);\n        if (post == null) {\n            throw new IllegalArgumentException(\"Post not found\");\n        }\n        return post;\n    }\n    \n    public List<BlogPost> searchPosts(String query) {\n        return searchService.search(posts.values(), query);\n    }\n}\n\npublic class BlogPostValidator {\n    private static final Pattern SCRIPT_PATTERN = Pattern.compile(\"<script[^>]*>.*?</script>\", Pattern.CASE_INSENSITIVE);\n    \n    public void validatePostContent(String title, String content) {\n        if (title == null || title.trim().isEmpty() || title.length() > 200) {\n            throw new IllegalArgumentException(\"Invalid title\");\n        }\n        if (content == null || content.trim().isEmpty() || content.length() > 10000) {\n            throw new IllegalArgumentException(\"Invalid content\");\n        }\n        \n        if (SCRIPT_PATTERN.matcher(title).find() || SCRIPT_PATTERN.matcher(content).find()) {\n            throw new IllegalArgumentException(\"Script tags not allowed\");\n        }\n    }\n}\n\npublic class ContentSanitizer {\n    public String sanitizeHtml(String input) {\n        if (input == null) return \"\";\n        return input.replaceAll(\"<script[^>]*>.*?</script>\", \"\")\n                   .replaceAll(\"<[^>]+>\", \"\")\n                   .replaceAll(\"&\", \"&amp;\")\n                   .replaceAll(\"<\", \"&lt;\")\n                   .replaceAll(\">\", \"&gt;\");\n    }\n    \n    public List<String> processTags(List<String> tags) {\n        if (tags == null) return new ArrayList<>();\n        \n        return tags.stream()\n                  .map(tag -> tag.toLowerCase().trim())\n                  .filter(tag -> !tag.isEmpty() && tag.length() <= 50)\n                  .distinct()\n                  .collect(ArrayList::new, (list, item) -> list.add(item), (list1, list2) -> list1.addAll(list2));\n    }\n}\n\npublic class AuthenticationService {\n    private Map<String, List<String>> userSessions = new ConcurrentHashMap<>();\n    private Map<String, Integer> userPermissions = new HashMap<>();\n    \n    public AuthenticationService() {\n        initializeDefaultUsers();\n    }\n    \n    public String validateSessionAndGetUser(String sessionToken) {\n        if (!isValidSession(sessionToken)) {\n            throw new SecurityException(\"Invalid session\");\n        }\n        return getUserFromSession(sessionToken);\n    }\n    \n    public void checkPermission(String username, String permission) {\n        if (!hasPermission(username, permission)) {\n            throw new SecurityException(\"Insufficient permissions\");\n        }\n    }\n    \n    public void checkPostEditPermission(String username, BlogPost post) {\n        if (!post.getAuthor().equals(username) && !hasPermission(username, \"EDIT_ANY_POST\")) {\n            throw new SecurityException(\"Cannot edit this post\");\n        }\n    }\n    \n    public void checkPostDeletePermission(String username, BlogPost post) {\n        if (!post.getAuthor().equals(username) && !hasPermission(username, \"DELETE_ANY_POST\")) {\n            throw new SecurityException(\"Cannot delete this post\");\n        }\n    }\n    \n    private void initializeDefaultUsers() {\n        userPermissions.put(\"admin\", 7);\n        userPermissions.put(\"editor\", 3);\n        userPermissions.put(\"author\", 1);\n    }\n    \n    private boolean isValidSession(String sessionToken) {\n        return sessionToken != null && userSessions.containsKey(sessionToken);\n    }\n    \n    private String getUserFromSession(String sessionToken) {\n        List<String> sessionData = userSessions.get(sessionToken);\n        return sessionData != null ? sessionData.get(0) : null;\n    }\n    \n    private boolean hasPermission(String username, String permission) {\n        Integer userLevel = userPermissions.get(username);\n        if (userLevel == null) return false;\n        \n        switch (permission) {\n            case \"CREATE_POST\": return (userLevel & 1) != 0;\n            case \"EDIT_ANY_POST\": return (userLevel & 2) != 0;\n            case \"DELETE_ANY_POST\": return (userLevel & 4) != 0;\n            default: return false;\n        }\n    }\n    \n    public String loginUser(String username, String password) {\n        String hashedPassword = PasswordUtil.hashPassword(password);\n        if (validateCredentials(username, hashedPassword)) {\n            String sessionToken = generateSessionToken(username);\n            userSessions.put(sessionToken, Arrays.asList(username, LocalDateTime.now().toString()));\n            return sessionToken;\n        }\n        throw new SecurityException(\"Invalid credentials\");\n    }\n    \n    private boolean validateCredentials(String username, String hashedPassword) {\n        return userPermissions.containsKey(username);\n    }\n    \n    private String generateSessionToken(String username) {\n        return PasswordUtil.hashPassword(username + System.currentTimeMillis());\n    }\n}\n\npublic class SearchIndexService {\n    public void updateIndex(BlogPost post) {\n        try {\n            String indexFile = \"search_index.txt\";\n            FileWriter writer = new FileWriter(indexFile, true);\n            writer.write(post.getId() + \"|\" + post.getTitle() + \"|\" + post.getContent() + \"\\n\");\n            writer.close();\n        } catch (IOException e) {\n            throw new RuntimeException(\"Failed to update search index\", e);\n        }\n    }\n    \n    public void removeFromIndex(int postId) {\n        try {\n            File indexFile = new File(\"search_index.txt\");\n            if (!indexFile.exists()) return;\n            \n            List<String> lines = new ArrayList<>();\n            BufferedReader reader = new BufferedReader(new FileReader(indexFile));\n            String line;\n            while ((line = reader.readLine()) != null) {\n                if (!line.startsWith(postId + \"|\")) {\n                    lines.add(line);\n                }\n            }\n            reader.close();\n            \n            FileWriter writer = new FileWriter(indexFile);\n            for (String l : lines) {\n                writer.write(l + \"\\n\");\n            }\n            writer.close();\n        } catch (IOException e) {\n            throw new RuntimeException(\"Failed to update search index\", e);\n        }\n    }\n    \n    public List<BlogPost> search(Collection<BlogPost> posts, String query) {\n        List<BlogPost> results = new ArrayList<>();\n        String lowerQuery = query.toLowerCase();\n        \n        for (BlogPost post : posts) {\n            if (post.getTitle().toLowerCase().contains(lowerQuery) ||\n                post.getContent().toLowerCase().contains(lowerQuery) ||\n                post.getTags().stream().anyMatch(tag -> tag.contains(lowerQuery))) {\n                results.add(post);\n            }\n        }\n        \n        return results;\n    }\n}\n\npublic class SitemapGenerator {\n    public void regenerate(Collection<BlogPost> posts) {\n        try {\n            FileWriter writer = new FileWriter(\"sitemap.xml\");\n            writer.write(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\");\n            writer.write(\"<urlset xmlns=\\\"http://www.sitemaps.org/schemas/sitemap/0.9\\\">\\n\");\n            \n            for (BlogPost post : posts) {\n                writer.write(\"  <url>\\n\");\n                writer.write(\"    <loc>https://blog.com/post/\" + post.getId() + \"</loc>\\n\");\n                writer.write(\"    <lastmod>\" + post.getLastModified() + \"</lastmod>\\n\");\n                writer.write(\"  </url>\\n\");\n            }\n            \n            writer.write(\"</urlset>\\n\");\n            writer.close();\n        } catch (IOException e) {\n            throw new RuntimeException(\"Failed to generate sitemap\", e);\n        }\n    }\n}\n\npublic class NotificationService {\n    public void notifySubscribers(BlogPost post) {\n        System.out.println(\"Sending notifications for new post: \" + post.getTitle());\n        try {\n            Thread.sleep(100);\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n        }\n    }\n}\n\npublic class ActivityLogger {\n    public ActivityLogger() {\n        setupLogging();\n    }\n    \n    private void setupLogging() {\n        try {\n            File logDir = new File(\"logs\");\n            if (!logDir.exists()) {\n                logDir.mkdirs();\n            }\n        } catch (Exception e) {\n            System.err.println(\"Failed to setup logging: \" + e.getMessage());\n        }\n    }\n    \n    public void logActivity(String username, String action, int postId) {\n        try {\n            String logFile = \"logs/activity_\" + LocalDateTime.now().toLocalDate() + \".log\";\n            FileWriter writer = new FileWriter(logFile, true);\n            String logEntry = String.format(\"%s - User: %s, Action: %s, Post: %d\\n\",\n                                           LocalDateTime.now(), username, action, postId);\n            writer.write(logEntry);\n            writer.close();\n        } catch (IOException e) {\n            throw new RuntimeException(\"Failed to log activity\", e);\n        }\n    }\n}\n\npublic class PasswordUtil {\n    public static String hashPassword(String password) {\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n            byte[] hash = md.digest(password.getBytes());\n            StringBuilder hexString = new StringBuilder();\n            for (byte b : hash) {\n                String hex = Integer.toHexString(0xff & b);\n                if (hex.length() == 1) hexString.append('0');\n                hexString.append(hex);\n            }\n            return hexString.toString();\n        } catch (Exception e) {\n            throw new RuntimeException(\"Password hashing failed\", e);\n        }\n    }\n}\n\nclass BlogPost {\n    private int id;\n    private String title;\n    private String content;\n    private String author;\n    private LocalDateTime createdAt;\n    private LocalDateTime lastModified;\n    private List<String> tags;\n    \n    public BlogPost(int id, String title, String content, String author, LocalDateTime createdAt, List<String> tags) {\n        this.id = id;\n        this.title = title;\n        this.content = content;\n        this.author = author;\n        this.createdAt = createdAt;\n        this.lastModified = createdAt;\n        this.tags = tags != null ? tags : new ArrayList<>();\n    }\n    \n    public int getId() { return id; }\n    public String getTitle() { return title; }\n    public void setTitle(String title) { this.title = title; }\n    public String getContent() { return content; }\n    public void setContent(String content) { this.content = content; }\n    public String getAuthor() { return author; }\n    public LocalDateTime getCreatedAt() { return createdAt; }\n    public LocalDateTime getLastModified() { return lastModified; }\n    public void setLastModified(LocalDateTime lastModified) { this.lastModified = lastModified; }\n    public List<String> getTags() { return tags; }\n}",
      "level": "HARD",
      "language": "JAVA",
      "violation": "SRP",
       "description": "Blog post management system"
    },
    {
      "input": "import java.util.*;\nimport java.io.*;\nimport java.time.LocalDateTime;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.security.MessageDigest;\nimport javax.mail.*;\nimport javax.mail.internet.*;\n\npublic class InventoryManager {\n    private Map<String, Product> products = new ConcurrentHashMap<>();\n    private Map<String, Supplier> suppliers = new ConcurrentHashMap<>();\n    private Map<String, User> users = new ConcurrentHashMap<>();\n    private List<StockAlert> alerts = new ArrayList<>();\n    private Properties emailConfig;\n    \n    public InventoryManager() {\n        initializeUsers();\n        setupEmailConfiguration();\n        loadDataFromFiles();\n    }\n    \n    public void addProduct(String username, String password, String productId, String name, \n                          int quantity, double price, String supplierId, int minThreshold) {\n        if (!authenticateUser(username, password)) {\n            throw new SecurityException(\"Authentication failed\");\n        }\n        \n        if (!hasPermission(username, \"ADD_PRODUCT\")) {\n            throw new SecurityException(\"Insufficient permissions\");\n        }\n        \n        if (!validateProductData(productId, name, quantity, price, supplierId, minThreshold)) {\n            throw new IllegalArgumentException(\"Invalid product data\");\n        }\n        \n        if (products.containsKey(productId)) {\n            throw new IllegalArgumentException(\"Product already exists\");\n        }\n        \n        Supplier supplier = suppliers.get(supplierId);\n        if (supplier == null) {\n            throw new IllegalArgumentException(\"Supplier not found\");\n        }\n        \n        Product product = new Product(productId, sanitizeName(name), quantity, price, \n                                    supplierId, minThreshold, LocalDateTime.now());\n        products.put(productId, product);\n        \n        if (quantity <= minThreshold) {\n            createLowStockAlert(product);\n        }\n        \n        updateInventoryFile();\n        logActivity(username, \"PRODUCT_ADDED\", productId);\n        sendSupplierNotification(supplier, \"New product added: \" + name);\n        \n        System.out.println(\"Product added: \" + productId);\n    }\n    \n    public void updateStock(String username, String password, String productId, \n                           int newQuantity, String reason) {\n        if (!authenticateUser(username, password)) {\n            throw new SecurityException(\"Authentication failed\");\n        }\n        \n        if (!hasPermission(username, \"UPDATE_STOCK\")) {\n            throw new SecurityException(\"Insufficient permissions\");\n        }\n        \n        Product product = products.get(productId);\n        if (product == null) {\n            throw new IllegalArgumentException(\"Product not found\");\n        }\n        \n        if (newQuantity < 0) {\n            throw new IllegalArgumentException(\"Quantity cannot be negative\");\n        }\n        \n        int oldQuantity = product.getQuantity();\n        product.setQuantity(newQuantity);\n        product.setLastUpdated(LocalDateTime.now());\n        \n        if (newQuantity <= product.getMinThreshold() && oldQuantity > product.getMinThreshold()) {\n            createLowStockAlert(product);\n        }\n        \n        if (newQuantity > product.getMinThreshold()) {\n            removeLowStockAlert(productId);\n        }\n        \n        updateInventoryFile();\n        logActivity(username, \"STOCK_UPDATED\", productId + \" from \" + oldQuantity + \" to \" + newQuantity);\n        \n        if (Math.abs(newQuantity - oldQuantity) > 100) {\n            sendManagerAlert(\"Large stock change for \" + product.getName() + \": \" + \n                           oldQuantity + \" -> \" + newQuantity + \". Reason: \" + reason);\n        }\n        \n        System.out.println(\"Stock updated for \" + productId + \": \" + newQuantity);\n    }\n    \n    public void generateReport(String username, String password, String reportType) {\n        if (!authenticateUser(username, password)) {\n            throw new SecurityException(\"Authentication failed\");\n        }\n        \n        if (!hasPermission(username, \"GENERATE_REPORTS\")) {\n            throw new SecurityException(\"Insufficient permissions\");\n        }\n        \n        try {\n            String filename = reportType + \"_report_\" + \n                            LocalDateTime.now().toString().replace(\":\", \"-\") + \".txt\";\n            FileWriter writer = new FileWriter(filename);\n            \n            if (\"inventory\".equals(reportType)) {\n                generateInventoryReport(writer);\n            } else if (\"alerts\".equals(reportType)) {\n                generateAlertsReport(writer);\n            } else if (\"suppliers\".equals(reportType)) {\n                generateSuppliersReport(writer);\n            } else {\n                throw new IllegalArgumentException(\"Unknown report type: \" + reportType);\n            }\n            \n            writer.close();\n            logActivity(username, \"REPORT_GENERATED\", reportType);\n            System.out.println(\"Report generated: \" + filename);\n            \n        } catch (IOException e) {\n            throw new RuntimeException(\"Failed to generate report\", e);\n        }\n    }\n    \n    private void initializeUsers() {\n        users.put(\"admin\", new User(\"admin\", hashPassword(\"admin123\"), \n                  Arrays.asList(\"ADD_PRODUCT\", \"UPDATE_STOCK\", \"GENERATE_REPORTS\", \"MANAGE_SUPPLIERS\")));\n        users.put(\"manager\", new User(\"manager\", hashPassword(\"mgr123\"), \n                  Arrays.asList(\"UPDATE_STOCK\", \"GENERATE_REPORTS\")));\n        users.put(\"clerk\", new User(\"clerk\", hashPassword(\"clerk123\"), \n                  Arrays.asList(\"UPDATE_STOCK\")));\n        \n        suppliers.put(\"SUP001\", new Supplier(\"SUP001\", \"TechCorp\", \"tech@corp.com\", \"123-456-7890\"));\n        suppliers.put(\"SUP002\", new Supplier(\"SUP002\", \"OfficeSupply\", \"orders@office.com\", \"987-654-3210\"));\n    }\n    \n    private void setupEmailConfiguration() {\n        emailConfig = new Properties();\n        emailConfig.put(\"mail.smtp.host\", \"smtp.company.com\");\n        emailConfig.put(\"mail.smtp.port\", \"587\");\n        emailConfig.put(\"mail.smtp.auth\", \"true\");\n        emailConfig.put(\"mail.smtp.starttls.enable\", \"true\");\n    }\n    \n    private boolean authenticateUser(String username, String password) {\n        User user = users.get(username);\n        return user != null && user.getPasswordHash().equals(hashPassword(password));\n    }\n    \n    private boolean hasPermission(String username, String permission) {\n        User user = users.get(username);\n        return user != null && user.getPermissions().contains(permission);\n    }\n    \n    private String hashPassword(String password) {\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n            byte[] hash = md.digest(password.getBytes());\n            return Base64.getEncoder().encodeToString(hash);\n        } catch (Exception e) {\n            throw new RuntimeException(\"Password hashing failed\", e);\n        }\n    }\n    \n    private boolean validateProductData(String productId, String name, int quantity, \n                                       double price, String supplierId, int minThreshold) {\n        return productId != null && !productId.trim().isEmpty() &&\n               name != null && !name.trim().isEmpty() &&\n               quantity >= 0 && price >= 0 && minThreshold >= 0 &&\n               supplierId != null && !supplierId.trim().isEmpty();\n    }\n    \n    private String sanitizeName(String name) {\n        return name.replaceAll(\"[<>\\\"'&]\", \"\").trim();\n    }\n    \n    private void createLowStockAlert(Product product) {\n        StockAlert alert = new StockAlert(product.getId(), product.getName(), \n                                        product.getQuantity(), product.getMinThreshold());\n        alerts.add(alert);\n        \n        String message = \"LOW STOCK ALERT: \" + product.getName() + \" (\" + product.getId() + \") \" +\n                        \"has only \" + product.getQuantity() + \" units remaining. \" +\n                        \"Minimum threshold: \" + product.getMinThreshold();\n        \n        sendManagerAlert(message);\n        \n        Supplier supplier = suppliers.get(product.getSupplierId());\n        if (supplier != null) {\n            sendSupplierNotification(supplier, \"Reorder needed for: \" + product.getName());\n        }\n    }\n    \n    private void removeLowStockAlert(String productId) {\n        alerts.removeIf(alert -> alert.getProductId().equals(productId));\n    }\n    \n    private void sendManagerAlert(String message) {\n        try {\n            Session session = Session.getInstance(emailConfig);\n            Message email = new MimeMessage(session);\n            email.setFrom(new InternetAddress(\"inventory@company.com\"));\n            email.setRecipients(Message.RecipientType.TO, \n                              InternetAddress.parse(\"manager@company.com\"));\n            email.setSubject(\"Inventory Alert\");\n            email.setText(message + \"\\n\\nTime: \" + LocalDateTime.now());\n            \n            System.out.println(\"Manager alert sent: \" + message);\n            // Transport.send(email); // Commented out for demo\n            \n        } catch (MessagingException e) {\n            System.err.println(\"Failed to send manager alert: \" + e.getMessage());\n        }\n    }\n    \n    private void sendSupplierNotification(Supplier supplier, String message) {\n        try {\n            Session session = Session.getInstance(emailConfig);\n            Message email = new MimeMessage(session);\n            email.setFrom(new InternetAddress(\"inventory@company.com\"));\n            email.setRecipients(Message.RecipientType.TO, \n                              InternetAddress.parse(supplier.getEmail()));\n            email.setSubject(\"Supplier Notification\");\n            email.setText(message + \"\\n\\nBest regards,\\nInventory Team\");\n            \n            System.out.println(\"Supplier notification sent to \" + supplier.getName() + \": \" + message);\n            // Transport.send(email); // Commented out for demo\n            \n        } catch (MessagingException e) {\n            System.err.println(\"Failed to send supplier notification: \" + e.getMessage());\n        }\n    }\n    \n    private void generateInventoryReport(FileWriter writer) throws IOException {\n        writer.write(\"INVENTORY REPORT\\n\");\n        writer.write(\"Generated: \" + LocalDateTime.now() + \"\\n\\n\");\n        \n        for (Product product : products.values()) {\n            writer.write(\"Product: \" + product.getName() + \" (\" + product.getId() + \")\\n\");\n            writer.write(\"Quantity: \" + product.getQuantity() + \"\\n\");\n            writer.write(\"Price: $\" + product.getPrice() + \"\\n\");\n            writer.write(\"Supplier: \" + suppliers.get(product.getSupplierId()).getName() + \"\\n\\n\");\n        }\n    }\n    \n    private void generateAlertsReport(FileWriter writer) throws IOException {\n        writer.write(\"STOCK ALERTS REPORT\\n\");\n        writer.write(\"Generated: \" + LocalDateTime.now() + \"\\n\\n\");\n        \n        for (StockAlert alert : alerts) {\n            writer.write(\"Alert: \" + alert.getProductName() + \" (\" + alert.getProductId() + \")\\n\");\n            writer.write(\"Current Stock: \" + alert.getCurrentStock() + \"\\n\");\n            writer.write(\"Minimum Threshold: \" + alert.getMinThreshold() + \"\\n\\n\");\n        }\n    }\n    \n    private void generateSuppliersReport(FileWriter writer) throws IOException {\n        writer.write(\"SUPPLIERS REPORT\\n\");\n        writer.write(\"Generated: \" + LocalDateTime.now() + \"\\n\\n\");\n        \n        for (Supplier supplier : suppliers.values()) {\n            writer.write(\"Supplier: \" + supplier.getName() + \" (\" + supplier.getId() + \")\\n\");\n            writer.write(\"Email: \" + supplier.getEmail() + \"\\n\");\n            writer.write(\"Phone: \" + supplier.getPhone() + \"\\n\\n\");\n        }\n    }\n    \n    private void updateInventoryFile() {\n        try {\n            FileWriter writer = new FileWriter(\"inventory.dat\");\n            for (Product product : products.values()) {\n                writer.write(product.getId() + \"|\" + product.getName() + \"|\" + \n                           product.getQuantity() + \"|\" + product.getPrice() + \"|\" + \n                           product.getSupplierId() + \"|\" + product.getMinThreshold() + \"\\n\");\n            }\n            writer.close();\n        } catch (IOException e) {\n            System.err.println(\"Failed to update inventory file: \" + e.getMessage());\n        }\n    }\n    \n    private void loadDataFromFiles() {\n        try {\n            File file = new File(\"inventory.dat\");\n            if (file.exists()) {\n                BufferedReader reader = new BufferedReader(new FileReader(file));\n                String line;\n                while ((line = reader.readLine()) != null) {\n                    String[] parts = line.split(\"\\\\|\");\n                    if (parts.length == 6) {\n                        Product product = new Product(parts[0], parts[1], \n                                                    Integer.parseInt(parts[2]), \n                                                    Double.parseDouble(parts[3]), \n                                                    parts[4], Integer.parseInt(parts[5]), \n                                                    LocalDateTime.now());\n                        products.put(product.getId(), product);\n                    }\n                }\n                reader.close();\n            }\n        } catch (Exception e) {\n            System.err.println(\"Failed to load inventory data: \" + e.getMessage());\n        }\n    }\n    \n    private void logActivity(String username, String action, String details) {\n        try {\n            FileWriter writer = new FileWriter(\"inventory_log.txt\", true);\n            writer.write(LocalDateTime.now() + \" - User: \" + username + \n                        \", Action: \" + action + \", Details: \" + details + \"\\n\");\n            writer.close();\n        } catch (IOException e) {\n            System.err.println(\"Failed to log activity: \" + e.getMessage());\n        }\n    }\n}",
      "output": "import java.util.*;\nimport java.io.*;\nimport java.time.LocalDateTime;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.security.MessageDigest;\nimport javax.mail.*;\nimport javax.mail.internet.*;\n\npublic class InventoryService {\n    private Map<String, Product> products = new ConcurrentHashMap<>();\n    private AuthenticationService authService;\n    private ProductValidator productValidator;\n    private StockAlertManager alertManager;\n    private NotificationService notificationService;\n    private ReportGenerator reportGenerator;\n    private InventoryPersistence inventoryPersistence;\n    private ActivityLogger activityLogger;\n    \n    public InventoryService(AuthenticationService authService, ProductValidator productValidator,\n                           StockAlertManager alertManager, NotificationService notificationService,\n                           ReportGenerator reportGenerator, InventoryPersistence inventoryPersistence,\n                           ActivityLogger activityLogger) {\n        this.authService = authService;\n        this.productValidator = productValidator;\n        this.alertManager = alertManager;\n        this.notificationService = notificationService;\n        this.reportGenerator = reportGenerator;\n        this.inventoryPersistence = inventoryPersistence;\n        this.activityLogger = activityLogger;\n        \n        loadExistingData();\n    }\n    \n    public void addProduct(String username, String password, String productId, String name,\n                          int quantity, double price, String supplierId, int minThreshold) {\n        authService.authenticate(username, password);\n        authService.checkPermission(username, \"ADD_PRODUCT\");\n        \n        productValidator.validateProductData(productId, name, quantity, price, supplierId, minThreshold);\n        \n        if (products.containsKey(productId)) {\n            throw new IllegalArgumentException(\"Product already exists\");\n        }\n        \n        Product product = new Product(productId, productValidator.sanitizeName(name), quantity, price,\n                                    supplierId, minThreshold, LocalDateTime.now());\n        products.put(productId, product);\n        \n        alertManager.checkAndCreateAlert(product);\n        inventoryPersistence.saveInventory(products.values());\n        activityLogger.logActivity(username, \"PRODUCT_ADDED\", productId);\n        notificationService.notifySupplierOfNewProduct(supplierId, name);\n        \n        System.out.println(\"Product added: \" + productId);\n    }\n    \n    public void updateStock(String username, String password, String productId,\n                           int newQuantity, String reason) {\n        authService.authenticate(username, password);\n        authService.checkPermission(username, \"UPDATE_STOCK\");\n        \n        Product product = getProductById(productId);\n        productValidator.validateQuantity(newQuantity);\n        \n        int oldQuantity = product.getQuantity();\n        product.setQuantity(newQuantity);\n        product.setLastUpdated(LocalDateTime.now());\n        \n        alertManager.handleStockChange(product, oldQuantity);\n        inventoryPersistence.saveInventory(products.values());\n        activityLogger.logActivity(username, \"STOCK_UPDATED\", productId + \" from \" + oldQuantity + \" to \" + newQuantity);\n        \n        if (Math.abs(newQuantity - oldQuantity) > 100) {\n            notificationService.sendLargeStockChangeAlert(product, oldQuantity, newQuantity, reason);\n        }\n        \n        System.out.println(\"Stock updated for \" + productId + \": \" + newQuantity);\n    }\n    \n    public void generateReport(String username, String password, String reportType) {\n        authService.authenticate(username, password);\n        authService.checkPermission(username, \"GENERATE_REPORTS\");\n        \n        String filename = reportGenerator.generateReport(reportType, products.values(), alertManager.getAlerts());\n        activityLogger.logActivity(username, \"REPORT_GENERATED\", reportType);\n        \n        System.out.println(\"Report generated: \" + filename);\n    }\n    \n    private Product getProductById(String productId) {\n        Product product = products.get(productId);\n        if (product == null) {\n            throw new IllegalArgumentException(\"Product not found\");\n        }\n        return product;\n    }\n    \n    private void loadExistingData() {\n        Collection<Product> loadedProducts = inventoryPersistence.loadInventory();\n        for (Product product : loadedProducts) {\n            products.put(product.getId(), product);\n            alertManager.checkAndCreateAlert(product);\n        }\n    }\n}\n\npublic class AuthenticationService {\n    private Map<String, User> users = new ConcurrentHashMap<>();\n    private Map<String, Supplier> suppliers = new ConcurrentHashMap<>();\n    \n    public AuthenticationService() {\n        initializeUsers();\n    }\n    \n    public void authenticate(String username, String password) {\n        if (!authenticateUser(username, password)) {\n            throw new SecurityException(\"Authentication failed\");\n        }\n    }\n    \n    public void checkPermission(String username, String permission) {\n        if (!hasPermission(username, permission)) {\n            throw new SecurityException(\"Insufficient permissions\");\n        }\n    }\n    \n    public Supplier getSupplier(String supplierId) {\n        return suppliers.get(supplierId);\n    }\n    \n    private void initializeUsers() {\n        users.put(\"admin\", new User(\"admin\", PasswordUtil.hashPassword(\"admin123\"),\n                  Arrays.asList(\"ADD_PRODUCT\", \"UPDATE_STOCK\", \"GENERATE_REPORTS\", \"MANAGE_SUPPLIERS\")));\n        users.put(\"manager\", new User(\"manager\", PasswordUtil.hashPassword(\"mgr123\"),\n                  Arrays.asList(\"UPDATE_STOCK\", \"GENERATE_REPORTS\")));\n        users.put(\"clerk\", new User(\"clerk\", PasswordUtil.hashPassword(\"clerk123\"),\n                  Arrays.asList(\"UPDATE_STOCK\")));\n        \n        suppliers.put(\"SUP001\", new Supplier(\"SUP001\", \"TechCorp\", \"tech@corp.com\", \"123-456-7890\"));\n        suppliers.put(\"SUP002\", new Supplier(\"SUP002\", \"OfficeSupply\", \"orders@office.com\", \"987-654-3210\"));\n    }\n    \n    private boolean authenticateUser(String username, String password) {\n        User user = users.get(username);\n        return user != null && user.getPasswordHash().equals(PasswordUtil.hashPassword(password));\n    }\n    \n    private boolean hasPermission(String username, String permission) {\n        User user = users.get(username);\n        return user != null && user.getPermissions().contains(permission);\n    }\n}\n\npublic class ProductValidator {\n    public void validateProductData(String productId, String name, int quantity,\n                                   double price, String supplierId, int minThreshold) {\n        if (productId == null || productId.trim().isEmpty()) {\n            throw new IllegalArgumentException(\"Product ID cannot be empty\");\n        }\n        if (name == null || name.trim().isEmpty()) {\n            throw new IllegalArgumentException(\"Product name cannot be empty\");\n        }\n        if (quantity < 0 || price < 0 || minThreshold < 0) {\n            throw new IllegalArgumentException(\"Quantity, price, and threshold must be non-negative\");\n        }\n        if (supplierId == null || supplierId.trim().isEmpty()) {\n            throw new IllegalArgumentException(\"Supplier ID cannot be empty\");\n        }\n    }\n    \n    public void validateQuantity(int quantity) {\n        if (quantity < 0) {\n            throw new IllegalArgumentException(\"Quantity cannot be negative\");\n        }\n    }\n    \n    public String sanitizeName(String name) {\n        return name.replaceAll(\"[<>\\\"'&]\", \"\").trim();\n    }\n}\n\npublic class StockAlertManager {\n    private List<StockAlert> alerts = new ArrayList<>();\n    private NotificationService notificationService;\n    \n    public StockAlertManager(NotificationService notificationService) {\n        this.notificationService = notificationService;\n    }\n    \n    public void checkAndCreateAlert(Product product) {\n        if (product.getQuantity() <= product.getMinThreshold()) {\n            createLowStockAlert(product);\n        }\n    }\n    \n    public void handleStockChange(Product product, int oldQuantity) {\n        if (product.getQuantity() <= product.getMinThreshold() && oldQuantity > product.getMinThreshold()) {\n            createLowStockAlert(product);\n        }\n        \n        if (product.getQuantity() > product.getMinThreshold()) {\n            removeLowStockAlert(product.getId());\n        }\n    }\n    \n    public List<StockAlert> getAlerts() {\n        return new ArrayList<>(alerts);\n    }\n    \n    private void createLowStockAlert(Product product) {\n        StockAlert alert = new StockAlert(product.getId(), product.getName(),\n                                        product.getQuantity(), product.getMinThreshold());\n        alerts.add(alert);\n        notificationService.sendLowStockAlert(product);\n    }\n    \n    private void removeLowStockAlert(String productId) {\n        alerts.removeIf(alert -> alert.getProductId().equals(productId));\n    }\n}\n\npublic class NotificationService {\n    private Properties emailConfig;\n    private AuthenticationService authService;\n    \n    public NotificationService(AuthenticationService authService) {\n        this.authService = authService;\n        setupEmailConfiguration();\n    }\n    \n    public void sendLowStockAlert(Product product) {\n        String message = \"LOW STOCK ALERT: \" + product.getName() + \" (\" + product.getId() + \") \" +\n                        \"has only \" + product.getQuantity() + \" units remaining. \" +\n                        \"Minimum threshold: \" + product.getMinThreshold();\n        \n        sendManagerAlert(message);\n        notifySupplierOfReorder(product.getSupplierId(), product.getName());\n    }\n    \n    public void sendLargeStockChangeAlert(Product product, int oldQuantity, int newQuantity, String reason) {\n        String message = \"Large stock change for \" + product.getName() + \": \" +\n                        oldQuantity + \" -> \" + newQuantity + \". Reason: \" + reason;\n        sendManagerAlert(message);\n    }\n    \n    public void notifySupplierOfNewProduct(String supplierId, String productName) {\n        Supplier supplier = authService.getSupplier(supplierId);\n        if (supplier != null) {\n            sendSupplierNotification(supplier, \"New product added: \" + productName);\n        }\n    }\n    \n    public void notifySupplierOfReorder(String supplierId, String productName) {\n        Supplier supplier = authService.getSupplier(supplierId);\n        if (supplier != null) {\n            sendSupplierNotification(supplier, \"Reorder needed for: \" + productName);\n        }\n    }\n    \n    private void setupEmailConfiguration() {\n        emailConfig = new Properties();\n        emailConfig.put(\"mail.smtp.host\", \"smtp.company.com\");\n        emailConfig.put(\"mail.smtp.port\", \"587\");\n        emailConfig.put(\"mail.smtp.auth\", \"true\");\n        emailConfig.put(\"mail.smtp.starttls.enable\", \"true\");\n    }\n    \n    private void sendManagerAlert(String message) {\n        try {\n            Session session = Session.getInstance(emailConfig);\n            Message email = new MimeMessage(session);\n            email.setFrom(new InternetAddress(\"inventory@company.com\"));\n            email.setRecipients(Message.RecipientType.TO,\n                              InternetAddress.parse(\"manager@company.com\"));\n            email.setSubject(\"Inventory Alert\");\n            email.setText(message + \"\\n\\nTime: \" + LocalDateTime.now());\n            \n            System.out.println(\"Manager alert sent: \" + message);\n            \n        } catch (MessagingException e) {\n            System.err.println(\"Failed to send manager alert: \" + e.getMessage());\n        }\n    }\n    \n    private void sendSupplierNotification(Supplier supplier, String message) {\n        try {\n            Session session = Session.getInstance(emailConfig);\n            Message email = new MimeMessage(session);\n            email.setFrom(new InternetAddress(\"inventory@company.com\"));\n            email.setRecipients(Message.RecipientType.TO,\n                              InternetAddress.parse(supplier.getEmail()));\n            email.setSubject(\"Supplier Notification\");\n            email.setText(message + \"\\n\\nBest regards,\\nInventory Team\");\n            \n            System.out.println(\"Supplier notification sent to \" + supplier.getName() + \": \" + message);\n            \n        } catch (MessagingException e) {\n            System.err.println(\"Failed to send supplier notification: \" + e.getMessage());\n        }\n    }\n}\n\npublic class ReportGenerator {\n    public String generateReport(String reportType, Collection<Product> products, List<StockAlert> alerts) {\n        try {\n            String filename = reportType + \"_report_\" +\n                            LocalDateTime.now().toString().replace(\":\", \"-\") + \".txt\";\n            FileWriter writer = new FileWriter(filename);\n            \n            switch (reportType) {\n                case \"inventory\":\n                    generateInventoryReport(writer, products);\n                    break;\n                case \"alerts\":\n                    generateAlertsReport(writer, alerts);\n                    break;\n                case \"suppliers\":\n                    generateSuppliersReport(writer);\n                    break;\n                default:\n                    throw new IllegalArgumentException(\"Unknown report type: \" + reportType);\n            }\n            \n            writer.close();\n            return filename;\n            \n        } catch (IOException e) {\n            throw new RuntimeException(\"Failed to generate report\", e);\n        }\n    }\n    \n    private void generateInventoryReport(FileWriter writer, Collection<Product> products) throws IOException {\n        writer.write(\"INVENTORY REPORT\\n\");\n        writer.write(\"Generated: \" + LocalDateTime.now() + \"\\n\\n\");\n        \n        for (Product product : products) {\n            writer.write(\"Product: \" + product.getName() + \" (\" + product.getId() + \")\\n\");\n            writer.write(\"Quantity: \" + product.getQuantity() + \"\\n\");\n            writer.write(\"Price: $\" + product.getPrice() + \"\\n\\n\");\n        }\n    }\n    \n    private void generateAlertsReport(FileWriter writer, List<StockAlert> alerts) throws IOException {\n        writer.write(\"STOCK ALERTS REPORT\\n\");\n        writer.write(\"Generated: \" + LocalDateTime.now() + \"\\n\\n\");\n        \n        for (StockAlert alert : alerts) {\n            writer.write(\"Alert: \" + alert.getProductName() + \" (\" + alert.getProductId() + \")\\n\");\n            writer.write(\"Current Stock: \" + alert.getCurrentStock() + \"\\n\");\n            writer.write(\"Minimum Threshold: \" + alert.getMinThreshold() + \"\\n\\n\");\n        }\n    }\n    \n    private void generateSuppliersReport(FileWriter writer) throws IOException {\n        writer.write(\"SUPPLIERS REPORT\\n\");\n        writer.write(\"Generated: \" + LocalDateTime.now() + \"\\n\\n\");\n        writer.write(\"Report generation completed.\\n\");\n    }\n}\n\npublic class InventoryPersistence {\n    public void saveInventory(Collection<Product> products) {\n        try {\n            FileWriter writer = new FileWriter(\"inventory.dat\");\n            for (Product product : products) {\n                writer.write(product.getId() + \"|\" + product.getName() + \"|\" +\n                           product.getQuantity() + \"|\" + product.getPrice() + \"|\" +\n                           product.getSupplierId() + \"|\" + product.getMinThreshold() + \"\\n\");\n            }\n            writer.close();\n        } catch (IOException e) {\n            throw new RuntimeException(\"Failed to save inventory\", e);\n        }\n    }\n    \n    public Collection<Product> loadInventory() {\n        List<Product> products = new ArrayList<>();\n        try {\n            File file = new File(\"inventory.dat\");\n            if (file.exists()) {\n                BufferedReader reader = new BufferedReader(new FileReader(file));\n                String line;\n                while ((line = reader.readLine()) != null) {\n                    String[] parts = line.split(\"\\\\|\");\n                    if (parts.length == 6) {\n                        Product product = new Product(parts[0], parts[1],\n                                                    Integer.parseInt(parts[2]),\n                                                    Double.parseDouble(parts[3]),\n                                                    parts[4], Integer.parseInt(parts[5]),\n                                                    LocalDateTime.now());\n                        products.add(product);\n                    }\n                }\n                reader.close();\n            }\n        } catch (Exception e) {\n            System.err.println(\"Failed to load inventory data: \" + e.getMessage());\n        }\n        return products;\n    }\n}\n\npublic class ActivityLogger {\n    public void logActivity(String username, String action, String details) {\n        try {\n            FileWriter writer = new FileWriter(\"inventory_log.txt\", true);\n            writer.write(LocalDateTime.now() + \" - User: \" + username +\n                        \", Action: \" + action + \", Details: \" + details + \"\\n\");\n            writer.close();\n        } catch (IOException e) {\n            throw new RuntimeException(\"Failed to log activity\", e);\n        }\n    }\n}\n\npublic class PasswordUtil {\n    public static String hashPassword(String password) {\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n            byte[] hash = md.digest(password.getBytes());\n            return Base64.getEncoder().encodeToString(hash);\n        } catch (Exception e) {\n            throw new RuntimeException(\"Password hashing failed\", e);\n        }\n    }\n}",
      "level": "HARD",
      "language": "JAVA",
      "violation": "SRP",
       "description": "Inventory stock management system"
    },
    {
      "input": "import java.util.*;\nimport java.io.*;\nimport java.time.LocalDateTime;\nimport java.time.format.DateTimeFormatter;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.security.SecureRandom;\n\npublic class EventManagementSystem {\n    private Map<String, Event> events = new ConcurrentHashMap<>();\n    private Map<String, User> registeredUsers = new ConcurrentHashMap<>();\n    private Map<String, List<String>> eventRegistrations = new ConcurrentHashMap<>();\n    private Map<String, Double> eventRevenue = new ConcurrentHashMap<>();\n    private SecureRandom random = new SecureRandom();\n    private int eventIdCounter = 1000;\n    \n    public EventManagementSystem() {\n        initializeTestData();\n    }\n    \n    public void createEvent(String organizerEmail, String password, String eventName, \n                           String description, String venue, LocalDateTime startTime, \n                           LocalDateTime endTime, double ticketPrice, int maxCapacity) {\n        \n        if (!authenticateUser(organizerEmail, password)) {\n            throw new SecurityException(\"Invalid credentials\");\n        }\n        \n        User organizer = registeredUsers.get(organizerEmail);\n        if (!hasPermission(organizer, \"CREATE_EVENT\")) {\n            throw new SecurityException(\"User does not have permission to create events\");\n        }\n        \n        if (!validateEventData(eventName, description, venue, startTime, endTime, ticketPrice, maxCapacity)) {\n            throw new IllegalArgumentException(\"Invalid event data provided\");\n        }\n        \n        String eventId = generateEventId();\n        Event event = new Event(eventId, sanitizeInput(eventName), sanitizeInput(description), \n                               sanitizeInput(venue), startTime, endTime, ticketPrice, maxCapacity, organizerEmail);\n        \n        events.put(eventId, event);\n        eventRegistrations.put(eventId, new ArrayList<>());\n        eventRevenue.put(eventId, 0.0);\n        \n        sendEventCreationNotification(organizer, event);\n        logActivity(organizerEmail, \"EVENT_CREATED\", eventId + \" - \" + eventName);\n        updateEventWebsite(event);\n        \n        System.out.println(\"Event created: \" + eventId + \" - \" + eventName);\n    }\n    \n    public void registerForEvent(String userEmail, String password, String eventId, int numberOfTickets) {\n        if (!authenticateUser(userEmail, password)) {\n            throw new SecurityException(\"Invalid credentials\");\n        }\n        \n        Event event = events.get(eventId);\n        if (event == null) {\n            throw new IllegalArgumentException(\"Event not found\");\n        }\n        \n        if (event.getStartTime().isBefore(LocalDateTime.now())) {\n            throw new IllegalArgumentException(\"Cannot register for past events\");\n        }\n        \n        List<String> registrations = eventRegistrations.get(eventId);\n        if (registrations.size() + numberOfTickets > event.getMaxCapacity()) {\n            throw new IllegalArgumentException(\"Not enough capacity available\");\n        }\n        \n        if (numberOfTickets <= 0 || numberOfTickets > 10) {\n            throw new IllegalArgumentException(\"Invalid number of tickets (1-10 allowed)\");\n        }\n        \n        double totalCost = event.getTicketPrice() * numberOfTickets;\n        if (!processPayment(userEmail, totalCost)) {\n            throw new RuntimeException(\"Payment processing failed\");\n        }\n        \n        for (int i = 0; i < numberOfTickets; i++) {\n            registrations.add(userEmail);\n        }\n        \n        eventRevenue.put(eventId, eventRevenue.get(eventId) + totalCost);\n        \n        generateTickets(userEmail, event, numberOfTickets);\n        sendRegistrationConfirmation(userEmail, event, numberOfTickets, totalCost);\n        logActivity(userEmail, \"REGISTERED_FOR_EVENT\", eventId + \" - \" + numberOfTickets + \" tickets\");\n        \n        if (registrations.size() >= event.getMaxCapacity()) {\n            sendEventFullNotification(event);\n        }\n        \n        System.out.println(\"User \" + userEmail + \" registered for event \" + eventId);\n    }\n    \n    public void generateEventReport(String organizerEmail, String password, String eventId) {\n        if (!authenticateUser(organizerEmail, password)) {\n            throw new SecurityException(\"Invalid credentials\");\n        }\n        \n        Event event = events.get(eventId);\n        if (event == null) {\n            throw new IllegalArgumentException(\"Event not found\");\n        }\n        \n        if (!event.getOrganizerEmail().equals(organizerEmail)) {\n            User user = registeredUsers.get(organizerEmail);\n            if (!hasPermission(user, \"VIEW_ALL_REPORTS\")) {\n                throw new SecurityException(\"No permission to view this event's report\");\n            }\n        }\n        \n        try {\n            String filename = \"event_report_\" + eventId + \"_\" + \n                            LocalDateTime.now().format(DateTimeFormatter.ofPattern(\"yyyyMMdd_HHmmss\")) + \".txt\";\n            \n            FileWriter writer = new FileWriter(filename);\n            \n            writer.write(\"EVENT REPORT\\n\");\n            writer.write(\"Event: \" + event.getEventName() + \"\\n\");\n            writer.write(\"Event ID: \" + eventId + \"\\n\");\n            writer.write(\"Organizer: \" + event.getOrganizerEmail() + \"\\n\");\n            writer.write(\"Venue: \" + event.getVenue() + \"\\n\");\n            writer.write(\"Start Time: \" + event.getStartTime() + \"\\n\");\n            writer.write(\"Ticket Price: $\" + event.getTicketPrice() + \"\\n\");\n            writer.write(\"Max Capacity: \" + event.getMaxCapacity() + \"\\n\\n\");\n            \n            List<String> registrations = eventRegistrations.get(eventId);\n            writer.write(\"Registrations: \" + registrations.size() + \"\\n\");\n            writer.write(\"Revenue: $\" + eventRevenue.get(eventId) + \"\\n\");\n            writer.write(\"Occupancy Rate: \" + String.format(\"%.1f\", (registrations.size() * 100.0 / event.getMaxCapacity())) + \"%\\n\\n\");\n            \n            Map<String, Integer> userTicketCounts = new HashMap<>();\n            for (String email : registrations) {\n                userTicketCounts.put(email, userTicketCounts.getOrDefault(email, 0) + 1);\n            }\n            \n            writer.write(\"Registered Users:\\n\");\n            for (Map.Entry<String, Integer> entry : userTicketCounts.entrySet()) {\n                writer.write(\"- \" + entry.getKey() + \": \" + entry.getValue() + \" ticket(s)\\n\");\n            }\n            \n            writer.close();\n            \n            logActivity(organizerEmail, \"REPORT_GENERATED\", eventId);\n            sendReportNotification(organizerEmail, filename);\n            \n            System.out.println(\"Report generated: \" + filename);\n            \n        } catch (IOException e) {\n            throw new RuntimeException(\"Failed to generate report: \" + e.getMessage());\n        }\n    }\n    \n    private void initializeTestData() {\n        registeredUsers.put(\"organizer@company.com\", \n            new User(\"organizer@company.com\", \"John Organizer\", hashPassword(\"org123\"), \n                    Arrays.asList(\"CREATE_EVENT\", \"VIEW_ALL_REPORTS\")));\n        registeredUsers.put(\"admin@company.com\", \n            new User(\"admin@company.com\", \"Admin User\", hashPassword(\"admin123\"), \n                    Arrays.asList(\"CREATE_EVENT\", \"VIEW_ALL_REPORTS\")));\n        registeredUsers.put(\"user@company.com\", \n            new User(\"user@company.com\", \"Regular User\", hashPassword(\"user123\"), \n                    Arrays.asList()));\n    }\n    \n    private boolean authenticateUser(String email, String password) {\n        User user = registeredUsers.get(email);\n        return user != null && user.getPasswordHash().equals(hashPassword(password));\n    }\n    \n    private boolean hasPermission(User user, String permission) {\n        return user != null && user.getPermissions().contains(permission);\n    }\n    \n    private String hashPassword(String password) {\n        return \"hashed_\" + password;\n    }\n    \n    private boolean validateEventData(String eventName, String description, String venue, \n                                     LocalDateTime startTime, LocalDateTime endTime, \n                                     double ticketPrice, int maxCapacity) {\n        return eventName != null && !eventName.trim().isEmpty() && \n               description != null && venue != null && !venue.trim().isEmpty() &&\n               startTime != null && endTime != null && startTime.isBefore(endTime) &&\n               startTime.isAfter(LocalDateTime.now()) && ticketPrice >= 0 && maxCapacity > 0;\n    }\n    \n    private String sanitizeInput(String input) {\n        if (input == null) return \"\";\n        return input.replaceAll(\"[<>\\\"'&]\", \"\").trim();\n    }\n    \n    private String generateEventId() {\n        return \"EVT\" + (eventIdCounter++);\n    }\n    \n    private boolean processPayment(String userEmail, double amount) {\n        System.out.println(\"Processing payment of $\" + amount + \" for user \" + userEmail);\n        return random.nextDouble() > 0.1;\n    }\n    \n    private void generateTickets(String userEmail, Event event, int numberOfTickets) {\n        try {\n            String filename = \"tickets_\" + userEmail.replace(\"@\", \"_\") + \"_\" + event.getEventId() + \".txt\";\n            FileWriter writer = new FileWriter(filename);\n            \n            for (int i = 1; i <= numberOfTickets; i++) {\n                writer.write(\"TICKET #\" + random.nextInt(100000) + \"\\n\");\n                writer.write(\"Event: \" + event.getEventName() + \"\\n\");\n                writer.write(\"Venue: \" + event.getVenue() + \"\\n\");\n                writer.write(\"Date: \" + event.getStartTime().format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\")) + \"\\n\");\n                writer.write(\"Holder: \" + userEmail + \"\\n\");\n                writer.write(\"================\\n\\n\");\n            }\n            \n            writer.close();\n            System.out.println(\"Tickets generated: \" + filename);\n            \n        } catch (IOException e) {\n            System.err.println(\"Failed to generate tickets: \" + e.getMessage());\n        }\n    }\n    \n    private void sendEventCreationNotification(User organizer, Event event) {\n        System.out.println(\"Email sent to \" + organizer.getEmail() + \": Your event '\" + \n                         event.getEventName() + \"' has been created successfully.\");\n    }\n    \n    private void sendRegistrationConfirmation(String userEmail, Event event, int numberOfTickets, double totalCost) {\n        System.out.println(\"Email sent to \" + userEmail + \": Registration confirmed for '\" + \n                         event.getEventName() + \"'. Tickets: \" + numberOfTickets + \", Total: $\" + totalCost);\n    }\n    \n    private void sendEventFullNotification(Event event) {\n        System.out.println(\"Email sent to \" + event.getOrganizerEmail() + \": Event '\" + \n                         event.getEventName() + \"' is now fully booked.\");\n    }\n    \n    private void sendReportNotification(String organizerEmail, String filename) {\n        System.out.println(\"Email sent to \" + organizerEmail + \": Event report generated: \" + filename);\n    }\n    \n    private void logActivity(String userEmail, String action, String details) {\n        try {\n            FileWriter writer = new FileWriter(\"event_system.log\", true);\n            writer.write(LocalDateTime.now().format(DateTimeFormatter.ISO_LOCAL_DATE_TIME) + \n                        \" - User: \" + userEmail + \", Action: \" + action + \", Details: \" + details + \"\\n\");\n            writer.close();\n        } catch (IOException e) {\n            System.err.println(\"Failed to log activity: \" + e.getMessage());\n        }\n    }\n    \n    private void updateEventWebsite(Event event) {\n        System.out.println(\"Updating website with event information for: \" + event.getEventName());\n    }\n}",
      "output": "import java.util.*;\nimport java.io.*;\nimport java.time.LocalDateTime;\nimport java.time.format.DateTimeFormatter;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.security.SecureRandom;\n\npublic class EventService {\n    private Map<String, Event> events = new ConcurrentHashMap<>();\n    private Map<String, List<String>> eventRegistrations = new ConcurrentHashMap<>();\n    private Map<String, Double> eventRevenue = new ConcurrentHashMap<>();\n    private AuthenticationService authService;\n    private EventValidator eventValidator;\n    private PaymentProcessor paymentProcessor;\n    private TicketGenerator ticketGenerator;\n    private NotificationService notificationService;\n    private ReportService reportService;\n    private ActivityLogger activityLogger;\n    private WebsiteUpdater websiteUpdater;\n    private EventIdGenerator idGenerator;\n    \n    public EventService(AuthenticationService authService, EventValidator eventValidator,\n                       PaymentProcessor paymentProcessor, TicketGenerator ticketGenerator,\n                       NotificationService notificationService, ReportService reportService,\n                       ActivityLogger activityLogger, WebsiteUpdater websiteUpdater,\n                       EventIdGenerator idGenerator) {\n        this.authService = authService;\n        this.eventValidator = eventValidator;\n        this.paymentProcessor = paymentProcessor;\n        this.ticketGenerator = ticketGenerator;\n        this.notificationService = notificationService;\n        this.reportService = reportService;\n        this.activityLogger = activityLogger;\n        this.websiteUpdater = websiteUpdater;\n        this.idGenerator = idGenerator;\n    }\n    \n    public void createEvent(String organizerEmail, String password, String eventName,\n                           String description, String venue, LocalDateTime startTime,\n                           LocalDateTime endTime, double ticketPrice, int maxCapacity) {\n        \n        authService.authenticate(organizerEmail, password);\n        authService.checkPermission(organizerEmail, \"CREATE_EVENT\");\n        \n        eventValidator.validateEventData(eventName, description, venue, startTime, endTime, ticketPrice, maxCapacity);\n        \n        String eventId = idGenerator.generate();\n        Event event = new Event(eventId, eventValidator.sanitizeInput(eventName), \n                               eventValidator.sanitizeInput(description),\n                               eventValidator.sanitizeInput(venue), startTime, endTime, \n                               ticketPrice, maxCapacity, organizerEmail);\n        \n        events.put(eventId, event);\n        eventRegistrations.put(eventId, new ArrayList<>());\n        eventRevenue.put(eventId, 0.0);\n        \n        notificationService.sendEventCreationNotification(organizerEmail, event);\n        activityLogger.logActivity(organizerEmail, \"EVENT_CREATED\", eventId + \" - \" + eventName);\n        websiteUpdater.updateEventWebsite(event);\n        \n        System.out.println(\"Event created: \" + eventId + \" - \" + eventName);\n    }\n    \n    public void registerForEvent(String userEmail, String password, String eventId, int numberOfTickets) {\n        authService.authenticate(userEmail, password);\n        \n        Event event = getEventById(eventId);\n        validateRegistration(event, numberOfTickets);\n        \n        List<String> registrations = eventRegistrations.get(eventId);\n        if (registrations.size() + numberOfTickets > event.getMaxCapacity()) {\n            throw new IllegalArgumentException(\"Not enough capacity available\");\n        }\n        \n        double totalCost = event.getTicketPrice() * numberOfTickets;\n        paymentProcessor.processPayment(userEmail, totalCost);\n        \n        for (int i = 0; i < numberOfTickets; i++) {\n            registrations.add(userEmail);\n        }\n        \n        eventRevenue.put(eventId, eventRevenue.get(eventId) + totalCost);\n        \n        ticketGenerator.generateTickets(userEmail, event, numberOfTickets);\n        notificationService.sendRegistrationConfirmation(userEmail, event, numberOfTickets, totalCost);\n        activityLogger.logActivity(userEmail, \"REGISTERED_FOR_EVENT\", eventId + \" - \" + numberOfTickets + \" tickets\");\n        \n        if (registrations.size() >= event.getMaxCapacity()) {\n            notificationService.sendEventFullNotification(event);\n        }\n        \n        System.out.println(\"User \" + userEmail + \" registered for event \" + eventId);\n    }\n    \n    public void generateEventReport(String organizerEmail, String password, String eventId) {\n        authService.authenticate(organizerEmail, password);\n        \n        Event event = getEventById(eventId);\n        authService.checkReportPermission(organizerEmail, event);\n        \n        String filename = reportService.generateEventReport(event, eventRegistrations.get(eventId), eventRevenue.get(eventId));\n        \n        activityLogger.logActivity(organizerEmail, \"REPORT_GENERATED\", eventId);\n        notificationService.sendReportNotification(organizerEmail, filename);\n        \n        System.out.println(\"Report generated: \" + filename);\n    }\n    \n    private Event getEventById(String eventId) {\n        Event event = events.get(eventId);\n        if (event == null) {\n            throw new IllegalArgumentException(\"Event not found\");\n        }\n        return event;\n    }\n    \n    private void validateRegistration(Event event, int numberOfTickets) {\n        if (event.getStartTime().isBefore(LocalDateTime.now())) {\n            throw new IllegalArgumentException(\"Cannot register for past events\");\n        }\n        \n        if (numberOfTickets <= 0 || numberOfTickets > 10) {\n            throw new IllegalArgumentException(\"Invalid number of tickets (1-10 allowed)\");\n        }\n    }\n}\n\npublic class AuthenticationService {\n    private Map<String, User> registeredUsers = new ConcurrentHashMap<>();\n    \n    public AuthenticationService() {\n        initializeTestData();\n    }\n    \n    public void authenticate(String email, String password) {\n        if (!authenticateUser(email, password)) {\n            throw new SecurityException(\"Invalid credentials\");\n        }\n    }\n    \n    public void checkPermission(String email, String permission) {\n        User user = registeredUsers.get(email);\n        if (!hasPermission(user, permission)) {\n            throw new SecurityException(\"User does not have permission to \" + permission.toLowerCase());\n        }\n    }\n    \n    public void checkReportPermission(String organizerEmail, Event event) {\n        if (!event.getOrganizerEmail().equals(organizerEmail)) {\n            User user = registeredUsers.get(organizerEmail);\n            if (!hasPermission(user, \"VIEW_ALL_REPORTS\")) {\n                throw new SecurityException(\"No permission to view this event's report\");\n            }\n        }\n    }\n    \n    private void initializeTestData() {\n        registeredUsers.put(\"organizer@company.com\",\n            new User(\"organizer@company.com\", \"John Organizer\", hashPassword(\"org123\"),\n                    Arrays.asList(\"CREATE_EVENT\", \"VIEW_ALL_REPORTS\")));\n        registeredUsers.put(\"admin@company.com\",\n            new User(\"admin@company.com\", \"Admin User\", hashPassword(\"admin123\"),\n                    Arrays.asList(\"CREATE_EVENT\", \"VIEW_ALL_REPORTS\")));\n        registeredUsers.put(\"user@company.com\",\n            new User(\"user@company.com\", \"Regular User\", hashPassword(\"user123\"),\n                    Arrays.asList()));\n    }\n    \n    private boolean authenticateUser(String email, String password) {\n        User user = registeredUsers.get(email);\n        return user != null && user.getPasswordHash().equals(hashPassword(password));\n    }\n    \n    private boolean hasPermission(User user, String permission) {\n        return user != null && user.getPermissions().contains(permission);\n    }\n    \n    private String hashPassword(String password) {\n        return \"hashed_\" + password;\n    }\n}\n\npublic class EventValidator {\n    public void validateEventData(String eventName, String description, String venue,\n                                 LocalDateTime startTime, LocalDateTime endTime,\n                                 double ticketPrice, int maxCapacity) {\n        if (eventName == null || eventName.trim().isEmpty()) {\n            throw new IllegalArgumentException(\"Invalid event name\");\n        }\n        if (description == null || venue == null || venue.trim().isEmpty()) {\n            throw new IllegalArgumentException(\"Invalid event details\");\n        }\n        if (startTime == null || endTime == null || startTime.isAfter(endTime) || startTime.isBefore(LocalDateTime.now())) {\n            throw new IllegalArgumentException(\"Invalid event times\");\n        }\n        if (ticketPrice < 0 || maxCapacity <= 0) {\n            throw new IllegalArgumentException(\"Invalid ticket price or capacity\");\n        }\n    }\n    \n    public String sanitizeInput(String input) {\n        if (input == null) return \"\";\n        return input.replaceAll(\"[<>\\\"'&]\", \"\").trim();\n    }\n}\n\npublic class PaymentProcessor {\n    private SecureRandom random = new SecureRandom();\n    \n    public void processPayment(String userEmail, double amount) {\n        System.out.println(\"Processing payment of $\" + amount + \" for user \" + userEmail);\n        if (random.nextDouble() <= 0.1) {\n            throw new RuntimeException(\"Payment processing failed\");\n        }\n    }\n}\n\npublic class TicketGenerator {\n    private SecureRandom random = new SecureRandom();\n    \n    public void generateTickets(String userEmail, Event event, int numberOfTickets) {\n        try {\n            String filename = \"tickets_\" + userEmail.replace(\"@\", \"_\") + \"_\" + event.getEventId() + \".txt\";\n            FileWriter writer = new FileWriter(filename);\n            \n            for (int i = 1; i <= numberOfTickets; i++) {\n                writer.write(\"TICKET #\" + random.nextInt(100000) + \"\\n\");\n                writer.write(\"Event: \" + event.getEventName() + \"\\n\");\n                writer.write(\"Venue: \" + event.getVenue() + \"\\n\");\n                writer.write(\"Date: \" + event.getStartTime().format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\")) + \"\\n\");\n                writer.write(\"Holder: \" + userEmail + \"\\n\");\n                writer.write(\"================\\n\\n\");\n            }\n            \n            writer.close();\n            System.out.println(\"Tickets generated: \" + filename);\n            \n        } catch (IOException e) {\n            throw new RuntimeException(\"Failed to generate tickets\", e);\n        }\n    }\n}\n\npublic class NotificationService {\n    public void sendEventCreationNotification(String organizerEmail, Event event) {\n        System.out.println(\"Email sent to \" + organizerEmail + \": Your event '\" +\n                         event.getEventName() + \"' has been created successfully.\");\n    }\n    \n    public void sendRegistrationConfirmation(String userEmail, Event event, int numberOfTickets, double totalCost) {\n        System.out.println(\"Email sent to \" + userEmail + \": Registration confirmed for '\" +\n                         event.getEventName() + \"'. Tickets: \" + numberOfTickets + \", Total: $\" + totalCost);\n    }\n    \n    public void sendEventFullNotification(Event event) {\n        System.out.println(\"Email sent to \" + event.getOrganizerEmail() + \": Event '\" +\n                         event.getEventName() + \"' is now fully booked.\");\n    }\n    \n    public void sendReportNotification(String organizerEmail, String filename) {\n        System.out.println(\"Email sent to \" + organizerEmail + \": Event report generated: \" + filename);\n    }\n}\n\npublic class ReportService {\n    public String generateEventReport(Event event, List<String> registrations, double revenue) {\n        try {\n            String filename = \"event_report_\" + event.getEventId() + \"_\" +\n                            LocalDateTime.now().format(DateTimeFormatter.ofPattern(\"yyyyMMdd_HHmmss\")) + \".txt\";\n            \n            FileWriter writer = new FileWriter(filename);\n            \n            writer.write(\"EVENT REPORT\\n\");\n            writer.write(\"Event: \" + event.getEventName() + \"\\n\");\n            writer.write(\"Event ID: \" + event.getEventId() + \"\\n\");\n            writer.write(\"Organizer: \" + event.getOrganizerEmail() + \"\\n\");\n            writer.write(\"Venue: \" + event.getVenue() + \"\\n\");\n            writer.write(\"Start Time: \" + event.getStartTime() + \"\\n\");\n            writer.write(\"Ticket Price: $\" + event.getTicketPrice() + \"\\n\");\n            writer.write(\"Max Capacity: \" + event.getMaxCapacity() + \"\\n\\n\");\n            \n            writer.write(\"Registrations: \" + registrations.size() + \"\\n\");\n            writer.write(\"Revenue: $\" + revenue + \"\\n\");\n            writer.write(\"Occupancy Rate: \" + String.format(\"%.1f\", (registrations.size() * 100.0 / event.getMaxCapacity())) + \"%\\n\\n\");\n            \n            Map<String, Integer> userTicketCounts = new HashMap<>();\n            for (String email : registrations) {\n                userTicketCounts.put(email, userTicketCounts.getOrDefault(email, 0) + 1);\n            }\n            \n            writer.write(\"Registered Users:\\n\");\n            for (Map.Entry<String, Integer> entry : userTicketCounts.entrySet()) {\n                writer.write(\"- \" + entry.getKey() + \": \" + entry.getValue() + \" ticket(s)\\n\");\n            }\n            \n            writer.close();\n            return filename;\n            \n        } catch (IOException e) {\n            throw new RuntimeException(\"Failed to generate report: \" + e.getMessage());\n        }\n    }\n}\n\npublic class ActivityLogger {\n    public void logActivity(String userEmail, String action, String details) {\n        try {\n            FileWriter writer = new FileWriter(\"event_system.log\", true);\n            writer.write(LocalDateTime.now().format(DateTimeFormatter.ISO_LOCAL_DATE_TIME) +\n                        \" - User: \" + userEmail + \", Action: \" + action + \", Details: \" + details + \"\\n\");\n            writer.close();\n        } catch (IOException e) {\n            throw new RuntimeException(\"Failed to log activity\", e);\n        }\n    }\n}\n\npublic class WebsiteUpdater {\n    public void updateEventWebsite(Event event) {\n        System.out.println(\"Updating website with event information for: \" + event.getEventName());\n    }\n}\n\npublic class EventIdGenerator {\n    private int eventIdCounter = 1000;\n    \n    public String generate() {\n        return \"EVT\" + (eventIdCounter++);\n    }\n}",
      "level": "HARD",
      "language": "JAVA",
      "violation": "SRP",
       "description": "Event registration management system"
    },

    {
      "input": "class User:\n    def __init__(self, name, email):\n        self.name = name\n        self.email = email\n    \n    def save_to_database(self):\n        print(f\"Saving user {self.name} to database\")\n    \n    def send_welcome_email(self):\n        print(f\"Sending welcome email to {self.email}\")",
      "output": "class User:\n    def __init__(self, name, email):\n        self.name = name\n        self.email = email\n    \n    def get_name(self):\n        return self.name\n    \n    def get_email(self):\n        return self.email\n\nclass UserRepository:\n    def save(self, user):\n        print(f\"Saving user {user.get_name()} to database\")\n\nclass EmailService:\n    def send_welcome_email(self, user):\n        print(f\"Sending welcome email to {user.get_email()}\")",
      "level": "EASY",
      "language": "PYTHON",
      "violation": "SRP",
      "description": "User database email operations"
    },

    {
      "input": "class Employee:\n    def __init__(self, name, base_salary, years_of_service):\n        self.name = name\n        self.base_salary = base_salary\n        self.years_of_service = years_of_service\n    \n    def calculate_salary(self):\n        return self.base_salary + (self.years_of_service * 1000)\n    \n    def print_pay_slip(self):\n        print(f\"Pay slip for {self.name}: ${self.calculate_salary()}\")",
      "output": "class Employee:\n    def __init__(self, name, base_salary, years_of_service):\n        self.name = name\n        self.base_salary = base_salary\n        self.years_of_service = years_of_service\n    \n    def get_name(self):\n        return self.name\n    \n    def get_base_salary(self):\n        return self.base_salary\n    \n    def get_years_of_service(self):\n        return self.years_of_service\n\nclass SalaryCalculator:\n    def calculate(self, employee):\n        return employee.get_base_salary() + (employee.get_years_of_service() * 1000)\n\nclass PaySlipPrinter:\n    def __init__(self, calculator):\n        self.calculator = calculator\n    \n    def print_slip(self, employee):\n        print(f\"Pay slip for {employee.get_name()}: ${self.calculator.calculate(employee)}\")",
      "level": "EASY",
      "language": "PYTHON",
      "violation": "SRP",
      "description": "Employee salary payslip system"
    },
    {
      "input": "class Book:\n    def __init__(self, title, author, content):\n        self.title = title\n        self.author = author\n        self.content = content\n    \n    def print_book(self):\n        print(f\"Title: {self.title}\")\n        print(f\"Author: {self.author}\")\n        print(f\"Content: {self.content}\")\n    \n    def save_to_file(self, filename):\n        print(f\"Saving book to {filename}\")",
      "output": "class Book:\n    def __init__(self, title, author, content):\n        self.title = title\n        self.author = author\n        self.content = content\n    \n    def get_title(self):\n        return self.title\n    \n    def get_author(self):\n        return self.author\n    \n    def get_content(self):\n        return self.content\n\nclass BookPrinter:\n    def print_book(self, book):\n        print(f\"Title: {book.get_title()}\")\n        print(f\"Author: {book.get_author()}\")\n        print(f\"Content: {book.get_content()}\")\n\nclass BookFileSaver:\n    def save_to_file(self, book, filename):\n        print(f\"Saving book to {filename}\")",
      "level": "EASY",
      "language": "PYTHON",
      "violation": "SRP",
      "description": "Book printing file saving"
    },
    {
      "input": "class Product:\n    def __init__(self, name, price):\n        self.name = name\n        self.price = price\n    \n    def apply_discount(self, percentage):\n        return self.price * (1 - percentage / 100)\n    \n    def display_product(self):\n        print(f\"Product: {self.name}, Price: ${self.price}\")",
      "output": "class Product:\n    def __init__(self, name, price):\n        self.name = name\n        self.price = price\n    \n    def get_name(self):\n        return self.name\n    \n    def get_price(self):\n        return self.price\n\nclass DiscountCalculator:\n    def apply_discount(self, product, percentage):\n        return product.get_price() * (1 - percentage / 100)\n\nclass ProductDisplay:\n    def display(self, product):\n        print(f\"Product: {product.get_name()}, Price: ${product.get_price()}\")",
      "level": "EASY",
      "language": "PYTHON",
      "violation": "SRP",
       "description": "Product discount display system"
    },
    {
      "input": "from typing import List, Dict\nfrom abc import ABC, abstractmethod\nfrom datetime import datetime\n\nclass SalesData:\n    def __init__(self, product_name: str, amount: float, date: datetime):\n        self.product_name = product_name\n        self.amount = amount\n        self.date = date\n    \n    def get_product_name(self) -> str:\n        return self.product_name\n    \n    def get_amount(self) -> float:\n        return self.amount\n    \n    def get_date(self) -> datetime:\n        return self.date\n\nclass DataSource(ABC):\n    @abstractmethod\n    def get_sales_data_for_month(self, month: str) -> List[SalesData]:\n        pass\n\nclass EmailService(ABC):\n    @abstractmethod\n    def send_email(self, to: str, subject: str, body: str) -> None:\n        pass\n\nclass ReportGenerator:\n    def __init__(self, data_source: DataSource, email_service: EmailService):\n        self.data_source = data_source\n        self.email_service = email_service\n    \n    def generate_and_send_monthly_report(self, month: str, recipient_email: str) -> None:\n        sales_data = self.data_source.get_sales_data_for_month(month)\n        \n        report = []\n        report.append(f\"Monthly Sales Report - {month}\")\n        report.append(\"================================\\n\")\n        \n        total_sales = 0.0\n        product_sales: Dict[str, float] = {}\n        \n        for data in sales_data:\n            total_sales += data.get_amount()\n            product_name = data.get_product_name()\n            product_sales[product_name] = product_sales.get(product_name, 0.0) + data.get_amount()\n        \n        report.append(f\"Total Sales: ${total_sales:.2f}\\n\")\n        report.append(\"Sales by Product:\")\n        report.append(\"-----------------\")\n        \n        for product, amount in product_sales.items():\n            report.append(f\"{product}: ${amount:.2f}\")\n        \n        report.append(\"\\nTop Performing Products:\")\n        report.append(\"------------------------\")\n        \n        sorted_products = sorted(product_sales.items(), key=lambda x: x[1], reverse=True)[:5]\n        for product, amount in sorted_products:\n            report.append(f\"{product}: ${amount:.2f}\")\n        \n        report_content = \"\\n\".join(report)\n        \n        subject = f\"Monthly Sales Report - {month}\"\n        body = f\"Please find attached the monthly sales report.\\n\\n{report_content}\"\n        \n        self.email_service.send_email(recipient_email, subject, body)\n        \n        print(f\"Report sent successfully to {recipient_email}\")",
      "output": "from typing import List, Dict\nfrom abc import ABC, abstractmethod\nfrom datetime import datetime\n\nclass SalesData:\n    def __init__(self, product_name: str, amount: float, date: datetime):\n        self.product_name = product_name\n        self.amount = amount\n        self.date = date\n    \n    def get_product_name(self) -> str:\n        return self.product_name\n    \n    def get_amount(self) -> float:\n        return self.amount\n    \n    def get_date(self) -> datetime:\n        return self.date\n\nclass DataSource(ABC):\n    @abstractmethod\n    def get_sales_data_for_month(self, month: str) -> List[SalesData]:\n        pass\n\nclass EmailService(ABC):\n    @abstractmethod\n    def send_email(self, to: str, subject: str, body: str) -> None:\n        pass\n\nclass ReportGenerator:\n    def __init__(self, data_source: DataSource):\n        self.data_source = data_source\n    \n    def generate_monthly_report(self, month: str) -> str:\n        sales_data = self.data_source.get_sales_data_for_month(month)\n        \n        report = []\n        report.append(f\"Monthly Sales Report - {month}\")\n        report.append(\"================================\\n\")\n        \n        total_sales = 0.0\n        product_sales: Dict[str, float] = {}\n        \n        for data in sales_data:\n            total_sales += data.get_amount()\n            product_name = data.get_product_name()\n            product_sales[product_name] = product_sales.get(product_name, 0.0) + data.get_amount()\n        \n        report.append(f\"Total Sales: ${total_sales:.2f}\\n\")\n        report.append(\"Sales by Product:\")\n        report.append(\"-----------------\")\n        \n        for product, amount in product_sales.items():\n            report.append(f\"{product}: ${amount:.2f}\")\n        \n        report.append(\"\\nTop Performing Products:\")\n        report.append(\"------------------------\")\n        \n        sorted_products = sorted(product_sales.items(), key=lambda x: x[1], reverse=True)[:5]\n        for product, amount in sorted_products:\n            report.append(f\"{product}: ${amount:.2f}\")\n        \n        return \"\\n\".join(report)\n\nclass ReportDeliveryService:\n    def __init__(self, email_service: EmailService):\n        self.email_service = email_service\n    \n    def send_report(self, report_content: str, month: str, recipient_email: str) -> None:\n        subject = f\"Monthly Sales Report - {month}\"\n        body = f\"Please find attached the monthly sales report.\\n\\n{report_content}\"\n        \n        self.email_service.send_email(recipient_email, subject, body)\n        \n        print(f\"Report sent successfully to {recipient_email}\")",
      "level": "MODERATE",
      "language": "PYTHON",
      "violation": "SRP",
       "description": "Sales report generation delivery"
    },
    {
      "input": "from typing import Dict, List, Optional\nfrom datetime import datetime\nimport secrets\nimport base64\nimport re\n\nclass User:\n    def __init__(self, username: str, password_hash: str, email: str, created_at: datetime):\n        self.username = username\n        self.password_hash = password_hash\n        self.email = email\n        self.created_at = created_at\n        self.last_login: Optional[datetime] = None\n    \n    def get_username(self) -> str:\n        return self.username\n    \n    def get_password_hash(self) -> str:\n        return self.password_hash\n    \n    def get_email(self) -> str:\n        return self.email\n    \n    def set_email(self, email: str) -> None:\n        self.email = email\n    \n    def get_created_at(self) -> datetime:\n        return self.created_at\n    \n    def get_last_login(self) -> Optional[datetime]:\n        return self.last_login\n    \n    def set_last_login(self, last_login: datetime) -> None:\n        self.last_login = last_login\n\nclass UserManager:\n    def __init__(self):\n        self.users: Dict[str, User] = {}\n        self.sessions: Dict[str, str] = {}\n    \n    def create_user(self, username: str, password: str, email: str) -> None:\n        if username in self.users:\n            raise ValueError(\"Username already exists\")\n        \n        if not self._is_valid_email(email):\n            raise ValueError(\"Invalid email format\")\n        \n        if len(password) < 8:\n            raise ValueError(\"Password must be at least 8 characters\")\n        \n        hashed_password = self._hash_password(password)\n        user = User(username, hashed_password, email, datetime.now())\n        self.users[username] = user\n        \n        print(f\"User created successfully: {username}\")\n    \n    def login(self, username: str, password: str) -> str:\n        user = self.users.get(username)\n        if user is None:\n            raise ValueError(\"Invalid username or password\")\n        \n        if not self._verify_password(password, user.get_password_hash()):\n            raise ValueError(\"Invalid username or password\")\n        \n        session_token = self._generate_session_token()\n        self.sessions[session_token] = username\n        \n        user.set_last_login(datetime.now())\n        \n        print(f\"User logged in: {username}\")\n        return session_token\n    \n    def logout(self, session_token: str) -> None:\n        username = self.sessions.pop(session_token, None)\n        if username:\n            print(f\"User logged out: {username}\")\n    \n    def is_logged_in(self, session_token: str) -> bool:\n        return session_token in self.sessions\n    \n    def get_user_by_session(self, session_token: str) -> Optional[User]:\n        username = self.sessions.get(session_token)\n        if username is None:\n            return None\n        return self.users.get(username)\n    \n    def _is_valid_email(self, email: str) -> bool:\n        pattern = r'^[A-Za-z0-9+_.-]+@(.+)$'\n        return bool(re.match(pattern, email))\n    \n    def _hash_password(self, password: str) -> str:\n        return base64.b64encode(password.encode()).decode()\n    \n    def _verify_password(self, password: str, hash_value: str) -> bool:\n        return self._hash_password(password) == hash_value\n    \n    def _generate_session_token(self) -> str:\n        return base64.b64encode(secrets.token_bytes(32)).decode()\n    \n    def update_user_email(self, username: str, new_email: str) -> None:\n        user = self.users.get(username)\n        if user is None:\n            raise ValueError(\"User not found\")\n        \n        if not self._is_valid_email(new_email):\n            raise ValueError(\"Invalid email format\")\n        \n        user.set_email(new_email)\n        print(f\"Email updated for user: {username}\")\n    \n    def get_all_users(self) -> List[User]:\n        return list(self.users.values())",
      "output": "from typing import Dict, List, Optional\nfrom datetime import datetime\nimport secrets\nimport base64\nimport re\n\nclass User:\n    def __init__(self, username: str, password_hash: str, email: str, created_at: datetime):\n        self.username = username\n        self.password_hash = password_hash\n        self.email = email\n        self.created_at = created_at\n        self.last_login: Optional[datetime] = None\n    \n    def get_username(self) -> str:\n        return self.username\n    \n    def get_password_hash(self) -> str:\n        return self.password_hash\n    \n    def get_email(self) -> str:\n        return self.email\n    \n    def set_email(self, email: str) -> None:\n        self.email = email\n    \n    def get_created_at(self) -> datetime:\n        return self.created_at\n    \n    def get_last_login(self) -> Optional[datetime]:\n        return self.last_login\n    \n    def set_last_login(self, last_login: datetime) -> None:\n        self.last_login = last_login\n\nclass UserManager:\n    def __init__(self):\n        self.users: Dict[str, User] = {}\n        self.validator = UserValidator()\n    \n    def create_user(self, username: str, password: str, email: str) -> None:\n        if username in self.users:\n            raise ValueError(\"Username already exists\")\n        \n        self.validator.validate_user_data(username, password, email)\n        \n        hashed_password = PasswordUtil.hash_password(password)\n        user = User(username, hashed_password, email, datetime.now())\n        self.users[username] = user\n        \n        print(f\"User created successfully: {username}\")\n    \n    def update_user_email(self, username: str, new_email: str) -> None:\n        user = self.users.get(username)\n        if user is None:\n            raise ValueError(\"User not found\")\n        \n        self.validator.validate_email(new_email)\n        \n        user.set_email(new_email)\n        print(f\"Email updated for user: {username}\")\n    \n    def find_by_username(self, username: str) -> Optional[User]:\n        return self.users.get(username)\n    \n    def get_all_users(self) -> List[User]:\n        return list(self.users.values())\n\nclass AuthenticationService:\n    def __init__(self, user_manager: UserManager):\n        self.sessions: Dict[str, str] = {}\n        self.user_manager = user_manager\n    \n    def login(self, username: str, password: str) -> str:\n        user = self.user_manager.find_by_username(username)\n        if user is None:\n            raise ValueError(\"Invalid username or password\")\n        \n        if not PasswordUtil.verify_password(password, user.get_password_hash()):\n            raise ValueError(\"Invalid username or password\")\n        \n        session_token = self._generate_session_token()\n        self.sessions[session_token] = username\n        \n        user.set_last_login(datetime.now())\n        \n        print(f\"User logged in: {username}\")\n        return session_token\n    \n    def logout(self, session_token: str) -> None:\n        username = self.sessions.pop(session_token, None)\n        if username:\n            print(f\"User logged out: {username}\")\n    \n    def is_logged_in(self, session_token: str) -> bool:\n        return session_token in self.sessions\n    \n    def get_user_by_session(self, session_token: str) -> Optional[User]:\n        username = self.sessions.get(session_token)\n        if username is None:\n            return None\n        return self.user_manager.find_by_username(username)\n    \n    def _generate_session_token(self) -> str:\n        return base64.b64encode(secrets.token_bytes(32)).decode()\n\nclass UserValidator:\n    def validate_user_data(self, username: str, password: str, email: str) -> None:\n        self.validate_username(username)\n        self.validate_password(password)\n        self.validate_email(email)\n    \n    def validate_username(self, username: str) -> None:\n        if not username or username.strip() == \"\":\n            raise ValueError(\"Username cannot be empty\")\n    \n    def validate_password(self, password: str) -> None:\n        if len(password) < 8:\n            raise ValueError(\"Password must be at least 8 characters\")\n    \n    def validate_email(self, email: str) -> None:\n        pattern = r'^[A-Za-z0-9+_.-]+@(.+)$'\n        if not re.match(pattern, email):\n            raise ValueError(\"Invalid email format\")\n\nclass PasswordUtil:\n    @staticmethod\n    def hash_password(password: str) -> str:\n        return base64.b64encode(password.encode()).decode()\n    \n    @staticmethod\n    def verify_password(password: str, hash_value: str) -> bool:\n        return PasswordUtil.hash_password(password) == hash_value",
      "level": "MODERATE",
      "language": "PYTHON",
      "violation": "SRP",
       "description": "User authentication session management"
    },
    {
      "input": "import os\nimport csv\nimport shutil\nfrom datetime import datetime\nfrom typing import List\n\nclass FileProcessor:\n    def __init__(self, input_directory: str, output_directory: str, archive_directory: str):\n        self.input_directory = input_directory\n        self.output_directory = output_directory\n        self.archive_directory = archive_directory\n    \n    def process_and_archive_files(self):\n        csv_files = [f for f in os.listdir(self.input_directory) if f.endswith('.csv')]\n        \n        if not csv_files:\n            print(\"No CSV files found to process\")\n            return\n        \n        for filename in csv_files:\n            try:\n                file_path = os.path.join(self.input_directory, filename)\n                lines = self._read_file(file_path)\n                processed_lines = []\n                \n                processed_lines.append(\"PROCESSED_HEADER,ORIGINAL_DATA,TIMESTAMP\")\n                \n                for i in range(1, len(lines)):\n                    line = lines[i]\n                    parts = line.split(',')\n                    \n                    processed_line = \"PROCESSED\"\n                    \n                    for part in parts:\n                        processed_line += \",\" + part.strip().upper()\n                    \n                    processed_line += \",\" + str(datetime.now())\n                    processed_lines.append(processed_line)\n                \n                output_filename = f\"processed_{filename}\"\n                output_path = os.path.join(self.output_directory, output_filename)\n                self._write_file(output_path, processed_lines)\n                \n                print(f\"Processed file: {filename} -> {output_filename}\")\n                \n                archive_name = f\"archive_{int(datetime.now().timestamp())}_{filename}\"\n                archive_path = os.path.join(self.archive_directory, archive_name)\n                \n                try:\n                    shutil.move(file_path, archive_path)\n                    print(f\"Archived original file: {filename} -> {archive_name}\")\n                except Exception as e:\n                    print(f\"Failed to archive file: {filename} - {str(e)}\")\n                \n            except Exception as e:\n                print(f\"Error processing file {filename}: {str(e)}\")\n    \n    def _read_file(self, file_path: str) -> List[str]:\n        with open(file_path, 'r', encoding='utf-8') as file:\n            return [line.strip() for line in file.readlines()]\n    \n    def _write_file(self, file_path: str, lines: List[str]):\n        with open(file_path, 'w', encoding='utf-8') as file:\n            for line in lines:\n                file.write(line + '\\n')\n    \n    def get_processing_history(self) -> List[str]:\n        history = []\n        \n        if os.path.exists(self.archive_directory):\n            for filename in os.listdir(self.archive_directory):\n                file_path = os.path.join(self.archive_directory, filename)\n                mod_time = datetime.fromtimestamp(os.path.getmtime(file_path))\n                history.append(f\"Archived: {filename} at {mod_time}\")\n        \n        return history",
      "output": "import os\nimport csv\nimport shutil\nfrom datetime import datetime\nfrom typing import List\nfrom dataclasses import dataclass\n\nclass FileProcessor:\n    def __init__(self, input_directory: str, output_directory: str, \n                 file_reader: 'FileReader', file_writer: 'FileWriter'):\n        self.input_directory = input_directory\n        self.output_directory = output_directory\n        self.file_reader = file_reader\n        self.file_writer = file_writer\n    \n    def process_files(self) -> List['ProcessedFile']:\n        csv_files = [f for f in os.listdir(self.input_directory) if f.endswith('.csv')]\n        processed_files = []\n        \n        if not csv_files:\n            print(\"No CSV files found to process\")\n            return processed_files\n        \n        for filename in csv_files:\n            try:\n                file_path = os.path.join(self.input_directory, filename)\n                lines = self.file_reader.read_file(file_path)\n                processed_lines = self._process_content(lines)\n                \n                output_filename = f\"processed_{filename}\"\n                output_path = os.path.join(self.output_directory, output_filename)\n                self.file_writer.write_file(output_path, processed_lines)\n                \n                print(f\"Processed file: {filename} -> {output_filename}\")\n                processed_files.append(ProcessedFile(file_path, output_path))\n                \n            except Exception as e:\n                print(f\"Error processing file {filename}: {str(e)}\")\n        \n        return processed_files\n    \n    def _process_content(self, lines: List[str]) -> List[str]:\n        processed_lines = []\n        processed_lines.append(\"PROCESSED_HEADER,ORIGINAL_DATA,TIMESTAMP\")\n        \n        for i in range(1, len(lines)):\n            line = lines[i]\n            parts = line.split(',')\n            \n            processed_line = \"PROCESSED\"\n            \n            for part in parts:\n                processed_line += \",\" + part.strip().upper()\n            \n            processed_line += \",\" + str(datetime.now())\n            processed_lines.append(processed_line)\n        \n        return processed_lines\n\nclass FileArchiver:\n    def __init__(self, archive_directory: str):\n        self.archive_directory = archive_directory\n    \n    def archive_files(self, processed_files: List['ProcessedFile']):\n        for pf in processed_files:\n            filename = os.path.basename(pf.original_file)\n            archive_name = f\"archive_{int(datetime.now().timestamp())}_{filename}\"\n            archive_path = os.path.join(self.archive_directory, archive_name)\n            \n            try:\n                shutil.move(pf.original_file, archive_path)\n                print(f\"Archived original file: {filename} -> {archive_name}\")\n            except Exception as e:\n                print(f\"Failed to archive file: {filename} - {str(e)}\")\n    \n    def get_archive_history(self) -> List[str]:\n        history = []\n        \n        if os.path.exists(self.archive_directory):\n            for filename in os.listdir(self.archive_directory):\n                file_path = os.path.join(self.archive_directory, filename)\n                mod_time = datetime.fromtimestamp(os.path.getmtime(file_path))\n                history.append(f\"Archived: {filename} at {mod_time}\")\n        \n        return history\n\nclass FileReader:\n    def read_file(self, file_path: str) -> List[str]:\n        with open(file_path, 'r', encoding='utf-8') as file:\n            return [line.strip() for line in file.readlines()]\n\nclass FileWriter:\n    def write_file(self, file_path: str, lines: List[str]):\n        with open(file_path, 'w', encoding='utf-8') as file:\n            for line in lines:\n                file.write(line + '\\n')\n\n@dataclass\nclass ProcessedFile:\n    original_file: str\n    output_file: str",
      "level": "MODERATE",
      "language": "PYTHON",
      "violation": "SRP",
       "description": "File processing archiving system"
    },
    {
      "input": "import uuid\nimport re\nfrom typing import Dict, List, Optional\n\nclass CustomerService:\n    def __init__(self):\n        self.customers: Dict[str, 'Customer'] = {}\n        self.blacklisted_emails = [\"spam@test.com\", \"fake@test.com\"]\n    \n    def register_customer(self, name: str, email: str, phone: str):\n        if email in self.customers:\n            raise ValueError(\"Customer already exists\")\n        \n        if email in self.blacklisted_emails:\n            raise ValueError(\"Email is blacklisted\")\n        \n        if not re.match(r\"^[A-Za-z0-9+_.-]+@(.+)$\", email):\n            raise ValueError(\"Invalid email format\")\n        \n        customer = Customer(str(uuid.uuid4()), name, email, phone)\n        self.customers[email] = customer\n        \n        self._send_welcome_notification(customer)\n        \n        print(f\"Customer registered: {name}\")\n    \n    def update_customer_info(self, email: str, new_phone: str):\n        customer = self.customers.get(email)\n        if customer is None:\n            raise ValueError(\"Customer not found\")\n        \n        old_phone = customer.phone\n        customer.phone = new_phone\n        \n        self._send_update_notification(customer, old_phone, new_phone)\n        \n        print(f\"Customer info updated: {email}\")\n    \n    def _send_welcome_notification(self, customer: 'Customer'):\n        subject = \"Welcome to Our Service!\"\n        message = (f\"Dear {customer.name},\\n\\n\"\n                  f\"Thank you for registering with us.\\n\"\n                  f\"Your customer ID is: {customer.id}\\n\\n\"\n                  f\"Best regards,\\nThe Team\")\n        \n        print(f\"Sending email to: {customer.email}\")\n        print(f\"Subject: {subject}\")\n        print(f\"Message: {message}\")\n        \n        sms_message = f\"Welcome {customer.name}! Your ID: {customer.id}\"\n        print(f\"Sending SMS to: {customer.phone}\")\n        print(f\"SMS: {sms_message}\")\n    \n    def _send_update_notification(self, customer: 'Customer', old_phone: str, new_phone: str):\n        subject = \"Your Information Has Been Updated\"\n        message = (f\"Dear {customer.name},\\n\\n\"\n                  f\"Your phone number has been updated from {old_phone} \"\n                  f\"to {new_phone}.\\n\\n\"\n                  f\"If you didn't make this change, please contact us.\\n\\n\"\n                  f\"Best regards,\\nThe Team\")\n        \n        print(f\"Sending email to: {customer.email}\")\n        print(f\"Subject: {subject}\")\n        print(f\"Message: {message}\")\n    \n    def find_by_email(self, email: str) -> Optional['Customer']:\n        return self.customers.get(email)\n    \n    def get_all_customers(self) -> List['Customer']:\n        return list(self.customers.values())\n\nclass Customer:\n    def __init__(self, id: str, name: str, email: str, phone: str):\n        self.id = id\n        self.name = name\n        self.email = email\n        self.phone = phone",
      "output": "import uuid\nimport re\nfrom typing import Dict, List, Optional\n\nclass CustomerService:\n    def __init__(self, notification_service: 'NotificationService'):\n        self.customers: Dict[str, 'Customer'] = {}\n        self.validator = CustomerValidator()\n        self.notification_service = notification_service\n    \n    def register_customer(self, name: str, email: str, phone: str):\n        if email in self.customers:\n            raise ValueError(\"Customer already exists\")\n        \n        self.validator.validate_email(email)\n        \n        customer = Customer(str(uuid.uuid4()), name, email, phone)\n        self.customers[email] = customer\n        \n        self.notification_service.send_welcome_notification(customer)\n        \n        print(f\"Customer registered: {name}\")\n    \n    def update_customer_info(self, email: str, new_phone: str):\n        customer = self.customers.get(email)\n        if customer is None:\n            raise ValueError(\"Customer not found\")\n        \n        old_phone = customer.phone\n        customer.phone = new_phone\n        \n        self.notification_service.send_update_notification(customer, old_phone, new_phone)\n        \n        print(f\"Customer info updated: {email}\")\n    \n    def find_by_email(self, email: str) -> Optional['Customer']:\n        return self.customers.get(email)\n    \n    def get_all_customers(self) -> List['Customer']:\n        return list(self.customers.values())\n\nclass CustomerValidator:\n    def __init__(self):\n        self.blacklisted_emails = [\"spam@test.com\", \"fake@test.com\"]\n    \n    def validate_email(self, email: str):\n        if email in self.blacklisted_emails:\n            raise ValueError(\"Email is blacklisted\")\n        \n        if not re.match(r\"^[A-Za-z0-9+_.-]+@(.+)$\", email):\n            raise ValueError(\"Invalid email format\")\n\nclass NotificationService:\n    def __init__(self):\n        self.email_sender = EmailSender()\n        self.sms_sender = SmsSender()\n    \n    def send_welcome_notification(self, customer: 'Customer'):\n        subject = \"Welcome to Our Service!\"\n        message = (f\"Dear {customer.name},\\n\\n\"\n                  f\"Thank you for registering with us.\\n\"\n                  f\"Your customer ID is: {customer.id}\\n\\n\"\n                  f\"Best regards,\\nThe Team\")\n        \n        self.email_sender.send(customer.email, subject, message)\n        \n        sms_message = f\"Welcome {customer.name}! Your ID: {customer.id}\"\n        self.sms_sender.send(customer.phone, sms_message)\n    \n    def send_update_notification(self, customer: 'Customer', old_phone: str, new_phone: str):\n        subject = \"Your Information Has Been Updated\"\n        message = (f\"Dear {customer.name},\\n\\n\"\n                  f\"Your phone number has been updated from {old_phone} \"\n                  f\"to {new_phone}.\\n\\n\"\n                  f\"If you didn't make this change, please contact us.\\n\\n\"\n                  f\"Best regards,\\nThe Team\")\n        \n        self.email_sender.send(customer.email, subject, message)\n\nclass EmailSender:\n    def send(self, to: str, subject: str, message: str):\n        print(f\"Sending email to: {to}\")\n        print(f\"Subject: {subject}\")\n        print(f\"Message: {message}\")\n\nclass SmsSender:\n    def send(self, phone_number: str, message: str):\n        print(f\"Sending SMS to: {phone_number}\")\n        print(f\"SMS: {message}\")\n\nclass Customer:\n    def __init__(self, id: str, name: str, email: str, phone: str):\n        self.id = id\n        self.name = name\n        self.email = email\n        self.phone = phone",
      "level": "MODERATE",
      "language": "PYTHON",
      "violation": "SRP",
      "description": "Customer registration notification system"
    },

    {
      "input": "import sqlite3\nimport smtplib\nimport json\nfrom datetime import datetime\nfrom email.mime.text import MIMEText\nfrom email.mime.multipart import MIMEMultipart\nfrom typing import List, Optional\n\nclass OrderManager:\n    def __init__(self):\n        self.orders = []\n        self.db_connection = None\n        self.email_config = {\n            'smtp_server': 'smtp.gmail.com',\n            'smtp_port': 587,\n            'email': 'orders@company.com',\n            'password': 'password'\n        }\n        self.initialize_database()\n    \n    # Order management responsibility\n    def add_order(self, order):\n        if self.validate_order(order):\n            self.orders.append(order)\n            self.save_order_to_database(order)\n            self.send_order_confirmation_email(order)\n            self.generate_invoice(order)\n            self.update_inventory(order)\n            self.log_order_activity(order, \"ORDER_CREATED\")\n    \n    def update_order_status(self, order_id, status):\n        order = self.find_order_by_id(order_id)\n        if order:\n            order['status'] = status\n            self.update_order_in_database(order)\n            self.send_status_update_email(order)\n            self.log_order_activity(order, \"STATUS_UPDATED\")\n    \n    def find_order_by_id(self, order_id):\n        return next((order for order in self.orders if order['id'] == order_id), None)\n    \n    # Validation responsibility\n    def validate_order(self, order):\n        if not order or not order.get('customer'):\n            return False\n        if not order.get('items') or len(order['items']) == 0:\n            return False\n        if order.get('total_amount', 0) <= 0:\n            return False\n        return self.validate_customer_credit_limit(order)\n    \n    def validate_customer_credit_limit(self, order):\n        customer_credit_limit = self.get_customer_credit_limit(order['customer']['id'])\n        outstanding_amount = self.get_customer_outstanding_amount(order['customer']['id'])\n        return (outstanding_amount + order['total_amount']) <= customer_credit_limit\n    \n    # Database operations responsibility\n    def initialize_database(self):\n        try:\n            self.db_connection = sqlite3.connect('orders.db')\n            cursor = self.db_connection.cursor()\n            cursor.execute('''\n                CREATE TABLE IF NOT EXISTS orders (\n                    id INTEGER PRIMARY KEY,\n                    customer_id INTEGER,\n                    total_amount REAL,\n                    status TEXT,\n                    created_date TEXT\n                )\n            ''')\n            cursor.execute('''\n                CREATE TABLE IF NOT EXISTS customers (\n                    id INTEGER PRIMARY KEY,\n                    name TEXT,\n                    email TEXT,\n                    credit_limit REAL\n                )\n            ''')\n            cursor.execute('''\n                CREATE TABLE IF NOT EXISTS inventory (\n                    product_id INTEGER PRIMARY KEY,\n                    quantity INTEGER\n                )\n            ''')\n            self.db_connection.commit()\n        except sqlite3.Error as e:\n            print(f\"Database connection failed: {e}\")\n    \n    def save_order_to_database(self, order):\n        try:\n            cursor = self.db_connection.cursor()\n            cursor.execute(\n                \"INSERT INTO orders (customer_id, total_amount, status, created_date) VALUES (?, ?, ?, ?)\",\n                (order['customer']['id'], order['total_amount'], order['status'], datetime.now().isoformat())\n            )\n            self.db_connection.commit()\n        except sqlite3.Error as e:\n            print(f\"Failed to save order: {e}\")\n    \n    def update_order_in_database(self, order):\n        try:\n            cursor = self.db_connection.cursor()\n            cursor.execute(\n                \"UPDATE orders SET status = ?, updated_date = ? WHERE id = ?\",\n                (order['status'], datetime.now().isoformat(), order['id'])\n            )\n            self.db_connection.commit()\n        except sqlite3.Error as e:\n            print(f\"Failed to update order: {e}\")\n    \n    def get_customer_credit_limit(self, customer_id):\n        try:\n            cursor = self.db_connection.cursor()\n            cursor.execute(\"SELECT credit_limit FROM customers WHERE id = ?\", (customer_id,))\n            result = cursor.fetchone()\n            return result[0] if result else 0\n        except sqlite3.Error as e:\n            print(f\"Failed to get credit limit: {e}\")\n            return 0\n    \n    def get_customer_outstanding_amount(self, customer_id):\n        try:\n            cursor = self.db_connection.cursor()\n            cursor.execute(\n                \"SELECT SUM(total_amount) FROM orders WHERE customer_id = ? AND status = 'PENDING'\",\n                (customer_id,)\n            )\n            result = cursor.fetchone()\n            return result[0] if result and result[0] else 0\n        except sqlite3.Error as e:\n            print(f\"Failed to get outstanding amount: {e}\")\n            return 0\n    \n    # Email notification responsibility\n    def send_order_confirmation_email(self, order):\n        try:\n            subject = f\"Order Confirmation - Order #{order['id']}\"\n            body = f\"Your order has been confirmed. Total: ${order['total_amount']}\"\n            self.send_email(order['customer']['email'], subject, body)\n        except Exception as e:\n            print(f\"Failed to send confirmation email: {e}\")\n    \n    def send_status_update_email(self, order):\n        try:\n            subject = f\"Order Status Update - Order #{order['id']}\"\n            body = f\"Your order status has been updated to: {order['status']}\"\n            self.send_email(order['customer']['email'], subject, body)\n        except Exception as e:\n            print(f\"Failed to send status email: {e}\")\n    \n    def send_email(self, to_email, subject, body):\n        try:\n            msg = MIMEMultipart()\n            msg['From'] = self.email_config['email']\n            msg['To'] = to_email\n            msg['Subject'] = subject\n            msg.attach(MIMEText(body, 'plain'))\n            \n            server = smtplib.SMTP(self.email_config['smtp_server'], self.email_config['smtp_port'])\n            server.starttls()\n            server.login(self.email_config['email'], self.email_config['password'])\n            server.sendmail(self.email_config['email'], to_email, msg.as_string())\n            server.quit()\n        except Exception as e:\n            print(f\"Failed to send email: {e}\")\n    \n    # Invoice generation responsibility\n    def generate_invoice(self, order):\n        try:\n            filename = f\"invoice_{order['id']}.txt\"\n            with open(filename, 'w') as file:\n                file.write(\"INVOICE\\n\")\n                file.write(f\"Order ID: {order['id']}\\n\")\n                file.write(f\"Customer: {order['customer']['name']}\\n\")\n                file.write(f\"Date: {datetime.now().strftime('%Y-%m-%d')}\\n\")\n                file.write(f\"Total Amount: ${order['total_amount']}\\n\")\n        except IOError as e:\n            print(f\"Failed to generate invoice: {e}\")\n    \n    # Inventory management responsibility\n    def update_inventory(self, order):\n        for item in order['items']:\n            try:\n                cursor = self.db_connection.cursor()\n                cursor.execute(\n                    \"UPDATE inventory SET quantity = quantity - ? WHERE product_id = ?\",\n                    (item['quantity'], item['product_id'])\n                )\n                self.db_connection.commit()\n            except sqlite3.Error as e:\n                print(f\"Failed to update inventory: {e}\")\n    \n    # Logging responsibility\n    def log_order_activity(self, order, activity):\n        try:\n            with open('order_log.txt', 'a') as file:\n                log_entry = f\"{datetime.now().isoformat()} - Order {order['id']}: {activity}\\n\"\n                file.write(log_entry)\n        except IOError as e:\n            print(f\"Failed to log activity: {e}\")",
      "output": "import sqlite3\nimport smtplib\nimport json\nfrom datetime import datetime\nfrom email.mime.text import MIMEText\nfrom email.mime.multipart import MIMEMultipart\nfrom typing import List, Optional\n\nclass OrderService:\n    def __init__(self, order_repository, order_validator, email_service, \n                 invoice_generator, inventory_service, order_logger):\n        self.orders = []\n        self.order_repository = order_repository\n        self.order_validator = order_validator\n        self.email_service = email_service\n        self.invoice_generator = invoice_generator\n        self.inventory_service = inventory_service\n        self.order_logger = order_logger\n    \n    def add_order(self, order):\n        if self.order_validator.validate_order(order):\n            self.orders.append(order)\n            self.order_repository.save(order)\n            self.email_service.send_order_confirmation(order)\n            self.invoice_generator.generate_invoice(order)\n            self.inventory_service.update_inventory(order)\n            self.order_logger.log_activity(order, \"ORDER_CREATED\")\n    \n    def update_order_status(self, order_id, status):\n        order = self.find_order_by_id(order_id)\n        if order:\n            order['status'] = status\n            self.order_repository.update(order)\n            self.email_service.send_status_update(order)\n            self.order_logger.log_activity(order, \"STATUS_UPDATED\")\n    \n    def find_order_by_id(self, order_id):\n        return next((order for order in self.orders if order['id'] == order_id), None)\n\nclass OrderValidator:\n    def __init__(self, customer_service):\n        self.customer_service = customer_service\n    \n    def validate_order(self, order):\n        return self._is_order_valid(order) and self._validate_customer_credit_limit(order)\n    \n    def _is_order_valid(self, order):\n        return (order and order.get('customer') and \n                order.get('items') and len(order['items']) > 0 and \n                order.get('total_amount', 0) > 0)\n    \n    def _validate_customer_credit_limit(self, order):\n        credit_limit = self.customer_service.get_credit_limit(order['customer']['id'])\n        outstanding = self.customer_service.get_outstanding_amount(order['customer']['id'])\n        return (outstanding + order['total_amount']) <= credit_limit\n\nclass OrderRepository:\n    def __init__(self):\n        self.db_connection = None\n        self._initialize_connection()\n    \n    def _initialize_connection(self):\n        try:\n            self.db_connection = sqlite3.connect('orders.db')\n            self._create_tables()\n        except sqlite3.Error as e:\n            raise RuntimeError(f\"Database connection failed: {e}\")\n    \n    def _create_tables(self):\n        cursor = self.db_connection.cursor()\n        cursor.execute('''\n            CREATE TABLE IF NOT EXISTS orders (\n                id INTEGER PRIMARY KEY,\n                customer_id INTEGER,\n                total_amount REAL,\n                status TEXT,\n                created_date TEXT\n            )\n        ''')\n        self.db_connection.commit()\n    \n    def save(self, order):\n        try:\n            cursor = self.db_connection.cursor()\n            cursor.execute(\n                \"INSERT INTO orders (customer_id, total_amount, status, created_date) VALUES (?, ?, ?, ?)\",\n                (order['customer']['id'], order['total_amount'], order['status'], datetime.now().isoformat())\n            )\n            self.db_connection.commit()\n        except sqlite3.Error as e:\n            raise RuntimeError(f\"Failed to save order: {e}\")\n    \n    def update(self, order):\n        try:\n            cursor = self.db_connection.cursor()\n            cursor.execute(\n                \"UPDATE orders SET status = ?, updated_date = ? WHERE id = ?\",\n                (order['status'], datetime.now().isoformat(), order['id'])\n            )\n            self.db_connection.commit()\n        except sqlite3.Error as e:\n            raise RuntimeError(f\"Failed to update order: {e}\")\n\nclass CustomerService:\n    def __init__(self, db_connection):\n        self.db_connection = db_connection\n    \n    def get_credit_limit(self, customer_id):\n        try:\n            cursor = self.db_connection.cursor()\n            cursor.execute(\"SELECT credit_limit FROM customers WHERE id = ?\", (customer_id,))\n            result = cursor.fetchone()\n            return result[0] if result else 0\n        except sqlite3.Error as e:\n            raise RuntimeError(f\"Failed to get credit limit: {e}\")\n    \n    def get_outstanding_amount(self, customer_id):\n        try:\n            cursor = self.db_connection.cursor()\n            cursor.execute(\n                \"SELECT SUM(total_amount) FROM orders WHERE customer_id = ? AND status = 'PENDING'\",\n                (customer_id,)\n            )\n            result = cursor.fetchone()\n            return result[0] if result and result[0] else 0\n        except sqlite3.Error as e:\n            raise RuntimeError(f\"Failed to get outstanding amount: {e}\")\n\nclass EmailNotificationService:\n    def __init__(self):\n        self.email_config = {\n            'smtp_server': 'smtp.gmail.com',\n            'smtp_port': 587,\n            'email': 'orders@company.com',\n            'password': 'password'\n        }\n    \n    def send_order_confirmation(self, order):\n        subject = f\"Order Confirmation - Order #{order['id']}\"\n        body = f\"Your order has been confirmed. Total: ${order['total_amount']}\"\n        self._send_email(order['customer']['email'], subject, body)\n    \n    def send_status_update(self, order):\n        subject = f\"Order Status Update - Order #{order['id']}\"\n        body = f\"Your order status has been updated to: {order['status']}\"\n        self._send_email(order['customer']['email'], subject, body)\n    \n    def _send_email(self, to_email, subject, body):\n        try:\n            msg = MIMEMultipart()\n            msg['From'] = self.email_config['email']\n            msg['To'] = to_email\n            msg['Subject'] = subject\n            msg.attach(MIMEText(body, 'plain'))\n            \n            server = smtplib.SMTP(self.email_config['smtp_server'], self.email_config['smtp_port'])\n            server.starttls()\n            server.login(self.email_config['email'], self.email_config['password'])\n            server.sendmail(self.email_config['email'], to_email, msg.as_string())\n            server.quit()\n        except Exception as e:\n            raise RuntimeError(f\"Failed to send email: {e}\")\n\nclass InvoiceGenerator:\n    def generate_invoice(self, order):\n        try:\n            filename = f\"invoice_{order['id']}.txt\"\n            with open(filename, 'w') as file:\n                file.write(self._build_invoice_content(order))\n        except IOError as e:\n            raise RuntimeError(f\"Failed to generate invoice: {e}\")\n    \n    def _build_invoice_content(self, order):\n        return (f\"INVOICE\\n\"\n                f\"Order ID: {order['id']}\\n\"\n                f\"Customer: {order['customer']['name']}\\n\"\n                f\"Date: {datetime.now().strftime('%Y-%m-%d')}\\n\"\n                f\"Total Amount: ${order['total_amount']:.2f}\\n\")\n\nclass InventoryService:\n    def __init__(self, db_connection):\n        self.db_connection = db_connection\n    \n    def update_inventory(self, order):\n        for item in order['items']:\n            self._update_product_quantity(item['product_id'], item['quantity'])\n    \n    def _update_product_quantity(self, product_id, quantity):\n        try:\n            cursor = self.db_connection.cursor()\n            cursor.execute(\n                \"UPDATE inventory SET quantity = quantity - ? WHERE product_id = ?\",\n                (quantity, product_id)\n            )\n            self.db_connection.commit()\n        except sqlite3.Error as e:\n            raise RuntimeError(f\"Failed to update inventory: {e}\")\n\nclass OrderLogger:\n    def log_activity(self, order, activity):\n        try:\n            with open('order_log.txt', 'a') as file:\n                log_entry = f\"{datetime.now().isoformat()} - Order {order['id']}: {activity}\\n\"\n                file.write(log_entry)\n        except IOError as e:\n            raise RuntimeError(f\"Failed to log activity: {e}\")",
      "level": "HARD",
      "language": "PYTHON",
      "violation": "SRP",
       "description": "Order management processing system"
    },
    {
      "input": "from typing import Dict, List, Optional, Collection\nfrom datetime import datetime\nfrom concurrent.futures import ThreadPoolExecutor\nimport hashlib\nimport re\nimport os\nimport json\nimport time\n\nclass BlogPostManager:\n    def __init__(self):\n        self.posts: Dict[int, BlogPost] = {}\n        self.user_sessions: Dict[str, List[str]] = {}\n        self.user_permissions: Dict[str, int] = {}\n        self.next_post_id = 1\n        self.initialize_default_users()\n        self.setup_logging()\n    \n    def create_post(self, session_token: str, title: str, content: str, tags: List[str]):\n        if not self.is_valid_session(session_token):\n            raise SecurityError(\"Invalid session\")\n        \n        username = self.get_user_from_session(session_token)\n        if not self.has_permission(username, \"CREATE_POST\"):\n            raise SecurityError(\"Insufficient permissions\")\n        \n        if not self.validate_post_content(title, content):\n            raise ValueError(\"Invalid post content\")\n        \n        sanitized_title = self.sanitize_html(title)\n        sanitized_content = self.sanitize_html(content)\n        processed_tags = self.process_tags(tags)\n        \n        post = BlogPost(self.next_post_id, sanitized_title, sanitized_content,\n                       username, datetime.now(), processed_tags)\n        self.next_post_id += 1\n        self.posts[post.id] = post\n        \n        self.update_search_index(post)\n        self.generate_sitemap()\n        self.notify_subscribers(post)\n        self.log_activity(username, \"POST_CREATED\", post.id)\n        \n        print(f\"Blog post created successfully: {post.id}\")\n    \n    def update_post(self, session_token: str, post_id: int, new_title: str, new_content: str):\n        if not self.is_valid_session(session_token):\n            raise SecurityError(\"Invalid session\")\n        \n        username = self.get_user_from_session(session_token)\n        post = self.posts.get(post_id)\n        \n        if post is None:\n            raise ValueError(\"Post not found\")\n        \n        if post.author != username and not self.has_permission(username, \"EDIT_ANY_POST\"):\n            raise SecurityError(\"Cannot edit this post\")\n        \n        if not self.validate_post_content(new_title, new_content):\n            raise ValueError(\"Invalid post content\")\n        \n        post.title = self.sanitize_html(new_title)\n        post.content = self.sanitize_html(new_content)\n        post.last_modified = datetime.now()\n        \n        self.update_search_index(post)\n        self.generate_sitemap()\n        self.log_activity(username, \"POST_UPDATED\", post_id)\n        \n        print(f\"Post updated: {post_id}\")\n    \n    def delete_post(self, session_token: str, post_id: int):\n        if not self.is_valid_session(session_token):\n            raise SecurityError(\"Invalid session\")\n        \n        username = self.get_user_from_session(session_token)\n        post = self.posts.get(post_id)\n        \n        if post is None:\n            raise ValueError(\"Post not found\")\n        \n        if post.author != username and not self.has_permission(username, \"DELETE_ANY_POST\"):\n            raise SecurityError(\"Cannot delete this post\")\n        \n        del self.posts[post_id]\n        self.remove_from_search_index(post_id)\n        self.generate_sitemap()\n        self.log_activity(username, \"POST_DELETED\", post_id)\n        \n        print(f\"Post deleted: {post_id}\")\n    \n    def initialize_default_users(self):\n        self.user_permissions[\"admin\"] = 7  # All permissions\n        self.user_permissions[\"editor\"] = 3  # Create and edit\n        self.user_permissions[\"author\"] = 1  # Create only\n    \n    def setup_logging(self):\n        try:\n            if not os.path.exists(\"logs\"):\n                os.makedirs(\"logs\")\n        except Exception as e:\n            print(f\"Failed to setup logging: {e}\")\n    \n    def is_valid_session(self, session_token: str) -> bool:\n        return session_token is not None and session_token in self.user_sessions\n    \n    def get_user_from_session(self, session_token: str) -> Optional[str]:\n        session_data = self.user_sessions.get(session_token)\n        return session_data[0] if session_data else None\n    \n    def has_permission(self, username: str, permission: str) -> bool:\n        user_level = self.user_permissions.get(username)\n        if user_level is None:\n            return False\n        \n        permission_map = {\n            \"CREATE_POST\": 1,\n            \"EDIT_ANY_POST\": 2,\n            \"DELETE_ANY_POST\": 4\n        }\n        \n        required_level = permission_map.get(permission, 0)\n        return (user_level & required_level) != 0\n    \n    def validate_post_content(self, title: str, content: str) -> bool:\n        if not title or not title.strip() or len(title) > 200:\n            return False\n        if not content or not content.strip() or len(content) > 10000:\n            return False\n        \n        script_pattern = re.compile(r'<script[^>]*>.*?</script>', re.IGNORECASE)\n        return not script_pattern.search(title) and not script_pattern.search(content)\n    \n    def sanitize_html(self, input_str: str) -> str:\n        if not input_str:\n            return \"\"\n        result = re.sub(r'<script[^>]*>.*?</script>', '', input_str, flags=re.IGNORECASE)\n        result = re.sub(r'<[^>]+>', '', result)\n        result = result.replace('&', '&amp;')\n        result = result.replace('<', '&lt;')\n        result = result.replace('>', '&gt;')\n        return result\n    \n    def process_tags(self, tags: List[str]) -> List[str]:\n        if not tags:\n            return []\n        \n        processed = []\n        seen = set()\n        for tag in tags:\n            clean_tag = tag.lower().strip()\n            if clean_tag and len(clean_tag) <= 50 and clean_tag not in seen:\n                processed.append(clean_tag)\n                seen.add(clean_tag)\n        return processed\n    \n    def update_search_index(self, post: 'BlogPost'):\n        try:\n            with open(\"search_index.txt\", \"a\") as f:\n                f.write(f\"{post.id}|{post.title}|{post.content}\\n\")\n        except IOError as e:\n            print(f\"Failed to update search index: {e}\")\n    \n    def remove_from_search_index(self, post_id: int):\n        try:\n            if not os.path.exists(\"search_index.txt\"):\n                return\n            \n            with open(\"search_index.txt\", \"r\") as f:\n                lines = f.readlines()\n            \n            with open(\"search_index.txt\", \"w\") as f:\n                for line in lines:\n                    if not line.startswith(f\"{post_id}|\"):\n                        f.write(line)\n        except IOError as e:\n            print(f\"Failed to update search index: {e}\")\n    \n    def generate_sitemap(self):\n        try:\n            with open(\"sitemap.xml\", \"w\") as f:\n                f.write('<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n')\n                f.write('<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\\n')\n                \n                for post in self.posts.values():\n                    f.write('  <url>\\n')\n                    f.write(f'    <loc>https://blog.com/post/{post.id}</loc>\\n')\n                    f.write(f'    <lastmod>{post.last_modified}</lastmod>\\n')\n                    f.write('  </url>\\n')\n                \n                f.write('</urlset>\\n')\n        except IOError as e:\n            print(f\"Failed to generate sitemap: {e}\")\n    \n    def notify_subscribers(self, post: 'BlogPost'):\n        print(f\"Sending notifications for new post: {post.title}\")\n        time.sleep(0.1)  # Simulate network delay\n    \n    def log_activity(self, username: str, action: str, post_id: int):\n        try:\n            log_file = f\"logs/activity_{datetime.now().date()}.log\"\n            with open(log_file, \"a\") as f:\n                log_entry = f\"{datetime.now()} - User: {username}, Action: {action}, Post: {post_id}\\n\"\n                f.write(log_entry)\n        except IOError as e:\n            print(f\"Failed to log activity: {e}\")\n    \n    def search_posts(self, query: str) -> List['BlogPost']:\n        results = []\n        lower_query = query.lower()\n        \n        for post in self.posts.values():\n            if (lower_query in post.title.lower() or \n                lower_query in post.content.lower() or \n                any(lower_query in tag for tag in post.tags)):\n                results.append(post)\n        \n        return results\n    \n    def login_user(self, username: str, password: str) -> str:\n        hashed_password = self.hash_password(password)\n        if self.validate_credentials(username, hashed_password):\n            session_token = self.generate_session_token(username)\n            self.user_sessions[session_token] = [username, str(datetime.now())]\n            self.log_activity(username, \"LOGIN\", 0)\n            return session_token\n        raise SecurityError(\"Invalid credentials\")\n    \n    def hash_password(self, password: str) -> str:\n        return hashlib.sha256(password.encode()).hexdigest()\n    \n    def validate_credentials(self, username: str, hashed_password: str) -> bool:\n        return username in self.user_permissions\n    \n    def generate_session_token(self, username: str) -> str:\n        return self.hash_password(f\"{username}{int(time.time() * 1000)}\")\n\nclass BlogPost:\n    def __init__(self, post_id: int, title: str, content: str, author: str, \n                 created_at: datetime, tags: List[str]):\n        self.id = post_id\n        self.title = title\n        self.content = content\n        self.author = author\n        self.created_at = created_at\n        self.last_modified = created_at\n        self.tags = tags or []\n\nclass SecurityError(Exception):\n    pass",
      "output": "from typing import Dict, List, Optional, Collection\nfrom datetime import datetime\nfrom concurrent.futures import ThreadPoolExecutor\nimport hashlib\nimport re\nimport os\nimport json\nimport time\n\nclass BlogPostService:\n    def __init__(self, validator: 'BlogPostValidator', sanitizer: 'ContentSanitizer',\n                 auth_service: 'AuthenticationService', search_service: 'SearchIndexService',\n                 sitemap_generator: 'SitemapGenerator', notification_service: 'NotificationService',\n                 activity_logger: 'ActivityLogger'):\n        self.posts: Dict[int, BlogPost] = {}\n        self.next_post_id = 1\n        self.validator = validator\n        self.sanitizer = sanitizer\n        self.auth_service = auth_service\n        self.search_service = search_service\n        self.sitemap_generator = sitemap_generator\n        self.notification_service = notification_service\n        self.activity_logger = activity_logger\n    \n    def create_post(self, session_token: str, title: str, content: str, tags: List[str]):\n        username = self.auth_service.validate_session_and_get_user(session_token)\n        self.auth_service.check_permission(username, \"CREATE_POST\")\n        \n        self.validator.validate_post_content(title, content)\n        \n        sanitized_title = self.sanitizer.sanitize_html(title)\n        sanitized_content = self.sanitizer.sanitize_html(content)\n        processed_tags = self.sanitizer.process_tags(tags)\n        \n        post = BlogPost(self.next_post_id, sanitized_title, sanitized_content,\n                       username, datetime.now(), processed_tags)\n        self.next_post_id += 1\n        self.posts[post.id] = post\n        \n        self.search_service.update_index(post)\n        self.sitemap_generator.regenerate(self.posts.values())\n        self.notification_service.notify_subscribers(post)\n        self.activity_logger.log_activity(username, \"POST_CREATED\", post.id)\n        \n        print(f\"Blog post created successfully: {post.id}\")\n    \n    def update_post(self, session_token: str, post_id: int, new_title: str, new_content: str):\n        username = self.auth_service.validate_session_and_get_user(session_token)\n        post = self.get_post_by_id(post_id)\n        \n        self.auth_service.check_post_edit_permission(username, post)\n        self.validator.validate_post_content(new_title, new_content)\n        \n        post.title = self.sanitizer.sanitize_html(new_title)\n        post.content = self.sanitizer.sanitize_html(new_content)\n        post.last_modified = datetime.now()\n        \n        self.search_service.update_index(post)\n        self.sitemap_generator.regenerate(self.posts.values())\n        self.activity_logger.log_activity(username, \"POST_UPDATED\", post_id)\n        \n        print(f\"Post updated: {post_id}\")\n    \n    def delete_post(self, session_token: str, post_id: int):\n        username = self.auth_service.validate_session_and_get_user(session_token)\n        post = self.get_post_by_id(post_id)\n        \n        self.auth_service.check_post_delete_permission(username, post)\n        \n        del self.posts[post_id]\n        self.search_service.remove_from_index(post_id)\n        self.sitemap_generator.regenerate(self.posts.values())\n        self.activity_logger.log_activity(username, \"POST_DELETED\", post_id)\n        \n        print(f\"Post deleted: {post_id}\")\n    \n    def get_post_by_id(self, post_id: int) -> 'BlogPost':\n        post = self.posts.get(post_id)\n        if post is None:\n            raise ValueError(\"Post not found\")\n        return post\n    \n    def search_posts(self, query: str) -> List['BlogPost']:\n        return self.search_service.search(self.posts.values(), query)\n\nclass BlogPostValidator:\n    SCRIPT_PATTERN = re.compile(r'<script[^>]*>.*?</script>', re.IGNORECASE)\n    \n    def validate_post_content(self, title: str, content: str):\n        if not title or not title.strip() or len(title) > 200:\n            raise ValueError(\"Invalid title\")\n        if not content or not content.strip() or len(content) > 10000:\n            raise ValueError(\"Invalid content\")\n        \n        if self.SCRIPT_PATTERN.search(title) or self.SCRIPT_PATTERN.search(content):\n            raise ValueError(\"Script tags not allowed\")\n\nclass ContentSanitizer:\n    def sanitize_html(self, input_str: str) -> str:\n        if not input_str:\n            return \"\"\n        result = re.sub(r'<script[^>]*>.*?</script>', '', input_str, flags=re.IGNORECASE)\n        result = re.sub(r'<[^>]+>', '', result)\n        result = result.replace('&', '&amp;')\n        result = result.replace('<', '&lt;')\n        result = result.replace('>', '&gt;')\n        return result\n    \n    def process_tags(self, tags: List[str]) -> List[str]:\n        if not tags:\n            return []\n        \n        processed = []\n        seen = set()\n        for tag in tags:\n            clean_tag = tag.lower().strip()\n            if clean_tag and len(clean_tag) <= 50 and clean_tag not in seen:\n                processed.append(clean_tag)\n                seen.add(clean_tag)\n        return processed\n\nclass AuthenticationService:\n    def __init__(self):\n        self.user_sessions: Dict[str, List[str]] = {}\n        self.user_permissions: Dict[str, int] = {}\n        self.initialize_default_users()\n    \n    def validate_session_and_get_user(self, session_token: str) -> str:\n        if not self.is_valid_session(session_token):\n            raise SecurityError(\"Invalid session\")\n        return self.get_user_from_session(session_token)\n    \n    def check_permission(self, username: str, permission: str):\n        if not self.has_permission(username, permission):\n            raise SecurityError(\"Insufficient permissions\")\n    \n    def check_post_edit_permission(self, username: str, post: 'BlogPost'):\n        if post.author != username and not self.has_permission(username, \"EDIT_ANY_POST\"):\n            raise SecurityError(\"Cannot edit this post\")\n    \n    def check_post_delete_permission(self, username: str, post: 'BlogPost'):\n        if post.author != username and not self.has_permission(username, \"DELETE_ANY_POST\"):\n            raise SecurityError(\"Cannot delete this post\")\n    \n    def initialize_default_users(self):\n        self.user_permissions[\"admin\"] = 7\n        self.user_permissions[\"editor\"] = 3\n        self.user_permissions[\"author\"] = 1\n    \n    def is_valid_session(self, session_token: str) -> bool:\n        return session_token is not None and session_token in self.user_sessions\n    \n    def get_user_from_session(self, session_token: str) -> Optional[str]:\n        session_data = self.user_sessions.get(session_token)\n        return session_data[0] if session_data else None\n    \n    def has_permission(self, username: str, permission: str) -> bool:\n        user_level = self.user_permissions.get(username)\n        if user_level is None:\n            return False\n        \n        permission_map = {\n            \"CREATE_POST\": 1,\n            \"EDIT_ANY_POST\": 2,\n            \"DELETE_ANY_POST\": 4\n        }\n        \n        required_level = permission_map.get(permission, 0)\n        return (user_level & required_level) != 0\n    \n    def login_user(self, username: str, password: str) -> str:\n        hashed_password = PasswordUtil.hash_password(password)\n        if self.validate_credentials(username, hashed_password):\n            session_token = self.generate_session_token(username)\n            self.user_sessions[session_token] = [username, str(datetime.now())]\n            return session_token\n        raise SecurityError(\"Invalid credentials\")\n    \n    def validate_credentials(self, username: str, hashed_password: str) -> bool:\n        return username in self.user_permissions\n    \n    def generate_session_token(self, username: str) -> str:\n        return PasswordUtil.hash_password(f\"{username}{int(time.time() * 1000)}\")\n\nclass SearchIndexService:\n    def update_index(self, post: 'BlogPost'):\n        try:\n            with open(\"search_index.txt\", \"a\") as f:\n                f.write(f\"{post.id}|{post.title}|{post.content}\\n\")\n        except IOError as e:\n            raise RuntimeError(f\"Failed to update search index: {e}\")\n    \n    def remove_from_index(self, post_id: int):\n        try:\n            if not os.path.exists(\"search_index.txt\"):\n                return\n            \n            with open(\"search_index.txt\", \"r\") as f:\n                lines = f.readlines()\n            \n            with open(\"search_index.txt\", \"w\") as f:\n                for line in lines:\n                    if not line.startswith(f\"{post_id}|\"):\n                        f.write(line)\n        except IOError as e:\n            raise RuntimeError(f\"Failed to update search index: {e}\")\n    \n    def search(self, posts: Collection['BlogPost'], query: str) -> List['BlogPost']:\n        results = []\n        lower_query = query.lower()\n        \n        for post in posts:\n            if (lower_query in post.title.lower() or \n                lower_query in post.content.lower() or \n                any(lower_query in tag for tag in post.tags)):\n                results.append(post)\n        \n        return results\n\nclass SitemapGenerator:\n    def regenerate(self, posts: Collection['BlogPost']):\n        try:\n            with open(\"sitemap.xml\", \"w\") as f:\n                f.write('<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n')\n                f.write('<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\\n')\n                \n                for post in posts:\n                    f.write('  <url>\\n')\n                    f.write(f'    <loc>https://blog.com/post/{post.id}</loc>\\n')\n                    f.write(f'    <lastmod>{post.last_modified}</lastmod>\\n')\n                    f.write('  </url>\\n')\n                \n                f.write('</urlset>\\n')\n        except IOError as e:\n            raise RuntimeError(f\"Failed to generate sitemap: {e}\")\n\nclass NotificationService:\n    def notify_subscribers(self, post: 'BlogPost'):\n        print(f\"Sending notifications for new post: {post.title}\")\n        time.sleep(0.1)\n\nclass ActivityLogger:\n    def __init__(self):\n        self.setup_logging()\n    \n    def setup_logging(self):\n        try:\n            if not os.path.exists(\"logs\"):\n                os.makedirs(\"logs\")\n        except Exception as e:\n            print(f\"Failed to setup logging: {e}\")\n    \n    def log_activity(self, username: str, action: str, post_id: int):\n        try:\n            log_file = f\"logs/activity_{datetime.now().date()}.log\"\n            with open(log_file, \"a\") as f:\n                log_entry = f\"{datetime.now()} - User: {username}, Action: {action}, Post: {post_id}\\n\"\n                f.write(log_entry)\n        except IOError as e:\n            raise RuntimeError(f\"Failed to log activity: {e}\")\n\nclass PasswordUtil:\n    @staticmethod\n    def hash_password(password: str) -> str:\n        try:\n            return hashlib.sha256(password.encode()).hexdigest()\n        except Exception as e:\n            raise RuntimeError(f\"Password hashing failed: {e}\")\n\nclass BlogPost:\n    def __init__(self, post_id: int, title: str, content: str, author: str, \n                 created_at: datetime, tags: List[str]):\n        self.id = post_id\n        self.title = title\n        self.content = content\n        self.author = author\n        self.created_at = created_at\n        self.last_modified = created_at\n        self.tags = tags or []\n\nclass SecurityError(Exception):\n    pass",
      "level": "HARD",
      "language": "PYTHON",
      "violation": "SRP",
       "description": "Blog post management system"
    },
    {
      "input": "import hashlib\nimport base64\nimport json\nimport os\nfrom datetime import datetime\nfrom typing import Dict, List, Optional\nfrom dataclasses import dataclass\nfrom concurrent.futures import ThreadPoolExecutor\nimport smtplib\nfrom email.mime.text import MIMEText\nfrom email.mime.multipart import MIMEMultipart\n\n@dataclass\nclass Product:\n    id: str\n    name: str\n    quantity: int\n    price: float\n    supplier_id: str\n    min_threshold: int\n    last_updated: datetime\n\n@dataclass\nclass User:\n    username: str\n    password_hash: str\n    permissions: List[str]\n\n@dataclass\nclass Supplier:\n    id: str\n    name: str\n    email: str\n    phone: str\n\n@dataclass\nclass StockAlert:\n    product_id: str\n    product_name: str\n    current_stock: int\n    min_threshold: int\n\nclass InventoryManager:\n    def __init__(self):\n        self.products: Dict[str, Product] = {}\n        self.suppliers: Dict[str, Supplier] = {}\n        self.users: Dict[str, User] = {}\n        self.alerts: List[StockAlert] = []\n        self.email_config = {\n            'smtp_host': 'smtp.company.com',\n            'smtp_port': 587,\n            'use_tls': True,\n            'username': 'inventory@company.com',\n            'password': 'email_password'\n        }\n        \n        self._initialize_users()\n        self._setup_email_configuration()\n        self._load_data_from_files()\n    \n    def add_product(self, username: str, password: str, product_id: str, name: str,\n                   quantity: int, price: float, supplier_id: str, min_threshold: int):\n        if not self._authenticate_user(username, password):\n            raise SecurityError(\"Authentication failed\")\n        \n        if not self._has_permission(username, \"ADD_PRODUCT\"):\n            raise SecurityError(\"Insufficient permissions\")\n        \n        if not self._validate_product_data(product_id, name, quantity, price, supplier_id, min_threshold):\n            raise ValueError(\"Invalid product data\")\n        \n        if product_id in self.products:\n            raise ValueError(\"Product already exists\")\n        \n        if supplier_id not in self.suppliers:\n            raise ValueError(\"Supplier not found\")\n        \n        product = Product(\n            id=product_id,\n            name=self._sanitize_name(name),\n            quantity=quantity,\n            price=price,\n            supplier_id=supplier_id,\n            min_threshold=min_threshold,\n            last_updated=datetime.now()\n        )\n        self.products[product_id] = product\n        \n        if quantity <= min_threshold:\n            self._create_low_stock_alert(product)\n        \n        self._update_inventory_file()\n        self._log_activity(username, \"PRODUCT_ADDED\", product_id)\n        self._send_supplier_notification(self.suppliers[supplier_id], f\"New product added: {name}\")\n        \n        print(f\"Product added: {product_id}\")\n    \n    def update_stock(self, username: str, password: str, product_id: str, new_quantity: int, reason: str):\n        if not self._authenticate_user(username, password):\n            raise SecurityError(\"Authentication failed\")\n        \n        if not self._has_permission(username, \"UPDATE_STOCK\"):\n            raise SecurityError(\"Insufficient permissions\")\n        \n        if product_id not in self.products:\n            raise ValueError(\"Product not found\")\n        \n        if new_quantity < 0:\n            raise ValueError(\"Quantity cannot be negative\")\n        \n        product = self.products[product_id]\n        old_quantity = product.quantity\n        product.quantity = new_quantity\n        product.last_updated = datetime.now()\n        \n        if new_quantity <= product.min_threshold and old_quantity > product.min_threshold:\n            self._create_low_stock_alert(product)\n        \n        if new_quantity > product.min_threshold:\n            self._remove_low_stock_alert(product_id)\n        \n        self._update_inventory_file()\n        self._log_activity(username, \"STOCK_UPDATED\", f\"{product_id} from {old_quantity} to {new_quantity}\")\n        \n        if abs(new_quantity - old_quantity) > 100:\n            self._send_manager_alert(f\"Large stock change for {product.name}: {old_quantity} -> {new_quantity}. Reason: {reason}\")\n        \n        print(f\"Stock updated for {product_id}: {new_quantity}\")\n    \n    def generate_report(self, username: str, password: str, report_type: str):\n        if not self._authenticate_user(username, password):\n            raise SecurityError(\"Authentication failed\")\n        \n        if not self._has_permission(username, \"GENERATE_REPORTS\"):\n            raise SecurityError(\"Insufficient permissions\")\n        \n        filename = f\"{report_type}_report_{datetime.now().isoformat().replace(':', '-')}.txt\"\n        \n        try:\n            with open(filename, 'w') as writer:\n                if report_type == \"inventory\":\n                    self._generate_inventory_report(writer)\n                elif report_type == \"alerts\":\n                    self._generate_alerts_report(writer)\n                elif report_type == \"suppliers\":\n                    self._generate_suppliers_report(writer)\n                else:\n                    raise ValueError(f\"Unknown report type: {report_type}\")\n            \n            self._log_activity(username, \"REPORT_GENERATED\", report_type)\n            print(f\"Report generated: {filename}\")\n            \n        except IOError as e:\n            raise RuntimeError(f\"Failed to generate report: {e}\")\n    \n    def _initialize_users(self):\n        self.users = {\n            \"admin\": User(\"admin\", self._hash_password(\"admin123\"), \n                         [\"ADD_PRODUCT\", \"UPDATE_STOCK\", \"GENERATE_REPORTS\", \"MANAGE_SUPPLIERS\"]),\n            \"manager\": User(\"manager\", self._hash_password(\"mgr123\"), \n                           [\"UPDATE_STOCK\", \"GENERATE_REPORTS\"]),\n            \"clerk\": User(\"clerk\", self._hash_password(\"clerk123\"), \n                         [\"UPDATE_STOCK\"])\n        }\n        \n        self.suppliers = {\n            \"SUP001\": Supplier(\"SUP001\", \"TechCorp\", \"tech@corp.com\", \"123-456-7890\"),\n            \"SUP002\": Supplier(\"SUP002\", \"OfficeSupply\", \"orders@office.com\", \"987-654-3210\")\n        }\n    \n    def _setup_email_configuration(self):\n        self.email_config = {\n            'smtp_host': 'smtp.company.com',\n            'smtp_port': 587,\n            'use_tls': True,\n            'username': 'inventory@company.com'\n        }\n    \n    def _authenticate_user(self, username: str, password: str) -> bool:\n        user = self.users.get(username)\n        return user is not None and user.password_hash == self._hash_password(password)\n    \n    def _has_permission(self, username: str, permission: str) -> bool:\n        user = self.users.get(username)\n        return user is not None and permission in user.permissions\n    \n    def _hash_password(self, password: str) -> str:\n        try:\n            hash_bytes = hashlib.sha256(password.encode()).digest()\n            return base64.b64encode(hash_bytes).decode()\n        except Exception as e:\n            raise RuntimeError(f\"Password hashing failed: {e}\")\n    \n    def _validate_product_data(self, product_id: str, name: str, quantity: int, \n                              price: float, supplier_id: str, min_threshold: int) -> bool:\n        return (product_id and product_id.strip() and \n                name and name.strip() and \n                quantity >= 0 and price >= 0 and min_threshold >= 0 and \n                supplier_id and supplier_id.strip())\n    \n    def _sanitize_name(self, name: str) -> str:\n        import re\n        return re.sub(r'[<>\"\\'\u0026]', '', name).strip()\n    \n    def _create_low_stock_alert(self, product: Product):\n        alert = StockAlert(\n            product_id=product.id,\n            product_name=product.name,\n            current_stock=product.quantity,\n            min_threshold=product.min_threshold\n        )\n        self.alerts.append(alert)\n        \n        message = (f\"LOW STOCK ALERT: {product.name} ({product.id}) \"\n                  f\"has only {product.quantity} units remaining. \"\n                  f\"Minimum threshold: {product.min_threshold}\")\n        \n        self._send_manager_alert(message)\n        \n        supplier = self.suppliers.get(product.supplier_id)\n        if supplier:\n            self._send_supplier_notification(supplier, f\"Reorder needed for: {product.name}\")\n    \n    def _remove_low_stock_alert(self, product_id: str):\n        self.alerts = [alert for alert in self.alerts if alert.product_id != product_id]\n    \n    def _send_manager_alert(self, message: str):\n        try:\n            print(f\"Manager alert sent: {message}\")\n        except Exception as e:\n            print(f\"Failed to send manager alert: {e}\")\n    \n    def _send_supplier_notification(self, supplier: Supplier, message: str):\n        try:\n            print(f\"Supplier notification sent to {supplier.name}: {message}\")\n        except Exception as e:\n            print(f\"Failed to send supplier notification: {e}\")\n    \n    def _generate_inventory_report(self, writer):\n        writer.write(\"INVENTORY REPORT\\n\")\n        writer.write(f\"Generated: {datetime.now()}\\n\\n\")\n        \n        for product in self.products.values():\n            supplier_name = self.suppliers.get(product.supplier_id).name if product.supplier_id in self.suppliers else \"Unknown\"\n            writer.write(f\"Product: {product.name} ({product.id})\\n\")\n            writer.write(f\"Quantity: {product.quantity}\\n\")\n            writer.write(f\"Price: ${product.price}\\n\")\n            writer.write(f\"Supplier: {supplier_name}\\n\\n\")\n    \n    def _generate_alerts_report(self, writer):\n        writer.write(\"STOCK ALERTS REPORT\\n\")\n        writer.write(f\"Generated: {datetime.now()}\\n\\n\")\n        \n        for alert in self.alerts:\n            writer.write(f\"Alert: {alert.product_name} ({alert.product_id})\\n\")\n            writer.write(f\"Current Stock: {alert.current_stock}\\n\")\n            writer.write(f\"Minimum Threshold: {alert.min_threshold}\\n\\n\")\n    \n    def _generate_suppliers_report(self, writer):\n        writer.write(\"SUPPLIERS REPORT\\n\")\n        writer.write(f\"Generated: {datetime.now()}\\n\\n\")\n        \n        for supplier in self.suppliers.values():\n            writer.write(f\"Supplier: {supplier.name} ({supplier.id})\\n\")\n            writer.write(f\"Email: {supplier.email}\\n\")\n            writer.write(f\"Phone: {supplier.phone}\\n\\n\")\n    \n    def _update_inventory_file(self):\n        try:\n            with open(\"inventory.dat\", \"w\") as writer:\n                for product in self.products.values():\n                    writer.write(f\"{product.id}|{product.name}|{product.quantity}|{product.price}|{product.supplier_id}|{product.min_threshold}\\n\")\n        except IOError as e:\n            print(f\"Failed to update inventory file: {e}\")\n    \n    def _load_data_from_files(self):\n        try:\n            if os.path.exists(\"inventory.dat\"):\n                with open(\"inventory.dat\", \"r\") as reader:\n                    for line in reader:\n                        parts = line.strip().split(\"|\")\n                        if len(parts) == 6:\n                            product = Product(\n                                id=parts[0],\n                                name=parts[1],\n                                quantity=int(parts[2]),\n                                price=float(parts[3]),\n                                supplier_id=parts[4],\n                                min_threshold=int(parts[5]),\n                                last_updated=datetime.now()\n                            )\n                            self.products[product.id] = product\n        except Exception as e:\n            print(f\"Failed to load inventory data: {e}\")\n    \n    def _log_activity(self, username: str, action: str, details: str):\n        try:\n            with open(\"inventory_log.txt\", \"a\") as writer:\n                writer.write(f\"{datetime.now()} - User: {username}, Action: {action}, Details: {details}\\n\")\n        except IOError as e:\n            print(f\"Failed to log activity: {e}\")\n\nclass SecurityError(Exception):\n    pass",
      "output": "import hashlib\nimport base64\nimport json\nimport os\nfrom datetime import datetime\nfrom typing import Dict, List, Optional, Collection\nfrom dataclasses import dataclass\nfrom concurrent.futures import ThreadPoolExecutor\nimport smtplib\nfrom email.mime.text import MIMEText\nfrom email.mime.multipart import MIMEMultipart\nimport re\n\n@dataclass\nclass Product:\n    id: str\n    name: str\n    quantity: int\n    price: float\n    supplier_id: str\n    min_threshold: int\n    last_updated: datetime\n\n@dataclass\nclass User:\n    username: str\n    password_hash: str\n    permissions: List[str]\n\n@dataclass\nclass Supplier:\n    id: str\n    name: str\n    email: str\n    phone: str\n\n@dataclass\nclass StockAlert:\n    product_id: str\n    product_name: str\n    current_stock: int\n    min_threshold: int\n\nclass InventoryService:\n    def __init__(self, auth_service, product_validator, alert_manager, \n                 notification_service, report_generator, inventory_persistence, activity_logger):\n        self.products: Dict[str, Product] = {}\n        self.auth_service = auth_service\n        self.product_validator = product_validator\n        self.alert_manager = alert_manager\n        self.notification_service = notification_service\n        self.report_generator = report_generator\n        self.inventory_persistence = inventory_persistence\n        self.activity_logger = activity_logger\n        \n        self._load_existing_data()\n    \n    def add_product(self, username: str, password: str, product_id: str, name: str,\n                   quantity: int, price: float, supplier_id: str, min_threshold: int):\n        self.auth_service.authenticate(username, password)\n        self.auth_service.check_permission(username, \"ADD_PRODUCT\")\n        \n        self.product_validator.validate_product_data(product_id, name, quantity, price, supplier_id, min_threshold)\n        \n        if product_id in self.products:\n            raise ValueError(\"Product already exists\")\n        \n        product = Product(\n            id=product_id,\n            name=self.product_validator.sanitize_name(name),\n            quantity=quantity,\n            price=price,\n            supplier_id=supplier_id,\n            min_threshold=min_threshold,\n            last_updated=datetime.now()\n        )\n        self.products[product_id] = product\n        \n        self.alert_manager.check_and_create_alert(product)\n        self.inventory_persistence.save_inventory(self.products.values())\n        self.activity_logger.log_activity(username, \"PRODUCT_ADDED\", product_id)\n        self.notification_service.notify_supplier_of_new_product(supplier_id, name)\n        \n        print(f\"Product added: {product_id}\")\n    \n    def update_stock(self, username: str, password: str, product_id: str, new_quantity: int, reason: str):\n        self.auth_service.authenticate(username, password)\n        self.auth_service.check_permission(username, \"UPDATE_STOCK\")\n        \n        product = self._get_product_by_id(product_id)\n        self.product_validator.validate_quantity(new_quantity)\n        \n        old_quantity = product.quantity\n        product.quantity = new_quantity\n        product.last_updated = datetime.now()\n        \n        self.alert_manager.handle_stock_change(product, old_quantity)\n        self.inventory_persistence.save_inventory(self.products.values())\n        self.activity_logger.log_activity(username, \"STOCK_UPDATED\", f\"{product_id} from {old_quantity} to {new_quantity}\")\n        \n        if abs(new_quantity - old_quantity) > 100:\n            self.notification_service.send_large_stock_change_alert(product, old_quantity, new_quantity, reason)\n        \n        print(f\"Stock updated for {product_id}: {new_quantity}\")\n    \n    def generate_report(self, username: str, password: str, report_type: str):\n        self.auth_service.authenticate(username, password)\n        self.auth_service.check_permission(username, \"GENERATE_REPORTS\")\n        \n        filename = self.report_generator.generate_report(report_type, self.products.values(), self.alert_manager.get_alerts())\n        self.activity_logger.log_activity(username, \"REPORT_GENERATED\", report_type)\n        \n        print(f\"Report generated: {filename}\")\n    \n    def _get_product_by_id(self, product_id: str) -> Product:\n        if product_id not in self.products:\n            raise ValueError(\"Product not found\")\n        return self.products[product_id]\n    \n    def _load_existing_data(self):\n        loaded_products = self.inventory_persistence.load_inventory()\n        for product in loaded_products:\n            self.products[product.id] = product\n            self.alert_manager.check_and_create_alert(product)\n\nclass AuthenticationService:\n    def __init__(self):\n        self.users: Dict[str, User] = {}\n        self.suppliers: Dict[str, Supplier] = {}\n        self._initialize_users()\n    \n    def authenticate(self, username: str, password: str):\n        if not self._authenticate_user(username, password):\n            raise SecurityError(\"Authentication failed\")\n    \n    def check_permission(self, username: str, permission: str):\n        if not self._has_permission(username, permission):\n            raise SecurityError(\"Insufficient permissions\")\n    \n    def get_supplier(self, supplier_id: str) -> Optional[Supplier]:\n        return self.suppliers.get(supplier_id)\n    \n    def _initialize_users(self):\n        self.users = {\n            \"admin\": User(\"admin\", PasswordUtil.hash_password(\"admin123\"),\n                         [\"ADD_PRODUCT\", \"UPDATE_STOCK\", \"GENERATE_REPORTS\", \"MANAGE_SUPPLIERS\"]),\n            \"manager\": User(\"manager\", PasswordUtil.hash_password(\"mgr123\"),\n                           [\"UPDATE_STOCK\", \"GENERATE_REPORTS\"]),\n            \"clerk\": User(\"clerk\", PasswordUtil.hash_password(\"clerk123\"),\n                         [\"UPDATE_STOCK\"])\n        }\n        \n        self.suppliers = {\n            \"SUP001\": Supplier(\"SUP001\", \"TechCorp\", \"tech@corp.com\", \"123-456-7890\"),\n            \"SUP002\": Supplier(\"SUP002\", \"OfficeSupply\", \"orders@office.com\", \"987-654-3210\")\n        }\n    \n    def _authenticate_user(self, username: str, password: str) -> bool:\n        user = self.users.get(username)\n        return user is not None and user.password_hash == PasswordUtil.hash_password(password)\n    \n    def _has_permission(self, username: str, permission: str) -> bool:\n        user = self.users.get(username)\n        return user is not None and permission in user.permissions\n\nclass ProductValidator:\n    def validate_product_data(self, product_id: str, name: str, quantity: int,\n                             price: float, supplier_id: str, min_threshold: int):\n        if not product_id or not product_id.strip():\n            raise ValueError(\"Product ID cannot be empty\")\n        if not name or not name.strip():\n            raise ValueError(\"Product name cannot be empty\")\n        if quantity < 0 or price < 0 or min_threshold < 0:\n            raise ValueError(\"Quantity, price, and threshold must be non-negative\")\n        if not supplier_id or not supplier_id.strip():\n            raise ValueError(\"Supplier ID cannot be empty\")\n    \n    def validate_quantity(self, quantity: int):\n        if quantity < 0:\n            raise ValueError(\"Quantity cannot be negative\")\n    \n    def sanitize_name(self, name: str) -> str:\n        return re.sub(r'[<>\"\\'\u0026]', '', name).strip()\n\nclass StockAlertManager:\n    def __init__(self, notification_service):\n        self.alerts: List[StockAlert] = []\n        self.notification_service = notification_service\n    \n    def check_and_create_alert(self, product: Product):\n        if product.quantity <= product.min_threshold:\n            self._create_low_stock_alert(product)\n    \n    def handle_stock_change(self, product: Product, old_quantity: int):\n        if product.quantity <= product.min_threshold and old_quantity > product.min_threshold:\n            self._create_low_stock_alert(product)\n        \n        if product.quantity > product.min_threshold:\n            self._remove_low_stock_alert(product.id)\n    \n    def get_alerts(self) -> List[StockAlert]:\n        return self.alerts.copy()\n    \n    def _create_low_stock_alert(self, product: Product):\n        alert = StockAlert(\n            product_id=product.id,\n            product_name=product.name,\n            current_stock=product.quantity,\n            min_threshold=product.min_threshold\n        )\n        self.alerts.append(alert)\n        self.notification_service.send_low_stock_alert(product)\n    \n    def _remove_low_stock_alert(self, product_id: str):\n        self.alerts = [alert for alert in self.alerts if alert.product_id != product_id]\n\nclass NotificationService:\n    def __init__(self, auth_service):\n        self.auth_service = auth_service\n        self.email_config = {\n            'smtp_host': 'smtp.company.com',\n            'smtp_port': 587,\n            'use_tls': True,\n            'username': 'inventory@company.com',\n            'password': 'email_password'\n        }\n    \n    def send_low_stock_alert(self, product: Product):\n        message = (f\"LOW STOCK ALERT: {product.name} ({product.id}) \"\n                  f\"has only {product.quantity} units remaining. \"\n                  f\"Minimum threshold: {product.min_threshold}\")\n        \n        self._send_manager_alert(message)\n        self._notify_supplier_of_reorder(product.supplier_id, product.name)\n    \n    def send_large_stock_change_alert(self, product: Product, old_quantity: int, new_quantity: int, reason: str):\n        message = (f\"Large stock change for {product.name}: \"\n                  f\"{old_quantity} -> {new_quantity}. Reason: {reason}\")\n        self._send_manager_alert(message)\n    \n    def notify_supplier_of_new_product(self, supplier_id: str, product_name: str):\n        supplier = self.auth_service.get_supplier(supplier_id)\n        if supplier:\n            self._send_supplier_notification(supplier, f\"New product added: {product_name}\")\n    \n    def _notify_supplier_of_reorder(self, supplier_id: str, product_name: str):\n        supplier = self.auth_service.get_supplier(supplier_id)\n        if supplier:\n            self._send_supplier_notification(supplier, f\"Reorder needed for: {product_name}\")\n    \n    def _send_manager_alert(self, message: str):\n        try:\n            print(f\"Manager alert sent: {message}\")\n        except Exception as e:\n            print(f\"Failed to send manager alert: {e}\")\n    \n    def _send_supplier_notification(self, supplier: Supplier, message: str):\n        try:\n            print(f\"Supplier notification sent to {supplier.name}: {message}\")\n        except Exception as e:\n            print(f\"Failed to send supplier notification: {e}\")\n\nclass ReportGenerator:\n    def generate_report(self, report_type: str, products: Collection[Product], alerts: List[StockAlert]) -> str:\n        try:\n            filename = f\"{report_type}_report_{datetime.now().isoformat().replace(':', '-')}.txt\"\n            \n            with open(filename, 'w') as writer:\n                if report_type == \"inventory\":\n                    self._generate_inventory_report(writer, products)\n                elif report_type == \"alerts\":\n                    self._generate_alerts_report(writer, alerts)\n                elif report_type == \"suppliers\":\n                    self._generate_suppliers_report(writer)\n                else:\n                    raise ValueError(f\"Unknown report type: {report_type}\")\n            \n            return filename\n            \n        except IOError as e:\n            raise RuntimeError(f\"Failed to generate report: {e}\")\n    \n    def _generate_inventory_report(self, writer, products: Collection[Product]):\n        writer.write(\"INVENTORY REPORT\\n\")\n        writer.write(f\"Generated: {datetime.now()}\\n\\n\")\n        \n        for product in products:\n            writer.write(f\"Product: {product.name} ({product.id})\\n\")\n            writer.write(f\"Quantity: {product.quantity}\\n\")\n            writer.write(f\"Price: ${product.price}\\n\\n\")\n    \n    def _generate_alerts_report(self, writer, alerts: List[StockAlert]):\n        writer.write(\"STOCK ALERTS REPORT\\n\")\n        writer.write(f\"Generated: {datetime.now()}\\n\\n\")\n        \n        for alert in alerts:\n            writer.write(f\"Alert: {alert.product_name} ({alert.product_id})\\n\")\n            writer.write(f\"Current Stock: {alert.current_stock}\\n\")\n            writer.write(f\"Minimum Threshold: {alert.min_threshold}\\n\\n\")\n    \n    def _generate_suppliers_report(self, writer):\n        writer.write(\"SUPPLIERS REPORT\\n\")\n        writer.write(f\"Generated: {datetime.now()}\\n\\n\")\n        writer.write(\"Report generation completed.\\n\")\n\nclass InventoryPersistence:\n    def save_inventory(self, products: Collection[Product]):\n        try:\n            with open(\"inventory.dat\", \"w\") as writer:\n                for product in products:\n                    writer.write(f\"{product.id}|{product.name}|{product.quantity}|{product.price}|{product.supplier_id}|{product.min_threshold}\\n\")\n        except IOError as e:\n            raise RuntimeError(f\"Failed to save inventory: {e}\")\n    \n    def load_inventory(self) -> List[Product]:\n        products = []\n        try:\n            if os.path.exists(\"inventory.dat\"):\n                with open(\"inventory.dat\", \"r\") as reader:\n                    for line in reader:\n                        parts = line.strip().split(\"|\")\n                        if len(parts) == 6:\n                            product = Product(\n                                id=parts[0],\n                                name=parts[1],\n                                quantity=int(parts[2]),\n                                price=float(parts[3]),\n                                supplier_id=parts[4],\n                                min_threshold=int(parts[5]),\n                                last_updated=datetime.now()\n                            )\n                            products.append(product)\n        except Exception as e:\n            print(f\"Failed to load inventory data: {e}\")\n        return products\n\nclass ActivityLogger:\n    def log_activity(self, username: str, action: str, details: str):\n        try:\n            with open(\"inventory_log.txt\", \"a\") as writer:\n                writer.write(f\"{datetime.now()} - User: {username}, Action: {action}, Details: {details}\\n\")\n        except IOError as e:\n            raise RuntimeError(f\"Failed to log activity: {e}\")\n\nclass PasswordUtil:\n    @staticmethod\n    def hash_password(password: str) -> str:\n        try:\n            hash_bytes = hashlib.sha256(password.encode()).digest()\n            return base64.b64encode(hash_bytes).decode()\n        except Exception as e:\n            raise RuntimeError(f\"Password hashing failed: {e}\")\n\nclass SecurityError(Exception):\n    pass",
      "level": "HARD",
      "language": "PYTHON",
      "violation": "SRP",
       "description": "Inventory stock management system"
    },
    {
      "input": "import threading\nimport secrets\nimport re\nfrom datetime import datetime\nfrom typing import Dict, List, Optional\nfrom dataclasses import dataclass\nfrom concurrent.futures import ThreadPoolExecutor\n\n@dataclass\nclass User:\n    email: str\n    name: str\n    password_hash: str\n    permissions: List[str]\n\n@dataclass\nclass Event:\n    event_id: str\n    event_name: str\n    description: str\n    venue: str\n    start_time: datetime\n    end_time: datetime\n    ticket_price: float\n    max_capacity: int\n    organizer_email: str\n\nclass EventManagementSystem:\n    def __init__(self):\n        self.events: Dict[str, Event] = {}\n        self.registered_users: Dict[str, User] = {}\n        self.event_registrations: Dict[str, List[str]] = {}\n        self.event_revenue: Dict[str, float] = {}\n        self.random = secrets.SystemRandom()\n        self.event_id_counter = 1000\n        self.lock = threading.RLock()\n        self.initialize_test_data()\n    \n    def create_event(self, organizer_email: str, password: str, event_name: str,\n                    description: str, venue: str, start_time: datetime,\n                    end_time: datetime, ticket_price: float, max_capacity: int):\n        \n        if not self.authenticate_user(organizer_email, password):\n            raise PermissionError(\"Invalid credentials\")\n        \n        organizer = self.registered_users.get(organizer_email)\n        if not self.has_permission(organizer, \"CREATE_EVENT\"):\n            raise PermissionError(\"User does not have permission to create events\")\n        \n        if not self.validate_event_data(event_name, description, venue, start_time, end_time, ticket_price, max_capacity):\n            raise ValueError(\"Invalid event data provided\")\n        \n        event_id = self.generate_event_id()\n        event = Event(event_id, self.sanitize_input(event_name), self.sanitize_input(description),\n                     self.sanitize_input(venue), start_time, end_time, ticket_price, max_capacity, organizer_email)\n        \n        with self.lock:\n            self.events[event_id] = event\n            self.event_registrations[event_id] = []\n            self.event_revenue[event_id] = 0.0\n        \n        self.send_event_creation_notification(organizer, event)\n        self.log_activity(organizer_email, \"EVENT_CREATED\", f\"{event_id} - {event_name}\")\n        self.update_event_website(event)\n        \n        print(f\"Event created: {event_id} - {event_name}\")\n    \n    def register_for_event(self, user_email: str, password: str, event_id: str, number_of_tickets: int):\n        if not self.authenticate_user(user_email, password):\n            raise PermissionError(\"Invalid credentials\")\n        \n        event = self.events.get(event_id)\n        if event is None:\n            raise ValueError(\"Event not found\")\n        \n        if event.start_time < datetime.now():\n            raise ValueError(\"Cannot register for past events\")\n        \n        with self.lock:\n            registrations = self.event_registrations[event_id]\n            if len(registrations) + number_of_tickets > event.max_capacity:\n                raise ValueError(\"Not enough capacity available\")\n        \n        if number_of_tickets <= 0 or number_of_tickets > 10:\n            raise ValueError(\"Invalid number of tickets (1-10 allowed)\")\n        \n        total_cost = event.ticket_price * number_of_tickets\n        if not self.process_payment(user_email, total_cost):\n            raise RuntimeError(\"Payment processing failed\")\n        \n        with self.lock:\n            for _ in range(number_of_tickets):\n                registrations.append(user_email)\n            self.event_revenue[event_id] += total_cost\n        \n        self.generate_tickets(user_email, event, number_of_tickets)\n        self.send_registration_confirmation(user_email, event, number_of_tickets, total_cost)\n        self.log_activity(user_email, \"REGISTERED_FOR_EVENT\", f\"{event_id} - {number_of_tickets} tickets\")\n        \n        if len(registrations) >= event.max_capacity:\n            self.send_event_full_notification(event)\n        \n        print(f\"User {user_email} registered for event {event_id}\")\n    \n    def generate_event_report(self, organizer_email: str, password: str, event_id: str):\n        if not self.authenticate_user(organizer_email, password):\n            raise PermissionError(\"Invalid credentials\")\n        \n        event = self.events.get(event_id)\n        if event is None:\n            raise ValueError(\"Event not found\")\n        \n        if event.organizer_email != organizer_email:\n            user = self.registered_users.get(organizer_email)\n            if not self.has_permission(user, \"VIEW_ALL_REPORTS\"):\n                raise PermissionError(\"No permission to view this event's report\")\n        \n        try:\n            filename = f\"event_report_{event_id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt\"\n            \n            with open(filename, 'w') as writer:\n                writer.write(\"EVENT REPORT\\n\")\n                writer.write(f\"Event: {event.event_name}\\n\")\n                writer.write(f\"Event ID: {event_id}\\n\")\n                writer.write(f\"Organizer: {event.organizer_email}\\n\")\n                writer.write(f\"Venue: {event.venue}\\n\")\n                writer.write(f\"Start Time: {event.start_time}\\n\")\n                writer.write(f\"Ticket Price: ${event.ticket_price}\\n\")\n                writer.write(f\"Max Capacity: {event.max_capacity}\\n\\n\")\n                \n                registrations = self.event_registrations[event_id]\n                writer.write(f\"Registrations: {len(registrations)}\\n\")\n                writer.write(f\"Revenue: ${self.event_revenue[event_id]}\\n\")\n                writer.write(f\"Occupancy Rate: {len(registrations) * 100.0 / event.max_capacity:.1f}%\\n\\n\")\n                \n                user_ticket_counts = {}\n                for email in registrations:\n                    user_ticket_counts[email] = user_ticket_counts.get(email, 0) + 1\n                \n                writer.write(\"Registered Users:\\n\")\n                for email, count in user_ticket_counts.items():\n                    writer.write(f\"- {email}: {count} ticket(s)\\n\")\n            \n            self.log_activity(organizer_email, \"REPORT_GENERATED\", event_id)\n            self.send_report_notification(organizer_email, filename)\n            \n            print(f\"Report generated: {filename}\")\n            \n        except IOError as e:\n            raise RuntimeError(f\"Failed to generate report: {str(e)}\")\n    \n    def initialize_test_data(self):\n        self.registered_users[\"organizer@company.com\"] = User(\n            \"organizer@company.com\", \"John Organizer\", self.hash_password(\"org123\"),\n            [\"CREATE_EVENT\", \"VIEW_ALL_REPORTS\"])\n        self.registered_users[\"admin@company.com\"] = User(\n            \"admin@company.com\", \"Admin User\", self.hash_password(\"admin123\"),\n            [\"CREATE_EVENT\", \"VIEW_ALL_REPORTS\"])\n        self.registered_users[\"user@company.com\"] = User(\n            \"user@company.com\", \"Regular User\", self.hash_password(\"user123\"), [])\n    \n    def authenticate_user(self, email: str, password: str) -> bool:\n        user = self.registered_users.get(email)\n        return user is not None and user.password_hash == self.hash_password(password)\n    \n    def has_permission(self, user: Optional[User], permission: str) -> bool:\n        return user is not None and permission in user.permissions\n    \n    def hash_password(self, password: str) -> str:\n        return f\"hashed_{password}\"\n    \n    def validate_event_data(self, event_name: str, description: str, venue: str,\n                           start_time: datetime, end_time: datetime,\n                           ticket_price: float, max_capacity: int) -> bool:\n        return (event_name is not None and event_name.strip() and\n                description is not None and venue is not None and venue.strip() and\n                start_time is not None and end_time is not None and start_time < end_time and\n                start_time > datetime.now() and ticket_price >= 0 and max_capacity > 0)\n    \n    def sanitize_input(self, input_str: str) -> str:\n        if input_str is None:\n            return \"\"\n        return re.sub(r'[<>\"'&]', '', input_str).strip()\n    \n    def generate_event_id(self) -> str:\n        with self.lock:\n            event_id = f\"EVT{self.event_id_counter}\"\n            self.event_id_counter += 1\n            return event_id\n    \n    def process_payment(self, user_email: str, amount: float) -> bool:\n        print(f\"Processing payment of ${amount} for user {user_email}\")\n        return self.random.random() > 0.1\n    \n    def generate_tickets(self, user_email: str, event: Event, number_of_tickets: int):\n        try:\n            filename = f\"tickets_{user_email.replace('@', '_')}_{event.event_id}.txt\"\n            with open(filename, 'w') as writer:\n                for i in range(1, number_of_tickets + 1):\n                    writer.write(f\"TICKET #{self.random.randint(0, 99999)}\\n\")\n                    writer.write(f\"Event: {event.event_name}\\n\")\n                    writer.write(f\"Venue: {event.venue}\\n\")\n                    writer.write(f\"Date: {event.start_time.strftime('%Y-%m-%d %H:%M')}\\n\")\n                    writer.write(f\"Holder: {user_email}\\n\")\n                    writer.write(\"================\\n\\n\")\n            \n            print(f\"Tickets generated: {filename}\")\n            \n        except IOError as e:\n            print(f\"Failed to generate tickets: {str(e)}\")\n    \n    def send_event_creation_notification(self, organizer: User, event: Event):\n        print(f\"Email sent to {organizer.email}: Your event '{event.event_name}' has been created successfully.\")\n    \n    def send_registration_confirmation(self, user_email: str, event: Event, number_of_tickets: int, total_cost: float):\n        print(f\"Email sent to {user_email}: Registration confirmed for '{event.event_name}'. Tickets: {number_of_tickets}, Total: ${total_cost}\")\n    \n    def send_event_full_notification(self, event: Event):\n        print(f\"Email sent to {event.organizer_email}: Event '{event.event_name}' is now fully booked.\")\n    \n    def send_report_notification(self, organizer_email: str, filename: str):\n        print(f\"Email sent to {organizer_email}: Event report generated: {filename}\")\n    \n    def log_activity(self, user_email: str, action: str, details: str):\n        try:\n            with open(\"event_system.log\", 'a') as writer:\n                writer.write(f\"{datetime.now().isoformat()} - User: {user_email}, Action: {action}, Details: {details}\\n\")\n        except IOError as e:\n            print(f\"Failed to log activity: {str(e)}\")\n    \n    def update_event_website(self, event: Event):\n        print(f\"Updating website with event information for: {event.event_name}\")",
      "output": "import threading\nimport secrets\nimport re\nfrom datetime import datetime\nfrom typing import Dict, List, Optional, Protocol\nfrom dataclasses import dataclass\nfrom abc import ABC, abstractmethod\n\n@dataclass\nclass User:\n    email: str\n    name: str\n    password_hash: str\n    permissions: List[str]\n\n@dataclass\nclass Event:\n    event_id: str\n    event_name: str\n    description: str\n    venue: str\n    start_time: datetime\n    end_time: datetime\n    ticket_price: float\n    max_capacity: int\n    organizer_email: str\n\nclass EventService:\n    def __init__(self, auth_service, event_validator, payment_processor,\n                 ticket_generator, notification_service, report_service,\n                 activity_logger, website_updater, id_generator):\n        self.events: Dict[str, Event] = {}\n        self.event_registrations: Dict[str, List[str]] = {}\n        self.event_revenue: Dict[str, float] = {}\n        self.auth_service = auth_service\n        self.event_validator = event_validator\n        self.payment_processor = payment_processor\n        self.ticket_generator = ticket_generator\n        self.notification_service = notification_service\n        self.report_service = report_service\n        self.activity_logger = activity_logger\n        self.website_updater = website_updater\n        self.id_generator = id_generator\n        self.lock = threading.RLock()\n    \n    def create_event(self, organizer_email: str, password: str, event_name: str,\n                    description: str, venue: str, start_time: datetime,\n                    end_time: datetime, ticket_price: float, max_capacity: int):\n        \n        self.auth_service.authenticate(organizer_email, password)\n        self.auth_service.check_permission(organizer_email, \"CREATE_EVENT\")\n        \n        self.event_validator.validate_event_data(event_name, description, venue, start_time, end_time, ticket_price, max_capacity)\n        \n        event_id = self.id_generator.generate()\n        event = Event(event_id, self.event_validator.sanitize_input(event_name),\n                     self.event_validator.sanitize_input(description),\n                     self.event_validator.sanitize_input(venue), start_time, end_time,\n                     ticket_price, max_capacity, organizer_email)\n        \n        with self.lock:\n            self.events[event_id] = event\n            self.event_registrations[event_id] = []\n            self.event_revenue[event_id] = 0.0\n        \n        self.notification_service.send_event_creation_notification(organizer_email, event)\n        self.activity_logger.log_activity(organizer_email, \"EVENT_CREATED\", f\"{event_id} - {event_name}\")\n        self.website_updater.update_event_website(event)\n        \n        print(f\"Event created: {event_id} - {event_name}\")\n    \n    def register_for_event(self, user_email: str, password: str, event_id: str, number_of_tickets: int):\n        self.auth_service.authenticate(user_email, password)\n        \n        event = self.get_event_by_id(event_id)\n        self.validate_registration(event, number_of_tickets)\n        \n        with self.lock:\n            registrations = self.event_registrations[event_id]\n            if len(registrations) + number_of_tickets > event.max_capacity:\n                raise ValueError(\"Not enough capacity available\")\n        \n        total_cost = event.ticket_price * number_of_tickets\n        self.payment_processor.process_payment(user_email, total_cost)\n        \n        with self.lock:\n            for _ in range(number_of_tickets):\n                registrations.append(user_email)\n            self.event_revenue[event_id] += total_cost\n        \n        self.ticket_generator.generate_tickets(user_email, event, number_of_tickets)\n        self.notification_service.send_registration_confirmation(user_email, event, number_of_tickets, total_cost)\n        self.activity_logger.log_activity(user_email, \"REGISTERED_FOR_EVENT\", f\"{event_id} - {number_of_tickets} tickets\")\n        \n        if len(registrations) >= event.max_capacity:\n            self.notification_service.send_event_full_notification(event)\n        \n        print(f\"User {user_email} registered for event {event_id}\")\n    \n    def generate_event_report(self, organizer_email: str, password: str, event_id: str):\n        self.auth_service.authenticate(organizer_email, password)\n        \n        event = self.get_event_by_id(event_id)\n        self.auth_service.check_report_permission(organizer_email, event)\n        \n        filename = self.report_service.generate_event_report(event, self.event_registrations[event_id], self.event_revenue[event_id])\n        \n        self.activity_logger.log_activity(organizer_email, \"REPORT_GENERATED\", event_id)\n        self.notification_service.send_report_notification(organizer_email, filename)\n        \n        print(f\"Report generated: {filename}\")\n    \n    def get_event_by_id(self, event_id: str) -> Event:\n        event = self.events.get(event_id)\n        if event is None:\n            raise ValueError(\"Event not found\")\n        return event\n    \n    def validate_registration(self, event: Event, number_of_tickets: int):\n        if event.start_time < datetime.now():\n            raise ValueError(\"Cannot register for past events\")\n        \n        if number_of_tickets <= 0 or number_of_tickets > 10:\n            raise ValueError(\"Invalid number of tickets (1-10 allowed)\")\n\nclass AuthenticationService:\n    def __init__(self):\n        self.registered_users: Dict[str, User] = {}\n        self.initialize_test_data()\n    \n    def authenticate(self, email: str, password: str):\n        if not self.authenticate_user(email, password):\n            raise PermissionError(\"Invalid credentials\")\n    \n    def check_permission(self, email: str, permission: str):\n        user = self.registered_users.get(email)\n        if not self.has_permission(user, permission):\n            raise PermissionError(f\"User does not have permission to {permission.lower()}\")\n    \n    def check_report_permission(self, organizer_email: str, event: Event):\n        if event.organizer_email != organizer_email:\n            user = self.registered_users.get(organizer_email)\n            if not self.has_permission(user, \"VIEW_ALL_REPORTS\"):\n                raise PermissionError(\"No permission to view this event's report\")\n    \n    def initialize_test_data(self):\n        self.registered_users[\"organizer@company.com\"] = User(\n            \"organizer@company.com\", \"John Organizer\", self.hash_password(\"org123\"),\n            [\"CREATE_EVENT\", \"VIEW_ALL_REPORTS\"])\n        self.registered_users[\"admin@company.com\"] = User(\n            \"admin@company.com\", \"Admin User\", self.hash_password(\"admin123\"),\n            [\"CREATE_EVENT\", \"VIEW_ALL_REPORTS\"])\n        self.registered_users[\"user@company.com\"] = User(\n            \"user@company.com\", \"Regular User\", self.hash_password(\"user123\"), [])\n    \n    def authenticate_user(self, email: str, password: str) -> bool:\n        user = self.registered_users.get(email)\n        return user is not None and user.password_hash == self.hash_password(password)\n    \n    def has_permission(self, user: Optional[User], permission: str) -> bool:\n        return user is not None and permission in user.permissions\n    \n    def hash_password(self, password: str) -> str:\n        return f\"hashed_{password}\"\n\nclass EventValidator:\n    def validate_event_data(self, event_name: str, description: str, venue: str,\n                           start_time: datetime, end_time: datetime,\n                           ticket_price: float, max_capacity: int):\n        if not event_name or not event_name.strip():\n            raise ValueError(\"Invalid event name\")\n        if not description or not venue or not venue.strip():\n            raise ValueError(\"Invalid event details\")\n        if not start_time or not end_time or start_time >= end_time or start_time <= datetime.now():\n            raise ValueError(\"Invalid event times\")\n        if ticket_price < 0 or max_capacity <= 0:\n            raise ValueError(\"Invalid ticket price or capacity\")\n    \n    def sanitize_input(self, input_str: str) -> str:\n        if input_str is None:\n            return \"\"\n        return re.sub(r'[<>\"'&]', '', input_str).strip()\n\nclass PaymentProcessor:\n    def __init__(self):\n        self.random = secrets.SystemRandom()\n    \n    def process_payment(self, user_email: str, amount: float):\n        print(f\"Processing payment of ${amount} for user {user_email}\")\n        if self.random.random() <= 0.1:\n            raise RuntimeError(\"Payment processing failed\")\n\nclass TicketGenerator:\n    def __init__(self):\n        self.random = secrets.SystemRandom()\n    \n    def generate_tickets(self, user_email: str, event: Event, number_of_tickets: int):\n        try:\n            filename = f\"tickets_{user_email.replace('@', '_')}_{event.event_id}.txt\"\n            with open(filename, 'w') as writer:\n                for i in range(1, number_of_tickets + 1):\n                    writer.write(f\"TICKET #{self.random.randint(0, 99999)}\\n\")\n                    writer.write(f\"Event: {event.event_name}\\n\")\n                    writer.write(f\"Venue: {event.venue}\\n\")\n                    writer.write(f\"Date: {event.start_time.strftime('%Y-%m-%d %H:%M')}\\n\")\n                    writer.write(f\"Holder: {user_email}\\n\")\n                    writer.write(\"================\\n\\n\")\n            \n            print(f\"Tickets generated: {filename}\")\n            \n        except IOError as e:\n            raise RuntimeError(f\"Failed to generate tickets: {str(e)}\")\n\nclass NotificationService:\n    def send_event_creation_notification(self, organizer_email: str, event: Event):\n        print(f\"Email sent to {organizer_email}: Your event '{event.event_name}' has been created successfully.\")\n    \n    def send_registration_confirmation(self, user_email: str, event: Event, number_of_tickets: int, total_cost: float):\n        print(f\"Email sent to {user_email}: Registration confirmed for '{event.event_name}'. Tickets: {number_of_tickets}, Total: ${total_cost}\")\n    \n    def send_event_full_notification(self, event: Event):\n        print(f\"Email sent to {event.organizer_email}: Event '{event.event_name}' is now fully booked.\")\n    \n    def send_report_notification(self, organizer_email: str, filename: str):\n        print(f\"Email sent to {organizer_email}: Event report generated: {filename}\")\n\nclass ReportService:\n    def generate_event_report(self, event: Event, registrations: List[str], revenue: float) -> str:\n        try:\n            filename = f\"event_report_{event.event_id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt\"\n            \n            with open(filename, 'w') as writer:\n                writer.write(\"EVENT REPORT\\n\")\n                writer.write(f\"Event: {event.event_name}\\n\")\n                writer.write(f\"Event ID: {event.event_id}\\n\")\n                writer.write(f\"Organizer: {event.organizer_email}\\n\")\n                writer.write(f\"Venue: {event.venue}\\n\")\n                writer.write(f\"Start Time: {event.start_time}\\n\")\n                writer.write(f\"Ticket Price: ${event.ticket_price}\\n\")\n                writer.write(f\"Max Capacity: {event.max_capacity}\\n\\n\")\n                \n                writer.write(f\"Registrations: {len(registrations)}\\n\")\n                writer.write(f\"Revenue: ${revenue}\\n\")\n                writer.write(f\"Occupancy Rate: {len(registrations) * 100.0 / event.max_capacity:.1f}%\\n\\n\")\n                \n                user_ticket_counts = {}\n                for email in registrations:\n                    user_ticket_counts[email] = user_ticket_counts.get(email, 0) + 1\n                \n                writer.write(\"Registered Users:\\n\")\n                for email, count in user_ticket_counts.items():\n                    writer.write(f\"- {email}: {count} ticket(s)\\n\")\n            \n            return filename\n            \n        except IOError as e:\n            raise RuntimeError(f\"Failed to generate report: {str(e)}\")\n\nclass ActivityLogger:\n    def log_activity(self, user_email: str, action: str, details: str):\n        try:\n            with open(\"event_system.log\", 'a') as writer:\n                writer.write(f\"{datetime.now().isoformat()} - User: {user_email}, Action: {action}, Details: {details}\\n\")\n        except IOError as e:\n            raise RuntimeError(f\"Failed to log activity: {str(e)}\")\n\nclass WebsiteUpdater:\n    def update_event_website(self, event: Event):\n        print(f\"Updating website with event information for: {event.event_name}\")\n\nclass EventIdGenerator:\n    def __init__(self):\n        self.event_id_counter = 1000\n        self.lock = threading.Lock()\n    \n    def generate(self) -> str:\n        with self.lock:\n            event_id = f\"EVT{self.event_id_counter}\"\n            self.event_id_counter += 1\n            return event_id",
      "level": "HARD",
      "language": "PYTHON",
      "violation": "SRP",
       "description": "Event registration management system"
    },
    {
      "input": "class User(private val name: String, private val email: String) {\n    \n    fun saveToDatabase() {\n        println(\"Saving user $name to database\")\n    }\n    \n    fun sendWelcomeEmail() {\n        println(\"Sending welcome email to $email\")\n    }\n}",
      "output": "class User(private val name: String, private val email: String) {\n    \n    fun getName(): String {\n        return name\n    }\n    \n    fun getEmail(): String {\n        return email\n    }\n}\n\nclass UserRepository {\n    fun save(user: User) {\n        println(\"Saving user ${user.getName()} to database\")\n    }\n}\n\nclass EmailService {\n    fun sendWelcomeEmail(user: User) {\n        println(\"Sending welcome email to ${user.getEmail()}\")\n    }\n}",
      "level": "EASY",
      "language": "KOTLIN",
      "violation": "SRP",
      "description": "User database email operations"
    },
    {
      "input": "class Employee(private val name: String, private val baseSalary: Double, private val yearsOfService: Int) {\n    \n    fun calculateSalary(): Double {\n        return baseSalary + (yearsOfService * 1000)\n    }\n    \n    fun printPaySlip() {\n        println(\"Pay slip for $name: $${calculateSalary()}\")\n    }\n}",
      "output": "class Employee(private val name: String, private val baseSalary: Double, private val yearsOfService: Int) {\n    \n    fun getName(): String {\n        return name\n    }\n    \n    fun getBaseSalary(): Double {\n        return baseSalary\n    }\n    \n    fun getYearsOfService(): Int {\n        return yearsOfService\n    }\n}\n\nclass SalaryCalculator {\n    fun calculate(employee: Employee): Double {\n        return employee.getBaseSalary() + (employee.getYearsOfService() * 1000)\n    }\n}\n\nclass PaySlipPrinter(private val calculator: SalaryCalculator) {\n    \n    fun print(employee: Employee) {\n        println(\"Pay slip for ${employee.getName()}: $${calculator.calculate(employee)}\")\n    }\n}",
      "level": "EASY",
      "language": "KOTLIN",
      "violation": "SRP",
      "description": "Employee salary payslip system"
    },
    {
      "input": "class Book(private val title: String, private val author: String, private val content: String) {\n    \n    fun printBook() {\n        println(\"Title: $title\")\n        println(\"Author: $author\")\n        println(\"Content: $content\")\n    }\n    \n    fun saveToFile(filename: String) {\n        println(\"Saving book to $filename\")\n    }\n}",
      "output": "class Book(private val title: String, private val author: String, private val content: String) {\n    \n    fun getTitle(): String {\n        return title\n    }\n    \n    fun getAuthor(): String {\n        return author\n    }\n    \n    fun getContent(): String {\n        return content\n    }\n}\n\nclass BookPrinter {\n    fun print(book: Book) {\n        println(\"Title: ${book.getTitle()}\")\n        println(\"Author: ${book.getAuthor()}\")\n        println(\"Content: ${book.getContent()}\")\n    }\n}\n\nclass BookFileSaver {\n    fun saveToFile(book: Book, filename: String) {\n        println(\"Saving book to $filename\")\n    }\n}",
      "level": "EASY",
      "language": "KOTLIN",
      "violation": "SRP",
      "description": "Book printing file saving"
    },
    {
      "input": "class Product(private val name: String, private val price: Double) {\n    \n    fun applyDiscount(percentage: Double): Double {\n        return price * (1 - percentage / 100)\n    }\n    \n    fun displayProduct() {\n        println(\"Product: $name, Price: $$price\")\n    }\n}",
      "output": "class Product(private val name: String, private val price: Double) {\n    \n    fun getName(): String {\n        return name\n    }\n    \n    fun getPrice(): Double {\n        return price\n    }\n}\n\nclass DiscountCalculator {\n    fun applyDiscount(product: Product, percentage: Double): Double {\n        return product.getPrice() * (1 - percentage / 100)\n    }\n}\n\nclass ProductDisplay {\n    fun display(product: Product) {\n        println(\"Product: ${product.getName()}, Price: $${product.getPrice()}\")\n    }\n}",
      "level": "EASY",
      "language": "KOTLIN",
      "violation": "SRP",
       "description": "Product discount display system"
    },

    {
      "input": "import java.util.*\n\ndata class SalesData(\n    val productName: String,\n    val amount: Double,\n    val date: Date\n)\n\ninterface DataSource {\n    fun getSalesDataForMonth(month: String): List<SalesData>\n}\n\ninterface EmailService {\n    fun sendEmail(to: String, subject: String, body: String)\n}\n\nclass ReportGenerator(\n    private val dataSource: DataSource,\n    private val emailService: EmailService\n) {\n    \n    fun generateAndSendMonthlyReport(month: String, recipientEmail: String) {\n        val salesData = dataSource.getSalesDataForMonth(month)\n        \n        val report = StringBuilder().apply {\n            append(\"Monthly Sales Report - $month\\n\")\n            append(\"================================\\n\\n\")\n        }\n        \n        var totalSales = 0.0\n        val productSales = mutableMapOf<String, Double>()\n        \n        salesData.forEach { data ->\n            totalSales += data.amount\n            productSales[data.productName] = productSales.getOrDefault(data.productName, 0.0) + data.amount\n        }\n        \n        report.apply {\n            append(\"Total Sales: $${String.format(\"%.2f\", totalSales)}\\n\\n\")\n            append(\"Sales by Product:\\n\")\n            append(\"-----------------\\n\")\n        }\n        \n        productSales.forEach { (product, amount) ->\n            report.append(\"$product: $${String.format(\"%.2f\", amount)}\\n\")\n        }\n        \n        report.apply {\n            append(\"\\nTop Performing Products:\\n\")\n            append(\"------------------------\\n\")\n        }\n        \n        productSales.entries\n            .sortedByDescending { it.value }\n            .take(5)\n            .forEach { (product, amount) ->\n                report.append(\"$product: $${String.format(\"%.2f\", amount)}\\n\")\n            }\n        \n        val reportContent = report.toString()\n        \n        val subject = \"Monthly Sales Report - $month\"\n        val body = \"Please find attached the monthly sales report.\\n\\n$reportContent\"\n        \n        emailService.sendEmail(recipientEmail, subject, body)\n        \n        println(\"Report sent successfully to $recipientEmail\")\n    }\n}",
      "output": "import java.util.*\n\ndata class SalesData(\n    val productName: String,\n    val amount: Double,\n    val date: Date\n)\n\ninterface DataSource {\n    fun getSalesDataForMonth(month: String): List<SalesData>\n}\n\ninterface EmailService {\n    fun sendEmail(to: String, subject: String, body: String)\n}\n\nclass ReportGenerator(private val dataSource: DataSource) {\n    \n    fun generateMonthlyReport(month: String): String {\n        val salesData = dataSource.getSalesDataForMonth(month)\n        \n        val report = StringBuilder().apply {\n            append(\"Monthly Sales Report - $month\\n\")\n            append(\"================================\\n\\n\")\n        }\n        \n        var totalSales = 0.0\n        val productSales = mutableMapOf<String, Double>()\n        \n        salesData.forEach { data ->\n            totalSales += data.amount\n            productSales[data.productName] = productSales.getOrDefault(data.productName, 0.0) + data.amount\n        }\n        \n        report.apply {\n            append(\"Total Sales: $${String.format(\"%.2f\", totalSales)}\\n\\n\")\n            append(\"Sales by Product:\\n\")\n            append(\"-----------------\\n\")\n        }\n        \n        productSales.forEach { (product, amount) ->\n            report.append(\"$product: $${String.format(\"%.2f\", amount)}\\n\")\n        }\n        \n        report.apply {\n            append(\"\\nTop Performing Products:\\n\")\n            append(\"------------------------\\n\")\n        }\n        \n        productSales.entries\n            .sortedByDescending { it.value }\n            .take(5)\n            .forEach { (product, amount) ->\n                report.append(\"$product: $${String.format(\"%.2f\", amount)}\\n\")\n            }\n        \n        return report.toString()\n    }\n}\n\nclass ReportDeliveryService(private val emailService: EmailService) {\n    \n    fun sendReport(reportContent: String, month: String, recipientEmail: String) {\n        val subject = \"Monthly Sales Report - $month\"\n        val body = \"Please find attached the monthly sales report.\\n\\n$reportContent\"\n        \n        emailService.sendEmail(recipientEmail, subject, body)\n        \n        println(\"Report sent successfully to $recipientEmail\")\n    }\n}",
      "level": "MODERATE",
      "language": "KOTLIN",
      "violation": "SRP",
       "description": "Sales report generation delivery"
    },
    {
      "input": "import java.security.SecureRandom\nimport java.util.*\n\ndata class User(\n    val username: String,\n    val passwordHash: String,\n    var email: String,\n    val createdAt: Date,\n    var lastLogin: Date? = null\n)\n\nclass UserManager {\n    private val users = mutableMapOf<String, User>()\n    private val sessions = mutableMapOf<String, String>()\n    private val random = SecureRandom()\n    \n    fun createUser(username: String, password: String, email: String) {\n        if (users.containsKey(username)) {\n            throw IllegalArgumentException(\"Username already exists\")\n        }\n        \n        if (!isValidEmail(email)) {\n            throw IllegalArgumentException(\"Invalid email format\")\n        }\n        \n        if (password.length < 8) {\n            throw IllegalArgumentException(\"Password must be at least 8 characters\")\n        }\n        \n        val hashedPassword = hashPassword(password)\n        val user = User(username, hashedPassword, email, Date())\n        users[username] = user\n        \n        println(\"User created successfully: $username\")\n    }\n    \n    fun login(username: String, password: String): String {\n        val user = users[username]\n            ?: throw IllegalArgumentException(\"Invalid username or password\")\n        \n        if (!verifyPassword(password, user.passwordHash)) {\n            throw IllegalArgumentException(\"Invalid username or password\")\n        }\n        \n        val sessionToken = generateSessionToken()\n        sessions[sessionToken] = username\n        \n        user.lastLogin = Date()\n        \n        println(\"User logged in: $username\")\n        return sessionToken\n    }\n    \n    fun logout(sessionToken: String) {\n        val username = sessions.remove(sessionToken)\n        username?.let {\n            println(\"User logged out: $it\")\n        }\n    }\n    \n    fun isLoggedIn(sessionToken: String): Boolean {\n        return sessions.containsKey(sessionToken)\n    }\n    \n    fun getUserBySession(sessionToken: String): User? {\n        val username = sessions[sessionToken] ?: return null\n        return users[username]\n    }\n    \n    private fun isValidEmail(email: String): Boolean {\n        return email.matches(Regex(\"^[A-Za-z0-9+_.-]+@(.+)$\"))\n    }\n    \n    private fun hashPassword(password: String): String {\n        return Base64.getEncoder().encodeToString(password.toByteArray())\n    }\n    \n    private fun verifyPassword(password: String, hash: String): Boolean {\n        return hashPassword(password) == hash\n    }\n    \n    private fun generateSessionToken(): String {\n        val bytes = ByteArray(32)\n        random.nextBytes(bytes)\n        return Base64.getEncoder().encodeToString(bytes)\n    }\n    \n    fun updateUserEmail(username: String, newEmail: String) {\n        val user = users[username]\n            ?: throw IllegalArgumentException(\"User not found\")\n        \n        if (!isValidEmail(newEmail)) {\n            throw IllegalArgumentException(\"Invalid email format\")\n        }\n        \n        user.email = newEmail\n        println(\"Email updated for user: $username\")\n    }\n    \n    fun getAllUsers(): List<User> {\n        return users.values.toList()\n    }\n}",
      "output": "import java.security.SecureRandom\nimport java.util.*\n\ndata class User(\n    val username: String,\n    val passwordHash: String,\n    var email: String,\n    val createdAt: Date,\n    var lastLogin: Date? = null\n)\n\nclass UserManager {\n    private val users = mutableMapOf<String, User>()\n    private val validator = UserValidator()\n    \n    fun createUser(username: String, password: String, email: String) {\n        if (users.containsKey(username)) {\n            throw IllegalArgumentException(\"Username already exists\")\n        }\n        \n        validator.validateUserData(username, password, email)\n        \n        val hashedPassword = PasswordUtil.hashPassword(password)\n        val user = User(username, hashedPassword, email, Date())\n        users[username] = user\n        \n        println(\"User created successfully: $username\")\n    }\n    \n    fun updateUserEmail(username: String, newEmail: String) {\n        val user = users[username]\n            ?: throw IllegalArgumentException(\"User not found\")\n        \n        validator.validateEmail(newEmail)\n        \n        user.email = newEmail\n        println(\"Email updated for user: $username\")\n    }\n    \n    fun findByUsername(username: String): User? {\n        return users[username]\n    }\n    \n    fun getAllUsers(): List<User> {\n        return users.values.toList()\n    }\n}\n\nclass AuthenticationService(private val userManager: UserManager) {\n    private val sessions = mutableMapOf<String, String>()\n    private val random = SecureRandom()\n    \n    fun login(username: String, password: String): String {\n        val user = userManager.findByUsername(username)\n            ?: throw IllegalArgumentException(\"Invalid username or password\")\n        \n        if (!PasswordUtil.verifyPassword(password, user.passwordHash)) {\n            throw IllegalArgumentException(\"Invalid username or password\")\n        }\n        \n        val sessionToken = generateSessionToken()\n        sessions[sessionToken] = username\n        \n        user.lastLogin = Date()\n        \n        println(\"User logged in: $username\")\n        return sessionToken\n    }\n    \n    fun logout(sessionToken: String) {\n        val username = sessions.remove(sessionToken)\n        username?.let {\n            println(\"User logged out: $it\")\n        }\n    }\n    \n    fun isLoggedIn(sessionToken: String): Boolean {\n        return sessions.containsKey(sessionToken)\n    }\n    \n    fun getUserBySession(sessionToken: String): User? {\n        val username = sessions[sessionToken] ?: return null\n        return userManager.findByUsername(username)\n    }\n    \n    private fun generateSessionToken(): String {\n        val bytes = ByteArray(32)\n        random.nextBytes(bytes)\n        return Base64.getEncoder().encodeToString(bytes)\n    }\n}\n\nclass UserValidator {\n    fun validateUserData(username: String, password: String, email: String) {\n        validateUsername(username)\n        validatePassword(password)\n        validateEmail(email)\n    }\n    \n    fun validateUsername(username: String) {\n        if (username.isBlank()) {\n            throw IllegalArgumentException(\"Username cannot be empty\")\n        }\n    }\n    \n    fun validatePassword(password: String) {\n        if (password.length < 8) {\n            throw IllegalArgumentException(\"Password must be at least 8 characters\")\n        }\n    }\n    \n    fun validateEmail(email: String) {\n        if (!email.matches(Regex(\"^[A-Za-z0-9+_.-]+@(.+)$\"))) {\n            throw IllegalArgumentException(\"Invalid email format\")\n        }\n    }\n}\n\nobject PasswordUtil {\n    fun hashPassword(password: String): String {\n        return Base64.getEncoder().encodeToString(password.toByteArray())\n    }\n    \n    fun verifyPassword(password: String, hash: String): Boolean {\n        return hashPassword(password) == hash\n    }\n}",
      "level": "MODERATE",
      "language": "KOTLIN",
      "violation": "SRP",
       "description": "User authentication session management"
    },

    {
      "input": "import java.io.*\nimport java.util.*\n\nclass FileProcessor(\n    private val inputDirectory: String,\n    private val outputDirectory: String,\n    private val archiveDirectory: String\n) {\n    \n    fun processAndArchiveFiles() {\n        val inputDir = File(inputDirectory)\n        val files = inputDir.listFiles { _, name -> name.endsWith(\".csv\") }\n        \n        if (files == null || files.isEmpty()) {\n            println(\"No CSV files found to process\")\n            return\n        }\n        \n        for (file in files) {\n            try {\n                val lines = readFile(file)\n                val processedLines = mutableListOf<String>()\n                \n                processedLines.add(\"PROCESSED_HEADER,ORIGINAL_DATA,TIMESTAMP\")\n                \n                for (i in 1 until lines.size) {\n                    val line = lines[i]\n                    val parts = line.split(\",\")\n                    \n                    val processedLine = StringBuilder()\n                    processedLine.append(\"PROCESSED\")\n                    \n                    for (part in parts) {\n                        processedLine.append(\",\").append(part.trim().uppercase())\n                    }\n                    \n                    processedLine.append(\",\").append(Date().toString())\n                    processedLines.add(processedLine.toString())\n                }\n                \n                val outputFileName = \"processed_${file.name}\"\n                val outputFile = File(outputDirectory, outputFileName)\n                writeFile(outputFile, processedLines)\n                \n                println(\"Processed file: ${file.name} -> $outputFileName\")\n                \n                val archiveName = \"archive_${System.currentTimeMillis()}_${file.name}\"\n                val archiveFile = File(archiveDirectory, archiveName)\n                \n                if (file.renameTo(archiveFile)) {\n                    println(\"Archived original file: ${file.name} -> $archiveName\")\n                } else {\n                    System.err.println(\"Failed to archive file: ${file.name}\")\n                }\n                \n            } catch (e: IOException) {\n                System.err.println(\"Error processing file ${file.name}: ${e.message}\")\n            }\n        }\n    }\n    \n    private fun readFile(file: File): List<String> {\n        val lines = mutableListOf<String>()\n        BufferedReader(FileReader(file)).use { reader ->\n            var line: String?\n            while (reader.readLine().also { line = it } != null) {\n                lines.add(line!!)\n            }\n        }\n        return lines\n    }\n    \n    private fun writeFile(file: File, lines: List<String>) {\n        BufferedWriter(FileWriter(file)).use { writer ->\n            for (line in lines) {\n                writer.write(line)\n                writer.newLine()\n            }\n        }\n    }\n    \n    fun getProcessingHistory(): List<String> {\n        val history = mutableListOf<String>()\n        val archiveDir = File(archiveDirectory)\n        val archivedFiles = archiveDir.listFiles()\n        \n        archivedFiles?.let { files ->\n            for (file in files) {\n                history.add(\"Archived: ${file.name} at ${Date(file.lastModified())}\")\n            }\n        }\n        \n        return history\n    }\n}",
      "output": "import java.io.*\nimport java.util.*\n\nclass FileProcessor(\n    private val inputDirectory: String,\n    private val outputDirectory: String,\n    private val fileReader: FileReader,\n    private val fileWriter: FileWriter\n) {\n    \n    fun processFiles(): List<ProcessedFile> {\n        val inputDir = File(inputDirectory)\n        val files = inputDir.listFiles { _, name -> name.endsWith(\".csv\") }\n        val processedFiles = mutableListOf<ProcessedFile>()\n        \n        if (files == null || files.isEmpty()) {\n            println(\"No CSV files found to process\")\n            return processedFiles\n        }\n        \n        for (file in files) {\n            try {\n                val lines = fileReader.readFile(file)\n                val processedLines = processContent(lines)\n                \n                val outputFileName = \"processed_${file.name}\"\n                val outputFile = File(outputDirectory, outputFileName)\n                fileWriter.writeFile(outputFile, processedLines)\n                \n                println(\"Processed file: ${file.name} -> $outputFileName\")\n                processedFiles.add(ProcessedFile(file, outputFile))\n                \n            } catch (e: IOException) {\n                System.err.println(\"Error processing file ${file.name}: ${e.message}\")\n            }\n        }\n        \n        return processedFiles\n    }\n    \n    private fun processContent(lines: List<String>): List<String> {\n        val processedLines = mutableListOf<String>()\n        processedLines.add(\"PROCESSED_HEADER,ORIGINAL_DATA,TIMESTAMP\")\n        \n        for (i in 1 until lines.size) {\n            val line = lines[i]\n            val parts = line.split(\",\")\n            \n            val processedLine = StringBuilder()\n            processedLine.append(\"PROCESSED\")\n            \n            for (part in parts) {\n                processedLine.append(\",\").append(part.trim().uppercase())\n            }\n            \n            processedLine.append(\",\").append(Date().toString())\n            processedLines.add(processedLine.toString())\n        }\n        \n        return processedLines\n    }\n}\n\nclass FileArchiver(private val archiveDirectory: String) {\n    \n    fun archiveFiles(processedFiles: List<ProcessedFile>) {\n        for (pf in processedFiles) {\n            val archiveName = \"archive_${System.currentTimeMillis()}_${pf.originalFile.name}\"\n            val archiveFile = File(archiveDirectory, archiveName)\n            \n            if (pf.originalFile.renameTo(archiveFile)) {\n                println(\"Archived original file: ${pf.originalFile.name} -> $archiveName\")\n            } else {\n                System.err.println(\"Failed to archive file: ${pf.originalFile.name}\")\n            }\n        }\n    }\n    \n    fun getArchiveHistory(): List<String> {\n        val history = mutableListOf<String>()\n        val archiveDir = File(archiveDirectory)\n        val archivedFiles = archiveDir.listFiles()\n        \n        archivedFiles?.let { files ->\n            for (file in files) {\n                history.add(\"Archived: ${file.name} at ${Date(file.lastModified())}\")\n            }\n        }\n        \n        return history\n    }\n}\n\nclass FileReader {\n    fun readFile(file: File): List<String> {\n        val lines = mutableListOf<String>()\n        BufferedReader(java.io.FileReader(file)).use { reader ->\n            var line: String?\n            while (reader.readLine().also { line = it } != null) {\n                lines.add(line!!)\n            }\n        }\n        return lines\n    }\n}\n\nclass FileWriter {\n    fun writeFile(file: File, lines: List<String>) {\n        BufferedWriter(java.io.FileWriter(file)).use { writer ->\n            for (line in lines) {\n                writer.write(line)\n                writer.newLine()\n            }\n        }\n    }\n}\n\ndata class ProcessedFile(\n    val originalFile: File,\n    val outputFile: File\n)",
      "level": "MODERATE",
      "language": "KOTLIN",
      "violation": "SRP",
       "description": "File processing archiving system"
    },
    {
      "input": "import java.util.*\nimport java.util.regex.Pattern\n\nclass CustomerService {\n    private val customers = mutableMapOf<String, Customer>()\n    private val blacklistedEmails = listOf(\"spam@test.com\", \"fake@test.com\")\n    \n    fun registerCustomer(name: String, email: String, phone: String) {\n        if (customers.containsKey(email)) {\n            throw IllegalArgumentException(\"Customer already exists\")\n        }\n        \n        if (blacklistedEmails.contains(email)) {\n            throw IllegalArgumentException(\"Email is blacklisted\")\n        }\n        \n        if (!email.matches(Regex(\"^[A-Za-z0-9+_.-]+@(.+)$\"))) {\n            throw IllegalArgumentException(\"Invalid email format\")\n        }\n        \n        val customer = Customer(UUID.randomUUID().toString(), name, email, phone)\n        customers[email] = customer\n        \n        sendWelcomeNotification(customer)\n        \n        println(\"Customer registered: $name\")\n    }\n    \n    fun updateCustomerInfo(email: String, newPhone: String) {\n        val customer = customers[email]\n            ?: throw IllegalArgumentException(\"Customer not found\")\n        \n        val oldPhone = customer.phone\n        customer.phone = newPhone\n        \n        sendUpdateNotification(customer, oldPhone, newPhone)\n        \n        println(\"Customer info updated: $email\")\n    }\n    \n    private fun sendWelcomeNotification(customer: Customer) {\n        val subject = \"Welcome to Our Service!\"\n        val message = \"\"\"Dear ${customer.name},\n\nThank you for registering with us.\nYour customer ID is: ${customer.id}\n\nBest regards,\nThe Team\"\"\"\n        \n        println(\"Sending email to: ${customer.email}\")\n        println(\"Subject: $subject\")\n        println(\"Message: $message\")\n        \n        val smsMessage = \"Welcome ${customer.name}! Your ID: ${customer.id}\"\n        println(\"Sending SMS to: ${customer.phone}\")\n        println(\"SMS: $smsMessage\")\n    }\n    \n    private fun sendUpdateNotification(customer: Customer, oldPhone: String, newPhone: String) {\n        val subject = \"Your Information Has Been Updated\"\n        val message = \"\"\"Dear ${customer.name},\n\nYour phone number has been updated from $oldPhone to $newPhone.\n\nIf you didn't make this change, please contact us.\n\nBest regards,\nThe Team\"\"\"\n        \n        println(\"Sending email to: ${customer.email}\")\n        println(\"Subject: $subject\")\n        println(\"Message: $message\")\n    }\n    \n    fun findByEmail(email: String): Customer? {\n        return customers[email]\n    }\n    \n    fun getAllCustomers(): List<Customer> {\n        return customers.values.toList()\n    }\n}\n\ndata class Customer(\n    val id: String,\n    val name: String,\n    val email: String,\n    var phone: String\n)",
      "output": "import java.util.*\n\nclass CustomerService(private val notificationService: NotificationService) {\n    private val customers = mutableMapOf<String, Customer>()\n    private val validator = CustomerValidator()\n    \n    fun registerCustomer(name: String, email: String, phone: String) {\n        if (customers.containsKey(email)) {\n            throw IllegalArgumentException(\"Customer already exists\")\n        }\n        \n        validator.validateEmail(email)\n        \n        val customer = Customer(UUID.randomUUID().toString(), name, email, phone)\n        customers[email] = customer\n        \n        notificationService.sendWelcomeNotification(customer)\n        \n        println(\"Customer registered: $name\")\n    }\n    \n    fun updateCustomerInfo(email: String, newPhone: String) {\n        val customer = customers[email]\n            ?: throw IllegalArgumentException(\"Customer not found\")\n        \n        val oldPhone = customer.phone\n        customer.phone = newPhone\n        \n        notificationService.sendUpdateNotification(customer, oldPhone, newPhone)\n        \n        println(\"Customer info updated: $email\")\n    }\n    \n    fun findByEmail(email: String): Customer? {\n        return customers[email]\n    }\n    \n    fun getAllCustomers(): List<Customer> {\n        return customers.values.toList()\n    }\n}\n\nclass CustomerValidator {\n    private val blacklistedEmails = listOf(\"spam@test.com\", \"fake@test.com\")\n    \n    fun validateEmail(email: String) {\n        if (blacklistedEmails.contains(email)) {\n            throw IllegalArgumentException(\"Email is blacklisted\")\n        }\n        \n        if (!email.matches(Regex(\"^[A-Za-z0-9+_.-]+@(.+)$\"))) {\n            throw IllegalArgumentException(\"Invalid email format\")\n        }\n    }\n}\n\nclass NotificationService {\n    private val emailSender = EmailSender()\n    private val smsSender = SmsSender()\n    \n    fun sendWelcomeNotification(customer: Customer) {\n        val subject = \"Welcome to Our Service!\"\n        val message = \"\"\"Dear ${customer.name},\n\nThank you for registering with us.\nYour customer ID is: ${customer.id}\n\nBest regards,\nThe Team\"\"\"\n        \n        emailSender.send(customer.email, subject, message)\n        \n        val smsMessage = \"Welcome ${customer.name}! Your ID: ${customer.id}\"\n        smsSender.send(customer.phone, smsMessage)\n    }\n    \n    fun sendUpdateNotification(customer: Customer, oldPhone: String, newPhone: String) {\n        val subject = \"Your Information Has Been Updated\"\n        val message = \"\"\"Dear ${customer.name},\n\nYour phone number has been updated from $oldPhone to $newPhone.\n\nIf you didn't make this change, please contact us.\n\nBest regards,\nThe Team\"\"\"\n        \n        emailSender.send(customer.email, subject, message)\n    }\n}\n\nclass EmailSender {\n    fun send(to: String, subject: String, message: String) {\n        println(\"Sending email to: $to\")\n        println(\"Subject: $subject\")\n        println(\"Message: $message\")\n    }\n}\n\nclass SmsSender {\n    fun send(phoneNumber: String, message: String) {\n        println(\"Sending SMS to: $phoneNumber\")\n        println(\"SMS: $message\")\n    }\n}\n\ndata class Customer(\n    val id: String,\n    val name: String,\n    val email: String,\n    var phone: String\n)",
      "level": "MODERATE",
      "language": "KOTLIN",
      "violation": "SRP",
      "description": "Customer registration notification system"
    },
    {
      "input": "import java.io.*\nimport java.sql.*\nimport java.time.LocalDateTime\nimport java.time.format.DateTimeFormatter\nimport java.util.*\nimport javax.mail.*\nimport javax.mail.internet.*\n\ndata class Order(\n    val id: Int,\n    val customer: Customer,\n    val items: List<OrderItem>,\n    val totalAmount: Double,\n    var status: String\n)\n\ndata class Customer(\n    val id: Int,\n    val name: String,\n    val email: String\n)\n\ndata class OrderItem(\n    val productId: Int,\n    val quantity: Int\n)\n\nclass OrderManager {\n    private val orders: MutableList<Order> = mutableListOf()\n    private var dbConnection: Connection? = null\n    private val emailProperties: Properties = Properties()\n    \n    init {\n        initializeDatabase()\n        setupEmailConfiguration()\n    }\n    \n    // Order management responsibility\n    fun addOrder(order: Order) {\n        if (validateOrder(order)) {\n            orders.add(order)\n            saveOrderToDatabase(order)\n            sendOrderConfirmationEmail(order)\n            generateInvoice(order)\n            updateInventory(order)\n            logOrderActivity(order, \"ORDER_CREATED\")\n        }\n    }\n    \n    fun updateOrderStatus(orderId: Int, status: String) {\n        val order = findOrderById(orderId)\n        order?.let {\n            it.status = status\n            updateOrderInDatabase(it)\n            sendStatusUpdateEmail(it)\n            logOrderActivity(it, \"STATUS_UPDATED\")\n        }\n    }\n    \n    fun findOrderById(orderId: Int): Order? {\n        return orders.find { it.id == orderId }\n    }\n    \n    // Validation responsibility\n    private fun validateOrder(order: Order?): Boolean {\n        if (order?.customer == null) {\n            return false\n        }\n        if (order.items.isEmpty()) {\n            return false\n        }\n        if (order.totalAmount <= 0) {\n            return false\n        }\n        return validateCustomerCreditLimit(order)\n    }\n    \n    private fun validateCustomerCreditLimit(order: Order): Boolean {\n        val customerCreditLimit = getCustomerCreditLimit(order.customer.id)\n        val outstandingAmount = getCustomerOutstandingAmount(order.customer.id)\n        return (outstandingAmount + order.totalAmount) <= customerCreditLimit\n    }\n    \n    // Database operations responsibility\n    private fun initializeDatabase() {\n        try {\n            val url = \"jdbc:mysql://localhost:3306/orders\"\n            val username = \"admin\"\n            val password = \"password\"\n            dbConnection = DriverManager.getConnection(url, username, password)\n        } catch (e: SQLException) {\n            System.err.println(\"Database connection failed: ${e.message}\")\n        }\n    }\n    \n    private fun saveOrderToDatabase(order: Order) {\n        try {\n            val sql = \"INSERT INTO orders (customer_id, total_amount, status, created_date) VALUES (?, ?, ?, ?)\"\n            dbConnection?.prepareStatement(sql)?.use { stmt ->\n                stmt.setInt(1, order.customer.id)\n                stmt.setDouble(2, order.totalAmount)\n                stmt.setString(3, order.status)\n                stmt.setTimestamp(4, Timestamp.valueOf(LocalDateTime.now()))\n                stmt.executeUpdate()\n            }\n        } catch (e: SQLException) {\n            System.err.println(\"Failed to save order: ${e.message}\")\n        }\n    }\n    \n    private fun updateOrderInDatabase(order: Order) {\n        try {\n            val sql = \"UPDATE orders SET status = ?, updated_date = ? WHERE id = ?\"\n            dbConnection?.prepareStatement(sql)?.use { stmt ->\n                stmt.setString(1, order.status)\n                stmt.setTimestamp(2, Timestamp.valueOf(LocalDateTime.now()))\n                stmt.setInt(3, order.id)\n                stmt.executeUpdate()\n            }\n        } catch (e: SQLException) {\n            System.err.println(\"Failed to update order: ${e.message}\")\n        }\n    }\n    \n    private fun getCustomerCreditLimit(customerId: Int): Double {\n        return try {\n            val sql = \"SELECT credit_limit FROM customers WHERE id = ?\"\n            dbConnection?.prepareStatement(sql)?.use { stmt ->\n                stmt.setInt(1, customerId)\n                val rs = stmt.executeQuery()\n                if (rs.next()) {\n                    rs.getDouble(\"credit_limit\")\n                } else {\n                    0.0\n                }\n            } ?: 0.0\n        } catch (e: SQLException) {\n            System.err.println(\"Failed to get credit limit: ${e.message}\")\n            0.0\n        }\n    }\n    \n    private fun getCustomerOutstandingAmount(customerId: Int): Double {\n        return try {\n            val sql = \"SELECT SUM(total_amount) FROM orders WHERE customer_id = ? AND status = 'PENDING'\"\n            dbConnection?.prepareStatement(sql)?.use { stmt ->\n                stmt.setInt(1, customerId)\n                val rs = stmt.executeQuery()\n                if (rs.next()) {\n                    rs.getDouble(1)\n                } else {\n                    0.0\n                }\n            } ?: 0.0\n        } catch (e: SQLException) {\n            System.err.println(\"Failed to get outstanding amount: ${e.message}\")\n            0.0\n        }\n    }\n    \n    // Email notification responsibility\n    private fun setupEmailConfiguration() {\n        emailProperties.apply {\n            put(\"mail.smtp.host\", \"smtp.gmail.com\")\n            put(\"mail.smtp.port\", \"587\")\n            put(\"mail.smtp.auth\", \"true\")\n            put(\"mail.smtp.starttls.enable\", \"true\")\n        }\n    }\n    \n    private fun sendOrderConfirmationEmail(order: Order) {\n        try {\n            val session = Session.getInstance(emailProperties)\n            val message = MimeMessage(session)\n            message.setFrom(InternetAddress(\"orders@company.com\"))\n            message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(order.customer.email))\n            message.subject = \"Order Confirmation - Order #${order.id}\"\n            message.setText(\"Your order has been confirmed. Total: $${order.totalAmount}\")\n            Transport.send(message)\n        } catch (e: MessagingException) {\n            System.err.println(\"Failed to send confirmation email: ${e.message}\")\n        }\n    }\n    \n    private fun sendStatusUpdateEmail(order: Order) {\n        try {\n            val session = Session.getInstance(emailProperties)\n            val message = MimeMessage(session)\n            message.setFrom(InternetAddress(\"orders@company.com\"))\n            message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(order.customer.email))\n            message.subject = \"Order Status Update - Order #${order.id}\"\n            message.setText(\"Your order status has been updated to: ${order.status}\")\n            Transport.send(message)\n        } catch (e: MessagingException) {\n            System.err.println(\"Failed to send status email: ${e.message}\")\n        }\n    }\n    \n    // Invoice generation responsibility\n    private fun generateInvoice(order: Order) {\n        try {\n            val filename = \"invoice_${order.id}.txt\"\n            FileWriter(filename).use { writer ->\n                writer.write(\"INVOICE\\n\")\n                writer.write(\"Order ID: ${order.id}\\n\")\n                writer.write(\"Customer: ${order.customer.name}\\n\")\n                writer.write(\"Date: ${LocalDateTime.now().format(DateTimeFormatter.ISO_LOCAL_DATE)}\\n\")\n                writer.write(\"Total Amount: $${order.totalAmount}\\n\")\n            }\n        } catch (e: IOException) {\n            System.err.println(\"Failed to generate invoice: ${e.message}\")\n        }\n    }\n    \n    // Inventory management responsibility\n    private fun updateInventory(order: Order) {\n        order.items.forEach { item ->\n            try {\n                val sql = \"UPDATE inventory SET quantity = quantity - ? WHERE product_id = ?\"\n                dbConnection?.prepareStatement(sql)?.use { stmt ->\n                    stmt.setInt(1, item.quantity)\n                    stmt.setInt(2, item.productId)\n                    stmt.executeUpdate()\n                }\n            } catch (e: SQLException) {\n                System.err.println(\"Failed to update inventory: ${e.message}\")\n            }\n        }\n    }\n    \n    // Logging responsibility\n    private fun logOrderActivity(order: Order, activity: String) {\n        try {\n            val filename = \"order_log.txt\"\n            FileWriter(filename, true).use { writer ->\n                val logEntry = \"${LocalDateTime.now().format(DateTimeFormatter.ISO_LOCAL_DATE_TIME)} - Order ${order.id}: $activity\\n\"\n                writer.write(logEntry)\n            }\n        } catch (e: IOException) {\n            System.err.println(\"Failed to log activity: ${e.message}\")\n        }\n    }\n}",
      "output": "import java.io.*\nimport java.sql.*\nimport java.time.LocalDateTime\nimport java.time.format.DateTimeFormatter\nimport java.util.*\nimport javax.mail.*\nimport javax.mail.internet.*\n\ndata class Order(\n    val id: Int,\n    val customer: Customer,\n    val items: List<OrderItem>,\n    val totalAmount: Double,\n    var status: String\n)\n\ndata class Customer(\n    val id: Int,\n    val name: String,\n    val email: String\n)\n\ndata class OrderItem(\n    val productId: Int,\n    val quantity: Int\n)\n\nclass OrderService(\n    private val orderRepository: OrderRepository,\n    private val orderValidator: OrderValidator,\n    private val emailService: EmailNotificationService,\n    private val invoiceGenerator: InvoiceGenerator,\n    private val inventoryService: InventoryService,\n    private val orderLogger: OrderLogger\n) {\n    private val orders: MutableList<Order> = mutableListOf()\n    \n    fun addOrder(order: Order) {\n        if (orderValidator.validateOrder(order)) {\n            orders.add(order)\n            orderRepository.save(order)\n            emailService.sendOrderConfirmation(order)\n            invoiceGenerator.generateInvoice(order)\n            inventoryService.updateInventory(order)\n            orderLogger.logActivity(order, \"ORDER_CREATED\")\n        }\n    }\n    \n    fun updateOrderStatus(orderId: Int, status: String) {\n        val order = findOrderById(orderId)\n        order?.let {\n            it.status = status\n            orderRepository.update(it)\n            emailService.sendStatusUpdate(it)\n            orderLogger.logActivity(it, \"STATUS_UPDATED\")\n        }\n    }\n    \n    fun findOrderById(orderId: Int): Order? {\n        return orders.find { it.id == orderId }\n    }\n}\n\nclass OrderValidator(private val customerService: CustomerService) {\n    \n    fun validateOrder(order: Order?): Boolean {\n        return isOrderValid(order) && validateCustomerCreditLimit(order!!)\n    }\n    \n    private fun isOrderValid(order: Order?): Boolean {\n        return order != null && order.customer != null && \n               order.items.isNotEmpty() && order.totalAmount > 0\n    }\n    \n    private fun validateCustomerCreditLimit(order: Order): Boolean {\n        val creditLimit = customerService.getCreditLimit(order.customer.id)\n        val outstanding = customerService.getOutstandingAmount(order.customer.id)\n        return (outstanding + order.totalAmount) <= creditLimit\n    }\n}\n\nclass OrderRepository {\n    private var dbConnection: Connection? = null\n    \n    init {\n        initializeConnection()\n    }\n    \n    private fun initializeConnection() {\n        try {\n            val url = \"jdbc:mysql://localhost:3306/orders\"\n            dbConnection = DriverManager.getConnection(url, \"admin\", \"password\")\n        } catch (e: SQLException) {\n            throw RuntimeException(\"Database connection failed\", e)\n        }\n    }\n    \n    fun save(order: Order) {\n        try {\n            val sql = \"INSERT INTO orders (customer_id, total_amount, status, created_date) VALUES (?, ?, ?, ?)\"\n            dbConnection?.prepareStatement(sql)?.use { stmt ->\n                stmt.setInt(1, order.customer.id)\n                stmt.setDouble(2, order.totalAmount)\n                stmt.setString(3, order.status)\n                stmt.setTimestamp(4, Timestamp.valueOf(LocalDateTime.now()))\n                stmt.executeUpdate()\n            }\n        } catch (e: SQLException) {\n            throw RuntimeException(\"Failed to save order\", e)\n        }\n    }\n    \n    fun update(order: Order) {\n        try {\n            val sql = \"UPDATE orders SET status = ?, updated_date = ? WHERE id = ?\"\n            dbConnection?.prepareStatement(sql)?.use { stmt ->\n                stmt.setString(1, order.status)\n                stmt.setTimestamp(2, Timestamp.valueOf(LocalDateTime.now()))\n                stmt.setInt(3, order.id)\n                stmt.executeUpdate()\n            }\n        } catch (e: SQLException) {\n            throw RuntimeException(\"Failed to update order\", e)\n        }\n    }\n}\n\nclass CustomerService(private val dbConnection: Connection) {\n    \n    fun getCreditLimit(customerId: Int): Double {\n        return try {\n            val sql = \"SELECT credit_limit FROM customers WHERE id = ?\"\n            dbConnection.prepareStatement(sql).use { stmt ->\n                stmt.setInt(1, customerId)\n                val rs = stmt.executeQuery()\n                if (rs.next()) rs.getDouble(\"credit_limit\") else 0.0\n            }\n        } catch (e: SQLException) {\n            throw RuntimeException(\"Failed to get credit limit\", e)\n        }\n    }\n    \n    fun getOutstandingAmount(customerId: Int): Double {\n        return try {\n            val sql = \"SELECT SUM(total_amount) FROM orders WHERE customer_id = ? AND status = 'PENDING'\"\n            dbConnection.prepareStatement(sql).use { stmt ->\n                stmt.setInt(1, customerId)\n                val rs = stmt.executeQuery()\n                if (rs.next()) rs.getDouble(1) else 0.0\n            }\n        } catch (e: SQLException) {\n            throw RuntimeException(\"Failed to get outstanding amount\", e)\n        }\n    }\n}\n\nclass EmailNotificationService {\n    private val emailProperties: Properties = Properties()\n    \n    init {\n        setupConfiguration()\n    }\n    \n    private fun setupConfiguration() {\n        emailProperties.apply {\n            put(\"mail.smtp.host\", \"smtp.gmail.com\")\n            put(\"mail.smtp.port\", \"587\")\n            put(\"mail.smtp.auth\", \"true\")\n            put(\"mail.smtp.starttls.enable\", \"true\")\n        }\n    }\n    \n    fun sendOrderConfirmation(order: Order) {\n        sendEmail(\n            order.customer.email,\n            \"Order Confirmation - Order #${order.id}\",\n            \"Your order has been confirmed. Total: $${order.totalAmount}\"\n        )\n    }\n    \n    fun sendStatusUpdate(order: Order) {\n        sendEmail(\n            order.customer.email,\n            \"Order Status Update - Order #${order.id}\",\n            \"Your order status has been updated to: ${order.status}\"\n        )\n    }\n    \n    private fun sendEmail(to: String, subject: String, body: String) {\n        try {\n            val session = Session.getInstance(emailProperties)\n            val message = MimeMessage(session).apply {\n                setFrom(InternetAddress(\"orders@company.com\"))\n                setRecipients(Message.RecipientType.TO, InternetAddress.parse(to))\n                setSubject(subject)\n                setText(body)\n            }\n            Transport.send(message)\n        } catch (e: MessagingException) {\n            throw RuntimeException(\"Failed to send email\", e)\n        }\n    }\n}\n\nclass InvoiceGenerator {\n    fun generateInvoice(order: Order) {\n        try {\n            val filename = \"invoice_${order.id}.txt\"\n            FileWriter(filename).use { writer ->\n                writer.write(buildInvoiceContent(order))\n            }\n        } catch (e: IOException) {\n            throw RuntimeException(\"Failed to generate invoice\", e)\n        }\n    }\n    \n    private fun buildInvoiceContent(order: Order): String {\n        return buildString {\n            appendLine(\"INVOICE\")\n            appendLine(\"Order ID: ${order.id}\")\n            appendLine(\"Customer: ${order.customer.name}\")\n            appendLine(\"Date: ${LocalDateTime.now().format(DateTimeFormatter.ISO_LOCAL_DATE)}\")\n            appendLine(\"Total Amount: $${\"%.2f\".format(order.totalAmount)}\")\n        }\n    }\n}\n\nclass InventoryService(private val dbConnection: Connection) {\n    \n    fun updateInventory(order: Order) {\n        order.items.forEach { item ->\n            updateProductQuantity(item.productId, item.quantity)\n        }\n    }\n    \n    private fun updateProductQuantity(productId: Int, quantity: Int) {\n        try {\n            val sql = \"UPDATE inventory SET quantity = quantity - ? WHERE product_id = ?\"\n            dbConnection.prepareStatement(sql).use { stmt ->\n                stmt.setInt(1, quantity)\n                stmt.setInt(2, productId)\n                stmt.executeUpdate()\n            }\n        } catch (e: SQLException) {\n            throw RuntimeException(\"Failed to update inventory\", e)\n        }\n    }\n}\n\nclass OrderLogger {\n    fun logActivity(order: Order, activity: String) {\n        try {\n            FileWriter(\"order_log.txt\", true).use { writer ->\n                val logEntry = \"${LocalDateTime.now().format(DateTimeFormatter.ISO_LOCAL_DATE_TIME)} - Order ${order.id}: $activity\\n\"\n                writer.write(logEntry)\n            }\n        } catch (e: IOException) {\n            throw RuntimeException(\"Failed to log activity\", e)\n        }\n    }\n}",
      "level": "HARD",
      "language": "KOTLIN",
      "violation": "SRP",
       "description": "Order management processing system"
    },
    {
      "input": "import java.util.*\nimport java.io.*\nimport java.time.LocalDateTime\nimport java.security.MessageDigest\nimport java.util.concurrent.ConcurrentHashMap\nimport java.util.regex.Pattern\n\nclass BlogPostManager {\n    private val posts = ConcurrentHashMap<Int, BlogPost>()\n    private val userSessions = ConcurrentHashMap<String, List<String>>()\n    private val userPermissions = hashMapOf<String, Int>()\n    private var nextPostId = 1\n    \n    init {\n        initializeDefaultUsers()\n        setupLogging()\n    }\n    \n    fun createPost(sessionToken: String, title: String, content: String, tags: List<String>?) {\n        if (!isValidSession(sessionToken)) {\n            throw SecurityException(\"Invalid session\")\n        }\n        \n        val username = getUserFromSession(sessionToken)\n        if (!hasPermission(username, \"CREATE_POST\")) {\n            throw SecurityException(\"Insufficient permissions\")\n        }\n        \n        if (!validatePostContent(title, content)) {\n            throw IllegalArgumentException(\"Invalid post content\")\n        }\n        \n        val sanitizedTitle = sanitizeHtml(title)\n        val sanitizedContent = sanitizeHtml(content)\n        val processedTags = processTags(tags)\n        \n        val post = BlogPost(nextPostId++, sanitizedTitle, sanitizedContent, \n                           username!!, LocalDateTime.now(), processedTags)\n        posts[post.id] = post\n        \n        updateSearchIndex(post)\n        generateSitemap()\n        notifySubscribers(post)\n        logActivity(username, \"POST_CREATED\", post.id)\n        \n        println(\"Blog post created successfully: ${post.id}\")\n    }\n    \n    fun updatePost(sessionToken: String, postId: Int, newTitle: String, newContent: String) {\n        if (!isValidSession(sessionToken)) {\n            throw SecurityException(\"Invalid session\")\n        }\n        \n        val username = getUserFromSession(sessionToken)\n        val post = posts[postId] ?: throw IllegalArgumentException(\"Post not found\")\n        \n        if (post.author != username && !hasPermission(username, \"EDIT_ANY_POST\")) {\n            throw SecurityException(\"Cannot edit this post\")\n        }\n        \n        if (!validatePostContent(newTitle, newContent)) {\n            throw IllegalArgumentException(\"Invalid post content\")\n        }\n        \n        post.title = sanitizeHtml(newTitle)\n        post.content = sanitizeHtml(newContent)\n        post.lastModified = LocalDateTime.now()\n        \n        updateSearchIndex(post)\n        generateSitemap()\n        logActivity(username!!, \"POST_UPDATED\", postId)\n        \n        println(\"Post updated: $postId\")\n    }\n    \n    fun deletePost(sessionToken: String, postId: Int) {\n        if (!isValidSession(sessionToken)) {\n            throw SecurityException(\"Invalid session\")\n        }\n        \n        val username = getUserFromSession(sessionToken)\n        val post = posts[postId] ?: throw IllegalArgumentException(\"Post not found\")\n        \n        if (post.author != username && !hasPermission(username, \"DELETE_ANY_POST\")) {\n            throw SecurityException(\"Cannot delete this post\")\n        }\n        \n        posts.remove(postId)\n        removeFromSearchIndex(postId)\n        generateSitemap()\n        logActivity(username!!, \"POST_DELETED\", postId)\n        \n        println(\"Post deleted: $postId\")\n    }\n    \n    private fun initializeDefaultUsers() {\n        userPermissions[\"admin\"] = 7 // All permissions\n        userPermissions[\"editor\"] = 3 // Create and edit\n        userPermissions[\"author\"] = 1 // Create only\n    }\n    \n    private fun setupLogging() {\n        try {\n            val logDir = File(\"logs\")\n            if (!logDir.exists()) {\n                logDir.mkdirs()\n            }\n        } catch (e: Exception) {\n            System.err.println(\"Failed to setup logging: ${e.message}\")\n        }\n    }\n    \n    private fun isValidSession(sessionToken: String?): Boolean {\n        return sessionToken != null && userSessions.containsKey(sessionToken)\n    }\n    \n    private fun getUserFromSession(sessionToken: String): String? {\n        val sessionData = userSessions[sessionToken]\n        return sessionData?.get(0)\n    }\n    \n    private fun hasPermission(username: String?, permission: String): Boolean {\n        val userLevel = userPermissions[username] ?: return false\n        \n        return when (permission) {\n            \"CREATE_POST\" -> (userLevel and 1) != 0\n            \"EDIT_ANY_POST\" -> (userLevel and 2) != 0\n            \"DELETE_ANY_POST\" -> (userLevel and 4) != 0\n            else -> false\n        }\n    }\n    \n    private fun validatePostContent(title: String, content: String): Boolean {\n        if (title.trim().isEmpty() || title.length > 200) {\n            return false\n        }\n        if (content.trim().isEmpty() || content.length > 10000) {\n            return false\n        }\n        \n        val scriptPattern = Pattern.compile(\"<script[^>]*>.*?</script>\", Pattern.CASE_INSENSITIVE)\n        return !scriptPattern.matcher(title).find() && !scriptPattern.matcher(content).find()\n    }\n    \n    private fun sanitizeHtml(input: String?): String {\n        if (input == null) return \"\"\n        return input.replace(Regex(\"<script[^>]*>.*?</script>\"), \"\")\n                   .replace(Regex(\"<[^>]+>\"), \"\")\n                   .replace(\"&\", \"&amp;\")\n                   .replace(\"<\", \"&lt;\")\n                   .replace(\">\", \"&gt;\")\n    }\n    \n    private fun processTags(tags: List<String>?): List<String> {\n        if (tags == null) return arrayListOf()\n        \n        return tags.map { it.lowercase().trim() }\n                  .filter { it.isNotEmpty() && it.length <= 50 }\n                  .distinct()\n    }\n    \n    private fun updateSearchIndex(post: BlogPost) {\n        try {\n            val indexFile = \"search_index.txt\"\n            FileWriter(indexFile, true).use { writer ->\n                writer.write(\"${post.id}|${post.title}|${post.content}\\n\")\n            }\n        } catch (e: IOException) {\n            System.err.println(\"Failed to update search index: ${e.message}\")\n        }\n    }\n    \n    private fun removeFromSearchIndex(postId: Int) {\n        try {\n            val indexFile = File(\"search_index.txt\")\n            if (!indexFile.exists()) return\n            \n            val lines = mutableListOf<String>()\n            BufferedReader(FileReader(indexFile)).use { reader ->\n                var line: String?\n                while (reader.readLine().also { line = it } != null) {\n                    if (!line!!.startsWith(\"$postId|\")) {\n                        lines.add(line!!)\n                    }\n                }\n            }\n            \n            FileWriter(indexFile).use { writer ->\n                lines.forEach { writer.write(\"$it\\n\") }\n            }\n        } catch (e: IOException) {\n            System.err.println(\"Failed to update search index: ${e.message}\")\n        }\n    }\n    \n    private fun generateSitemap() {\n        try {\n            FileWriter(\"sitemap.xml\").use { writer ->\n                writer.write(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\")\n                writer.write(\"<urlset xmlns=\\\"http://www.sitemaps.org/schemas/sitemap/0.9\\\">\\n\")\n                \n                posts.values.forEach { post ->\n                    writer.write(\"  <url>\\n\")\n                    writer.write(\"    <loc>https://blog.com/post/${post.id}</loc>\\n\")\n                    writer.write(\"    <lastmod>${post.lastModified}</lastmod>\\n\")\n                    writer.write(\"  </url>\\n\")\n                }\n                \n                writer.write(\"</urlset>\\n\")\n            }\n        } catch (e: IOException) {\n            System.err.println(\"Failed to generate sitemap: ${e.message}\")\n        }\n    }\n    \n    private fun notifySubscribers(post: BlogPost) {\n        println(\"Sending notifications for new post: ${post.title}\")\n        try {\n            Thread.sleep(100)\n        } catch (e: InterruptedException) {\n            Thread.currentThread().interrupt()\n        }\n    }\n    \n    private fun logActivity(username: String, action: String, postId: Int) {\n        try {\n            val logFile = \"logs/activity_${LocalDateTime.now().toLocalDate()}.log\"\n            FileWriter(logFile, true).use { writer ->\n                val logEntry = \"${LocalDateTime.now()} - User: $username, Action: $action, Post: $postId\\n\"\n                writer.write(logEntry)\n            }\n        } catch (e: IOException) {\n            System.err.println(\"Failed to log activity: ${e.message}\")\n        }\n    }\n    \n    fun searchPosts(query: String): List<BlogPost> {\n        val results = mutableListOf<BlogPost>()\n        val lowerQuery = query.lowercase()\n        \n        posts.values.forEach { post ->\n            if (post.title.lowercase().contains(lowerQuery) ||\n                post.content.lowercase().contains(lowerQuery) ||\n                post.tags.any { tag -> tag.contains(lowerQuery) }) {\n                results.add(post)\n            }\n        }\n        \n        return results\n    }\n    \n    fun loginUser(username: String, password: String): String {\n        val hashedPassword = hashPassword(password)\n        if (validateCredentials(username, hashedPassword)) {\n            val sessionToken = generateSessionToken(username)\n            userSessions[sessionToken] = listOf(username, LocalDateTime.now().toString())\n            logActivity(username, \"LOGIN\", 0)\n            return sessionToken\n        }\n        throw SecurityException(\"Invalid credentials\")\n    }\n    \n    private fun hashPassword(password: String): String {\n        return try {\n            val md = MessageDigest.getInstance(\"SHA-256\")\n            val hash = md.digest(password.toByteArray())\n            hash.joinToString(\"\") { \"%02x\".format(it) }\n        } catch (e: Exception) {\n            throw RuntimeException(\"Password hashing failed\", e)\n        }\n    }\n    \n    private fun validateCredentials(username: String, hashedPassword: String): Boolean {\n        return userPermissions.containsKey(username)\n    }\n    \n    private fun generateSessionToken(username: String): String {\n        return hashPassword(username + System.currentTimeMillis())\n    }\n}\n\ndata class BlogPost(\n    val id: Int,\n    var title: String,\n    var content: String,\n    val author: String,\n    val createdAt: LocalDateTime,\n    var lastModified: LocalDateTime = createdAt,\n    val tags: List<String> = emptyList()\n)",
      "output": "import java.util.*\nimport java.io.*\nimport java.time.LocalDateTime\nimport java.security.MessageDigest\nimport java.util.concurrent.ConcurrentHashMap\nimport java.util.regex.Pattern\n\nclass BlogPostService(\n    private val validator: BlogPostValidator,\n    private val sanitizer: ContentSanitizer,\n    private val authService: AuthenticationService,\n    private val searchService: SearchIndexService,\n    private val sitemapGenerator: SitemapGenerator,\n    private val notificationService: NotificationService,\n    private val activityLogger: ActivityLogger\n) {\n    private val posts = ConcurrentHashMap<Int, BlogPost>()\n    private var nextPostId = 1\n    \n    fun createPost(sessionToken: String, title: String, content: String, tags: List<String>?) {\n        val username = authService.validateSessionAndGetUser(sessionToken)\n        authService.checkPermission(username, \"CREATE_POST\")\n        \n        validator.validatePostContent(title, content)\n        \n        val sanitizedTitle = sanitizer.sanitizeHtml(title)\n        val sanitizedContent = sanitizer.sanitizeHtml(content)\n        val processedTags = sanitizer.processTags(tags)\n        \n        val post = BlogPost(nextPostId++, sanitizedTitle, sanitizedContent, \n                           username, LocalDateTime.now(), processedTags = processedTags)\n        posts[post.id] = post\n        \n        searchService.updateIndex(post)\n        sitemapGenerator.regenerate(posts.values)\n        notificationService.notifySubscribers(post)\n        activityLogger.logActivity(username, \"POST_CREATED\", post.id)\n        \n        println(\"Blog post created successfully: ${post.id}\")\n    }\n    \n    fun updatePost(sessionToken: String, postId: Int, newTitle: String, newContent: String) {\n        val username = authService.validateSessionAndGetUser(sessionToken)\n        val post = getPostById(postId)\n        \n        authService.checkPostEditPermission(username, post)\n        validator.validatePostContent(newTitle, newContent)\n        \n        post.title = sanitizer.sanitizeHtml(newTitle)\n        post.content = sanitizer.sanitizeHtml(newContent)\n        post.lastModified = LocalDateTime.now()\n        \n        searchService.updateIndex(post)\n        sitemapGenerator.regenerate(posts.values)\n        activityLogger.logActivity(username, \"POST_UPDATED\", postId)\n        \n        println(\"Post updated: $postId\")\n    }\n    \n    fun deletePost(sessionToken: String, postId: Int) {\n        val username = authService.validateSessionAndGetUser(sessionToken)\n        val post = getPostById(postId)\n        \n        authService.checkPostDeletePermission(username, post)\n        \n        posts.remove(postId)\n        searchService.removeFromIndex(postId)\n        sitemapGenerator.regenerate(posts.values)\n        activityLogger.logActivity(username, \"POST_DELETED\", postId)\n        \n        println(\"Post deleted: $postId\")\n    }\n    \n    private fun getPostById(postId: Int): BlogPost {\n        return posts[postId] ?: throw IllegalArgumentException(\"Post not found\")\n    }\n    \n    fun searchPosts(query: String): List<BlogPost> {\n        return searchService.search(posts.values, query)\n    }\n}\n\nclass BlogPostValidator {\n    companion object {\n        private val SCRIPT_PATTERN = Pattern.compile(\"<script[^>]*>.*?</script>\", Pattern.CASE_INSENSITIVE)\n    }\n    \n    fun validatePostContent(title: String, content: String) {\n        if (title.trim().isEmpty() || title.length > 200) {\n            throw IllegalArgumentException(\"Invalid title\")\n        }\n        if (content.trim().isEmpty() || content.length > 10000) {\n            throw IllegalArgumentException(\"Invalid content\")\n        }\n        \n        if (SCRIPT_PATTERN.matcher(title).find() || SCRIPT_PATTERN.matcher(content).find()) {\n            throw IllegalArgumentException(\"Script tags not allowed\")\n        }\n    }\n}\n\nclass ContentSanitizer {\n    fun sanitizeHtml(input: String?): String {\n        if (input == null) return \"\"\n        return input.replace(Regex(\"<script[^>]*>.*?</script>\"), \"\")\n                   .replace(Regex(\"<[^>]+>\"), \"\")\n                   .replace(\"&\", \"&amp;\")\n                   .replace(\"<\", \"&lt;\")\n                   .replace(\">\", \"&gt;\")\n    }\n    \n    fun processTags(tags: List<String>?): List<String> {\n        if (tags == null) return emptyList()\n        \n        return tags.map { it.lowercase().trim() }\n                  .filter { it.isNotEmpty() && it.length <= 50 }\n                  .distinct()\n    }\n}\n\nclass AuthenticationService {\n    private val userSessions = ConcurrentHashMap<String, List<String>>()\n    private val userPermissions = hashMapOf<String, Int>()\n    \n    init {\n        initializeDefaultUsers()\n    }\n    \n    fun validateSessionAndGetUser(sessionToken: String): String {\n        if (!isValidSession(sessionToken)) {\n            throw SecurityException(\"Invalid session\")\n        }\n        return getUserFromSession(sessionToken)\n    }\n    \n    fun checkPermission(username: String, permission: String) {\n        if (!hasPermission(username, permission)) {\n            throw SecurityException(\"Insufficient permissions\")\n        }\n    }\n    \n    fun checkPostEditPermission(username: String, post: BlogPost) {\n        if (post.author != username && !hasPermission(username, \"EDIT_ANY_POST\")) {\n            throw SecurityException(\"Cannot edit this post\")\n        }\n    }\n    \n    fun checkPostDeletePermission(username: String, post: BlogPost) {\n        if (post.author != username && !hasPermission(username, \"DELETE_ANY_POST\")) {\n            throw SecurityException(\"Cannot delete this post\")\n        }\n    }\n    \n    private fun initializeDefaultUsers() {\n        userPermissions[\"admin\"] = 7\n        userPermissions[\"editor\"] = 3\n        userPermissions[\"author\"] = 1\n    }\n    \n    private fun isValidSession(sessionToken: String?): Boolean {\n        return sessionToken != null && userSessions.containsKey(sessionToken)\n    }\n    \n    private fun getUserFromSession(sessionToken: String): String {\n        val sessionData = userSessions[sessionToken]\n        return sessionData?.get(0) ?: throw SecurityException(\"Invalid session\")\n    }\n    \n    private fun hasPermission(username: String, permission: String): Boolean {\n        val userLevel = userPermissions[username] ?: return false\n        \n        return when (permission) {\n            \"CREATE_POST\" -> (userLevel and 1) != 0\n            \"EDIT_ANY_POST\" -> (userLevel and 2) != 0\n            \"DELETE_ANY_POST\" -> (userLevel and 4) != 0\n            else -> false\n        }\n    }\n    \n    fun loginUser(username: String, password: String): String {\n        val hashedPassword = PasswordUtil.hashPassword(password)\n        if (validateCredentials(username, hashedPassword)) {\n            val sessionToken = generateSessionToken(username)\n            userSessions[sessionToken] = listOf(username, LocalDateTime.now().toString())\n            return sessionToken\n        }\n        throw SecurityException(\"Invalid credentials\")\n    }\n    \n    private fun validateCredentials(username: String, hashedPassword: String): Boolean {\n        return userPermissions.containsKey(username)\n    }\n    \n    private fun generateSessionToken(username: String): String {\n        return PasswordUtil.hashPassword(username + System.currentTimeMillis())\n    }\n}\n\nclass SearchIndexService {\n    fun updateIndex(post: BlogPost) {\n        try {\n            FileWriter(\"search_index.txt\", true).use { writer ->\n                writer.write(\"${post.id}|${post.title}|${post.content}\\n\")\n            }\n        } catch (e: IOException) {\n            throw RuntimeException(\"Failed to update search index\", e)\n        }\n    }\n    \n    fun removeFromIndex(postId: Int) {\n        try {\n            val indexFile = File(\"search_index.txt\")\n            if (!indexFile.exists()) return\n            \n            val lines = mutableListOf<String>()\n            BufferedReader(FileReader(indexFile)).use { reader ->\n                var line: String?\n                while (reader.readLine().also { line = it } != null) {\n                    if (!line!!.startsWith(\"$postId|\")) {\n                        lines.add(line!!)\n                    }\n                }\n            }\n            \n            FileWriter(indexFile).use { writer ->\n                lines.forEach { writer.write(\"$it\\n\") }\n            }\n        } catch (e: IOException) {\n            throw RuntimeException(\"Failed to update search index\", e)\n        }\n    }\n    \n    fun search(posts: Collection<BlogPost>, query: String): List<BlogPost> {\n        val results = mutableListOf<BlogPost>()\n        val lowerQuery = query.lowercase()\n        \n        posts.forEach { post ->\n            if (post.title.lowercase().contains(lowerQuery) ||\n                post.content.lowercase().contains(lowerQuery) ||\n                post.tags.any { tag -> tag.contains(lowerQuery) }) {\n                results.add(post)\n            }\n        }\n        \n        return results\n    }\n}\n\nclass SitemapGenerator {\n    fun regenerate(posts: Collection<BlogPost>) {\n        try {\n            FileWriter(\"sitemap.xml\").use { writer ->\n                writer.write(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\")\n                writer.write(\"<urlset xmlns=\\\"http://www.sitemaps.org/schemas/sitemap/0.9\\\">\\n\")\n                \n                posts.forEach { post ->\n                    writer.write(\"  <url>\\n\")\n                    writer.write(\"    <loc>https://blog.com/post/${post.id}</loc>\\n\")\n                    writer.write(\"    <lastmod>${post.lastModified}</lastmod>\\n\")\n                    writer.write(\"  </url>\\n\")\n                }\n                \n                writer.write(\"</urlset>\\n\")\n            }\n        } catch (e: IOException) {\n            throw RuntimeException(\"Failed to generate sitemap\", e)\n        }\n    }\n}\n\nclass NotificationService {\n    fun notifySubscribers(post: BlogPost) {\n        println(\"Sending notifications for new post: ${post.title}\")\n        try {\n            Thread.sleep(100)\n        } catch (e: InterruptedException) {\n            Thread.currentThread().interrupt()\n        }\n    }\n}\n\nclass ActivityLogger {\n    init {\n        setupLogging()\n    }\n    \n    private fun setupLogging() {\n        try {\n            val logDir = File(\"logs\")\n            if (!logDir.exists()) {\n                logDir.mkdirs()\n            }\n        } catch (e: Exception) {\n            System.err.println(\"Failed to setup logging: ${e.message}\")\n        }\n    }\n    \n    fun logActivity(username: String, action: String, postId: Int) {\n        try {\n            val logFile = \"logs/activity_${LocalDateTime.now().toLocalDate()}.log\"\n            FileWriter(logFile, true).use { writer ->\n                val logEntry = \"${LocalDateTime.now()} - User: $username, Action: $action, Post: $postId\\n\"\n                writer.write(logEntry)\n            }\n        } catch (e: IOException) {\n            throw RuntimeException(\"Failed to log activity\", e)\n        }\n    }\n}\n\nobject PasswordUtil {\n    fun hashPassword(password: String): String {\n        return try {\n            val md = MessageDigest.getInstance(\"SHA-256\")\n            val hash = md.digest(password.toByteArray())\n            hash.joinToString(\"\") { \"%02x\".format(it) }\n        } catch (e: Exception) {\n            throw RuntimeException(\"Password hashing failed\", e)\n        }\n    }\n}\n\ndata class BlogPost(\n    val id: Int,\n    var title: String,\n    var content: String,\n    val author: String,\n    val createdAt: LocalDateTime,\n    var lastModified: LocalDateTime = createdAt,\n    val tags: List<String> = emptyList()\n)",
      "level": "HARD",
      "language": "KOTLIN",
      "violation": "SRP",
       "description": "Blog post management system"
    },
    {
      "input": "import java.util.*\nimport java.io.*\nimport java.time.LocalDateTime\nimport java.util.concurrent.ConcurrentHashMap\nimport java.security.MessageDigest\nimport javax.mail.*\nimport javax.mail.internet.*\n\ndata class Product(\n    val id: String,\n    var name: String,\n    var quantity: Int,\n    var price: Double,\n    val supplierId: String,\n    val minThreshold: Int,\n    var lastUpdated: LocalDateTime\n)\n\ndata class User(\n    val username: String,\n    val passwordHash: String,\n    val permissions: List<String>\n)\n\ndata class Supplier(\n    val id: String,\n    val name: String,\n    val email: String,\n    val phone: String\n)\n\ndata class StockAlert(\n    val productId: String,\n    val productName: String,\n    val currentStock: Int,\n    val minThreshold: Int\n)\n\nclass InventoryManager {\n    private val products: MutableMap<String, Product> = ConcurrentHashMap()\n    private val suppliers: MutableMap<String, Supplier> = ConcurrentHashMap()\n    private val users: MutableMap<String, User> = ConcurrentHashMap()\n    private val alerts: MutableList<StockAlert> = ArrayList()\n    private val emailConfig: Properties = Properties()\n    \n    init {\n        initializeUsers()\n        setupEmailConfiguration()\n        loadDataFromFiles()\n    }\n    \n    fun addProduct(\n        username: String,\n        password: String,\n        productId: String,\n        name: String,\n        quantity: Int,\n        price: Double,\n        supplierId: String,\n        minThreshold: Int\n    ) {\n        if (!authenticateUser(username, password)) {\n            throw SecurityException(\"Authentication failed\")\n        }\n        \n        if (!hasPermission(username, \"ADD_PRODUCT\")) {\n            throw SecurityException(\"Insufficient permissions\")\n        }\n        \n        if (!validateProductData(productId, name, quantity, price, supplierId, minThreshold)) {\n            throw IllegalArgumentException(\"Invalid product data\")\n        }\n        \n        if (products.containsKey(productId)) {\n            throw IllegalArgumentException(\"Product already exists\")\n        }\n        \n        val supplier = suppliers[supplierId]\n            ?: throw IllegalArgumentException(\"Supplier not found\")\n        \n        val product = Product(\n            id = productId,\n            name = sanitizeName(name),\n            quantity = quantity,\n            price = price,\n            supplierId = supplierId,\n            minThreshold = minThreshold,\n            lastUpdated = LocalDateTime.now()\n        )\n        products[productId] = product\n        \n        if (quantity <= minThreshold) {\n            createLowStockAlert(product)\n        }\n        \n        updateInventoryFile()\n        logActivity(username, \"PRODUCT_ADDED\", productId)\n        sendSupplierNotification(supplier, \"New product added: $name\")\n        \n        println(\"Product added: $productId\")\n    }\n    \n    fun updateStock(\n        username: String,\n        password: String,\n        productId: String,\n        newQuantity: Int,\n        reason: String\n    ) {\n        if (!authenticateUser(username, password)) {\n            throw SecurityException(\"Authentication failed\")\n        }\n        \n        if (!hasPermission(username, \"UPDATE_STOCK\")) {\n            throw SecurityException(\"Insufficient permissions\")\n        }\n        \n        val product = products[productId]\n            ?: throw IllegalArgumentException(\"Product not found\")\n        \n        if (newQuantity < 0) {\n            throw IllegalArgumentException(\"Quantity cannot be negative\")\n        }\n        \n        val oldQuantity = product.quantity\n        product.quantity = newQuantity\n        product.lastUpdated = LocalDateTime.now()\n        \n        if (newQuantity <= product.minThreshold && oldQuantity > product.minThreshold) {\n            createLowStockAlert(product)\n        }\n        \n        if (newQuantity > product.minThreshold) {\n            removeLowStockAlert(productId)\n        }\n        \n        updateInventoryFile()\n        logActivity(username, \"STOCK_UPDATED\", \"$productId from $oldQuantity to $newQuantity\")\n        \n        if (kotlin.math.abs(newQuantity - oldQuantity) > 100) {\n            sendManagerAlert(\"Large stock change for ${product.name}: $oldQuantity -> $newQuantity. Reason: $reason\")\n        }\n        \n        println(\"Stock updated for $productId: $newQuantity\")\n    }\n    \n    fun generateReport(username: String, password: String, reportType: String) {\n        if (!authenticateUser(username, password)) {\n            throw SecurityException(\"Authentication failed\")\n        }\n        \n        if (!hasPermission(username, \"GENERATE_REPORTS\")) {\n            throw SecurityException(\"Insufficient permissions\")\n        }\n        \n        try {\n            val filename = \"${reportType}_report_${LocalDateTime.now().toString().replace(\":\", \"-\")}.txt\"\n            FileWriter(filename).use { writer ->\n                when (reportType) {\n                    \"inventory\" -> generateInventoryReport(writer)\n                    \"alerts\" -> generateAlertsReport(writer)\n                    \"suppliers\" -> generateSuppliersReport(writer)\n                    else -> throw IllegalArgumentException(\"Unknown report type: $reportType\")\n                }\n            }\n            \n            logActivity(username, \"REPORT_GENERATED\", reportType)\n            println(\"Report generated: $filename\")\n            \n        } catch (e: IOException) {\n            throw RuntimeException(\"Failed to generate report\", e)\n        }\n    }\n    \n    private fun initializeUsers() {\n        users[\"admin\"] = User(\n            \"admin\",\n            hashPassword(\"admin123\"),\n            listOf(\"ADD_PRODUCT\", \"UPDATE_STOCK\", \"GENERATE_REPORTS\", \"MANAGE_SUPPLIERS\")\n        )\n        users[\"manager\"] = User(\n            \"manager\",\n            hashPassword(\"mgr123\"),\n            listOf(\"UPDATE_STOCK\", \"GENERATE_REPORTS\")\n        )\n        users[\"clerk\"] = User(\n            \"clerk\",\n            hashPassword(\"clerk123\"),\n            listOf(\"UPDATE_STOCK\")\n        )\n        \n        suppliers[\"SUP001\"] = Supplier(\"SUP001\", \"TechCorp\", \"tech@corp.com\", \"123-456-7890\")\n        suppliers[\"SUP002\"] = Supplier(\"SUP002\", \"OfficeSupply\", \"orders@office.com\", \"987-654-3210\")\n    }\n    \n    private fun setupEmailConfiguration() {\n        emailConfig.apply {\n            put(\"mail.smtp.host\", \"smtp.company.com\")\n            put(\"mail.smtp.port\", \"587\")\n            put(\"mail.smtp.auth\", \"true\")\n            put(\"mail.smtp.starttls.enable\", \"true\")\n        }\n    }\n    \n    private fun authenticateUser(username: String, password: String): Boolean {\n        val user = users[username]\n        return user != null && user.passwordHash == hashPassword(password)\n    }\n    \n    private fun hasPermission(username: String, permission: String): Boolean {\n        val user = users[username]\n        return user != null && user.permissions.contains(permission)\n    }\n    \n    private fun hashPassword(password: String): String {\n        return try {\n            val md = MessageDigest.getInstance(\"SHA-256\")\n            val hash = md.digest(password.toByteArray())\n            Base64.getEncoder().encodeToString(hash)\n        } catch (e: Exception) {\n            throw RuntimeException(\"Password hashing failed\", e)\n        }\n    }\n    \n    private fun validateProductData(\n        productId: String,\n        name: String,\n        quantity: Int,\n        price: Double,\n        supplierId: String,\n        minThreshold: Int\n    ): Boolean {\n        return productId.isNotBlank() &&\n                name.isNotBlank() &&\n                quantity >= 0 && price >= 0 && minThreshold >= 0 &&\n                supplierId.isNotBlank()\n    }\n    \n    private fun sanitizeName(name: String): String {\n        return name.replace(Regex(\"[<>\\\"'&]\"), \"\").trim()\n    }\n    \n    private fun createLowStockAlert(product: Product) {\n        val alert = StockAlert(\n            productId = product.id,\n            productName = product.name,\n            currentStock = product.quantity,\n            minThreshold = product.minThreshold\n        )\n        alerts.add(alert)\n        \n        val message = \"LOW STOCK ALERT: ${product.name} (${product.id}) \" +\n                \"has only ${product.quantity} units remaining. \" +\n                \"Minimum threshold: ${product.minThreshold}\"\n        \n        sendManagerAlert(message)\n        \n        suppliers[product.supplierId]?.let { supplier ->\n            sendSupplierNotification(supplier, \"Reorder needed for: ${product.name}\")\n        }\n    }\n    \n    private fun removeLowStockAlert(productId: String) {\n        alerts.removeIf { it.productId == productId }\n    }\n    \n    private fun sendManagerAlert(message: String) {\n        try {\n            val session = Session.getInstance(emailConfig)\n            val email = MimeMessage(session).apply {\n                setFrom(InternetAddress(\"inventory@company.com\"))\n                setRecipients(Message.RecipientType.TO, InternetAddress.parse(\"manager@company.com\"))\n                subject = \"Inventory Alert\"\n                setText(\"$message\\n\\nTime: ${LocalDateTime.now()}\")\n            }\n            \n            println(\"Manager alert sent: $message\")\n            // Transport.send(email) // Commented out for demo\n            \n        } catch (e: MessagingException) {\n            System.err.println(\"Failed to send manager alert: ${e.message}\")\n        }\n    }\n    \n    private fun sendSupplierNotification(supplier: Supplier, message: String) {\n        try {\n            val session = Session.getInstance(emailConfig)\n            val email = MimeMessage(session).apply {\n                setFrom(InternetAddress(\"inventory@company.com\"))\n                setRecipients(Message.RecipientType.TO, InternetAddress.parse(supplier.email))\n                subject = \"Supplier Notification\"\n                setText(\"$message\\n\\nBest regards,\\nInventory Team\")\n            }\n            \n            println(\"Supplier notification sent to ${supplier.name}: $message\")\n            // Transport.send(email) // Commented out for demo\n            \n        } catch (e: MessagingException) {\n            System.err.println(\"Failed to send supplier notification: ${e.message}\")\n        }\n    }\n    \n    private fun generateInventoryReport(writer: FileWriter) {\n        writer.write(\"INVENTORY REPORT\\n\")\n        writer.write(\"Generated: ${LocalDateTime.now()}\\n\\n\")\n        \n        products.values.forEach { product ->\n            writer.write(\"Product: ${product.name} (${product.id})\\n\")\n            writer.write(\"Quantity: ${product.quantity}\\n\")\n            writer.write(\"Price: $${product.price}\\n\")\n            writer.write(\"Supplier: ${suppliers[product.supplierId]?.name}\\n\\n\")\n        }\n    }\n    \n    private fun generateAlertsReport(writer: FileWriter) {\n        writer.write(\"STOCK ALERTS REPORT\\n\")\n        writer.write(\"Generated: ${LocalDateTime.now()}\\n\\n\")\n        \n        alerts.forEach { alert ->\n            writer.write(\"Alert: ${alert.productName} (${alert.productId})\\n\")\n            writer.write(\"Current Stock: ${alert.currentStock}\\n\")\n            writer.write(\"Minimum Threshold: ${alert.minThreshold}\\n\\n\")\n        }\n    }\n    \n    private fun generateSuppliersReport(writer: FileWriter) {\n        writer.write(\"SUPPLIERS REPORT\\n\")\n        writer.write(\"Generated: ${LocalDateTime.now()}\\n\\n\")\n        \n        suppliers.values.forEach { supplier ->\n            writer.write(\"Supplier: ${supplier.name} (${supplier.id})\\n\")\n            writer.write(\"Email: ${supplier.email}\\n\")\n            writer.write(\"Phone: ${supplier.phone}\\n\\n\")\n        }\n    }\n    \n    private fun updateInventoryFile() {\n        try {\n            FileWriter(\"inventory.dat\").use { writer ->\n                products.values.forEach { product ->\n                    writer.write(\"${product.id}|${product.name}|${product.quantity}|${product.price}|${product.supplierId}|${product.minThreshold}\\n\")\n                }\n            }\n        } catch (e: IOException) {\n            System.err.println(\"Failed to update inventory file: ${e.message}\")\n        }\n    }\n    \n    private fun loadDataFromFiles() {\n        try {\n            val file = File(\"inventory.dat\")\n            if (file.exists()) {\n                file.bufferedReader().use { reader ->\n                    reader.lineSequence().forEach { line ->\n                        val parts = line.split(\"|\")\n                        if (parts.size == 6) {\n                            val product = Product(\n                                id = parts[0],\n                                name = parts[1],\n                                quantity = parts[2].toInt(),\n                                price = parts[3].toDouble(),\n                                supplierId = parts[4],\n                                minThreshold = parts[5].toInt(),\n                                lastUpdated = LocalDateTime.now()\n                            )\n                            products[product.id] = product\n                        }\n                    }\n                }\n            }\n        } catch (e: Exception) {\n            System.err.println(\"Failed to load inventory data: ${e.message}\")\n        }\n    }\n    \n    private fun logActivity(username: String, action: String, details: String) {\n        try {\n            FileWriter(\"inventory_log.txt\", true).use { writer ->\n                writer.write(\"${LocalDateTime.now()} - User: $username, Action: $action, Details: $details\\n\")\n            }\n        } catch (e: IOException) {\n            System.err.println(\"Failed to log activity: ${e.message}\")\n        }\n    }\n}",
      "output": "import java.util.*\nimport java.io.*\nimport java.time.LocalDateTime\nimport java.util.concurrent.ConcurrentHashMap\nimport java.security.MessageDigest\nimport javax.mail.*\nimport javax.mail.internet.*\nimport kotlin.math.abs\n\ndata class Product(\n    val id: String,\n    var name: String,\n    var quantity: Int,\n    var price: Double,\n    val supplierId: String,\n    val minThreshold: Int,\n    var lastUpdated: LocalDateTime\n)\n\ndata class User(\n    val username: String,\n    val passwordHash: String,\n    val permissions: List<String>\n)\n\ndata class Supplier(\n    val id: String,\n    val name: String,\n    val email: String,\n    val phone: String\n)\n\ndata class StockAlert(\n    val productId: String,\n    val productName: String,\n    val currentStock: Int,\n    val minThreshold: Int\n)\n\nclass InventoryService(\n    private val authService: AuthenticationService,\n    private val productValidator: ProductValidator,\n    private val alertManager: StockAlertManager,\n    private val notificationService: NotificationService,\n    private val reportGenerator: ReportGenerator,\n    private val inventoryPersistence: InventoryPersistence,\n    private val activityLogger: ActivityLogger\n) {\n    private val products: MutableMap<String, Product> = ConcurrentHashMap()\n    \n    init {\n        loadExistingData()\n    }\n    \n    fun addProduct(\n        username: String,\n        password: String,\n        productId: String,\n        name: String,\n        quantity: Int,\n        price: Double,\n        supplierId: String,\n        minThreshold: Int\n    ) {\n        authService.authenticate(username, password)\n        authService.checkPermission(username, \"ADD_PRODUCT\")\n        \n        productValidator.validateProductData(productId, name, quantity, price, supplierId, minThreshold)\n        \n        if (products.containsKey(productId)) {\n            throw IllegalArgumentException(\"Product already exists\")\n        }\n        \n        val product = Product(\n            id = productId,\n            name = productValidator.sanitizeName(name),\n            quantity = quantity,\n            price = price,\n            supplierId = supplierId,\n            minThreshold = minThreshold,\n            lastUpdated = LocalDateTime.now()\n        )\n        products[productId] = product\n        \n        alertManager.checkAndCreateAlert(product)\n        inventoryPersistence.saveInventory(products.values)\n        activityLogger.logActivity(username, \"PRODUCT_ADDED\", productId)\n        notificationService.notifySupplierOfNewProduct(supplierId, name)\n        \n        println(\"Product added: $productId\")\n    }\n    \n    fun updateStock(\n        username: String,\n        password: String,\n        productId: String,\n        newQuantity: Int,\n        reason: String\n    ) {\n        authService.authenticate(username, password)\n        authService.checkPermission(username, \"UPDATE_STOCK\")\n        \n        val product = getProductById(productId)\n        productValidator.validateQuantity(newQuantity)\n        \n        val oldQuantity = product.quantity\n        product.quantity = newQuantity\n        product.lastUpdated = LocalDateTime.now()\n        \n        alertManager.handleStockChange(product, oldQuantity)\n        inventoryPersistence.saveInventory(products.values)\n        activityLogger.logActivity(username, \"STOCK_UPDATED\", \"$productId from $oldQuantity to $newQuantity\")\n        \n        if (abs(newQuantity - oldQuantity) > 100) {\n            notificationService.sendLargeStockChangeAlert(product, oldQuantity, newQuantity, reason)\n        }\n        \n        println(\"Stock updated for $productId: $newQuantity\")\n    }\n    \n    fun generateReport(username: String, password: String, reportType: String) {\n        authService.authenticate(username, password)\n        authService.checkPermission(username, \"GENERATE_REPORTS\")\n        \n        val filename = reportGenerator.generateReport(reportType, products.values, alertManager.getAlerts())\n        activityLogger.logActivity(username, \"REPORT_GENERATED\", reportType)\n        \n        println(\"Report generated: $filename\")\n    }\n    \n    private fun getProductById(productId: String): Product {\n        return products[productId] ?: throw IllegalArgumentException(\"Product not found\")\n    }\n    \n    private fun loadExistingData() {\n        val loadedProducts = inventoryPersistence.loadInventory()\n        loadedProducts.forEach { product ->\n            products[product.id] = product\n            alertManager.checkAndCreateAlert(product)\n        }\n    }\n}\n\nclass AuthenticationService {\n    private val users: MutableMap<String, User> = ConcurrentHashMap()\n    private val suppliers: MutableMap<String, Supplier> = ConcurrentHashMap()\n    \n    init {\n        initializeUsers()\n    }\n    \n    fun authenticate(username: String, password: String) {\n        if (!authenticateUser(username, password)) {\n            throw SecurityException(\"Authentication failed\")\n        }\n    }\n    \n    fun checkPermission(username: String, permission: String) {\n        if (!hasPermission(username, permission)) {\n            throw SecurityException(\"Insufficient permissions\")\n        }\n    }\n    \n    fun getSupplier(supplierId: String): Supplier? {\n        return suppliers[supplierId]\n    }\n    \n    private fun initializeUsers() {\n        users[\"admin\"] = User(\n            \"admin\",\n            PasswordUtil.hashPassword(\"admin123\"),\n            listOf(\"ADD_PRODUCT\", \"UPDATE_STOCK\", \"GENERATE_REPORTS\", \"MANAGE_SUPPLIERS\")\n        )\n        users[\"manager\"] = User(\n            \"manager\",\n            PasswordUtil.hashPassword(\"mgr123\"),\n            listOf(\"UPDATE_STOCK\", \"GENERATE_REPORTS\")\n        )\n        users[\"clerk\"] = User(\n            \"clerk\",\n            PasswordUtil.hashPassword(\"clerk123\"),\n            listOf(\"UPDATE_STOCK\")\n        )\n        \n        suppliers[\"SUP001\"] = Supplier(\"SUP001\", \"TechCorp\", \"tech@corp.com\", \"123-456-7890\")\n        suppliers[\"SUP002\"] = Supplier(\"SUP002\", \"OfficeSupply\", \"orders@office.com\", \"987-654-3210\")\n    }\n    \n    private fun authenticateUser(username: String, password: String): Boolean {\n        val user = users[username]\n        return user != null && user.passwordHash == PasswordUtil.hashPassword(password)\n    }\n    \n    private fun hasPermission(username: String, permission: String): Boolean {\n        val user = users[username]\n        return user != null && user.permissions.contains(permission)\n    }\n}\n\nclass ProductValidator {\n    fun validateProductData(\n        productId: String,\n        name: String,\n        quantity: Int,\n        price: Double,\n        supplierId: String,\n        minThreshold: Int\n    ) {\n        require(productId.isNotBlank()) { \"Product ID cannot be empty\" }\n        require(name.isNotBlank()) { \"Product name cannot be empty\" }\n        require(quantity >= 0 && price >= 0 && minThreshold >= 0) { \"Quantity, price, and threshold must be non-negative\" }\n        require(supplierId.isNotBlank()) { \"Supplier ID cannot be empty\" }\n    }\n    \n    fun validateQuantity(quantity: Int) {\n        require(quantity >= 0) { \"Quantity cannot be negative\" }\n    }\n    \n    fun sanitizeName(name: String): String {\n        return name.replace(Regex(\"[<>\\\"'&]\"), \"\").trim()\n    }\n}\n\nclass StockAlertManager(private val notificationService: NotificationService) {\n    private val alerts: MutableList<StockAlert> = ArrayList()\n    \n    fun checkAndCreateAlert(product: Product) {\n        if (product.quantity <= product.minThreshold) {\n            createLowStockAlert(product)\n        }\n    }\n    \n    fun handleStockChange(product: Product, oldQuantity: Int) {\n        if (product.quantity <= product.minThreshold && oldQuantity > product.minThreshold) {\n            createLowStockAlert(product)\n        }\n        \n        if (product.quantity > product.minThreshold) {\n            removeLowStockAlert(product.id)\n        }\n    }\n    \n    fun getAlerts(): List<StockAlert> {\n        return alerts.toList()\n    }\n    \n    private fun createLowStockAlert(product: Product) {\n        val alert = StockAlert(\n            productId = product.id,\n            productName = product.name,\n            currentStock = product.quantity,\n            minThreshold = product.minThreshold\n        )\n        alerts.add(alert)\n        notificationService.sendLowStockAlert(product)\n    }\n    \n    private fun removeLowStockAlert(productId: String) {\n        alerts.removeIf { it.productId == productId }\n    }\n}\n\nclass NotificationService(private val authService: AuthenticationService) {\n    private val emailConfig: Properties = Properties().apply {\n        put(\"mail.smtp.host\", \"smtp.company.com\")\n        put(\"mail.smtp.port\", \"587\")\n        put(\"mail.smtp.auth\", \"true\")\n        put(\"mail.smtp.starttls.enable\", \"true\")\n    }\n    \n    fun sendLowStockAlert(product: Product) {\n        val message = \"LOW STOCK ALERT: ${product.name} (${product.id}) \" +\n                \"has only ${product.quantity} units remaining. \" +\n                \"Minimum threshold: ${product.minThreshold}\"\n        \n        sendManagerAlert(message)\n        notifySupplierOfReorder(product.supplierId, product.name)\n    }\n    \n    fun sendLargeStockChangeAlert(product: Product, oldQuantity: Int, newQuantity: Int, reason: String) {\n        val message = \"Large stock change for ${product.name}: $oldQuantity -> $newQuantity. Reason: $reason\"\n        sendManagerAlert(message)\n    }\n    \n    fun notifySupplierOfNewProduct(supplierId: String, productName: String) {\n        authService.getSupplier(supplierId)?.let { supplier ->\n            sendSupplierNotification(supplier, \"New product added: $productName\")\n        }\n    }\n    \n    private fun notifySupplierOfReorder(supplierId: String, productName: String) {\n        authService.getSupplier(supplierId)?.let { supplier ->\n            sendSupplierNotification(supplier, \"Reorder needed for: $productName\")\n        }\n    }\n    \n    private fun sendManagerAlert(message: String) {\n        try {\n            val session = Session.getInstance(emailConfig)\n            val email = MimeMessage(session).apply {\n                setFrom(InternetAddress(\"inventory@company.com\"))\n                setRecipients(Message.RecipientType.TO, InternetAddress.parse(\"manager@company.com\"))\n                subject = \"Inventory Alert\"\n                setText(\"$message\\n\\nTime: ${LocalDateTime.now()}\")\n            }\n            \n            println(\"Manager alert sent: $message\")\n            \n        } catch (e: MessagingException) {\n            System.err.println(\"Failed to send manager alert: ${e.message}\")\n        }\n    }\n    \n    private fun sendSupplierNotification(supplier: Supplier, message: String) {\n        try {\n            val session = Session.getInstance(emailConfig)\n            val email = MimeMessage(session).apply {\n                setFrom(InternetAddress(\"inventory@company.com\"))\n                setRecipients(Message.RecipientType.TO, InternetAddress.parse(supplier.email))\n                subject = \"Supplier Notification\"\n                setText(\"$message\\n\\nBest regards,\\nInventory Team\")\n            }\n            \n            println(\"Supplier notification sent to ${supplier.name}: $message\")\n            \n        } catch (e: MessagingException) {\n            System.err.println(\"Failed to send supplier notification: ${e.message}\")\n        }\n    }\n}\n\nclass ReportGenerator {\n    fun generateReport(reportType: String, products: Collection<Product>, alerts: List<StockAlert>): String {\n        return try {\n            val filename = \"${reportType}_report_${LocalDateTime.now().toString().replace(\":\", \"-\")}.txt\"\n            \n            FileWriter(filename).use { writer ->\n                when (reportType) {\n                    \"inventory\" -> generateInventoryReport(writer, products)\n                    \"alerts\" -> generateAlertsReport(writer, alerts)\n                    \"suppliers\" -> generateSuppliersReport(writer)\n                    else -> throw IllegalArgumentException(\"Unknown report type: $reportType\")\n                }\n            }\n            \n            filename\n            \n        } catch (e: IOException) {\n            throw RuntimeException(\"Failed to generate report\", e)\n        }\n    }\n    \n    private fun generateInventoryReport(writer: FileWriter, products: Collection<Product>) {\n        writer.write(\"INVENTORY REPORT\\n\")\n        writer.write(\"Generated: ${LocalDateTime.now()}\\n\\n\")\n        \n        products.forEach { product ->\n            writer.write(\"Product: ${product.name} (${product.id})\\n\")\n            writer.write(\"Quantity: ${product.quantity}\\n\")\n            writer.write(\"Price: $${product.price}\\n\\n\")\n        }\n    }\n    \n    private fun generateAlertsReport(writer: FileWriter, alerts: List<StockAlert>) {\n        writer.write(\"STOCK ALERTS REPORT\\n\")\n        writer.write(\"Generated: ${LocalDateTime.now()}\\n\\n\")\n        \n        alerts.forEach { alert ->\n            writer.write(\"Alert: ${alert.productName} (${alert.productId})\\n\")\n            writer.write(\"Current Stock: ${alert.currentStock}\\n\")\n            writer.write(\"Minimum Threshold: ${alert.minThreshold}\\n\\n\")\n        }\n    }\n    \n    private fun generateSuppliersReport(writer: FileWriter) {\n        writer.write(\"SUPPLIERS REPORT\\n\")\n        writer.write(\"Generated: ${LocalDateTime.now()}\\n\\n\")\n        writer.write(\"Report generation completed.\\n\")\n    }\n}\n\nclass InventoryPersistence {\n    fun saveInventory(products: Collection<Product>) {\n        try {\n            FileWriter(\"inventory.dat\").use { writer ->\n                products.forEach { product ->\n                    writer.write(\"${product.id}|${product.name}|${product.quantity}|${product.price}|${product.supplierId}|${product.minThreshold}\\n\")\n                }\n            }\n        } catch (e: IOException) {\n            throw RuntimeException(\"Failed to save inventory\", e)\n        }\n    }\n    \n    fun loadInventory(): List<Product> {\n        val products = mutableListOf<Product>()\n        try {\n            val file = File(\"inventory.dat\")\n            if (file.exists()) {\n                file.bufferedReader().use { reader ->\n                    reader.lineSequence().forEach { line ->\n                        val parts = line.split(\"|\")\n                        if (parts.size == 6) {\n                            val product = Product(\n                                id = parts[0],\n                                name = parts[1],\n                                quantity = parts[2].toInt(),\n                                price = parts[3].toDouble(),\n                                supplierId = parts[4],\n                                minThreshold = parts[5].toInt(),\n                                lastUpdated = LocalDateTime.now()\n                            )\n                            products.add(product)\n                        }\n                    }\n                }\n            }\n        } catch (e: Exception) {\n            System.err.println(\"Failed to load inventory data: ${e.message}\")\n        }\n        return products\n    }\n}\n\nclass ActivityLogger {\n    fun logActivity(username: String, action: String, details: String) {\n        try {\n            FileWriter(\"inventory_log.txt\", true).use { writer ->\n                writer.write(\"${LocalDateTime.now()} - User: $username, Action: $action, Details: $details\\n\")\n            }\n        } catch (e: IOException) {\n            throw RuntimeException(\"Failed to log activity\", e)\n        }\n    }\n}\n\nobject PasswordUtil {\n    fun hashPassword(password: String): String {\n        return try {\n            val md = MessageDigest.getInstance(\"SHA-256\")\n            val hash = md.digest(password.toByteArray())\n            Base64.getEncoder().encodeToString(hash)\n        } catch (e: Exception) {\n            throw RuntimeException(\"Password hashing failed\", e)\n        }\n    }\n}",
      "level": "HARD",
      "language": "KOTLIN",
      "violation": "SRP",
       "description": "Inventory stock management system"
    },
    {
      "input": "import java.io.FileWriter\nimport java.io.IOException\nimport java.security.SecureRandom\nimport java.time.LocalDateTime\nimport java.time.format.DateTimeFormatter\nimport java.util.concurrent.ConcurrentHashMap\n\ndata class User(\n    val email: String,\n    val name: String,\n    val passwordHash: String,\n    val permissions: List<String>\n)\n\ndata class Event(\n    val eventId: String,\n    val eventName: String,\n    val description: String,\n    val venue: String,\n    val startTime: LocalDateTime,\n    val endTime: LocalDateTime,\n    val ticketPrice: Double,\n    val maxCapacity: Int,\n    val organizerEmail: String\n)\n\nclass EventManagementSystem {\n    private val events = ConcurrentHashMap<String, Event>()\n    private val registeredUsers = ConcurrentHashMap<String, User>()\n    private val eventRegistrations = ConcurrentHashMap<String, MutableList<String>>()\n    private val eventRevenue = ConcurrentHashMap<String, Double>()\n    private val random = SecureRandom()\n    private var eventIdCounter = 1000\n    \n    init {\n        initializeTestData()\n    }\n    \n    fun createEvent(\n        organizerEmail: String,\n        password: String,\n        eventName: String,\n        description: String,\n        venue: String,\n        startTime: LocalDateTime,\n        endTime: LocalDateTime,\n        ticketPrice: Double,\n        maxCapacity: Int\n    ) {\n        if (!authenticateUser(organizerEmail, password)) {\n            throw SecurityException(\"Invalid credentials\")\n        }\n        \n        val organizer = registeredUsers[organizerEmail]\n            ?: throw SecurityException(\"User not found\")\n        \n        if (!hasPermission(organizer, \"CREATE_EVENT\")) {\n            throw SecurityException(\"User does not have permission to create events\")\n        }\n        \n        if (!validateEventData(eventName, description, venue, startTime, endTime, ticketPrice, maxCapacity)) {\n            throw IllegalArgumentException(\"Invalid event data provided\")\n        }\n        \n        val eventId = generateEventId()\n        val event = Event(\n            eventId,\n            sanitizeInput(eventName),\n            sanitizeInput(description),\n            sanitizeInput(venue),\n            startTime,\n            endTime,\n            ticketPrice,\n            maxCapacity,\n            organizerEmail\n        )\n        \n        events[eventId] = event\n        eventRegistrations[eventId] = mutableListOf()\n        eventRevenue[eventId] = 0.0\n        \n        sendEventCreationNotification(organizer, event)\n        logActivity(organizerEmail, \"EVENT_CREATED\", \"$eventId - $eventName\")\n        updateEventWebsite(event)\n        \n        println(\"Event created: $eventId - $eventName\")\n    }\n    \n    fun registerForEvent(\n        userEmail: String,\n        password: String,\n        eventId: String,\n        numberOfTickets: Int\n    ) {\n        if (!authenticateUser(userEmail, password)) {\n            throw SecurityException(\"Invalid credentials\")\n        }\n        \n        val event = events[eventId] ?: throw IllegalArgumentException(\"Event not found\")\n        \n        if (event.startTime.isBefore(LocalDateTime.now())) {\n            throw IllegalArgumentException(\"Cannot register for past events\")\n        }\n        \n        val registrations = eventRegistrations[eventId]!!\n        if (registrations.size + numberOfTickets > event.maxCapacity) {\n            throw IllegalArgumentException(\"Not enough capacity available\")\n        }\n        \n        if (numberOfTickets <= 0 || numberOfTickets > 10) {\n            throw IllegalArgumentException(\"Invalid number of tickets (1-10 allowed)\")\n        }\n        \n        val totalCost = event.ticketPrice * numberOfTickets\n        if (!processPayment(userEmail, totalCost)) {\n            throw RuntimeException(\"Payment processing failed\")\n        }\n        \n        repeat(numberOfTickets) {\n            registrations.add(userEmail)\n        }\n        \n        eventRevenue[eventId] = eventRevenue[eventId]!! + totalCost\n        \n        generateTickets(userEmail, event, numberOfTickets)\n        sendRegistrationConfirmation(userEmail, event, numberOfTickets, totalCost)\n        logActivity(userEmail, \"REGISTERED_FOR_EVENT\", \"$eventId - $numberOfTickets tickets\")\n        \n        if (registrations.size >= event.maxCapacity) {\n            sendEventFullNotification(event)\n        }\n        \n        println(\"User $userEmail registered for event $eventId\")\n    }\n    \n    fun generateEventReport(\n        organizerEmail: String,\n        password: String,\n        eventId: String\n    ) {\n        if (!authenticateUser(organizerEmail, password)) {\n            throw SecurityException(\"Invalid credentials\")\n        }\n        \n        val event = events[eventId] ?: throw IllegalArgumentException(\"Event not found\")\n        \n        if (event.organizerEmail != organizerEmail) {\n            val user = registeredUsers[organizerEmail]\n            if (!hasPermission(user, \"VIEW_ALL_REPORTS\")) {\n                throw SecurityException(\"No permission to view this event's report\")\n            }\n        }\n        \n        try {\n            val filename = \"event_report_${eventId}_${LocalDateTime.now().format(DateTimeFormatter.ofPattern(\"yyyyMMdd_HHmmss\"))}.txt\"\n            \n            FileWriter(filename).use { writer ->\n                writer.write(\"EVENT REPORT\\n\")\n                writer.write(\"Event: ${event.eventName}\\n\")\n                writer.write(\"Event ID: $eventId\\n\")\n                writer.write(\"Organizer: ${event.organizerEmail}\\n\")\n                writer.write(\"Venue: ${event.venue}\\n\")\n                writer.write(\"Start Time: ${event.startTime}\\n\")\n                writer.write(\"Ticket Price: $${event.ticketPrice}\\n\")\n                writer.write(\"Max Capacity: ${event.maxCapacity}\\n\\n\")\n                \n                val registrations = eventRegistrations[eventId]!!\n                writer.write(\"Registrations: ${registrations.size}\\n\")\n                writer.write(\"Revenue: $${eventRevenue[eventId]}\\n\")\n                writer.write(\"Occupancy Rate: ${String.format(\"%.1f\", registrations.size * 100.0 / event.maxCapacity)}%\\n\\n\")\n                \n                val userTicketCounts = mutableMapOf<String, Int>()\n                for (email in registrations) {\n                    userTicketCounts[email] = userTicketCounts.getOrDefault(email, 0) + 1\n                }\n                \n                writer.write(\"Registered Users:\\n\")\n                for ((email, count) in userTicketCounts) {\n                    writer.write(\"- $email: $count ticket(s)\\n\")\n                }\n            }\n            \n            logActivity(organizerEmail, \"REPORT_GENERATED\", eventId)\n            sendReportNotification(organizerEmail, filename)\n            \n            println(\"Report generated: $filename\")\n            \n        } catch (e: IOException) {\n            throw RuntimeException(\"Failed to generate report: ${e.message}\")\n        }\n    }\n    \n    private fun initializeTestData() {\n        registeredUsers[\"organizer@company.com\"] = User(\n            \"organizer@company.com\",\n            \"John Organizer\",\n            hashPassword(\"org123\"),\n            listOf(\"CREATE_EVENT\", \"VIEW_ALL_REPORTS\")\n        )\n        registeredUsers[\"admin@company.com\"] = User(\n            \"admin@company.com\",\n            \"Admin User\",\n            hashPassword(\"admin123\"),\n            listOf(\"CREATE_EVENT\", \"VIEW_ALL_REPORTS\")\n        )\n        registeredUsers[\"user@company.com\"] = User(\n            \"user@company.com\",\n            \"Regular User\",\n            hashPassword(\"user123\"),\n            emptyList()\n        )\n    }\n    \n    private fun authenticateUser(email: String, password: String): Boolean {\n        val user = registeredUsers[email]\n        return user != null && user.passwordHash == hashPassword(password)\n    }\n    \n    private fun hasPermission(user: User?, permission: String): Boolean {\n        return user != null && user.permissions.contains(permission)\n    }\n    \n    private fun hashPassword(password: String): String {\n        return \"hashed_$password\"\n    }\n    \n    private fun validateEventData(\n        eventName: String,\n        description: String,\n        venue: String,\n        startTime: LocalDateTime,\n        endTime: LocalDateTime,\n        ticketPrice: Double,\n        maxCapacity: Int\n    ): Boolean {\n        return eventName.isNotBlank() &&\n                description.isNotBlank() &&\n                venue.isNotBlank() &&\n                startTime.isBefore(endTime) &&\n                startTime.isAfter(LocalDateTime.now()) &&\n                ticketPrice >= 0 &&\n                maxCapacity > 0\n    }\n    \n    private fun sanitizeInput(input: String): String {\n        return input.replace(Regex(\"[<>\\\"'&]\"), \"\").trim()\n    }\n    \n    @Synchronized\n    private fun generateEventId(): String {\n        return \"EVT${eventIdCounter++}\"\n    }\n    \n    private fun processPayment(userEmail: String, amount: Double): Boolean {\n        println(\"Processing payment of $$amount for user $userEmail\")\n        return random.nextDouble() > 0.1\n    }\n    \n    private fun generateTickets(userEmail: String, event: Event, numberOfTickets: Int) {\n        try {\n            val filename = \"tickets_${userEmail.replace(\"@\", \"_\")}_${event.eventId}.txt\"\n            FileWriter(filename).use { writer ->\n                repeat(numberOfTickets) { i ->\n                    writer.write(\"TICKET #${random.nextInt(100000)}\\n\")\n                    writer.write(\"Event: ${event.eventName}\\n\")\n                    writer.write(\"Venue: ${event.venue}\\n\")\n                    writer.write(\"Date: ${event.startTime.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\"))}\\n\")\n                    writer.write(\"Holder: $userEmail\\n\")\n                    writer.write(\"================\\n\\n\")\n                }\n            }\n            \n            println(\"Tickets generated: $filename\")\n            \n        } catch (e: IOException) {\n            System.err.println(\"Failed to generate tickets: ${e.message}\")\n        }\n    }\n    \n    private fun sendEventCreationNotification(organizer: User, event: Event) {\n        println(\"Email sent to ${organizer.email}: Your event '${event.eventName}' has been created successfully.\")\n    }\n    \n    private fun sendRegistrationConfirmation(\n        userEmail: String,\n        event: Event,\n        numberOfTickets: Int,\n        totalCost: Double\n    ) {\n        println(\"Email sent to $userEmail: Registration confirmed for '${event.eventName}'. Tickets: $numberOfTickets, Total: $$totalCost\")\n    }\n    \n    private fun sendEventFullNotification(event: Event) {\n        println(\"Email sent to ${event.organizerEmail}: Event '${event.eventName}' is now fully booked.\")\n    }\n    \n    private fun sendReportNotification(organizerEmail: String, filename: String) {\n        println(\"Email sent to $organizerEmail: Event report generated: $filename\")\n    }\n    \n    private fun logActivity(userEmail: String, action: String, details: String) {\n        try {\n            FileWriter(\"event_system.log\", true).use { writer ->\n                writer.write(\"${LocalDateTime.now().format(DateTimeFormatter.ISO_LOCAL_DATE_TIME)} - User: $userEmail, Action: $action, Details: $details\\n\")\n            }\n        } catch (e: IOException) {\n            System.err.println(\"Failed to log activity: ${e.message}\")\n        }\n    }\n    \n    private fun updateEventWebsite(event: Event) {\n        println(\"Updating website with event information for: ${event.eventName}\")\n    }\n}",
      "output": "import java.io.FileWriter\nimport java.io.IOException\nimport java.security.SecureRandom\nimport java.time.LocalDateTime\nimport java.time.format.DateTimeFormatter\nimport java.util.concurrent.ConcurrentHashMap\n\ndata class User(\n    val email: String,\n    val name: String,\n    val passwordHash: String,\n    val permissions: List<String>\n)\n\ndata class Event(\n    val eventId: String,\n    val eventName: String,\n    val description: String,\n    val venue: String,\n    val startTime: LocalDateTime,\n    val endTime: LocalDateTime,\n    val ticketPrice: Double,\n    val maxCapacity: Int,\n    val organizerEmail: String\n)\n\nclass EventService(\n    private val authService: AuthenticationService,\n    private val eventValidator: EventValidator,\n    private val paymentProcessor: PaymentProcessor,\n    private val ticketGenerator: TicketGenerator,\n    private val notificationService: NotificationService,\n    private val reportService: ReportService,\n    private val activityLogger: ActivityLogger,\n    private val websiteUpdater: WebsiteUpdater,\n    private val idGenerator: EventIdGenerator\n) {\n    private val events = ConcurrentHashMap<String, Event>()\n    private val eventRegistrations = ConcurrentHashMap<String, MutableList<String>>()\n    private val eventRevenue = ConcurrentHashMap<String, Double>()\n    \n    fun createEvent(\n        organizerEmail: String,\n        password: String,\n        eventName: String,\n        description: String,\n        venue: String,\n        startTime: LocalDateTime,\n        endTime: LocalDateTime,\n        ticketPrice: Double,\n        maxCapacity: Int\n    ) {\n        authService.authenticate(organizerEmail, password)\n        authService.checkPermission(organizerEmail, \"CREATE_EVENT\")\n        \n        eventValidator.validateEventData(eventName, description, venue, startTime, endTime, ticketPrice, maxCapacity)\n        \n        val eventId = idGenerator.generate()\n        val event = Event(\n            eventId,\n            eventValidator.sanitizeInput(eventName),\n            eventValidator.sanitizeInput(description),\n            eventValidator.sanitizeInput(venue),\n            startTime,\n            endTime,\n            ticketPrice,\n            maxCapacity,\n            organizerEmail\n        )\n        \n        events[eventId] = event\n        eventRegistrations[eventId] = mutableListOf()\n        eventRevenue[eventId] = 0.0\n        \n        notificationService.sendEventCreationNotification(organizerEmail, event)\n        activityLogger.logActivity(organizerEmail, \"EVENT_CREATED\", \"$eventId - $eventName\")\n        websiteUpdater.updateEventWebsite(event)\n        \n        println(\"Event created: $eventId - $eventName\")\n    }\n    \n    fun registerForEvent(\n        userEmail: String,\n        password: String,\n        eventId: String,\n        numberOfTickets: Int\n    ) {\n        authService.authenticate(userEmail, password)\n        \n        val event = getEventById(eventId)\n        validateRegistration(event, numberOfTickets)\n        \n        val registrations = eventRegistrations[eventId]!!\n        if (registrations.size + numberOfTickets > event.maxCapacity) {\n            throw IllegalArgumentException(\"Not enough capacity available\")\n        }\n        \n        val totalCost = event.ticketPrice * numberOfTickets\n        paymentProcessor.processPayment(userEmail, totalCost)\n        \n        repeat(numberOfTickets) {\n            registrations.add(userEmail)\n        }\n        \n        eventRevenue[eventId] = eventRevenue[eventId]!! + totalCost\n        \n        ticketGenerator.generateTickets(userEmail, event, numberOfTickets)\n        notificationService.sendRegistrationConfirmation(userEmail, event, numberOfTickets, totalCost)\n        activityLogger.logActivity(userEmail, \"REGISTERED_FOR_EVENT\", \"$eventId - $numberOfTickets tickets\")\n        \n        if (registrations.size >= event.maxCapacity) {\n            notificationService.sendEventFullNotification(event)\n        }\n        \n        println(\"User $userEmail registered for event $eventId\")\n    }\n    \n    fun generateEventReport(\n        organizerEmail: String,\n        password: String,\n        eventId: String\n    ) {\n        authService.authenticate(organizerEmail, password)\n        \n        val event = getEventById(eventId)\n        authService.checkReportPermission(organizerEmail, event)\n        \n        val filename = reportService.generateEventReport(event, eventRegistrations[eventId]!!, eventRevenue[eventId]!!)\n        \n        activityLogger.logActivity(organizerEmail, \"REPORT_GENERATED\", eventId)\n        notificationService.sendReportNotification(organizerEmail, filename)\n        \n        println(\"Report generated: $filename\")\n    }\n    \n    private fun getEventById(eventId: String): Event {\n        return events[eventId] ?: throw IllegalArgumentException(\"Event not found\")\n    }\n    \n    private fun validateRegistration(event: Event, numberOfTickets: Int) {\n        if (event.startTime.isBefore(LocalDateTime.now())) {\n            throw IllegalArgumentException(\"Cannot register for past events\")\n        }\n        \n        if (numberOfTickets <= 0 || numberOfTickets > 10) {\n            throw IllegalArgumentException(\"Invalid number of tickets (1-10 allowed)\")\n        }\n    }\n}\n\nclass AuthenticationService {\n    private val registeredUsers = ConcurrentHashMap<String, User>()\n    \n    init {\n        initializeTestData()\n    }\n    \n    fun authenticate(email: String, password: String) {\n        if (!authenticateUser(email, password)) {\n            throw SecurityException(\"Invalid credentials\")\n        }\n    }\n    \n    fun checkPermission(email: String, permission: String) {\n        val user = registeredUsers[email]\n        if (!hasPermission(user, permission)) {\n            throw SecurityException(\"User does not have permission to ${permission.lowercase()}\")\n        }\n    }\n    \n    fun checkReportPermission(organizerEmail: String, event: Event) {\n        if (event.organizerEmail != organizerEmail) {\n            val user = registeredUsers[organizerEmail]\n            if (!hasPermission(user, \"VIEW_ALL_REPORTS\")) {\n                throw SecurityException(\"No permission to view this event's report\")\n            }\n        }\n    }\n    \n    private fun initializeTestData() {\n        registeredUsers[\"organizer@company.com\"] = User(\n            \"organizer@company.com\",\n            \"John Organizer\",\n            hashPassword(\"org123\"),\n            listOf(\"CREATE_EVENT\", \"VIEW_ALL_REPORTS\")\n        )\n        registeredUsers[\"admin@company.com\"] = User(\n            \"admin@company.com\",\n            \"Admin User\",\n            hashPassword(\"admin123\"),\n            listOf(\"CREATE_EVENT\", \"VIEW_ALL_REPORTS\")\n        )\n        registeredUsers[\"user@company.com\"] = User(\n            \"user@company.com\",\n            \"Regular User\",\n            hashPassword(\"user123\"),\n            emptyList()\n        )\n    }\n    \n    private fun authenticateUser(email: String, password: String): Boolean {\n        val user = registeredUsers[email]\n        return user != null && user.passwordHash == hashPassword(password)\n    }\n    \n    private fun hasPermission(user: User?, permission: String): Boolean {\n        return user != null && user.permissions.contains(permission)\n    }\n    \n    private fun hashPassword(password: String): String {\n        return \"hashed_$password\"\n    }\n}\n\nclass EventValidator {\n    fun validateEventData(\n        eventName: String,\n        description: String,\n        venue: String,\n        startTime: LocalDateTime,\n        endTime: LocalDateTime,\n        ticketPrice: Double,\n        maxCapacity: Int\n    ) {\n        if (eventName.isBlank()) {\n            throw IllegalArgumentException(\"Invalid event name\")\n        }\n        if (description.isBlank() || venue.isBlank()) {\n            throw IllegalArgumentException(\"Invalid event details\")\n        }\n        if (startTime.isAfter(endTime) || startTime.isBefore(LocalDateTime.now())) {\n            throw IllegalArgumentException(\"Invalid event times\")\n        }\n        if (ticketPrice < 0 || maxCapacity <= 0) {\n            throw IllegalArgumentException(\"Invalid ticket price or capacity\")\n        }\n    }\n    \n    fun sanitizeInput(input: String): String {\n        return input.replace(Regex(\"[<>\\\"'&]\"), \"\").trim()\n    }\n}\n\nclass PaymentProcessor {\n    private val random = SecureRandom()\n    \n    fun processPayment(userEmail: String, amount: Double) {\n        println(\"Processing payment of $$amount for user $userEmail\")\n        if (random.nextDouble() <= 0.1) {\n            throw RuntimeException(\"Payment processing failed\")\n        }\n    }\n}\n\nclass TicketGenerator {\n    private val random = SecureRandom()\n    \n    fun generateTickets(userEmail: String, event: Event, numberOfTickets: Int) {\n        try {\n            val filename = \"tickets_${userEmail.replace(\"@\", \"_\")}_${event.eventId}.txt\"\n            FileWriter(filename).use { writer ->\n                repeat(numberOfTickets) {\n                    writer.write(\"TICKET #${random.nextInt(100000)}\\n\")\n                    writer.write(\"Event: ${event.eventName}\\n\")\n                    writer.write(\"Venue: ${event.venue}\\n\")\n                    writer.write(\"Date: ${event.startTime.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\"))}\\n\")\n                    writer.write(\"Holder: $userEmail\\n\")\n                    writer.write(\"================\\n\\n\")\n                }\n            }\n            \n            println(\"Tickets generated: $filename\")\n            \n        } catch (e: IOException) {\n            throw RuntimeException(\"Failed to generate tickets: ${e.message}\")\n        }\n    }\n}\n\nclass NotificationService {\n    fun sendEventCreationNotification(organizerEmail: String, event: Event) {\n        println(\"Email sent to $organizerEmail: Your event '${event.eventName}' has been created successfully.\")\n    }\n    \n    fun sendRegistrationConfirmation(\n        userEmail: String,\n        event: Event,\n        numberOfTickets: Int,\n        totalCost: Double\n    ) {\n        println(\"Email sent to $userEmail: Registration confirmed for '${event.eventName}'. Tickets: $numberOfTickets, Total: $$totalCost\")\n    }\n    \n    fun sendEventFullNotification(event: Event) {\n        println(\"Email sent to ${event.organizerEmail}: Event '${event.eventName}' is now fully booked.\")\n    }\n    \n    fun sendReportNotification(organizerEmail: String, filename: String) {\n        println(\"Email sent to $organizerEmail: Event report generated: $filename\")\n    }\n}\n\nclass ReportService {\n    fun generateEventReport(event: Event, registrations: List<String>, revenue: Double): String {\n        return try {\n            val filename = \"event_report_${event.eventId}_${LocalDateTime.now().format(DateTimeFormatter.ofPattern(\"yyyyMMdd_HHmmss\"))}.txt\"\n            \n            FileWriter(filename).use { writer ->\n                writer.write(\"EVENT REPORT\\n\")\n                writer.write(\"Event: ${event.eventName}\\n\")\n                writer.write(\"Event ID: ${event.eventId}\\n\")\n                writer.write(\"Organizer: ${event.organizerEmail}\\n\")\n                writer.write(\"Venue: ${event.venue}\\n\")\n                writer.write(\"Start Time: ${event.startTime}\\n\")\n                writer.write(\"Ticket Price: $${event.ticketPrice}\\n\")\n                writer.write(\"Max Capacity: ${event.maxCapacity}\\n\\n\")\n                \n                writer.write(\"Registrations: ${registrations.size}\\n\")\n                writer.write(\"Revenue: $$revenue\\n\")\n                writer.write(\"Occupancy Rate: ${String.format(\"%.1f\", registrations.size * 100.0 / event.maxCapacity)}%\\n\\n\")\n                \n                val userTicketCounts = mutableMapOf<String, Int>()\n                for (email in registrations) {\n                    userTicketCounts[email] = userTicketCounts.getOrDefault(email, 0) + 1\n                }\n                \n                writer.write(\"Registered Users:\\n\")\n                for ((email, count) in userTicketCounts) {\n                    writer.write(\"- $email: $count ticket(s)\\n\")\n                }\n            }\n            \n            filename\n            \n        } catch (e: IOException) {\n            throw RuntimeException(\"Failed to generate report: ${e.message}\")\n        }\n    }\n}\n\nclass ActivityLogger {\n    fun logActivity(userEmail: String, action: String, details: String) {\n        try {\n            FileWriter(\"event_system.log\", true).use { writer ->\n                writer.write(\"${LocalDateTime.now().format(DateTimeFormatter.ISO_LOCAL_DATE_TIME)} - User: $userEmail, Action: $action, Details: $details\\n\")\n            }\n        } catch (e: IOException) {\n            throw RuntimeException(\"Failed to log activity: ${e.message}\")\n        }\n    }\n}\n\nclass WebsiteUpdater {\n    fun updateEventWebsite(event: Event) {\n        println(\"Updating website with event information for: ${event.eventName}\")\n    }\n}\n\nclass EventIdGenerator {\n    private var eventIdCounter = 1000\n    \n    @Synchronized\n    fun generate(): String {\n        return \"EVT${eventIdCounter++}\"\n    }\n}",
      "level": "HARD",
      "language": "KOTLIN",
      "violation": "SRP",
       "description": "Event registration management system"
    },
    {
      "input": "public class User\n{\n    private string name;\n    private string email;\n    \n    public User(string name, string email)\n    {\n        this.name = name;\n        this.email = email;\n    }\n    \n    public void SaveToDatabase()\n    {\n        Console.WriteLine($\"Saving user {name} to database\");\n    }\n    \n    public void SendWelcomeEmail()\n    {\n        Console.WriteLine($\"Sending welcome email to {email}\");\n    }\n}",
      "output": "public class User\n{\n    private string name;\n    private string email;\n    \n    public User(string name, string email)\n    {\n        this.name = name;\n        this.email = email;\n    }\n    \n    public string GetName()\n    {\n        return name;\n    }\n    \n    public string GetEmail()\n    {\n        return email;\n    }\n}\n\npublic class UserRepository\n{\n    public void Save(User user)\n    {\n        Console.WriteLine($\"Saving user {user.GetName()} to database\");\n    }\n}\n\npublic class EmailService\n{\n    public void SendWelcomeEmail(User user)\n    {\n        Console.WriteLine($\"Sending welcome email to {user.GetEmail()}\");\n    }\n}",
      "level": "EASY",
      "language": "CSHARP",
      "violation": "SRP",
      "description": "User database email operations"
    },
    {
      "input": "public class Employee\n{\n    private string name;\n    private double baseSalary;\n    private int yearsOfService;\n    \n    public Employee(string name, double baseSalary, int yearsOfService)\n    {\n        this.name = name;\n        this.baseSalary = baseSalary;\n        this.yearsOfService = yearsOfService;\n    }\n    \n    public double CalculateSalary()\n    {\n        return baseSalary + (yearsOfService * 1000);\n    }\n    \n    public void PrintPaySlip()\n    {\n        Console.WriteLine($\"Pay slip for {name}: ${CalculateSalary()}\");\n    }\n}",
      "output": "public class Employee\n{\n    private string name;\n    private double baseSalary;\n    private int yearsOfService;\n    \n    public Employee(string name, double baseSalary, int yearsOfService)\n    {\n        this.name = name;\n        this.baseSalary = baseSalary;\n        this.yearsOfService = yearsOfService;\n    }\n    \n    public string GetName()\n    {\n        return name;\n    }\n    \n    public double GetBaseSalary()\n    {\n        return baseSalary;\n    }\n    \n    public int GetYearsOfService()\n    {\n        return yearsOfService;\n    }\n}\n\npublic class SalaryCalculator\n{\n    public double Calculate(Employee employee)\n    {\n        return employee.GetBaseSalary() + (employee.GetYearsOfService() * 1000);\n    }\n}\n\npublic class PaySlipPrinter\n{\n    private SalaryCalculator calculator;\n    \n    public PaySlipPrinter(SalaryCalculator calculator)\n    {\n        this.calculator = calculator;\n    }\n    \n    public void Print(Employee employee)\n    {\n        Console.WriteLine($\"Pay slip for {employee.GetName()}: ${calculator.Calculate(employee)}\");\n    }\n}",
      "level": "EASY",
      "language": "CSHARP",
      "violation": "SRP",
      "description": "Employee salary payslip system"
    },
    {
      "input": "public class Book\n{\n    private string title;\n    private string author;\n    private string content;\n    \n    public Book(string title, string author, string content)\n    {\n        this.title = title;\n        this.author = author;\n        this.content = content;\n    }\n    \n    public void PrintBook()\n    {\n        Console.WriteLine($\"Title: {title}\");\n        Console.WriteLine($\"Author: {author}\");\n        Console.WriteLine($\"Content: {content}\");\n    }\n    \n    public void SaveToFile(string filename)\n    {\n        Console.WriteLine($\"Saving book to {filename}\");\n    }\n}",
      "output": "public class Book\n{\n    private string title;\n    private string author;\n    private string content;\n    \n    public Book(string title, string author, string content)\n    {\n        this.title = title;\n        this.author = author;\n        this.content = content;\n    }\n    \n    public string GetTitle()\n    {\n        return title;\n    }\n    \n    public string GetAuthor()\n    {\n        return author;\n    }\n    \n    public string GetContent()\n    {\n        return content;\n    }\n}\n\npublic class BookPrinter\n{\n    public void Print(Book book)\n    {\n        Console.WriteLine($\"Title: {book.GetTitle()}\");\n        Console.WriteLine($\"Author: {book.GetAuthor()}\");\n        Console.WriteLine($\"Content: {book.GetContent()}\");\n    }\n}\n\npublic class BookFileSaver\n{\n    public void SaveToFile(Book book, string filename)\n    {\n        Console.WriteLine($\"Saving book to {filename}\");\n    }\n}",
      "level": "EASY",
      "language": "CSHARP",
      "violation": "SRP",
      "description": "Book printing file saving"
    },
    {
      "input": "public class Product\n{\n    private string name;\n    private double price;\n    \n    public Product(string name, double price)\n    {\n        this.name = name;\n        this.price = price;\n    }\n    \n    public double ApplyDiscount(double percentage)\n    {\n        return price * (1 - percentage / 100);\n    }\n    \n    public void DisplayProduct()\n    {\n        Console.WriteLine($\"Product: {name}, Price: ${price}\");\n    }\n}",
      "output": "public class Product\n{\n    private string name;\n    private double price;\n    \n    public Product(string name, double price)\n    {\n        this.name = name;\n        this.price = price;\n    }\n    \n    public string GetName()\n    {\n        return name;\n    }\n    \n    public double GetPrice()\n    {\n        return price;\n    }\n}\n\npublic class DiscountCalculator\n{\n    public double ApplyDiscount(Product product, double percentage)\n    {\n        return product.GetPrice() * (1 - percentage / 100);\n    }\n}\n\npublic class ProductDisplay\n{\n    public void Display(Product product)\n    {\n        Console.WriteLine($\"Product: {product.GetName()}, Price: ${product.GetPrice()}\");\n    }\n}",
      "level": "EASY",
      "language": "CSHARP",
      "violation": "SRP",
       "description": "Product discount display system"
    },
    {
      "input": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\npublic class SalesData\n{\n    public string ProductName { get; set; }\n    public double Amount { get; set; }\n    public DateTime Date { get; set; }\n    \n    public SalesData(string productName, double amount, DateTime date)\n    {\n        ProductName = productName;\n        Amount = amount;\n        Date = date;\n    }\n}\n\npublic interface IDataSource\n{\n    List<SalesData> GetSalesDataForMonth(string month);\n}\n\npublic interface IEmailService\n{\n    void SendEmail(string to, string subject, string body);\n}\n\npublic class ReportGenerator\n{\n    private readonly IDataSource _dataSource;\n    private readonly IEmailService _emailService;\n    \n    public ReportGenerator(IDataSource dataSource, IEmailService emailService)\n    {\n        _dataSource = dataSource;\n        _emailService = emailService;\n    }\n    \n    public void GenerateAndSendMonthlyReport(string month, string recipientEmail)\n    {\n        var salesData = _dataSource.GetSalesDataForMonth(month);\n        \n        var report = new StringBuilder();\n        report.AppendLine($\"Monthly Sales Report - {month}\");\n        report.AppendLine(\"================================\\n\");\n        \n        double totalSales = 0;\n        var productSales = new Dictionary<string, double>();\n        \n        foreach (var data in salesData)\n        {\n            totalSales += data.Amount;\n            if (productSales.ContainsKey(data.ProductName))\n            {\n                productSales[data.ProductName] += data.Amount;\n            }\n            else\n            {\n                productSales[data.ProductName] = data.Amount;\n            }\n        }\n        \n        report.AppendLine($\"Total Sales: ${totalSales:F2}\\n\");\n        report.AppendLine(\"Sales by Product:\");\n        report.AppendLine(\"-----------------\");\n        \n        foreach (var entry in productSales)\n        {\n            report.AppendLine($\"{entry.Key}: ${entry.Value:F2}\");\n        }\n        \n        report.AppendLine(\"\\nTop Performing Products:\");\n        report.AppendLine(\"------------------------\");\n        \n        var topProducts = productSales\n            .OrderByDescending(x => x.Value)\n            .Take(5);\n            \n        foreach (var entry in topProducts)\n        {\n            report.AppendLine($\"{entry.Key}: ${entry.Value:F2}\");\n        }\n        \n        string reportContent = report.ToString();\n        \n        string subject = $\"Monthly Sales Report - {month}\";\n        string body = $\"Please find attached the monthly sales report.\\n\\n{reportContent}\";\n        \n        _emailService.SendEmail(recipientEmail, subject, body);\n        \n        Console.WriteLine($\"Report sent successfully to {recipientEmail}\");\n    }\n}",
      "output": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\npublic class SalesData\n{\n    public string ProductName { get; set; }\n    public double Amount { get; set; }\n    public DateTime Date { get; set; }\n    \n    public SalesData(string productName, double amount, DateTime date)\n    {\n        ProductName = productName;\n        Amount = amount;\n        Date = date;\n    }\n}\n\npublic interface IDataSource\n{\n    List<SalesData> GetSalesDataForMonth(string month);\n}\n\npublic interface IEmailService\n{\n    void SendEmail(string to, string subject, string body);\n}\n\npublic class ReportGenerator\n{\n    private readonly IDataSource _dataSource;\n    \n    public ReportGenerator(IDataSource dataSource)\n    {\n        _dataSource = dataSource;\n    }\n    \n    public string GenerateMonthlyReport(string month)\n    {\n        var salesData = _dataSource.GetSalesDataForMonth(month);\n        \n        var report = new StringBuilder();\n        report.AppendLine($\"Monthly Sales Report - {month}\");\n        report.AppendLine(\"================================\\n\");\n        \n        double totalSales = 0;\n        var productSales = new Dictionary<string, double>();\n        \n        foreach (var data in salesData)\n        {\n            totalSales += data.Amount;\n            if (productSales.ContainsKey(data.ProductName))\n            {\n                productSales[data.ProductName] += data.Amount;\n            }\n            else\n            {\n                productSales[data.ProductName] = data.Amount;\n            }\n        }\n        \n        report.AppendLine($\"Total Sales: ${totalSales:F2}\\n\");\n        report.AppendLine(\"Sales by Product:\");\n        report.AppendLine(\"-----------------\");\n        \n        foreach (var entry in productSales)\n        {\n            report.AppendLine($\"{entry.Key}: ${entry.Value:F2}\");\n        }\n        \n        report.AppendLine(\"\\nTop Performing Products:\");\n        report.AppendLine(\"------------------------\");\n        \n        var topProducts = productSales\n            .OrderByDescending(x => x.Value)\n            .Take(5);\n            \n        foreach (var entry in topProducts)\n        {\n            report.AppendLine($\"{entry.Key}: ${entry.Value:F2}\");\n        }\n        \n        return report.ToString();\n    }\n}\n\npublic class ReportDeliveryService\n{\n    private readonly IEmailService _emailService;\n    \n    public ReportDeliveryService(IEmailService emailService)\n    {\n        _emailService = emailService;\n    }\n    \n    public void SendReport(string reportContent, string month, string recipientEmail)\n    {\n        string subject = $\"Monthly Sales Report - {month}\";\n        string body = $\"Please find attached the monthly sales report.\\n\\n{reportContent}\";\n        \n        _emailService.SendEmail(recipientEmail, subject, body);\n        \n        Console.WriteLine($\"Report sent successfully to {recipientEmail}\");\n    }\n}",
      "level": "MODERATE",
      "language": "CSHARP",
      "violation": "SRP",
       "description": "Sales report generation delivery"
    },
    {
      "input": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Text.RegularExpressions;\n\npublic class User\n{\n    public string Username { get; set; }\n    public string PasswordHash { get; set; }\n    public string Email { get; set; }\n    public DateTime CreatedAt { get; set; }\n    public DateTime? LastLogin { get; set; }\n    \n    public User(string username, string passwordHash, string email, DateTime createdAt)\n    {\n        Username = username;\n        PasswordHash = passwordHash;\n        Email = email;\n        CreatedAt = createdAt;\n    }\n}\n\npublic class UserManager\n{\n    private readonly Dictionary<string, User> _users = new Dictionary<string, User>();\n    private readonly Dictionary<string, string> _sessions = new Dictionary<string, string>();\n    private readonly RNGCryptoServiceProvider _random = new RNGCryptoServiceProvider();\n    \n    public void CreateUser(string username, string password, string email)\n    {\n        if (_users.ContainsKey(username))\n        {\n            throw new ArgumentException(\"Username already exists\");\n        }\n        \n        if (!IsValidEmail(email))\n        {\n            throw new ArgumentException(\"Invalid email format\");\n        }\n        \n        if (password.Length < 8)\n        {\n            throw new ArgumentException(\"Password must be at least 8 characters\");\n        }\n        \n        string hashedPassword = HashPassword(password);\n        var user = new User(username, hashedPassword, email, DateTime.Now);\n        _users[username] = user;\n        \n        Console.WriteLine($\"User created successfully: {username}\");\n    }\n    \n    public string Login(string username, string password)\n    {\n        if (!_users.TryGetValue(username, out User user))\n        {\n            throw new ArgumentException(\"Invalid username or password\");\n        }\n        \n        if (!VerifyPassword(password, user.PasswordHash))\n        {\n            throw new ArgumentException(\"Invalid username or password\");\n        }\n        \n        string sessionToken = GenerateSessionToken();\n        _sessions[sessionToken] = username;\n        \n        user.LastLogin = DateTime.Now;\n        \n        Console.WriteLine($\"User logged in: {username}\");\n        return sessionToken;\n    }\n    \n    public void Logout(string sessionToken)\n    {\n        if (_sessions.TryGetValue(sessionToken, out string username))\n        {\n            _sessions.Remove(sessionToken);\n            Console.WriteLine($\"User logged out: {username}\");\n        }\n    }\n    \n    public bool IsLoggedIn(string sessionToken)\n    {\n        return _sessions.ContainsKey(sessionToken);\n    }\n    \n    public User GetUserBySession(string sessionToken)\n    {\n        if (_sessions.TryGetValue(sessionToken, out string username))\n        {\n            return _users.TryGetValue(username, out User user) ? user : null;\n        }\n        return null;\n    }\n    \n    private bool IsValidEmail(string email)\n    {\n        return Regex.IsMatch(email, @\"^[A-Za-z0-9+_.-]+@(.+)$\");\n    }\n    \n    private string HashPassword(string password)\n    {\n        return Convert.ToBase64String(Encoding.UTF8.GetBytes(password));\n    }\n    \n    private bool VerifyPassword(string password, string hash)\n    {\n        return HashPassword(password) == hash;\n    }\n    \n    private string GenerateSessionToken()\n    {\n        byte[] bytes = new byte[32];\n        _random.GetBytes(bytes);\n        return Convert.ToBase64String(bytes);\n    }\n    \n    public void UpdateUserEmail(string username, string newEmail)\n    {\n        if (!_users.TryGetValue(username, out User user))\n        {\n            throw new ArgumentException(\"User not found\");\n        }\n        \n        if (!IsValidEmail(newEmail))\n        {\n            throw new ArgumentException(\"Invalid email format\");\n        }\n        \n        user.Email = newEmail;\n        Console.WriteLine($\"Email updated for user: {username}\");\n    }\n    \n    public List<User> GetAllUsers()\n    {\n        return _users.Values.ToList();\n    }\n    \n    protected virtual void Dispose(bool disposing)\n    {\n        if (disposing)\n        {\n            _random?.Dispose();\n        }\n    }\n    \n    public void Dispose()\n    {\n        Dispose(true);\n        GC.SuppressFinalize(this);\n    }\n}",
      "output": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Text.RegularExpressions;\n\npublic class User\n{\n    public string Username { get; set; }\n    public string PasswordHash { get; set; }\n    public string Email { get; set; }\n    public DateTime CreatedAt { get; set; }\n    public DateTime? LastLogin { get; set; }\n    \n    public User(string username, string passwordHash, string email, DateTime createdAt)\n    {\n        Username = username;\n        PasswordHash = passwordHash;\n        Email = email;\n        CreatedAt = createdAt;\n    }\n}\n\npublic class UserManager\n{\n    private readonly Dictionary<string, User> _users = new Dictionary<string, User>();\n    private readonly UserValidator _validator = new UserValidator();\n    \n    public void CreateUser(string username, string password, string email)\n    {\n        if (_users.ContainsKey(username))\n        {\n            throw new ArgumentException(\"Username already exists\");\n        }\n        \n        _validator.ValidateUserData(username, password, email);\n        \n        string hashedPassword = PasswordUtil.HashPassword(password);\n        var user = new User(username, hashedPassword, email, DateTime.Now);\n        _users[username] = user;\n        \n        Console.WriteLine($\"User created successfully: {username}\");\n    }\n    \n    public void UpdateUserEmail(string username, string newEmail)\n    {\n        if (!_users.TryGetValue(username, out User user))\n        {\n            throw new ArgumentException(\"User not found\");\n        }\n        \n        _validator.ValidateEmail(newEmail);\n        \n        user.Email = newEmail;\n        Console.WriteLine($\"Email updated for user: {username}\");\n    }\n    \n    public User FindByUsername(string username)\n    {\n        return _users.TryGetValue(username, out User user) ? user : null;\n    }\n    \n    public List<User> GetAllUsers()\n    {\n        return _users.Values.ToList();\n    }\n}\n\npublic class AuthenticationService : IDisposable\n{\n    private readonly Dictionary<string, string> _sessions = new Dictionary<string, string>();\n    private readonly RNGCryptoServiceProvider _random = new RNGCryptoServiceProvider();\n    private readonly UserManager _userManager;\n    \n    public AuthenticationService(UserManager userManager)\n    {\n        _userManager = userManager;\n    }\n    \n    public string Login(string username, string password)\n    {\n        var user = _userManager.FindByUsername(username);\n        if (user == null)\n        {\n            throw new ArgumentException(\"Invalid username or password\");\n        }\n        \n        if (!PasswordUtil.VerifyPassword(password, user.PasswordHash))\n        {\n            throw new ArgumentException(\"Invalid username or password\");\n        }\n        \n        string sessionToken = GenerateSessionToken();\n        _sessions[sessionToken] = username;\n        \n        user.LastLogin = DateTime.Now;\n        \n        Console.WriteLine($\"User logged in: {username}\");\n        return sessionToken;\n    }\n    \n    public void Logout(string sessionToken)\n    {\n        if (_sessions.TryGetValue(sessionToken, out string username))\n        {\n            _sessions.Remove(sessionToken);\n            Console.WriteLine($\"User logged out: {username}\");\n        }\n    }\n    \n    public bool IsLoggedIn(string sessionToken)\n    {\n        return _sessions.ContainsKey(sessionToken);\n    }\n    \n    public User GetUserBySession(string sessionToken)\n    {\n        if (_sessions.TryGetValue(sessionToken, out string username))\n        {\n            return _userManager.FindByUsername(username);\n        }\n        return null;\n    }\n    \n    private string GenerateSessionToken()\n    {\n        byte[] bytes = new byte[32];\n        _random.GetBytes(bytes);\n        return Convert.ToBase64String(bytes);\n    }\n    \n    protected virtual void Dispose(bool disposing)\n    {\n        if (disposing)\n        {\n            _random?.Dispose();\n        }\n    }\n    \n    public void Dispose()\n    {\n        Dispose(true);\n        GC.SuppressFinalize(this);\n    }\n}\n\npublic class UserValidator\n{\n    public void ValidateUserData(string username, string password, string email)\n    {\n        ValidateUsername(username);\n        ValidatePassword(password);\n        ValidateEmail(email);\n    }\n    \n    public void ValidateUsername(string username)\n    {\n        if (string.IsNullOrWhiteSpace(username))\n        {\n            throw new ArgumentException(\"Username cannot be empty\");\n        }\n    }\n    \n    public void ValidatePassword(string password)\n    {\n        if (password.Length < 8)\n        {\n            throw new ArgumentException(\"Password must be at least 8 characters\");\n        }\n    }\n    \n    public void ValidateEmail(string email)\n    {\n        if (!Regex.IsMatch(email, @\"^[A-Za-z0-9+_.-]+@(.+)$\"))\n        {\n            throw new ArgumentException(\"Invalid email format\");\n        }\n    }\n}\n\npublic static class PasswordUtil\n{\n    public static string HashPassword(string password)\n    {\n        return Convert.ToBase64String(Encoding.UTF8.GetBytes(password));\n    }\n    \n    public static bool VerifyPassword(string password, string hash)\n    {\n        return HashPassword(password) == hash;\n    }\n}",
      "level": "MODERATE",
      "language": "CSHARP",
      "violation": "SRP",
       "description": "User authentication session management"
    },
    {
      "input": "using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\n\npublic class FileProcessor\n{\n    private readonly string _inputDirectory;\n    private readonly string _outputDirectory;\n    private readonly string _archiveDirectory;\n    \n    public FileProcessor(string inputDirectory, string outputDirectory, string archiveDirectory)\n    {\n        _inputDirectory = inputDirectory;\n        _outputDirectory = outputDirectory;\n        _archiveDirectory = archiveDirectory;\n    }\n    \n    public void ProcessAndArchiveFiles()\n    {\n        var inputDir = new DirectoryInfo(_inputDirectory);\n        var files = inputDir.GetFiles(\"*.csv\");\n        \n        if (files.Length == 0)\n        {\n            Console.WriteLine(\"No CSV files found to process\");\n            return;\n        }\n        \n        foreach (var file in files)\n        {\n            try\n            {\n                var lines = ReadFile(file);\n                var processedLines = new List<string>();\n                \n                processedLines.Add(\"PROCESSED_HEADER,ORIGINAL_DATA,TIMESTAMP\");\n                \n                for (int i = 1; i < lines.Count; i++)\n                {\n                    var line = lines[i];\n                    var parts = line.Split(',');\n                    \n                    var processedLine = new StringBuilder();\n                    processedLine.Append(\"PROCESSED\");\n                    \n                    foreach (var part in parts)\n                    {\n                        processedLine.Append(\",\").Append(part.Trim().ToUpper());\n                    }\n                    \n                    processedLine.Append(\",\").Append(DateTime.Now.ToString());\n                    processedLines.Add(processedLine.ToString());\n                }\n                \n                var outputFileName = $\"processed_{file.Name}\";\n                var outputFile = new FileInfo(Path.Combine(_outputDirectory, outputFileName));\n                WriteFile(outputFile, processedLines);\n                \n                Console.WriteLine($\"Processed file: {file.Name} -> {outputFileName}\");\n                \n                var archiveName = $\"archive_{DateTimeOffset.Now.ToUnixTimeMilliseconds()}_{file.Name}\";\n                var archiveFile = new FileInfo(Path.Combine(_archiveDirectory, archiveName));\n                \n                try\n                {\n                    file.MoveTo(archiveFile.FullName);\n                    Console.WriteLine($\"Archived original file: {file.Name} -> {archiveName}\");\n                }\n                catch (Exception)\n                {\n                    Console.Error.WriteLine($\"Failed to archive file: {file.Name}\");\n                }\n                \n            }\n            catch (IOException e)\n            {\n                Console.Error.WriteLine($\"Error processing file {file.Name}: {e.Message}\");\n            }\n        }\n    }\n    \n    private List<string> ReadFile(FileInfo file)\n    {\n        var lines = new List<string>();\n        using (var reader = new StreamReader(file.FullName))\n        {\n            string line;\n            while ((line = reader.ReadLine()) != null)\n            {\n                lines.Add(line);\n            }\n        }\n        return lines;\n    }\n    \n    private void WriteFile(FileInfo file, List<string> lines)\n    {\n        using (var writer = new StreamWriter(file.FullName))\n        {\n            foreach (var line in lines)\n            {\n                writer.WriteLine(line);\n            }\n        }\n    }\n    \n    public List<string> GetProcessingHistory()\n    {\n        var history = new List<string>();\n        var archiveDir = new DirectoryInfo(_archiveDirectory);\n        \n        if (archiveDir.Exists)\n        {\n            var archivedFiles = archiveDir.GetFiles();\n            \n            foreach (var file in archivedFiles)\n            {\n                history.Add($\"Archived: {file.Name} at {file.LastWriteTime}\");\n            }\n        }\n        \n        return history;\n    }\n}",
      "output": "using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\n\npublic class FileProcessor\n{\n    private readonly string _inputDirectory;\n    private readonly string _outputDirectory;\n    private readonly IFileReader _fileReader;\n    private readonly IFileWriter _fileWriter;\n    \n    public FileProcessor(string inputDirectory, string outputDirectory,\n                        IFileReader fileReader, IFileWriter fileWriter)\n    {\n        _inputDirectory = inputDirectory;\n        _outputDirectory = outputDirectory;\n        _fileReader = fileReader;\n        _fileWriter = fileWriter;\n    }\n    \n    public List<ProcessedFile> ProcessFiles()\n    {\n        var inputDir = new DirectoryInfo(_inputDirectory);\n        var files = inputDir.GetFiles(\"*.csv\");\n        var processedFiles = new List<ProcessedFile>();\n        \n        if (files.Length == 0)\n        {\n            Console.WriteLine(\"No CSV files found to process\");\n            return processedFiles;\n        }\n        \n        foreach (var file in files)\n        {\n            try\n            {\n                var lines = _fileReader.ReadFile(file);\n                var processedLines = ProcessContent(lines);\n                \n                var outputFileName = $\"processed_{file.Name}\";\n                var outputFile = new FileInfo(Path.Combine(_outputDirectory, outputFileName));\n                _fileWriter.WriteFile(outputFile, processedLines);\n                \n                Console.WriteLine($\"Processed file: {file.Name} -> {outputFileName}\");\n                processedFiles.Add(new ProcessedFile(file, outputFile));\n                \n            }\n            catch (IOException e)\n            {\n                Console.Error.WriteLine($\"Error processing file {file.Name}: {e.Message}\");\n            }\n        }\n        \n        return processedFiles;\n    }\n    \n    private List<string> ProcessContent(List<string> lines)\n    {\n        var processedLines = new List<string>();\n        processedLines.Add(\"PROCESSED_HEADER,ORIGINAL_DATA,TIMESTAMP\");\n        \n        for (int i = 1; i < lines.Count; i++)\n        {\n            var line = lines[i];\n            var parts = line.Split(',');\n            \n            var processedLine = new StringBuilder();\n            processedLine.Append(\"PROCESSED\");\n            \n            foreach (var part in parts)\n            {\n                processedLine.Append(\",\").Append(part.Trim().ToUpper());\n            }\n            \n            processedLine.Append(\",\").Append(DateTime.Now.ToString());\n            processedLines.Add(processedLine.ToString());\n        }\n        \n        return processedLines;\n    }\n}\n\npublic class FileArchiver\n{\n    private readonly string _archiveDirectory;\n    \n    public FileArchiver(string archiveDirectory)\n    {\n        _archiveDirectory = archiveDirectory;\n    }\n    \n    public void ArchiveFiles(List<ProcessedFile> processedFiles)\n    {\n        foreach (var pf in processedFiles)\n        {\n            var archiveName = $\"archive_{DateTimeOffset.Now.ToUnixTimeMilliseconds()}_{pf.OriginalFile.Name}\";\n            var archiveFile = new FileInfo(Path.Combine(_archiveDirectory, archiveName));\n            \n            try\n            {\n                pf.OriginalFile.MoveTo(archiveFile.FullName);\n                Console.WriteLine($\"Archived original file: {pf.OriginalFile.Name} -> {archiveName}\");\n            }\n            catch (Exception)\n            {\n                Console.Error.WriteLine($\"Failed to archive file: {pf.OriginalFile.Name}\");\n            }\n        }\n    }\n    \n    public List<string> GetArchiveHistory()\n    {\n        var history = new List<string>();\n        var archiveDir = new DirectoryInfo(_archiveDirectory);\n        \n        if (archiveDir.Exists)\n        {\n            var archivedFiles = archiveDir.GetFiles();\n            \n            foreach (var file in archivedFiles)\n            {\n                history.Add($\"Archived: {file.Name} at {file.LastWriteTime}\");\n            }\n        }\n        \n        return history;\n    }\n}\n\npublic interface IFileReader\n{\n    List<string> ReadFile(FileInfo file);\n}\n\npublic interface IFileWriter\n{\n    void WriteFile(FileInfo file, List<string> lines);\n}\n\npublic class FileReader : IFileReader\n{\n    public List<string> ReadFile(FileInfo file)\n    {\n        var lines = new List<string>();\n        using (var reader = new StreamReader(file.FullName))\n        {\n            string line;\n            while ((line = reader.ReadLine()) != null)\n            {\n                lines.Add(line);\n            }\n        }\n        return lines;\n    }\n}\n\npublic class FileWriter : IFileWriter\n{\n    public void WriteFile(FileInfo file, List<string> lines)\n    {\n        using (var writer = new StreamWriter(file.FullName))\n        {\n            foreach (var line in lines)\n            {\n                writer.WriteLine(line);\n            }\n        }\n    }\n}\n\npublic class ProcessedFile\n{\n    public FileInfo OriginalFile { get; }\n    public FileInfo OutputFile { get; }\n    \n    public ProcessedFile(FileInfo originalFile, FileInfo outputFile)\n    {\n        OriginalFile = originalFile;\n        OutputFile = outputFile;\n    }\n}",
      "level": "MODERATE",
      "language": "CSHARP",
      "violation": "SRP",
       "description": "File processing archiving system"
    },
    {
      "input": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\n\npublic class CustomerService\n{\n    private readonly Dictionary<string, Customer> _customers = new Dictionary<string, Customer>();\n    private readonly List<string> _blacklistedEmails = new List<string> { \"spam@test.com\", \"fake@test.com\" };\n    \n    public void RegisterCustomer(string name, string email, string phone)\n    {\n        if (_customers.ContainsKey(email))\n        {\n            throw new ArgumentException(\"Customer already exists\");\n        }\n        \n        if (_blacklistedEmails.Contains(email))\n        {\n            throw new ArgumentException(\"Email is blacklisted\");\n        }\n        \n        if (!Regex.IsMatch(email, @\"^[A-Za-z0-9+_.-]+@(.+)$\"))\n        {\n            throw new ArgumentException(\"Invalid email format\");\n        }\n        \n        var customer = new Customer(Guid.NewGuid().ToString(), name, email, phone);\n        _customers[email] = customer;\n        \n        SendWelcomeNotification(customer);\n        \n        Console.WriteLine($\"Customer registered: {name}\");\n    }\n    \n    public void UpdateCustomerInfo(string email, string newPhone)\n    {\n        if (!_customers.TryGetValue(email, out var customer))\n        {\n            throw new ArgumentException(\"Customer not found\");\n        }\n        \n        var oldPhone = customer.Phone;\n        customer.Phone = newPhone;\n        \n        SendUpdateNotification(customer, oldPhone, newPhone);\n        \n        Console.WriteLine($\"Customer info updated: {email}\");\n    }\n    \n    private void SendWelcomeNotification(Customer customer)\n    {\n        var subject = \"Welcome to Our Service!\";\n        var message = $@\"Dear {customer.Name},\n\nThank you for registering with us.\nYour customer ID is: {customer.Id}\n\nBest regards,\nThe Team\";\n        \n        Console.WriteLine($\"Sending email to: {customer.Email}\");\n        Console.WriteLine($\"Subject: {subject}\");\n        Console.WriteLine($\"Message: {message}\");\n        \n        var smsMessage = $\"Welcome {customer.Name}! Your ID: {customer.Id}\";\n        Console.WriteLine($\"Sending SMS to: {customer.Phone}\");\n        Console.WriteLine($\"SMS: {smsMessage}\");\n    }\n    \n    private void SendUpdateNotification(Customer customer, string oldPhone, string newPhone)\n    {\n        var subject = \"Your Information Has Been Updated\";\n        var message = $@\"Dear {customer.Name},\n\nYour phone number has been updated from {oldPhone} to {newPhone}.\n\nIf you didn't make this change, please contact us.\n\nBest regards,\nThe Team\";\n        \n        Console.WriteLine($\"Sending email to: {customer.Email}\");\n        Console.WriteLine($\"Subject: {subject}\");\n        Console.WriteLine($\"Message: {message}\");\n    }\n    \n    public Customer FindByEmail(string email)\n    {\n        _customers.TryGetValue(email, out var customer);\n        return customer;\n    }\n    \n    public List<Customer> GetAllCustomers()\n    {\n        return _customers.Values.ToList();\n    }\n}\n\npublic class Customer\n{\n    public string Id { get; }\n    public string Name { get; }\n    public string Email { get; }\n    public string Phone { get; set; }\n    \n    public Customer(string id, string name, string email, string phone)\n    {\n        Id = id;\n        Name = name;\n        Email = email;\n        Phone = phone;\n    }\n}",
      "output": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\n\npublic class CustomerService\n{\n    private readonly Dictionary<string, Customer> _customers = new Dictionary<string, Customer>();\n    private readonly ICustomerValidator _validator = new CustomerValidator();\n    private readonly INotificationService _notificationService;\n    \n    public CustomerService(INotificationService notificationService)\n    {\n        _notificationService = notificationService;\n    }\n    \n    public void RegisterCustomer(string name, string email, string phone)\n    {\n        if (_customers.ContainsKey(email))\n        {\n            throw new ArgumentException(\"Customer already exists\");\n        }\n        \n        _validator.ValidateEmail(email);\n        \n        var customer = new Customer(Guid.NewGuid().ToString(), name, email, phone);\n        _customers[email] = customer;\n        \n        _notificationService.SendWelcomeNotification(customer);\n        \n        Console.WriteLine($\"Customer registered: {name}\");\n    }\n    \n    public void UpdateCustomerInfo(string email, string newPhone)\n    {\n        if (!_customers.TryGetValue(email, out var customer))\n        {\n            throw new ArgumentException(\"Customer not found\");\n        }\n        \n        var oldPhone = customer.Phone;\n        customer.Phone = newPhone;\n        \n        _notificationService.SendUpdateNotification(customer, oldPhone, newPhone);\n        \n        Console.WriteLine($\"Customer info updated: {email}\");\n    }\n    \n    public Customer FindByEmail(string email)\n    {\n        _customers.TryGetValue(email, out var customer);\n        return customer;\n    }\n    \n    public List<Customer> GetAllCustomers()\n    {\n        return _customers.Values.ToList();\n    }\n}\n\npublic interface ICustomerValidator\n{\n    void ValidateEmail(string email);\n}\n\npublic class CustomerValidator : ICustomerValidator\n{\n    private readonly List<string> _blacklistedEmails = new List<string> { \"spam@test.com\", \"fake@test.com\" };\n    \n    public void ValidateEmail(string email)\n    {\n        if (_blacklistedEmails.Contains(email))\n        {\n            throw new ArgumentException(\"Email is blacklisted\");\n        }\n        \n        if (!Regex.IsMatch(email, @\"^[A-Za-z0-9+_.-]+@(.+)$\"))\n        {\n            throw new ArgumentException(\"Invalid email format\");\n        }\n    }\n}\n\npublic interface INotificationService\n{\n    void SendWelcomeNotification(Customer customer);\n    void SendUpdateNotification(Customer customer, string oldPhone, string newPhone);\n}\n\npublic class NotificationService : INotificationService\n{\n    private readonly IEmailSender _emailSender = new EmailSender();\n    private readonly ISmsSender _smsSender = new SmsSender();\n    \n    public void SendWelcomeNotification(Customer customer)\n    {\n        var subject = \"Welcome to Our Service!\";\n        var message = $@\"Dear {customer.Name},\n\nThank you for registering with us.\nYour customer ID is: {customer.Id}\n\nBest regards,\nThe Team\";\n        \n        _emailSender.Send(customer.Email, subject, message);\n        \n        var smsMessage = $\"Welcome {customer.Name}! Your ID: {customer.Id}\";\n        _smsSender.Send(customer.Phone, smsMessage);\n    }\n    \n    public void SendUpdateNotification(Customer customer, string oldPhone, string newPhone)\n    {\n        var subject = \"Your Information Has Been Updated\";\n        var message = $@\"Dear {customer.Name},\n\nYour phone number has been updated from {oldPhone} to {newPhone}.\n\nIf you didn't make this change, please contact us.\n\nBest regards,\nThe Team\";\n        \n        _emailSender.Send(customer.Email, subject, message);\n    }\n}\n\npublic interface IEmailSender\n{\n    void Send(string to, string subject, string message);\n}\n\npublic interface ISmsSender\n{\n    void Send(string phoneNumber, string message);\n}\n\npublic class EmailSender : IEmailSender\n{\n    public void Send(string to, string subject, string message)\n    {\n        Console.WriteLine($\"Sending email to: {to}\");\n        Console.WriteLine($\"Subject: {subject}\");\n        Console.WriteLine($\"Message: {message}\");\n    }\n}\n\npublic class SmsSender : ISmsSender\n{\n    public void Send(string phoneNumber, string message)\n    {\n        Console.WriteLine($\"Sending SMS to: {phoneNumber}\");\n        Console.WriteLine($\"SMS: {message}\");\n    }\n}\n\npublic class Customer\n{\n    public string Id { get; }\n    public string Name { get; }\n    public string Email { get; }\n    public string Phone { get; set; }\n    \n    public Customer(string id, string name, string email, string phone)\n    {\n        Id = id;\n        Name = name;\n        Email = email;\n        Phone = phone;\n    }\n}",
      "level": "MODERATE",
      "language": "CSHARP",
      "violation": "SRP",
      "description": "Customer registration notification system"
    },
    {
      "input": "using System;\nusing System.Collections.Generic;\nusing System.Data.SqlClient;\nusing System.IO;\nusing System.Linq;\nusing System.Net.Mail;\nusing System.Net;\nusing System.Configuration;\n\npublic class Order\n{\n    public int Id { get; set; }\n    public Customer Customer { get; set; }\n    public List<OrderItem> Items { get; set; }\n    public decimal TotalAmount { get; set; }\n    public string Status { get; set; }\n}\n\npublic class Customer\n{\n    public int Id { get; set; }\n    public string Name { get; set; }\n    public string Email { get; set; }\n}\n\npublic class OrderItem\n{\n    public int ProductId { get; set; }\n    public int Quantity { get; set; }\n}\n\npublic class OrderManager\n{\n    private List<Order> orders;\n    private SqlConnection dbConnection;\n    private SmtpClient smtpClient;\n    \n    public OrderManager()\n    {\n        this.orders = new List<Order>();\n        InitializeDatabase();\n        SetupEmailConfiguration();\n    }\n    \n    // Order management responsibility\n    public void AddOrder(Order order)\n    {\n        if (ValidateOrder(order))\n        {\n            orders.Add(order);\n            SaveOrderToDatabase(order);\n            SendOrderConfirmationEmail(order);\n            GenerateInvoice(order);\n            UpdateInventory(order);\n            LogOrderActivity(order, \"ORDER_CREATED\");\n        }\n    }\n    \n    public void UpdateOrderStatus(int orderId, string status)\n    {\n        var order = FindOrderById(orderId);\n        if (order != null)\n        {\n            order.Status = status;\n            UpdateOrderInDatabase(order);\n            SendStatusUpdateEmail(order);\n            LogOrderActivity(order, \"STATUS_UPDATED\");\n        }\n    }\n    \n    public Order FindOrderById(int orderId)\n    {\n        return orders.FirstOrDefault(order => order.Id == orderId);\n    }\n    \n    // Validation responsibility\n    private bool ValidateOrder(Order order)\n    {\n        if (order == null || order.Customer == null)\n        {\n            return false;\n        }\n        if (order.Items == null || order.Items.Count == 0)\n        {\n            return false;\n        }\n        if (order.TotalAmount <= 0)\n        {\n            return false;\n        }\n        return ValidateCustomerCreditLimit(order);\n    }\n    \n    private bool ValidateCustomerCreditLimit(Order order)\n    {\n        var customerCreditLimit = GetCustomerCreditLimit(order.Customer.Id);\n        var outstandingAmount = GetCustomerOutstandingAmount(order.Customer.Id);\n        return (outstandingAmount + order.TotalAmount) <= customerCreditLimit;\n    }\n    \n    // Database operations responsibility\n    private void InitializeDatabase()\n    {\n        try\n        {\n            var connectionString = \"Data Source=localhost;Initial Catalog=Orders;Integrated Security=True\";\n            dbConnection = new SqlConnection(connectionString);\n            dbConnection.Open();\n        }\n        catch (SqlException ex)\n        {\n            Console.WriteLine($\"Database connection failed: {ex.Message}\");\n        }\n    }\n    \n    private void SaveOrderToDatabase(Order order)\n    {\n        try\n        {\n            var sql = \"INSERT INTO Orders (CustomerId, TotalAmount, Status, CreatedDate) VALUES (@CustomerId, @TotalAmount, @Status, @CreatedDate)\";\n            using (var command = new SqlCommand(sql, dbConnection))\n            {\n                command.Parameters.AddWithValue(\"@CustomerId\", order.Customer.Id);\n                command.Parameters.AddWithValue(\"@TotalAmount\", order.TotalAmount);\n                command.Parameters.AddWithValue(\"@Status\", order.Status);\n                command.Parameters.AddWithValue(\"@CreatedDate\", DateTime.Now);\n                command.ExecuteNonQuery();\n            }\n        }\n        catch (SqlException ex)\n        {\n            Console.WriteLine($\"Failed to save order: {ex.Message}\");\n        }\n    }\n    \n    private void UpdateOrderInDatabase(Order order)\n    {\n        try\n        {\n            var sql = \"UPDATE Orders SET Status = @Status, UpdatedDate = @UpdatedDate WHERE Id = @Id\";\n            using (var command = new SqlCommand(sql, dbConnection))\n            {\n                command.Parameters.AddWithValue(\"@Status\", order.Status);\n                command.Parameters.AddWithValue(\"@UpdatedDate\", DateTime.Now);\n                command.Parameters.AddWithValue(\"@Id\", order.Id);\n                command.ExecuteNonQuery();\n            }\n        }\n        catch (SqlException ex)\n        {\n            Console.WriteLine($\"Failed to update order: {ex.Message}\");\n        }\n    }\n    \n    private decimal GetCustomerCreditLimit(int customerId)\n    {\n        try\n        {\n            var sql = \"SELECT CreditLimit FROM Customers WHERE Id = @CustomerId\";\n            using (var command = new SqlCommand(sql, dbConnection))\n            {\n                command.Parameters.AddWithValue(\"@CustomerId\", customerId);\n                var result = command.ExecuteScalar();\n                return result != null ? Convert.ToDecimal(result) : 0;\n            }\n        }\n        catch (SqlException ex)\n        {\n            Console.WriteLine($\"Failed to get credit limit: {ex.Message}\");\n            return 0;\n        }\n    }\n    \n    private decimal GetCustomerOutstandingAmount(int customerId)\n    {\n        try\n        {\n            var sql = \"SELECT SUM(TotalAmount) FROM Orders WHERE CustomerId = @CustomerId AND Status = 'PENDING'\";\n            using (var command = new SqlCommand(sql, dbConnection))\n            {\n                command.Parameters.AddWithValue(\"@CustomerId\", customerId);\n                var result = command.ExecuteScalar();\n                return result != DBNull.Value && result != null ? Convert.ToDecimal(result) : 0;\n            }\n        }\n        catch (SqlException ex)\n        {\n            Console.WriteLine($\"Failed to get outstanding amount: {ex.Message}\");\n            return 0;\n        }\n    }\n    \n    // Email notification responsibility\n    private void SetupEmailConfiguration()\n    {\n        smtpClient = new SmtpClient(\"smtp.gmail.com\", 587)\n        {\n            EnableSsl = true,\n            UseDefaultCredentials = false,\n            Credentials = new NetworkCredential(\"orders@company.com\", \"password\")\n        };\n    }\n    \n    private void SendOrderConfirmationEmail(Order order)\n    {\n        try\n        {\n            var mailMessage = new MailMessage\n            {\n                From = new MailAddress(\"orders@company.com\"),\n                Subject = $\"Order Confirmation - Order #{order.Id}\",\n                Body = $\"Your order has been confirmed. Total: ${order.TotalAmount}\",\n                IsBodyHtml = false\n            };\n            mailMessage.To.Add(order.Customer.Email);\n            smtpClient.Send(mailMessage);\n        }\n        catch (SmtpException ex)\n        {\n            Console.WriteLine($\"Failed to send confirmation email: {ex.Message}\");\n        }\n    }\n    \n    private void SendStatusUpdateEmail(Order order)\n    {\n        try\n        {\n            var mailMessage = new MailMessage\n            {\n                From = new MailAddress(\"orders@company.com\"),\n                Subject = $\"Order Status Update - Order #{order.Id}\",\n                Body = $\"Your order status has been updated to: {order.Status}\",\n                IsBodyHtml = false\n            };\n            mailMessage.To.Add(order.Customer.Email);\n            smtpClient.Send(mailMessage);\n        }\n        catch (SmtpException ex)\n        {\n            Console.WriteLine($\"Failed to send status email: {ex.Message}\");\n        }\n    }\n    \n    // Invoice generation responsibility\n    private void GenerateInvoice(Order order)\n    {\n        try\n        {\n            var filename = $\"invoice_{order.Id}.txt\";\n            using (var writer = new StreamWriter(filename))\n            {\n                writer.WriteLine(\"INVOICE\");\n                writer.WriteLine($\"Order ID: {order.Id}\");\n                writer.WriteLine($\"Customer: {order.Customer.Name}\");\n                writer.WriteLine($\"Date: {DateTime.Now:yyyy-MM-dd}\");\n                writer.WriteLine($\"Total Amount: ${order.TotalAmount:F2}\");\n            }\n        }\n        catch (IOException ex)\n        {\n            Console.WriteLine($\"Failed to generate invoice: {ex.Message}\");\n        }\n    }\n    \n    // Inventory management responsibility\n    private void UpdateInventory(Order order)\n    {\n        foreach (var item in order.Items)\n        {\n            try\n            {\n                var sql = \"UPDATE Inventory SET Quantity = Quantity - @Quantity WHERE ProductId = @ProductId\";\n                using (var command = new SqlCommand(sql, dbConnection))\n                {\n                    command.Parameters.AddWithValue(\"@Quantity\", item.Quantity);\n                    command.Parameters.AddWithValue(\"@ProductId\", item.ProductId);\n                    command.ExecuteNonQuery();\n                }\n            }\n            catch (SqlException ex)\n            {\n                Console.WriteLine($\"Failed to update inventory: {ex.Message}\");\n            }\n        }\n    }\n    \n    // Logging responsibility\n    private void LogOrderActivity(Order order, string activity)\n    {\n        try\n        {\n            var filename = \"order_log.txt\";\n            using (var writer = new StreamWriter(filename, append: true))\n            {\n                var logEntry = $\"{DateTime.Now:yyyy-MM-dd HH:mm:ss} - Order {order.Id}: {activity}\";\n                writer.WriteLine(logEntry);\n            }\n        }\n        catch (IOException ex)\n        {\n            Console.WriteLine($\"Failed to log activity: {ex.Message}\");\n        }\n    }\n    \n    public void Dispose()\n    {\n        dbConnection?.Close();\n        dbConnection?.Dispose();\n        smtpClient?.Dispose();\n    }\n}",
      "output": "using System;\nusing System.Collections.Generic;\nusing System.Data.SqlClient;\nusing System.IO;\nusing System.Linq;\nusing System.Net.Mail;\nusing System.Net;\nusing System.Text;\n\npublic class Order\n{\n    public int Id { get; set; }\n    public Customer Customer { get; set; }\n    public List<OrderItem> Items { get; set; }\n    public decimal TotalAmount { get; set; }\n    public string Status { get; set; }\n}\n\npublic class Customer\n{\n    public int Id { get; set; }\n    public string Name { get; set; }\n    public string Email { get; set; }\n}\n\npublic class OrderItem\n{\n    public int ProductId { get; set; }\n    public int Quantity { get; set; }\n}\n\npublic class OrderService\n{\n    private readonly List<Order> orders;\n    private readonly IOrderRepository orderRepository;\n    private readonly IOrderValidator orderValidator;\n    private readonly IEmailNotificationService emailService;\n    private readonly IInvoiceGenerator invoiceGenerator;\n    private readonly IInventoryService inventoryService;\n    private readonly IOrderLogger orderLogger;\n    \n    public OrderService(\n        IOrderRepository orderRepository,\n        IOrderValidator orderValidator,\n        IEmailNotificationService emailService,\n        IInvoiceGenerator invoiceGenerator,\n        IInventoryService inventoryService,\n        IOrderLogger orderLogger)\n    {\n        this.orders = new List<Order>();\n        this.orderRepository = orderRepository;\n        this.orderValidator = orderValidator;\n        this.emailService = emailService;\n        this.invoiceGenerator = invoiceGenerator;\n        this.inventoryService = inventoryService;\n        this.orderLogger = orderLogger;\n    }\n    \n    public void AddOrder(Order order)\n    {\n        if (orderValidator.ValidateOrder(order))\n        {\n            orders.Add(order);\n            orderRepository.Save(order);\n            emailService.SendOrderConfirmation(order);\n            invoiceGenerator.GenerateInvoice(order);\n            inventoryService.UpdateInventory(order);\n            orderLogger.LogActivity(order, \"ORDER_CREATED\");\n        }\n    }\n    \n    public void UpdateOrderStatus(int orderId, string status)\n    {\n        var order = FindOrderById(orderId);\n        if (order != null)\n        {\n            order.Status = status;\n            orderRepository.Update(order);\n            emailService.SendStatusUpdate(order);\n            orderLogger.LogActivity(order, \"STATUS_UPDATED\");\n        }\n    }\n    \n    public Order FindOrderById(int orderId)\n    {\n        return orders.FirstOrDefault(order => order.Id == orderId);\n    }\n}\n\npublic interface IOrderValidator\n{\n    bool ValidateOrder(Order order);\n}\n\npublic class OrderValidator : IOrderValidator\n{\n    private readonly ICustomerService customerService;\n    \n    public OrderValidator(ICustomerService customerService)\n    {\n        this.customerService = customerService;\n    }\n    \n    public bool ValidateOrder(Order order)\n    {\n        return IsOrderValid(order) && ValidateCustomerCreditLimit(order);\n    }\n    \n    private bool IsOrderValid(Order order)\n    {\n        return order != null && order.Customer != null &&\n               order.Items != null && order.Items.Count > 0 &&\n               order.TotalAmount > 0;\n    }\n    \n    private bool ValidateCustomerCreditLimit(Order order)\n    {\n        var creditLimit = customerService.GetCreditLimit(order.Customer.Id);\n        var outstanding = customerService.GetOutstandingAmount(order.Customer.Id);\n        return (outstanding + order.TotalAmount) <= creditLimit;\n    }\n}\n\npublic interface IOrderRepository\n{\n    void Save(Order order);\n    void Update(Order order);\n}\n\npublic class OrderRepository : IOrderRepository\n{\n    private readonly SqlConnection dbConnection;\n    \n    public OrderRepository()\n    {\n        InitializeConnection();\n    }\n    \n    private void InitializeConnection()\n    {\n        try\n        {\n            var connectionString = \"Data Source=localhost;Initial Catalog=Orders;Integrated Security=True\";\n            dbConnection = new SqlConnection(connectionString);\n            dbConnection.Open();\n        }\n        catch (SqlException ex)\n        {\n            throw new InvalidOperationException(\"Database connection failed\", ex);\n        }\n    }\n    \n    public void Save(Order order)\n    {\n        try\n        {\n            var sql = \"INSERT INTO Orders (CustomerId, TotalAmount, Status, CreatedDate) VALUES (@CustomerId, @TotalAmount, @Status, @CreatedDate)\";\n            using (var command = new SqlCommand(sql, dbConnection))\n            {\n                command.Parameters.AddWithValue(\"@CustomerId\", order.Customer.Id);\n                command.Parameters.AddWithValue(\"@TotalAmount\", order.TotalAmount);\n                command.Parameters.AddWithValue(\"@Status\", order.Status);\n                command.Parameters.AddWithValue(\"@CreatedDate\", DateTime.Now);\n                command.ExecuteNonQuery();\n            }\n        }\n        catch (SqlException ex)\n        {\n            throw new InvalidOperationException(\"Failed to save order\", ex);\n        }\n    }\n    \n    public void Update(Order order)\n    {\n        try\n        {\n            var sql = \"UPDATE Orders SET Status = @Status, UpdatedDate = @UpdatedDate WHERE Id = @Id\";\n            using (var command = new SqlCommand(sql, dbConnection))\n            {\n                command.Parameters.AddWithValue(\"@Status\", order.Status);\n                command.Parameters.AddWithValue(\"@UpdatedDate\", DateTime.Now);\n                command.Parameters.AddWithValue(\"@Id\", order.Id);\n                command.ExecuteNonQuery();\n            }\n        }\n        catch (SqlException ex)\n        {\n            throw new InvalidOperationException(\"Failed to update order\", ex);\n        }\n    }\n}\n\npublic interface ICustomerService\n{\n    decimal GetCreditLimit(int customerId);\n    decimal GetOutstandingAmount(int customerId);\n}\n\npublic class CustomerService : ICustomerService\n{\n    private readonly SqlConnection dbConnection;\n    \n    public CustomerService(SqlConnection dbConnection)\n    {\n        this.dbConnection = dbConnection;\n    }\n    \n    public decimal GetCreditLimit(int customerId)\n    {\n        try\n        {\n            var sql = \"SELECT CreditLimit FROM Customers WHERE Id = @CustomerId\";\n            using (var command = new SqlCommand(sql, dbConnection))\n            {\n                command.Parameters.AddWithValue(\"@CustomerId\", customerId);\n                var result = command.ExecuteScalar();\n                return result != null ? Convert.ToDecimal(result) : 0;\n            }\n        }\n        catch (SqlException ex)\n        {\n            throw new InvalidOperationException(\"Failed to get credit limit\", ex);\n        }\n    }\n    \n    public decimal GetOutstandingAmount(int customerId)\n    {\n        try\n        {\n            var sql = \"SELECT SUM(TotalAmount) FROM Orders WHERE CustomerId = @CustomerId AND Status = 'PENDING'\";\n            using (var command = new SqlCommand(sql, dbConnection))\n            {\n                command.Parameters.AddWithValue(\"@CustomerId\", customerId);\n                var result = command.ExecuteScalar();\n                return result != DBNull.Value && result != null ? Convert.ToDecimal(result) : 0;\n            }\n        }\n        catch (SqlException ex)\n        {\n            throw new InvalidOperationException(\"Failed to get outstanding amount\", ex);\n        }\n    }\n}\n\npublic interface IEmailNotificationService\n{\n    void SendOrderConfirmation(Order order);\n    void SendStatusUpdate(Order order);\n}\n\npublic class EmailNotificationService : IEmailNotificationService\n{\n    private readonly SmtpClient smtpClient;\n    \n    public EmailNotificationService()\n    {\n        SetupConfiguration();\n    }\n    \n    private void SetupConfiguration()\n    {\n        smtpClient = new SmtpClient(\"smtp.gmail.com\", 587)\n        {\n            EnableSsl = true,\n            UseDefaultCredentials = false,\n            Credentials = new NetworkCredential(\"orders@company.com\", \"password\")\n        };\n    }\n    \n    public void SendOrderConfirmation(Order order)\n    {\n        SendEmail(\n            order.Customer.Email,\n            $\"Order Confirmation - Order #{order.Id}\",\n            $\"Your order has been confirmed. Total: ${order.TotalAmount}\"\n        );\n    }\n    \n    public void SendStatusUpdate(Order order)\n    {\n        SendEmail(\n            order.Customer.Email,\n            $\"Order Status Update - Order #{order.Id}\",\n            $\"Your order status has been updated to: {order.Status}\"\n        );\n    }\n    \n    private void SendEmail(string to, string subject, string body)\n    {\n        try\n        {\n            var mailMessage = new MailMessage\n            {\n                From = new MailAddress(\"orders@company.com\"),\n                Subject = subject,\n                Body = body,\n                IsBodyHtml = false\n            };\n            mailMessage.To.Add(to);\n            smtpClient.Send(mailMessage);\n        }\n        catch (SmtpException ex)\n        {\n            throw new InvalidOperationException(\"Failed to send email\", ex);\n        }\n    }\n}\n\npublic interface IInvoiceGenerator\n{\n    void GenerateInvoice(Order order);\n}\n\npublic class InvoiceGenerator : IInvoiceGenerator\n{\n    public void GenerateInvoice(Order order)\n    {\n        try\n        {\n            var filename = $\"invoice_{order.Id}.txt\";\n            using (var writer = new StreamWriter(filename))\n            {\n                writer.Write(BuildInvoiceContent(order));\n            }\n        }\n        catch (IOException ex)\n        {\n            throw new InvalidOperationException(\"Failed to generate invoice\", ex);\n        }\n    }\n    \n    private string BuildInvoiceContent(Order order)\n    {\n        var content = new StringBuilder();\n        content.AppendLine(\"INVOICE\");\n        content.AppendLine($\"Order ID: {order.Id}\");\n        content.AppendLine($\"Customer: {order.Customer.Name}\");\n        content.AppendLine($\"Date: {DateTime.Now:yyyy-MM-dd}\");\n        content.AppendLine($\"Total Amount: ${order.TotalAmount:F2}\");\n        return content.ToString();\n    }\n}\n\npublic interface IInventoryService\n{\n    void UpdateInventory(Order order);\n}\n\npublic class InventoryService : IInventoryService\n{\n    private readonly SqlConnection dbConnection;\n    \n    public InventoryService(SqlConnection dbConnection)\n    {\n        this.dbConnection = dbConnection;\n    }\n    \n    public void UpdateInventory(Order order)\n    {\n        foreach (var item in order.Items)\n        {\n            UpdateProductQuantity(item.ProductId, item.Quantity);\n        }\n    }\n    \n    private void UpdateProductQuantity(int productId, int quantity)\n    {\n        try\n        {\n            var sql = \"UPDATE Inventory SET Quantity = Quantity - @Quantity WHERE ProductId = @ProductId\";\n            using (var command = new SqlCommand(sql, dbConnection))\n            {\n                command.Parameters.AddWithValue(\"@Quantity\", quantity);\n                command.Parameters.AddWithValue(\"@ProductId\", productId);\n                command.ExecuteNonQuery();\n            }\n        }\n        catch (SqlException ex)\n        {\n            throw new InvalidOperationException(\"Failed to update inventory\", ex);\n        }\n    }\n}\n\npublic interface IOrderLogger\n{\n    void LogActivity(Order order, string activity);\n}\n\npublic class OrderLogger : IOrderLogger\n{\n    public void LogActivity(Order order, string activity)\n    {\n        try\n        {\n            var filename = \"order_log.txt\";\n            using (var writer = new StreamWriter(filename, append: true))\n            {\n                var logEntry = $\"{DateTime.Now:yyyy-MM-dd HH:mm:ss} - Order {order.Id}: {activity}\";\n                writer.WriteLine(logEntry);\n            }\n        }\n        catch (IOException ex)\n        {\n            throw new InvalidOperationException(\"Failed to log activity\", ex);\n        }\n    }\n}",
      "level": "HARD",
      "language": "CSHARP",
      "violation": "SRP",
       "description": "Order management processing system"
    },
    {
      "input": "using System;\nusing System.Collections.Generic;\nusing System.Collections.Concurrent;\nusing System.IO;\nusing System.Linq;\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Text.RegularExpressions;\nusing System.Threading;\n\npublic class BlogPostManager\n{\n    private readonly ConcurrentDictionary<int, BlogPost> posts = new ConcurrentDictionary<int, BlogPost>();\n    private readonly ConcurrentDictionary<string, List<string>> userSessions = new ConcurrentDictionary<string, List<string>>();\n    private readonly Dictionary<string, int> userPermissions = new Dictionary<string, int>();\n    private int nextPostId = 1;\n    \n    public BlogPostManager()\n    {\n        InitializeDefaultUsers();\n        SetupLogging();\n    }\n    \n    public void CreatePost(string sessionToken, string title, string content, List<string> tags)\n    {\n        if (!IsValidSession(sessionToken))\n        {\n            throw new SecurityException(\"Invalid session\");\n        }\n        \n        var username = GetUserFromSession(sessionToken);\n        if (!HasPermission(username, \"CREATE_POST\"))\n        {\n            throw new SecurityException(\"Insufficient permissions\");\n        }\n        \n        if (!ValidatePostContent(title, content))\n        {\n            throw new ArgumentException(\"Invalid post content\");\n        }\n        \n        var sanitizedTitle = SanitizeHtml(title);\n        var sanitizedContent = SanitizeHtml(content);\n        var processedTags = ProcessTags(tags);\n        \n        var post = new BlogPost(Interlocked.Increment(ref nextPostId) - 1, sanitizedTitle, sanitizedContent,\n                               username, DateTime.Now, processedTags);\n        posts[post.Id] = post;\n        \n        UpdateSearchIndex(post);\n        GenerateSitemap();\n        NotifySubscribers(post);\n        LogActivity(username, \"POST_CREATED\", post.Id);\n        \n        Console.WriteLine($\"Blog post created successfully: {post.Id}\");\n    }\n    \n    public void UpdatePost(string sessionToken, int postId, string newTitle, string newContent)\n    {\n        if (!IsValidSession(sessionToken))\n        {\n            throw new SecurityException(\"Invalid session\");\n        }\n        \n        var username = GetUserFromSession(sessionToken);\n        if (!posts.TryGetValue(postId, out var post))\n        {\n            throw new ArgumentException(\"Post not found\");\n        }\n        \n        if (post.Author != username && !HasPermission(username, \"EDIT_ANY_POST\"))\n        {\n            throw new SecurityException(\"Cannot edit this post\");\n        }\n        \n        if (!ValidatePostContent(newTitle, newContent))\n        {\n            throw new ArgumentException(\"Invalid post content\");\n        }\n        \n        post.Title = SanitizeHtml(newTitle);\n        post.Content = SanitizeHtml(newContent);\n        post.LastModified = DateTime.Now;\n        \n        UpdateSearchIndex(post);\n        GenerateSitemap();\n        LogActivity(username, \"POST_UPDATED\", postId);\n        \n        Console.WriteLine($\"Post updated: {postId}\");\n    }\n    \n    public void DeletePost(string sessionToken, int postId)\n    {\n        if (!IsValidSession(sessionToken))\n        {\n            throw new SecurityException(\"Invalid session\");\n        }\n        \n        var username = GetUserFromSession(sessionToken);\n        if (!posts.TryGetValue(postId, out var post))\n        {\n            throw new ArgumentException(\"Post not found\");\n        }\n        \n        if (post.Author != username && !HasPermission(username, \"DELETE_ANY_POST\"))\n        {\n            throw new SecurityException(\"Cannot delete this post\");\n        }\n        \n        posts.TryRemove(postId, out _);\n        RemoveFromSearchIndex(postId);\n        GenerateSitemap();\n        LogActivity(username, \"POST_DELETED\", postId);\n        \n        Console.WriteLine($\"Post deleted: {postId}\");\n    }\n    \n    private void InitializeDefaultUsers()\n    {\n        userPermissions[\"admin\"] = 7; // All permissions\n        userPermissions[\"editor\"] = 3; // Create and edit\n        userPermissions[\"author\"] = 1; // Create only\n    }\n    \n    private void SetupLogging()\n    {\n        try\n        {\n            var logDir = new DirectoryInfo(\"logs\");\n            if (!logDir.Exists)\n            {\n                logDir.Create();\n            }\n        }\n        catch (Exception e)\n        {\n            Console.Error.WriteLine($\"Failed to setup logging: {e.Message}\");\n        }\n    }\n    \n    private bool IsValidSession(string sessionToken)\n    {\n        return !string.IsNullOrEmpty(sessionToken) && userSessions.ContainsKey(sessionToken);\n    }\n    \n    private string GetUserFromSession(string sessionToken)\n    {\n        if (userSessions.TryGetValue(sessionToken, out var sessionData))\n        {\n            return sessionData.FirstOrDefault();\n        }\n        return null;\n    }\n    \n    private bool HasPermission(string username, string permission)\n    {\n        if (!userPermissions.TryGetValue(username, out var userLevel))\n            return false;\n        \n        return permission switch\n        {\n            \"CREATE_POST\" => (userLevel & 1) != 0,\n            \"EDIT_ANY_POST\" => (userLevel & 2) != 0,\n            \"DELETE_ANY_POST\" => (userLevel & 4) != 0,\n            _ => false\n        };\n    }\n    \n    private bool ValidatePostContent(string title, string content)\n    {\n        if (string.IsNullOrWhiteSpace(title) || title.Length > 200)\n        {\n            return false;\n        }\n        if (string.IsNullOrWhiteSpace(content) || content.Length > 10000)\n        {\n            return false;\n        }\n        \n        var scriptPattern = new Regex(@\"<script[^>]*>.*?</script>\", RegexOptions.IgnoreCase);\n        return !scriptPattern.IsMatch(title) && !scriptPattern.IsMatch(content);\n    }\n    \n    private string SanitizeHtml(string input)\n    {\n        if (string.IsNullOrEmpty(input)) return string.Empty;\n        \n        return Regex.Replace(input, @\"<script[^>]*>.*?</script>\", string.Empty)\n                   .Replace(\"<\", \"&lt;\")\n                   .Replace(\">\", \"&gt;\")\n                   .Replace(\"&\", \"&amp;\");\n    }\n    \n    private List<string> ProcessTags(List<string> tags)\n    {\n        if (tags == null) return new List<string>();\n        \n        return tags.Where(tag => !string.IsNullOrWhiteSpace(tag) && tag.Length <= 50)\n                  .Select(tag => tag.ToLowerInvariant().Trim())\n                  .Distinct()\n                  .ToList();\n    }\n    \n    private void UpdateSearchIndex(BlogPost post)\n    {\n        try\n        {\n            using var writer = new StreamWriter(\"search_index.txt\", append: true);\n            writer.WriteLine($\"{post.Id}|{post.Title}|{post.Content}\");\n        }\n        catch (IOException e)\n        {\n            Console.Error.WriteLine($\"Failed to update search index: {e.Message}\");\n        }\n    }\n    \n    private void RemoveFromSearchIndex(int postId)\n    {\n        try\n        {\n            var indexFile = new FileInfo(\"search_index.txt\");\n            if (!indexFile.Exists) return;\n            \n            var lines = File.ReadAllLines(\"search_index.txt\")\n                           .Where(line => !line.StartsWith($\"{postId}|\"))\n                           .ToArray();\n            \n            File.WriteAllLines(\"search_index.txt\", lines);\n        }\n        catch (IOException e)\n        {\n            Console.Error.WriteLine($\"Failed to update search index: {e.Message}\");\n        }\n    }\n    \n    private void GenerateSitemap()\n    {\n        try\n        {\n            using var writer = new StreamWriter(\"sitemap.xml\");\n            writer.WriteLine(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\");\n            writer.WriteLine(\"<urlset xmlns=\\\"http://www.sitemaps.org/schemas/sitemap/0.9\\\">\");\n            \n            foreach (var post in posts.Values)\n            {\n                writer.WriteLine(\"  <url>\");\n                writer.WriteLine($\"    <loc>https://blog.com/post/{post.Id}</loc>\");\n                writer.WriteLine($\"    <lastmod>{post.LastModified:yyyy-MM-ddTHH:mm:ss}</lastmod>\");\n                writer.WriteLine(\"  </url>\");\n            }\n            \n            writer.WriteLine(\"</urlset>\");\n        }\n        catch (IOException e)\n        {\n            Console.Error.WriteLine($\"Failed to generate sitemap: {e.Message}\");\n        }\n    }\n    \n    private void NotifySubscribers(BlogPost post)\n    {\n        Console.WriteLine($\"Sending notifications for new post: {post.Title}\");\n        try\n        {\n            Thread.Sleep(100);\n        }\n        catch (ThreadInterruptedException)\n        {\n            // Handle interruption\n        }\n    }\n    \n    private void LogActivity(string username, string action, int postId)\n    {\n        try\n        {\n            var logFile = $\"logs/activity_{DateTime.Now:yyyy-MM-dd}.log\";\n            using var writer = new StreamWriter(logFile, append: true);\n            var logEntry = $\"{DateTime.Now:yyyy-MM-dd HH:mm:ss} - User: {username}, Action: {action}, Post: {postId}\";\n            writer.WriteLine(logEntry);\n        }\n        catch (IOException e)\n        {\n            Console.Error.WriteLine($\"Failed to log activity: {e.Message}\");\n        }\n    }\n    \n    public List<BlogPost> SearchPosts(string query)\n    {\n        var results = new List<BlogPost>();\n        var lowerQuery = query.ToLowerInvariant();\n        \n        foreach (var post in posts.Values)\n        {\n            if (post.Title.ToLowerInvariant().Contains(lowerQuery) ||\n                post.Content.ToLowerInvariant().Contains(lowerQuery) ||\n                post.Tags.Any(tag => tag.Contains(lowerQuery)))\n            {\n                results.Add(post);\n            }\n        }\n        \n        return results;\n    }\n    \n    public string LoginUser(string username, string password)\n    {\n        var hashedPassword = HashPassword(password);\n        if (ValidateCredentials(username, hashedPassword))\n        {\n            var sessionToken = GenerateSessionToken(username);\n            userSessions[sessionToken] = new List<string> { username, DateTime.Now.ToString() };\n            LogActivity(username, \"LOGIN\", 0);\n            return sessionToken;\n        }\n        throw new SecurityException(\"Invalid credentials\");\n    }\n    \n    private string HashPassword(string password)\n    {\n        try\n        {\n            using var sha256 = SHA256.Create();\n            var hash = sha256.ComputeHash(Encoding.UTF8.GetBytes(password));\n            return Convert.ToHexString(hash).ToLowerInvariant();\n        }\n        catch (Exception e)\n        {\n            throw new InvalidOperationException(\"Password hashing failed\", e);\n        }\n    }\n    \n    private bool ValidateCredentials(string username, string hashedPassword)\n    {\n        return userPermissions.ContainsKey(username);\n    }\n    \n    private string GenerateSessionToken(string username)\n    {\n        return HashPassword(username + DateTimeOffset.UtcNow.ToUnixTimeMilliseconds());\n    }\n}\n\npublic class BlogPost\n{\n    public int Id { get; }\n    public string Title { get; set; }\n    public string Content { get; set; }\n    public string Author { get; }\n    public DateTime CreatedAt { get; }\n    public DateTime LastModified { get; set; }\n    public List<string> Tags { get; }\n    \n    public BlogPost(int id, string title, string content, string author, DateTime createdAt, List<string> tags = null)\n    {\n        Id = id;\n        Title = title;\n        Content = content;\n        Author = author;\n        CreatedAt = createdAt;\n        LastModified = createdAt;\n        Tags = tags ?? new List<string>();\n    }\n}\n\npublic class SecurityException : Exception\n{\n    public SecurityException(string message) : base(message) { }\n}",
      "output": "using System;\nusing System.Collections.Generic;\nusing System.Collections.Concurrent;\nusing System.IO;\nusing System.Linq;\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Text.RegularExpressions;\nusing System.Threading;\n\npublic class BlogPostService\n{\n    private readonly ConcurrentDictionary<int, BlogPost> posts = new ConcurrentDictionary<int, BlogPost>();\n    private int nextPostId = 1;\n    \n    private readonly IBlogPostValidator validator;\n    private readonly IContentSanitizer sanitizer;\n    private readonly IAuthenticationService authService;\n    private readonly ISearchIndexService searchService;\n    private readonly ISitemapGenerator sitemapGenerator;\n    private readonly INotificationService notificationService;\n    private readonly IActivityLogger activityLogger;\n    \n    public BlogPostService(\n        IBlogPostValidator validator,\n        IContentSanitizer sanitizer,\n        IAuthenticationService authService,\n        ISearchIndexService searchService,\n        ISitemapGenerator sitemapGenerator,\n        INotificationService notificationService,\n        IActivityLogger activityLogger)\n    {\n        this.validator = validator;\n        this.sanitizer = sanitizer;\n        this.authService = authService;\n        this.searchService = searchService;\n        this.sitemapGenerator = sitemapGenerator;\n        this.notificationService = notificationService;\n        this.activityLogger = activityLogger;\n    }\n    \n    public void CreatePost(string sessionToken, string title, string content, List<string> tags)\n    {\n        var username = authService.ValidateSessionAndGetUser(sessionToken);\n        authService.CheckPermission(username, \"CREATE_POST\");\n        \n        validator.ValidatePostContent(title, content);\n        \n        var sanitizedTitle = sanitizer.SanitizeHtml(title);\n        var sanitizedContent = sanitizer.SanitizeHtml(content);\n        var processedTags = sanitizer.ProcessTags(tags);\n        \n        var post = new BlogPost(Interlocked.Increment(ref nextPostId) - 1, sanitizedTitle, sanitizedContent,\n                               username, DateTime.Now, processedTags);\n        posts[post.Id] = post;\n        \n        searchService.UpdateIndex(post);\n        sitemapGenerator.Regenerate(posts.Values);\n        notificationService.NotifySubscribers(post);\n        activityLogger.LogActivity(username, \"POST_CREATED\", post.Id);\n        \n        Console.WriteLine($\"Blog post created successfully: {post.Id}\");\n    }\n    \n    public void UpdatePost(string sessionToken, int postId, string newTitle, string newContent)\n    {\n        var username = authService.ValidateSessionAndGetUser(sessionToken);\n        var post = GetPostById(postId);\n        \n        authService.CheckPostEditPermission(username, post);\n        validator.ValidatePostContent(newTitle, newContent);\n        \n        post.Title = sanitizer.SanitizeHtml(newTitle);\n        post.Content = sanitizer.SanitizeHtml(newContent);\n        post.LastModified = DateTime.Now;\n        \n        searchService.UpdateIndex(post);\n        sitemapGenerator.Regenerate(posts.Values);\n        activityLogger.LogActivity(username, \"POST_UPDATED\", postId);\n        \n        Console.WriteLine($\"Post updated: {postId}\");\n    }\n    \n    public void DeletePost(string sessionToken, int postId)\n    {\n        var username = authService.ValidateSessionAndGetUser(sessionToken);\n        var post = GetPostById(postId);\n        \n        authService.CheckPostDeletePermission(username, post);\n        \n        posts.TryRemove(postId, out _);\n        searchService.RemoveFromIndex(postId);\n        sitemapGenerator.Regenerate(posts.Values);\n        activityLogger.LogActivity(username, \"POST_DELETED\", postId);\n        \n        Console.WriteLine($\"Post deleted: {postId}\");\n    }\n    \n    private BlogPost GetPostById(int postId)\n    {\n        if (!posts.TryGetValue(postId, out var post))\n        {\n            throw new ArgumentException(\"Post not found\");\n        }\n        return post;\n    }\n    \n    public List<BlogPost> SearchPosts(string query)\n    {\n        return searchService.Search(posts.Values, query);\n    }\n}\n\npublic interface IBlogPostValidator\n{\n    void ValidatePostContent(string title, string content);\n}\n\npublic class BlogPostValidator : IBlogPostValidator\n{\n    private static readonly Regex ScriptPattern = new Regex(@\"<script[^>]*>.*?</script>\", RegexOptions.IgnoreCase);\n    \n    public void ValidatePostContent(string title, string content)\n    {\n        if (string.IsNullOrWhiteSpace(title) || title.Length > 200)\n        {\n            throw new ArgumentException(\"Invalid title\");\n        }\n        if (string.IsNullOrWhiteSpace(content) || content.Length > 10000)\n        {\n            throw new ArgumentException(\"Invalid content\");\n        }\n        \n        if (ScriptPattern.IsMatch(title) || ScriptPattern.IsMatch(content))\n        {\n            throw new ArgumentException(\"Script tags not allowed\");\n        }\n    }\n}\n\npublic interface IContentSanitizer\n{\n    string SanitizeHtml(string input);\n    List<string> ProcessTags(List<string> tags);\n}\n\npublic class ContentSanitizer : IContentSanitizer\n{\n    public string SanitizeHtml(string input)\n    {\n        if (string.IsNullOrEmpty(input)) return string.Empty;\n        \n        return Regex.Replace(input, @\"<script[^>]*>.*?</script>\", string.Empty)\n                   .Replace(\"<\", \"&lt;\")\n                   .Replace(\">\", \"&gt;\")\n                   .Replace(\"&\", \"&amp;\");\n    }\n    \n    public List<string> ProcessTags(List<string> tags)\n    {\n        if (tags == null) return new List<string>();\n        \n        return tags.Where(tag => !string.IsNullOrWhiteSpace(tag) && tag.Length <= 50)\n                  .Select(tag => tag.ToLowerInvariant().Trim())\n                  .Distinct()\n                  .ToList();\n    }\n}\n\npublic interface IAuthenticationService\n{\n    string ValidateSessionAndGetUser(string sessionToken);\n    void CheckPermission(string username, string permission);\n    void CheckPostEditPermission(string username, BlogPost post);\n    void CheckPostDeletePermission(string username, BlogPost post);\n    string LoginUser(string username, string password);\n}\n\npublic class AuthenticationService : IAuthenticationService\n{\n    private readonly ConcurrentDictionary<string, List<string>> userSessions = new ConcurrentDictionary<string, List<string>>();\n    private readonly Dictionary<string, int> userPermissions = new Dictionary<string, int>();\n    \n    public AuthenticationService()\n    {\n        InitializeDefaultUsers();\n    }\n    \n    public string ValidateSessionAndGetUser(string sessionToken)\n    {\n        if (!IsValidSession(sessionToken))\n        {\n            throw new SecurityException(\"Invalid session\");\n        }\n        return GetUserFromSession(sessionToken);\n    }\n    \n    public void CheckPermission(string username, string permission)\n    {\n        if (!HasPermission(username, permission))\n        {\n            throw new SecurityException(\"Insufficient permissions\");\n        }\n    }\n    \n    public void CheckPostEditPermission(string username, BlogPost post)\n    {\n        if (post.Author != username && !HasPermission(username, \"EDIT_ANY_POST\"))\n        {\n            throw new SecurityException(\"Cannot edit this post\");\n        }\n    }\n    \n    public void CheckPostDeletePermission(string username, BlogPost post)\n    {\n        if (post.Author != username && !HasPermission(username, \"DELETE_ANY_POST\"))\n        {\n            throw new SecurityException(\"Cannot delete this post\");\n        }\n    }\n    \n    private void InitializeDefaultUsers()\n    {\n        userPermissions[\"admin\"] = 7;\n        userPermissions[\"editor\"] = 3;\n        userPermissions[\"author\"] = 1;\n    }\n    \n    private bool IsValidSession(string sessionToken)\n    {\n        return !string.IsNullOrEmpty(sessionToken) && userSessions.ContainsKey(sessionToken);\n    }\n    \n    private string GetUserFromSession(string sessionToken)\n    {\n        if (userSessions.TryGetValue(sessionToken, out var sessionData))\n        {\n            return sessionData.FirstOrDefault() ?? throw new SecurityException(\"Invalid session\");\n        }\n        throw new SecurityException(\"Invalid session\");\n    }\n    \n    private bool HasPermission(string username, string permission)\n    {\n        if (!userPermissions.TryGetValue(username, out var userLevel))\n            return false;\n        \n        return permission switch\n        {\n            \"CREATE_POST\" => (userLevel & 1) != 0,\n            \"EDIT_ANY_POST\" => (userLevel & 2) != 0,\n            \"DELETE_ANY_POST\" => (userLevel & 4) != 0,\n            _ => false\n        };\n    }\n    \n    public string LoginUser(string username, string password)\n    {\n        var hashedPassword = PasswordUtil.HashPassword(password);\n        if (ValidateCredentials(username, hashedPassword))\n        {\n            var sessionToken = GenerateSessionToken(username);\n            userSessions[sessionToken] = new List<string> { username, DateTime.Now.ToString() };\n            return sessionToken;\n        }\n        throw new SecurityException(\"Invalid credentials\");\n    }\n    \n    private bool ValidateCredentials(string username, string hashedPassword)\n    {\n        return userPermissions.ContainsKey(username);\n    }\n    \n    private string GenerateSessionToken(string username)\n    {\n        return PasswordUtil.HashPassword(username + DateTimeOffset.UtcNow.ToUnixTimeMilliseconds());\n    }\n}\n\npublic interface ISearchIndexService\n{\n    void UpdateIndex(BlogPost post);\n    void RemoveFromIndex(int postId);\n    List<BlogPost> Search(IEnumerable<BlogPost> posts, string query);\n}\n\npublic class SearchIndexService : ISearchIndexService\n{\n    public void UpdateIndex(BlogPost post)\n    {\n        try\n        {\n            using var writer = new StreamWriter(\"search_index.txt\", append: true);\n            writer.WriteLine($\"{post.Id}|{post.Title}|{post.Content}\");\n        }\n        catch (IOException e)\n        {\n            throw new InvalidOperationException(\"Failed to update search index\", e);\n        }\n    }\n    \n    public void RemoveFromIndex(int postId)\n    {\n        try\n        {\n            var indexFile = new FileInfo(\"search_index.txt\");\n            if (!indexFile.Exists) return;\n            \n            var lines = File.ReadAllLines(\"search_index.txt\")\n                           .Where(line => !line.StartsWith($\"{postId}|\"))\n                           .ToArray();\n            \n            File.WriteAllLines(\"search_index.txt\", lines);\n        }\n        catch (IOException e)\n        {\n            throw new InvalidOperationException(\"Failed to update search index\", e);\n        }\n    }\n    \n    public List<BlogPost> Search(IEnumerable<BlogPost> posts, string query)\n    {\n        var results = new List<BlogPost>();\n        var lowerQuery = query.ToLowerInvariant();\n        \n        foreach (var post in posts)\n        {\n            if (post.Title.ToLowerInvariant().Contains(lowerQuery) ||\n                post.Content.ToLowerInvariant().Contains(lowerQuery) ||\n                post.Tags.Any(tag => tag.Contains(lowerQuery)))\n            {\n                results.Add(post);\n            }\n        }\n        \n        return results;\n    }\n}\n\npublic interface ISitemapGenerator\n{\n    void Regenerate(IEnumerable<BlogPost> posts);\n}\n\npublic class SitemapGenerator : ISitemapGenerator\n{\n    public void Regenerate(IEnumerable<BlogPost> posts)\n    {\n        try\n        {\n            using var writer = new StreamWriter(\"sitemap.xml\");\n            writer.WriteLine(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\");\n            writer.WriteLine(\"<urlset xmlns=\\\"http://www.sitemaps.org/schemas/sitemap/0.9\\\">\");\n            \n            foreach (var post in posts)\n            {\n                writer.WriteLine(\"  <url>\");\n                writer.WriteLine($\"    <loc>https://blog.com/post/{post.Id}</loc>\");\n                writer.WriteLine($\"    <lastmod>{post.LastModified:yyyy-MM-ddTHH:mm:ss}</lastmod>\");\n                writer.WriteLine(\"  </url>\");\n            }\n            \n            writer.WriteLine(\"</urlset>\");\n        }\n        catch (IOException e)\n        {\n            throw new InvalidOperationException(\"Failed to generate sitemap\", e);\n        }\n    }\n}\n\npublic interface INotificationService\n{\n    void NotifySubscribers(BlogPost post);\n}\n\npublic class NotificationService : INotificationService\n{\n    public void NotifySubscribers(BlogPost post)\n    {\n        Console.WriteLine($\"Sending notifications for new post: {post.Title}\");\n        try\n        {\n            Thread.Sleep(100);\n        }\n        catch (ThreadInterruptedException)\n        {\n            // Handle interruption\n        }\n    }\n}\n\npublic interface IActivityLogger\n{\n    void LogActivity(string username, string action, int postId);\n}\n\npublic class ActivityLogger : IActivityLogger\n{\n    public ActivityLogger()\n    {\n        SetupLogging();\n    }\n    \n    private void SetupLogging()\n    {\n        try\n        {\n            var logDir = new DirectoryInfo(\"logs\");\n            if (!logDir.Exists)\n            {\n                logDir.Create();\n            }\n        }\n        catch (Exception e)\n        {\n            Console.Error.WriteLine($\"Failed to setup logging: {e.Message}\");\n        }\n    }\n    \n    public void LogActivity(string username, string action, int postId)\n    {\n        try\n        {\n            var logFile = $\"logs/activity_{DateTime.Now:yyyy-MM-dd}.log\";\n            using var writer = new StreamWriter(logFile, append: true);\n            var logEntry = $\"{DateTime.Now:yyyy-MM-dd HH:mm:ss} - User: {username}, Action: {action}, Post: {postId}\";\n            writer.WriteLine(logEntry);\n        }\n        catch (IOException e)\n        {\n            throw new InvalidOperationException(\"Failed to log activity\", e);\n        }\n    }\n}\n\npublic static class PasswordUtil\n{\n    public static string HashPassword(string password)\n    {\n        try\n        {\n            using var sha256 = SHA256.Create();\n            var hash = sha256.ComputeHash(Encoding.UTF8.GetBytes(password));\n            return Convert.ToHexString(hash).ToLowerInvariant();\n        }\n        catch (Exception e)\n        {\n            throw new InvalidOperationException(\"Password hashing failed\", e);\n        }\n    }\n}\n\npublic class BlogPost\n{\n    public int Id { get; }\n    public string Title { get; set; }\n    public string Content { get; set; }\n    public string Author { get; }\n    public DateTime CreatedAt { get; }\n    public DateTime LastModified { get; set; }\n    public List<string> Tags { get; }\n    \n    public BlogPost(int id, string title, string content, string author, DateTime createdAt, List<string> tags = null)\n    {\n        Id = id;\n        Title = title;\n        Content = content;\n        Author = author;\n        CreatedAt = createdAt;\n        LastModified = createdAt;\n        Tags = tags ?? new List<string>();\n    }\n}\n\npublic class SecurityException : Exception\n{\n    public SecurityException(string message) : base(message) { }\n}",
      "level": "HARD",
      "language": "CSHARP",
      "violation": "SRP",
       "description": "Blog post management system"
    },
    {
      "input": "using System;\nusing System.Collections.Generic;\nusing System.Collections.Concurrent;\nusing System.IO;\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Net.Mail;\nusing System.Text.RegularExpressions;\n\npublic class Product\n{\n    public string Id { get; set; }\n    public string Name { get; set; }\n    public int Quantity { get; set; }\n    public double Price { get; set; }\n    public string SupplierId { get; set; }\n    public int MinThreshold { get; set; }\n    public DateTime LastUpdated { get; set; }\n\n    public Product(string id, string name, int quantity, double price, string supplierId, int minThreshold, DateTime lastUpdated)\n    {\n        Id = id;\n        Name = name;\n        Quantity = quantity;\n        Price = price;\n        SupplierId = supplierId;\n        MinThreshold = minThreshold;\n        LastUpdated = lastUpdated;\n    }\n}\n\npublic class User\n{\n    public string Username { get; set; }\n    public string PasswordHash { get; set; }\n    public List<string> Permissions { get; set; }\n\n    public User(string username, string passwordHash, List<string> permissions)\n    {\n        Username = username;\n        PasswordHash = passwordHash;\n        Permissions = permissions;\n    }\n}\n\npublic class Supplier\n{\n    public string Id { get; set; }\n    public string Name { get; set; }\n    public string Email { get; set; }\n    public string Phone { get; set; }\n\n    public Supplier(string id, string name, string email, string phone)\n    {\n        Id = id;\n        Name = name;\n        Email = email;\n        Phone = phone;\n    }\n}\n\npublic class StockAlert\n{\n    public string ProductId { get; set; }\n    public string ProductName { get; set; }\n    public int CurrentStock { get; set; }\n    public int MinThreshold { get; set; }\n\n    public StockAlert(string productId, string productName, int currentStock, int minThreshold)\n    {\n        ProductId = productId;\n        ProductName = productName;\n        CurrentStock = currentStock;\n        MinThreshold = minThreshold;\n    }\n}\n\npublic class InventoryManager\n{\n    private readonly ConcurrentDictionary<string, Product> _products = new ConcurrentDictionary<string, Product>();\n    private readonly ConcurrentDictionary<string, Supplier> _suppliers = new ConcurrentDictionary<string, Supplier>();\n    private readonly ConcurrentDictionary<string, User> _users = new ConcurrentDictionary<string, User>();\n    private readonly List<StockAlert> _alerts = new List<StockAlert>();\n    private readonly Dictionary<string, string> _emailConfig = new Dictionary<string, string>();\n\n    public InventoryManager()\n    {\n        InitializeUsers();\n        SetupEmailConfiguration();\n        LoadDataFromFiles();\n    }\n\n    public void AddProduct(string username, string password, string productId, string name,\n                          int quantity, double price, string supplierId, int minThreshold)\n    {\n        if (!AuthenticateUser(username, password))\n        {\n            throw new UnauthorizedAccessException(\"Authentication failed\");\n        }\n\n        if (!HasPermission(username, \"ADD_PRODUCT\"))\n        {\n            throw new UnauthorizedAccessException(\"Insufficient permissions\");\n        }\n\n        if (!ValidateProductData(productId, name, quantity, price, supplierId, minThreshold))\n        {\n            throw new ArgumentException(\"Invalid product data\");\n        }\n\n        if (_products.ContainsKey(productId))\n        {\n            throw new ArgumentException(\"Product already exists\");\n        }\n\n        if (!_suppliers.TryGetValue(supplierId, out Supplier supplier))\n        {\n            throw new ArgumentException(\"Supplier not found\");\n        }\n\n        var product = new Product(productId, SanitizeName(name), quantity, price,\n                                 supplierId, minThreshold, DateTime.Now);\n        _products[productId] = product;\n\n        if (quantity <= minThreshold)\n        {\n            CreateLowStockAlert(product);\n        }\n\n        UpdateInventoryFile();\n        LogActivity(username, \"PRODUCT_ADDED\", productId);\n        SendSupplierNotification(supplier, $\"New product added: {name}\");\n\n        Console.WriteLine($\"Product added: {productId}\");\n    }\n\n    public void UpdateStock(string username, string password, string productId,\n                           int newQuantity, string reason)\n    {\n        if (!AuthenticateUser(username, password))\n        {\n            throw new UnauthorizedAccessException(\"Authentication failed\");\n        }\n\n        if (!HasPermission(username, \"UPDATE_STOCK\"))\n        {\n            throw new UnauthorizedAccessException(\"Insufficient permissions\");\n        }\n\n        if (!_products.TryGetValue(productId, out Product product))\n        {\n            throw new ArgumentException(\"Product not found\");\n        }\n\n        if (newQuantity < 0)\n        {\n            throw new ArgumentException(\"Quantity cannot be negative\");\n        }\n\n        int oldQuantity = product.Quantity;\n        product.Quantity = newQuantity;\n        product.LastUpdated = DateTime.Now;\n\n        if (newQuantity <= product.MinThreshold && oldQuantity > product.MinThreshold)\n        {\n            CreateLowStockAlert(product);\n        }\n\n        if (newQuantity > product.MinThreshold)\n        {\n            RemoveLowStockAlert(productId);\n        }\n\n        UpdateInventoryFile();\n        LogActivity(username, \"STOCK_UPDATED\", $\"{productId} from {oldQuantity} to {newQuantity}\");\n\n        if (Math.Abs(newQuantity - oldQuantity) > 100)\n        {\n            SendManagerAlert($\"Large stock change for {product.Name}: {oldQuantity} -> {newQuantity}. Reason: {reason}\");\n        }\n\n        Console.WriteLine($\"Stock updated for {productId}: {newQuantity}\");\n    }\n\n    public void GenerateReport(string username, string password, string reportType)\n    {\n        if (!AuthenticateUser(username, password))\n        {\n            throw new UnauthorizedAccessException(\"Authentication failed\");\n        }\n\n        if (!HasPermission(username, \"GENERATE_REPORTS\"))\n        {\n            throw new UnauthorizedAccessException(\"Insufficient permissions\");\n        }\n\n        try\n        {\n            string filename = $\"{reportType}_report_{DateTime.Now.ToString().Replace(\":\", \"-\")}.txt\";\n            using (var writer = new StreamWriter(filename))\n            {\n                switch (reportType)\n                {\n                    case \"inventory\":\n                        GenerateInventoryReport(writer);\n                        break;\n                    case \"alerts\":\n                        GenerateAlertsReport(writer);\n                        break;\n                    case \"suppliers\":\n                        GenerateSuppliersReport(writer);\n                        break;\n                    default:\n                        throw new ArgumentException($\"Unknown report type: {reportType}\");\n                }\n            }\n\n            LogActivity(username, \"REPORT_GENERATED\", reportType);\n            Console.WriteLine($\"Report generated: {filename}\");\n        }\n        catch (IOException ex)\n        {\n            throw new InvalidOperationException(\"Failed to generate report\", ex);\n        }\n    }\n\n    private void InitializeUsers()\n    {\n        _users[\"admin\"] = new User(\"admin\", HashPassword(\"admin123\"),\n                                  new List<string> { \"ADD_PRODUCT\", \"UPDATE_STOCK\", \"GENERATE_REPORTS\", \"MANAGE_SUPPLIERS\" });\n        _users[\"manager\"] = new User(\"manager\", HashPassword(\"mgr123\"),\n                                    new List<string> { \"UPDATE_STOCK\", \"GENERATE_REPORTS\" });\n        _users[\"clerk\"] = new User(\"clerk\", HashPassword(\"clerk123\"),\n                                  new List<string> { \"UPDATE_STOCK\" });\n\n        _suppliers[\"SUP001\"] = new Supplier(\"SUP001\", \"TechCorp\", \"tech@corp.com\", \"123-456-7890\");\n        _suppliers[\"SUP002\"] = new Supplier(\"SUP002\", \"OfficeSupply\", \"orders@office.com\", \"987-654-3210\");\n    }\n\n    private void SetupEmailConfiguration()\n    {\n        _emailConfig[\"smtp.host\"] = \"smtp.company.com\";\n        _emailConfig[\"smtp.port\"] = \"587\";\n        _emailConfig[\"smtp.enableSsl\"] = \"true\";\n    }\n\n    private bool AuthenticateUser(string username, string password)\n    {\n        if (_users.TryGetValue(username, out User user))\n        {\n            return user.PasswordHash == HashPassword(password);\n        }\n        return false;\n    }\n\n    private bool HasPermission(string username, string permission)\n    {\n        if (_users.TryGetValue(username, out User user))\n        {\n            return user.Permissions.Contains(permission);\n        }\n        return false;\n    }\n\n    private string HashPassword(string password)\n    {\n        try\n        {\n            using (var sha256 = SHA256.Create())\n            {\n                byte[] hash = sha256.ComputeHash(Encoding.UTF8.GetBytes(password));\n                return Convert.ToBase64String(hash);\n            }\n        }\n        catch (Exception ex)\n        {\n            throw new InvalidOperationException(\"Password hashing failed\", ex);\n        }\n    }\n\n    private bool ValidateProductData(string productId, string name, int quantity,\n                                    double price, string supplierId, int minThreshold)\n    {\n        return !string.IsNullOrWhiteSpace(productId) &&\n               !string.IsNullOrWhiteSpace(name) &&\n               quantity >= 0 && price >= 0 && minThreshold >= 0 &&\n               !string.IsNullOrWhiteSpace(supplierId);\n    }\n\n    private string SanitizeName(string name)\n    {\n        return Regex.Replace(name, @\"[<>\"\"'&]\", \"\").Trim();\n    }\n\n    private void CreateLowStockAlert(Product product)\n    {\n        var alert = new StockAlert(product.Id, product.Name, product.Quantity, product.MinThreshold);\n        _alerts.Add(alert);\n\n        string message = $\"LOW STOCK ALERT: {product.Name} ({product.Id}) \" +\n                        $\"has only {product.Quantity} units remaining. \" +\n                        $\"Minimum threshold: {product.MinThreshold}\";\n\n        SendManagerAlert(message);\n\n        if (_suppliers.TryGetValue(product.SupplierId, out Supplier supplier))\n        {\n            SendSupplierNotification(supplier, $\"Reorder needed for: {product.Name}\");\n        }\n    }\n\n    private void RemoveLowStockAlert(string productId)\n    {\n        _alerts.RemoveAll(alert => alert.ProductId == productId);\n    }\n\n    private void SendManagerAlert(string message)\n    {\n        try\n        {\n            // Email sending logic would go here\n            Console.WriteLine($\"Manager alert sent: {message}\");\n        }\n        catch (Exception ex)\n        {\n            Console.Error.WriteLine($\"Failed to send manager alert: {ex.Message}\");\n        }\n    }\n\n    private void SendSupplierNotification(Supplier supplier, string message)\n    {\n        try\n        {\n            // Email sending logic would go here\n            Console.WriteLine($\"Supplier notification sent to {supplier.Name}: {message}\");\n        }\n        catch (Exception ex)\n        {\n            Console.Error.WriteLine($\"Failed to send supplier notification: {ex.Message}\");\n        }\n    }\n\n    private void GenerateInventoryReport(StreamWriter writer)\n    {\n        writer.WriteLine(\"INVENTORY REPORT\");\n        writer.WriteLine($\"Generated: {DateTime.Now}\\n\");\n\n        foreach (var product in _products.Values)\n        {\n            writer.WriteLine($\"Product: {product.Name} ({product.Id})\");\n            writer.WriteLine($\"Quantity: {product.Quantity}\");\n            writer.WriteLine($\"Price: ${product.Price}\");\n            if (_suppliers.TryGetValue(product.SupplierId, out Supplier supplier))\n            {\n                writer.WriteLine($\"Supplier: {supplier.Name}\\n\");\n            }\n        }\n    }\n\n    private void GenerateAlertsReport(StreamWriter writer)\n    {\n        writer.WriteLine(\"STOCK ALERTS REPORT\");\n        writer.WriteLine($\"Generated: {DateTime.Now}\\n\");\n\n        foreach (var alert in _alerts)\n        {\n            writer.WriteLine($\"Alert: {alert.ProductName} ({alert.ProductId})\");\n            writer.WriteLine($\"Current Stock: {alert.CurrentStock}\");\n            writer.WriteLine($\"Minimum Threshold: {alert.MinThreshold}\\n\");\n        }\n    }\n\n    private void GenerateSuppliersReport(StreamWriter writer)\n    {\n        writer.WriteLine(\"SUPPLIERS REPORT\");\n        writer.WriteLine($\"Generated: {DateTime.Now}\\n\");\n\n        foreach (var supplier in _suppliers.Values)\n        {\n            writer.WriteLine($\"Supplier: {supplier.Name} ({supplier.Id})\");\n            writer.WriteLine($\"Email: {supplier.Email}\");\n            writer.WriteLine($\"Phone: {supplier.Phone}\\n\");\n        }\n    }\n\n    private void UpdateInventoryFile()\n    {\n        try\n        {\n            using (var writer = new StreamWriter(\"inventory.dat\"))\n            {\n                foreach (var product in _products.Values)\n                {\n                    writer.WriteLine($\"{product.Id}|{product.Name}|{product.Quantity}|{product.Price}|{product.SupplierId}|{product.MinThreshold}\");\n                }\n            }\n        }\n        catch (IOException ex)\n        {\n            Console.Error.WriteLine($\"Failed to update inventory file: {ex.Message}\");\n        }\n    }\n\n    private void LoadDataFromFiles()\n    {\n        try\n        {\n            if (File.Exists(\"inventory.dat\"))\n            {\n                string[] lines = File.ReadAllLines(\"inventory.dat\");\n                foreach (string line in lines)\n                {\n                    string[] parts = line.Split('|');\n                    if (parts.Length == 6)\n                    {\n                        var product = new Product(parts[0], parts[1],\n                                                 int.Parse(parts[2]),\n                                                 double.Parse(parts[3]),\n                                                 parts[4], int.Parse(parts[5]),\n                                                 DateTime.Now);\n                        _products[product.Id] = product;\n                    }\n                }\n            }\n        }\n        catch (Exception ex)\n        {\n            Console.Error.WriteLine($\"Failed to load inventory data: {ex.Message}\");\n        }\n    }\n\n    private void LogActivity(string username, string action, string details)\n    {\n        try\n        {\n            using (var writer = new StreamWriter(\"inventory_log.txt\", true))\n            {\n                writer.WriteLine($\"{DateTime.Now} - User: {username}, Action: {action}, Details: {details}\");\n            }\n        }\n        catch (IOException ex)\n        {\n            Console.Error.WriteLine($\"Failed to log activity: {ex.Message}\");\n        }\n    }\n}",
      "output": "using System;\nusing System.Collections.Generic;\nusing System.Collections.Concurrent;\nusing System.IO;\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Net.Mail;\nusing System.Text.RegularExpressions;\nusing System.Linq;\n\npublic class Product\n{\n    public string Id { get; set; }\n    public string Name { get; set; }\n    public int Quantity { get; set; }\n    public double Price { get; set; }\n    public string SupplierId { get; set; }\n    public int MinThreshold { get; set; }\n    public DateTime LastUpdated { get; set; }\n\n    public Product(string id, string name, int quantity, double price, string supplierId, int minThreshold, DateTime lastUpdated)\n    {\n        Id = id;\n        Name = name;\n        Quantity = quantity;\n        Price = price;\n        SupplierId = supplierId;\n        MinThreshold = minThreshold;\n        LastUpdated = lastUpdated;\n    }\n}\n\npublic class User\n{\n    public string Username { get; set; }\n    public string PasswordHash { get; set; }\n    public List<string> Permissions { get; set; }\n\n    public User(string username, string passwordHash, List<string> permissions)\n    {\n        Username = username;\n        PasswordHash = passwordHash;\n        Permissions = permissions;\n    }\n}\n\npublic class Supplier\n{\n    public string Id { get; set; }\n    public string Name { get; set; }\n    public string Email { get; set; }\n    public string Phone { get; set; }\n\n    public Supplier(string id, string name, string email, string phone)\n    {\n        Id = id;\n        Name = name;\n        Email = email;\n        Phone = phone;\n    }\n}\n\npublic class StockAlert\n{\n    public string ProductId { get; set; }\n    public string ProductName { get; set; }\n    public int CurrentStock { get; set; }\n    public int MinThreshold { get; set; }\n\n    public StockAlert(string productId, string productName, int currentStock, int minThreshold)\n    {\n        ProductId = productId;\n        ProductName = productName;\n        CurrentStock = currentStock;\n        MinThreshold = minThreshold;\n    }\n}\n\npublic class InventoryService\n{\n    private readonly ConcurrentDictionary<string, Product> _products = new ConcurrentDictionary<string, Product>();\n    private readonly IAuthenticationService _authService;\n    private readonly IProductValidator _productValidator;\n    private readonly IStockAlertManager _alertManager;\n    private readonly INotificationService _notificationService;\n    private readonly IReportGenerator _reportGenerator;\n    private readonly IInventoryPersistence _inventoryPersistence;\n    private readonly IActivityLogger _activityLogger;\n\n    public InventoryService(\n        IAuthenticationService authService,\n        IProductValidator productValidator,\n        IStockAlertManager alertManager,\n        INotificationService notificationService,\n        IReportGenerator reportGenerator,\n        IInventoryPersistence inventoryPersistence,\n        IActivityLogger activityLogger)\n    {\n        _authService = authService;\n        _productValidator = productValidator;\n        _alertManager = alertManager;\n        _notificationService = notificationService;\n        _reportGenerator = reportGenerator;\n        _inventoryPersistence = inventoryPersistence;\n        _activityLogger = activityLogger;\n\n        LoadExistingData();\n    }\n\n    public void AddProduct(string username, string password, string productId, string name,\n                          int quantity, double price, string supplierId, int minThreshold)\n    {\n        _authService.Authenticate(username, password);\n        _authService.CheckPermission(username, \"ADD_PRODUCT\");\n\n        _productValidator.ValidateProductData(productId, name, quantity, price, supplierId, minThreshold);\n\n        if (_products.ContainsKey(productId))\n        {\n            throw new ArgumentException(\"Product already exists\");\n        }\n\n        var product = new Product(productId, _productValidator.SanitizeName(name), quantity, price,\n                                 supplierId, minThreshold, DateTime.Now);\n        _products[productId] = product;\n\n        _alertManager.CheckAndCreateAlert(product);\n        _inventoryPersistence.SaveInventory(_products.Values);\n        _activityLogger.LogActivity(username, \"PRODUCT_ADDED\", productId);\n        _notificationService.NotifySupplierOfNewProduct(supplierId, name);\n\n        Console.WriteLine($\"Product added: {productId}\");\n    }\n\n    public void UpdateStock(string username, string password, string productId,\n                           int newQuantity, string reason)\n    {\n        _authService.Authenticate(username, password);\n        _authService.CheckPermission(username, \"UPDATE_STOCK\");\n\n        var product = GetProductById(productId);\n        _productValidator.ValidateQuantity(newQuantity);\n\n        int oldQuantity = product.Quantity;\n        product.Quantity = newQuantity;\n        product.LastUpdated = DateTime.Now;\n\n        _alertManager.HandleStockChange(product, oldQuantity);\n        _inventoryPersistence.SaveInventory(_products.Values);\n        _activityLogger.LogActivity(username, \"STOCK_UPDATED\", $\"{productId} from {oldQuantity} to {newQuantity}\");\n\n        if (Math.Abs(newQuantity - oldQuantity) > 100)\n        {\n            _notificationService.SendLargeStockChangeAlert(product, oldQuantity, newQuantity, reason);\n        }\n\n        Console.WriteLine($\"Stock updated for {productId}: {newQuantity}\");\n    }\n\n    public void GenerateReport(string username, string password, string reportType)\n    {\n        _authService.Authenticate(username, password);\n        _authService.CheckPermission(username, \"GENERATE_REPORTS\");\n\n        string filename = _reportGenerator.GenerateReport(reportType, _products.Values, _alertManager.GetAlerts());\n        _activityLogger.LogActivity(username, \"REPORT_GENERATED\", reportType);\n\n        Console.WriteLine($\"Report generated: {filename}\");\n    }\n\n    private Product GetProductById(string productId)\n    {\n        if (!_products.TryGetValue(productId, out Product product))\n        {\n            throw new ArgumentException(\"Product not found\");\n        }\n        return product;\n    }\n\n    private void LoadExistingData()\n    {\n        var loadedProducts = _inventoryPersistence.LoadInventory();\n        foreach (var product in loadedProducts)\n        {\n            _products[product.Id] = product;\n            _alertManager.CheckAndCreateAlert(product);\n        }\n    }\n}\n\npublic interface IAuthenticationService\n{\n    void Authenticate(string username, string password);\n    void CheckPermission(string username, string permission);\n    Supplier GetSupplier(string supplierId);\n}\n\npublic class AuthenticationService : IAuthenticationService\n{\n    private readonly ConcurrentDictionary<string, User> _users = new ConcurrentDictionary<string, User>();\n    private readonly ConcurrentDictionary<string, Supplier> _suppliers = new ConcurrentDictionary<string, Supplier>();\n\n    public AuthenticationService()\n    {\n        InitializeUsers();\n    }\n\n    public void Authenticate(string username, string password)\n    {\n        if (!AuthenticateUser(username, password))\n        {\n            throw new UnauthorizedAccessException(\"Authentication failed\");\n        }\n    }\n\n    public void CheckPermission(string username, string permission)\n    {\n        if (!HasPermission(username, permission))\n        {\n            throw new UnauthorizedAccessException(\"Insufficient permissions\");\n        }\n    }\n\n    public Supplier GetSupplier(string supplierId)\n    {\n        _suppliers.TryGetValue(supplierId, out Supplier supplier);\n        return supplier;\n    }\n\n    private void InitializeUsers()\n    {\n        _users[\"admin\"] = new User(\"admin\", PasswordUtil.HashPassword(\"admin123\"),\n                                  new List<string> { \"ADD_PRODUCT\", \"UPDATE_STOCK\", \"GENERATE_REPORTS\", \"MANAGE_SUPPLIERS\" });\n        _users[\"manager\"] = new User(\"manager\", PasswordUtil.HashPassword(\"mgr123\"),\n                                    new List<string> { \"UPDATE_STOCK\", \"GENERATE_REPORTS\" });\n        _users[\"clerk\"] = new User(\"clerk\", PasswordUtil.HashPassword(\"clerk123\"),\n                                  new List<string> { \"UPDATE_STOCK\" });\n\n        _suppliers[\"SUP001\"] = new Supplier(\"SUP001\", \"TechCorp\", \"tech@corp.com\", \"123-456-7890\");\n        _suppliers[\"SUP002\"] = new Supplier(\"SUP002\", \"OfficeSupply\", \"orders@office.com\", \"987-654-3210\");\n    }\n\n    private bool AuthenticateUser(string username, string password)\n    {\n        if (_users.TryGetValue(username, out User user))\n        {\n            return user.PasswordHash == PasswordUtil.HashPassword(password);\n        }\n        return false;\n    }\n\n    private bool HasPermission(string username, string permission)\n    {\n        if (_users.TryGetValue(username, out User user))\n        {\n            return user.Permissions.Contains(permission);\n        }\n        return false;\n    }\n}\n\npublic interface IProductValidator\n{\n    void ValidateProductData(string productId, string name, int quantity, double price, string supplierId, int minThreshold);\n    void ValidateQuantity(int quantity);\n    string SanitizeName(string name);\n}\n\npublic class ProductValidator : IProductValidator\n{\n    public void ValidateProductData(string productId, string name, int quantity,\n                                   double price, string supplierId, int minThreshold)\n    {\n        if (string.IsNullOrWhiteSpace(productId))\n            throw new ArgumentException(\"Product ID cannot be empty\");\n        if (string.IsNullOrWhiteSpace(name))\n            throw new ArgumentException(\"Product name cannot be empty\");\n        if (quantity < 0 || price < 0 || minThreshold < 0)\n            throw new ArgumentException(\"Quantity, price, and threshold must be non-negative\");\n        if (string.IsNullOrWhiteSpace(supplierId))\n            throw new ArgumentException(\"Supplier ID cannot be empty\");\n    }\n\n    public void ValidateQuantity(int quantity)\n    {\n        if (quantity < 0)\n        {\n            throw new ArgumentException(\"Quantity cannot be negative\");\n        }\n    }\n\n    public string SanitizeName(string name)\n    {\n        return Regex.Replace(name, @\"[<>\"\"'&]\", \"\").Trim();\n    }\n}\n\npublic interface IStockAlertManager\n{\n    void CheckAndCreateAlert(Product product);\n    void HandleStockChange(Product product, int oldQuantity);\n    List<StockAlert> GetAlerts();\n}\n\npublic class StockAlertManager : IStockAlertManager\n{\n    private readonly List<StockAlert> _alerts = new List<StockAlert>();\n    private readonly INotificationService _notificationService;\n\n    public StockAlertManager(INotificationService notificationService)\n    {\n        _notificationService = notificationService;\n    }\n\n    public void CheckAndCreateAlert(Product product)\n    {\n        if (product.Quantity <= product.MinThreshold)\n        {\n            CreateLowStockAlert(product);\n        }\n    }\n\n    public void HandleStockChange(Product product, int oldQuantity)\n    {\n        if (product.Quantity <= product.MinThreshold && oldQuantity > product.MinThreshold)\n        {\n            CreateLowStockAlert(product);\n        }\n\n        if (product.Quantity > product.MinThreshold)\n        {\n            RemoveLowStockAlert(product.Id);\n        }\n    }\n\n    public List<StockAlert> GetAlerts()\n    {\n        return new List<StockAlert>(_alerts);\n    }\n\n    private void CreateLowStockAlert(Product product)\n    {\n        var alert = new StockAlert(product.Id, product.Name, product.Quantity, product.MinThreshold);\n        _alerts.Add(alert);\n        _notificationService.SendLowStockAlert(product);\n    }\n\n    private void RemoveLowStockAlert(string productId)\n    {\n        _alerts.RemoveAll(alert => alert.ProductId == productId);\n    }\n}\n\npublic interface INotificationService\n{\n    void SendLowStockAlert(Product product);\n    void SendLargeStockChangeAlert(Product product, int oldQuantity, int newQuantity, string reason);\n    void NotifySupplierOfNewProduct(string supplierId, string productName);\n}\n\npublic class NotificationService : INotificationService\n{\n    private readonly IAuthenticationService _authService;\n    private readonly Dictionary<string, string> _emailConfig = new Dictionary<string, string>();\n\n    public NotificationService(IAuthenticationService authService)\n    {\n        _authService = authService;\n        SetupEmailConfiguration();\n    }\n\n    public void SendLowStockAlert(Product product)\n    {\n        string message = $\"LOW STOCK ALERT: {product.Name} ({product.Id}) \" +\n                        $\"has only {product.Quantity} units remaining. \" +\n                        $\"Minimum threshold: {product.MinThreshold}\";\n\n        SendManagerAlert(message);\n        NotifySupplierOfReorder(product.SupplierId, product.Name);\n    }\n\n    public void SendLargeStockChangeAlert(Product product, int oldQuantity, int newQuantity, string reason)\n    {\n        string message = $\"Large stock change for {product.Name}: {oldQuantity} -> {newQuantity}. Reason: {reason}\";\n        SendManagerAlert(message);\n    }\n\n    public void NotifySupplierOfNewProduct(string supplierId, string productName)\n    {\n        var supplier = _authService.GetSupplier(supplierId);\n        if (supplier != null)\n        {\n            SendSupplierNotification(supplier, $\"New product added: {productName}\");\n        }\n    }\n\n    private void NotifySupplierOfReorder(string supplierId, string productName)\n    {\n        var supplier = _authService.GetSupplier(supplierId);\n        if (supplier != null)\n        {\n            SendSupplierNotification(supplier, $\"Reorder needed for: {productName}\");\n        }\n    }\n\n    private void SetupEmailConfiguration()\n    {\n        _emailConfig[\"smtp.host\"] = \"smtp.company.com\";\n        _emailConfig[\"smtp.port\"] = \"587\";\n        _emailConfig[\"smtp.enableSsl\"] = \"true\";\n    }\n\n    private void SendManagerAlert(string message)\n    {\n        try\n        {\n            // Email sending logic would go here\n            Console.WriteLine($\"Manager alert sent: {message}\");\n        }\n        catch (Exception ex)\n        {\n            Console.Error.WriteLine($\"Failed to send manager alert: {ex.Message}\");\n        }\n    }\n\n    private void SendSupplierNotification(Supplier supplier, string message)\n    {\n        try\n        {\n            // Email sending logic would go here\n            Console.WriteLine($\"Supplier notification sent to {supplier.Name}: {message}\");\n        }\n        catch (Exception ex)\n        {\n            Console.Error.WriteLine($\"Failed to send supplier notification: {ex.Message}\");\n        }\n    }\n}\n\npublic interface IReportGenerator\n{\n    string GenerateReport(string reportType, IEnumerable<Product> products, List<StockAlert> alerts);\n}\n\npublic class ReportGenerator : IReportGenerator\n{\n    public string GenerateReport(string reportType, IEnumerable<Product> products, List<StockAlert> alerts)\n    {\n        try\n        {\n            string filename = $\"{reportType}_report_{DateTime.Now.ToString().Replace(\":\", \"-\")}.txt\";\n\n            using (var writer = new StreamWriter(filename))\n            {\n                switch (reportType)\n                {\n                    case \"inventory\":\n                        GenerateInventoryReport(writer, products);\n                        break;\n                    case \"alerts\":\n                        GenerateAlertsReport(writer, alerts);\n                        break;\n                    case \"suppliers\":\n                        GenerateSuppliersReport(writer);\n                        break;\n                    default:\n                        throw new ArgumentException($\"Unknown report type: {reportType}\");\n                }\n            }\n\n            return filename;\n        }\n        catch (IOException ex)\n        {\n            throw new InvalidOperationException(\"Failed to generate report\", ex);\n        }\n    }\n\n    private void GenerateInventoryReport(StreamWriter writer, IEnumerable<Product> products)\n    {\n        writer.WriteLine(\"INVENTORY REPORT\");\n        writer.WriteLine($\"Generated: {DateTime.Now}\\n\");\n\n        foreach (var product in products)\n        {\n            writer.WriteLine($\"Product: {product.Name} ({product.Id})\");\n            writer.WriteLine($\"Quantity: {product.Quantity}\");\n            writer.WriteLine($\"Price: ${product.Price}\\n\");\n        }\n    }\n\n    private void GenerateAlertsReport(StreamWriter writer, List<StockAlert> alerts)\n    {\n        writer.WriteLine(\"STOCK ALERTS REPORT\");\n        writer.WriteLine($\"Generated: {DateTime.Now}\\n\");\n\n        foreach (var alert in alerts)\n        {\n            writer.WriteLine($\"Alert: {alert.ProductName} ({alert.ProductId})\");\n            writer.WriteLine($\"Current Stock: {alert.CurrentStock}\");\n            writer.WriteLine($\"Minimum Threshold: {alert.MinThreshold}\\n\");\n        }\n    }\n\n    private void GenerateSuppliersReport(StreamWriter writer)\n    {\n        writer.WriteLine(\"SUPPLIERS REPORT\");\n        writer.WriteLine($\"Generated: {DateTime.Now}\\n\");\n        writer.WriteLine(\"Report generation completed.\\n\");\n    }\n}\n\npublic interface IInventoryPersistence\n{\n    void SaveInventory(IEnumerable<Product> products);\n    List<Product> LoadInventory();\n}\n\npublic class InventoryPersistence : IInventoryPersistence\n{\n    public void SaveInventory(IEnumerable<Product> products)\n    {\n        try\n        {\n            using (var writer = new StreamWriter(\"inventory.dat\"))\n            {\n                foreach (var product in products)\n                {\n                    writer.WriteLine($\"{product.Id}|{product.Name}|{product.Quantity}|{product.Price}|{product.SupplierId}|{product.MinThreshold}\");\n                }\n            }\n        }\n        catch (IOException ex)\n        {\n            throw new InvalidOperationException(\"Failed to save inventory\", ex);\n        }\n    }\n\n    public List<Product> LoadInventory()\n    {\n        var products = new List<Product>();\n        try\n        {\n            if (File.Exists(\"inventory.dat\"))\n            {\n                string[] lines = File.ReadAllLines(\"inventory.dat\");\n                foreach (string line in lines)\n                {\n                    string[] parts = line.Split('|');\n                    if (parts.Length == 6)\n                    {\n                        var product = new Product(parts[0], parts[1],\n                                                 int.Parse(parts[2]),\n                                                 double.Parse(parts[3]),\n                                                 parts[4], int.Parse(parts[5]),\n                                                 DateTime.Now);\n                        products.Add(product);\n                    }\n                }\n            }\n        }\n        catch (Exception ex)\n        {\n            Console.Error.WriteLine($\"Failed to load inventory data: {ex.Message}\");\n        }\n        return products;\n    }\n}\n\npublic interface IActivityLogger\n{\n    void LogActivity(string username, string action, string details);\n}\n\npublic class ActivityLogger : IActivityLogger\n{\n    public void LogActivity(string username, string action, string details)\n    {\n        try\n        {\n            using (var writer = new StreamWriter(\"inventory_log.txt\", true))\n            {\n                writer.WriteLine($\"{DateTime.Now} - User: {username}, Action: {action}, Details: {details}\");\n            }\n        }\n        catch (IOException ex)\n        {\n            throw new InvalidOperationException(\"Failed to log activity\", ex);\n        }\n    }\n}\n\npublic static class PasswordUtil\n{\n    public static string HashPassword(string password)\n    {\n        try\n        {\n            using (var sha256 = SHA256.Create())\n            {\n                byte[] hash = sha256.ComputeHash(Encoding.UTF8.GetBytes(password));\n                return Convert.ToBase64String(hash);\n            }\n        }\n        catch (Exception ex)\n        {\n            throw new InvalidOperationException(\"Password hashing failed\", ex);\n        }\n    }\n}",
      "level": "HARD",
      "language": "CSHARP",
      "violation": "SRP",
       "description": "Inventory stock management system"
    },
    {
      "input": "using System;\nusing System.Collections.Concurrent;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\n\npublic class User\n{\n    public string Email { get; set; }\n    public string Name { get; set; }\n    public string PasswordHash { get; set; }\n    public List<string> Permissions { get; set; }\n    \n    public User(string email, string name, string passwordHash, List<string> permissions)\n    {\n        Email = email;\n        Name = name;\n        PasswordHash = passwordHash;\n        Permissions = permissions;\n    }\n}\n\npublic class Event\n{\n    public string EventId { get; set; }\n    public string EventName { get; set; }\n    public string Description { get; set; }\n    public string Venue { get; set; }\n    public DateTime StartTime { get; set; }\n    public DateTime EndTime { get; set; }\n    public double TicketPrice { get; set; }\n    public int MaxCapacity { get; set; }\n    public string OrganizerEmail { get; set; }\n    \n    public Event(string eventId, string eventName, string description, string venue,\n                DateTime startTime, DateTime endTime, double ticketPrice, int maxCapacity, string organizerEmail)\n    {\n        EventId = eventId;\n        EventName = eventName;\n        Description = description;\n        Venue = venue;\n        StartTime = startTime;\n        EndTime = endTime;\n        TicketPrice = ticketPrice;\n        MaxCapacity = maxCapacity;\n        OrganizerEmail = organizerEmail;\n    }\n}\n\npublic class EventManagementSystem\n{\n    private readonly ConcurrentDictionary<string, Event> events = new ConcurrentDictionary<string, Event>();\n    private readonly ConcurrentDictionary<string, User> registeredUsers = new ConcurrentDictionary<string, User>();\n    private readonly ConcurrentDictionary<string, List<string>> eventRegistrations = new ConcurrentDictionary<string, List<string>>();\n    private readonly ConcurrentDictionary<string, double> eventRevenue = new ConcurrentDictionary<string, double>();\n    private readonly Random random = new Random();\n    private int eventIdCounter = 1000;\n    private readonly object counterLock = new object();\n    \n    public EventManagementSystem()\n    {\n        InitializeTestData();\n    }\n    \n    public void CreateEvent(string organizerEmail, string password, string eventName,\n                           string description, string venue, DateTime startTime,\n                           DateTime endTime, double ticketPrice, int maxCapacity)\n    {\n        if (!AuthenticateUser(organizerEmail, password))\n        {\n            throw new UnauthorizedAccessException(\"Invalid credentials\");\n        }\n        \n        User organizer = null;\n        registeredUsers.TryGetValue(organizerEmail, out organizer);\n        if (!HasPermission(organizer, \"CREATE_EVENT\"))\n        {\n            throw new UnauthorizedAccessException(\"User does not have permission to create events\");\n        }\n        \n        if (!ValidateEventData(eventName, description, venue, startTime, endTime, ticketPrice, maxCapacity))\n        {\n            throw new ArgumentException(\"Invalid event data provided\");\n        }\n        \n        string eventId = GenerateEventId();\n        Event eventObj = new Event(eventId, SanitizeInput(eventName), SanitizeInput(description),\n                                   SanitizeInput(venue), startTime, endTime, ticketPrice, maxCapacity, organizerEmail);\n        \n        events[eventId] = eventObj;\n        eventRegistrations[eventId] = new List<string>();\n        eventRevenue[eventId] = 0.0;\n        \n        SendEventCreationNotification(organizer, eventObj);\n        LogActivity(organizerEmail, \"EVENT_CREATED\", eventId + \" - \" + eventName);\n        UpdateEventWebsite(eventObj);\n        \n        Console.WriteLine(\"Event created: \" + eventId + \" - \" + eventName);\n    }\n    \n    public void RegisterForEvent(string userEmail, string password, string eventId, int numberOfTickets)\n    {\n        if (!AuthenticateUser(userEmail, password))\n        {\n            throw new UnauthorizedAccessException(\"Invalid credentials\");\n        }\n        \n        Event eventObj = null;\n        if (!events.TryGetValue(eventId, out eventObj))\n        {\n            throw new ArgumentException(\"Event not found\");\n        }\n        \n        if (eventObj.StartTime < DateTime.Now)\n        {\n            throw new ArgumentException(\"Cannot register for past events\");\n        }\n        \n        List<string> registrations = eventRegistrations[eventId];\n        if (registrations.Count + numberOfTickets > eventObj.MaxCapacity)\n        {\n            throw new ArgumentException(\"Not enough capacity available\");\n        }\n        \n        if (numberOfTickets <= 0 || numberOfTickets > 10)\n        {\n            throw new ArgumentException(\"Invalid number of tickets (1-10 allowed)\");\n        }\n        \n        double totalCost = eventObj.TicketPrice * numberOfTickets;\n        if (!ProcessPayment(userEmail, totalCost))\n        {\n            throw new InvalidOperationException(\"Payment processing failed\");\n        }\n        \n        lock (registrations)\n        {\n            for (int i = 0; i < numberOfTickets; i++)\n            {\n                registrations.Add(userEmail);\n            }\n        }\n        \n        eventRevenue[eventId] = eventRevenue[eventId] + totalCost;\n        \n        GenerateTickets(userEmail, eventObj, numberOfTickets);\n        SendRegistrationConfirmation(userEmail, eventObj, numberOfTickets, totalCost);\n        LogActivity(userEmail, \"REGISTERED_FOR_EVENT\", eventId + \" - \" + numberOfTickets + \" tickets\");\n        \n        if (registrations.Count >= eventObj.MaxCapacity)\n        {\n            SendEventFullNotification(eventObj);\n        }\n        \n        Console.WriteLine(\"User \" + userEmail + \" registered for event \" + eventId);\n    }\n    \n    public void GenerateEventReport(string organizerEmail, string password, string eventId)\n    {\n        if (!AuthenticateUser(organizerEmail, password))\n        {\n            throw new UnauthorizedAccessException(\"Invalid credentials\");\n        }\n        \n        Event eventObj = null;\n        if (!events.TryGetValue(eventId, out eventObj))\n        {\n            throw new ArgumentException(\"Event not found\");\n        }\n        \n        if (eventObj.OrganizerEmail != organizerEmail)\n        {\n            User user = null;\n            registeredUsers.TryGetValue(organizerEmail, out user);\n            if (!HasPermission(user, \"VIEW_ALL_REPORTS\"))\n            {\n                throw new UnauthorizedAccessException(\"No permission to view this event's report\");\n            }\n        }\n        \n        try\n        {\n            string filename = \"event_report_\" + eventId + \"_\" + DateTime.Now.ToString(\"yyyyMMdd_HHmmss\") + \".txt\";\n            \n            using (StreamWriter writer = new StreamWriter(filename))\n            {\n                writer.WriteLine(\"EVENT REPORT\");\n                writer.WriteLine(\"Event: \" + eventObj.EventName);\n                writer.WriteLine(\"Event ID: \" + eventId);\n                writer.WriteLine(\"Organizer: \" + eventObj.OrganizerEmail);\n                writer.WriteLine(\"Venue: \" + eventObj.Venue);\n                writer.WriteLine(\"Start Time: \" + eventObj.StartTime);\n                writer.WriteLine(\"Ticket Price: $\" + eventObj.TicketPrice);\n                writer.WriteLine(\"Max Capacity: \" + eventObj.MaxCapacity);\n                writer.WriteLine();\n                \n                List<string> registrations = eventRegistrations[eventId];\n                writer.WriteLine(\"Registrations: \" + registrations.Count);\n                writer.WriteLine(\"Revenue: $\" + eventRevenue[eventId]);\n                writer.WriteLine(\"Occupancy Rate: \" + String.Format(\"{0:F1}\", registrations.Count * 100.0 / eventObj.MaxCapacity) + \"%\");\n                writer.WriteLine();\n                \n                Dictionary<string, int> userTicketCounts = new Dictionary<string, int>();\n                foreach (string email in registrations)\n                {\n                    if (userTicketCounts.ContainsKey(email))\n                    {\n                        userTicketCounts[email] = userTicketCounts[email] + 1;\n                    }\n                    else\n                    {\n                        userTicketCounts[email] = 1;\n                    }\n                }\n                \n                writer.WriteLine(\"Registered Users:\");\n                foreach (KeyValuePair<string, int> entry in userTicketCounts)\n                {\n                    writer.WriteLine(\"- \" + entry.Key + \": \" + entry.Value + \" ticket(s)\");\n                }\n            }\n            \n            LogActivity(organizerEmail, \"REPORT_GENERATED\", eventId);\n            SendReportNotification(organizerEmail, filename);\n            \n            Console.WriteLine(\"Report generated: \" + filename);\n        }\n        catch (IOException e)\n        {\n            throw new InvalidOperationException(\"Failed to generate report: \" + e.Message);\n        }\n    }\n    \n    private void InitializeTestData()\n    {\n        registeredUsers[\"organizer@company.com\"] = new User(\n            \"organizer@company.com\", \"John Organizer\", HashPassword(\"org123\"),\n            new List<string> { \"CREATE_EVENT\", \"VIEW_ALL_REPORTS\" });\n        registeredUsers[\"admin@company.com\"] = new User(\n            \"admin@company.com\", \"Admin User\", HashPassword(\"admin123\"),\n            new List<string> { \"CREATE_EVENT\", \"VIEW_ALL_REPORTS\" });\n        registeredUsers[\"user@company.com\"] = new User(\n            \"user@company.com\", \"Regular User\", HashPassword(\"user123\"),\n            new List<string>());\n    }\n    \n    private bool AuthenticateUser(string email, string password)\n    {\n        User user = null;\n        registeredUsers.TryGetValue(email, out user);\n        return user != null && user.PasswordHash == HashPassword(password);\n    }\n    \n    private bool HasPermission(User user, string permission)\n    {\n        return user != null && user.Permissions.Contains(permission);\n    }\n    \n    private string HashPassword(string password)\n    {\n        return \"hashed_\" + password;\n    }\n    \n    private bool ValidateEventData(string eventName, string description, string venue,\n                                  DateTime startTime, DateTime endTime, double ticketPrice, int maxCapacity)\n    {\n        return !string.IsNullOrWhiteSpace(eventName) &&\n               !string.IsNullOrWhiteSpace(description) &&\n               !string.IsNullOrWhiteSpace(venue) &&\n               startTime < endTime &&\n               startTime > DateTime.Now &&\n               ticketPrice >= 0 &&\n               maxCapacity > 0;\n    }\n    \n    private string SanitizeInput(string input)\n    {\n        if (string.IsNullOrEmpty(input)) return string.Empty;\n        return Regex.Replace(input, @\"[<>\\\"'&]\", \"\").Trim();\n    }\n    \n    private string GenerateEventId()\n    {\n        lock (counterLock)\n        {\n            return \"EVT\" + (eventIdCounter++);\n        }\n    }\n    \n    private bool ProcessPayment(string userEmail, double amount)\n    {\n        Console.WriteLine(\"Processing payment of $\" + amount + \" for user \" + userEmail);\n        return random.NextDouble() > 0.1;\n    }\n    \n    private void GenerateTickets(string userEmail, Event eventObj, int numberOfTickets)\n    {\n        try\n        {\n            string filename = \"tickets_\" + userEmail.Replace(\"@\", \"_\") + \"_\" + eventObj.EventId + \".txt\";\n            using (StreamWriter writer = new StreamWriter(filename))\n            {\n                for (int i = 1; i <= numberOfTickets; i++)\n                {\n                    writer.WriteLine(\"TICKET #\" + random.Next(100000));\n                    writer.WriteLine(\"Event: \" + eventObj.EventName);\n                    writer.WriteLine(\"Venue: \" + eventObj.Venue);\n                    writer.WriteLine(\"Date: \" + eventObj.StartTime.ToString(\"yyyy-MM-dd HH:mm\"));\n                    writer.WriteLine(\"Holder: \" + userEmail);\n                    writer.WriteLine(\"================\");\n                    writer.WriteLine();\n                }\n            }\n            \n            Console.WriteLine(\"Tickets generated: \" + filename);\n        }\n        catch (IOException e)\n        {\n            Console.Error.WriteLine(\"Failed to generate tickets: \" + e.Message);\n        }\n    }\n    \n    private void SendEventCreationNotification(User organizer, Event eventObj)\n    {\n        Console.WriteLine(\"Email sent to \" + organizer.Email + \": Your event '\" + eventObj.EventName + \"' has been created successfully.\");\n    }\n    \n    private void SendRegistrationConfirmation(string userEmail, Event eventObj, int numberOfTickets, double totalCost)\n    {\n        Console.WriteLine(\"Email sent to \" + userEmail + \": Registration confirmed for '\" + eventObj.EventName + \"'. Tickets: \" + numberOfTickets + \", Total: $\" + totalCost);\n    }\n    \n    private void SendEventFullNotification(Event eventObj)\n    {\n        Console.WriteLine(\"Email sent to \" + eventObj.OrganizerEmail + \": Event '\" + eventObj.EventName + \"' is now fully booked.\");\n    }\n    \n    private void SendReportNotification(string organizerEmail, string filename)\n    {\n        Console.WriteLine(\"Email sent to \" + organizerEmail + \": Event report generated: \" + filename);\n    }\n    \n    private void LogActivity(string userEmail, string action, string details)\n    {\n        try\n        {\n            using (StreamWriter writer = new StreamWriter(\"event_system.log\", true))\n            {\n                writer.WriteLine(DateTime.Now.ToString(\"yyyy-MM-ddTHH:mm:ss\") + \" - User: \" + userEmail + \", Action: \" + action + \", Details: \" + details);\n            }\n        }\n        catch (IOException e)\n        {\n            Console.Error.WriteLine(\"Failed to log activity: \" + e.Message);\n        }\n    }\n    \n    private void UpdateEventWebsite(Event eventObj)\n    {\n        Console.WriteLine(\"Updating website with event information for: \" + eventObj.EventName);\n    }\n}",
      "output": "using System;\nusing System.Collections.Concurrent;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text.RegularExpressions;\n\npublic class User\n{\n    public string Email { get; set; }\n    public string Name { get; set; }\n    public string PasswordHash { get; set; }\n    public List<string> Permissions { get; set; }\n    \n    public User(string email, string name, string passwordHash, List<string> permissions)\n    {\n        Email = email;\n        Name = name;\n        PasswordHash = passwordHash;\n        Permissions = permissions;\n    }\n}\n\npublic class Event\n{\n    public string EventId { get; set; }\n    public string EventName { get; set; }\n    public string Description { get; set; }\n    public string Venue { get; set; }\n    public DateTime StartTime { get; set; }\n    public DateTime EndTime { get; set; }\n    public double TicketPrice { get; set; }\n    public int MaxCapacity { get; set; }\n    public string OrganizerEmail { get; set; }\n    \n    public Event(string eventId, string eventName, string description, string venue,\n                DateTime startTime, DateTime endTime, double ticketPrice, int maxCapacity, string organizerEmail)\n    {\n        EventId = eventId;\n        EventName = eventName;\n        Description = description;\n        Venue = venue;\n        StartTime = startTime;\n        EndTime = endTime;\n        TicketPrice = ticketPrice;\n        MaxCapacity = maxCapacity;\n        OrganizerEmail = organizerEmail;\n    }\n}\n\npublic class EventService\n{\n    private readonly ConcurrentDictionary<string, Event> events = new ConcurrentDictionary<string, Event>();\n    private readonly ConcurrentDictionary<string, List<string>> eventRegistrations = new ConcurrentDictionary<string, List<string>>();\n    private readonly ConcurrentDictionary<string, double> eventRevenue = new ConcurrentDictionary<string, double>();\n    private readonly IAuthenticationService authService;\n    private readonly IEventValidator eventValidator;\n    private readonly IPaymentProcessor paymentProcessor;\n    private readonly ITicketGenerator ticketGenerator;\n    private readonly INotificationService notificationService;\n    private readonly IReportService reportService;\n    private readonly IActivityLogger activityLogger;\n    private readonly IWebsiteUpdater websiteUpdater;\n    private readonly IEventIdGenerator idGenerator;\n    \n    public EventService(IAuthenticationService authService, IEventValidator eventValidator,\n                       IPaymentProcessor paymentProcessor, ITicketGenerator ticketGenerator,\n                       INotificationService notificationService, IReportService reportService,\n                       IActivityLogger activityLogger, IWebsiteUpdater websiteUpdater,\n                       IEventIdGenerator idGenerator)\n    {\n        this.authService = authService;\n        this.eventValidator = eventValidator;\n        this.paymentProcessor = paymentProcessor;\n        this.ticketGenerator = ticketGenerator;\n        this.notificationService = notificationService;\n        this.reportService = reportService;\n        this.activityLogger = activityLogger;\n        this.websiteUpdater = websiteUpdater;\n        this.idGenerator = idGenerator;\n    }\n    \n    public void CreateEvent(string organizerEmail, string password, string eventName,\n                           string description, string venue, DateTime startTime,\n                           DateTime endTime, double ticketPrice, int maxCapacity)\n    {\n        authService.Authenticate(organizerEmail, password);\n        authService.CheckPermission(organizerEmail, \\\"CREATE_EVENT\\\");\n        \n        eventValidator.ValidateEventData(eventName, description, venue, startTime, endTime, ticketPrice, maxCapacity);\n        \n        string eventId = idGenerator.Generate();\n        Event eventObj = new Event(eventId, eventValidator.SanitizeInput(eventName),\n                                   eventValidator.SanitizeInput(description),\n                                   eventValidator.SanitizeInput(venue), startTime, endTime,\n                                   ticketPrice, maxCapacity, organizerEmail);\n        \n        events[eventId] = eventObj;\n        eventRegistrations[eventId] = new List<string>();\n        eventRevenue[eventId] = 0.0;\n        \n        notificationService.SendEventCreationNotification(organizerEmail, eventObj);\n        activityLogger.LogActivity(organizerEmail, \\\"EVENT_CREATED\\\", eventId + \\\" - \\\" + eventName);\n        websiteUpdater.UpdateEventWebsite(eventObj);\n        \n        Console.WriteLine(\\\"Event created: \\\" + eventId + \\\" - \\\" + eventName);\n    }\n    \n    public void RegisterForEvent(string userEmail, string password, string eventId, int numberOfTickets)\n    {\n        authService.Authenticate(userEmail, password);\n        \n        Event eventObj = GetEventById(eventId);\n        ValidateRegistration(eventObj, numberOfTickets);\n        \n        List<string> registrations = eventRegistrations[eventId];\n        if (registrations.Count + numberOfTickets > eventObj.MaxCapacity)\n        {\n            throw new ArgumentException(\\\"Not enough capacity available\\\");\n        }\n        \n        double totalCost = eventObj.TicketPrice * numberOfTickets;\n        paymentProcessor.ProcessPayment(userEmail, totalCost);\n        \n        lock (registrations)\n        {\n            for (int i = 0; i < numberOfTickets; i++)\n            {\n                registrations.Add(userEmail);\n            }\n        }\n        \n        eventRevenue[eventId] = eventRevenue[eventId] + totalCost;\n        \n        ticketGenerator.GenerateTickets(userEmail, eventObj, numberOfTickets);\n        notificationService.SendRegistrationConfirmation(userEmail, eventObj, numberOfTickets, totalCost);\n        activityLogger.LogActivity(userEmail, \\\"REGISTERED_FOR_EVENT\\\", eventId + \\\" - \\\" + numberOfTickets + \\\" tickets\\\");\n        \n        if (registrations.Count >= eventObj.MaxCapacity)\n        {\n            notificationService.SendEventFullNotification(eventObj);\n        }\n        \n        Console.WriteLine(\\\"User \\\" + userEmail + \\\" registered for event \\\" + eventId);\n    }\n    \n    public void GenerateEventReport(string organizerEmail, string password, string eventId)\n    {\n        authService.Authenticate(organizerEmail, password);\n        \n        Event eventObj = GetEventById(eventId);\n        authService.CheckReportPermission(organizerEmail, eventObj);\n        \n        string filename = reportService.GenerateEventReport(eventObj, eventRegistrations[eventId], eventRevenue[eventId]);\n        \n        activityLogger.LogActivity(organizerEmail, \\\"REPORT_GENERATED\\\", eventId);\n        notificationService.SendReportNotification(organizerEmail, filename);\n        \n        Console.WriteLine(\\\"Report generated: \\\" + filename);\n    }\n    \n    private Event GetEventById(string eventId)\n    {\n        Event eventObj = null;\n        if (!events.TryGetValue(eventId, out eventObj))\n        {\n            throw new ArgumentException(\\\"Event not found\\\");\n        }\n        return eventObj;\n    }\n    \n    private void ValidateRegistration(Event eventObj, int numberOfTickets)\n    {\n        if (eventObj.StartTime < DateTime.Now)\n        {\n            throw new ArgumentException(\\\"Cannot register for past events\\\");\n        }\n        \n        if (numberOfTickets <= 0 || numberOfTickets > 10)\n        {\n            throw new ArgumentException(\\\"Invalid number of tickets (1-10 allowed)\\\");\n        }\n    }\n}\n\npublic interface IAuthenticationService\n{\n    void Authenticate(string email, string password);\n    void CheckPermission(string email, string permission);\n    void CheckReportPermission(string organizerEmail, Event eventObj);\n}\n\npublic class AuthenticationService : IAuthenticationService\n{\n    private readonly ConcurrentDictionary<string, User> registeredUsers = new ConcurrentDictionary<string, User>();\n    \n    public AuthenticationService()\n    {\n        InitializeTestData();\n    }\n    \n    public void Authenticate(string email, string password)\n    {\n        if (!AuthenticateUser(email, password))\n        {\n            throw new UnauthorizedAccessException(\\\"Invalid credentials\\\");\n        }\n    }\n    \n    public void CheckPermission(string email, string permission)\n    {\n        User user = null;\n        registeredUsers.TryGetValue(email, out user);\n        if (!HasPermission(user, permission))\n        {\n            throw new UnauthorizedAccessException(\\\"User does not have permission to \\\" + permission.ToLower());\n        }\n    }\n    \n    public void CheckReportPermission(string organizerEmail, Event eventObj)\n    {\n        if (eventObj.OrganizerEmail != organizerEmail)\n        {\n            User user = null;\n            registeredUsers.TryGetValue(organizerEmail, out user);\n            if (!HasPermission(user, \\\"VIEW_ALL_REPORTS\\\"))\n            {\n                throw new UnauthorizedAccessException(\\\"No permission to view this event's report\\\");\n            }\n        }\n    }\n    \n    private void InitializeTestData()\n    {\n        registeredUsers[\\\"organizer@company.com\\\"] = new User(\n            \\\"organizer@company.com\\\", \\\"John Organizer\\\", HashPassword(\\\"org123\\\"),\n            new List<string> { \\\"CREATE_EVENT\\\", \\\"VIEW_ALL_REPORTS\\\" });\n        registeredUsers[\\\"admin@company.com\\\"] = new User(\n            \\\"admin@company.com\\\", \\\"Admin User\\\", HashPassword(\\\"admin123\\\"),\n            new List<string> { \\\"CREATE_EVENT\\\", \\\"VIEW_ALL_REPORTS\\\" });\n        registeredUsers[\\\"user@company.com\\\"] = new User(\n            \\\"user@company.com\\\", \\\"Regular User\\\", HashPassword(\\\"user123\\\"),\n            new List<string>());\n    }\n    \n    private bool AuthenticateUser(string email, string password)\n    {\n        User user = null;\n        registeredUsers.TryGetValue(email, out user);\n        return user != null && user.PasswordHash == HashPassword(password);\n    }\n    \n    private bool HasPermission(User user, string permission)\n    {\n        return user != null && user.Permissions.Contains(permission);\n    }\n    \n    private string HashPassword(string password)\n    {\n        return \\\"hashed_\\\" + password;\n    }\n}\n\npublic interface IEventValidator\n{\n    void ValidateEventData(string eventName, string description, string venue,\n                          DateTime startTime, DateTime endTime, double ticketPrice, int maxCapacity);\n    string SanitizeInput(string input);\n}\n\npublic class EventValidator : IEventValidator\n{\n    public void ValidateEventData(string eventName, string description, string venue,\n                                 DateTime startTime, DateTime endTime, double ticketPrice, int maxCapacity)\n    {\n        if (string.IsNullOrWhiteSpace(eventName))\n            throw new ArgumentException(\\\"Invalid event name\\\");\n        if (string.IsNullOrWhiteSpace(description) || string.IsNullOrWhiteSpace(venue))\n            throw new ArgumentException(\\\"Invalid event details\\\");\n        if (startTime >= endTime || startTime <= DateTime.Now)\n            throw new ArgumentException(\\\"Invalid event times\\\");\n        if (ticketPrice < 0 || maxCapacity <= 0)\n            throw new ArgumentException(\\\"Invalid ticket price or capacity\\\");\n    }\n    \n    public string SanitizeInput(string input)\n    {\n        if (string.IsNullOrEmpty(input)) return string.Empty;\n        return Regex.Replace(input, @\\\"[<>\\\\\\\"'&]\\\", \\\"\\\").Trim();\n    }\n}\n\npublic interface IPaymentProcessor\n{\n    void ProcessPayment(string userEmail, double amount);\n}\n\npublic class PaymentProcessor : IPaymentProcessor\n{\n    private readonly Random random = new Random();\n    \n    public void ProcessPayment(string userEmail, double amount)\n    {\n        Console.WriteLine(\\\"Processing payment of $\\\" + amount + \\\" for user \\\" + userEmail);\n        if (random.NextDouble() <= 0.1)\n        {\n            throw new InvalidOperationException(\\\"Payment processing failed\\\");\n        }\n    }\n}\n\npublic interface ITicketGenerator\n{\n    void GenerateTickets(string userEmail, Event eventObj, int numberOfTickets);\n}\n\npublic class TicketGenerator : ITicketGenerator\n{\n    private readonly Random random = new Random();\n    \n    public void GenerateTickets(string userEmail, Event eventObj, int numberOfTickets)\n    {\n        try\n        {\n            string filename = \\\"tickets_\\\" + userEmail.Replace(\\\"@\\\", \\\"_\\\") + \\\"_\\\" + eventObj.EventId + \\\".txt\\\";\n            using (StreamWriter writer = new StreamWriter(filename))\n            {\n                for (int i = 1; i <= numberOfTickets; i++)\n                {\n                    writer.WriteLine(\\\"TICKET #\\\" + random.Next(100000));\n                    writer.WriteLine(\\\"Event: \\\" + eventObj.EventName);\n                    writer.WriteLine(\\\"Venue: \\\" + eventObj.Venue);\n                    writer.WriteLine(\\\"Date: \\\" + eventObj.StartTime.ToString(\\\"yyyy-MM-dd HH:mm\\\"));\n                    writer.WriteLine(\\\"Holder: \\\" + userEmail);\n                    writer.WriteLine(\\\"================\\\");\n                    writer.WriteLine();\n                }\n            }\n            \n            Console.WriteLine(\\\"Tickets generated: \\\" + filename);\n        }\n        catch (IOException e)\n        {\n            throw new InvalidOperationException(\\\"Failed to generate tickets: \\\" + e.Message);\n        }\n    }\n}\n\npublic interface INotificationService\n{\n    void SendEventCreationNotification(string organizerEmail, Event eventObj);\n    void SendRegistrationConfirmation(string userEmail, Event eventObj, int numberOfTickets, double totalCost);\n    void SendEventFullNotification(Event eventObj);\n    void SendReportNotification(string organizerEmail, string filename);\n}\n\npublic class NotificationService : INotificationService\n{\n    public void SendEventCreationNotification(string organizerEmail, Event eventObj)\n    {\n        Console.WriteLine(\\\"Email sent to \\\" + organizerEmail + \\\": Your event '\\\" + eventObj.EventName + \\\"' has been created successfully.\\\");\n    }\n    \n    public void SendRegistrationConfirmation(string userEmail, Event eventObj, int numberOfTickets, double totalCost)\n    {\n        Console.WriteLine(\\\"Email sent to \\\" + userEmail + \\\": Registration confirmed for '\\\" + eventObj.EventName + \\\"'. Tickets: \\\" + numberOfTickets + \\\", Total: $\\\" + totalCost);\n    }\n    \n    public void SendEventFullNotification(Event eventObj)\n    {\n        Console.WriteLine(\\\"Email sent to \\\" + eventObj.OrganizerEmail + \\\": Event '\\\" + eventObj.EventName + \\\"' is now fully booked.\\\");\n    }\n    \n    public void SendReportNotification(string organizerEmail, string filename)\n    {\n        Console.WriteLine(\\\"Email sent to \\\" + organizerEmail + \\\": Event report generated: \\\" + filename);\n    }\n}\n\npublic interface IReportService\n{\n    string GenerateEventReport(Event eventObj, List<string> registrations, double revenue);\n}\n\npublic class ReportService : IReportService\n{\n    public string GenerateEventReport(Event eventObj, List<string> registrations, double revenue)\n    {\n        try\n        {\n            string filename = \\\"event_report_\\\" + eventObj.EventId + \\\"_\\\" + DateTime.Now.ToString(\\\"yyyyMMdd_HHmmss\\\") + \\\".txt\\\";\n            \n            using (StreamWriter writer = new StreamWriter(filename))\n            {\n                writer.WriteLine(\\\"EVENT REPORT\\\");\n                writer.WriteLine(\\\"Event: \\\" + eventObj.EventName);\n                writer.WriteLine(\\\"Event ID: \\\" + eventObj.EventId);\n                writer.WriteLine(\\\"Organizer: \\\" + eventObj.OrganizerEmail);\n                writer.WriteLine(\\\"Venue: \\\" + eventObj.Venue);\n                writer.WriteLine(\\\"Start Time: \\\" + eventObj.StartTime);\n                writer.WriteLine(\\\"Ticket Price: $\\\" + eventObj.TicketPrice);\n                writer.WriteLine(\\\"Max Capacity: \\\" + eventObj.MaxCapacity);\n                writer.WriteLine();\n                \n                writer.WriteLine(\\\"Registrations: \\\" + registrations.Count);\n                writer.WriteLine(\\\"Revenue: $\\\" + revenue);\n                writer.WriteLine(\\\"Occupancy Rate: \\\" + String.Format(\\\"{0:F1}\\\", registrations.Count * 100.0 / eventObj.MaxCapacity) + \\\"%\\\");\n                writer.WriteLine();\n                \n                Dictionary<string, int> userTicketCounts = new Dictionary<string, int>();\n                foreach (string email in registrations)\n                {\n                    if (userTicketCounts.ContainsKey(email))\n                    {\n                        userTicketCounts[email] = userTicketCounts[email] + 1;\n                    }\n                    else\n                    {\n                        userTicketCounts[email] = 1;\n                    }\n                }\n                \n                writer.WriteLine(\\\"Registered Users:\\\");\n                foreach (KeyValuePair<string, int> entry in userTicketCounts)\n                {\n                    writer.WriteLine(\\\"- \\\" + entry.Key + \\\": \\\" + entry.Value + \\\" ticket(s)\\\");\n                }\n            }\n            \n            return filename;\n        }\n        catch (IOException e)\n        {\n            throw new InvalidOperationException(\\\"Failed to generate report: \\\" + e.Message);\n        }\n    }\n}\n\npublic interface IActivityLogger\n{\n    void LogActivity(string userEmail, string action, string details);\n}\n\npublic class ActivityLogger : IActivityLogger\n{\n    public void LogActivity(string userEmail, string action, string details)\n    {\n        try\n        {\n            using (StreamWriter writer = new StreamWriter(\\\"event_system.log\\\", true))\n            {\n                writer.WriteLine(DateTime.Now.ToString(\\\"yyyy-MM-ddTHH:mm:ss\\\") + \\\" - User: \\\" + userEmail + \\\", Action: \\\" + action + \\\", Details: \\\" + details);\n            }\n        }\n        catch (IOException e)\n        {\n            throw new InvalidOperationException(\\\"Failed to log activity: \\\" + e.Message);\n        }\n    }\n}\n\npublic interface IWebsiteUpdater\n{\n    void UpdateEventWebsite(Event eventObj);\n}\n\npublic class WebsiteUpdater : IWebsiteUpdater\n{\n    public void UpdateEventWebsite(Event eventObj)\n    {\n        Console.WriteLine(\\\"Updating website with event information for: \\\" + eventObj.EventName);\n    }\n}\n\npublic interface IEventIdGenerator\n{\n    string Generate();\n}\n\npublic class EventIdGenerator : IEventIdGenerator\n{\n    private int eventIdCounter = 1000;\n    private readonly object counterLock = new object();\n    \n    public string Generate()\n    {\n        lock (counterLock)\n        {\n            return \\\"EVT\\\" + (eventIdCounter++);\n        }\n    }\n}",
      "level": "HARD",
      "language": "CSHARP",
      "violation": "SRP",
       "description": "Event registration management system"
    }
  ]
}
