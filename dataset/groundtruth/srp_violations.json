{
    "code_examples": [
        {
            "input": "public class User {\n    private String name;\n    private String email;\n    \n    public User(String name, String email) {\n        this.name = name;\n        this.email = email;\n    }\n    \n    public void saveToDatabase() {\n        System.out.println(\"Saving user \" + name + \" to database\");\n    }\n    \n    public void sendWelcomeEmail() {\n        System.out.println(\"Sending welcome email to \" + email);\n    }\n}",
            "output": "public class User {\n    private String name;\n    private String email;\n    \n    public User(String name, String email) {\n        this.name = name;\n        this.email = email;\n    }\n    \n    public String getName() {\n        return name;\n    }\n    \n    public String getEmail() {\n        return email;\n    }\n}\n\nclass UserRepository {\n    public void save(User user) {\n        System.out.println(\"Saving user \" + user.getName() + \" to database\");\n    }\n}\n\nclass EmailService {\n    public void sendWelcomeEmail(User user) {\n        System.out.println(\"Sending welcome email to \" + user.getEmail());\n    }\n}",
            "level": "EASY",
            "language": "JAVA",
            "violation": "SRP",
            "description": "User database email operations"
        },
        {
            "input": "public class Employee {\n    private String name;\n    private double baseSalary;\n    private int yearsOfService;\n    \n    public Employee(String name, double baseSalary, int yearsOfService) {\n        this.name = name;\n        this.baseSalary = baseSalary;\n        this.yearsOfService = yearsOfService;\n    }\n    \n    public double calculateSalary() {\n        return baseSalary + (yearsOfService * 1000);\n    }\n    \n    public void printPaySlip() {\n        System.out.println(\"Pay slip for \" + name + \": $\" + calculateSalary());\n    }\n}",
            "output": "public class Employee {\n    private String name;\n    private double baseSalary;\n    private int yearsOfService;\n    \n    public Employee(String name, double baseSalary, int yearsOfService) {\n        this.name = name;\n        this.baseSalary = baseSalary;\n        this.yearsOfService = yearsOfService;\n    }\n    \n    public String getName() {\n        return name;\n    }\n    \n    public double getBaseSalary() {\n        return baseSalary;\n    }\n    \n    public int getYearsOfService() {\n        return yearsOfService;\n    }\n}\n\nclass SalaryCalculator {\n    public double calculate(Employee employee) {\n        return employee.getBaseSalary() + (employee.getYearsOfService() * 1000);\n    }\n}\n\nclass PaySlipPrinter {\n    private SalaryCalculator calculator;\n    \n    public PaySlipPrinter(SalaryCalculator calculator) {\n        this.calculator = calculator;\n    }\n    \n    public void print(Employee employee) {\n        System.out.println(\"Pay slip for \" + employee.getName() + \": $\" + calculator.calculate(employee));\n    }\n}",
            "level": "EASY",
            "language": "JAVA",
            "violation": "SRP",
            "description": "Employee salary payslip system"
        },
        {
            "input": "public class Book {\n    private String title;\n    private String author;\n    private String content;\n    \n    public Book(String title, String author, String content) {\n        this.title = title;\n        this.author = author;\n        this.content = content;\n    }\n    \n    public void printBook() {\n        System.out.println(\"Title: \" + title);\n        System.out.println(\"Author: \" + author);\n        System.out.println(\"Content: \" + content);\n    }\n    \n    public void saveToFile(String filename) {\n        System.out.println(\"Saving book to \" + filename);\n    }\n}",
            "output": "public class Book {\n    private String title;\n    private String author;\n    private String content;\n    \n    public Book(String title, String author, String content) {\n        this.title = title;\n        this.author = author;\n        this.content = content;\n    }\n    \n    public String getTitle() {\n        return title;\n    }\n    \n    public String getAuthor() {\n        return author;\n    }\n    \n    public String getContent() {\n        return content;\n    }\n}\n\nclass BookPrinter {\n    public void print(Book book) {\n        System.out.println(\"Title: \" + book.getTitle());\n        System.out.println(\"Author: \" + book.getAuthor());\n        System.out.println(\"Content: \" + book.getContent());\n    }\n}\n\nclass BookFileSaver {\n    public void saveToFile(Book book, String filename) {\n        System.out.println(\"Saving book to \" + filename);\n    }\n}",
            "level": "EASY",
            "language": "JAVA",
            "violation": "SRP",
            "description": "Book printing file saving"
        },
        {
            "input": "public class Product {\n    private String name;\n    private double price;\n    \n    public Product(String name, double price) {\n        this.name = name;\n        this.price = price;\n    }\n    \n    public double applyDiscount(double percentage) {\n        return price * (1 - percentage / 100);\n    }\n    \n    public void displayProduct() {\n        System.out.println(\"Product: \" + name + \", Price: $\" + price);\n    }\n}",
            "output": "public class Product {\n    private String name;\n    private double price;\n    \n    public Product(String name, double price) {\n        this.name = name;\n        this.price = price;\n    }\n    \n    public String getName() {\n        return name;\n    }\n    \n    public double getPrice() {\n        return price;\n    }\n}\n\nclass DiscountCalculator {\n    public double applyDiscount(Product product, double percentage) {\n        return product.getPrice() * (1 - percentage / 100);\n    }\n}\n\nclass ProductDisplay {\n    public void display(Product product) {\n        System.out.println(\"Product: \" + product.getName() + \", Price: $\" + product.getPrice());\n    }\n}",
            "level": "EASY",
            "language": "JAVA",
            "violation": "SRP",
            "description": "Product discount display system"
        },
        {
            "input": "public class User {\n    private String name;\n    private String email;\n    private String password;\n    private boolean isActive;\n    private String role;\n    private java.util.Date lastLogin;\n    private int loginAttempts;\n    \n    public User(String name, String email) {\n        this.name = name;\n        this.email = email;\n        this.isActive = true;\n        this.role = \"USER\";\n        this.loginAttempts = 0;\n    }\n    \n    public void saveToDatabase() {\n        System.out.println(\"Saving user \" + name + \" to database\");\n    }\n    \n    public void sendWelcomeEmail() {\n        System.out.println(\"Sending welcome email to \" + email);\n    }\n    \n    public boolean validateEmail(String email) {\n        if (email == null || email.isEmpty()) {\n            return false;\n        }\n        return email.contains(\"@\") && email.contains(\".\");\n    }\n    \n    public boolean validatePassword(String password) {\n        if (password == null || password.length() < 8) {\n            return false;\n        }\n        boolean hasUpper = false;\n        boolean hasLower = false;\n        boolean hasDigit = false;\n        \n        for (char c : password.toCharArray()) {\n            if (Character.isUpperCase(c)) hasUpper = true;\n            if (Character.isLowerCase(c)) hasLower = true;\n            if (Character.isDigit(c)) hasDigit = true;\n        }\n        \n        return hasUpper && hasLower && hasDigit;\n    }\n    \n    public String hashPassword(String password) {\n        int hash = 0;\n        for (char c : password.toCharArray()) {\n            hash = hash * 31 + c;\n        }\n        return String.valueOf(Math.abs(hash));\n    }\n    \n    public boolean authenticate(String password) {\n        if (loginAttempts >= 5) {\n            System.out.println(\"Account locked due to too many failed attempts\");\n            return false;\n        }\n        \n        if (this.password != null && this.password.equals(hashPassword(password))) {\n            loginAttempts = 0;\n            lastLogin = new java.util.Date();\n            return true;\n        }\n        \n        loginAttempts++;\n        return false;\n    }\n    \n    public void lockAccount() {\n        this.isActive = false;\n        System.out.println(\"Account locked for user: \" + name);\n    }\n    \n    public void unlockAccount() {\n        this.isActive = true;\n        this.loginAttempts = 0;\n        System.out.println(\"Account unlocked for user: \" + name);\n    }\n    \n    public String getName() {\n        return name;\n    }\n    \n    public void setName(String name) {\n        this.name = name;\n    }\n    \n    public String getEmail() {\n        return email;\n    }\n    \n    public void setEmail(String email) {\n        this.email = email;\n    }\n    \n    public String getPassword() {\n        return password;\n    }\n    \n    public void setPassword(String password) {\n        this.password = hashPassword(password);\n    }\n    \n    public boolean isActive() {\n        return isActive;\n    }\n    \n    public String getRole() {\n        return role;\n    }\n    \n    public void setRole(String role) {\n        this.role = role;\n    }\n    \n    public java.util.Date getLastLogin() {\n        return lastLogin;\n    }\n    \n    public int getLoginAttempts() {\n        return loginAttempts;\n    }\n}",
            "output": "class DatabaseService {\n    public void saveUser(User user) {\n        System.out.println(\"Saving user \" + user.getName() + \" to database\");\n    }\n}\n\nclass EmailService {\n    public void sendWelcomeEmail(String email) {\n        System.out.println(\"Sending welcome email to \" + email);\n    }\n}\n\nclass ValidationService {\n    public boolean validateEmail(String email) {\n        if (email == null || email.isEmpty()) {\n            return false;\n        }\n        return email.contains(\"@\") && email.contains(\".\");\n    }\n    \n    public boolean validatePassword(String password) {\n        if (password == null || password.length() < 8) {\n            return false;\n        }\n        boolean hasUpper = false;\n        boolean hasLower = false;\n        boolean hasDigit = false;\n        \n        for (char c : password.toCharArray()) {\n            if (Character.isUpperCase(c)) hasUpper = true;\n            if (Character.isLowerCase(c)) hasLower = true;\n            if (Character.isDigit(c)) hasDigit = true;\n        }\n        \n        return hasUpper && hasLower && hasDigit;\n    }\n}\n\nclass PasswordService {\n    public String hashPassword(String password) {\n        int hash = 0;\n        for (char c : password.toCharArray()) {\n            hash = hash * 31 + c;\n        }\n        return String.valueOf(Math.abs(hash));\n    }\n}\n\nclass AuthenticationService {\n    private PasswordService passwordService;\n    \n    public AuthenticationService() {\n        this.passwordService = new PasswordService();\n    }\n    \n    public boolean authenticate(User user, String password) {\n        if (user.getLoginAttempts() >= 5) {\n            System.out.println(\"Account locked due to too many failed attempts\");\n            return false;\n        }\n        \n        if (user.getPassword() != null && user.getPassword().equals(passwordService.hashPassword(password))) {\n            user.resetLoginAttempts();\n            user.updateLastLogin();\n            return true;\n        }\n        \n        user.incrementLoginAttempts();\n        return false;\n    }\n}\n\nclass AccountService {\n    public void lockAccount(User user) {\n        user.setActive(false);\n        System.out.println(\"Account locked for user: \" + user.getName());\n    }\n    \n    public void unlockAccount(User user) {\n        user.setActive(true);\n        user.resetLoginAttempts();\n        System.out.println(\"Account unlocked for user: \" + user.getName());\n    }\n}\n\npublic class User {\n    private String name;\n    private String email;\n    private String password;\n    private boolean isActive;\n    private String role;\n    private java.util.Date lastLogin;\n    private int loginAttempts;\n    private PasswordService passwordService;\n    \n    public User(String name, String email) {\n        this.name = name;\n        this.email = email;\n        this.isActive = true;\n        this.role = \"USER\";\n        this.loginAttempts = 0;\n        this.passwordService = new PasswordService();\n    }\n    \n    public String getName() {\n        return name;\n    }\n    \n    public void setName(String name) {\n        this.name = name;\n    }\n    \n    public String getEmail() {\n        return email;\n    }\n    \n    public void setEmail(String email) {\n        this.email = email;\n    }\n    \n    public String getPassword() {\n        return password;\n    }\n    \n    public void setPassword(String password) {\n        this.password = passwordService.hashPassword(password);\n    }\n    \n    public boolean isActive() {\n        return isActive;\n    }\n    \n    public void setActive(boolean active) {\n        this.isActive = active;\n    }\n    \n    public String getRole() {\n        return role;\n    }\n    \n    public void setRole(String role) {\n        this.role = role;\n    }\n    \n    public java.util.Date getLastLogin() {\n        return lastLogin;\n    }\n    \n    public void updateLastLogin() {\n        this.lastLogin = new java.util.Date();\n    }\n    \n    public int getLoginAttempts() {\n        return loginAttempts;\n    }\n    \n    public void incrementLoginAttempts() {\n        this.loginAttempts++;\n    }\n    \n    public void resetLoginAttempts() {\n        this.loginAttempts = 0;\n    }\n}",
            "level": "MODERATE",
            "language": "JAVA",
            "violation": "SRP",
            "description": "User database email operations"
        },
        {
            "input": "public class Employee {\n    private String name;\n    private double baseSalary;\n    private int yearsOfService;\n    private String department;\n    private String position;\n    private String employeeId;\n    private java.util.Date hireDate;\n    private java.util.Date lastReviewDate;\n    private double performanceRating;\n    private int vacationDays;\n    private int usedVacationDays;\n    private String manager;\n    private String email;\n    \n    public Employee(String name, double baseSalary, int yearsOfService) {\n        this.name = name;\n        this.baseSalary = baseSalary;\n        this.yearsOfService = yearsOfService;\n        this.employeeId = generateEmployeeId();\n        this.hireDate = new java.util.Date();\n        this.vacationDays = 20;\n        this.usedVacationDays = 0;\n        this.performanceRating = 3.0;\n    }\n    \n    public double calculateSalary() {\n        return baseSalary + (yearsOfService * 1000);\n    }\n    \n    public void printPaySlip() {\n        System.out.println(\"Pay slip for \" + name + \": $\" + calculateSalary());\n    }\n    \n    public double calculateBonus() {\n        double baseBonus = baseSalary * 0.1;\n        if (performanceRating >= 4.0) {\n            baseBonus *= 1.5;\n        } else if (performanceRating >= 3.5) {\n            baseBonus *= 1.2;\n        }\n        return baseBonus;\n    }\n    \n    public double calculateAnnualSalary() {\n        return calculateSalary() * 12 + calculateBonus();\n    }\n    \n    public void processPayroll() {\n        double monthlySalary = calculateSalary();\n        double taxes = calculateTaxes(monthlySalary);\n        double netPay = monthlySalary - taxes;\n        \n        System.out.println(\"Processing payroll for \" + name);\n        System.out.println(\"Gross Pay: $\" + monthlySalary);\n        System.out.println(\"Taxes: $\" + taxes);\n        System.out.println(\"Net Pay: $\" + netPay);\n    }\n    \n    public double calculateTaxes(double salary) {\n        if (salary <= 3000) {\n            return salary * 0.15;\n        } else if (salary <= 6000) {\n            return salary * 0.20;\n        } else {\n            return salary * 0.25;\n        }\n    }\n    \n    public boolean requestVacation(int days) {\n        if (usedVacationDays + days <= vacationDays) {\n            usedVacationDays += days;\n            System.out.println(\"Vacation request approved for \" + name + \": \" + days + \" days\");\n            notifyManager(\"Vacation request approved for \" + name);\n            return true;\n        } else {\n            System.out.println(\"Vacation request denied for \" + name + \": insufficient days\");\n            return false;\n        }\n    }\n    \n    public void notifyManager(String message) {\n        if (manager != null) {\n            System.out.println(\"Sending notification to manager \" + manager + \": \" + message);\n        }\n    }\n    \n    public void sendPayrollEmail() {\n        if (email != null) {\n            System.out.println(\"Sending payroll email to \" + email);\n            System.out.println(\"Subject: Your monthly payslip\");\n            System.out.println(\"Body: Please find your payslip attached.\");\n        }\n    }\n    \n    public void conductPerformanceReview() {\n        System.out.println(\"Conducting performance review for \" + name);\n        System.out.println(\"Current rating: \" + performanceRating);\n        lastReviewDate = new java.util.Date();\n        \n        if (performanceRating >= 4.0) {\n            System.out.println(\"Excellent performance! Recommending for promotion.\");\n        } else if (performanceRating < 2.0) {\n            System.out.println(\"Performance improvement needed.\");\n        }\n    }\n    \n    public void updatePerformanceRating(double rating) {\n        if (rating >= 1.0 && rating <= 5.0) {\n            this.performanceRating = rating;\n            System.out.println(\"Performance rating updated to \" + rating + \" for \" + name);\n        } else {\n            System.out.println(\"Invalid rating. Must be between 1.0 and 5.0\");\n        }\n    }\n    \n    public String generateEmployeeId() {\n        return \"EMP\" + System.currentTimeMillis() % 10000;\n    }\n    \n    public void printEmployeeReport() {\n        System.out.println(\"Employee Report for \" + name);\n        System.out.println(\"ID: \" + employeeId);\n        System.out.println(\"Department: \" + department);\n        System.out.println(\"Position: \" + position);\n        System.out.println(\"Hire Date: \" + hireDate);\n        System.out.println(\"Years of Service: \" + yearsOfService);\n        System.out.println(\"Base Salary: $\" + baseSalary);\n        System.out.println(\"Performance Rating: \" + performanceRating);\n        System.out.println(\"Vacation Days Remaining: \" + (vacationDays - usedVacationDays));\n    }\n    \n    public String getName() {\n        return name;\n    }\n    \n    public void setName(String name) {\n        this.name = name;\n    }\n    \n    public double getBaseSalary() {\n        return baseSalary;\n    }\n    \n    public void setBaseSalary(double baseSalary) {\n        this.baseSalary = baseSalary;\n    }\n    \n    public int getYearsOfService() {\n        return yearsOfService;\n    }\n    \n    public void setYearsOfService(int yearsOfService) {\n        this.yearsOfService = yearsOfService;\n    }\n    \n    public String getDepartment() {\n        return department;\n    }\n    \n    public void setDepartment(String department) {\n        this.department = department;\n    }\n    \n    public String getPosition() {\n        return position;\n    }\n    \n    public void setPosition(String position) {\n        this.position = position;\n    }\n    \n    public String getEmployeeId() {\n        return employeeId;\n    }\n    \n    public java.util.Date getHireDate() {\n        return hireDate;\n    }\n    \n    public double getPerformanceRating() {\n        return performanceRating;\n    }\n    \n    public int getVacationDays() {\n        return vacationDays;\n    }\n    \n    public void setVacationDays(int vacationDays) {\n        this.vacationDays = vacationDays;\n    }\n    \n    public String getManager() {\n        return manager;\n    }\n    \n    public void setManager(String manager) {\n        this.manager = manager;\n    }\n    \n    public String getEmail() {\n        return email;\n    }\n    \n    public void setEmail(String email) {\n        this.email = email;\n    }\n}",
            "output": "class SalaryCalculationService {\n    public double calculateSalary(double baseSalary, int yearsOfService) {\n        return baseSalary + (yearsOfService * 1000);\n    }\n    \n    public double calculateBonus(double baseSalary, double performanceRating) {\n        double baseBonus = baseSalary * 0.1;\n        if (performanceRating >= 4.0) {\n            baseBonus *= 1.5;\n        } else if (performanceRating >= 3.5) {\n            baseBonus *= 1.2;\n        }\n        return baseBonus;\n    }\n    \n    public double calculateAnnualSalary(double baseSalary, int yearsOfService, double performanceRating) {\n        double monthlySalary = calculateSalary(baseSalary, yearsOfService);\n        double bonus = calculateBonus(baseSalary, performanceRating);\n        return monthlySalary * 12 + bonus;\n    }\n}\n\nclass TaxCalculationService {\n    public double calculateTaxes(double salary) {\n        if (salary <= 3000) {\n            return salary * 0.15;\n        } else if (salary <= 6000) {\n            return salary * 0.20;\n        } else {\n            return salary * 0.25;\n        }\n    }\n}\n\nclass PayrollService {\n    private SalaryCalculationService salaryService;\n    private TaxCalculationService taxService;\n    \n    public PayrollService() {\n        this.salaryService = new SalaryCalculationService();\n        this.taxService = new TaxCalculationService();\n    }\n    \n    public void processPayroll(Employee employee) {\n        double monthlySalary = salaryService.calculateSalary(employee.getBaseSalary(), employee.getYearsOfService());\n        double taxes = taxService.calculateTaxes(monthlySalary);\n        double netPay = monthlySalary - taxes;\n        \n        System.out.println(\"Processing payroll for \" + employee.getName());\n        System.out.println(\"Gross Pay: $\" + monthlySalary);\n        System.out.println(\"Taxes: $\" + taxes);\n        System.out.println(\"Net Pay: $\" + netPay);\n    }\n    \n    public void printPaySlip(Employee employee) {\n        double salary = salaryService.calculateSalary(employee.getBaseSalary(), employee.getYearsOfService());\n        System.out.println(\"Pay slip for \" + employee.getName() + \": $\" + salary);\n    }\n}\n\nclass EmailService {\n    public void sendPayrollEmail(String email, String employeeName) {\n        if (email != null) {\n            System.out.println(\"Sending payroll email to \" + email);\n            System.out.println(\"Subject: Your monthly payslip\");\n            System.out.println(\"Body: Please find your payslip attached.\");\n        }\n    }\n    \n    public void notifyManager(String manager, String message) {\n        if (manager != null) {\n            System.out.println(\"Sending notification to manager \" + manager + \": \" + message);\n        }\n    }\n}\n\nclass VacationService {\n    private EmailService emailService;\n    \n    public VacationService() {\n        this.emailService = new EmailService();\n    }\n    \n    public boolean requestVacation(Employee employee, int days) {\n        if (employee.getUsedVacationDays() + days <= employee.getVacationDays()) {\n            employee.setUsedVacationDays(employee.getUsedVacationDays() + days);\n            System.out.println(\"Vacation request approved for \" + employee.getName() + \": \" + days + \" days\");\n            emailService.notifyManager(employee.getManager(), \"Vacation request approved for \" + employee.getName());\n            return true;\n        } else {\n            System.out.println(\"Vacation request denied for \" + employee.getName() + \": insufficient days\");\n            return false;\n        }\n    }\n}\n\nclass PerformanceService {\n    public void conductPerformanceReview(Employee employee) {\n        System.out.println(\"Conducting performance review for \" + employee.getName());\n        System.out.println(\"Current rating: \" + employee.getPerformanceRating());\n        employee.setLastReviewDate(new java.util.Date());\n        \n        if (employee.getPerformanceRating() >= 4.0) {\n            System.out.println(\"Excellent performance! Recommending for promotion.\");\n        } else if (employee.getPerformanceRating() < 2.0) {\n            System.out.println(\"Performance improvement needed.\");\n        }\n    }\n    \n    public void updatePerformanceRating(Employee employee, double rating) {\n        if (rating >= 1.0 && rating <= 5.0) {\n            employee.setPerformanceRating(rating);\n            System.out.println(\"Performance rating updated to \" + rating + \" for \" + employee.getName());\n        } else {\n            System.out.println(\"Invalid rating. Must be between 1.0 and 5.0\");\n        }\n    }\n}\n\nclass EmployeeIdGenerationService {\n    public String generateEmployeeId() {\n        return \"EMP\" + System.currentTimeMillis() % 10000;\n    }\n}\n\nclass ReportService {\n    public void printEmployeeReport(Employee employee) {\n        System.out.println(\"Employee Report for \" + employee.getName());\n        System.out.println(\"ID: \" + employee.getEmployeeId());\n        System.out.println(\"Department: \" + employee.getDepartment());\n        System.out.println(\"Position: \" + employee.getPosition());\n        System.out.println(\"Hire Date: \" + employee.getHireDate());\n        System.out.println(\"Years of Service: \" + employee.getYearsOfService());\n        System.out.println(\"Base Salary: $\" + employee.getBaseSalary());\n        System.out.println(\"Performance Rating: \" + employee.getPerformanceRating());\n        System.out.println(\"Vacation Days Remaining: \" + (employee.getVacationDays() - employee.getUsedVacationDays()));\n    }\n}\n\npublic class Employee {\n    private String name;\n    private double baseSalary;\n    private int yearsOfService;\n    private String department;\n    private String position;\n    private String employeeId;\n    private java.util.Date hireDate;\n    private java.util.Date lastReviewDate;\n    private double performanceRating;\n    private int vacationDays;\n    private int usedVacationDays;\n    private String manager;\n    private String email;\n    \n    public Employee(String name, double baseSalary, int yearsOfService) {\n        this.name = name;\n        this.baseSalary = baseSalary;\n        this.yearsOfService = yearsOfService;\n        \n        EmployeeIdGenerationService idService = new EmployeeIdGenerationService();\n        this.employeeId = idService.generateEmployeeId();\n        \n        this.hireDate = new java.util.Date();\n        this.vacationDays = 20;\n        this.usedVacationDays = 0;\n        this.performanceRating = 3.0;\n    }\n    \n    // Getters and Setters\n    public String getName() {\n        return name;\n    }\n    \n    public void setName(String name) {\n        this.name = name;\n    }\n    \n    public double getBaseSalary() {\n        return baseSalary;\n    }\n    \n    public void setBaseSalary(double baseSalary) {\n        this.baseSalary = baseSalary;\n    }\n    \n    public int getYearsOfService() {\n        return yearsOfService;\n    }\n    \n    public void setYearsOfService(int yearsOfService) {\n        this.yearsOfService = yearsOfService;\n    }\n    \n    public String getDepartment() {\n        return department;\n    }\n    \n    public void setDepartment(String department) {\n        this.department = department;\n    }\n    \n    public String getPosition() {\n        return position;\n    }\n    \n    public void setPosition(String position) {\n        this.position = position;\n    }\n    \n    public String getEmployeeId() {\n        return employeeId;\n    }\n    \n    public java.util.Date getHireDate() {\n        return hireDate;\n    }\n    \n    public java.util.Date getLastReviewDate() {\n        return lastReviewDate;\n    }\n    \n    public void setLastReviewDate(java.util.Date lastReviewDate) {\n        this.lastReviewDate = lastReviewDate;\n    }\n    \n    public double getPerformanceRating() {\n        return performanceRating;\n    }\n    \n    public void setPerformanceRating(double performanceRating) {\n        this.performanceRating = performanceRating;\n    }\n    \n    public int getVacationDays() {\n        return vacationDays;\n    }\n    \n    public void setVacationDays(int vacationDays) {\n        this.vacationDays = vacationDays;\n    }\n    \n    public int getUsedVacationDays() {\n        return usedVacationDays;\n    }\n    \n    public void setUsedVacationDays(int usedVacationDays) {\n        this.usedVacationDays = usedVacationDays;\n    }\n    \n    public String getManager() {\n        return manager;\n    }\n    \n    public void setManager(String manager) {\n        this.manager = manager;\n    }\n    \n    public String getEmail() {\n        return email;\n    }\n    \n    public void setEmail(String email) {\n        this.email = email;\n    }\n}",
            "level": "MODERATE",
            "language": "JAVA",
            "violation": "SRP",
            "description": "Employee salary payslip system"
        },
        {
            "input": "class FileStorage {\n    private String basePath;\n    \n    public FileStorage(String basePath) {\n        this.basePath = basePath;\n    }\n    \n    public void saveToFile(String filename, String content) {\n        System.out.println(\"Saving content to file: \" + basePath + \"/\" + filename);\n    }\n    \n    public String loadFromFile(String filename) {\n        System.out.println(\"Loading content from file: \" + basePath + \"/\" + filename);\n        return \"file content\";\n    }\n    \n    public void deleteFile(String filename) {\n        System.out.println(\"Deleting file: \" + basePath + \"/\" + filename);\n    }\n}\n\npublic class Book {\n    private String title;\n    private String author;\n    private String content;\n    private String isbn;\n    private java.util.Date publishDate;\n    private String genre;\n    private int pageCount;\n    private double price;\n    private String publisher;\n    private java.util.List<String> reviews;\n    private double averageRating;\n    private int totalSales;\n    \n    private FileStorage fileStorage;\n    \n    public Book(String title, String author, String content) {\n        this.title = title;\n        this.author = author;\n        this.content = content;\n        this.publishDate = new java.util.Date();\n        this.reviews = new java.util.ArrayList<>();\n        this.averageRating = 0.0;\n        this.totalSales = 0;\n        this.fileStorage = new FileStorage(\"/books/storage\");\n        \n        generateISBN();\n        calculatePageCount();\n    }\n    \n    public void printBook() {\n        System.out.println(\"Title: \" + title);\n        System.out.println(\"Author: \" + author);\n        System.out.println(\"Content: \" + content);\n    }\n    \n    public void saveToFile(String filename) {\n        String bookData = formatBookData();\n        fileStorage.saveToFile(filename, bookData);\n    }\n    \n    public String formatBookData() {\n        return \"TITLE: \" + title + \"\\nAUTHOR: \" + author + \"\\nISBN: \" + isbn + \"\\nPAGES: \" + pageCount + \"\\nPRICE: $\" + price + \"\\nRATING: \" + averageRating + \"\\nSALES: \" + totalSales + \"\\nCONTENT: \" + content;\n    }\n    \n    public void generateISBN() {\n        this.isbn = \"978-\" + (System.currentTimeMillis() % 10000) + \"-\" + String.format(\"%03d\", (int)(Math.random() * 1000));\n    }\n    \n    public void calculatePageCount() {\n        this.pageCount = content != null ? Math.max(1, content.length() / 250) : 1;\n    }\n    \n    public boolean validateISBN(String isbn) {\n        if (isbn == null || isbn.length() < 10) return false;\n        String cleanISBN = isbn.replaceAll(\"[^0-9X]\", \"\");\n        return cleanISBN.length() == 10 || cleanISBN.length() == 13;\n    }\n    \n    public boolean validatePrice(double price) {\n        return price >= 0.0 && price <= 999.99;\n    }\n    \n    public void addReview(String review, double rating) {\n        if (rating >= 1.0 && rating <= 5.0) {\n            reviews.add(review);\n            averageRating = reviews.size() == 1 ? rating : (averageRating * (reviews.size() - 1) + rating) / reviews.size();\n            System.out.println(\"Review added successfully\");\n        } else {\n            System.out.println(\"Invalid rating. Must be between 1.0 and 5.0\");\n        }\n    }\n    \n    public void recordSale() {\n        totalSales++;\n        System.out.println(\"SALES LOG: Book sold - \" + title + \" (ISBN: \" + isbn + \") on \" + new java.util.Date());\n        System.out.println(\"INVENTORY: Updating stock for book: \" + isbn);\n    }\n    \n    public double calculateRoyalty(double salePrice) {\n        double rate = totalSales > 1000 ? 0.15 : (totalSales > 500 ? 0.12 : 0.10);\n        return salePrice * rate;\n    }\n    \n    public String generateSalesReport() {\n        return \"=== SALES REPORT ===\\nTitle: \" + title + \"\\nAuthor: \" + author + \"\\nISBN: \" + isbn + \"\\nTotal Sales: \" + totalSales + \"\\nAverage Rating: \" + String.format(\"%.2f\", averageRating) + \"\\nNumber of Reviews: \" + reviews.size() + \"\\nCurrent Price: $\" + price + \"\\nEstimated Revenue: $\" + String.format(\"%.2f\", totalSales * price);\n    }\n    \n    public void printFormattedBook() {\n        System.out.println(\"====================\\nBOOK INFORMATION\\n====================\\nTitle: \" + title + \"\\nAuthor: \" + author + \"\\nISBN: \" + isbn + \"\\nGenre: \" + genre + \"\\nPages: \" + pageCount + \"\\nPrice: $\" + price + \"\\nPublisher: \" + publisher + \"\\nRating: \" + averageRating + \"/5.0\\nSales: \" + totalSales + \"\\n====================\\nCONTENT:\\n\" + content + \"\\n====================\");\n    }\n    \n    public void exportToJSON() {\n        String json = \"{\\n  \\\"title\\\": \\\"\" + title + \"\\\",\\n  \\\"author\\\": \\\"\" + author + \"\\\",\\n  \\\"isbn\\\": \\\"\" + isbn + \"\\\",\\n  \\\"genre\\\": \\\"\" + genre + \"\\\",\\n  \\\"pages\\\": \" + pageCount + \",\\n  \\\"price\\\": \" + price + \",\\n  \\\"rating\\\": \" + averageRating + \",\\n  \\\"sales\\\": \" + totalSales + \"\\n}\";\n        fileStorage.saveToFile(isbn + \".json\", json);\n    }\n    \n    public String getTitle() {\n        return title;\n    }\n    \n    public void setTitle(String title) {\n        this.title = title;\n    }\n    \n    public String getAuthor() {\n        return author;\n    }\n    \n    public void setAuthor(String author) {\n        this.author = author;\n    }\n    \n    public String getContent() {\n        return content;\n    }\n    \n    public void setContent(String content) {\n        this.content = content;\n        calculatePageCount();\n    }\n    \n    public String getIsbn() {\n        return isbn;\n    }\n    \n    public String getGenre() {\n        return genre;\n    }\n    \n    public void setGenre(String genre) {\n        this.genre = genre;\n    }\n    \n    public double getPrice() {\n        return price;\n    }\n    \n    public void setPrice(double price) {\n        if (validatePrice(price)) {\n            this.price = price;\n        }\n    }\n    \n    public String getPublisher() {\n        return publisher;\n    }\n    \n    public void setPublisher(String publisher) {\n        this.publisher = publisher;\n    }\n    \n    public double getAverageRating() {\n        return averageRating;\n    }\n    \n    public int getTotalSales() {\n        return totalSales;\n    }\n    \n    public int getPageCount() {\n        return pageCount;\n    }\n}",
            "output": "class FileStorage {\n    private String basePath;\n    \n    public FileStorage(String basePath) {\n        this.basePath = basePath;\n    }\n    \n    public void saveToFile(String filename, String content) {\n        System.out.println(\"Saving content to file: \" + basePath + \"/\" + filename);\n    }\n    \n    public String loadFromFile(String filename) {\n        System.out.println(\"Loading content from file: \" + basePath + \"/\" + filename);\n        return \"file content\";\n    }\n    \n    public void deleteFile(String filename) {\n        System.out.println(\"Deleting file: \" + basePath + \"/\" + filename);\n    }\n}\n\nclass ISBNGenerationService {\n    public String generateISBN() {\n        return \"978-\" + (System.currentTimeMillis() % 10000) + \"-\" + String.format(\"%03d\", (int)(Math.random() * 1000));\n    }\n}\n\nclass PageCalculationService {\n    public int calculatePageCount(String content) {\n        return content != null ? Math.max(1, content.length() / 250) : 1;\n    }\n}\n\nclass ValidationService {\n    public boolean validateISBN(String isbn) {\n        if (isbn == null || isbn.length() < 10) return false;\n        String cleanISBN = isbn.replaceAll(\"[^0-9X]\", \"\");\n        return cleanISBN.length() == 10 || cleanISBN.length() == 13;\n    }\n    \n    public boolean validatePrice(double price) {\n        return price >= 0.0 && price <= 999.99;\n    }\n    \n    public boolean validateRating(double rating) {\n        return rating >= 1.0 && rating <= 5.0;\n    }\n}\n\nclass ReviewManagementService {\n    public void addReview(Book book, String review, double rating) {\n        ValidationService validator = new ValidationService();\n        if (validator.validateRating(rating)) {\n            book.getReviews().add(review);\n            book.setAverageRating(calculateNewAverageRating(book.getAverageRating(), book.getReviews().size(), rating));\n            System.out.println(\"Review added successfully\");\n        } else {\n            System.out.println(\"Invalid rating. Must be between 1.0 and 5.0\");\n        }\n    }\n    \n    private double calculateNewAverageRating(double currentAverage, int reviewCount, double newRating) {\n        return reviewCount == 1 ? newRating : (currentAverage * (reviewCount - 1) + newRating) / reviewCount;\n    }\n}\n\nclass SalesManagementService {\n    public void recordSale(Book book) {\n        book.setTotalSales(book.getTotalSales() + 1);\n        logSaleActivity(book);\n        updateInventory(book);\n    }\n    \n    private void logSaleActivity(Book book) {\n        System.out.println(\"SALES LOG: Book sold - \" + book.getTitle() + \" (ISBN: \" + book.getIsbn() + \") on \" + new java.util.Date());\n    }\n    \n    private void updateInventory(Book book) {\n        System.out.println(\"INVENTORY: Updating stock for book: \" + book.getIsbn());\n    }\n}\n\nclass RoyaltyCalculationService {\n    public double calculateRoyalty(double salePrice, int totalSales) {\n        double rate = totalSales > 1000 ? 0.15 : (totalSales > 500 ? 0.12 : 0.10);\n        return salePrice * rate;\n    }\n}\n\nclass DataFormattingService {\n    public String formatBookData(Book book) {\n        return \"TITLE: \" + book.getTitle() + \"\\nAUTHOR: \" + book.getAuthor() + \"\\nISBN: \" + book.getIsbn() + \n               \"\\nPAGES: \" + book.getPageCount() + \"\\nPRICE: $\" + book.getPrice() + \"\\nRATING: \" + book.getAverageRating() + \n               \"\\nSALES: \" + book.getTotalSales() + \"\\nCONTENT: \" + book.getContent();\n    }\n    \n    public String formatBookForDisplay(Book book) {\n        return \"====================\\nBOOK INFORMATION\\n====================\\nTitle: \" + book.getTitle() + \n               \"\\nAuthor: \" + book.getAuthor() + \"\\nISBN: \" + book.getIsbn() + \"\\nGenre: \" + book.getGenre() + \n               \"\\nPages: \" + book.getPageCount() + \"\\nPrice: $\" + book.getPrice() + \"\\nPublisher: \" + book.getPublisher() + \n               \"\\nRating: \" + book.getAverageRating() + \"/5.0\\nSales: \" + book.getTotalSales() + \n               \"\\n====================\\nCONTENT:\\n\" + book.getContent() + \"\\n====================\";\n    }\n    \n    public String formatAsJSON(Book book) {\n        return \"{\\n  \\\"title\\\": \\\"\" + book.getTitle() + \"\\\",\\n  \\\"author\\\": \\\"\" + book.getAuthor() + \n               \"\\\",\\n  \\\"isbn\\\": \\\"\" + book.getIsbn() + \"\\\",\\n  \\\"genre\\\": \\\"\" + book.getGenre() + \n               \"\\\",\\n  \\\"pages\\\": \" + book.getPageCount() + \",\\n  \\\"price\\\": \" + book.getPrice() + \n               \",\\n  \\\"rating\\\": \" + book.getAverageRating() + \",\\n  \\\"sales\\\": \" + book.getTotalSales() + \"\\n}\";\n    }\n}\n\nclass ReportGenerationService {\n    public String generateSalesReport(Book book) {\n        return \"=== SALES REPORT ===\\nTitle: \" + book.getTitle() + \"\\nAuthor: \" + book.getAuthor() + \n               \"\\nISBN: \" + book.getIsbn() + \"\\nTotal Sales: \" + book.getTotalSales() + \n               \"\\nAverage Rating: \" + String.format(\"%.2f\", book.getAverageRating()) + \n               \"\\nNumber of Reviews: \" + book.getReviews().size() + \"\\nCurrent Price: $\" + book.getPrice() + \n               \"\\nEstimated Revenue: $\" + String.format(\"%.2f\", book.getTotalSales() * book.getPrice());\n    }\n}\n\nclass BookPrintingService {\n    public void printBook(Book book) {\n        System.out.println(\"Title: \" + book.getTitle());\n        System.out.println(\"Author: \" + book.getAuthor());\n        System.out.println(\"Content: \" + book.getContent());\n    }\n    \n    public void printFormattedBook(Book book) {\n        DataFormattingService formatter = new DataFormattingService();\n        String formattedBook = formatter.formatBookForDisplay(book);\n        System.out.println(formattedBook);\n    }\n}\n\nclass BookFileService {\n    private FileStorage fileStorage;\n    private DataFormattingService formatter;\n    \n    public BookFileService() {\n        this.fileStorage = new FileStorage(\"/books/storage\");\n        this.formatter = new DataFormattingService();\n    }\n    \n    public void saveToFile(Book book, String filename) {\n        String bookData = formatter.formatBookData(book);\n        fileStorage.saveToFile(filename, bookData);\n    }\n    \n    public void exportToJSON(Book book) {\n        String json = formatter.formatAsJSON(book);\n        fileStorage.saveToFile(book.getIsbn() + \".json\", json);\n    }\n}\n\npublic class Book {\n    private String title;\n    private String author;\n    private String content;\n    private String isbn;\n    private java.util.Date publishDate;\n    private String genre;\n    private int pageCount;\n    private double price;\n    private String publisher;\n    private java.util.List<String> reviews;\n    private double averageRating;\n    private int totalSales;\n    \n    public Book(String title, String author, String content) {\n        this.title = title;\n        this.author = author;\n        this.content = content;\n        this.publishDate = new java.util.Date();\n        this.reviews = new java.util.ArrayList<>();\n        this.averageRating = 0.0;\n        this.totalSales = 0;\n        \n        initializeBook();\n    }\n    \n    private void initializeBook() {\n        ISBNGenerationService isbnService = new ISBNGenerationService();\n        this.isbn = isbnService.generateISBN();\n        \n        PageCalculationService pageService = new PageCalculationService();\n        this.pageCount = pageService.calculatePageCount(content);\n    }\n    \n    // Getters and Setters\n    public String getTitle() {\n        return title;\n    }\n    \n    public void setTitle(String title) {\n        this.title = title;\n    }\n    \n    public String getAuthor() {\n        return author;\n    }\n    \n    public void setAuthor(String author) {\n        this.author = author;\n    }\n    \n    public String getContent() {\n        return content;\n    }\n    \n    public void setContent(String content) {\n        this.content = content;\n        PageCalculationService pageService = new PageCalculationService();\n        this.pageCount = pageService.calculatePageCount(content);\n    }\n    \n    public String getIsbn() {\n        return isbn;\n    }\n    \n    public java.util.Date getPublishDate() {\n        return publishDate;\n    }\n    \n    public String getGenre() {\n        return genre;\n    }\n    \n    public void setGenre(String genre) {\n        this.genre = genre;\n    }\n    \n    public int getPageCount() {\n        return pageCount;\n    }\n    \n    public double getPrice() {\n        return price;\n    }\n    \n    public void setPrice(double price) {\n        ValidationService validator = new ValidationService();\n        if (validator.validatePrice(price)) {\n            this.price = price;\n        }\n    }\n    \n    public String getPublisher() {\n        return publisher;\n    }\n    \n    public void setPublisher(String publisher) {\n        this.publisher = publisher;\n    }\n    \n    public java.util.List<String> getReviews() {\n        return reviews;\n    }\n    \n    public double getAverageRating() {\n        return averageRating;\n    }\n    \n    public void setAverageRating(double averageRating) {\n        this.averageRating = averageRating;\n    }\n    \n    public int getTotalSales() {\n        return totalSales;\n    }\n    \n    public void setTotalSales(int totalSales) {\n        this.totalSales = totalSales;\n    }\n}",
            "level": "MODERATE",
            "language": "JAVA",
            "violation": "SRP",
            "description": "Book printing file saving"
        },
        {
            "input": "class InventoryDatabase {\n    private String connectionString;\n    \n    public InventoryDatabase(String connectionString) {\n        this.connectionString = connectionString;\n    }\n    \n    public void updateStock(String productId, int quantity) {\n        System.out.println(\"Updating stock in database - Product: \" + productId + \", Quantity: \" + quantity);\n    }\n    \n    public void logTransaction(String type, String details) {\n        System.out.println(\"[DB LOG] \" + type + \": \" + details);\n    }\n}\n\nclass NotificationService {\n    private String apiKey;\n    \n    public NotificationService(String apiKey) {\n        this.apiKey = apiKey;\n    }\n    \n    public void sendEmail(String recipient, String subject, String body) {\n        System.out.println(\"Sending email to: \" + recipient + \", Subject: \" + subject);\n    }\n}\n\npublic class Product {\n    private String name;\n    private double price;\n    private String productId;\n    private int stockQuantity;\n    private java.util.List<String> customerReviews;\n    private double averageRating;\n    private int totalSales;\n    private double costPrice;\n    \n    private InventoryDatabase database;\n    private NotificationService notificationService;\n    \n    public Product(String name, double price) {\n        this.name = name;\n        this.price = price;\n        this.productId = \"PRD-\" + System.currentTimeMillis() % 100000;\n        this.customerReviews = new java.util.ArrayList<>();\n        this.averageRating = 0.0;\n        this.totalSales = 0;\n        this.stockQuantity = 100;\n        this.costPrice = price * 0.6;\n        this.database = new InventoryDatabase(\"jdbc:mysql://localhost:3306/inventory\");\n        this.notificationService = new NotificationService(\"API_KEY_12345\");\n    }\n    \n    public double applyDiscount(double percentage) {\n        return price * (1 - percentage / 100);\n    }\n    \n    public void displayProduct() {\n        System.out.println(\"Product: \" + name + \", Price: $\" + price);\n    }\n    \n    public double calculateDiscountedPrice(double discountPercentage) {\n        double discounted = price * (1 - discountPercentage / 100);\n        database.logTransaction(\"DISCOUNT_APPLIED\", \"Product: \" + productId + \", Discount: \" + discountPercentage + \"%\");\n        return discounted;\n    }\n    \n    public double calculateProfitMargin() {\n        return ((price - costPrice) / price) * 100;\n    }\n    \n    public double calculateShippingCost(String destination) {\n        return destination.equalsIgnoreCase(\"international\") ? 15.99 : 5.99;\n    }\n    \n    public void addCustomerReview(String review, double rating) {\n        if (rating >= 1.0 && rating <= 5.0) {\n            customerReviews.add(review);\n            averageRating = customerReviews.size() == 1 ? rating : (averageRating * (customerReviews.size() - 1) + rating) / customerReviews.size();\n            database.logTransaction(\"REVIEW_ADDED\", \"Product: \" + productId + \", Rating: \" + rating);\n        }\n    }\n    \n    public void processSale(int quantity, String customerEmail) {\n        if (stockQuantity >= quantity) {\n            stockQuantity -= quantity;\n            totalSales += quantity;\n            database.updateStock(productId, stockQuantity);\n            notificationService.sendEmail(customerEmail, \"Purchase Confirmation\", \"Receipt for \" + name);\n            if (stockQuantity <= 10) {\n                notificationService.sendEmail(\"inventory@company.com\", \"Low Stock Alert\", \"Product \" + name + \" low stock\");\n            }\n            database.logTransaction(\"SALE_COMPLETED\", \"Product: \" + productId + \", Quantity: \" + quantity);\n        }\n    }\n    \n    public void restockProduct(int quantity, String supplierEmail) {\n        stockQuantity += quantity;\n        database.updateStock(productId, stockQuantity);\n        notificationService.sendEmail(supplierEmail, \"Restock Confirmation\", \"Added \" + quantity + \" units\");\n        database.logTransaction(\"RESTOCK_COMPLETED\", \"Product: \" + productId + \", Added: \" + quantity);\n    }\n    \n    public String generateProductReport() {\n        return \"Product: \" + name + \"\\nID: \" + productId + \"\\nPrice: $\" + price + \"\\nStock: \" + stockQuantity + \"\\nSales: \" + totalSales + \"\\nRating: \" + averageRating;\n    }\n    \n    public void displayDetailedProduct() {\n        System.out.println(name + \" (\" + productId + \") - $\" + price + \" - Stock: \" + stockQuantity + \" - Rating: \" + averageRating);\n    }\n    \n    public String getName() {\n        return name;\n    }\n    \n    public double getPrice() {\n        return price;\n    }\n    \n    public void setPrice(double price) {\n        this.price = price;\n    }\n}",
            "output": "class InventoryDatabase {\n    private String connectionString;\n    \n    public InventoryDatabase(String connectionString) {\n        this.connectionString = connectionString;\n    }\n    \n    public void updateStock(String productId, int quantity) {\n        System.out.println(\"Updating stock in database - Product: \" + productId + \", Quantity: \" + quantity);\n    }\n    \n    public void logTransaction(String type, String details) {\n        System.out.println(\"[DB LOG] \" + type + \": \" + details);\n    }\n}\n\nclass NotificationService {\n    private String apiKey;\n    \n    public NotificationService(String apiKey) {\n        this.apiKey = apiKey;\n    }\n    \n    public void sendEmail(String recipient, String subject, String body) {\n        System.out.println(\"Sending email to: \" + recipient + \", Subject: \" + subject);\n    }\n}\n\nclass ProductIdGenerationService {\n    public String generateProductId() {\n        return \"PRD-\" + System.currentTimeMillis() % 100000;\n    }\n}\n\nclass PricingCalculationService {\n    public double applyDiscount(double price, double percentage) {\n        return price * (1 - percentage / 100);\n    }\n    \n    public double calculateDiscountedPrice(double price, double discountPercentage) {\n        return price * (1 - discountPercentage / 100);\n    }\n    \n    public double calculateProfitMargin(double price, double costPrice) {\n        return ((price - costPrice) / price) * 100;\n    }\n    \n    public double calculateShippingCost(String destination) {\n        return destination.equalsIgnoreCase(\"international\") ? 15.99 : 5.99;\n    }\n}\n\nclass ReviewManagementService {\n    private InventoryDatabase database;\n    \n    public ReviewManagementService() {\n        this.database = new InventoryDatabase(\"jdbc:mysql://localhost:3306/inventory\");\n    }\n    \n    public void addCustomerReview(Product product, String review, double rating) {\n        if (rating >= 1.0 && rating <= 5.0) {\n            product.getCustomerReviews().add(review);\n            product.setAverageRating(calculateNewAverageRating(product.getAverageRating(), product.getCustomerReviews().size(), rating));\n            database.logTransaction(\"REVIEW_ADDED\", \"Product: \" + product.getProductId() + \", Rating: \" + rating);\n        }\n    }\n    \n    private double calculateNewAverageRating(double currentAverage, int reviewCount, double newRating) {\n        return reviewCount == 1 ? newRating : (currentAverage * (reviewCount - 1) + newRating) / reviewCount;\n    }\n}\n\nclass SalesProcessingService {\n    private InventoryDatabase database;\n    private NotificationService notificationService;\n    private StockAlertService stockAlertService;\n    \n    public SalesProcessingService() {\n        this.database = new InventoryDatabase(\"jdbc:mysql://localhost:3306/inventory\");\n        this.notificationService = new NotificationService(\"API_KEY_12345\");\n        this.stockAlertService = new StockAlertService();\n    }\n    \n    public void processSale(Product product, int quantity, String customerEmail) {\n        if (product.getStockQuantity() >= quantity) {\n            product.setStockQuantity(product.getStockQuantity() - quantity);\n            product.setTotalSales(product.getTotalSales() + quantity);\n            \n            database.updateStock(product.getProductId(), product.getStockQuantity());\n            notificationService.sendEmail(customerEmail, \"Purchase Confirmation\", \"Receipt for \" + product.getName());\n            \n            stockAlertService.checkLowStockAlert(product, notificationService);\n            \n            database.logTransaction(\"SALE_COMPLETED\", \"Product: \" + product.getProductId() + \", Quantity: \" + quantity);\n        }\n    }\n}\n\nclass StockAlertService {\n    public void checkLowStockAlert(Product product, NotificationService notificationService) {\n        if (product.getStockQuantity() <= 10) {\n            notificationService.sendEmail(\"inventory@company.com\", \"Low Stock Alert\", \"Product \" + product.getName() + \" low stock\");\n        }\n    }\n}\n\nclass InventoryManagementService {\n    private InventoryDatabase database;\n    private NotificationService notificationService;\n    \n    public InventoryManagementService() {\n        this.database = new InventoryDatabase(\"jdbc:mysql://localhost:3306/inventory\");\n        this.notificationService = new NotificationService(\"API_KEY_12345\");\n    }\n    \n    public void restockProduct(Product product, int quantity, String supplierEmail) {\n        product.setStockQuantity(product.getStockQuantity() + quantity);\n        database.updateStock(product.getProductId(), product.getStockQuantity());\n        notificationService.sendEmail(supplierEmail, \"Restock Confirmation\", \"Added \" + quantity + \" units\");\n        database.logTransaction(\"RESTOCK_COMPLETED\", \"Product: \" + product.getProductId() + \", Added: \" + quantity);\n    }\n}\n\nclass ReportGenerationService {\n    public String generateProductReport(Product product) {\n        return \"Product: \" + product.getName() + \"\\nID: \" + product.getProductId() + \"\\nPrice: $\" + product.getPrice() + \n               \"\\nStock: \" + product.getStockQuantity() + \"\\nSales: \" + product.getTotalSales() + \"\\nRating: \" + product.getAverageRating();\n    }\n}\n\nclass ProductDisplayService {\n    public void displayProduct(Product product) {\n        System.out.println(\"Product: \" + product.getName() + \", Price: $\" + product.getPrice());\n    }\n    \n    public void displayDetailedProduct(Product product) {\n        System.out.println(product.getName() + \" (\" + product.getProductId() + \") - $\" + product.getPrice() + \n                          \" - Stock: \" + product.getStockQuantity() + \" - Rating: \" + product.getAverageRating());\n    }\n}\n\nclass DiscountService {\n    private InventoryDatabase database;\n    private PricingCalculationService pricingService;\n    \n    public DiscountService() {\n        this.database = new InventoryDatabase(\"jdbc:mysql://localhost:3306/inventory\");\n        this.pricingService = new PricingCalculationService();\n    }\n    \n    public double calculateDiscountedPrice(Product product, double discountPercentage) {\n        double discounted = pricingService.calculateDiscountedPrice(product.getPrice(), discountPercentage);\n        database.logTransaction(\"DISCOUNT_APPLIED\", \"Product: \" + product.getProductId() + \", Discount: \" + discountPercentage + \"%\");\n        return discounted;\n    }\n}\n\npublic class Product {\n    private String name;\n    private double price;\n    private String productId;\n    private int stockQuantity;\n    private java.util.List<String> customerReviews;\n    private double averageRating;\n    private int totalSales;\n    private double costPrice;\n    \n    public Product(String name, double price) {\n        this.name = name;\n        this.price = price;\n        this.customerReviews = new java.util.ArrayList<>();\n        this.averageRating = 0.0;\n        this.totalSales = 0;\n        this.stockQuantity = 100;\n        this.costPrice = price * 0.6;\n        \n        initializeProduct();\n    }\n    \n    private void initializeProduct() {\n        ProductIdGenerationService idService = new ProductIdGenerationService();\n        this.productId = idService.generateProductId();\n    }\n    \n    // Getters and Setters\n    public String getName() {\n        return name;\n    }\n    \n    public void setName(String name) {\n        this.name = name;\n    }\n    \n    public double getPrice() {\n        return price;\n    }\n    \n    public void setPrice(double price) {\n        this.price = price;\n    }\n    \n    public String getProductId() {\n        return productId;\n    }\n    \n    public int getStockQuantity() {\n        return stockQuantity;\n    }\n    \n    public void setStockQuantity(int stockQuantity) {\n        this.stockQuantity = stockQuantity;\n    }\n    \n    public java.util.List<String> getCustomerReviews() {\n        return customerReviews;\n    }\n    \n    public double getAverageRating() {\n        return averageRating;\n    }\n    \n    public void setAverageRating(double averageRating) {\n        this.averageRating = averageRating;\n    }\n    \n    public int getTotalSales() {\n        return totalSales;\n    }\n    \n    public void setTotalSales(int totalSales) {\n        this.totalSales = totalSales;\n    }\n    \n    public double getCostPrice() {\n        return costPrice;\n    }\n    \n    public void setCostPrice(double costPrice) {\n        this.costPrice = costPrice;\n    }\n}",
            "level": "MODERATE",
            "language": "JAVA",
            "violation": "SRP",
            "description": "Product discount display system"
        },
        {
            "input": "class DatabaseService {\n    private String connectionString;\n    \n    public DatabaseService(String connectionString) {\n        this.connectionString = connectionString;\n    }\n    \n    public void saveUser(User user) {\n        System.out.println(\"Saving user to database: \" + user.getName());\n    }\n    \n    public void updateUser(User user) {\n        System.out.println(\"Updating user in database: \" + user.getName());\n    }\n    \n    public void deleteUser(String userId) {\n        System.out.println(\"Deleting user from database: \" + userId);\n    }\n}\n\nclass EmailService {\n    private String smtpServer;\n    private int port;\n    \n    public EmailService(String smtpServer, int port) {\n        this.smtpServer = smtpServer;\n        this.port = port;\n    }\n    \n    public void sendEmail(String to, String subject, String body) {\n        System.out.println(\"Sending email to: \" + to);\n        System.out.println(\"Subject: \" + subject);\n    }\n}\n\nclass SMSService {\n    private String apiKey;\n    \n    public SMSService(String apiKey) {\n        this.apiKey = apiKey;\n    }\n    \n    public void sendSMS(String phoneNumber, String message) {\n        System.out.println(\"Sending SMS to: \" + phoneNumber);\n        System.out.println(\"Message: \" + message);\n    }\n}\n\nclass FileService {\n    private String uploadPath;\n    \n    public FileService(String uploadPath) {\n        this.uploadPath = uploadPath;\n    }\n    \n    public String uploadFile(byte[] fileData, String fileName) {\n        System.out.println(\"Uploading file: \" + fileName);\n        return uploadPath + \"/\" + fileName;\n    }\n}\n\nclass SecurityConfig {\n    public static final int MAX_LOGIN_ATTEMPTS = 5;\n    public static final int PASSWORD_EXPIRY_DAYS = 90;\n}\n\npublic class User {\n    private String name;\n    private String email;\n    private String password;\n    private boolean isActive;\n    private String role;\n    private java.util.Date lastLogin;\n    private int loginAttempts;\n    private String phoneNumber;\n    private java.util.Date registrationDate;\n    private java.util.List<String> loginHistory;\n    private java.util.Map<String, String> preferences;\n    private String profilePictureUrl;\n    private boolean emailVerified;\n    private java.util.List<String> notifications;\n    \n    private DatabaseService dbService;\n    private EmailService emailService;\n    private SMSService smsService;\n    private FileService fileService;\n    \n    public User(String name, String email) {\n        this.name = name;\n        this.email = email;\n        this.isActive = true;\n        this.role = \"USER\";\n        this.loginAttempts = 0;\n        this.registrationDate = new java.util.Date();\n        this.loginHistory = new java.util.ArrayList<>();\n        this.preferences = new java.util.HashMap<>();\n        this.notifications = new java.util.ArrayList<>();\n        this.emailVerified = false;\n        \n        this.dbService = new DatabaseService(\"jdbc:mysql://localhost:3306/userdb\");\n        this.emailService = new EmailService(\"smtp.company.com\", 587);\n        this.smsService = new SMSService(\"api_key_12345\");\n        this.fileService = new FileService(\"/uploads\");\n        \n        initializeDefaultPreferences();\n    }\n    \n    public void saveToDatabase() {\n        dbService.saveUser(this);\n    }\n    \n    public void sendWelcomeEmail() {\n        String subject = \"Welcome to our platform!\";\n        String body = createWelcomeEmailBody();\n        emailService.sendEmail(email, subject, body);\n    }\n    \n    public void sendPasswordResetEmail() {\n        String resetToken = generatePasswordResetToken();\n        String subject = \"Password Reset Request\";\n        String body = createPasswordResetEmailBody(resetToken);\n        emailService.sendEmail(email, subject, body);\n    }\n    \n    public void sendSMSVerification() {\n        if (phoneNumber != null) {\n            String smsCode = generateSMSVerificationCode();\n            String message = \"Your verification code: \" + smsCode;\n            smsService.sendSMS(phoneNumber, message);\n        }\n    }\n    \n    public String createWelcomeEmailBody() {\n        return \"Dear \" + name + \",\\n\\nWelcome to our platform! Complete your profile and explore our features.\\n\\nBest regards,\\nThe Team\";\n    }\n    \n    public String createPasswordResetEmailBody(String token) {\n        return \"Hello \" + name + \",\\n\\nReset your password: https://oursite.com/reset?token=\" + token + \"\\n\\nLink expires in 24 hours.\";\n    }\n    \n    public String generatePasswordResetToken() {\n        long timestamp = System.currentTimeMillis();\n        double random = Math.random();\n        return \"RESET_\" + timestamp + \"_\" + String.valueOf(random).substring(2, 8);\n    }\n    \n    public String generateSMSVerificationCode() {\n        return String.valueOf((int)(Math.random() * 900000) + 100000);\n    }\n    \n    public boolean validateEmailFormat(String email) {\n        if (email == null || email.trim().isEmpty()) {\n            return false;\n        }\n        return email.contains(\"@\") && email.contains(\".\") && email.split(\"@\").length == 2;\n    }\n    \n    public boolean validatePasswordStrength(String password) {\n        if (password == null || password.length() < 8) {\n            return false;\n        }\n        \n        boolean hasUpper = false, hasLower = false, hasDigit = false, hasSpecial = false;\n        \n        for (char c : password.toCharArray()) {\n            if (Character.isUpperCase(c)) hasUpper = true;\n            else if (Character.isLowerCase(c)) hasLower = true;\n            else if (Character.isDigit(c)) hasDigit = true;\n            else if (\"!@#$%^&*()_+-=[]{}|;:,.<>?\".indexOf(c) != -1) hasSpecial = true;\n        }\n        \n        return hasUpper && hasLower && hasDigit && hasSpecial;\n    }\n    \n    public String hashPassword(String password) {\n        int hash = 7;\n        for (int i = 0; i < password.length(); i++) {\n            hash = hash * 31 + password.charAt(i);\n        }\n        return \"HASH:\" + Integer.toHexString(Math.abs(hash)).toUpperCase();\n    }\n    \n    public boolean verifyPassword(String plainPassword, String hashedPassword) {\n        String computedHash = hashPassword(plainPassword);\n        return computedHash.equals(hashedPassword);\n    }\n    \n    public boolean authenticate(String password) {\n        if (loginAttempts >= SecurityConfig.MAX_LOGIN_ATTEMPTS) {\n            System.out.println(\"Account locked due to too many failed attempts\");\n            return false;\n        }\n        \n        if (this.password != null && verifyPassword(password, this.password)) {\n            loginAttempts = 0;\n            lastLogin = new java.util.Date();\n            addToLoginHistory(\"Successful login from IP: 192.168.1.100\");\n            return true;\n        }\n        \n        loginAttempts++;\n        addToLoginHistory(\"Failed login attempt from IP: 192.168.1.100\");\n        return false;\n    }\n    \n    public void lockAccount() {\n        this.isActive = false;\n        logSecurityEvent(\"ACCOUNT_LOCKED\", \"Account locked for user: \" + name);\n        sendAccountNotification(\"Your account has been locked due to security reasons.\");\n    }\n    \n    public void unlockAccount() {\n        this.isActive = true;\n        this.loginAttempts = 0;\n        logSecurityEvent(\"ACCOUNT_UNLOCKED\", \"Account unlocked for user: \" + name);\n        sendAccountNotification(\"Your account has been successfully unlocked.\");\n    }\n    \n    public void logSecurityEvent(String eventType, String description) {\n        java.util.Date timestamp = new java.util.Date();\n        String logEntry = \"[\" + timestamp + \"] \" + eventType + \": \" + description;\n        System.out.println(\"SECURITY LOG: \" + logEntry);\n    }\n    \n    public void sendAccountNotification(String message) {\n        addNotification(message);\n        if (emailVerified) {\n            emailService.sendEmail(email, \"Account Security Alert\", message);\n        }\n        if (phoneNumber != null) {\n            smsService.sendSMS(phoneNumber, \"Security Alert: \" + message);\n        }\n    }\n    \n    public void addToLoginHistory(String entry) {\n        String timestampedEntry = new java.util.Date() + \": \" + entry;\n        loginHistory.add(timestampedEntry);\n        if (loginHistory.size() > 100) {\n            loginHistory.remove(0);\n        }\n    }\n    \n    public void initializeDefaultPreferences() {\n        preferences.put(\"theme\", \"light\");\n        preferences.put(\"language\", \"en\");\n        preferences.put(\"notifications\", \"enabled\");\n    }\n    \n    public void updatePreference(String key, String value) {\n        String oldValue = preferences.get(key);\n        preferences.put(key, value);\n        logPreferenceChange(key, oldValue, value);\n    }\n    \n    public void logPreferenceChange(String key, String oldValue, String newValue) {\n        String logEntry = \"Preference '\" + key + \"' changed from '\" + oldValue + \"' to '\" + newValue + \"'\";\n        System.out.println(\"PREFERENCE LOG: \" + logEntry);\n    }\n    \n    public String getPreference(String key) {\n        return preferences.get(key);\n    }\n    \n    public void uploadProfilePicture(byte[] imageData, String fileName) {\n        if (validateImageFile(imageData, fileName)) {\n            this.profilePictureUrl = fileService.uploadFile(imageData, \"profile_\" + name + \"_\" + fileName);\n            logActivityEvent(\"PROFILE_PICTURE_UPLOADED\", \"User uploaded new profile picture\");\n        } else {\n            throw new IllegalArgumentException(\"Invalid image file\");\n        }\n    }\n    \n    public boolean validateImageFile(byte[] imageData, String fileName) {\n        if (imageData == null || imageData.length == 0 || imageData.length > 5 * 1024 * 1024) {\n            return false;\n        }\n        String lower = fileName.toLowerCase();\n        return lower.endsWith(\".jpg\") || lower.endsWith(\".jpeg\") || lower.endsWith(\".png\") || lower.endsWith(\".gif\");\n    }\n    \n    public void logActivityEvent(String eventType, String description) {\n        java.util.Date timestamp = new java.util.Date();\n        String logEntry = \"[\" + timestamp + \"] \" + eventType + \": \" + description + \" (User: \" + name + \")\";\n        System.out.println(\"ACTIVITY LOG: \" + logEntry);\n    }\n    \n    public void addNotification(String message) {\n        String timestampedNotification = new java.util.Date() + \": \" + message;\n        notifications.add(timestampedNotification);\n        if (notifications.size() > 50) {\n            notifications.remove(0);\n        }\n    }\n    \n    public void changePassword(String oldPassword, String newPassword) {\n        if (!authenticate(oldPassword)) {\n            throw new SecurityException(\"Current password is incorrect\");\n        }\n        \n        if (!validatePasswordStrength(newPassword)) {\n            throw new IllegalArgumentException(\"New password does not meet strength requirements\");\n        }\n        \n        this.password = hashPassword(newPassword);\n        logSecurityEvent(\"PASSWORD_CHANGED\", \"Password changed successfully\");\n        sendAccountNotification(\"Your password has been changed successfully.\");\n    }\n    \n    public String generateUserReport() {\n        StringBuilder report = new StringBuilder();\n        report.append(\"=== USER REPORT ===\\n\");\n        report.append(\"Name: \").append(name).append(\"\\n\");\n        report.append(\"Email: \").append(email).append(\"\\n\");\n        report.append(\"Active: \").append(isActive).append(\"\\n\");\n        report.append(\"Registration Date: \").append(registrationDate).append(\"\\n\");\n        report.append(\"Login History: \").append(loginHistory.size()).append(\" entries\\n\");\n        return report.toString();\n    }\n    \n    public void deleteAccount() {\n        logSecurityEvent(\"ACCOUNT_DELETION_STARTED\", \"User initiated account deletion\");\n        this.isActive = false;\n        this.email = \"[DELETED]\";\n        this.password = null;\n        this.loginHistory.clear();\n        this.notifications.clear();\n        dbService.deleteUser(name);\n        logSecurityEvent(\"ACCOUNT_DELETED\", \"Account deletion completed\");\n    }\n    \n    public String getName() {\n        return name;\n    }\n    \n    public void setName(String name) {\n        this.name = name;\n    }\n    \n    public String getEmail() {\n        return email;\n    }\n    \n    public void setEmail(String email) {\n        this.email = email;\n    }\n    \n    public boolean isActive() {\n        return isActive;\n    }\n    \n    public String getRole() {\n        return role;\n    }\n    \n    public void setRole(String role) {\n        this.role = role;\n    }\n    \n    public String getPhoneNumber() {\n        return phoneNumber;\n    }\n    \n    public void setPhoneNumber(String phoneNumber) {\n        this.phoneNumber = phoneNumber;\n    }\n    \n    public boolean isEmailVerified() {\n        return emailVerified;\n    }\n}",
            "output": "class DatabaseService {\n    private String connectionString;\n    \n    public DatabaseService(String connectionString) {\n        this.connectionString = connectionString;\n    }\n    \n    public void saveUser(User user) {\n        System.out.println(\"Saving user to database: \" + user.getName());\n    }\n    \n    public void updateUser(User user) {\n        System.out.println(\"Updating user in database: \" + user.getName());\n    }\n    \n    public void deleteUser(String userId) {\n        System.out.println(\"Deleting user from database: \" + userId);\n    }\n}\n\nclass EmailService {\n    private String smtpServer;\n    private int port;\n    \n    public EmailService(String smtpServer, int port) {\n        this.smtpServer = smtpServer;\n        this.port = port;\n    }\n    \n    public void sendEmail(String to, String subject, String body) {\n        System.out.println(\"Sending email to: \" + to);\n        System.out.println(\"Subject: \" + subject);\n    }\n}\n\nclass SMSService {\n    private String apiKey;\n    \n    public SMSService(String apiKey) {\n        this.apiKey = apiKey;\n    }\n    \n    public void sendSMS(String phoneNumber, String message) {\n        System.out.println(\"Sending SMS to: \" + phoneNumber);\n        System.out.println(\"Message: \" + message);\n    }\n}\n\nclass FileService {\n    private String uploadPath;\n    \n    public FileService(String uploadPath) {\n        this.uploadPath = uploadPath;\n    }\n    \n    public String uploadFile(byte[] fileData, String fileName) {\n        System.out.println(\"Uploading file: \" + fileName);\n        return uploadPath + \"/\" + fileName;\n    }\n    \n    public boolean validateImageFile(byte[] imageData, String fileName) {\n        if (imageData == null || imageData.length == 0 || imageData.length > 5 * 1024 * 1024) {\n            return false;\n        }\n        String lower = fileName.toLowerCase();\n        return lower.endsWith(\".jpg\") || lower.endsWith(\".jpeg\") || lower.endsWith(\".png\") || lower.endsWith(\".gif\");\n    }\n}\n\nclass EmailContentService {\n    public String createWelcomeEmailBody(String name) {\n        return \"Dear \" + name + \",\\n\\nWelcome to our platform! Complete your profile and explore our features.\\n\\nBest regards,\\nThe Team\";\n    }\n    \n    public String createPasswordResetEmailBody(String name, String token) {\n        return \"Hello \" + name + \",\\n\\nReset your password: https://oursite.com/reset?token=\" + token + \"\\n\\nLink expires in 24 hours.\";\n    }\n}\n\nclass TokenGenerationService {\n    public String generatePasswordResetToken() {\n        long timestamp = System.currentTimeMillis();\n        double random = Math.random();\n        return \"RESET_\" + timestamp + \"_\" + String.valueOf(random).substring(2, 8);\n    }\n    \n    public String generateSMSVerificationCode() {\n        return String.valueOf((int)(Math.random() * 900000) + 100000);\n    }\n}\n\nclass ValidationService {\n    public boolean validateEmailFormat(String email) {\n        if (email == null || email.trim().isEmpty()) {\n            return false;\n        }\n        return email.contains(\"@\") && email.contains(\".\") && email.split(\"@\").length == 2;\n    }\n    \n    public boolean validatePasswordStrength(String password) {\n        if (password == null || password.length() < 8) {\n            return false;\n        }\n        \n        boolean hasUpper = false, hasLower = false, hasDigit = false, hasSpecial = false;\n        \n        for (char c : password.toCharArray()) {\n            if (Character.isUpperCase(c)) hasUpper = true;\n            else if (Character.isLowerCase(c)) hasLower = true;\n            else if (Character.isDigit(c)) hasDigit = true;\n            else if (\"!@#$%^&*()_+-=[]{}|;:,.<>?\".indexOf(c) != -1) hasSpecial = true;\n        }\n        \n        return hasUpper && hasLower && hasDigit && hasSpecial;\n    }\n}\n\nclass PasswordService {\n    public String hashPassword(String password) {\n        int hash = 7;\n        for (int i = 0; i < password.length(); i++) {\n            hash = hash * 31 + password.charAt(i);\n        }\n        return \"HASH:\" + Integer.toHexString(Math.abs(hash)).toUpperCase();\n    }\n    \n    public boolean verifyPassword(String plainPassword, String hashedPassword) {\n        String computedHash = hashPassword(plainPassword);\n        return computedHash.equals(hashedPassword);\n    }\n}\n\nclass AuthenticationService {\n    private PasswordService passwordService;\n    \n    public AuthenticationService() {\n        this.passwordService = new PasswordService();\n    }\n    \n    public boolean authenticate(User user, String password) {\n        if (user.getLoginAttempts() >= 5) {\n            System.out.println(\"Account locked due to too many failed attempts\");\n            return false;\n        }\n        \n        if (user.getPassword() != null && passwordService.verifyPassword(password, user.getPassword())) {\n            user.resetLoginAttempts();\n            user.updateLastLogin();\n            user.addToLoginHistory(\"Successful login from IP: 192.168.1.100\");\n            return true;\n        }\n        \n        user.incrementLoginAttempts();\n        user.addToLoginHistory(\"Failed login attempt from IP: 192.168.1.100\");\n        return false;\n    }\n}\n\nclass SecurityService {\n    public void logSecurityEvent(String eventType, String description) {\n        java.util.Date timestamp = new java.util.Date();\n        String logEntry = \"[\" + timestamp + \"] \" + eventType + \": \" + description;\n        System.out.println(\"SECURITY LOG: \" + logEntry);\n    }\n    \n    public void logActivityEvent(String eventType, String description, String userName) {\n        java.util.Date timestamp = new java.util.Date();\n        String logEntry = \"[\" + timestamp + \"] \" + eventType + \": \" + description + \" (User: \" + userName + \")\";\n        System.out.println(\"ACTIVITY LOG: \" + logEntry);\n    }\n    \n    public void logPreferenceChange(String key, String oldValue, String newValue) {\n        String logEntry = \"Preference '\" + key + \"' changed from '\" + oldValue + \"' to '\" + newValue + \"'\";\n        System.out.println(\"PREFERENCE LOG: \" + logEntry);\n    }\n}\n\nclass AccountService {\n    private SecurityService securityService;\n    private NotificationService notificationService;\n    \n    public AccountService() {\n        this.securityService = new SecurityService();\n        this.notificationService = new NotificationService();\n    }\n    \n    public void lockAccount(User user) {\n        user.setActive(false);\n        securityService.logSecurityEvent(\"ACCOUNT_LOCKED\", \"Account locked for user: \" + user.getName());\n        notificationService.sendAccountNotification(user, \"Your account has been locked due to security reasons.\");\n    }\n    \n    public void unlockAccount(User user) {\n        user.setActive(true);\n        user.resetLoginAttempts();\n        securityService.logSecurityEvent(\"ACCOUNT_UNLOCKED\", \"Account unlocked for user: \" + user.getName());\n        notificationService.sendAccountNotification(user, \"Your account has been successfully unlocked.\");\n    }\n    \n    public void deleteAccount(User user, DatabaseService dbService) {\n        securityService.logSecurityEvent(\"ACCOUNT_DELETION_STARTED\", \"User initiated account deletion\");\n        user.setActive(false);\n        user.setEmail(\"[DELETED]\");\n        user.setPassword(null);\n        user.clearLoginHistory();\n        user.clearNotifications();\n        dbService.deleteUser(user.getName());\n        securityService.logSecurityEvent(\"ACCOUNT_DELETED\", \"Account deletion completed\");\n    }\n}\n\nclass NotificationService {\n    public void sendAccountNotification(User user, String message) {\n        user.addNotification(message);\n        \n        if (user.isEmailVerified()) {\n            EmailService emailService = new EmailService(\"smtp.company.com\", 587);\n            emailService.sendEmail(user.getEmail(), \"Account Security Alert\", message);\n        }\n        \n        if (user.getPhoneNumber() != null) {\n            SMSService smsService = new SMSService(\"api_key_12345\");\n            smsService.sendSMS(user.getPhoneNumber(), \"Security Alert: \" + message);\n        }\n    }\n}\n\nclass ReportService {\n    public String generateUserReport(User user) {\n        StringBuilder report = new StringBuilder();\n        report.append(\"=== USER REPORT ===\\n\");\n        report.append(\"Name: \").append(user.getName()).append(\"\\n\");\n        report.append(\"Email: \").append(user.getEmail()).append(\"\\n\");\n        report.append(\"Active: \").append(user.isActive()).append(\"\\n\");\n        report.append(\"Registration Date: \").append(user.getRegistrationDate()).append(\"\\n\");\n        report.append(\"Login History: \").append(user.getLoginHistorySize()).append(\" entries\\n\");\n        return report.toString();\n    }\n}\n\nclass UserManagementService {\n    private EmailService emailService;\n    private SMSService smsService;\n    private EmailContentService emailContentService;\n    private TokenGenerationService tokenService;\n    private ValidationService validationService;\n    private PasswordService passwordService;\n    private SecurityService securityService;\n    \n    public UserManagementService() {\n        this.emailService = new EmailService(\"smtp.company.com\", 587);\n        this.smsService = new SMSService(\"api_key_12345\");\n        this.emailContentService = new EmailContentService();\n        this.tokenService = new TokenGenerationService();\n        this.validationService = new ValidationService();\n        this.passwordService = new PasswordService();\n        this.securityService = new SecurityService();\n    }\n    \n    public void sendWelcomeEmail(User user) {\n        String subject = \"Welcome to our platform!\";\n        String body = emailContentService.createWelcomeEmailBody(user.getName());\n        emailService.sendEmail(user.getEmail(), subject, body);\n    }\n    \n    public void sendPasswordResetEmail(User user) {\n        String resetToken = tokenService.generatePasswordResetToken();\n        String subject = \"Password Reset Request\";\n        String body = emailContentService.createPasswordResetEmailBody(user.getName(), resetToken);\n        emailService.sendEmail(user.getEmail(), subject, body);\n    }\n    \n    public void sendSMSVerification(User user) {\n        if (user.getPhoneNumber() != null) {\n            String smsCode = tokenService.generateSMSVerificationCode();\n            String message = \"Your verification code: \" + smsCode;\n            smsService.sendSMS(user.getPhoneNumber(), message);\n        }\n    }\n    \n    public void changePassword(User user, String oldPassword, String newPassword) {\n        AuthenticationService authService = new AuthenticationService();\n        if (!authService.authenticate(user, oldPassword)) {\n            throw new SecurityException(\"Current password is incorrect\");\n        }\n        \n        if (!validationService.validatePasswordStrength(newPassword)) {\n            throw new IllegalArgumentException(\"New password does not meet strength requirements\");\n        }\n        \n        user.setPassword(passwordService.hashPassword(newPassword));\n        securityService.logSecurityEvent(\"PASSWORD_CHANGED\", \"Password changed successfully\");\n        \n        NotificationService notificationService = new NotificationService();\n        notificationService.sendAccountNotification(user, \"Your password has been changed successfully.\");\n    }\n    \n    public void uploadProfilePicture(User user, byte[] imageData, String fileName) {\n        FileService fileService = new FileService(\"/uploads\");\n        \n        if (fileService.validateImageFile(imageData, fileName)) {\n            String profileUrl = fileService.uploadFile(imageData, \"profile_\" + user.getName() + \"_\" + fileName);\n            user.setProfilePictureUrl(profileUrl);\n            securityService.logActivityEvent(\"PROFILE_PICTURE_UPLOADED\", \"User uploaded new profile picture\", user.getName());\n        } else {\n            throw new IllegalArgumentException(\"Invalid image file\");\n        }\n    }\n    \n    public void updatePreference(User user, String key, String value) {\n        String oldValue = user.getPreference(key);\n        user.setPreference(key, value);\n        securityService.logPreferenceChange(key, oldValue, value);\n    }\n}\n\npublic class User {\n    private String name;\n    private String email;\n    private String password;\n    private boolean isActive;\n    private String role;\n    private java.util.Date lastLogin;\n    private int loginAttempts;\n    private String phoneNumber;\n    private java.util.Date registrationDate;\n    private java.util.List<String> loginHistory;\n    private java.util.Map<String, String> preferences;\n    private String profilePictureUrl;\n    private boolean emailVerified;\n    private java.util.List<String> notifications;\n    \n    public User(String name, String email) {\n        this.name = name;\n        this.email = email;\n        this.isActive = true;\n        this.role = \"USER\";\n        this.loginAttempts = 0;\n        this.registrationDate = new java.util.Date();\n        this.loginHistory = new java.util.ArrayList<>();\n        this.preferences = new java.util.HashMap<>();\n        this.notifications = new java.util.ArrayList<>();\n        this.emailVerified = false;\n        \n        initializeDefaultPreferences();\n    }\n    \n    private void initializeDefaultPreferences() {\n        preferences.put(\"theme\", \"light\");\n        preferences.put(\"language\", \"en\");\n        preferences.put(\"notifications\", \"enabled\");\n    }\n    \n    public void addToLoginHistory(String entry) {\n        String timestampedEntry = new java.util.Date() + \": \" + entry;\n        loginHistory.add(timestampedEntry);\n        if (loginHistory.size() > 100) {\n            loginHistory.remove(0);\n        }\n    }\n    \n    public void addNotification(String message) {\n        String timestampedNotification = new java.util.Date() + \": \" + message;\n        notifications.add(timestampedNotification);\n        if (notifications.size() > 50) {\n            notifications.remove(0);\n        }\n    }\n    \n    public void clearLoginHistory() {\n        loginHistory.clear();\n    }\n    \n    public void clearNotifications() {\n        notifications.clear();\n    }\n    \n    public int getLoginHistorySize() {\n        return loginHistory.size();\n    }\n    \n    public void incrementLoginAttempts() {\n        this.loginAttempts++;\n    }\n    \n    public void resetLoginAttempts() {\n        this.loginAttempts = 0;\n    }\n    \n    public void updateLastLogin() {\n        this.lastLogin = new java.util.Date();\n    }\n    \n    public String getPreference(String key) {\n        return preferences.get(key);\n    }\n    \n    public void setPreference(String key, String value) {\n        preferences.put(key, value);\n    }\n    \n    // Getters and Setters\n    public String getName() {\n        return name;\n    }\n    \n    public void setName(String name) {\n        this.name = name;\n    }\n    \n    public String getEmail() {\n        return email;\n    }\n    \n    public void setEmail(String email) {\n        this.email = email;\n    }\n    \n    public String getPassword() {\n        return password;\n    }\n    \n    public void setPassword(String password) {\n        this.password = password;\n    }\n    \n    public boolean isActive() {\n        return isActive;\n    }\n    \n    public void setActive(boolean active) {\n        isActive = active;\n    }\n    \n    public String getRole() {\n        return role;\n    }\n    \n    public void setRole(String role) {\n        this.role = role;\n    }\n    \n    public java.util.Date getLastLogin() {\n        return lastLogin;\n    }\n    \n    public int getLoginAttempts() {\n        return loginAttempts;\n    }\n    \n    public String getPhoneNumber() {\n        return phoneNumber;\n    }\n    \n    public void setPhoneNumber(String phoneNumber) {\n        this.phoneNumber = phoneNumber;\n    }\n    \n    public java.util.Date getRegistrationDate() {\n        return registrationDate;\n    }\n    \n    public String getProfilePictureUrl() {\n        return profilePictureUrl;\n    }\n    \n    public void setProfilePictureUrl(String profilePictureUrl) {\n        this.profilePictureUrl = profilePictureUrl;\n    }\n    \n    public boolean isEmailVerified() {\n        return emailVerified;\n    }\n    \n    public void setEmailVerified(boolean emailVerified) {\n        this.emailVerified = emailVerified;\n    }\n}",
            "level": "HARD",
            "language": "JAVA",
            "violation": "SRP",
            "description": "User database email operations"
        },
        {
            "input": "class PayrollSystem {\n    private String databaseUrl;\n    \n    public PayrollSystem(String databaseUrl) {\n        this.databaseUrl = databaseUrl;\n    }\n    \n    public void savePayrollRecord(Employee employee, double grossPay, double netPay) {\n        System.out.println(\"Saving payroll record to database for: \" + employee.getName());\n    }\n    \n    public void generatePayrollReport(String period) {\n        System.out.println(\"Generating payroll report for period: \" + period);\n    }\n}\n\nclass EmailNotificationService {\n    private String smtpServer;\n    \n    public EmailNotificationService(String smtpServer) {\n        this.smtpServer = smtpServer;\n    }\n    \n    public void sendEmail(String recipient, String subject, String body) {\n        System.out.println(\"Sending email to: \" + recipient);\n        System.out.println(\"Subject: \" + subject);\n    }\n}\n\nclass HRDatabase {\n    private String connectionString;\n    \n    public HRDatabase(String connectionString) {\n        this.connectionString = connectionString;\n    }\n    \n    public void updateEmployeeRecord(String employeeId, String field, String value) {\n        System.out.println(\"Updating HR record - Employee: \" + employeeId + \", Field: \" + field);\n    }\n    \n    public void saveVacationRequest(String employeeId, int days, boolean approved) {\n        System.out.println(\"Recording vacation request: \" + employeeId + \", Days: \" + days);\n    }\n}\n\nclass ComplianceLogger {\n    private String logFile;\n    \n    public ComplianceLogger(String logFile) {\n        this.logFile = logFile;\n    }\n    \n    public void logEvent(String eventType, String description) {\n        System.out.println(\"[COMPLIANCE LOG] \" + eventType + \": \" + description);\n    }\n}\n\npublic class Employee {\n    private String name;\n    private double baseSalary;\n    private int yearsOfService;\n    private String department;\n    private String position;\n    private String employeeId;\n    private java.util.Date hireDate;\n    private double performanceRating;\n    private int vacationDays;\n    private int usedVacationDays;\n    private String manager;\n    private String email;\n    private String phoneNumber;\n    private boolean isActive;\n    private java.util.List<String> skillCertifications;\n    private java.util.Map<String, String> personalInfo;\n    private double overtimeHours;\n    \n    private PayrollSystem payrollSystem;\n    private EmailNotificationService emailService;\n    private HRDatabase hrDatabase;\n    private ComplianceLogger complianceLogger;\n    \n    public Employee(String name, double baseSalary, int yearsOfService) {\n        this.name = name;\n        this.baseSalary = baseSalary;\n        this.yearsOfService = yearsOfService;\n        this.employeeId = generateUniqueEmployeeId();\n        this.hireDate = new java.util.Date();\n        this.vacationDays = 25;\n        this.usedVacationDays = 0;\n        this.performanceRating = 3.0;\n        this.isActive = true;\n        this.skillCertifications = new java.util.ArrayList<>();\n        this.personalInfo = new java.util.HashMap<>();\n        this.overtimeHours = 0.0;\n        \n        this.payrollSystem = new PayrollSystem(\"jdbc:mysql://localhost:3306/payroll\");\n        this.emailService = new EmailNotificationService(\"smtp.company.com\");\n        this.hrDatabase = new HRDatabase(\"jdbc:mysql://localhost:3306/hr\");\n        this.complianceLogger = new ComplianceLogger(\"/var/logs/compliance.log\");\n        \n        initializeEmployeeDefaults();\n    }\n    \n    public double calculateSalary() {\n        return baseSalary + (yearsOfService * 1000);\n    }\n    \n    public void printPaySlip() {\n        System.out.println(\"Pay slip for \" + name + \": $\" + calculateSalary());\n    }\n    \n    public double calculatePerformanceBonus() {\n        double baseBonus = baseSalary * 0.12;\n        double ratingMultiplier = performanceRating / 5.0;\n        double serviceMultiplier = Math.min(yearsOfService * 0.02, 0.15);\n        return baseBonus * ratingMultiplier * (1.0 + serviceMultiplier);\n    }\n    \n    public double calculateOvertimeCompensation() {\n        if (overtimeHours > 0) {\n            double hourlyRate = baseSalary / (52 * 40);\n            return overtimeHours * hourlyRate * 1.5;\n        }\n        return 0.0;\n    }\n    \n    public double calculateTotalCompensation() {\n        return calculateSalary() + calculatePerformanceBonus() + calculateOvertimeCompensation();\n    }\n    \n    public double calculateFederalTax(double grossPay) {\n        if (grossPay <= 4000) return grossPay * 0.18;\n        else if (grossPay <= 8000) return grossPay * 0.22;\n        else return grossPay * 0.28;\n    }\n    \n    public double calculateStateTax(double grossPay) {\n        return grossPay * 0.085;\n    }\n    \n    public double calculateSocialSecurityTax(double grossPay) {\n        return Math.min(grossPay * 0.062, 8853.60);\n    }\n    \n    public String generateCompensationBreakdown() {\n        double salary = calculateSalary();\n        double bonus = calculatePerformanceBonus();\n        double overtime = calculateOvertimeCompensation();\n        double gross = salary + bonus + overtime;\n        double federalTax = calculateFederalTax(gross);\n        double stateTax = calculateStateTax(gross);\n        double ssTax = calculateSocialSecurityTax(gross);\n        double totalTax = federalTax + stateTax + ssTax;\n        double netPay = gross - totalTax;\n        \n        StringBuilder breakdown = new StringBuilder();\n        breakdown.append(\"=== COMPENSATION BREAKDOWN ===\\n\");\n        breakdown.append(\"Base Salary: $\").append(String.format(\"%.2f\", salary)).append(\"\\n\");\n        breakdown.append(\"Performance Bonus: $\").append(String.format(\"%.2f\", bonus)).append(\"\\n\");\n        breakdown.append(\"Overtime Pay: $\").append(String.format(\"%.2f\", overtime)).append(\"\\n\");\n        breakdown.append(\"Gross Pay: $\").append(String.format(\"%.2f\", gross)).append(\"\\n\");\n        breakdown.append(\"Federal Tax: $\").append(String.format(\"%.2f\", federalTax)).append(\"\\n\");\n        breakdown.append(\"State Tax: $\").append(String.format(\"%.2f\", stateTax)).append(\"\\n\");\n        breakdown.append(\"Social Security: $\").append(String.format(\"%.2f\", ssTax)).append(\"\\n\");\n        breakdown.append(\"Net Pay: $\").append(String.format(\"%.2f\", netPay)).append(\"\\n\");\n        return breakdown.toString();\n    }\n    \n    public void processMonthlyPayroll() {\n        double grossPay = calculateTotalCompensation();\n        double netPay = grossPay - (calculateFederalTax(grossPay) + calculateStateTax(grossPay) + calculateSocialSecurityTax(grossPay));\n        \n        String breakdown = generateCompensationBreakdown();\n        System.out.println(breakdown);\n        \n        payrollSystem.savePayrollRecord(this, grossPay, netPay);\n        \n        String emailBody = createPayrollNotificationEmail(breakdown);\n        emailService.sendEmail(email, \"Monthly Payroll - \" + name, emailBody);\n        \n        complianceLogger.logEvent(\"PAYROLL_PROCESSED\", \"Monthly payroll processed for employee: \" + employeeId);\n    }\n    \n    public String createPayrollNotificationEmail(String breakdown) {\n        return \"Dear \" + name + \",\\n\\nYour monthly payroll has been processed.\\n\\n\" + breakdown + \"\\n\\nBest regards,\\nPayroll Department\";\n    }\n    \n    public boolean requestVacationDays(int days) {\n        if (usedVacationDays + days <= vacationDays) {\n            usedVacationDays += days;\n            \n            hrDatabase.saveVacationRequest(employeeId, days, true);\n            \n            String managerEmail = createManagerNotificationEmail(days);\n            emailService.sendEmail(manager + \"@company.com\", \"Vacation Request - \" + name, managerEmail);\n            \n            logVacationActivity(days, \"APPROVED\");\n            return true;\n        } else {\n            logVacationActivity(days, \"DENIED\");\n            return false;\n        }\n    }\n    \n    public String createManagerNotificationEmail(int days) {\n        return \"Manager Notification:\\n\\nEmployee \" + name + \" (\" + employeeId + \") has requested \" + days + \" vacation days.\\nRemaining balance: \" + (vacationDays - usedVacationDays) + \" days.\\nDepartment: \" + department;\n    }\n    \n    public void logVacationActivity(int days, String status) {\n        String logMessage = \"Vacation request - Employee: \" + employeeId + \", Days: \" + days + \", Status: \" + status;\n        complianceLogger.logEvent(\"VACATION_REQUEST\", logMessage);\n    }\n    \n    public void conductAnnualPerformanceReview() {\n        String reviewReport = generatePerformanceReviewReport();\n        System.out.println(reviewReport);\n        \n        hrDatabase.updateEmployeeRecord(employeeId, \"performance_rating\", String.valueOf(performanceRating));\n        hrDatabase.updateEmployeeRecord(employeeId, \"last_review_date\", new java.util.Date().toString());\n        \n        String reviewEmail = createPerformanceReviewEmail(reviewReport);\n        emailService.sendEmail(email, \"Annual Performance Review - \" + name, reviewEmail);\n        \n        complianceLogger.logEvent(\"PERFORMANCE_REVIEW\", \"Annual review completed for employee: \" + employeeId);\n    }\n    \n    public String generatePerformanceReviewReport() {\n        StringBuilder report = new StringBuilder();\n        report.append(\"=== ANNUAL PERFORMANCE REVIEW ===\\n\");\n        report.append(\"Employee: \").append(name).append(\" (\").append(employeeId).append(\")\\n\");\n        report.append(\"Department: \").append(department).append(\"\\n\");\n        report.append(\"Current Rating: \").append(performanceRating).append(\"/5.0\\n\");\n        report.append(\"Years of Service: \").append(yearsOfService).append(\"\\n\");\n        report.append(\"Certifications: \").append(skillCertifications.size()).append(\"\\n\");\n        \n        if (performanceRating >= 4.5) {\n            report.append(\"Recommendation: Promotion candidate\\n\");\n        } else if (performanceRating < 2.5) {\n            report.append(\"Recommendation: Performance improvement plan required\\n\");\n        }\n        \n        return report.toString();\n    }\n    \n    public String createPerformanceReviewEmail(String report) {\n        return \"Dear \" + name + \",\\n\\nYour annual performance review has been completed.\\n\\n\" + report + \"\\n\\nPlease schedule a meeting to discuss.\\n\\nHR Department\";\n    }\n    \n    public void updateRatingWithNotifications(double newRating) {\n        double oldRating = this.performanceRating;\n        this.performanceRating = newRating;\n        \n        hrDatabase.updateEmployeeRecord(employeeId, \"performance_rating\", String.valueOf(newRating));\n        \n        if (Math.abs(newRating - oldRating) >= 1.0) {\n            String alertEmail = createRatingChangeAlert(oldRating, newRating);\n            emailService.sendEmail(\"hr@company.com\", \"Significant Rating Change - \" + name, alertEmail);\n        }\n        \n        logPerformanceChange(oldRating, newRating);\n    }\n    \n    public String createRatingChangeAlert(double oldRating, double newRating) {\n        return \"PERFORMANCE ALERT:\\n\\nEmployee: \" + name + \" (\" + employeeId + \")\\nOld Rating: \" + oldRating + \"\\nNew Rating: \" + newRating + \"\\nChange: \" + (newRating > oldRating ? \"IMPROVEMENT\" : \"DECLINE\");\n    }\n    \n    public void logPerformanceChange(double oldRating, double newRating) {\n        String change = \"Performance rating changed - Employee: \" + employeeId + \", From: \" + oldRating + \", To: \" + newRating;\n        complianceLogger.logEvent(\"RATING_CHANGE\", change);\n    }\n    \n    public void addSkillCertification(String certification) {\n        skillCertifications.add(certification);\n        hrDatabase.updateEmployeeRecord(employeeId, \"certifications\", String.join(\",\", skillCertifications));\n        complianceLogger.logEvent(\"CERTIFICATION_ADDED\", \"New certification added for \" + employeeId + \": \" + certification);\n    }\n    \n    public String generateUniqueEmployeeId() {\n        return \"EMP\" + System.currentTimeMillis() % 100000 + String.valueOf((int)(Math.random() * 1000));\n    }\n    \n    public void initializeEmployeeDefaults() {\n        personalInfo.put(\"emergency_contact\", \"\");\n        personalInfo.put(\"bank_routing\", \"\");\n        personalInfo.put(\"tax_filing_status\", \"single\");\n    }\n    \n    public void updatePersonalInformation(String field, String value) {\n        personalInfo.put(field, value);\n        hrDatabase.updateEmployeeRecord(employeeId, field, value);\n        complianceLogger.logEvent(\"PERSONAL_INFO_UPDATE\", \"Updated \" + field + \" for employee: \" + employeeId);\n    }\n    \n    public String getName() {\n        return name;\n    }\n    \n    public void setName(String name) {\n        this.name = name;\n    }\n    \n    public double getBaseSalary() {\n        return baseSalary;\n    }\n    \n    public void setBaseSalary(double baseSalary) {\n        this.baseSalary = baseSalary;\n    }\n    \n    public String getDepartment() {\n        return department;\n    }\n    \n    public void setDepartment(String department) {\n        this.department = department;\n    }\n    \n    public double getPerformanceRating() {\n        return performanceRating;\n    }\n    \n    public String getEmail() {\n        return email;\n    }\n    \n    public void setEmail(String email) {\n        this.email = email;\n    }\n    \n    public double getOvertimeHours() {\n        return overtimeHours;\n    }\n    \n    public void setOvertimeHours(double overtimeHours) {\n        this.overtimeHours = overtimeHours;\n    }\n}",
            "output": "class PayrollSystem {\n    private String databaseUrl;\n    \n    public PayrollSystem(String databaseUrl) {\n        this.databaseUrl = databaseUrl;\n    }\n    \n    public void savePayrollRecord(Employee employee, double grossPay, double netPay) {\n        System.out.println(\"Saving payroll record to database for: \" + employee.getName());\n    }\n    \n    public void generatePayrollReport(String period) {\n        System.out.println(\"Generating payroll report for period: \" + period);\n    }\n}\n\nclass EmailNotificationService {\n    private String smtpServer;\n    \n    public EmailNotificationService(String smtpServer) {\n        this.smtpServer = smtpServer;\n    }\n    \n    public void sendEmail(String recipient, String subject, String body) {\n        System.out.println(\"Sending email to: \" + recipient);\n        System.out.println(\"Subject: \" + subject);\n    }\n}\n\nclass HRDatabase {\n    private String connectionString;\n    \n    public HRDatabase(String connectionString) {\n        this.connectionString = connectionString;\n    }\n    \n    public void updateEmployeeRecord(String employeeId, String field, String value) {\n        System.out.println(\"Updating HR record - Employee: \" + employeeId + \", Field: \" + field);\n    }\n    \n    public void saveVacationRequest(String employeeId, int days, boolean approved) {\n        System.out.println(\"Recording vacation request: \" + employeeId + \", Days: \" + days);\n    }\n}\n\nclass ComplianceLogger {\n    private String logFile;\n    \n    public ComplianceLogger(String logFile) {\n        this.logFile = logFile;\n    }\n    \n    public void logEvent(String eventType, String description) {\n        System.out.println(\"[COMPLIANCE LOG] \" + eventType + \": \" + description);\n    }\n}\n\nclass SalaryCalculationService {\n    public double calculateBaseSalary(double baseSalary, int yearsOfService) {\n        return baseSalary + (yearsOfService * 1000);\n    }\n    \n    public double calculatePerformanceBonus(double baseSalary, double performanceRating, int yearsOfService) {\n        double baseBonus = baseSalary * 0.12;\n        double ratingMultiplier = performanceRating / 5.0;\n        double serviceMultiplier = Math.min(yearsOfService * 0.02, 0.15);\n        return baseBonus * ratingMultiplier * (1.0 + serviceMultiplier);\n    }\n    \n    public double calculateOvertimeCompensation(double baseSalary, double overtimeHours) {\n        if (overtimeHours > 0) {\n            double hourlyRate = baseSalary / (52 * 40);\n            return overtimeHours * hourlyRate * 1.5;\n        }\n        return 0.0;\n    }\n    \n    public double calculateTotalCompensation(double baseSalary, int yearsOfService, double performanceRating, double overtimeHours) {\n        double salary = calculateBaseSalary(baseSalary, yearsOfService);\n        double bonus = calculatePerformanceBonus(baseSalary, performanceRating, yearsOfService);\n        double overtime = calculateOvertimeCompensation(baseSalary, overtimeHours);\n        return salary + bonus + overtime;\n    }\n}\n\nclass TaxCalculationService {\n    public double calculateFederalTax(double grossPay) {\n        if (grossPay <= 4000) return grossPay * 0.18;\n        else if (grossPay <= 8000) return grossPay * 0.22;\n        else return grossPay * 0.28;\n    }\n    \n    public double calculateStateTax(double grossPay) {\n        return grossPay * 0.085;\n    }\n    \n    public double calculateSocialSecurityTax(double grossPay) {\n        return Math.min(grossPay * 0.062, 8853.60);\n    }\n    \n    public double calculateTotalTax(double grossPay) {\n        return calculateFederalTax(grossPay) + calculateStateTax(grossPay) + calculateSocialSecurityTax(grossPay);\n    }\n}\n\nclass EmailContentService {\n    public String createPayrollNotificationEmail(String employeeName, String breakdown) {\n        return \"Dear \" + employeeName + \",\\n\\nYour monthly payroll has been processed.\\n\\n\" + breakdown + \"\\n\\nBest regards,\\nPayroll Department\";\n    }\n    \n    public String createManagerNotificationEmail(String employeeName, String employeeId, int days, int remainingDays, String department) {\n        return \"Manager Notification:\\n\\nEmployee \" + employeeName + \" (\" + employeeId + \") has requested \" + days + \" vacation days.\\nRemaining balance: \" + remainingDays + \" days.\\nDepartment: \" + department;\n    }\n    \n    public String createPerformanceReviewEmail(String employeeName, String report) {\n        return \"Dear \" + employeeName + \",\\n\\nYour annual performance review has been completed.\\n\\n\" + report + \"\\n\\nPlease schedule a meeting to discuss.\\n\\nHR Department\";\n    }\n    \n    public String createRatingChangeAlert(String employeeName, String employeeId, double oldRating, double newRating) {\n        return \"PERFORMANCE ALERT:\\n\\nEmployee: \" + employeeName + \" (\" + employeeId + \")\\nOld Rating: \" + oldRating + \"\\nNew Rating: \" + newRating + \"\\nChange: \" + (newRating > oldRating ? \"IMPROVEMENT\" : \"DECLINE\");\n    }\n}\n\nclass ReportGenerationService {\n    public String generateCompensationBreakdown(Employee employee, SalaryCalculationService salaryService, TaxCalculationService taxService) {\n        double salary = salaryService.calculateBaseSalary(employee.getBaseSalary(), employee.getYearsOfService());\n        double bonus = salaryService.calculatePerformanceBonus(employee.getBaseSalary(), employee.getPerformanceRating(), employee.getYearsOfService());\n        double overtime = salaryService.calculateOvertimeCompensation(employee.getBaseSalary(), employee.getOvertimeHours());\n        double gross = salary + bonus + overtime;\n        double federalTax = taxService.calculateFederalTax(gross);\n        double stateTax = taxService.calculateStateTax(gross);\n        double ssTax = taxService.calculateSocialSecurityTax(gross);\n        double totalTax = federalTax + stateTax + ssTax;\n        double netPay = gross - totalTax;\n        \n        StringBuilder breakdown = new StringBuilder();\n        breakdown.append(\"=== COMPENSATION BREAKDOWN ===\\n\");\n        breakdown.append(\"Base Salary: $\").append(String.format(\"%.2f\", salary)).append(\"\\n\");\n        breakdown.append(\"Performance Bonus: $\").append(String.format(\"%.2f\", bonus)).append(\"\\n\");\n        breakdown.append(\"Overtime Pay: $\").append(String.format(\"%.2f\", overtime)).append(\"\\n\");\n        breakdown.append(\"Gross Pay: $\").append(String.format(\"%.2f\", gross)).append(\"\\n\");\n        breakdown.append(\"Federal Tax: $\").append(String.format(\"%.2f\", federalTax)).append(\"\\n\");\n        breakdown.append(\"State Tax: $\").append(String.format(\"%.2f\", stateTax)).append(\"\\n\");\n        breakdown.append(\"Social Security: $\").append(String.format(\"%.2f\", ssTax)).append(\"\\n\");\n        breakdown.append(\"Net Pay: $\").append(String.format(\"%.2f\", netPay)).append(\"\\n\");\n        return breakdown.toString();\n    }\n    \n    public String generatePerformanceReviewReport(Employee employee) {\n        StringBuilder report = new StringBuilder();\n        report.append(\"=== ANNUAL PERFORMANCE REVIEW ===\\n\");\n        report.append(\"Employee: \").append(employee.getName()).append(\" (\").append(employee.getEmployeeId()).append(\")\\n\");\n        report.append(\"Department: \").append(employee.getDepartment()).append(\"\\n\");\n        report.append(\"Current Rating: \").append(employee.getPerformanceRating()).append(\"/5.0\\n\");\n        report.append(\"Years of Service: \").append(employee.getYearsOfService()).append(\"\\n\");\n        report.append(\"Certifications: \").append(employee.getSkillCertifications().size()).append(\"\\n\");\n        \n        if (employee.getPerformanceRating() >= 4.5) {\n            report.append(\"Recommendation: Promotion candidate\\n\");\n        } else if (employee.getPerformanceRating() < 2.5) {\n            report.append(\"Recommendation: Performance improvement plan required\\n\");\n        }\n        \n        return report.toString();\n    }\n    \n    public void printPaySlip(Employee employee, SalaryCalculationService salaryService) {\n        double salary = salaryService.calculateBaseSalary(employee.getBaseSalary(), employee.getYearsOfService());\n        System.out.println(\"Pay slip for \" + employee.getName() + \": $\" + salary);\n    }\n}\n\nclass PayrollProcessingService {\n    private PayrollSystem payrollSystem;\n    private EmailNotificationService emailService;\n    private ComplianceLogger complianceLogger;\n    private SalaryCalculationService salaryService;\n    private TaxCalculationService taxService;\n    private ReportGenerationService reportService;\n    private EmailContentService emailContentService;\n    \n    public PayrollProcessingService() {\n        this.payrollSystem = new PayrollSystem(\"jdbc:mysql://localhost:3306/payroll\");\n        this.emailService = new EmailNotificationService(\"smtp.company.com\");\n        this.complianceLogger = new ComplianceLogger(\"/var/logs/compliance.log\");\n        this.salaryService = new SalaryCalculationService();\n        this.taxService = new TaxCalculationService();\n        this.reportService = new ReportGenerationService();\n        this.emailContentService = new EmailContentService();\n    }\n    \n    public void processMonthlyPayroll(Employee employee) {\n        double grossPay = salaryService.calculateTotalCompensation(employee.getBaseSalary(), employee.getYearsOfService(), employee.getPerformanceRating(), employee.getOvertimeHours());\n        double totalTax = taxService.calculateTotalTax(grossPay);\n        double netPay = grossPay - totalTax;\n        \n        String breakdown = reportService.generateCompensationBreakdown(employee, salaryService, taxService);\n        System.out.println(breakdown);\n        \n        payrollSystem.savePayrollRecord(employee, grossPay, netPay);\n        \n        String emailBody = emailContentService.createPayrollNotificationEmail(employee.getName(), breakdown);\n        emailService.sendEmail(employee.getEmail(), \"Monthly Payroll - \" + employee.getName(), emailBody);\n        \n        complianceLogger.logEvent(\"PAYROLL_PROCESSED\", \"Monthly payroll processed for employee: \" + employee.getEmployeeId());\n    }\n}\n\nclass VacationManagementService {\n    private HRDatabase hrDatabase;\n    private EmailNotificationService emailService;\n    private ComplianceLogger complianceLogger;\n    private EmailContentService emailContentService;\n    \n    public VacationManagementService() {\n        this.hrDatabase = new HRDatabase(\"jdbc:mysql://localhost:3306/hr\");\n        this.emailService = new EmailNotificationService(\"smtp.company.com\");\n        this.complianceLogger = new ComplianceLogger(\"/var/logs/compliance.log\");\n        this.emailContentService = new EmailContentService();\n    }\n    \n    public boolean requestVacationDays(Employee employee, int days) {\n        if (employee.getUsedVacationDays() + days <= employee.getVacationDays()) {\n            employee.setUsedVacationDays(employee.getUsedVacationDays() + days);\n            \n            hrDatabase.saveVacationRequest(employee.getEmployeeId(), days, true);\n            \n            String managerEmail = emailContentService.createManagerNotificationEmail(\n                employee.getName(), employee.getEmployeeId(), days, \n                employee.getVacationDays() - employee.getUsedVacationDays(), employee.getDepartment());\n            emailService.sendEmail(employee.getManager() + \"@company.com\", \"Vacation Request - \" + employee.getName(), managerEmail);\n            \n            logVacationActivity(employee.getEmployeeId(), days, \"APPROVED\");\n            return true;\n        } else {\n            logVacationActivity(employee.getEmployeeId(), days, \"DENIED\");\n            return false;\n        }\n    }\n    \n    private void logVacationActivity(String employeeId, int days, String status) {\n        String logMessage = \"Vacation request - Employee: \" + employeeId + \", Days: \" + days + \", Status: \" + status;\n        complianceLogger.logEvent(\"VACATION_REQUEST\", logMessage);\n    }\n}\n\nclass PerformanceManagementService {\n    private HRDatabase hrDatabase;\n    private EmailNotificationService emailService;\n    private ComplianceLogger complianceLogger;\n    private ReportGenerationService reportService;\n    private EmailContentService emailContentService;\n    \n    public PerformanceManagementService() {\n        this.hrDatabase = new HRDatabase(\"jdbc:mysql://localhost:3306/hr\");\n        this.emailService = new EmailNotificationService(\"smtp.company.com\");\n        this.complianceLogger = new ComplianceLogger(\"/var/logs/compliance.log\");\n        this.reportService = new ReportGenerationService();\n        this.emailContentService = new EmailContentService();\n    }\n    \n    public void conductAnnualPerformanceReview(Employee employee) {\n        String reviewReport = reportService.generatePerformanceReviewReport(employee);\n        System.out.println(reviewReport);\n        \n        hrDatabase.updateEmployeeRecord(employee.getEmployeeId(), \"performance_rating\", String.valueOf(employee.getPerformanceRating()));\n        hrDatabase.updateEmployeeRecord(employee.getEmployeeId(), \"last_review_date\", new java.util.Date().toString());\n        \n        String reviewEmail = emailContentService.createPerformanceReviewEmail(employee.getName(), reviewReport);\n        emailService.sendEmail(employee.getEmail(), \"Annual Performance Review - \" + employee.getName(), reviewEmail);\n        \n        complianceLogger.logEvent(\"PERFORMANCE_REVIEW\", \"Annual review completed for employee: \" + employee.getEmployeeId());\n    }\n    \n    public void updateRatingWithNotifications(Employee employee, double newRating) {\n        double oldRating = employee.getPerformanceRating();\n        employee.setPerformanceRating(newRating);\n        \n        hrDatabase.updateEmployeeRecord(employee.getEmployeeId(), \"performance_rating\", String.valueOf(newRating));\n        \n        if (Math.abs(newRating - oldRating) >= 1.0) {\n            String alertEmail = emailContentService.createRatingChangeAlert(employee.getName(), employee.getEmployeeId(), oldRating, newRating);\n            emailService.sendEmail(\"hr@company.com\", \"Significant Rating Change - \" + employee.getName(), alertEmail);\n        }\n        \n        logPerformanceChange(employee.getEmployeeId(), oldRating, newRating);\n    }\n    \n    private void logPerformanceChange(String employeeId, double oldRating, double newRating) {\n        String change = \"Performance rating changed - Employee: \" + employeeId + \", From: \" + oldRating + \", To: \" + newRating;\n        complianceLogger.logEvent(\"RATING_CHANGE\", change);\n    }\n}\n\nclass EmployeeDataManagementService {\n    private HRDatabase hrDatabase;\n    private ComplianceLogger complianceLogger;\n    \n    public EmployeeDataManagementService() {\n        this.hrDatabase = new HRDatabase(\"jdbc:mysql://localhost:3306/hr\");\n        this.complianceLogger = new ComplianceLogger(\"/var/logs/compliance.log\");\n    }\n    \n    public void addSkillCertification(Employee employee, String certification) {\n        employee.getSkillCertifications().add(certification);\n        hrDatabase.updateEmployeeRecord(employee.getEmployeeId(), \"certifications\", String.join(\",\", employee.getSkillCertifications()));\n        complianceLogger.logEvent(\"CERTIFICATION_ADDED\", \"New certification added for \" + employee.getEmployeeId() + \": \" + certification);\n    }\n    \n    public void updatePersonalInformation(Employee employee, String field, String value) {\n        employee.getPersonalInfo().put(field, value);\n        hrDatabase.updateEmployeeRecord(employee.getEmployeeId(), field, value);\n        complianceLogger.logEvent(\"PERSONAL_INFO_UPDATE\", \"Updated \" + field + \" for employee: \" + employee.getEmployeeId());\n    }\n}\n\nclass EmployeeIdGenerationService {\n    public String generateUniqueEmployeeId() {\n        return \"EMP\" + System.currentTimeMillis() % 100000 + String.valueOf((int)(Math.random() * 1000));\n    }\n}\n\npublic class Employee {\n    private String name;\n    private double baseSalary;\n    private int yearsOfService;\n    private String department;\n    private String position;\n    private String employeeId;\n    private java.util.Date hireDate;\n    private double performanceRating;\n    private int vacationDays;\n    private int usedVacationDays;\n    private String manager;\n    private String email;\n    private String phoneNumber;\n    private boolean isActive;\n    private java.util.List<String> skillCertifications;\n    private java.util.Map<String, String> personalInfo;\n    private double overtimeHours;\n    \n    public Employee(String name, double baseSalary, int yearsOfService) {\n        this.name = name;\n        this.baseSalary = baseSalary;\n        this.yearsOfService = yearsOfService;\n        \n        EmployeeIdGenerationService idService = new EmployeeIdGenerationService();\n        this.employeeId = idService.generateUniqueEmployeeId();\n        \n        this.hireDate = new java.util.Date();\n        this.vacationDays = 25;\n        this.usedVacationDays = 0;\n        this.performanceRating = 3.0;\n        this.isActive = true;\n        this.skillCertifications = new java.util.ArrayList<>();\n        this.personalInfo = new java.util.HashMap<>();\n        this.overtimeHours = 0.0;\n        \n        initializeEmployeeDefaults();\n    }\n    \n    private void initializeEmployeeDefaults() {\n        personalInfo.put(\"emergency_contact\", \"\");\n        personalInfo.put(\"bank_routing\", \"\");\n        personalInfo.put(\"tax_filing_status\", \"single\");\n    }\n    \n    // Getters and Setters\n    public String getName() {\n        return name;\n    }\n    \n    public void setName(String name) {\n        this.name = name;\n    }\n    \n    public double getBaseSalary() {\n        return baseSalary;\n    }\n    \n    public void setBaseSalary(double baseSalary) {\n        this.baseSalary = baseSalary;\n    }\n    \n    public int getYearsOfService() {\n        return yearsOfService;\n    }\n    \n    public void setYearsOfService(int yearsOfService) {\n        this.yearsOfService = yearsOfService;\n    }\n    \n    public String getDepartment() {\n        return department;\n    }\n    \n    public void setDepartment(String department) {\n        this.department = department;\n    }\n    \n    public String getPosition() {\n        return position;\n    }\n    \n    public void setPosition(String position) {\n        this.position = position;\n    }\n    \n    public String getEmployeeId() {\n        return employeeId;\n    }\n    \n    public java.util.Date getHireDate() {\n        return hireDate;\n    }\n    \n    public double getPerformanceRating() {\n        return performanceRating;\n    }\n    \n    public void setPerformanceRating(double performanceRating) {\n        this.performanceRating = performanceRating;\n    }\n    \n    public int getVacationDays() {\n        return vacationDays;\n    }\n    \n    public void setVacationDays(int vacationDays) {\n        this.vacationDays = vacationDays;\n    }\n    \n    public int getUsedVacationDays() {\n        return usedVacationDays;\n    }\n    \n    public void setUsedVacationDays(int usedVacationDays) {\n        this.usedVacationDays = usedVacationDays;\n    }\n    \n    public String getManager() {\n        return manager;\n    }\n    \n    public void setManager(String manager) {\n        this.manager = manager;\n    }\n    \n    public String getEmail() {\n        return email;\n    }\n    \n    public void setEmail(String email) {\n        this.email = email;\n    }\n    \n    public String getPhoneNumber() {\n        return phoneNumber;\n    }\n    \n    public void setPhoneNumber(String phoneNumber) {\n        this.phoneNumber = phoneNumber;\n    }\n    \n    public boolean isActive() {\n        return isActive;\n    }\n    \n    public void setActive(boolean active) {\n        isActive = active;\n    }\n    \n    public java.util.List<String> getSkillCertifications() {\n        return skillCertifications;\n    }\n    \n    public java.util.Map<String, String> getPersonalInfo() {\n        return personalInfo;\n    }\n    \n    public double getOvertimeHours() {\n        return overtimeHours;\n    }\n    \n    public void setOvertimeHours(double overtimeHours) {\n        this.overtimeHours = overtimeHours;\n    }\n}",
            "level": "HARD",
            "language": "JAVA",
            "violation": "SRP",
            "description": "Employee salary payslip system"
        },
        {
            "input": "class FileStorage {\n    private String basePath;\n    \n    public FileStorage(String basePath) {\n        this.basePath = basePath;\n    }\n    \n    public void saveToFile(String filename, String content) {\n        System.out.println(\"Saving content to file: \" + basePath + \"/\" + filename);\n    }\n    \n    public String loadFromFile(String filename) {\n        System.out.println(\"Loading content from file: \" + basePath + \"/\" + filename);\n        return \"file content\";\n    }\n    \n    public void deleteFile(String filename) {\n        System.out.println(\"Deleting file: \" + basePath + \"/\" + filename);\n    }\n}\n\nclass EmailService {\n    private String smtpServer;\n    \n    public EmailService(String smtpServer) {\n        this.smtpServer = smtpServer;\n    }\n    \n    public void sendEmail(String recipient, String subject, String body) {\n        System.out.println(\"Sending email to: \" + recipient);\n        System.out.println(\"Subject: \" + subject);\n    }\n    \n    public void sendBulkEmail(java.util.List<String> recipients, String subject, String body) {\n        System.out.println(\"Sending bulk email to \" + recipients.size() + \" recipients\");\n    }\n}\n\nclass DatabaseService {\n    private String connectionString;\n    \n    public DatabaseService(String connectionString) {\n        this.connectionString = connectionString;\n    }\n    \n    public void saveBook(Book book) {\n        System.out.println(\"Saving book to database: \" + book.getTitle());\n    }\n    \n    public void updateSalesData(String isbn, int sales) {\n        System.out.println(\"Updating sales data for ISBN: \" + isbn);\n    }\n    \n    public void logTransaction(String type, String details) {\n        System.out.println(\"[DB LOG] \" + type + \": \" + details);\n    }\n}\n\nclass PrinterService {\n    private String printerName;\n    \n    public PrinterService(String printerName) {\n        this.printerName = printerName;\n    }\n    \n    public void print(String document) {\n        System.out.println(\"Printing on \" + printerName + \": \" + document.substring(0, Math.min(50, document.length())) + \"...\");\n    }\n    \n    public void printReport(String report) {\n        System.out.println(\"Printing report on \" + printerName);\n    }\n}\n\npublic class Book {\n    private String title;\n    private String author;\n    private String content;\n    private String isbn;\n    private java.util.Date publishDate;\n    private String genre;\n    private int pageCount;\n    private double price;\n    private String publisher;\n    private java.util.List<String> reviews;\n    private double averageRating;\n    private int totalSales;\n    private java.util.List<String> customerEmails;\n    private boolean isAvailable;\n    private String format;\n    private double discountRate;\n    \n    private FileStorage fileStorage;\n    private EmailService emailService;\n    private DatabaseService dbService;\n    private PrinterService printer;\n    \n    public Book(String title, String author, String content) {\n        this.title = title;\n        this.author = author;\n        this.content = content;\n        this.publishDate = new java.util.Date();\n        this.reviews = new java.util.ArrayList<>();\n        this.customerEmails = new java.util.ArrayList<>();\n        this.averageRating = 0.0;\n        this.totalSales = 0;\n        this.isAvailable = true;\n        this.format = \"paperback\";\n        this.discountRate = 0.0;\n        \n        this.fileStorage = new FileStorage(\"/books/storage\");\n        this.emailService = new EmailService(\"smtp.bookstore.com\");\n        this.dbService = new DatabaseService(\"jdbc:mysql://localhost:3306/bookstore\");\n        this.printer = new PrinterService(\"BookStore_Printer_001\");\n        \n        initializeBookDefaults();\n    }\n    \n    public void printBook() {\n        System.out.println(\"Title: \" + title + \"\\nAuthor: \" + author + \"\\nContent: \" + content);\n    }\n    \n    public void saveToFile(String filename) {\n        String bookData = formatCompleteBookData();\n        fileStorage.saveToFile(filename, bookData);\n        dbService.saveBook(this);\n    }\n    \n    public String formatCompleteBookData() {\n        return \"TITLE: \" + title + \"\\nAUTHOR: \" + author + \"\\nISBN: \" + isbn + \"\\nGENRE: \" + genre + \"\\nPAGES: \" + pageCount + \"\\nPRICE: $\" + calculateFinalPrice() + \"\\nFORMAT: \" + format + \"\\nPUBLISHER: \" + publisher + \"\\nRATING: \" + averageRating + \"\\nSALES: \" + totalSales + \"\\nAVAILABLE: \" + isAvailable + \"\\nCONTENT: \" + content;\n    }\n    \n    public void generateUniqueISBN() {\n        long timestamp = System.currentTimeMillis();\n        String category = genre != null && genre.equals(\"fiction\") ? \"FIC\" : \"NF\";\n        this.isbn = \"978-\" + category + \"-\" + (timestamp % 100000) + \"-\" + String.format(\"%02d\", (int)(Math.random() * 100));\n    }\n    \n    public void calculateDynamicPageCount() {\n        if (content != null) {\n            int basePages = content.length() / 250;\n            double formatMultiplier = format.equals(\"hardcover\") ? 1.2 : 1.0;\n            this.pageCount = Math.max(1, (int)(basePages * formatMultiplier));\n        }\n    }\n    \n    public boolean validateCompleteBookData() {\n        return title != null && !title.trim().isEmpty() && \n               author != null && !author.trim().isEmpty() && \n               validateISBNFormat(isbn) && \n               validatePriceRange(price) && \n               content != null && content.length() > 0;\n    }\n    \n    public boolean validateISBNFormat(String isbn) {\n        if (isbn == null) return false;\n        String clean = isbn.replaceAll(\"[^0-9X]\", \"\");\n        return clean.length() == 10 || clean.length() == 13;\n    }\n    \n    public boolean validatePriceRange(double price) {\n        return price >= 0.99 && price <= 999.99;\n    }\n    \n    public void processCustomerReview(String customerEmail, String review, double rating) {\n        if (rating >= 1.0 && rating <= 5.0) {\n            reviews.add(review);\n            customerEmails.add(customerEmail);\n            recalculateRatingMetrics(rating);\n            sendReviewConfirmationEmail(customerEmail);\n            logReviewActivity(customerEmail, rating);\n        }\n    }\n    \n    public void recalculateRatingMetrics(double newRating) {\n        averageRating = reviews.size() == 1 ? newRating : (averageRating * (reviews.size() - 1) + newRating) / reviews.size();\n    }\n    \n    public void sendReviewConfirmationEmail(String customerEmail) {\n        String subject = \"Thank you for reviewing: \" + title;\n        String body = createReviewThankYouEmail();\n        emailService.sendEmail(customerEmail, subject, body);\n    }\n    \n    public String createReviewThankYouEmail() {\n        return \"Dear Reader,\\n\\nThank you for reviewing '\" + title + \"' by \" + author + \".\\nYour feedback helps other readers discover great books!\\n\\nBest regards,\\nBookstore Team\";\n    }\n    \n    public void logReviewActivity(String customerEmail, double rating) {\n        String logDetails = \"Review added - Book: \" + isbn + \", Customer: \" + customerEmail + \", Rating: \" + rating;\n        dbService.logTransaction(\"REVIEW_ADDED\", logDetails);\n    }\n    \n    public void processSaleTransaction(String customerEmail) {\n        totalSales++;\n        customerEmails.add(customerEmail);\n        \n        updateInventoryStatus();\n        \n        dbService.updateSalesData(isbn, totalSales);\n        \n        String receiptEmail = generateSalesReceiptEmail();\n        emailService.sendEmail(customerEmail, \"Purchase Confirmation - \" + title, receiptEmail);\n        \n        logSalesTransaction(customerEmail);\n        \n        if (totalSales % 100 == 0) {\n            sendMilestoneNotification();\n        }\n    }\n    \n    public void updateInventoryStatus() {\n        if (totalSales > 1000) {\n            this.isAvailable = Math.random() > 0.1;\n        }\n    }\n    \n    public String generateSalesReceiptEmail() {\n        double finalPrice = calculateFinalPrice();\n        return \"PURCHASE RECEIPT\\n\\nTitle: \" + title + \"\\nAuthor: \" + author + \"\\nISBN: \" + isbn + \"\\nFormat: \" + format + \"\\nOriginal Price: $\" + price + \"\\nDiscount: \" + (discountRate * 100) + \"%\\nFinal Price: $\" + String.format(\"%.2f\", finalPrice) + \"\\nThank you for your purchase!\";\n    }\n    \n    public void logSalesTransaction(String customerEmail) {\n        String logDetails = \"Sale completed - Book: \" + isbn + \", Customer: \" + customerEmail + \", Price: $\" + calculateFinalPrice();\n        dbService.logTransaction(\"SALE_COMPLETED\", logDetails);\n    }\n    \n    public void sendMilestoneNotification() {\n        String subject = \"Sales Milestone Reached: \" + title;\n        String body = \"Congratulations! '\" + title + \"' has reached \" + totalSales + \" sales!\";\n        emailService.sendEmail(\"sales@bookstore.com\", subject, body);\n    }\n    \n    public double calculateFinalPrice() {\n        return price * (1.0 - discountRate);\n    }\n    \n    public double calculateAuthorRoyalty() {\n        double baseRate = 0.10;\n        if (totalSales > 5000) baseRate = 0.18;\n        else if (totalSales > 1000) baseRate = 0.15;\n        return totalSales * calculateFinalPrice() * baseRate;\n    }\n    \n    public String generateComprehensiveReport() {\n        double revenue = totalSales * calculateFinalPrice();\n        double royalty = calculateAuthorRoyalty();\n        return \"=== COMPREHENSIVE BOOK REPORT ===\\nTitle: \" + title + \"\\nAuthor: \" + author + \"\\nISBN: \" + isbn + \"\\nGenre: \" + genre + \"\\nFormat: \" + format + \"\\nTotal Sales: \" + totalSales + \"\\nRevenue: $\" + String.format(\"%.2f\", revenue) + \"\\nAuthor Royalty: $\" + String.format(\"%.2f\", royalty) + \"\\nAverage Rating: \" + String.format(\"%.2f\", averageRating) + \"\\nReviews: \" + reviews.size() + \"\\nAvailable: \" + isAvailable;\n    }\n    \n    public void printDetailedReport() {\n        String report = generateComprehensiveReport();\n        System.out.println(report);\n        printer.printReport(report);\n    }\n    \n    public void sendMarketingCampaign() {\n        if (customerEmails.size() > 0) {\n            String campaignEmail = createMarketingEmail();\n            emailService.sendBulkEmail(customerEmails, \"New Release from \" + author, campaignEmail);\n            logMarketingActivity();\n        }\n    }\n    \n    public String createMarketingEmail() {\n        return \"Dear Valued Reader,\\n\\nSince you enjoyed '\" + title + \"', you might like our new releases from \" + author + \".\\nCheck out our latest collection with special discounts!\\n\\nHappy Reading!\";\n    }\n    \n    public void logMarketingActivity() {\n        dbService.logTransaction(\"MARKETING_SENT\", \"Campaign sent for book: \" + isbn + \" to \" + customerEmails.size() + \" customers\");\n    }\n    \n    public void exportToMultipleFormats() {\n        String jsonData = \"{\\\"title\\\":\\\"\" + title + \"\\\",\\\"author\\\":\\\"\" + author + \"\\\",\\\"isbn\\\":\\\"\" + isbn + \"\\\",\\\"sales\\\":\" + totalSales + \",\\\"rating\\\":\" + averageRating + \"}\";\n        fileStorage.saveToFile(isbn + \".json\", jsonData);\n        \n        String xmlData = \"<book><title>\" + title + \"</title><author>\" + author + \"</author><isbn>\" + isbn + \"</isbn><sales>\" + totalSales + \"</sales></book>\";\n        fileStorage.saveToFile(isbn + \".xml\", xmlData);\n    }\n    \n    public void initializeBookDefaults() {\n        generateUniqueISBN();\n        calculateDynamicPageCount();\n        this.genre = \"general\";\n        this.price = 19.99;\n        this.publisher = \"Independent Press\";\n    }\n    \n    public void applyDiscount(double discountPercentage) {\n        if (discountPercentage >= 0.0 && discountPercentage <= 0.5) {\n            this.discountRate = discountPercentage;\n            notifyCustomersOfDiscount();\n        }\n    }\n    \n    public void notifyCustomersOfDiscount() {\n        if (customerEmails.size() > 0) {\n            String discountEmail = \"Special Offer: \" + (discountRate * 100) + \"% off on '\" + title + \"'! Limited time only.\";\n            emailService.sendBulkEmail(customerEmails, \"Special Discount - \" + title, discountEmail);\n        }\n    }\n    \n    public String getTitle() {\n        return title;\n    }\n    \n    public void setTitle(String title) {\n        this.title = title;\n    }\n    \n    public String getAuthor() {\n        return author;\n    }\n    \n    public void setContent(String content) {\n        this.content = content;\n        calculateDynamicPageCount();\n    }\n    \n    public void setPrice(double price) {\n        if (validatePriceRange(price)) {\n            this.price = price;\n        }\n    }\n    \n    public void setFormat(String format) {\n        this.format = format;\n        calculateDynamicPageCount();\n    }\n}",
            "output": "class FileStorage {\n    private String basePath;\n    \n    public FileStorage(String basePath) {\n        this.basePath = basePath;\n    }\n    \n    public void saveToFile(String filename, String content) {\n        System.out.println(\"Saving content to file: \" + basePath + \"/\" + filename);\n    }\n    \n    public String loadFromFile(String filename) {\n        System.out.println(\"Loading content from file: \" + basePath + \"/\" + filename);\n        return \"file content\";\n    }\n    \n    public void deleteFile(String filename) {\n        System.out.println(\"Deleting file: \" + basePath + \"/\" + filename);\n    }\n}\n\nclass EmailService {\n    private String smtpServer;\n    \n    public EmailService(String smtpServer) {\n        this.smtpServer = smtpServer;\n    }\n    \n    public void sendEmail(String recipient, String subject, String body) {\n        System.out.println(\"Sending email to: \" + recipient);\n        System.out.println(\"Subject: \" + subject);\n    }\n    \n    public void sendBulkEmail(java.util.List<String> recipients, String subject, String body) {\n        System.out.println(\"Sending bulk email to \" + recipients.size() + \" recipients\");\n    }\n}\n\nclass DatabaseService {\n    private String connectionString;\n    \n    public DatabaseService(String connectionString) {\n        this.connectionString = connectionString;\n    }\n    \n    public void saveBook(Book book) {\n        System.out.println(\"Saving book to database: \" + book.getTitle());\n    }\n    \n    public void updateSalesData(String isbn, int sales) {\n        System.out.println(\"Updating sales data for ISBN: \" + isbn);\n    }\n    \n    public void logTransaction(String type, String details) {\n        System.out.println(\"[DB LOG] \" + type + \": \" + details);\n    }\n}\n\nclass PrinterService {\n    private String printerName;\n    \n    public PrinterService(String printerName) {\n        this.printerName = printerName;\n    }\n    \n    public void print(String document) {\n        System.out.println(\"Printing on \" + printerName + \": \" + document.substring(0, Math.min(50, document.length())) + \"...\");\n    }\n    \n    public void printReport(String report) {\n        System.out.println(\"Printing report on \" + printerName);\n    }\n}\n\nclass ISBNGenerationService {\n    public String generateUniqueISBN(String genre) {\n        long timestamp = System.currentTimeMillis();\n        String category = genre != null && genre.equals(\"fiction\") ? \"FIC\" : \"NF\";\n        return \"978-\" + category + \"-\" + (timestamp % 100000) + \"-\" + String.format(\"%02d\", (int)(Math.random() * 100));\n    }\n}\n\nclass PageCalculationService {\n    public int calculateDynamicPageCount(String content, String format) {\n        if (content != null) {\n            int basePages = content.length() / 250;\n            double formatMultiplier = format != null && format.equals(\"hardcover\") ? 1.2 : 1.0;\n            return Math.max(1, (int)(basePages * formatMultiplier));\n        }\n        return 1;\n    }\n}\n\nclass ValidationService {\n    public boolean validateCompleteBookData(String title, String author, String isbn, double price, String content) {\n        return title != null && !title.trim().isEmpty() && \n               author != null && !author.trim().isEmpty() && \n               validateISBNFormat(isbn) && \n               validatePriceRange(price) && \n               content != null && content.length() > 0;\n    }\n    \n    public boolean validateISBNFormat(String isbn) {\n        if (isbn == null) return false;\n        String clean = isbn.replaceAll(\"[^0-9X]\", \"\");\n        return clean.length() == 10 || clean.length() == 13;\n    }\n    \n    public boolean validatePriceRange(double price) {\n        return price >= 0.99 && price <= 999.99;\n    }\n    \n    public boolean validateRating(double rating) {\n        return rating >= 1.0 && rating <= 5.0;\n    }\n    \n    public boolean validateDiscountRate(double discountPercentage) {\n        return discountPercentage >= 0.0 && discountPercentage <= 0.5;\n    }\n}\n\nclass ReviewManagementService {\n    private EmailService emailService;\n    private DatabaseService dbService;\n    private EmailContentService emailContentService;\n    \n    public ReviewManagementService() {\n        this.emailService = new EmailService(\"smtp.bookstore.com\");\n        this.dbService = new DatabaseService(\"jdbc:mysql://localhost:3306/bookstore\");\n        this.emailContentService = new EmailContentService();\n    }\n    \n    public void processCustomerReview(Book book, String customerEmail, String review, double rating) {\n        ValidationService validator = new ValidationService();\n        if (validator.validateRating(rating)) {\n            book.getReviews().add(review);\n            book.getCustomerEmails().add(customerEmail);\n            book.setAverageRating(recalculateRatingMetrics(book.getAverageRating(), book.getReviews().size(), rating));\n            sendReviewConfirmationEmail(book, customerEmail);\n            logReviewActivity(book.getIsbn(), customerEmail, rating);\n        }\n    }\n    \n    private double recalculateRatingMetrics(double currentAverage, int reviewCount, double newRating) {\n        return reviewCount == 1 ? newRating : (currentAverage * (reviewCount - 1) + newRating) / reviewCount;\n    }\n    \n    private void sendReviewConfirmationEmail(Book book, String customerEmail) {\n        String subject = \"Thank you for reviewing: \" + book.getTitle();\n        String body = emailContentService.createReviewThankYouEmail(book.getTitle(), book.getAuthor());\n        emailService.sendEmail(customerEmail, subject, body);\n    }\n    \n    private void logReviewActivity(String isbn, String customerEmail, double rating) {\n        String logDetails = \"Review added - Book: \" + isbn + \", Customer: \" + customerEmail + \", Rating: \" + rating;\n        dbService.logTransaction(\"REVIEW_ADDED\", logDetails);\n    }\n}\n\nclass SalesManagementService {\n    private DatabaseService dbService;\n    private EmailService emailService;\n    private EmailContentService emailContentService;\n    private InventoryManagementService inventoryService;\n    \n    public SalesManagementService() {\n        this.dbService = new DatabaseService(\"jdbc:mysql://localhost:3306/bookstore\");\n        this.emailService = new EmailService(\"smtp.bookstore.com\");\n        this.emailContentService = new EmailContentService();\n        this.inventoryService = new InventoryManagementService();\n    }\n    \n    public void processSaleTransaction(Book book, String customerEmail) {\n        book.setTotalSales(book.getTotalSales() + 1);\n        book.getCustomerEmails().add(customerEmail);\n        \n        inventoryService.updateInventoryStatus(book);\n        \n        dbService.updateSalesData(book.getIsbn(), book.getTotalSales());\n        \n        String receiptEmail = emailContentService.generateSalesReceiptEmail(book);\n        emailService.sendEmail(customerEmail, \"Purchase Confirmation - \" + book.getTitle(), receiptEmail);\n        \n        logSalesTransaction(book, customerEmail);\n        \n        if (book.getTotalSales() % 100 == 0) {\n            sendMilestoneNotification(book);\n        }\n    }\n    \n    private void logSalesTransaction(Book book, String customerEmail) {\n        PricingService pricingService = new PricingService();\n        double finalPrice = pricingService.calculateFinalPrice(book.getPrice(), book.getDiscountRate());\n        String logDetails = \"Sale completed - Book: \" + book.getIsbn() + \", Customer: \" + customerEmail + \", Price: $\" + finalPrice;\n        dbService.logTransaction(\"SALE_COMPLETED\", logDetails);\n    }\n    \n    private void sendMilestoneNotification(Book book) {\n        String subject = \"Sales Milestone Reached: \" + book.getTitle();\n        String body = \"Congratulations! '\" + book.getTitle() + \"' has reached \" + book.getTotalSales() + \" sales!\";\n        emailService.sendEmail(\"sales@bookstore.com\", subject, body);\n    }\n}\n\nclass PricingService {\n    public double calculateFinalPrice(double price, double discountRate) {\n        return price * (1.0 - discountRate);\n    }\n    \n    public double calculateAuthorRoyalty(int totalSales, double finalPrice) {\n        double baseRate = 0.10;\n        if (totalSales > 5000) baseRate = 0.18;\n        else if (totalSales > 1000) baseRate = 0.15;\n        return totalSales * finalPrice * baseRate;\n    }\n}\n\nclass InventoryManagementService {\n    public void updateInventoryStatus(Book book) {\n        if (book.getTotalSales() > 1000) {\n            book.setAvailable(Math.random() > 0.1);\n        }\n    }\n}\n\nclass EmailContentService {\n    public String createReviewThankYouEmail(String title, String author) {\n        return \"Dear Reader,\\n\\nThank you for reviewing '\" + title + \"' by \" + author + \".\\nYour feedback helps other readers discover great books!\\n\\nBest regards,\\nBookstore Team\";\n    }\n    \n    public String generateSalesReceiptEmail(Book book) {\n        PricingService pricingService = new PricingService();\n        double finalPrice = pricingService.calculateFinalPrice(book.getPrice(), book.getDiscountRate());\n        return \"PURCHASE RECEIPT\\n\\nTitle: \" + book.getTitle() + \"\\nAuthor: \" + book.getAuthor() + \"\\nISBN: \" + book.getIsbn() + \n               \"\\nFormat: \" + book.getFormat() + \"\\nOriginal Price: $\" + book.getPrice() + \"\\nDiscount: \" + (book.getDiscountRate() * 100) + \n               \"%\\nFinal Price: $\" + String.format(\"%.2f\", finalPrice) + \"\\nThank you for your purchase!\";\n    }\n    \n    public String createMarketingEmail(String title, String author) {\n        return \"Dear Valued Reader,\\n\\nSince you enjoyed '\" + title + \"', you might like our new releases from \" + author + \".\\nCheck out our latest collection with special discounts!\\n\\nHappy Reading!\";\n    }\n    \n    public String createDiscountNotificationEmail(String title, double discountRate) {\n        return \"Special Offer: \" + (discountRate * 100) + \"% off on '\" + title + \"'! Limited time only.\";\n    }\n}\n\nclass DataFormattingService {\n    public String formatCompleteBookData(Book book) {\n        PricingService pricingService = new PricingService();\n        double finalPrice = pricingService.calculateFinalPrice(book.getPrice(), book.getDiscountRate());\n        return \"TITLE: \" + book.getTitle() + \"\\nAUTHOR: \" + book.getAuthor() + \"\\nISBN: \" + book.getIsbn() + \n               \"\\nGENRE: \" + book.getGenre() + \"\\nPAGES: \" + book.getPageCount() + \"\\nPRICE: $\" + finalPrice + \n               \"\\nFORMAT: \" + book.getFormat() + \"\\nPUBLISHER: \" + book.getPublisher() + \"\\nRATING: \" + book.getAverageRating() + \n               \"\\nSALES: \" + book.getTotalSales() + \"\\nAVAILABLE: \" + book.isAvailable() + \"\\nCONTENT: \" + book.getContent();\n    }\n    \n    public String formatAsJSON(Book book) {\n        return \"{\\\"title\\\":\\\"\" + book.getTitle() + \"\\\",\\\"author\\\":\\\"\" + book.getAuthor() + \"\\\",\\\"isbn\\\":\\\"\" + book.getIsbn() + \n               \"\\\",\\\"sales\\\":\" + book.getTotalSales() + \",\\\"rating\\\":\" + book.getAverageRating() + \"}\";\n    }\n    \n    public String formatAsXML(Book book) {\n        return \"<book><title>\" + book.getTitle() + \"</title><author>\" + book.getAuthor() + \"</author><isbn>\" + book.getIsbn() + \n               \"</isbn><sales>\" + book.getTotalSales() + \"</sales></book>\";\n    }\n}\n\nclass ReportGenerationService {\n    private PricingService pricingService;\n    \n    public ReportGenerationService() {\n        this.pricingService = new PricingService();\n    }\n    \n    public String generateComprehensiveReport(Book book) {\n        double finalPrice = pricingService.calculateFinalPrice(book.getPrice(), book.getDiscountRate());\n        double revenue = book.getTotalSales() * finalPrice;\n        double royalty = pricingService.calculateAuthorRoyalty(book.getTotalSales(), finalPrice);\n        \n        return \"=== COMPREHENSIVE BOOK REPORT ===\\nTitle: \" + book.getTitle() + \"\\nAuthor: \" + book.getAuthor() + \n               \"\\nISBN: \" + book.getIsbn() + \"\\nGenre: \" + book.getGenre() + \"\\nFormat: \" + book.getFormat() + \n               \"\\nTotal Sales: \" + book.getTotalSales() + \"\\nRevenue: $\" + String.format(\"%.2f\", revenue) + \n               \"\\nAuthor Royalty: $\" + String.format(\"%.2f\", royalty) + \"\\nAverage Rating: \" + String.format(\"%.2f\", book.getAverageRating()) + \n               \"\\nReviews: \" + book.getReviews().size() + \"\\nAvailable: \" + book.isAvailable();\n    }\n}\n\nclass BookPrintingService {\n    private PrinterService printer;\n    private ReportGenerationService reportService;\n    \n    public BookPrintingService() {\n        this.printer = new PrinterService(\"BookStore_Printer_001\");\n        this.reportService = new ReportGenerationService();\n    }\n    \n    public void printBook(Book book) {\n        System.out.println(\"Title: \" + book.getTitle() + \"\\nAuthor: \" + book.getAuthor() + \"\\nContent: \" + book.getContent());\n    }\n    \n    public void printDetailedReport(Book book) {\n        String report = reportService.generateComprehensiveReport(book);\n        System.out.println(report);\n        printer.printReport(report);\n    }\n}\n\nclass MarketingService {\n    private EmailService emailService;\n    private EmailContentService emailContentService;\n    private DatabaseService dbService;\n    \n    public MarketingService() {\n        this.emailService = new EmailService(\"smtp.bookstore.com\");\n        this.emailContentService = new EmailContentService();\n        this.dbService = new DatabaseService(\"jdbc:mysql://localhost:3306/bookstore\");\n    }\n    \n    public void sendMarketingCampaign(Book book) {\n        if (book.getCustomerEmails().size() > 0) {\n            String campaignEmail = emailContentService.createMarketingEmail(book.getTitle(), book.getAuthor());\n            emailService.sendBulkEmail(book.getCustomerEmails(), \"New Release from \" + book.getAuthor(), campaignEmail);\n            logMarketingActivity(book);\n        }\n    }\n    \n    public void notifyCustomersOfDiscount(Book book) {\n        if (book.getCustomerEmails().size() > 0) {\n            String discountEmail = emailContentService.createDiscountNotificationEmail(book.getTitle(), book.getDiscountRate());\n            emailService.sendBulkEmail(book.getCustomerEmails(), \"Special Discount - \" + book.getTitle(), discountEmail);\n        }\n    }\n    \n    private void logMarketingActivity(Book book) {\n        dbService.logTransaction(\"MARKETING_SENT\", \"Campaign sent for book: \" + book.getIsbn() + \" to \" + book.getCustomerEmails().size() + \" customers\");\n    }\n}\n\nclass FileExportService {\n    private FileStorage fileStorage;\n    private DataFormattingService formatter;\n    private DatabaseService dbService;\n    \n    public FileExportService() {\n        this.fileStorage = new FileStorage(\"/books/storage\");\n        this.formatter = new DataFormattingService();\n        this.dbService = new DatabaseService(\"jdbc:mysql://localhost:3306/bookstore\");\n    }\n    \n    public void saveToFile(Book book, String filename) {\n        String bookData = formatter.formatCompleteBookData(book);\n        fileStorage.saveToFile(filename, bookData);\n        dbService.saveBook(book);\n    }\n    \n    public void exportToMultipleFormats(Book book) {\n        String jsonData = formatter.formatAsJSON(book);\n        fileStorage.saveToFile(book.getIsbn() + \".json\", jsonData);\n        \n        String xmlData = formatter.formatAsXML(book);\n        fileStorage.saveToFile(book.getIsbn() + \".xml\", xmlData);\n    }\n}\n\nclass DiscountManagementService {\n    private ValidationService validator;\n    private MarketingService marketingService;\n    \n    public DiscountManagementService() {\n        this.validator = new ValidationService();\n        this.marketingService = new MarketingService();\n    }\n    \n    public void applyDiscount(Book book, double discountPercentage) {\n        if (validator.validateDiscountRate(discountPercentage)) {\n            book.setDiscountRate(discountPercentage);\n            marketingService.notifyCustomersOfDiscount(book);\n        }\n    }\n}\n\npublic class Book {\n    private String title;\n    private String author;\n    private String content;\n    private String isbn;\n    private java.util.Date publishDate;\n    private String genre;\n    private int pageCount;\n    private double price;\n    private String publisher;\n    private java.util.List<String> reviews;\n    private double averageRating;\n    private int totalSales;\n    private java.util.List<String> customerEmails;\n    private boolean isAvailable;\n    private String format;\n    private double discountRate;\n    \n    public Book(String title, String author, String content) {\n        this.title = title;\n        this.author = author;\n        this.content = content;\n        this.publishDate = new java.util.Date();\n        this.reviews = new java.util.ArrayList<>();\n        this.customerEmails = new java.util.ArrayList<>();\n        this.averageRating = 0.0;\n        this.totalSales = 0;\n        this.isAvailable = true;\n        this.format = \"paperback\";\n        this.discountRate = 0.0;\n        \n        initializeBookDefaults();\n    }\n    \n    private void initializeBookDefaults() {\n        ISBNGenerationService isbnService = new ISBNGenerationService();\n        this.isbn = isbnService.generateUniqueISBN(genre);\n        \n        PageCalculationService pageService = new PageCalculationService();\n        this.pageCount = pageService.calculateDynamicPageCount(content, format);\n        \n        this.genre = \"general\";\n        this.price = 19.99;\n        this.publisher = \"Independent Press\";\n    }\n    \n    // Getters and Setters\n    public String getTitle() {\n        return title;\n    }\n    \n    public void setTitle(String title) {\n        this.title = title;\n    }\n    \n    public String getAuthor() {\n        return author;\n    }\n    \n    public String getContent() {\n        return content;\n    }\n    \n    public void setContent(String content) {\n        this.content = content;\n        PageCalculationService pageService = new PageCalculationService();\n        this.pageCount = pageService.calculateDynamicPageCount(content, format);\n    }\n    \n    public String getIsbn() {\n        return isbn;\n    }\n    \n    public java.util.Date getPublishDate() {\n        return publishDate;\n    }\n    \n    public String getGenre() {\n        return genre;\n    }\n    \n    public void setGenre(String genre) {\n        this.genre = genre;\n    }\n    \n    public int getPageCount() {\n        return pageCount;\n    }\n    \n    public double getPrice() {\n        return price;\n    }\n    \n    public void setPrice(double price) {\n        ValidationService validator = new ValidationService();\n        if (validator.validatePriceRange(price)) {\n            this.price = price;\n        }\n    }\n    \n    public String getPublisher() {\n        return publisher;\n    }\n    \n    public void setPublisher(String publisher) {\n        this.publisher = publisher;\n    }\n    \n    public java.util.List<String> getReviews() {\n        return reviews;\n    }\n    \n    public double getAverageRating() {\n        return averageRating;\n    }\n    \n    public void setAverageRating(double averageRating) {\n        this.averageRating = averageRating;\n    }\n    \n    public int getTotalSales() {\n        return totalSales;\n    }\n    \n    public void setTotalSales(int totalSales) {\n        this.totalSales = totalSales;\n    }\n    \n    public java.util.List<String> getCustomerEmails() {\n        return customerEmails;\n    }\n    \n    public boolean isAvailable() {\n        return isAvailable;\n    }\n    \n    public void setAvailable(boolean available) {\n        isAvailable = available;\n    }\n    \n    public String getFormat() {\n        return format;\n    }\n    \n    public void setFormat(String format) {\n        this.format = format;\n        PageCalculationService pageService = new PageCalculationService();\n        this.pageCount = pageService.calculateDynamicPageCount(content, format);\n    }\n    \n    public double getDiscountRate() {\n        return discountRate;\n    }\n    \n    public void setDiscountRate(double discountRate) {\n        this.discountRate = discountRate;\n    }\n}",
            "level": "HARD",
            "language": "JAVA",
            "violation": "SRP",
            "description": "Book printing file saving"
        },
        {
            "input": "class InventoryDatabase {\n    private String connectionString;\n    \n    public InventoryDatabase(String connectionString) {\n        this.connectionString = connectionString;\n    }\n    \n    public void updateStock(String productId, int quantity) {\n        System.out.println(\"Updating stock in database - Product: \" + productId + \", Quantity: \" + quantity);\n    }\n    \n    public void saveProduct(Product product) {\n        System.out.println(\"Saving product to database: \" + product.getName());\n    }\n    \n    public void logTransaction(String type, String details) {\n        System.out.println(\"[DB LOG] \" + type + \": \" + details);\n    }\n}\n\nclass EmailService {\n    private String smtpServer;\n    \n    public EmailService(String smtpServer) {\n        this.smtpServer = smtpServer;\n    }\n    \n    public void sendEmail(String recipient, String subject, String body) {\n        System.out.println(\"Sending email to: \" + recipient + \", Subject: \" + subject);\n    }\n    \n    public void sendBulkEmail(java.util.List<String> recipients, String subject, String body) {\n        System.out.println(\"Sending bulk email to \" + recipients.size() + \" recipients\");\n    }\n}\n\nclass PaymentProcessor {\n    private String apiKey;\n    \n    public PaymentProcessor(String apiKey) {\n        this.apiKey = apiKey;\n    }\n    \n    public boolean processPayment(double amount, String cardNumber) {\n        System.out.println(\"Processing payment of $\" + amount);\n        return Math.random() > 0.1;\n    }\n    \n    public void refundPayment(String transactionId, double amount) {\n        System.out.println(\"Processing refund: $\" + amount + \" for transaction: \" + transactionId);\n    }\n}\n\nclass ShippingService {\n    private String carrier;\n    \n    public ShippingService(String carrier) {\n        this.carrier = carrier;\n    }\n    \n    public String createShipment(String address, double weight) {\n        String trackingNumber = \"TRK\" + System.currentTimeMillis() % 100000;\n        System.out.println(\"Creating shipment via \" + carrier + \" - Tracking: \" + trackingNumber);\n        return trackingNumber;\n    }\n    \n    public double calculateShippingRate(String destination, double weight) {\n        return destination.equalsIgnoreCase(\"international\") ? weight * 5.0 : weight * 2.0;\n    }\n}\n\nclass AnalyticsService {\n    private String analyticsKey;\n    \n    public AnalyticsService(String analyticsKey) {\n        this.analyticsKey = analyticsKey;\n    }\n    \n    public void trackEvent(String eventType, String productId, java.util.Map<String, String> data) {\n        System.out.println(\"[ANALYTICS] \" + eventType + \" for product: \" + productId);\n    }\n    \n    public void generateReport(String reportType, String productId) {\n        System.out.println(\"Generating \" + reportType + \" report for product: \" + productId);\n    }\n}\n\npublic class Product {\n    private String name;\n    private double price;\n    private String productId;\n    private String category;\n    private int stockQuantity;\n    private double weight;\n    private String description;\n    private java.util.List<String> customerReviews;\n    private double averageRating;\n    private int totalSales;\n    private double costPrice;\n    private java.util.List<String> customerEmails;\n    private boolean isActive;\n    private String supplier;\n    private double discountRate;\n    private java.util.Map<String, Integer> salesByRegion;\n    \n    private InventoryDatabase database;\n    private EmailService emailService;\n    private PaymentProcessor paymentProcessor;\n    private ShippingService shippingService;\n    private AnalyticsService analytics;\n    \n    public Product(String name, double price) {\n        this.name = name;\n        this.price = price;\n        this.productId = generateAdvancedProductId();\n        this.customerReviews = new java.util.ArrayList<>();\n        this.customerEmails = new java.util.ArrayList<>();\n        this.salesByRegion = new java.util.HashMap<>();\n        this.averageRating = 0.0;\n        this.totalSales = 0;\n        this.stockQuantity = 100;\n        this.costPrice = price * 0.6;\n        this.isActive = true;\n        this.discountRate = 0.0;\n        this.weight = 1.0;\n        \n        this.database = new InventoryDatabase(\"jdbc:mysql://localhost:3306/inventory\");\n        this.emailService = new EmailService(\"smtp.ecommerce.com\");\n        this.paymentProcessor = new PaymentProcessor(\"pay_api_key_123\");\n        this.shippingService = new ShippingService(\"FedEx\");\n        this.analytics = new AnalyticsService(\"analytics_key_456\");\n        \n        initializeAdvancedDefaults();\n    }\n    \n    public double applyDiscount(double percentage) {\n        return price * (1 - percentage / 100);\n    }\n    \n    public void displayProduct() {\n        System.out.println(\"Product: \" + name + \", Price: $\" + price);\n    }\n    \n    public String generateAdvancedProductId() {\n        String categoryPrefix = category != null ? category.substring(0, Math.min(3, category.length())).toUpperCase() : \"GEN\";\n        String timestamp = String.valueOf(System.currentTimeMillis() % 100000);\n        String checksum = String.valueOf(Math.abs(name.hashCode() % 100));\n        return categoryPrefix + \"-\" + timestamp + \"-\" + checksum;\n    }\n    \n    public double calculateDynamicPricing() {\n        double demandMultiplier = totalSales > 1000 ? 1.2 : (totalSales > 500 ? 1.1 : 1.0);\n        double stockMultiplier = stockQuantity < 10 ? 1.15 : 1.0;\n        double seasonalMultiplier = java.time.LocalDate.now().getMonthValue() == 12 ? 1.25 : 1.0;\n        return price * demandMultiplier * stockMultiplier * seasonalMultiplier * (1 - discountRate);\n    }\n    \n    public double calculateComplexProfitMargin() {\n        double sellingPrice = calculateDynamicPricing();\n        double shippingCost = shippingService.calculateShippingRate(\"domestic\", weight);\n        double totalCost = costPrice + shippingCost + (sellingPrice * 0.03);\n        return ((sellingPrice - totalCost) / sellingPrice) * 100;\n    }\n    \n    public double calculateTieredDiscount(int quantity) {\n        if (quantity >= 100) return 0.20;\n        if (quantity >= 50) return 0.15;\n        if (quantity >= 10) return 0.10;\n        if (quantity >= 5) return 0.05;\n        return 0.0;\n    }\n    \n    public boolean validateProductCompliance() {\n        boolean hasValidName = name != null && name.length() >= 3 && name.length() <= 100;\n        boolean hasValidPrice = price > 0 && price <= 10000;\n        boolean hasValidWeight = weight > 0 && weight <= 50;\n        boolean hasValidStock = stockQuantity >= 0;\n        return hasValidName && hasValidPrice && hasValidWeight && hasValidStock;\n    }\n    \n    public void processAdvancedReview(String customerEmail, String review, double rating, String region) {\n        if (rating >= 1.0 && rating <= 5.0 && review.length() >= 10) {\n            customerReviews.add(review);\n            customerEmails.add(customerEmail);\n            recalculateAdvancedRating(rating);\n            \n            String thankYouEmail = createReviewThankYouEmail(customerEmail, rating);\n            emailService.sendEmail(customerEmail, \"Thank you for your review!\", thankYouEmail);\n            \n            java.util.Map<String, String> analyticsData = new java.util.HashMap<>();\n            analyticsData.put(\"rating\", String.valueOf(rating));\n            analyticsData.put(\"region\", region);\n            analytics.trackEvent(\"REVIEW_ADDED\", productId, analyticsData);\n            \n            database.logTransaction(\"REVIEW_PROCESSED\", \"Product: \" + productId + \", Rating: \" + rating + \", Region: \" + region);\n        }\n    }\n    \n    public void recalculateAdvancedRating(double newRating) {\n        if (customerReviews.size() == 1) {\n            averageRating = newRating;\n        } else {\n            double weightedTotal = averageRating * (customerReviews.size() - 1) + newRating;\n            averageRating = weightedTotal / customerReviews.size();\n        }\n        \n        if (averageRating >= 4.5 && customerReviews.size() >= 10) {\n            triggerBestSellerPromotion();\n        }\n    }\n    \n    public String createReviewThankYouEmail(String customerEmail, double rating) {\n        StringBuilder email = new StringBuilder();\n        email.append(\"Dear Valued Customer,\\n\\n\");\n        email.append(\"Thank you for your \").append(rating).append(\"-star review of \").append(name).append(\"!\\n\");\n        email.append(\"Your feedback helps other customers make informed decisions.\\n\\n\");\n        if (rating >= 4.0) {\n            email.append(\"As a token of appreciation, here's a 10% discount code: REVIEW10\\n\\n\");\n        }\n        email.append(\"Best regards,\\nCustomer Service Team\");\n        return email.toString();\n    }\n    \n    public void triggerBestSellerPromotion() {\n        String promoEmail = \"BESTSELLER ALERT: \" + name + \" is now a top-rated product with \" + averageRating + \" stars!\";\n        emailService.sendBulkEmail(customerEmails, \"Special Offer on Bestseller\", promoEmail);\n        analytics.trackEvent(\"BESTSELLER_PROMOTION\", productId, new java.util.HashMap<>());\n    }\n    \n    public String processComplexSale(int quantity, String customerEmail, String shippingAddress, String region, String cardNumber) {\n        if (stockQuantity < quantity) {\n            return \"FAILED: Insufficient stock\";\n        }\n        \n        double unitPrice = calculateDynamicPricing();\n        double discount = calculateTieredDiscount(quantity);\n        double subtotal = unitPrice * quantity * (1 - discount);\n        double shippingCost = shippingService.calculateShippingRate(region, weight * quantity);\n        double totalAmount = subtotal + shippingCost;\n        \n        if (!paymentProcessor.processPayment(totalAmount, cardNumber)) {\n            return \"FAILED: Payment declined\";\n        }\n        \n        stockQuantity -= quantity;\n        totalSales += quantity;\n        salesByRegion.put(region, salesByRegion.getOrDefault(region, 0) + quantity);\n        \n        String trackingNumber = shippingService.createShipment(shippingAddress, weight * quantity);\n        \n        database.updateStock(productId, stockQuantity);\n        \n        String receiptEmail = generateAdvancedReceipt(quantity, unitPrice, discount, shippingCost, totalAmount, trackingNumber);\n        emailService.sendEmail(customerEmail, \"Order Confirmation - \" + name, receiptEmail);\n        \n        checkAdvancedStockAlerts();\n        \n        java.util.Map<String, String> saleData = new java.util.HashMap<>();\n        saleData.put(\"quantity\", String.valueOf(quantity));\n        saleData.put(\"amount\", String.valueOf(totalAmount));\n        saleData.put(\"region\", region);\n        analytics.trackEvent(\"SALE_COMPLETED\", productId, saleData);\n        \n        database.logTransaction(\"COMPLEX_SALE\", \"Product: \" + productId + \", Qty: \" + quantity + \", Amount: $\" + totalAmount + \", Region: \" + region);\n        \n        return \"SUCCESS: Order placed - Tracking: \" + trackingNumber;\n    }\n    \n    public String generateAdvancedReceipt(int quantity, double unitPrice, double discount, double shipping, double total, String tracking) {\n        return \"ORDER RECEIPT\\n\" +\n               \"Product: \" + name + \" (\" + productId + \")\\n\" +\n               \"Quantity: \" + quantity + \"\\n\" +\n               \"Unit Price: $\" + String.format(\"%.2f\", unitPrice) + \"\\n\" +\n               \"Discount: \" + String.format(\"%.0f\", discount * 100) + \"%\\n\" +\n               \"Shipping: $\" + String.format(\"%.2f\", shipping) + \"\\n\" +\n               \"Total: $\" + String.format(\"%.2f\", total) + \"\\n\" +\n               \"Tracking: \" + tracking + \"\\n\" +\n               \"Thank you for your order!\";\n    }\n    \n    public void checkAdvancedStockAlerts() {\n        if (stockQuantity <= 5) {\n            String urgentAlert = \"URGENT: Product \" + name + \" (\" + productId + \") critically low - Only \" + stockQuantity + \" units left!\";\n            emailService.sendEmail(\"urgent@company.com\", \"Critical Stock Alert\", urgentAlert);\n            analytics.trackEvent(\"CRITICAL_STOCK_ALERT\", productId, new java.util.HashMap<>());\n        } else if (stockQuantity <= 20) {\n            String alert = \"LOW STOCK: Product \" + name + \" has \" + stockQuantity + \" units remaining.\";\n            emailService.sendEmail(\"inventory@company.com\", \"Low Stock Alert\", alert);\n        }\n    }\n    \n    public void executeSmartRestock(String supplierEmail) {\n        int recommendedStock = calculateOptimalStockLevel();\n        int restockQuantity = recommendedStock - stockQuantity;\n        \n        if (restockQuantity > 0) {\n            stockQuantity += restockQuantity;\n            database.updateStock(productId, stockQuantity);\n            \n            String restockEmail = generateSmartRestockEmail(restockQuantity, recommendedStock);\n            emailService.sendEmail(supplierEmail, \"Smart Restock Completed - \" + name, restockEmail);\n            \n            analytics.trackEvent(\"SMART_RESTOCK\", productId, java.util.Map.of(\"quantity\", String.valueOf(restockQuantity)));\n            database.logTransaction(\"SMART_RESTOCK\", \"Product: \" + productId + \", Added: \" + restockQuantity + \", Target: \" + recommendedStock);\n        }\n    }\n    \n    public int calculateOptimalStockLevel() {\n        int averageMonthlySales = totalSales / Math.max(1, java.time.LocalDate.now().getMonthValue());\n        int seasonalFactor = java.time.LocalDate.now().getMonthValue() == 12 ? 2 : 1;\n        return averageMonthlySales * 2 * seasonalFactor;\n    }\n    \n    public String generateSmartRestockEmail(int quantity, int targetLevel) {\n        return \"SMART RESTOCK REPORT\\n\" +\n               \"Product: \" + name + \" (\" + productId + \")\\n\" +\n               \"Restocked Quantity: \" + quantity + \"\\n\" +\n               \"New Stock Level: \" + stockQuantity + \"\\n\" +\n               \"Target Level: \" + targetLevel + \"\\n\" +\n               \"Sales Velocity: \" + (totalSales / Math.max(1, java.time.LocalDate.now().getDayOfYear())) + \" units/day\\n\" +\n               \"Restock completed successfully.\";\n    }\n    \n    public String generateComprehensiveAnalytics() {\n        double totalRevenue = totalSales * calculateDynamicPricing();\n        double profitMargin = calculateComplexProfitMargin();\n        String topRegion = salesByRegion.entrySet().stream().max(java.util.Map.Entry.comparingByValue()).map(java.util.Map.Entry::getKey).orElse(\"N/A\");\n        \n        return \"COMPREHENSIVE ANALYTICS\\n\" +\n               \"Product: \" + name + \" (\" + productId + \")\\n\" +\n               \"Total Sales: \" + totalSales + \" units\\n\" +\n               \"Revenue: $\" + String.format(\"%.2f\", totalRevenue) + \"\\n\" +\n               \"Profit Margin: \" + String.format(\"%.2f\", profitMargin) + \"%\\n\" +\n               \"Average Rating: \" + String.format(\"%.2f\", averageRating) + \" (\" + customerReviews.size() + \" reviews)\\n\" +\n               \"Top Region: \" + topRegion + \"\\n\" +\n               \"Stock Level: \" + stockQuantity + \"\\n\" +\n               \"Current Price: $\" + String.format(\"%.2f\", calculateDynamicPricing());\n    }\n    \n    public void launchMarketingCampaign(String campaignType) {\n        String campaignEmail = createCampaignEmail(campaignType);\n        emailService.sendBulkEmail(customerEmails, \"Special Campaign - \" + name, campaignEmail);\n        \n        java.util.Map<String, String> campaignData = new java.util.HashMap<>();\n        campaignData.put(\"type\", campaignType);\n        campaignData.put(\"reach\", String.valueOf(customerEmails.size()));\n        analytics.trackEvent(\"MARKETING_CAMPAIGN\", productId, campaignData);\n        \n        database.logTransaction(\"CAMPAIGN_LAUNCHED\", \"Product: \" + productId + \", Type: \" + campaignType + \", Reach: \" + customerEmails.size());\n    }\n    \n    public String createCampaignEmail(String campaignType) {\n        if (campaignType.equals(\"SEASONAL\")) {\n            return \"Don't miss our seasonal special on \" + name + \"! Limited time offer with up to 25% off!\";\n        } else if (campaignType.equals(\"CLEARANCE\")) {\n            return \"CLEARANCE ALERT: \" + name + \" must go! Huge discounts available now!\";\n        } else {\n            return \"Special promotion on \" + name + \" - Check out our latest deals!\";\n        }\n    }\n    \n    public void initializeAdvancedDefaults() {\n        this.category = \"Electronics\";\n        this.description = \"High-quality product\";\n        this.supplier = \"Global Supplier Inc\";\n        salesByRegion.put(\"North America\", 0);\n        salesByRegion.put(\"Europe\", 0);\n        salesByRegion.put(\"Asia\", 0);\n    }\n    \n    public String getName() {\n        return name;\n    }\n    \n    public double getPrice() {\n        return price;\n    }\n    \n    public void setPrice(double price) {\n        this.price = price;\n        database.logTransaction(\"PRICE_UPDATE\", \"Product: \" + productId + \", New price: $\" + price);\n    }\n    \n    public void setDiscountRate(double rate) {\n        this.discountRate = rate;\n        analytics.trackEvent(\"DISCOUNT_APPLIED\", productId, java.util.Map.of(\"rate\", String.valueOf(rate)));\n    }\n}",
            "output": "class InventoryDatabase {\n    private String connectionString;\n    \n    public InventoryDatabase(String connectionString) {\n        this.connectionString = connectionString;\n    }\n    \n    public void updateStock(String productId, int quantity) {\n        System.out.println(\"Updating stock in database - Product: \" + productId + \", Quantity: \" + quantity);\n    }\n    \n    public void saveProduct(Product product) {\n        System.out.println(\"Saving product to database: \" + product.getName());\n    }\n    \n    public void logTransaction(String type, String details) {\n        System.out.println(\"[DB LOG] \" + type + \": \" + details);\n    }\n}\n\nclass EmailService {\n    private String smtpServer;\n    \n    public EmailService(String smtpServer) {\n        this.smtpServer = smtpServer;\n    }\n    \n    public void sendEmail(String recipient, String subject, String body) {\n        System.out.println(\"Sending email to: \" + recipient + \", Subject: \" + subject);\n    }\n    \n    public void sendBulkEmail(java.util.List<String> recipients, String subject, String body) {\n        System.out.println(\"Sending bulk email to \" + recipients.size() + \" recipients\");\n    }\n}\n\nclass PaymentProcessor {\n    private String apiKey;\n    \n    public PaymentProcessor(String apiKey) {\n        this.apiKey = apiKey;\n    }\n    \n    public boolean processPayment(double amount, String cardNumber) {\n        System.out.println(\"Processing payment of $\" + amount);\n        return Math.random() > 0.1;\n    }\n    \n    public void refundPayment(String transactionId, double amount) {\n        System.out.println(\"Processing refund: $\" + amount + \" for transaction: \" + transactionId);\n    }\n}\n\nclass ShippingService {\n    private String carrier;\n    \n    public ShippingService(String carrier) {\n        this.carrier = carrier;\n    }\n    \n    public String createShipment(String address, double weight) {\n        String trackingNumber = \"TRK\" + System.currentTimeMillis() % 100000;\n        System.out.println(\"Creating shipment via \" + carrier + \" - Tracking: \" + trackingNumber);\n        return trackingNumber;\n    }\n    \n    public double calculateShippingRate(String destination, double weight) {\n        return destination.equalsIgnoreCase(\"international\") ? weight * 5.0 : weight * 2.0;\n    }\n}\n\nclass AnalyticsService {\n    private String analyticsKey;\n    \n    public AnalyticsService(String analyticsKey) {\n        this.analyticsKey = analyticsKey;\n    }\n    \n    public void trackEvent(String eventType, String productId, java.util.Map<String, String> data) {\n        System.out.println(\"[ANALYTICS] \" + eventType + \" for product: \" + productId);\n    }\n    \n    public void generateReport(String reportType, String productId) {\n        System.out.println(\"Generating \" + reportType + \" report for product: \" + productId);\n    }\n}\n\nclass ProductIdGenerationService {\n    public String generateAdvancedProductId(String name, String category) {\n        String categoryPrefix = category != null ? category.substring(0, Math.min(3, category.length())).toUpperCase() : \"GEN\";\n        String timestamp = String.valueOf(System.currentTimeMillis() % 100000);\n        String checksum = String.valueOf(Math.abs(name.hashCode() % 100));\n        return categoryPrefix + \"-\" + timestamp + \"-\" + checksum;\n    }\n}\n\nclass PricingCalculationService {\n    private ShippingService shippingService;\n    \n    public PricingCalculationService() {\n        this.shippingService = new ShippingService(\"FedEx\");\n    }\n    \n    public double applyDiscount(double price, double percentage) {\n        return price * (1 - percentage / 100);\n    }\n    \n    public double calculateDynamicPricing(double basePrice, int totalSales, int stockQuantity, double discountRate) {\n        double demandMultiplier = totalSales > 1000 ? 1.2 : (totalSales > 500 ? 1.1 : 1.0);\n        double stockMultiplier = stockQuantity < 10 ? 1.15 : 1.0;\n        double seasonalMultiplier = java.time.LocalDate.now().getMonthValue() == 12 ? 1.25 : 1.0;\n        return basePrice * demandMultiplier * stockMultiplier * seasonalMultiplier * (1 - discountRate);\n    }\n    \n    public double calculateComplexProfitMargin(double basePrice, int totalSales, int stockQuantity, double discountRate, double costPrice, double weight) {\n        double sellingPrice = calculateDynamicPricing(basePrice, totalSales, stockQuantity, discountRate);\n        double shippingCost = shippingService.calculateShippingRate(\"domestic\", weight);\n        double totalCost = costPrice + shippingCost + (sellingPrice * 0.03);\n        return ((sellingPrice - totalCost) / sellingPrice) * 100;\n    }\n    \n    public double calculateTieredDiscount(int quantity) {\n        if (quantity >= 100) return 0.20;\n        if (quantity >= 50) return 0.15;\n        if (quantity >= 10) return 0.10;\n        if (quantity >= 5) return 0.05;\n        return 0.0;\n    }\n}\n\nclass ValidationService {\n    public boolean validateProductCompliance(String name, double price, double weight, int stockQuantity) {\n        boolean hasValidName = name != null && name.length() >= 3 && name.length() <= 100;\n        boolean hasValidPrice = price > 0 && price <= 10000;\n        boolean hasValidWeight = weight > 0 && weight <= 50;\n        boolean hasValidStock = stockQuantity >= 0;\n        return hasValidName && hasValidPrice && hasValidWeight && hasValidStock;\n    }\n    \n    public boolean validateReview(double rating, String review) {\n        return rating >= 1.0 && rating <= 5.0 && review != null && review.length() >= 10;\n    }\n}\n\nclass ReviewManagementService {\n    private EmailService emailService;\n    private AnalyticsService analytics;\n    private InventoryDatabase database;\n    private EmailContentService emailContentService;\n    private ValidationService validator;\n    \n    public ReviewManagementService() {\n        this.emailService = new EmailService(\"smtp.ecommerce.com\");\n        this.analytics = new AnalyticsService(\"analytics_key_456\");\n        this.database = new InventoryDatabase(\"jdbc:mysql://localhost:3306/inventory\");\n        this.emailContentService = new EmailContentService();\n        this.validator = new ValidationService();\n    }\n    \n    public void processAdvancedReview(Product product, String customerEmail, String review, double rating, String region) {\n        if (validator.validateReview(rating, review)) {\n            product.getCustomerReviews().add(review);\n            product.getCustomerEmails().add(customerEmail);\n            product.setAverageRating(recalculateAdvancedRating(product.getAverageRating(), product.getCustomerReviews().size(), rating));\n            \n            String thankYouEmail = emailContentService.createReviewThankYouEmail(product.getName(), customerEmail, rating);\n            emailService.sendEmail(customerEmail, \"Thank you for your review!\", thankYouEmail);\n            \n            java.util.Map<String, String> analyticsData = new java.util.HashMap<>();\n            analyticsData.put(\"rating\", String.valueOf(rating));\n            analyticsData.put(\"region\", region);\n            analytics.trackEvent(\"REVIEW_ADDED\", product.getProductId(), analyticsData);\n            \n            database.logTransaction(\"REVIEW_PROCESSED\", \"Product: \" + product.getProductId() + \", Rating: \" + rating + \", Region: \" + region);\n            \n            if (product.getAverageRating() >= 4.5 && product.getCustomerReviews().size() >= 10) {\n                triggerBestSellerPromotion(product);\n            }\n        }\n    }\n    \n    private double recalculateAdvancedRating(double currentAverage, int reviewCount, double newRating) {\n        return reviewCount == 1 ? newRating : (currentAverage * (reviewCount - 1) + newRating) / reviewCount;\n    }\n    \n    private void triggerBestSellerPromotion(Product product) {\n        String promoEmail = \"BESTSELLER ALERT: \" + product.getName() + \" is now a top-rated product with \" + product.getAverageRating() + \" stars!\";\n        emailService.sendBulkEmail(product.getCustomerEmails(), \"Special Offer on Bestseller\", promoEmail);\n        analytics.trackEvent(\"BESTSELLER_PROMOTION\", product.getProductId(), new java.util.HashMap<>());\n    }\n}\n\nclass SalesProcessingService {\n    private PaymentProcessor paymentProcessor;\n    private ShippingService shippingService;\n    private InventoryDatabase database;\n    private EmailService emailService;\n    private AnalyticsService analytics;\n    private PricingCalculationService pricingService;\n    private EmailContentService emailContentService;\n    private StockAlertService stockAlertService;\n    \n    public SalesProcessingService() {\n        this.paymentProcessor = new PaymentProcessor(\"pay_api_key_123\");\n        this.shippingService = new ShippingService(\"FedEx\");\n        this.database = new InventoryDatabase(\"jdbc:mysql://localhost:3306/inventory\");\n        this.emailService = new EmailService(\"smtp.ecommerce.com\");\n        this.analytics = new AnalyticsService(\"analytics_key_456\");\n        this.pricingService = new PricingCalculationService();\n        this.emailContentService = new EmailContentService();\n        this.stockAlertService = new StockAlertService();\n    }\n    \n    public String processComplexSale(Product product, int quantity, String customerEmail, String shippingAddress, String region, String cardNumber) {\n        if (product.getStockQuantity() < quantity) {\n            return \"FAILED: Insufficient stock\";\n        }\n        \n        double unitPrice = pricingService.calculateDynamicPricing(product.getPrice(), product.getTotalSales(), product.getStockQuantity(), product.getDiscountRate());\n        double discount = pricingService.calculateTieredDiscount(quantity);\n        double subtotal = unitPrice * quantity * (1 - discount);\n        double shippingCost = shippingService.calculateShippingRate(region, product.getWeight() * quantity);\n        double totalAmount = subtotal + shippingCost;\n        \n        if (!paymentProcessor.processPayment(totalAmount, cardNumber)) {\n            return \"FAILED: Payment declined\";\n        }\n        \n        product.setStockQuantity(product.getStockQuantity() - quantity);\n        product.setTotalSales(product.getTotalSales() + quantity);\n        product.getSalesByRegion().put(region, product.getSalesByRegion().getOrDefault(region, 0) + quantity);\n        \n        String trackingNumber = shippingService.createShipment(shippingAddress, product.getWeight() * quantity);\n        \n        database.updateStock(product.getProductId(), product.getStockQuantity());\n        \n        String receiptEmail = emailContentService.generateAdvancedReceipt(product.getName(), product.getProductId(), quantity, unitPrice, discount, shippingCost, totalAmount, trackingNumber);\n        emailService.sendEmail(customerEmail, \"Order Confirmation - \" + product.getName(), receiptEmail);\n        \n        stockAlertService.checkAdvancedStockAlerts(product, emailService, analytics);\n        \n        java.util.Map<String, String> saleData = new java.util.HashMap<>();\n        saleData.put(\"quantity\", String.valueOf(quantity));\n        saleData.put(\"amount\", String.valueOf(totalAmount));\n        saleData.put(\"region\", region);\n        analytics.trackEvent(\"SALE_COMPLETED\", product.getProductId(), saleData);\n        \n        database.logTransaction(\"COMPLEX_SALE\", \"Product: \" + product.getProductId() + \", Qty: \" + quantity + \", Amount: $\" + totalAmount + \", Region: \" + region);\n        \n        return \"SUCCESS: Order placed - Tracking: \" + trackingNumber;\n    }\n}\n\nclass StockAlertService {\n    public void checkAdvancedStockAlerts(Product product, EmailService emailService, AnalyticsService analytics) {\n        if (product.getStockQuantity() <= 5) {\n            String urgentAlert = \"URGENT: Product \" + product.getName() + \" (\" + product.getProductId() + \") critically low - Only \" + product.getStockQuantity() + \" units left!\";\n            emailService.sendEmail(\"urgent@company.com\", \"Critical Stock Alert\", urgentAlert);\n            analytics.trackEvent(\"CRITICAL_STOCK_ALERT\", product.getProductId(), new java.util.HashMap<>());\n        } else if (product.getStockQuantity() <= 20) {\n            String alert = \"LOW STOCK: Product \" + product.getName() + \" has \" + product.getStockQuantity() + \" units remaining.\";\n            emailService.sendEmail(\"inventory@company.com\", \"Low Stock Alert\", alert);\n        }\n    }\n}\n\nclass InventoryManagementService {\n    private InventoryDatabase database;\n    private EmailService emailService;\n    private AnalyticsService analytics;\n    private EmailContentService emailContentService;\n    \n    public InventoryManagementService() {\n        this.database = new InventoryDatabase(\"jdbc:mysql://localhost:3306/inventory\");\n        this.emailService = new EmailService(\"smtp.ecommerce.com\");\n        this.analytics = new AnalyticsService(\"analytics_key_456\");\n        this.emailContentService = new EmailContentService();\n    }\n    \n    public void executeSmartRestock(Product product, String supplierEmail) {\n        int recommendedStock = calculateOptimalStockLevel(product.getTotalSales());\n        int restockQuantity = recommendedStock - product.getStockQuantity();\n        \n        if (restockQuantity > 0) {\n            product.setStockQuantity(product.getStockQuantity() + restockQuantity);\n            database.updateStock(product.getProductId(), product.getStockQuantity());\n            \n            String restockEmail = emailContentService.generateSmartRestockEmail(product.getName(), product.getProductId(), restockQuantity, product.getStockQuantity(), recommendedStock, product.getTotalSales());\n            emailService.sendEmail(supplierEmail, \"Smart Restock Completed - \" + product.getName(), restockEmail);\n            \n            analytics.trackEvent(\"SMART_RESTOCK\", product.getProductId(), java.util.Map.of(\"quantity\", String.valueOf(restockQuantity)));\n            database.logTransaction(\"SMART_RESTOCK\", \"Product: \" + product.getProductId() + \", Added: \" + restockQuantity + \", Target: \" + recommendedStock);\n        }\n    }\n    \n    private int calculateOptimalStockLevel(int totalSales) {\n        int averageMonthlySales = totalSales / Math.max(1, java.time.LocalDate.now().getMonthValue());\n        int seasonalFactor = java.time.LocalDate.now().getMonthValue() == 12 ? 2 : 1;\n        return averageMonthlySales * 2 * seasonalFactor;\n    }\n}\n\nclass EmailContentService {\n    public String createReviewThankYouEmail(String productName, String customerEmail, double rating) {\n        StringBuilder email = new StringBuilder();\n        email.append(\"Dear Valued Customer,\\n\\n\");\n        email.append(\"Thank you for your \").append(rating).append(\"-star review of \").append(productName).append(\"!\\n\");\n        email.append(\"Your feedback helps other customers make informed decisions.\\n\\n\");\n        if (rating >= 4.0) {\n            email.append(\"As a token of appreciation, here's a 10% discount code: REVIEW10\\n\\n\");\n        }\n        email.append(\"Best regards,\\nCustomer Service Team\");\n        return email.toString();\n    }\n    \n    public String generateAdvancedReceipt(String productName, String productId, int quantity, double unitPrice, double discount, double shipping, double total, String tracking) {\n        return \"ORDER RECEIPT\\n\" +\n               \"Product: \" + productName + \" (\" + productId + \")\\n\" +\n               \"Quantity: \" + quantity + \"\\n\" +\n               \"Unit Price: $\" + String.format(\"%.2f\", unitPrice) + \"\\n\" +\n               \"Discount: \" + String.format(\"%.0f\", discount * 100) + \"%\\n\" +\n               \"Shipping: $\" + String.format(\"%.2f\", shipping) + \"\\n\" +\n               \"Total: $\" + String.format(\"%.2f\", total) + \"\\n\" +\n               \"Tracking: \" + tracking + \"\\n\" +\n               \"Thank you for your order!\";\n    }\n    \n    public String generateSmartRestockEmail(String productName, String productId, int quantity, int newStock, int targetLevel, int totalSales) {\n        return \"SMART RESTOCK REPORT\\n\" +\n               \"Product: \" + productName + \" (\" + productId + \")\\n\" +\n               \"Restocked Quantity: \" + quantity + \"\\n\" +\n               \"New Stock Level: \" + newStock + \"\\n\" +\n               \"Target Level: \" + targetLevel + \"\\n\" +\n               \"Sales Velocity: \" + (totalSales / Math.max(1, java.time.LocalDate.now().getDayOfYear())) + \" units/day\\n\" +\n               \"Restock completed successfully.\";\n    }\n    \n    public String createCampaignEmail(String productName, String campaignType) {\n        if (campaignType.equals(\"SEASONAL\")) {\n            return \"Don't miss our seasonal special on \" + productName + \"! Limited time offer with up to 25% off!\";\n        } else if (campaignType.equals(\"CLEARANCE\")) {\n            return \"CLEARANCE ALERT: \" + productName + \" must go! Huge discounts available now!\";\n        } else {\n            return \"Special promotion on \" + productName + \" - Check out our latest deals!\";\n        }\n    }\n}\n\nclass AnalyticsReportingService {\n    private PricingCalculationService pricingService;\n    \n    public AnalyticsReportingService() {\n        this.pricingService = new PricingCalculationService();\n    }\n    \n    public String generateComprehensiveAnalytics(Product product) {\n        double currentPrice = pricingService.calculateDynamicPricing(product.getPrice(), product.getTotalSales(), product.getStockQuantity(), product.getDiscountRate());\n        double totalRevenue = product.getTotalSales() * currentPrice;\n        double profitMargin = pricingService.calculateComplexProfitMargin(product.getPrice(), product.getTotalSales(), product.getStockQuantity(), product.getDiscountRate(), product.getCostPrice(), product.getWeight());\n        String topRegion = product.getSalesByRegion().entrySet().stream().max(java.util.Map.Entry.comparingByValue()).map(java.util.Map.Entry::getKey).orElse(\"N/A\");\n        \n        return \"COMPREHENSIVE ANALYTICS\\n\" +\n               \"Product: \" + product.getName() + \" (\" + product.getProductId() + \")\\n\" +\n               \"Total Sales: \" + product.getTotalSales() + \" units\\n\" +\n               \"Revenue: $\" + String.format(\"%.2f\", totalRevenue) + \"\\n\" +\n               \"Profit Margin: \" + String.format(\"%.2f\", profitMargin) + \"%\\n\" +\n               \"Average Rating: \" + String.format(\"%.2f\", product.getAverageRating()) + \" (\" + product.getCustomerReviews().size() + \" reviews)\\n\" +\n               \"Top Region: \" + topRegion + \"\\n\" +\n               \"Stock Level: \" + product.getStockQuantity() + \"\\n\" +\n               \"Current Price: $\" + String.format(\"%.2f\", currentPrice);\n    }\n}\n\nclass MarketingCampaignService {\n    private EmailService emailService;\n    private AnalyticsService analytics;\n    private InventoryDatabase database;\n    private EmailContentService emailContentService;\n    \n    public MarketingCampaignService() {\n        this.emailService = new EmailService(\"smtp.ecommerce.com\");\n        this.analytics = new AnalyticsService(\"analytics_key_456\");\n        this.database = new InventoryDatabase(\"jdbc:mysql://localhost:3306/inventory\");\n        this.emailContentService = new EmailContentService();\n    }\n    \n    public void launchMarketingCampaign(Product product, String campaignType) {\n        String campaignEmail = emailContentService.createCampaignEmail(product.getName(), campaignType);\n        emailService.sendBulkEmail(product.getCustomerEmails(), \"Special Campaign - \" + product.getName(), campaignEmail);\n        \n        java.util.Map<String, String> campaignData = new java.util.HashMap<>();\n        campaignData.put(\"type\", campaignType);\n        campaignData.put(\"reach\", String.valueOf(product.getCustomerEmails().size()));\n        analytics.trackEvent(\"MARKETING_CAMPAIGN\", product.getProductId(), campaignData);\n        \n        database.logTransaction(\"CAMPAIGN_LAUNCHED\", \"Product: \" + product.getProductId() + \", Type: \" + campaignType + \", Reach: \" + product.getCustomerEmails().size());\n    }\n}\n\nclass ProductDisplayService {\n    public void displayProduct(Product product) {\n        System.out.println(\"Product: \" + product.getName() + \", Price: $\" + product.getPrice());\n    }\n}\n\nclass DiscountManagementService {\n    private AnalyticsService analytics;\n    private InventoryDatabase database;\n    \n    public DiscountManagementService() {\n        this.analytics = new AnalyticsService(\"analytics_key_456\");\n        this.database = new InventoryDatabase(\"jdbc:mysql://localhost:3306/inventory\");\n    }\n    \n    public void setDiscountRate(Product product, double rate) {\n        product.setDiscountRate(rate);\n        analytics.trackEvent(\"DISCOUNT_APPLIED\", product.getProductId(), java.util.Map.of(\"rate\", String.valueOf(rate)));\n    }\n    \n    public void updatePrice(Product product, double price) {\n        product.setPrice(price);\n        database.logTransaction(\"PRICE_UPDATE\", \"Product: \" + product.getProductId() + \", New price: $\" + price);\n    }\n}\n\npublic class Product {\n    private String name;\n    private double price;\n    private String productId;\n    private String category;\n    private int stockQuantity;\n    private double weight;\n    private String description;\n    private java.util.List<String> customerReviews;\n    private double averageRating;\n    private int totalSales;\n    private double costPrice;\n    private java.util.List<String> customerEmails;\n    private boolean isActive;\n    private String supplier;\n    private double discountRate;\n    private java.util.Map<String, Integer> salesByRegion;\n    \n    public Product(String name, double price) {\n        this.name = name;\n        this.price = price;\n        this.customerReviews = new java.util.ArrayList<>();\n        this.customerEmails = new java.util.ArrayList<>();\n        this.salesByRegion = new java.util.HashMap<>();\n        this.averageRating = 0.0;\n        this.totalSales = 0;\n        this.stockQuantity = 100;\n        this.costPrice = price * 0.6;\n        this.isActive = true;\n        this.discountRate = 0.0;\n        this.weight = 1.0;\n        \n        initializeAdvancedDefaults();\n    }\n    \n    private void initializeAdvancedDefaults() {\n        this.category = \"Electronics\";\n        this.description = \"High-quality product\";\n        this.supplier = \"Global Supplier Inc\";\n        salesByRegion.put(\"North America\", 0);\n        salesByRegion.put(\"Europe\", 0);\n        salesByRegion.put(\"Asia\", 0);\n        \n        ProductIdGenerationService idService = new ProductIdGenerationService();\n        this.productId = idService.generateAdvancedProductId(name, category);\n    }\n    \n    // Getters and Setters\n    public String getName() {\n        return name;\n    }\n    \n    public double getPrice() {\n        return price;\n    }\n    \n    public void setPrice(double price) {\n        this.price = price;\n    }\n    \n    public String getProductId() {\n        return productId;\n    }\n    \n    public String getCategory() {\n        return category;\n    }\n    \n    public int getStockQuantity() {\n        return stockQuantity;\n    }\n    \n    public void setStockQuantity(int stockQuantity) {\n        this.stockQuantity = stockQuantity;\n    }\n    \n    public double getWeight() {\n        return weight;\n    }\n    \n    public String getDescription() {\n        return description;\n    }\n    \n    public java.util.List<String> getCustomerReviews() {\n        return customerReviews;\n    }\n    \n    public double getAverageRating() {\n        return averageRating;\n    }\n    \n    public void setAverageRating(double averageRating) {\n        this.averageRating = averageRating;\n    }\n    \n    public int getTotalSales() {\n        return totalSales;\n    }\n    \n    public void setTotalSales(int totalSales) {\n        this.totalSales = totalSales;\n    }\n    \n    public double getCostPrice() {\n        return costPrice;\n    }\n    \n    public java.util.List<String> getCustomerEmails() {\n        return customerEmails;\n    }\n    \n    public boolean isActive() {\n        return isActive;\n    }\n    \n    public String getSupplier() {\n        return supplier;\n    }\n    \n    public double getDiscountRate() {\n        return discountRate;\n    }\n    \n    public void setDiscountRate(double discountRate) {\n        this.discountRate = discountRate;\n    }\n    \n    public java.util.Map<String, Integer> getSalesByRegion() {\n        return salesByRegion;\n    }\n}",
            "level": "HARD",
            "language": "JAVA",
            "violation": "SRP",
            "description": "Product discount display system"
        },
        {
            "input": "class User:\n    def __init__(self, name, email):\n        self.name = name\n        self.email = email\n    \n    def save_to_database(self):\n        print(f\"Saving user {self.name} to database\")\n    \n    def send_welcome_email(self):\n        print(f\"Sending welcome email to {self.email}\")",
            "output": "class User:\n    def __init__(self, name, email):\n        self.name = name\n        self.email = email\n    \n    def get_name(self):\n        return self.name\n    \n    def get_email(self):\n        return self.email\n\n\nclass UserRepository:\n    def save(self, user):\n        print(f\"Saving user {user.get_name()} to database\")\n\n\nclass EmailService:\n    def send_welcome_email(self, user):\n        print(f\"Sending welcome email to {user.get_email()}\")",
            "level": "EASY",
            "language": "PYTHON",
            "violation": "SRP",
            "description": "User database email operations"
        },
        {
            "input": "class Employee:\n    def __init__(self, name: str, base_salary: float, years_of_service: int):\n        self.name = name\n        self.base_salary = base_salary\n        self.years_of_service = years_of_service\n    \n    def calculate_salary(self) -> float:\n        return self.base_salary + (self.years_of_service * 1000)\n    \n    def print_pay_slip(self):\n        print(f\"Pay slip for {self.name}: ${self.calculate_salary()}\")",
            "output": "class Employee:\n    def __init__(self, name: str, base_salary: float, years_of_service: int):\n        self.name = name\n        self.base_salary = base_salary\n        self.years_of_service = years_of_service\n    \n    def get_name(self) -> str:\n        return self.name\n    \n    def get_base_salary(self) -> float:\n        return self.base_salary\n    \n    def get_years_of_service(self) -> int:\n        return self.years_of_service\n\nclass SalaryCalculator:\n    def calculate(self, employee: Employee) -> float:\n        return employee.get_base_salary() + (employee.get_years_of_service() * 1000)\n\nclass PaySlipPrinter:\n    def __init__(self, calculator: SalaryCalculator):\n        self.calculator = calculator\n    \n    def print_slip(self, employee: Employee):\n        salary = self.calculator.calculate(employee)\n        print(f\"Pay slip for {employee.get_name()}: ${salary}\")",
            "level": "EASY",
            "language": "PYTHON",
            "violation": "SRP",
            "description": "Employee salary payslip system"
        },

        {
            "input": "class Book:\n    def __init__(self, title, author, content):\n        self._title = title\n        self._author = author\n        self._content = content\n    \n    def print_book(self):\n        print(f\"Title: {self._title}\")\n        print(f\"Author: {self._author}\")\n        print(f\"Content: {self._content}\")\n    \n    def save_to_file(self, filename):\n        print(f\"Saving book to {filename}\")",
            "output": "class Book:\n    def __init__(self, title, author, content):\n        self._title = title\n        self._author = author\n        self._content = content\n    \n    @property\n    def title(self):\n        return self._title\n    \n    @property\n    def author(self):\n        return self._author\n    \n    @property\n    def content(self):\n        return self._content\n\nclass BookPrinter:\n    def print(self, book):\n        print(f\"Title: {book.title}\")\n        print(f\"Author: {book.author}\")\n        print(f\"Content: {book.content}\")\n\nclass BookFileSaver:\n    def save_to_file(self, book, filename):\n        print(f\"Saving book to {filename}\")",
            "level": "EASY",
            "language": "PYTHON",
            "violation": "SRP",
            "description": "Book printing file saving"
        },
        {
            "input": "class Product:\n    def __init__(self, name, price):\n        self._name = name\n        self._price = price\n    \n    def apply_discount(self, percentage):\n        return self._price * (1 - percentage / 100)\n    \n    def display_product(self):\n        print(f\"Product: {self._name}, Price: ${self._price}\")",
            "output": "class Product:\n    def __init__(self, name, price):\n        self._name = name\n        self._price = price\n    \n    @property\n    def name(self):\n        return self._name\n    \n    @property\n    def price(self):\n        return self._price\n\nclass DiscountCalculator:\n    def apply_discount(self, product, percentage):\n        return product.price * (1 - percentage / 100)\n\nclass ProductDisplay:\n    def display(self, product):\n        print(f\"Product: {product.name}, Price: ${product.price}\")",
            "level": "EASY",
            "language": "PYTHON",
            "violation": "SRP",
            "description": "Product discount display system"
        },
        {
            "input": "import datetime\n\nclass User:\n    def __init__(self, name, email):\n        self.name = name\n        self.email = email\n        self.password = None\n        self.is_active = True\n        self.role = \"USER\"\n        self.last_login = None\n        self.login_attempts = 0\n    \n    def save_to_database(self):\n        print(f\"Saving user {self.name} to database\")\n    \n    def send_welcome_email(self):\n        print(f\"Sending welcome email to {self.email}\")\n    \n    def validate_email(self, email):\n        if not email:\n            return False\n        return \"@\" in email and \".\" in email\n    \n    def validate_password(self, password):\n        if not password or len(password) < 8:\n            return False\n        \n        has_upper = any(c.isupper() for c in password)\n        has_lower = any(c.islower() for c in password)\n        has_digit = any(c.isdigit() for c in password)\n        \n        return has_upper and has_lower and has_digit\n    \n    def hash_password(self, password):\n        hash_value = 0\n        for c in password:\n            hash_value = hash_value * 31 + ord(c)\n        return str(abs(hash_value))\n    \n    def authenticate(self, password):\n        if self.login_attempts >= 5:\n            print(\"Account locked due to too many failed attempts\")\n            return False\n        \n        if self.password and self.password == self.hash_password(password):\n            self.login_attempts = 0\n            self.last_login = datetime.datetime.now()\n            return True\n        \n        self.login_attempts += 1\n        return False\n    \n    def lock_account(self):\n        self.is_active = False\n        print(f\"Account locked for user: {self.name}\")\n    \n    def unlock_account(self):\n        self.is_active = True\n        self.login_attempts = 0\n        print(f\"Account unlocked for user: {self.name}\")\n    \n    def set_password(self, password):\n        self.password = self.hash_password(password)",
            "output": "import datetime\n\nclass DatabaseService:\n    def save_user(self, user):\n        print(f\"Saving user {user.name} to database\")\n\nclass EmailService:\n    def send_welcome_email(self, email):\n        print(f\"Sending welcome email to {email}\")\n\nclass ValidationService:\n    def validate_email(self, email):\n        if not email:\n            return False\n        return \"@\" in email and \".\" in email\n    \n    def validate_password(self, password):\n        if not password or len(password) < 8:\n            return False\n        \n        has_upper = any(c.isupper() for c in password)\n        has_lower = any(c.islower() for c in password)\n        has_digit = any(c.isdigit() for c in password)\n        \n        return has_upper and has_lower and has_digit\n\nclass PasswordService:\n    def hash_password(self, password):\n        hash_value = 0\n        for c in password:\n            hash_value = hash_value * 31 + ord(c)\n        return str(abs(hash_value))\n\nclass AuthenticationService:\n    def __init__(self):\n        self.password_service = PasswordService()\n    \n    def authenticate(self, user, password):\n        if user.login_attempts >= 5:\n            print(\"Account locked due to too many failed attempts\")\n            return False\n        \n        if user.password and user.password == self.password_service.hash_password(password):\n            user.reset_login_attempts()\n            user.update_last_login()\n            return True\n        \n        user.increment_login_attempts()\n        return False\n\nclass AccountService:\n    def lock_account(self, user):\n        user.is_active = False\n        print(f\"Account locked for user: {user.name}\")\n    \n    def unlock_account(self, user):\n        user.is_active = True\n        user.reset_login_attempts()\n        print(f\"Account unlocked for user: {user.name}\")\n\nclass User:\n    def __init__(self, name, email):\n        self.name = name\n        self.email = email\n        self.password = None\n        self.is_active = True\n        self.role = \"USER\"\n        self.last_login = None\n        self.login_attempts = 0\n        self.password_service = PasswordService()\n    \n    def set_password(self, password):\n        self.password = self.password_service.hash_password(password)\n    \n    def update_last_login(self):\n        self.last_login = datetime.datetime.now()\n    \n    def increment_login_attempts(self):\n        self.login_attempts += 1\n    \n    def reset_login_attempts(self):\n        self.login_attempts = 0",
            "level": "MODERATE",
            "language": "PYTHON",
            "violation": "SRP",
            "description": "User database email operations"
        },
        {
            "input": "import datetime\nfrom typing import Optional\n\nclass Employee:\n    def __init__(self, name: str, base_salary: float, years_of_service: int):\n        self.name = name\n        self.base_salary = base_salary\n        self.years_of_service = years_of_service\n        self.department: Optional[str] = None\n        self.position: Optional[str] = None\n        self.employee_id = self.generate_employee_id()\n        self.hire_date = datetime.datetime.now()\n        self.last_review_date: Optional[datetime.datetime] = None\n        self.performance_rating = 3.0\n        self.vacation_days = 20\n        self.used_vacation_days = 0\n        self.manager: Optional[str] = None\n        self.email: Optional[str] = None\n    \n    def calculate_salary(self) -> float:\n        return self.base_salary + (self.years_of_service * 1000)\n    \n    def print_pay_slip(self):\n        print(f\"Pay slip for {self.name}: ${self.calculate_salary()}\")\n    \n    def calculate_bonus(self) -> float:\n        base_bonus = self.base_salary * 0.1\n        if self.performance_rating >= 4.0:\n            base_bonus *= 1.5\n        elif self.performance_rating >= 3.5:\n            base_bonus *= 1.2\n        return base_bonus\n    \n    def calculate_annual_salary(self) -> float:\n        return self.calculate_salary() * 12 + self.calculate_bonus()\n    \n    def process_payroll(self):\n        monthly_salary = self.calculate_salary()\n        taxes = self.calculate_taxes(monthly_salary)\n        net_pay = monthly_salary - taxes\n        \n        print(f\"Processing payroll for {self.name}\")\n        print(f\"Gross Pay: ${monthly_salary}\")\n        print(f\"Taxes: ${taxes}\")\n        print(f\"Net Pay: ${net_pay}\")\n    \n    def calculate_taxes(self, salary: float) -> float:\n        if salary <= 3000:\n            return salary * 0.15\n        elif salary <= 6000:\n            return salary * 0.20\n        else:\n            return salary * 0.25\n    \n    def request_vacation(self, days: int) -> bool:\n        if self.used_vacation_days + days <= self.vacation_days:\n            self.used_vacation_days += days\n            print(f\"Vacation request approved for {self.name}: {days} days\")\n            self.notify_manager(f\"Vacation request approved for {self.name}\")\n            return True\n        else:\n            print(f\"Vacation request denied for {self.name}: insufficient days\")\n            return False\n    \n    def notify_manager(self, message: str):\n        if self.manager:\n            print(f\"Sending notification to manager {self.manager}: {message}\")\n    \n    def send_payroll_email(self):\n        if self.email:\n            print(f\"Sending payroll email to {self.email}\")\n            print(\"Subject: Your monthly payslip\")\n            print(\"Body: Please find your payslip attached.\")\n    \n    def conduct_performance_review(self):\n        print(f\"Conducting performance review for {self.name}\")\n        print(f\"Current rating: {self.performance_rating}\")\n        self.last_review_date = datetime.datetime.now()\n        \n        if self.performance_rating >= 4.0:\n            print(\"Excellent performance! Recommending for promotion.\")\n        elif self.performance_rating < 2.0:\n            print(\"Performance improvement needed.\")\n    \n    def update_performance_rating(self, rating: float):\n        if 1.0 <= rating <= 5.0:\n            self.performance_rating = rating\n            print(f\"Performance rating updated to {rating} for {self.name}\")\n        else:\n            print(\"Invalid rating. Must be between 1.0 and 5.0\")\n    \n    def generate_employee_id(self) -> str:\n        import time\n        return f\"EMP{int(time.time() * 1000) % 10000}\"\n    \n    def print_employee_report(self):\n        print(f\"Employee Report for {self.name}\")\n        print(f\"ID: {self.employee_id}\")\n        print(f\"Department: {self.department}\")\n        print(f\"Position: {self.position}\")\n        print(f\"Hire Date: {self.hire_date}\")\n        print(f\"Years of Service: {self.years_of_service}\")\n        print(f\"Base Salary: ${self.base_salary}\")\n        print(f\"Performance Rating: {self.performance_rating}\")\n        print(f\"Vacation Days Remaining: {self.vacation_days - self.used_vacation_days}\")",
            "output": "import datetime\nfrom typing import Optional\n\nclass SalaryCalculationService:\n    def calculate_salary(self, base_salary: float, years_of_service: int) -> float:\n        return base_salary + (years_of_service * 1000)\n    \n    def calculate_bonus(self, base_salary: float, performance_rating: float) -> float:\n        base_bonus = base_salary * 0.1\n        if performance_rating >= 4.0:\n            base_bonus *= 1.5\n        elif performance_rating >= 3.5:\n            base_bonus *= 1.2\n        return base_bonus\n    \n    def calculate_annual_salary(self, base_salary: float, years_of_service: int, performance_rating: float) -> float:\n        monthly_salary = self.calculate_salary(base_salary, years_of_service)\n        bonus = self.calculate_bonus(base_salary, performance_rating)\n        return monthly_salary * 12 + bonus\n\nclass TaxCalculationService:\n    def calculate_taxes(self, salary: float) -> float:\n        if salary <= 3000:\n            return salary * 0.15\n        elif salary <= 6000:\n            return salary * 0.20\n        else:\n            return salary * 0.25\n\nclass PayrollService:\n    def __init__(self):\n        self.salary_service = SalaryCalculationService()\n        self.tax_service = TaxCalculationService()\n    \n    def process_payroll(self, employee):\n        monthly_salary = self.salary_service.calculate_salary(employee.base_salary, employee.years_of_service)\n        taxes = self.tax_service.calculate_taxes(monthly_salary)\n        net_pay = monthly_salary - taxes\n        \n        print(f\"Processing payroll for {employee.name}\")\n        print(f\"Gross Pay: ${monthly_salary}\")\n        print(f\"Taxes: ${taxes}\")\n        print(f\"Net Pay: ${net_pay}\")\n    \n    def print_pay_slip(self, employee):\n        salary = self.salary_service.calculate_salary(employee.base_salary, employee.years_of_service)\n        print(f\"Pay slip for {employee.name}: ${salary}\")\n\nclass EmailService:\n    def send_payroll_email(self, email: str, employee_name: str):\n        if email:\n            print(f\"Sending payroll email to {email}\")\n            print(\"Subject: Your monthly payslip\")\n            print(\"Body: Please find your payslip attached.\")\n    \n    def notify_manager(self, manager: str, message: str):\n        if manager:\n            print(f\"Sending notification to manager {manager}: {message}\")\n\nclass VacationService:\n    def __init__(self):\n        self.email_service = EmailService()\n    \n    def request_vacation(self, employee, days: int) -> bool:\n        if employee.used_vacation_days + days <= employee.vacation_days:\n            employee.used_vacation_days += days\n            print(f\"Vacation request approved for {employee.name}: {days} days\")\n            self.email_service.notify_manager(employee.manager, f\"Vacation request approved for {employee.name}\")\n            return True\n        else:\n            print(f\"Vacation request denied for {employee.name}: insufficient days\")\n            return False\n\nclass PerformanceService:\n    def conduct_performance_review(self, employee):\n        print(f\"Conducting performance review for {employee.name}\")\n        print(f\"Current rating: {employee.performance_rating}\")\n        employee.last_review_date = datetime.datetime.now()\n        \n        if employee.performance_rating >= 4.0:\n            print(\"Excellent performance! Recommending for promotion.\")\n        elif employee.performance_rating < 2.0:\n            print(\"Performance improvement needed.\")\n    \n    def update_performance_rating(self, employee, rating: float):\n        if 1.0 <= rating <= 5.0:\n            employee.performance_rating = rating\n            print(f\"Performance rating updated to {rating} for {employee.name}\")\n        else:\n            print(\"Invalid rating. Must be between 1.0 and 5.0\")\n\nclass EmployeeIdGenerationService:\n    def generate_employee_id(self) -> str:\n        import time\n        return f\"EMP{int(time.time() * 1000) % 10000}\"\n\nclass ReportService:\n    def print_employee_report(self, employee):\n        print(f\"Employee Report for {employee.name}\")\n        print(f\"ID: {employee.employee_id}\")\n        print(f\"Department: {employee.department}\")\n        print(f\"Position: {employee.position}\")\n        print(f\"Hire Date: {employee.hire_date}\")\n        print(f\"Years of Service: {employee.years_of_service}\")\n        print(f\"Base Salary: ${employee.base_salary}\")\n        print(f\"Performance Rating: {employee.performance_rating}\")\n        print(f\"Vacation Days Remaining: {employee.vacation_days - employee.used_vacation_days}\")\n\nclass Employee:\n    def __init__(self, name: str, base_salary: float, years_of_service: int):\n        self.name = name\n        self.base_salary = base_salary\n        self.years_of_service = years_of_service\n        self.department: Optional[str] = None\n        self.position: Optional[str] = None\n        \n        id_service = EmployeeIdGenerationService()\n        self.employee_id = id_service.generate_employee_id()\n        \n        self.hire_date = datetime.datetime.now()\n        self.last_review_date: Optional[datetime.datetime] = None\n        self.performance_rating = 3.0\n        self.vacation_days = 20\n        self.used_vacation_days = 0\n        self.manager: Optional[str] = None\n        self.email: Optional[str] = None",
            "level": "MODERATE",
            "language": "PYTHON",
            "violation": "SRP",
            "description": "Employee salary payslip system"
        },
        {
            "input": "import datetime\nimport random\nimport re\n\nclass FileStorage:\n    def __init__(self, base_path):\n        self._base_path = base_path\n    \n    def save_to_file(self, filename, content):\n        print(f\"Saving content to file: {self._base_path}/{filename}\")\n    \n    def load_from_file(self, filename):\n        print(f\"Loading content from file: {self._base_path}/{filename}\")\n        return \"file content\"\n    \n    def delete_file(self, filename):\n        print(f\"Deleting file: {self._base_path}/{filename}\")\n\nclass Book:\n    def __init__(self, title, author, content):\n        self._title = title\n        self._author = author\n        self._content = content\n        self._publish_date = datetime.datetime.now()\n        self._reviews = []\n        self._average_rating = 0.0\n        self._total_sales = 0\n        self._file_storage = FileStorage(\"/books/storage\")\n        self._genre = None\n        self._price = 0.0\n        self._publisher = None\n        \n        self._generate_isbn()\n        self._calculate_page_count()\n    \n    def print_book(self):\n        print(f\"Title: {self._title}\")\n        print(f\"Author: {self._author}\")\n        print(f\"Content: {self._content}\")\n    \n    def save_to_file(self, filename):\n        book_data = self._format_book_data()\n        self._file_storage.save_to_file(filename, book_data)\n    \n    def _format_book_data(self):\n        return f\"TITLE: {self._title}\\nAUTHOR: {self._author}\\nISBN: {self._isbn}\\nPAGES: {self._page_count}\\nPRICE: ${self._price}\\nRATING: {self._average_rating}\\nSALES: {self._total_sales}\\nCONTENT: {self._content}\"\n    \n    def _generate_isbn(self):\n        timestamp = int(datetime.datetime.now().timestamp() * 1000) % 10000\n        random_num = random.randint(0, 999)\n        self._isbn = f\"978-{timestamp}-{random_num:03d}\"\n    \n    def _calculate_page_count(self):\n        self._page_count = max(1, len(self._content) // 250) if self._content else 1\n    \n    def validate_isbn(self, isbn):\n        if not isbn or len(isbn) < 10:\n            return False\n        clean_isbn = re.sub(r'[^0-9X]', '', isbn)\n        return len(clean_isbn) in [10, 13]\n    \n    def validate_price(self, price):\n        return 0.0 <= price <= 999.99\n    \n    def add_review(self, review, rating):\n        if 1.0 <= rating <= 5.0:\n            self._reviews.append(review)\n            if len(self._reviews) == 1:\n                self._average_rating = rating\n            else:\n                self._average_rating = (self._average_rating * (len(self._reviews) - 1) + rating) / len(self._reviews)\n            print(\"Review added successfully\")\n        else:\n            print(\"Invalid rating. Must be between 1.0 and 5.0\")\n    \n    def record_sale(self):\n        self._total_sales += 1\n        print(f\"SALES LOG: Book sold - {self._title} (ISBN: {self._isbn}) on {datetime.datetime.now()}\")\n        print(f\"INVENTORY: Updating stock for book: {self._isbn}\")\n    \n    def calculate_royalty(self, sale_price):\n        if self._total_sales > 1000:\n            rate = 0.15\n        elif self._total_sales > 500:\n            rate = 0.12\n        else:\n            rate = 0.10\n        return sale_price * rate\n    \n    def generate_sales_report(self):\n        estimated_revenue = self._total_sales * self._price\n        return f\"=== SALES REPORT ===\\nTitle: {self._title}\\nAuthor: {self._author}\\nISBN: {self._isbn}\\nTotal Sales: {self._total_sales}\\nAverage Rating: {self._average_rating:.2f}\\nNumber of Reviews: {len(self._reviews)}\\nCurrent Price: ${self._price}\\nEstimated Revenue: ${estimated_revenue:.2f}\"\n    \n    def print_formatted_book(self):\n        formatted_output = f\"====================\\nBOOK INFORMATION\\n====================\\nTitle: {self._title}\\nAuthor: {self._author}\\nISBN: {self._isbn}\\nGenre: {self._genre}\\nPages: {self._page_count}\\nPrice: ${self._price}\\nPublisher: {self._publisher}\\nRating: {self._average_rating}/5.0\\nSales: {self._total_sales}\\n====================\\nCONTENT:\\n{self._content}\\n====================\"\n        print(formatted_output)\n    \n    def export_to_json(self):\n        json_data = f\"{{\\n  \\\"title\\\": \\\"{self._title}\\\",\\n  \\\"author\\\": \\\"{self._author}\\\",\\n  \\\"isbn\\\": \\\"{self._isbn}\\\",\\n  \\\"genre\\\": \\\"{self._genre}\\\",\\n  \\\"pages\\\": {self._page_count},\\n  \\\"price\\\": {self._price},\\n  \\\"rating\\\": {self._average_rating},\\n  \\\"sales\\\": {self._total_sales}\\n}}\"\n        self._file_storage.save_to_file(f\"{self._isbn}.json\", json_data)\n    \n    # Properties\n    @property\n    def title(self):\n        return self._title\n    \n    @title.setter\n    def title(self, value):\n        self._title = value\n    \n    @property\n    def author(self):\n        return self._author\n    \n    @author.setter\n    def author(self, value):\n        self._author = value\n    \n    @property\n    def content(self):\n        return self._content\n    \n    @content.setter\n    def content(self, value):\n        self._content = value\n        self._calculate_page_count()\n    \n    @property\n    def isbn(self):\n        return self._isbn\n    \n    @property\n    def genre(self):\n        return self._genre\n    \n    @genre.setter\n    def genre(self, value):\n        self._genre = value\n    \n    @property\n    def price(self):\n        return self._price\n    \n    @price.setter\n    def price(self, value):\n        if self.validate_price(value):\n            self._price = value\n    \n    @property\n    def publisher(self):\n        return self._publisher\n    \n    @publisher.setter\n    def publisher(self, value):\n        self._publisher = value\n    \n    @property\n    def average_rating(self):\n        return self._average_rating\n    \n    @property\n    def total_sales(self):\n        return self._total_sales\n    \n    @property\n    def page_count(self):\n        return self._page_count",
            "output": "import datetime\nimport random\nimport re\n\nclass FileStorage:\n    def __init__(self, base_path):\n        self._base_path = base_path\n    \n    def save_to_file(self, filename, content):\n        print(f\"Saving content to file: {self._base_path}/{filename}\")\n    \n    def load_from_file(self, filename):\n        print(f\"Loading content from file: {self._base_path}/{filename}\")\n        return \"file content\"\n    \n    def delete_file(self, filename):\n        print(f\"Deleting file: {self._base_path}/{filename}\")\n\nclass ISBNGenerationService:\n    def generate_isbn(self):\n        timestamp = int(datetime.datetime.now().timestamp() * 1000) % 10000\n        random_num = random.randint(0, 999)\n        return f\"978-{timestamp}-{random_num:03d}\"\n\nclass PageCalculationService:\n    def calculate_page_count(self, content):\n        return max(1, len(content) // 250) if content else 1\n\nclass ValidationService:\n    def validate_isbn(self, isbn):\n        if not isbn or len(isbn) < 10:\n            return False\n        clean_isbn = re.sub(r'[^0-9X]', '', isbn)\n        return len(clean_isbn) in [10, 13]\n    \n    def validate_price(self, price):\n        return 0.0 <= price <= 999.99\n    \n    def validate_rating(self, rating):\n        return 1.0 <= rating <= 5.0\n\nclass ReviewManagementService:\n    def __init__(self):\n        self._validator = ValidationService()\n    \n    def add_review(self, book, review, rating):\n        if self._validator.validate_rating(rating):\n            book.reviews.append(review)\n            book.average_rating = self._calculate_new_average_rating(\n                book.average_rating, len(book.reviews), rating\n            )\n            print(\"Review added successfully\")\n        else:\n            print(\"Invalid rating. Must be between 1.0 and 5.0\")\n    \n    def _calculate_new_average_rating(self, current_average, review_count, new_rating):\n        if review_count == 1:\n            return new_rating\n        return (current_average * (review_count - 1) + new_rating) / review_count\n\nclass SalesManagementService:\n    def record_sale(self, book):\n        book.total_sales += 1\n        self._log_sale_activity(book)\n        self._update_inventory(book)\n    \n    def _log_sale_activity(self, book):\n        print(f\"SALES LOG: Book sold - {book.title} (ISBN: {book.isbn}) on {datetime.datetime.now()}\")\n    \n    def _update_inventory(self, book):\n        print(f\"INVENTORY: Updating stock for book: {book.isbn}\")\n\nclass RoyaltyCalculationService:\n    def calculate_royalty(self, sale_price, total_sales):\n        if total_sales > 1000:\n            rate = 0.15\n        elif total_sales > 500:\n            rate = 0.12\n        else:\n            rate = 0.10\n        return sale_price * rate\n\nclass DataFormattingService:\n    def format_book_data(self, book):\n        return f\"TITLE: {book.title}\\nAUTHOR: {book.author}\\nISBN: {book.isbn}\\nPAGES: {book.page_count}\\nPRICE: ${book.price}\\nRATING: {book.average_rating}\\nSALES: {book.total_sales}\\nCONTENT: {book.content}\"\n    \n    def format_book_for_display(self, book):\n        return f\"====================\\nBOOK INFORMATION\\n====================\\nTitle: {book.title}\\nAuthor: {book.author}\\nISBN: {book.isbn}\\nGenre: {book.genre}\\nPages: {book.page_count}\\nPrice: ${book.price}\\nPublisher: {book.publisher}\\nRating: {book.average_rating}/5.0\\nSales: {book.total_sales}\\n====================\\nCONTENT:\\n{book.content}\\n====================\"\n    \n    def format_as_json(self, book):\n        return f\"{{\\n  \\\"title\\\": \\\"{book.title}\\\",\\n  \\\"author\\\": \\\"{book.author}\\\",\\n  \\\"isbn\\\": \\\"{book.isbn}\\\",\\n  \\\"genre\\\": \\\"{book.genre}\\\",\\n  \\\"pages\\\": {book.page_count},\\n  \\\"price\\\": {book.price},\\n  \\\"rating\\\": {book.average_rating},\\n  \\\"sales\\\": {book.total_sales}\\n}}\"\n\nclass ReportGenerationService:\n    def generate_sales_report(self, book):\n        estimated_revenue = book.total_sales * book.price\n        return f\"=== SALES REPORT ===\\nTitle: {book.title}\\nAuthor: {book.author}\\nISBN: {book.isbn}\\nTotal Sales: {book.total_sales}\\nAverage Rating: {book.average_rating:.2f}\\nNumber of Reviews: {len(book.reviews)}\\nCurrent Price: ${book.price}\\nEstimated Revenue: ${estimated_revenue:.2f}\"\n\nclass BookPrintingService:\n    def __init__(self):\n        self._formatter = DataFormattingService()\n    \n    def print_book(self, book):\n        print(f\"Title: {book.title}\")\n        print(f\"Author: {book.author}\")\n        print(f\"Content: {book.content}\")\n    \n    def print_formatted_book(self, book):\n        formatted_book = self._formatter.format_book_for_display(book)\n        print(formatted_book)\n\nclass BookFileService:\n    def __init__(self):\n        self._file_storage = FileStorage(\"/books/storage\")\n        self._formatter = DataFormattingService()\n    \n    def save_to_file(self, book, filename):\n        book_data = self._formatter.format_book_data(book)\n        self._file_storage.save_to_file(filename, book_data)\n    \n    def export_to_json(self, book):\n        json_data = self._formatter.format_as_json(book)\n        self._file_storage.save_to_file(f\"{book.isbn}.json\", json_data)\n\nclass Book:\n    def __init__(self, title, author, content):\n        self._title = title\n        self._author = author\n        self._content = content\n        self._publish_date = datetime.datetime.now()\n        self._reviews = []\n        self._average_rating = 0.0\n        self._total_sales = 0\n        self._genre = None\n        self._price = 0.0\n        self._publisher = None\n        \n        self._initialize_book()\n    \n    def _initialize_book(self):\n        isbn_service = ISBNGenerationService()\n        self._isbn = isbn_service.generate_isbn()\n        \n        page_service = PageCalculationService()\n        self._page_count = page_service.calculate_page_count(self._content)\n    \n    @property\n    def title(self):\n        return self._title\n    \n    @title.setter\n    def title(self, value):\n        self._title = value\n    \n    @property\n    def author(self):\n        return self._author\n    \n    @author.setter\n    def author(self, value):\n        self._author = value\n    \n    @property\n    def content(self):\n        return self._content\n    \n    @content.setter\n    def content(self, value):\n        self._content = value\n        page_service = PageCalculationService()\n        self._page_count = page_service.calculate_page_count(value)\n    \n    @property\n    def isbn(self):\n        return self._isbn\n    \n    @property\n    def publish_date(self):\n        return self._publish_date\n    \n    @property\n    def genre(self):\n        return self._genre\n    \n    @genre.setter\n    def genre(self, value):\n        self._genre = value\n    \n    @property\n    def page_count(self):\n        return self._page_count\n    \n    @property\n    def price(self):\n        return self._price\n    \n    @price.setter\n    def price(self, value):\n        validator = ValidationService()\n        if validator.validate_price(value):\n            self._price = value\n    \n    @property\n    def publisher(self):\n        return self._publisher\n    \n    @publisher.setter\n    def publisher(self, value):\n        self._publisher = value\n    \n    @property\n    def reviews(self):\n        return self._reviews\n    \n    @property\n    def average_rating(self):\n        return self._average_rating\n    \n    @average_rating.setter\n    def average_rating(self, value):\n        self._average_rating = value\n    \n    @property\n    def total_sales(self):\n        return self._total_sales\n    \n    @total_sales.setter\n    def total_sales(self, value):\n        self._total_sales = value",
            "level": "MODERATE",
            "language": "PYTHON",
            "violation": "SRP",
            "description": "Book printing file saving"
        },
        {
            "input": "import time \nclass InventoryDatabase:\n    def __init__(self, connection_string):\n        self.connection_string = connection_string\n    \n    def update_stock(self, product_id, quantity):\n        print(f\"Updating stock in database - Product: {product_id}, Quantity: {quantity}\")\n    \n    def log_transaction(self, type, details):\n        print(f\"[DB LOG] {type}: {details}\")\n\n\nclass NotificationService:\n    def __init__(self, api_key):\n        self.api_key = api_key\n    \n    def send_email(self, recipient, subject, body):\n        print(f\"Sending email to: {recipient}, Subject: {subject}\")\n\n\nclass Product:\n    def __init__(self, name, price):\n        self.name = name\n        self.price = price\n        self.product_id = f\"PRD-{int(time.time() * 1000) % 100000}\"\n        self.customer_reviews = []\n        self.average_rating = 0.0\n        self.total_sales = 0\n        self.stock_quantity = 100\n        self.cost_price = price * 0.6\n        self.database = InventoryDatabase(\"jdbc:mysql://localhost:3306/inventory\")\n        self.notification_service = NotificationService(\"API_KEY_12345\")\n    \n    def apply_discount(self, percentage):\n        return self.price * (1 - percentage / 100)\n    \n    def display_product(self):\n        print(f\"Product: {self.name}, Price: ${self.price}\")\n    \n    def calculate_discounted_price(self, discount_percentage):\n        discounted = self.price * (1 - discount_percentage / 100)\n        self.database.log_transaction(\"DISCOUNT_APPLIED\", f\"Product: {self.product_id}, Discount: {discount_percentage}%\")\n        return discounted\n    \n    def calculate_profit_margin(self):\n        return ((self.price - self.cost_price) / self.price) * 100\n    \n    def calculate_shipping_cost(self, destination):\n        return 15.99 if destination.lower() == \"international\" else 5.99\n    \n    def add_customer_review(self, review, rating):\n        if 1.0 <= rating <= 5.0:\n            self.customer_reviews.append(review)\n            if len(self.customer_reviews) == 1:\n                self.average_rating = rating\n            else:\n                self.average_rating = (self.average_rating * (len(self.customer_reviews) - 1) + rating) / len(self.customer_reviews)\n            self.database.log_transaction(\"REVIEW_ADDED\", f\"Product: {self.product_id}, Rating: {rating}\")\n    \n    def process_sale(self, quantity, customer_email):\n        if self.stock_quantity >= quantity:\n            self.stock_quantity -= quantity\n            self.total_sales += quantity\n            self.database.update_stock(self.product_id, self.stock_quantity)\n            self.notification_service.send_email(customer_email, \"Purchase Confirmation\", f\"Receipt for {self.name}\")\n            if self.stock_quantity <= 10:\n                self.notification_service.send_email(\"inventory@company.com\", \"Low Stock Alert\", f\"Product {self.name} low stock\")\n            self.database.log_transaction(\"SALE_COMPLETED\", f\"Product: {self.product_id}, Quantity: {quantity}\")\n    \n    def restock_product(self, quantity, supplier_email):\n        self.stock_quantity += quantity\n        self.database.update_stock(self.product_id, self.stock_quantity)\n        self.notification_service.send_email(supplier_email, \"Restock Confirmation\", f\"Added {quantity} units\")\n        self.database.log_transaction(\"RESTOCK_COMPLETED\", f\"Product: {self.product_id}, Added: {quantity}\")\n    \n    def generate_product_report(self):\n        return f\"Product: {self.name}\\nID: {self.product_id}\\nPrice: ${self.price}\\nStock: {self.stock_quantity}\\nSales: {self.total_sales}\\nRating: {self.average_rating}\"\n    \n    def display_detailed_product(self):\n        print(f\"{self.name} ({self.product_id}) - ${self.price} - Stock: {self.stock_quantity} - Rating: {self.average_rating}\")\n    \n    def get_name(self):\n        return self.name\n    \n    def get_price(self):\n        return self.price\n    \n    def set_price(self, price):\n        self.price = price",
            "output": "import time\n\n\nclass InventoryDatabase:\n    def __init__(self, connection_string):\n        self.connection_string = connection_string\n    \n    def update_stock(self, product_id, quantity):\n        print(f\"Updating stock in database - Product: {product_id}, Quantity: {quantity}\")\n    \n    def log_transaction(self, type, details):\n        print(f\"[DB LOG] {type}: {details}\")\n\n\nclass NotificationService:\n    def __init__(self, api_key):\n        self.api_key = api_key\n    \n    def send_email(self, recipient, subject, body):\n        print(f\"Sending email to: {recipient}, Subject: {subject}\")\n\n\nclass ProductIdGenerationService:\n    def generate_product_id(self):\n        return f\"PRD-{int(time.time() * 1000) % 100000}\"\n\n\nclass PricingCalculationService:\n    def apply_discount(self, price, percentage):\n        return price * (1 - percentage / 100)\n    \n    def calculate_discounted_price(self, price, discount_percentage):\n        return price * (1 - discount_percentage / 100)\n    \n    def calculate_profit_margin(self, price, cost_price):\n        return ((price - cost_price) / price) * 100\n    \n    def calculate_shipping_cost(self, destination):\n        return 15.99 if destination.lower() == \"international\" else 5.99\n\n\nclass ReviewManagementService:\n    def __init__(self):\n        self.database = InventoryDatabase(\"jdbc:mysql://localhost:3306/inventory\")\n    \n    def add_customer_review(self, product, review, rating):\n        if 1.0 <= rating <= 5.0:\n            product.get_customer_reviews().append(review)\n            product.set_average_rating(self._calculate_new_average_rating(product.get_average_rating(), len(product.get_customer_reviews()), rating))\n            self.database.log_transaction(\"REVIEW_ADDED\", f\"Product: {product.get_product_id()}, Rating: {rating}\")\n    \n    def _calculate_new_average_rating(self, current_average, review_count, new_rating):\n        return new_rating if review_count == 1 else (current_average * (review_count - 1) + new_rating) / review_count\n\n\nclass SalesProcessingService:\n    def __init__(self):\n        self.database = InventoryDatabase(\"jdbc:mysql://localhost:3306/inventory\")\n        self.notification_service = NotificationService(\"API_KEY_12345\")\n        self.stock_alert_service = StockAlertService()\n    \n    def process_sale(self, product, quantity, customer_email):\n        if product.get_stock_quantity() >= quantity:\n            product.set_stock_quantity(product.get_stock_quantity() - quantity)\n            product.set_total_sales(product.get_total_sales() + quantity)\n            \n            self.database.update_stock(product.get_product_id(), product.get_stock_quantity())\n            self.notification_service.send_email(customer_email, \"Purchase Confirmation\", f\"Receipt for {product.get_name()}\")\n            \n            self.stock_alert_service.check_low_stock_alert(product, self.notification_service)\n            \n            self.database.log_transaction(\"SALE_COMPLETED\", f\"Product: {product.get_product_id()}, Quantity: {quantity}\")\n\n\nclass StockAlertService:\n    def check_low_stock_alert(self, product, notification_service):\n        if product.get_stock_quantity() <= 10:\n            notification_service.send_email(\"inventory@company.com\", \"Low Stock Alert\", f\"Product {product.get_name()} low stock\")\n\n\nclass InventoryManagementService:\n    def __init__(self):\n        self.database = InventoryDatabase(\"jdbc:mysql://localhost:3306/inventory\")\n        self.notification_service = NotificationService(\"API_KEY_12345\")\n    \n    def restock_product(self, product, quantity, supplier_email):\n        product.set_stock_quantity(product.get_stock_quantity() + quantity)\n        self.database.update_stock(product.get_product_id(), product.get_stock_quantity())\n        self.notification_service.send_email(supplier_email, \"Restock Confirmation\", f\"Added {quantity} units\")\n        self.database.log_transaction(\"RESTOCK_COMPLETED\", f\"Product: {product.get_product_id()}, Added: {quantity}\")\n\n\nclass ReportGenerationService:\n    def generate_product_report(self, product):\n        return f\"Product: {product.get_name()}\\nID: {product.get_product_id()}\\nPrice: ${product.get_price()}\\nStock: {product.get_stock_quantity()}\\nSales: {product.get_total_sales()}\\nRating: {product.get_average_rating()}\"\n\n\nclass ProductDisplayService:\n    def display_product(self, product):\n        print(f\"Product: {product.get_name()}, Price: ${product.get_price()}\")\n    \n    def display_detailed_product(self, product):\n        print(f\"{product.get_name()} ({product.get_product_id()}) - ${product.get_price()} - Stock: {product.get_stock_quantity()} - Rating: {product.get_average_rating()}\")\n\n\nclass DiscountService:\n    def __init__(self):\n        self.database = InventoryDatabase(\"jdbc:mysql://localhost:3306/inventory\")\n        self.pricing_service = PricingCalculationService()\n    \n    def calculate_discounted_price(self, product, discount_percentage):\n        discounted = self.pricing_service.calculate_discounted_price(product.get_price(), discount_percentage)\n        self.database.log_transaction(\"DISCOUNT_APPLIED\", f\"Product: {product.get_product_id()}, Discount: {discount_percentage}%\")\n        return discounted\n\n\nclass Product:\n    def __init__(self, name, price):\n        self.name = name\n        self.price = price\n        self.customer_reviews = []\n        self.average_rating = 0.0\n        self.total_sales = 0\n        self.stock_quantity = 100\n        self.cost_price = price * 0.6\n        \n        self._initialize_product()\n    \n    def _initialize_product(self):\n        id_service = ProductIdGenerationService()\n        self.product_id = id_service.generate_product_id()\n    \n    # Getters and Setters\n    def get_name(self):\n        return self.name\n    \n    def set_name(self, name):\n        self.name = name\n    \n    def get_price(self):\n        return self.price\n    \n    def set_price(self, price):\n        self.price = price\n    \n    def get_product_id(self):\n        return self.product_id\n    \n    def get_stock_quantity(self):\n        return self.stock_quantity\n    \n    def set_stock_quantity(self, stock_quantity):\n        self.stock_quantity = stock_quantity\n    \n    def get_customer_reviews(self):\n        return self.customer_reviews\n    \n    def get_average_rating(self):\n        return self.average_rating\n    \n    def set_average_rating(self, average_rating):\n        self.average_rating = average_rating\n    \n    def get_total_sales(self):\n        return self.total_sales\n    \n    def set_total_sales(self, total_sales):\n        self.total_sales = total_sales\n    \n    def get_cost_price(self):\n        return self.cost_price\n    \n    def set_cost_price(self, cost_price):\n        self.cost_price = cost_price",
            "level": "MODERATE",
            "language": "PYTHON",
            "violation": "SRP",
            "description": "Product discount display system"
        },
        {
            "input": "import datetime\nimport random\nimport hashlib\nfrom typing import Dict, List, Optional\n\nclass DatabaseService:\n    def __init__(self, connection_string: str):\n        self.connection_string = connection_string\n    \n    def save_user(self, user):\n        print(f\"Saving user to database: {user.name}\")\n    \n    def update_user(self, user):\n        print(f\"Updating user in database: {user.name}\")\n    \n    def delete_user(self, user_id: str):\n        print(f\"Deleting user from database: {user_id}\")\n\nclass EmailService:\n    def __init__(self, smtp_server: str, port: int):\n        self.smtp_server = smtp_server\n        self.port = port\n    \n    def send_email(self, to: str, subject: str, body: str):\n        print(f\"Sending email to: {to}\")\n        print(f\"Subject: {subject}\")\n\nclass SMSService:\n    def __init__(self, api_key: str):\n        self.api_key = api_key\n    \n    def send_sms(self, phone_number: str, message: str):\n        print(f\"Sending SMS to: {phone_number}\")\n        print(f\"Message: {message}\")\n\nclass FileService:\n    def __init__(self, upload_path: str):\n        self.upload_path = upload_path\n    \n    def upload_file(self, file_data: bytes, file_name: str) -> str:\n        print(f\"Uploading file: {file_name}\")\n        return f\"{self.upload_path}/{file_name}\"\n\nclass SecurityConfig:\n    MAX_LOGIN_ATTEMPTS = 5\n    PASSWORD_EXPIRY_DAYS = 90\n\nclass User:\n    def __init__(self, name: str, email: str):\n        self.name = name\n        self.email = email\n        self.password: Optional[str] = None\n        self.is_active = True\n        self.role = \"USER\"\n        self.last_login: Optional[datetime.datetime] = None\n        self.login_attempts = 0\n        self.phone_number: Optional[str] = None\n        self.registration_date = datetime.datetime.now()\n        self.login_history: List[str] = []\n        self.preferences: Dict[str, str] = {}\n        self.notifications: List[str] = []\n        self.profile_picture_url: Optional[str] = None\n        self.email_verified = False\n        \n        self.db_service = DatabaseService(\"jdbc:mysql://localhost:3306/userdb\")\n        self.email_service = EmailService(\"smtp.company.com\", 587)\n        self.sms_service = SMSService(\"api_key_12345\")\n        self.file_service = FileService(\"/uploads\")\n        \n        self.initialize_default_preferences()\n    \n    def save_to_database(self):\n        self.db_service.save_user(self)\n    \n    def send_welcome_email(self):\n        subject = \"Welcome to our platform!\"\n        body = self.create_welcome_email_body()\n        self.email_service.send_email(self.email, subject, body)\n    \n    def send_password_reset_email(self):\n        reset_token = self.generate_password_reset_token()\n        subject = \"Password Reset Request\"\n        body = self.create_password_reset_email_body(reset_token)\n        self.email_service.send_email(self.email, subject, body)\n    \n    def send_sms_verification(self):\n        if self.phone_number:\n            sms_code = self.generate_sms_verification_code()\n            message = f\"Your verification code: {sms_code}\"\n            self.sms_service.send_sms(self.phone_number, message)\n    \n    def create_welcome_email_body(self) -> str:\n        return f\"Dear {self.name},\\n\\nWelcome to our platform! Complete your profile and explore our features.\\n\\nBest regards,\\nThe Team\"\n    \n    def create_password_reset_email_body(self, token: str) -> str:\n        return f\"Hello {self.name},\\n\\nReset your password: https://oursite.com/reset?token={token}\\n\\nLink expires in 24 hours.\"\n    \n    def generate_password_reset_token(self) -> str:\n        timestamp = int(datetime.datetime.now().timestamp() * 1000)\n        random_part = str(random.random())[2:8]\n        return f\"RESET_{timestamp}_{random_part}\"\n    \n    def generate_sms_verification_code(self) -> str:\n        return str(random.randint(100000, 999999))\n    \n    def validate_email_format(self, email: str) -> bool:\n        if not email or not email.strip():\n            return False\n        return \"@\" in email and \".\" in email and len(email.split(\"@\")) == 2\n    \n    def validate_password_strength(self, password: str) -> bool:\n        if not password or len(password) < 8:\n            return False\n        \n        has_upper = any(c.isupper() for c in password)\n        has_lower = any(c.islower() for c in password)\n        has_digit = any(c.isdigit() for c in password)\n        has_special = any(c in \"!@#$%^&*()_+-=[]{}|;:,.<>?\" for c in password)\n        \n        return has_upper and has_lower and has_digit and has_special\n    \n    def hash_password(self, password: str) -> str:\n        hash_value = 7\n        for char in password:\n            hash_value = hash_value * 31 + ord(char)\n        return f\"HASH:{hex(abs(hash_value))[2:].upper()}\"\n    \n    def verify_password(self, plain_password: str, hashed_password: str) -> bool:\n        computed_hash = self.hash_password(plain_password)\n        return computed_hash == hashed_password\n    \n    def authenticate(self, password: str) -> bool:\n        if self.login_attempts >= SecurityConfig.MAX_LOGIN_ATTEMPTS:\n            print(\"Account locked due to too many failed attempts\")\n            return False\n        \n        if self.password and self.verify_password(password, self.password):\n            self.login_attempts = 0\n            self.last_login = datetime.datetime.now()\n            self.add_to_login_history(\"Successful login from IP: 192.168.1.100\")\n            return True\n        \n        self.login_attempts += 1\n        self.add_to_login_history(\"Failed login attempt from IP: 192.168.1.100\")\n        return False\n    \n    def lock_account(self):\n        self.is_active = False\n        self.log_security_event(\"ACCOUNT_LOCKED\", f\"Account locked for user: {self.name}\")\n        self.send_account_notification(\"Your account has been locked due to security reasons.\")\n    \n    def unlock_account(self):\n        self.is_active = True\n        self.login_attempts = 0\n        self.log_security_event(\"ACCOUNT_UNLOCKED\", f\"Account unlocked for user: {self.name}\")\n        self.send_account_notification(\"Your account has been successfully unlocked.\")\n    \n    def log_security_event(self, event_type: str, description: str):\n        timestamp = datetime.datetime.now()\n        log_entry = f\"[{timestamp}] {event_type}: {description}\"\n        print(f\"SECURITY LOG: {log_entry}\")\n    \n    def send_account_notification(self, message: str):\n        self.add_notification(message)\n        if self.email_verified:\n            self.email_service.send_email(self.email, \"Account Security Alert\", message)\n        if self.phone_number:\n            self.sms_service.send_sms(self.phone_number, f\"Security Alert: {message}\")\n    \n    def add_to_login_history(self, entry: str):\n        timestamped_entry = f\"{datetime.datetime.now()}: {entry}\"\n        self.login_history.append(timestamped_entry)\n        if len(self.login_history) > 100:\n            self.login_history.pop(0)\n    \n    def initialize_default_preferences(self):\n        self.preferences.update({\n            \"theme\": \"light\",\n            \"language\": \"en\",\n            \"notifications\": \"enabled\"\n        })\n    \n    def update_preference(self, key: str, value: str):\n        old_value = self.preferences.get(key)\n        self.preferences[key] = value\n        self.log_preference_change(key, old_value, value)\n    \n    def log_preference_change(self, key: str, old_value: str, new_value: str):\n        log_entry = f\"Preference '{key}' changed from '{old_value}' to '{new_value}'\"\n        print(f\"PREFERENCE LOG: {log_entry}\")\n    \n    def get_preference(self, key: str) -> str:\n        return self.preferences.get(key)\n    \n    def upload_profile_picture(self, image_data: bytes, file_name: str):\n        if self.validate_image_file(image_data, file_name):\n            self.profile_picture_url = self.file_service.upload_file(image_data, f\"profile_{self.name}_{file_name}\")\n            self.log_activity_event(\"PROFILE_PICTURE_UPLOADED\", \"User uploaded new profile picture\")\n        else:\n            raise ValueError(\"Invalid image file\")\n    \n    def validate_image_file(self, image_data: bytes, file_name: str) -> bool:\n        if not image_data or len(image_data) == 0 or len(image_data) > 5 * 1024 * 1024:\n            return False\n        lower = file_name.lower()\n        return lower.endswith((\".jpg\", \".jpeg\", \".png\", \".gif\"))\n    \n    def log_activity_event(self, event_type: str, description: str):\n        timestamp = datetime.datetime.now()\n        log_entry = f\"[{timestamp}] {event_type}: {description} (User: {self.name})\"\n        print(f\"ACTIVITY LOG: {log_entry}\")\n    \n    def add_notification(self, message: str):\n        timestamped_notification = f\"{datetime.datetime.now()}: {message}\"\n        self.notifications.append(timestamped_notification)\n        if len(self.notifications) > 50:\n            self.notifications.pop(0)\n    \n    def change_password(self, old_password: str, new_password: str):\n        if not self.authenticate(old_password):\n            raise SecurityError(\"Current password is incorrect\")\n        \n        if not self.validate_password_strength(new_password):\n            raise ValueError(\"New password does not meet strength requirements\")\n        \n        self.password = self.hash_password(new_password)\n        self.log_security_event(\"PASSWORD_CHANGED\", \"Password changed successfully\")\n        self.send_account_notification(\"Your password has been changed successfully.\")\n    \n    def generate_user_report(self) -> str:\n        report = []\n        report.append(\"=== USER REPORT ===\")\n        report.append(f\"Name: {self.name}\")\n        report.append(f\"Email: {self.email}\")\n        report.append(f\"Active: {self.is_active}\")\n        report.append(f\"Registration Date: {self.registration_date}\")\n        report.append(f\"Login History: {len(self.login_history)} entries\")\n        return \"\\n\".join(report)\n    \n    def delete_account(self):\n        self.log_security_event(\"ACCOUNT_DELETION_STARTED\", \"User initiated account deletion\")\n        self.is_active = False\n        self.email = \"[DELETED]\"\n        self.password = None\n        self.login_history.clear()\n        self.notifications.clear()\n        self.db_service.delete_user(self.name)\n        self.log_security_event(\"ACCOUNT_DELETED\", \"Account deletion completed\")\n    \n    def set_password(self, password: str):\n        self.password = self.hash_password(password)\n\nclass SecurityError(Exception):\n    pass",
            "output": "import datetime\nimport random\nfrom typing import Dict, List, Optional\n\nclass DatabaseService:\n    def __init__(self, connection_string: str):\n        self.connection_string = connection_string\n    \n    def save_user(self, user):\n        print(f\"Saving user to database: {user.name}\")\n    \n    def update_user(self, user):\n        print(f\"Updating user in database: {user.name}\")\n    \n    def delete_user(self, user_id: str):\n        print(f\"Deleting user from database: {user_id}\")\n\nclass EmailService:\n    def __init__(self, smtp_server: str, port: int):\n        self.smtp_server = smtp_server\n        self.port = port\n    \n    def send_email(self, to: str, subject: str, body: str):\n        print(f\"Sending email to: {to}\")\n        print(f\"Subject: {subject}\")\n\nclass SMSService:\n    def __init__(self, api_key: str):\n        self.api_key = api_key\n    \n    def send_sms(self, phone_number: str, message: str):\n        print(f\"Sending SMS to: {phone_number}\")\n        print(f\"Message: {message}\")\n\nclass FileService:\n    def __init__(self, upload_path: str):\n        self.upload_path = upload_path\n    \n    def upload_file(self, file_data: bytes, file_name: str) -> str:\n        print(f\"Uploading file: {file_name}\")\n        return f\"{self.upload_path}/{file_name}\"\n    \n    def validate_image_file(self, image_data: bytes, file_name: str) -> bool:\n        if not image_data or len(image_data) == 0 or len(image_data) > 5 * 1024 * 1024:\n            return False\n        lower = file_name.lower()\n        return lower.endswith((\".jpg\", \".jpeg\", \".png\", \".gif\"))\n\nclass EmailContentService:\n    def create_welcome_email_body(self, name: str) -> str:\n        return f\"Dear {name},\\n\\nWelcome to our platform! Complete your profile and explore our features.\\n\\nBest regards,\\nThe Team\"\n    \n    def create_password_reset_email_body(self, name: str, token: str) -> str:\n        return f\"Hello {name},\\n\\nReset your password: https://oursite.com/reset?token={token}\\n\\nLink expires in 24 hours.\"\n\nclass TokenGenerationService:\n    def generate_password_reset_token(self) -> str:\n        timestamp = int(datetime.datetime.now().timestamp() * 1000)\n        random_part = str(random.random())[2:8]\n        return f\"RESET_{timestamp}_{random_part}\"\n    \n    def generate_sms_verification_code(self) -> str:\n        return str(random.randint(100000, 999999))\n\nclass ValidationService:\n    def validate_email_format(self, email: str) -> bool:\n        if not email or not email.strip():\n            return False\n        return \"@\" in email and \".\" in email and len(email.split(\"@\")) == 2\n    \n    def validate_password_strength(self, password: str) -> bool:\n        if not password or len(password) < 8:\n            return False\n        \n        has_upper = any(c.isupper() for c in password)\n        has_lower = any(c.islower() for c in password)\n        has_digit = any(c.isdigit() for c in password)\n        has_special = any(c in \"!@#$%^&*()_+-=[]{}|;:,.<>?\" for c in password)\n        \n        return has_upper and has_lower and has_digit and has_special\n\nclass PasswordService:\n    def hash_password(self, password: str) -> str:\n        hash_value = 7\n        for char in password:\n            hash_value = hash_value * 31 + ord(char)\n        return f\"HASH:{hex(abs(hash_value))[2:].upper()}\"\n    \n    def verify_password(self, plain_password: str, hashed_password: str) -> bool:\n        computed_hash = self.hash_password(plain_password)\n        return computed_hash == hashed_password\n\nclass AuthenticationService:\n    def __init__(self):\n        self.password_service = PasswordService()\n    \n    def authenticate(self, user, password: str) -> bool:\n        if user.login_attempts >= 5:\n            print(\"Account locked due to too many failed attempts\")\n            return False\n        \n        if user.password and self.password_service.verify_password(password, user.password):\n            user.reset_login_attempts()\n            user.update_last_login()\n            user.add_to_login_history(\"Successful login from IP: 192.168.1.100\")\n            return True\n        \n        user.increment_login_attempts()\n        user.add_to_login_history(\"Failed login attempt from IP: 192.168.1.100\")\n        return False\n\nclass SecurityService:\n    def log_security_event(self, event_type: str, description: str):\n        timestamp = datetime.datetime.now()\n        log_entry = f\"[{timestamp}] {event_type}: {description}\"\n        print(f\"SECURITY LOG: {log_entry}\")\n    \n    def log_activity_event(self, event_type: str, description: str, user_name: str):\n        timestamp = datetime.datetime.now()\n        log_entry = f\"[{timestamp}] {event_type}: {description} (User: {user_name})\"\n        print(f\"ACTIVITY LOG: {log_entry}\")\n    \n    def log_preference_change(self, key: str, old_value: str, new_value: str):\n        log_entry = f\"Preference '{key}' changed from '{old_value}' to '{new_value}'\"\n        print(f\"PREFERENCE LOG: {log_entry}\")\n\nclass AccountService:\n    def __init__(self):\n        self.security_service = SecurityService()\n        self.notification_service = NotificationService()\n    \n    def lock_account(self, user):\n        user.set_active(False)\n        self.security_service.log_security_event(\"ACCOUNT_LOCKED\", f\"Account locked for user: {user.name}\")\n        self.notification_service.send_account_notification(user, \"Your account has been locked due to security reasons.\")\n    \n    def unlock_account(self, user):\n        user.set_active(True)\n        user.reset_login_attempts()\n        self.security_service.log_security_event(\"ACCOUNT_UNLOCKED\", f\"Account unlocked for user: {user.name}\")\n        self.notification_service.send_account_notification(user, \"Your account has been successfully unlocked.\")\n    \n    def delete_account(self, user, db_service: DatabaseService):\n        self.security_service.log_security_event(\"ACCOUNT_DELETION_STARTED\", \"User initiated account deletion\")\n        user.set_active(False)\n        user.set_email(\"[DELETED]\")\n        user.set_password(None)\n        user.clear_login_history()\n        user.clear_notifications()\n        db_service.delete_user(user.name)\n        self.security_service.log_security_event(\"ACCOUNT_DELETED\", \"Account deletion completed\")\n\nclass NotificationService:\n    def send_account_notification(self, user, message: str):\n        user.add_notification(message)\n        \n        if user.email_verified:\n            email_service = EmailService(\"smtp.company.com\", 587)\n            email_service.send_email(user.email, \"Account Security Alert\", message)\n        \n        if user.phone_number:\n            sms_service = SMSService(\"api_key_12345\")\n            sms_service.send_sms(user.phone_number, f\"Security Alert: {message}\")\n\nclass ReportService:\n    def generate_user_report(self, user) -> str:\n        report = []\n        report.append(\"=== USER REPORT ===\")\n        report.append(f\"Name: {user.name}\")\n        report.append(f\"Email: {user.email}\")\n        report.append(f\"Active: {user.is_active}\")\n        report.append(f\"Registration Date: {user.registration_date}\")\n        report.append(f\"Login History: {user.get_login_history_size()} entries\")\n        return \"\\n\".join(report)\n\nclass UserManagementService:\n    def __init__(self):\n        self.email_service = EmailService(\"smtp.company.com\", 587)\n        self.sms_service = SMSService(\"api_key_12345\")\n        self.email_content_service = EmailContentService()\n        self.token_service = TokenGenerationService()\n        self.validation_service = ValidationService()\n        self.password_service = PasswordService()\n        self.security_service = SecurityService()\n    \n    def send_welcome_email(self, user):\n        subject = \"Welcome to our platform!\"\n        body = self.email_content_service.create_welcome_email_body(user.name)\n        self.email_service.send_email(user.email, subject, body)\n    \n    def send_password_reset_email(self, user):\n        reset_token = self.token_service.generate_password_reset_token()\n        subject = \"Password Reset Request\"\n        body = self.email_content_service.create_password_reset_email_body(user.name, reset_token)\n        self.email_service.send_email(user.email, subject, body)\n    \n    def send_sms_verification(self, user):\n        if user.phone_number:\n            sms_code = self.token_service.generate_sms_verification_code()\n            message = f\"Your verification code: {sms_code}\"\n            self.sms_service.send_sms(user.phone_number, message)\n    \n    def change_password(self, user, old_password: str, new_password: str):\n        auth_service = AuthenticationService()\n        if not auth_service.authenticate(user, old_password):\n            raise SecurityError(\"Current password is incorrect\")\n        \n        if not self.validation_service.validate_password_strength(new_password):\n            raise ValueError(\"New password does not meet strength requirements\")\n        \n        user.set_password(self.password_service.hash_password(new_password))\n        self.security_service.log_security_event(\"PASSWORD_CHANGED\", \"Password changed successfully\")\n        \n        notification_service = NotificationService()\n        notification_service.send_account_notification(user, \"Your password has been changed successfully.\")\n    \n    def upload_profile_picture(self, user, image_data: bytes, file_name: str):\n        file_service = FileService(\"/uploads\")\n        \n        if file_service.validate_image_file(image_data, file_name):\n            profile_url = file_service.upload_file(image_data, f\"profile_{user.name}_{file_name}\")\n            user.set_profile_picture_url(profile_url)\n            self.security_service.log_activity_event(\"PROFILE_PICTURE_UPLOADED\", \"User uploaded new profile picture\", user.name)\n        else:\n            raise ValueError(\"Invalid image file\")\n    \n    def update_preference(self, user, key: str, value: str):\n        old_value = user.get_preference(key)\n        user.set_preference(key, value)\n        self.security_service.log_preference_change(key, old_value, value)\n\nclass User:\n    def __init__(self, name: str, email: str):\n        self.name = name\n        self.email = email\n        self.password: Optional[str] = None\n        self.is_active = True\n        self.role = \"USER\"\n        self.last_login: Optional[datetime.datetime] = None\n        self.login_attempts = 0\n        self.phone_number: Optional[str] = None\n        self.registration_date = datetime.datetime.now()\n        self.login_history: List[str] = []\n        self.preferences: Dict[str, str] = {}\n        self.notifications: List[str] = []\n        self.profile_picture_url: Optional[str] = None\n        self.email_verified = False\n        \n        self._initialize_default_preferences()\n    \n    def _initialize_default_preferences(self):\n        self.preferences.update({\n            \"theme\": \"light\",\n            \"language\": \"en\",\n            \"notifications\": \"enabled\"\n        })\n    \n    def add_to_login_history(self, entry: str):\n        timestamped_entry = f\"{datetime.datetime.now()}: {entry}\"\n        self.login_history.append(timestamped_entry)\n        if len(self.login_history) > 100:\n            self.login_history.pop(0)\n    \n    def add_notification(self, message: str):\n        timestamped_notification = f\"{datetime.datetime.now()}: {message}\"\n        self.notifications.append(timestamped_notification)\n        if len(self.notifications) > 50:\n            self.notifications.pop(0)\n    \n    def clear_login_history(self):\n        self.login_history.clear()\n    \n    def clear_notifications(self):\n        self.notifications.clear()\n    \n    def get_login_history_size(self) -> int:\n        return len(self.login_history)\n    \n    def increment_login_attempts(self):\n        self.login_attempts += 1\n    \n    def reset_login_attempts(self):\n        self.login_attempts = 0\n    \n    def update_last_login(self):\n        self.last_login = datetime.datetime.now()\n    \n    def get_preference(self, key: str) -> str:\n        return self.preferences.get(key)\n    \n    def set_preference(self, key: str, value: str):\n        self.preferences[key] = value\n    \n    def set_active(self, active: bool):\n        self.is_active = active\n    \n    def set_email(self, email: str):\n        self.email = email\n    \n    def set_password(self, password: str):\n        self.password = password\n    \n    def set_profile_picture_url(self, url: str):\n        self.profile_picture_url = url\n    \n    def set_email_verified(self, verified: bool):\n        self.email_verified = verified\n\nclass SecurityError(Exception):\n    pass",
            "level": "HARD",
            "language": "PYTHON",
            "violation": "SRP",
            "description": "User database email operations"
        },
        {
            "input": "import time\nimport random\nfrom datetime import datetime\nfrom typing import List, Dict\n\nclass PayrollSystem:\n    def __init__(self, database_url: str):\n        self.database_url = database_url\n    \n    def save_payroll_record(self, employee, gross_pay: float, net_pay: float):\n        print(f\"Saving payroll record to database for: {employee.get_name()}\")\n    \n    def generate_payroll_report(self, period: str):\n        print(f\"Generating payroll report for period: {period}\")\n\nclass EmailNotificationService:\n    def __init__(self, smtp_server: str):\n        self.smtp_server = smtp_server\n    \n    def send_email(self, recipient: str, subject: str, body: str):\n        print(f\"Sending email to: {recipient}\")\n        print(f\"Subject: {subject}\")\n\nclass HRDatabase:\n    def __init__(self, connection_string: str):\n        self.connection_string = connection_string\n    \n    def update_employee_record(self, employee_id: str, field: str, value: str):\n        print(f\"Updating HR record - Employee: {employee_id}, Field: {field}\")\n    \n    def save_vacation_request(self, employee_id: str, days: int, approved: bool):\n        print(f\"Recording vacation request: {employee_id}, Days: {days}\")\n\nclass ComplianceLogger:\n    def __init__(self, log_file: str):\n        self.log_file = log_file\n    \n    def log_event(self, event_type: str, description: str):\n        print(f\"[COMPLIANCE LOG] {event_type}: {description}\")\n\nclass Employee:\n    def __init__(self, name: str, base_salary: float, years_of_service: int):\n        self.name = name\n        self.base_salary = base_salary\n        self.years_of_service = years_of_service\n        self.department = None\n        self.position = None\n        self.employee_id = self._generate_unique_employee_id()\n        self.hire_date = datetime.now()\n        self.performance_rating = 3.0\n        self.vacation_days = 25\n        self.used_vacation_days = 0\n        self.manager = None\n        self.email = None\n        self.phone_number = None\n        self.is_active = True\n        self.skill_certifications: List[str] = []\n        self.personal_info: Dict[str, str] = {}\n        self.overtime_hours = 0.0\n        \n        self.payroll_system = PayrollSystem(\"mysql://localhost:3306/payroll\")\n        self.email_service = EmailNotificationService(\"smtp.company.com\")\n        self.hr_database = HRDatabase(\"mysql://localhost:3306/hr\")\n        self.compliance_logger = ComplianceLogger(\"/var/logs/compliance.log\")\n        \n        self._initialize_employee_defaults()\n    \n    def calculate_salary(self) -> float:\n        return self.base_salary + (self.years_of_service * 1000)\n    \n    def print_pay_slip(self):\n        print(f\"Pay slip for {self.name}: ${self.calculate_salary()}\")\n    \n    def calculate_performance_bonus(self) -> float:\n        base_bonus = self.base_salary * 0.12\n        rating_multiplier = self.performance_rating / 5.0\n        service_multiplier = min(self.years_of_service * 0.02, 0.15)\n        return base_bonus * rating_multiplier * (1.0 + service_multiplier)\n    \n    def calculate_overtime_compensation(self) -> float:\n        if self.overtime_hours > 0:\n            hourly_rate = self.base_salary / (52 * 40)\n            return self.overtime_hours * hourly_rate * 1.5\n        return 0.0\n    \n    def calculate_total_compensation(self) -> float:\n        return (self.calculate_salary() + \n                self.calculate_performance_bonus() + \n                self.calculate_overtime_compensation())\n    \n    def calculate_federal_tax(self, gross_pay: float) -> float:\n        if gross_pay <= 4000:\n            return gross_pay * 0.18\n        elif gross_pay <= 8000:\n            return gross_pay * 0.22\n        else:\n            return gross_pay * 0.28\n    \n    def calculate_state_tax(self, gross_pay: float) -> float:\n        return gross_pay * 0.085\n    \n    def calculate_social_security_tax(self, gross_pay: float) -> float:\n        return min(gross_pay * 0.062, 8853.60)\n    \n    def generate_compensation_breakdown(self) -> str:\n        salary = self.calculate_salary()\n        bonus = self.calculate_performance_bonus()\n        overtime = self.calculate_overtime_compensation()\n        gross = salary + bonus + overtime\n        federal_tax = self.calculate_federal_tax(gross)\n        state_tax = self.calculate_state_tax(gross)\n        ss_tax = self.calculate_social_security_tax(gross)\n        total_tax = federal_tax + state_tax + ss_tax\n        net_pay = gross - total_tax\n        \n        breakdown = []\n        breakdown.append(\"=== COMPENSATION BREAKDOWN ===\")\n        breakdown.append(f\"Base Salary: ${salary:.2f}\")\n        breakdown.append(f\"Performance Bonus: ${bonus:.2f}\")\n        breakdown.append(f\"Overtime Pay: ${overtime:.2f}\")\n        breakdown.append(f\"Gross Pay: ${gross:.2f}\")\n        breakdown.append(f\"Federal Tax: ${federal_tax:.2f}\")\n        breakdown.append(f\"State Tax: ${state_tax:.2f}\")\n        breakdown.append(f\"Social Security: ${ss_tax:.2f}\")\n        breakdown.append(f\"Net Pay: ${net_pay:.2f}\")\n        return \"\\n\".join(breakdown)\n    \n    def process_monthly_payroll(self):\n        gross_pay = self.calculate_total_compensation()\n        total_tax = (self.calculate_federal_tax(gross_pay) + \n                    self.calculate_state_tax(gross_pay) + \n                    self.calculate_social_security_tax(gross_pay))\n        net_pay = gross_pay - total_tax\n        \n        breakdown = self.generate_compensation_breakdown()\n        print(breakdown)\n        \n        self.payroll_system.save_payroll_record(self, gross_pay, net_pay)\n        \n        email_body = self._create_payroll_notification_email(breakdown)\n        self.email_service.send_email(self.email, f\"Monthly Payroll - {self.name}\", email_body)\n        \n        self.compliance_logger.log_event(\"PAYROLL_PROCESSED\", \n                                        f\"Monthly payroll processed for employee: {self.employee_id}\")\n    \n    def _create_payroll_notification_email(self, breakdown: str) -> str:\n        return (f\"Dear {self.name},\\n\\n\"\n                f\"Your monthly payroll has been processed.\\n\\n\"\n                f\"{breakdown}\\n\\n\"\n                f\"Best regards,\\nPayroll Department\")\n    \n    def request_vacation_days(self, days: int) -> bool:\n        if self.used_vacation_days + days <= self.vacation_days:\n            self.used_vacation_days += days\n            \n            self.hr_database.save_vacation_request(self.employee_id, days, True)\n            \n            manager_email = self._create_manager_notification_email(days)\n            self.email_service.send_email(f\"{self.manager}@company.com\", \n                                        f\"Vacation Request - {self.name}\", manager_email)\n            \n            self._log_vacation_activity(days, \"APPROVED\")\n            return True\n        else:\n            self._log_vacation_activity(days, \"DENIED\")\n            return False\n    \n    def _create_manager_notification_email(self, days: int) -> str:\n        remaining_days = self.vacation_days - self.used_vacation_days\n        return (f\"Manager Notification:\\n\\n\"\n                f\"Employee {self.name} ({self.employee_id}) has requested {days} vacation days.\\n\"\n                f\"Remaining balance: {remaining_days} days.\\n\"\n                f\"Department: {self.department}\")\n    \n    def _log_vacation_activity(self, days: int, status: str):\n        log_message = f\"Vacation request - Employee: {self.employee_id}, Days: {days}, Status: {status}\"\n        self.compliance_logger.log_event(\"VACATION_REQUEST\", log_message)\n    \n    def conduct_annual_performance_review(self):\n        review_report = self._generate_performance_review_report()\n        print(review_report)\n        \n        self.hr_database.update_employee_record(self.employee_id, \"performance_rating\", \n                                               str(self.performance_rating))\n        self.hr_database.update_employee_record(self.employee_id, \"last_review_date\", \n                                               str(datetime.now()))\n        \n        review_email = self._create_performance_review_email(review_report)\n        self.email_service.send_email(self.email, f\"Annual Performance Review - {self.name}\", \n                                    review_email)\n        \n        self.compliance_logger.log_event(\"PERFORMANCE_REVIEW\", \n                                        f\"Annual review completed for employee: {self.employee_id}\")\n    \n    def _generate_performance_review_report(self) -> str:\n        report = []\n        report.append(\"=== ANNUAL PERFORMANCE REVIEW ===\")\n        report.append(f\"Employee: {self.name} ({self.employee_id})\")\n        report.append(f\"Department: {self.department}\")\n        report.append(f\"Current Rating: {self.performance_rating}/5.0\")\n        report.append(f\"Years of Service: {self.years_of_service}\")\n        report.append(f\"Certifications: {len(self.skill_certifications)}\")\n        \n        if self.performance_rating >= 4.5:\n            report.append(\"Recommendation: Promotion candidate\")\n        elif self.performance_rating < 2.5:\n            report.append(\"Recommendation: Performance improvement plan required\")\n        \n        return \"\\n\".join(report)\n    \n    def _create_performance_review_email(self, report: str) -> str:\n        return (f\"Dear {self.name},\\n\\n\"\n                f\"Your annual performance review has been completed.\\n\\n\"\n                f\"{report}\\n\\n\"\n                f\"Please schedule a meeting to discuss.\\n\\n\"\n                f\"HR Department\")\n    \n    def update_rating_with_notifications(self, new_rating: float):\n        old_rating = self.performance_rating\n        self.performance_rating = new_rating\n        \n        self.hr_database.update_employee_record(self.employee_id, \"performance_rating\", \n                                               str(new_rating))\n        \n        if abs(new_rating - old_rating) >= 1.0:\n            alert_email = self._create_rating_change_alert(old_rating, new_rating)\n            self.email_service.send_email(\"hr@company.com\", \n                                        f\"Significant Rating Change - {self.name}\", alert_email)\n        \n        self._log_performance_change(old_rating, new_rating)\n    \n    def _create_rating_change_alert(self, old_rating: float, new_rating: float) -> str:\n        change_type = \"IMPROVEMENT\" if new_rating > old_rating else \"DECLINE\"\n        return (f\"PERFORMANCE ALERT:\\n\\n\"\n                f\"Employee: {self.name} ({self.employee_id})\\n\"\n                f\"Old Rating: {old_rating}\\n\"\n                f\"New Rating: {new_rating}\\n\"\n                f\"Change: {change_type}\")\n    \n    def _log_performance_change(self, old_rating: float, new_rating: float):\n        change = (f\"Performance rating changed - Employee: {self.employee_id}, \"\n                 f\"From: {old_rating}, To: {new_rating}\")\n        self.compliance_logger.log_event(\"RATING_CHANGE\", change)\n    \n    def add_skill_certification(self, certification: str):\n        self.skill_certifications.append(certification)\n        self.hr_database.update_employee_record(self.employee_id, \"certifications\", \n                                               \",\".join(self.skill_certifications))\n        self.compliance_logger.log_event(\"CERTIFICATION_ADDED\", \n                                        f\"New certification added for {self.employee_id}: {certification}\")\n    \n    def _generate_unique_employee_id(self) -> str:\n        timestamp = int(time.time() * 1000) % 100000\n        random_num = random.randint(0, 999)\n        return f\"EMP{timestamp}{random_num}\"\n    \n    def _initialize_employee_defaults(self):\n        self.personal_info[\"emergency_contact\"] = \"\"\n        self.personal_info[\"bank_routing\"] = \"\"\n        self.personal_info[\"tax_filing_status\"] = \"single\"\n    \n    def update_personal_information(self, field: str, value: str):\n        self.personal_info[field] = value\n        self.hr_database.update_employee_record(self.employee_id, field, value)\n        self.compliance_logger.log_event(\"PERSONAL_INFO_UPDATE\", \n                                        f\"Updated {field} for employee: {self.employee_id}\")\n    \n    # Getters and Setters\n    def get_name(self) -> str:\n        return self.name\n    \n    def set_name(self, name: str):\n        self.name = name\n    \n    def get_base_salary(self) -> float:\n        return self.base_salary\n    \n    def set_base_salary(self, base_salary: float):\n        self.base_salary = base_salary\n    \n    def get_department(self) -> str:\n        return self.department\n    \n    def set_department(self, department: str):\n        self.department = department\n    \n    def get_performance_rating(self) -> float:\n        return self.performance_rating\n    \n    def get_email(self) -> str:\n        return self.email\n    \n    def set_email(self, email: str):\n        self.email = email\n    \n    def get_overtime_hours(self) -> float:\n        return self.overtime_hours\n    \n    def set_overtime_hours(self, overtime_hours: float):\n        self.overtime_hours = overtime_hours",
            "output": "import time\nimport random\nfrom datetime import datetime\nfrom typing import List, Dict\n\nclass PayrollSystem:\n    def __init__(self, database_url: str):\n        self.database_url = database_url\n    \n    def save_payroll_record(self, employee, gross_pay: float, net_pay: float):\n        print(f\"Saving payroll record to database for: {employee.get_name()}\")\n    \n    def generate_payroll_report(self, period: str):\n        print(f\"Generating payroll report for period: {period}\")\n\nclass EmailNotificationService:\n    def __init__(self, smtp_server: str):\n        self.smtp_server = smtp_server\n    \n    def send_email(self, recipient: str, subject: str, body: str):\n        print(f\"Sending email to: {recipient}\")\n        print(f\"Subject: {subject}\")\n\nclass HRDatabase:\n    def __init__(self, connection_string: str):\n        self.connection_string = connection_string\n    \n    def update_employee_record(self, employee_id: str, field: str, value: str):\n        print(f\"Updating HR record - Employee: {employee_id}, Field: {field}\")\n    \n    def save_vacation_request(self, employee_id: str, days: int, approved: bool):\n        print(f\"Recording vacation request: {employee_id}, Days: {days}\")\n\nclass ComplianceLogger:\n    def __init__(self, log_file: str):\n        self.log_file = log_file\n    \n    def log_event(self, event_type: str, description: str):\n        print(f\"[COMPLIANCE LOG] {event_type}: {description}\")\n\nclass SalaryCalculationService:\n    def calculate_base_salary(self, base_salary: float, years_of_service: int) -> float:\n        return base_salary + (years_of_service * 1000)\n    \n    def calculate_performance_bonus(self, base_salary: float, performance_rating: float, years_of_service: int) -> float:\n        base_bonus = base_salary * 0.12\n        rating_multiplier = performance_rating / 5.0\n        service_multiplier = min(years_of_service * 0.02, 0.15)\n        return base_bonus * rating_multiplier * (1.0 + service_multiplier)\n    \n    def calculate_overtime_compensation(self, base_salary: float, overtime_hours: float) -> float:\n        if overtime_hours > 0:\n            hourly_rate = base_salary / (52 * 40)\n            return overtime_hours * hourly_rate * 1.5\n        return 0.0\n    \n    def calculate_total_compensation(self, base_salary: float, years_of_service: int, performance_rating: float, overtime_hours: float) -> float:\n        salary = self.calculate_base_salary(base_salary, years_of_service)\n        bonus = self.calculate_performance_bonus(base_salary, performance_rating, years_of_service)\n        overtime = self.calculate_overtime_compensation(base_salary, overtime_hours)\n        return salary + bonus + overtime\n\nclass TaxCalculationService:\n    def calculate_federal_tax(self, gross_pay: float) -> float:\n        if gross_pay <= 4000:\n            return gross_pay * 0.18\n        elif gross_pay <= 8000:\n            return gross_pay * 0.22\n        else:\n            return gross_pay * 0.28\n    \n    def calculate_state_tax(self, gross_pay: float) -> float:\n        return gross_pay * 0.085\n    \n    def calculate_social_security_tax(self, gross_pay: float) -> float:\n        return min(gross_pay * 0.062, 8853.60)\n    \n    def calculate_total_tax(self, gross_pay: float) -> float:\n        return (self.calculate_federal_tax(gross_pay) + \n                self.calculate_state_tax(gross_pay) + \n                self.calculate_social_security_tax(gross_pay))\n\nclass EmailContentService:\n    def create_payroll_notification_email(self, employee_name: str, breakdown: str) -> str:\n        return (f\"Dear {employee_name},\\n\\n\"\n                f\"Your monthly payroll has been processed.\\n\\n\"\n                f\"{breakdown}\\n\\n\"\n                f\"Best regards,\\nPayroll Department\")\n    \n    def create_manager_notification_email(self, employee_name: str, employee_id: str, days: int, remaining_days: int, department: str) -> str:\n        return (f\"Manager Notification:\\n\\n\"\n                f\"Employee {employee_name} ({employee_id}) has requested {days} vacation days.\\n\"\n                f\"Remaining balance: {remaining_days} days.\\n\"\n                f\"Department: {department}\")\n    \n    def create_performance_review_email(self, employee_name: str, report: str) -> str:\n        return (f\"Dear {employee_name},\\n\\n\"\n                f\"Your annual performance review has been completed.\\n\\n\"\n                f\"{report}\\n\\n\"\n                f\"Please schedule a meeting to discuss.\\n\\n\"\n                f\"HR Department\")\n    \n    def create_rating_change_alert(self, employee_name: str, employee_id: str, old_rating: float, new_rating: float) -> str:\n        change_type = \"IMPROVEMENT\" if new_rating > old_rating else \"DECLINE\"\n        return (f\"PERFORMANCE ALERT:\\n\\n\"\n                f\"Employee: {employee_name} ({employee_id})\\n\"\n                f\"Old Rating: {old_rating}\\n\"\n                f\"New Rating: {new_rating}\\n\"\n                f\"Change: {change_type}\")\n\nclass ReportGenerationService:\n    def generate_compensation_breakdown(self, employee, salary_service, tax_service) -> str:\n        salary = salary_service.calculate_base_salary(employee.get_base_salary(), employee.get_years_of_service())\n        bonus = salary_service.calculate_performance_bonus(employee.get_base_salary(), employee.get_performance_rating(), employee.get_years_of_service())\n        overtime = salary_service.calculate_overtime_compensation(employee.get_base_salary(), employee.get_overtime_hours())\n        gross = salary + bonus + overtime\n        federal_tax = tax_service.calculate_federal_tax(gross)\n        state_tax = tax_service.calculate_state_tax(gross)\n        ss_tax = tax_service.calculate_social_security_tax(gross)\n        total_tax = federal_tax + state_tax + ss_tax\n        net_pay = gross - total_tax\n        \n        breakdown = []\n        breakdown.append(\"=== COMPENSATION BREAKDOWN ===\")\n        breakdown.append(f\"Base Salary: ${salary:.2f}\")\n        breakdown.append(f\"Performance Bonus: ${bonus:.2f}\")\n        breakdown.append(f\"Overtime Pay: ${overtime:.2f}\")\n        breakdown.append(f\"Gross Pay: ${gross:.2f}\")\n        breakdown.append(f\"Federal Tax: ${federal_tax:.2f}\")\n        breakdown.append(f\"State Tax: ${state_tax:.2f}\")\n        breakdown.append(f\"Social Security: ${ss_tax:.2f}\")\n        breakdown.append(f\"Net Pay: ${net_pay:.2f}\")\n        return \"\\n\".join(breakdown)\n    \n    def generate_performance_review_report(self, employee) -> str:\n        report = []\n        report.append(\"=== ANNUAL PERFORMANCE REVIEW ===\")\n        report.append(f\"Employee: {employee.get_name()} ({employee.get_employee_id()})\")\n        report.append(f\"Department: {employee.get_department()}\")\n        report.append(f\"Current Rating: {employee.get_performance_rating()}/5.0\")\n        report.append(f\"Years of Service: {employee.get_years_of_service()}\")\n        report.append(f\"Certifications: {len(employee.get_skill_certifications())}\")\n        \n        if employee.get_performance_rating() >= 4.5:\n            report.append(\"Recommendation: Promotion candidate\")\n        elif employee.get_performance_rating() < 2.5:\n            report.append(\"Recommendation: Performance improvement plan required\")\n        \n        return \"\\n\".join(report)\n    \n    def print_pay_slip(self, employee, salary_service):\n        salary = salary_service.calculate_base_salary(employee.get_base_salary(), employee.get_years_of_service())\n        print(f\"Pay slip for {employee.get_name()}: ${salary}\")\n\nclass PayrollProcessingService:\n    def __init__(self):\n        self.payroll_system = PayrollSystem(\"mysql://localhost:3306/payroll\")\n        self.email_service = EmailNotificationService(\"smtp.company.com\")\n        self.compliance_logger = ComplianceLogger(\"/var/logs/compliance.log\")\n        self.salary_service = SalaryCalculationService()\n        self.tax_service = TaxCalculationService()\n        self.report_service = ReportGenerationService()\n        self.email_content_service = EmailContentService()\n    \n    def process_monthly_payroll(self, employee):\n        gross_pay = self.salary_service.calculate_total_compensation(\n            employee.get_base_salary(), employee.get_years_of_service(), \n            employee.get_performance_rating(), employee.get_overtime_hours())\n        total_tax = self.tax_service.calculate_total_tax(gross_pay)\n        net_pay = gross_pay - total_tax\n        \n        breakdown = self.report_service.generate_compensation_breakdown(employee, self.salary_service, self.tax_service)\n        print(breakdown)\n        \n        self.payroll_system.save_payroll_record(employee, gross_pay, net_pay)\n        \n        email_body = self.email_content_service.create_payroll_notification_email(employee.get_name(), breakdown)\n        self.email_service.send_email(employee.get_email(), f\"Monthly Payroll - {employee.get_name()}\", email_body)\n        \n        self.compliance_logger.log_event(\"PAYROLL_PROCESSED\", f\"Monthly payroll processed for employee: {employee.get_employee_id()}\")\n\nclass VacationManagementService:\n    def __init__(self):\n        self.hr_database = HRDatabase(\"mysql://localhost:3306/hr\")\n        self.email_service = EmailNotificationService(\"smtp.company.com\")\n        self.compliance_logger = ComplianceLogger(\"/var/logs/compliance.log\")\n        self.email_content_service = EmailContentService()\n    \n    def request_vacation_days(self, employee, days: int) -> bool:\n        if employee.get_used_vacation_days() + days <= employee.get_vacation_days():\n            employee.set_used_vacation_days(employee.get_used_vacation_days() + days)\n            \n            self.hr_database.save_vacation_request(employee.get_employee_id(), days, True)\n            \n            manager_email = self.email_content_service.create_manager_notification_email(\n                employee.get_name(), employee.get_employee_id(), days,\n                employee.get_vacation_days() - employee.get_used_vacation_days(), employee.get_department())\n            self.email_service.send_email(f\"{employee.get_manager()}@company.com\", \n                                        f\"Vacation Request - {employee.get_name()}\", manager_email)\n            \n            self._log_vacation_activity(employee.get_employee_id(), days, \"APPROVED\")\n            return True\n        else:\n            self._log_vacation_activity(employee.get_employee_id(), days, \"DENIED\")\n            return False\n    \n    def _log_vacation_activity(self, employee_id: str, days: int, status: str):\n        log_message = f\"Vacation request - Employee: {employee_id}, Days: {days}, Status: {status}\"\n        self.compliance_logger.log_event(\"VACATION_REQUEST\", log_message)\n\nclass PerformanceManagementService:\n    def __init__(self):\n        self.hr_database = HRDatabase(\"mysql://localhost:3306/hr\")\n        self.email_service = EmailNotificationService(\"smtp.company.com\")\n        self.compliance_logger = ComplianceLogger(\"/var/logs/compliance.log\")\n        self.report_service = ReportGenerationService()\n        self.email_content_service = EmailContentService()\n    \n    def conduct_annual_performance_review(self, employee):\n        review_report = self.report_service.generate_performance_review_report(employee)\n        print(review_report)\n        \n        self.hr_database.update_employee_record(employee.get_employee_id(), \"performance_rating\", \n                                               str(employee.get_performance_rating()))\n        self.hr_database.update_employee_record(employee.get_employee_id(), \"last_review_date\", \n                                               str(datetime.now()))\n        \n        review_email = self.email_content_service.create_performance_review_email(employee.get_name(), review_report)\n        self.email_service.send_email(employee.get_email(), f\"Annual Performance Review - {employee.get_name()}\", \n                                    review_email)\n        \n        self.compliance_logger.log_event(\"PERFORMANCE_REVIEW\", \n                                        f\"Annual review completed for employee: {employee.get_employee_id()}\")\n    \n    def update_rating_with_notifications(self, employee, new_rating: float):\n        old_rating = employee.get_performance_rating()\n        employee.set_performance_rating(new_rating)\n        \n        self.hr_database.update_employee_record(employee.get_employee_id(), \"performance_rating\", str(new_rating))\n        \n        if abs(new_rating - old_rating) >= 1.0:\n            alert_email = self.email_content_service.create_rating_change_alert(\n                employee.get_name(), employee.get_employee_id(), old_rating, new_rating)\n            self.email_service.send_email(\"hr@company.com\", \n                                        f\"Significant Rating Change - {employee.get_name()}\", alert_email)\n        \n        self._log_performance_change(employee.get_employee_id(), old_rating, new_rating)\n    \n    def _log_performance_change(self, employee_id: str, old_rating: float, new_rating: float):\n        change = f\"Performance rating changed - Employee: {employee_id}, From: {old_rating}, To: {new_rating}\"\n        self.compliance_logger.log_event(\"RATING_CHANGE\", change)\n\nclass EmployeeDataManagementService:\n    def __init__(self):\n        self.hr_database = HRDatabase(\"mysql://localhost:3306/hr\")\n        self.compliance_logger = ComplianceLogger(\"/var/logs/compliance.log\")\n    \n    def add_skill_certification(self, employee, certification: str):\n        employee.get_skill_certifications().append(certification)\n        self.hr_database.update_employee_record(employee.get_employee_id(), \"certifications\", \n                                               \",\".join(employee.get_skill_certifications()))\n        self.compliance_logger.log_event(\"CERTIFICATION_ADDED\", \n                                        f\"New certification added for {employee.get_employee_id()}: {certification}\")\n    \n    def update_personal_information(self, employee, field: str, value: str):\n        employee.get_personal_info()[field] = value\n        self.hr_database.update_employee_record(employee.get_employee_id(), field, value)\n        self.compliance_logger.log_event(\"PERSONAL_INFO_UPDATE\", \n                                        f\"Updated {field} for employee: {employee.get_employee_id()}\")\n\nclass EmployeeIdGenerationService:\n    def generate_unique_employee_id(self) -> str:\n        timestamp = int(time.time() * 1000) % 100000\n        random_num = random.randint(0, 999)\n        return f\"EMP{timestamp}{random_num}\"\n\nclass Employee:\n    def __init__(self, name: str, base_salary: float, years_of_service: int):\n        self.name = name\n        self.base_salary = base_salary\n        self.years_of_service = years_of_service\n        self.department = None\n        self.position = None\n        \n        id_service = EmployeeIdGenerationService()\n        self.employee_id = id_service.generate_unique_employee_id()\n        \n        self.hire_date = datetime.now()\n        self.vacation_days = 25\n        self.used_vacation_days = 0\n        self.performance_rating = 3.0\n        self.is_active = True\n        self.skill_certifications: List[str] = []\n        self.personal_info: Dict[str, str] = {}\n        self.overtime_hours = 0.0\n        self.manager = None\n        self.email = None\n        self.phone_number = None\n        \n        self._initialize_employee_defaults()\n    \n    def _initialize_employee_defaults(self):\n        self.personal_info[\"emergency_contact\"] = \"\"\n        self.personal_info[\"bank_routing\"] = \"\"\n        self.personal_info[\"tax_filing_status\"] = \"single\"\n    \n    # Getters and Setters\n    def get_name(self) -> str:\n        return self.name\n    \n    def set_name(self, name: str):\n        self.name = name\n    \n    def get_base_salary(self) -> float:\n        return self.base_salary\n    \n    def set_base_salary(self, base_salary: float):\n        self.base_salary = base_salary\n    \n    def get_years_of_service(self) -> int:\n        return self.years_of_service\n    \n    def set_years_of_service(self, years_of_service: int):\n        self.years_of_service = years_of_service\n    \n    def get_department(self) -> str:\n        return self.department\n    \n    def set_department(self, department: str):\n        self.department = department\n    \n    def get_position(self) -> str:\n        return self.position\n    \n    def set_position(self, position: str):\n        self.position = position\n    \n    def get_employee_id(self) -> str:\n        return self.employee_id\n    \n    def get_hire_date(self) -> datetime:\n        return self.hire_date\n    \n    def get_performance_rating(self) -> float:\n        return self.performance_rating\n    \n    def set_performance_rating(self, performance_rating: float):\n        self.performance_rating = performance_rating\n    \n    def get_vacation_days(self) -> int:\n        return self.vacation_days\n    \n    def set_vacation_days(self, vacation_days: int):\n        self.vacation_days = vacation_days\n    \n    def get_used_vacation_days(self) -> int:\n        return self.used_vacation_days\n    \n    def set_used_vacation_days(self, used_vacation_days: int):\n        self.used_vacation_days = used_vacation_days\n    \n    def get_manager(self) -> str:\n        return self.manager\n    \n    def set_manager(self, manager: str):\n        self.manager = manager\n    \n    def get_email(self) -> str:\n        return self.email\n    \n    def set_email(self, email: str):\n        self.email = email\n    \n    def get_phone_number(self) -> str:\n        return self.phone_number\n    \n    def set_phone_number(self, phone_number: str):\n        self.phone_number = phone_number\n    \n    def is_active(self) -> bool:\n        return self.is_active\n    \n    def set_active(self, active: bool):\n        self.is_active = active\n    \n    def get_skill_certifications(self) -> List[str]:\n        return self.skill_certifications\n    \n    def get_personal_info(self) -> Dict[str, str]:\n        return self.personal_info\n    \n    def get_overtime_hours(self) -> float:\n        return self.overtime_hours\n    \n    def set_overtime_hours(self, overtime_hours: float):\n        self.overtime_hours = overtime_hours",
            "level": "HARD",
            "language": "PYTHON",
            "violation": "SRP",
            "description": "Employee salary payslip system"
        },
        {
            "input": "from datetime import datetime\nimport random\nimport math\nfrom typing import List\n\nclass FileStorage:\n    def __init__(self, base_path: str):\n        self.base_path = base_path\n    \n    def save_to_file(self, filename: str, content: str):\n        print(f\"Saving content to file: {self.base_path}/{filename}\")\n    \n    def load_from_file(self, filename: str) -> str:\n        print(f\"Loading content from file: {self.base_path}/{filename}\")\n        return \"file content\"\n    \n    def delete_file(self, filename: str):\n        print(f\"Deleting file: {self.base_path}/{filename}\")\n\nclass EmailService:\n    def __init__(self, smtp_server: str):\n        self.smtp_server = smtp_server\n    \n    def send_email(self, recipient: str, subject: str, body: str):\n        print(f\"Sending email to: {recipient}\")\n        print(f\"Subject: {subject}\")\n    \n    def send_bulk_email(self, recipients: List[str], subject: str, body: str):\n        print(f\"Sending bulk email to {len(recipients)} recipients\")\n\nclass DatabaseService:\n    def __init__(self, connection_string: str):\n        self.connection_string = connection_string\n    \n    def save_book(self, book):\n        print(f\"Saving book to database: {book.get_title()}\")\n    \n    def update_sales_data(self, isbn: str, sales: int):\n        print(f\"Updating sales data for ISBN: {isbn}\")\n    \n    def log_transaction(self, transaction_type: str, details: str):\n        print(f\"[DB LOG] {transaction_type}: {details}\")\n\nclass PrinterService:\n    def __init__(self, printer_name: str):\n        self.printer_name = printer_name\n    \n    def print_document(self, document: str):\n        print(f\"Printing on {self.printer_name}: {document[:min(50, len(document))]}...\")\n    \n    def print_report(self, report: str):\n        print(f\"Printing report on {self.printer_name}\")\n\nclass Book:\n    def __init__(self, title: str, author: str, content: str):\n        self.title = title\n        self.author = author\n        self.content = content\n        self.publish_date = datetime.now()\n        self.reviews = []\n        self.customer_emails = []\n        self.average_rating = 0.0\n        self.total_sales = 0\n        self.is_available = True\n        self.format = \"paperback\"\n        self.discount_rate = 0.0\n        \n        self.file_storage = FileStorage(\"/books/storage\")\n        self.email_service = EmailService(\"smtp.bookstore.com\")\n        self.db_service = DatabaseService(\"jdbc:mysql://localhost:3306/bookstore\")\n        self.printer = PrinterService(\"BookStore_Printer_001\")\n        \n        self.initialize_book_defaults()\n    \n    def print_book(self):\n        print(f\"Title: {self.title}\\nAuthor: {self.author}\\nContent: {self.content}\")\n    \n    def save_to_file(self, filename: str):\n        book_data = self.format_complete_book_data()\n        self.file_storage.save_to_file(filename, book_data)\n        self.db_service.save_book(self)\n    \n    def format_complete_book_data(self) -> str:\n        return f\"TITLE: {self.title}\\nAUTHOR: {self.author}\\nISBN: {self.isbn}\\nGENRE: {self.genre}\\nPAGES: {self.page_count}\\nPRICE: ${self.calculate_final_price()}\\nFORMAT: {self.format}\\nPUBLISHER: {self.publisher}\\nRATING: {self.average_rating}\\nSALES: {self.total_sales}\\nAVAILABLE: {self.is_available}\\nCONTENT: {self.content}\"\n    \n    def generate_unique_isbn(self):\n        timestamp = int(datetime.now().timestamp() * 1000)\n        category = \"FIC\" if self.genre and self.genre == \"fiction\" else \"NF\"\n        self.isbn = f\"978-{category}-{timestamp % 100000}-{random.randint(0, 99):02d}\"\n    \n    def calculate_dynamic_page_count(self):\n        if self.content:\n            base_pages = len(self.content) // 250\n            format_multiplier = 1.2 if self.format == \"hardcover\" else 1.0\n            self.page_count = max(1, int(base_pages * format_multiplier))\n    \n    def validate_complete_book_data(self) -> bool:\n        return (self.title and self.title.strip() and \n                self.author and self.author.strip() and \n                self.validate_isbn_format(self.isbn) and \n                self.validate_price_range(self.price) and \n                self.content and len(self.content) > 0)\n    \n    def validate_isbn_format(self, isbn: str) -> bool:\n        if not isbn:\n            return False\n        clean = ''.join(c for c in isbn if c.isdigit() or c == 'X')\n        return len(clean) == 10 or len(clean) == 13\n    \n    def validate_price_range(self, price: float) -> bool:\n        return 0.99 <= price <= 999.99\n    \n    def process_customer_review(self, customer_email: str, review: str, rating: float):\n        if 1.0 <= rating <= 5.0:\n            self.reviews.append(review)\n            self.customer_emails.append(customer_email)\n            self.recalculate_rating_metrics(rating)\n            self.send_review_confirmation_email(customer_email)\n            self.log_review_activity(customer_email, rating)\n    \n    def recalculate_rating_metrics(self, new_rating: float):\n        if len(self.reviews) == 1:\n            self.average_rating = new_rating\n        else:\n            self.average_rating = (self.average_rating * (len(self.reviews) - 1) + new_rating) / len(self.reviews)\n    \n    def send_review_confirmation_email(self, customer_email: str):\n        subject = f\"Thank you for reviewing: {self.title}\"\n        body = self.create_review_thank_you_email()\n        self.email_service.send_email(customer_email, subject, body)\n    \n    def create_review_thank_you_email(self) -> str:\n        return f\"Dear Reader,\\n\\nThank you for reviewing '{self.title}' by {self.author}.\\nYour feedback helps other readers discover great books!\\n\\nBest regards,\\nBookstore Team\"\n    \n    def log_review_activity(self, customer_email: str, rating: float):\n        log_details = f\"Review added - Book: {self.isbn}, Customer: {customer_email}, Rating: {rating}\"\n        self.db_service.log_transaction(\"REVIEW_ADDED\", log_details)\n    \n    def process_sale_transaction(self, customer_email: str):\n        self.total_sales += 1\n        self.customer_emails.append(customer_email)\n        \n        self.update_inventory_status()\n        \n        self.db_service.update_sales_data(self.isbn, self.total_sales)\n        \n        receipt_email = self.generate_sales_receipt_email()\n        self.email_service.send_email(customer_email, f\"Purchase Confirmation - {self.title}\", receipt_email)\n        \n        self.log_sales_transaction(customer_email)\n        \n        if self.total_sales % 100 == 0:\n            self.send_milestone_notification()\n    \n    def update_inventory_status(self):\n        if self.total_sales > 1000:\n            self.is_available = random.random() > 0.1\n    \n    def generate_sales_receipt_email(self) -> str:\n        final_price = self.calculate_final_price()\n        return f\"PURCHASE RECEIPT\\n\\nTitle: {self.title}\\nAuthor: {self.author}\\nISBN: {self.isbn}\\nFormat: {self.format}\\nOriginal Price: ${self.price}\\nDiscount: {self.discount_rate * 100}%\\nFinal Price: ${final_price:.2f}\\nThank you for your purchase!\"\n    \n    def log_sales_transaction(self, customer_email: str):\n        log_details = f\"Sale completed - Book: {self.isbn}, Customer: {customer_email}, Price: ${self.calculate_final_price()}\"\n        self.db_service.log_transaction(\"SALE_COMPLETED\", log_details)\n    \n    def send_milestone_notification(self):\n        subject = f\"Sales Milestone Reached: {self.title}\"\n        body = f\"Congratulations! '{self.title}' has reached {self.total_sales} sales!\"\n        self.email_service.send_email(\"sales@bookstore.com\", subject, body)\n    \n    def calculate_final_price(self) -> float:\n        return self.price * (1.0 - self.discount_rate)\n    \n    def calculate_author_royalty(self) -> float:\n        base_rate = 0.10\n        if self.total_sales > 5000:\n            base_rate = 0.18\n        elif self.total_sales > 1000:\n            base_rate = 0.15\n        return self.total_sales * self.calculate_final_price() * base_rate\n    \n    def generate_comprehensive_report(self) -> str:\n        revenue = self.total_sales * self.calculate_final_price()\n        royalty = self.calculate_author_royalty()\n        return f\"=== COMPREHENSIVE BOOK REPORT ===\\nTitle: {self.title}\\nAuthor: {self.author}\\nISBN: {self.isbn}\\nGenre: {self.genre}\\nFormat: {self.format}\\nTotal Sales: {self.total_sales}\\nRevenue: ${revenue:.2f}\\nAuthor Royalty: ${royalty:.2f}\\nAverage Rating: {self.average_rating:.2f}\\nReviews: {len(self.reviews)}\\nAvailable: {self.is_available}\"\n    \n    def print_detailed_report(self):\n        report = self.generate_comprehensive_report()\n        print(report)\n        self.printer.print_report(report)\n    \n    def send_marketing_campaign(self):\n        if len(self.customer_emails) > 0:\n            campaign_email = self.create_marketing_email()\n            self.email_service.send_bulk_email(self.customer_emails, f\"New Release from {self.author}\", campaign_email)\n            self.log_marketing_activity()\n    \n    def create_marketing_email(self) -> str:\n        return f\"Dear Valued Reader,\\n\\nSince you enjoyed '{self.title}', you might like our new releases from {self.author}.\\nCheck out our latest collection with special discounts!\\n\\nHappy Reading!\"\n    \n    def log_marketing_activity(self):\n        self.db_service.log_transaction(\"MARKETING_SENT\", f\"Campaign sent for book: {self.isbn} to {len(self.customer_emails)} customers\")\n    \n    def export_to_multiple_formats(self):\n        json_data = f'{{\"title\":\"{self.title}\",\"author\":\"{self.author}\",\"isbn\":\"{self.isbn}\",\"sales\":{self.total_sales},\"rating\":{self.average_rating}}}'\n        self.file_storage.save_to_file(f\"{self.isbn}.json\", json_data)\n        \n        xml_data = f\"<book><title>{self.title}</title><author>{self.author}</author><isbn>{self.isbn}</isbn><sales>{self.total_sales}</sales></book>\"\n        self.file_storage.save_to_file(f\"{self.isbn}.xml\", xml_data)\n    \n    def initialize_book_defaults(self):\n        self.generate_unique_isbn()\n        self.calculate_dynamic_page_count()\n        self.genre = \"general\"\n        self.price = 19.99\n        self.publisher = \"Independent Press\"\n    \n    def apply_discount(self, discount_percentage: float):\n        if 0.0 <= discount_percentage <= 0.5:\n            self.discount_rate = discount_percentage\n            self.notify_customers_of_discount()\n    \n    def notify_customers_of_discount(self):\n        if len(self.customer_emails) > 0:\n            discount_email = f\"Special Offer: {self.discount_rate * 100}% off on '{self.title}'! Limited time only.\"\n            self.email_service.send_bulk_email(self.customer_emails, f\"Special Discount - {self.title}\", discount_email)\n    \n    def get_title(self) -> str:\n        return self.title\n    \n    def set_title(self, title: str):\n        self.title = title\n    \n    def get_author(self) -> str:\n        return self.author\n    \n    def set_content(self, content: str):\n        self.content = content\n        self.calculate_dynamic_page_count()\n    \n    def set_price(self, price: float):\n        if self.validate_price_range(price):\n            self.price = price\n    \n    def set_format(self, format_type: str):\n        self.format = format_type\n        self.calculate_dynamic_page_count()",
            "output": "from datetime import datetime\nimport random\nimport math\nfrom typing import List\nfrom abc import ABC, abstractmethod\n\nclass FileStorage:\n    def __init__(self, base_path: str):\n        self.base_path = base_path\n    \n    def save_to_file(self, filename: str, content: str):\n        print(f\"Saving content to file: {self.base_path}/{filename}\")\n    \n    def load_from_file(self, filename: str) -> str:\n        print(f\"Loading content from file: {self.base_path}/{filename}\")\n        return \"file content\"\n    \n    def delete_file(self, filename: str):\n        print(f\"Deleting file: {self.base_path}/{filename}\")\n\nclass EmailService:\n    def __init__(self, smtp_server: str):\n        self.smtp_server = smtp_server\n    \n    def send_email(self, recipient: str, subject: str, body: str):\n        print(f\"Sending email to: {recipient}\")\n        print(f\"Subject: {subject}\")\n    \n    def send_bulk_email(self, recipients: List[str], subject: str, body: str):\n        print(f\"Sending bulk email to {len(recipients)} recipients\")\n\nclass DatabaseService:\n    def __init__(self, connection_string: str):\n        self.connection_string = connection_string\n    \n    def save_book(self, book):\n        print(f\"Saving book to database: {book.get_title()}\")\n    \n    def update_sales_data(self, isbn: str, sales: int):\n        print(f\"Updating sales data for ISBN: {isbn}\")\n    \n    def log_transaction(self, transaction_type: str, details: str):\n        print(f\"[DB LOG] {transaction_type}: {details}\")\n\nclass PrinterService:\n    def __init__(self, printer_name: str):\n        self.printer_name = printer_name\n    \n    def print_document(self, document: str):\n        print(f\"Printing on {self.printer_name}: {document[:min(50, len(document))]}...\")\n    \n    def print_report(self, report: str):\n        print(f\"Printing report on {self.printer_name}\")\n\nclass ISBNGenerationService:\n    def generate_unique_isbn(self, genre: str) -> str:\n        timestamp = int(datetime.now().timestamp() * 1000)\n        category = \"FIC\" if genre and genre == \"fiction\" else \"NF\"\n        return f\"978-{category}-{timestamp % 100000}-{random.randint(0, 99):02d}\"\n\nclass PageCalculationService:\n    def calculate_dynamic_page_count(self, content: str, format_type: str) -> int:\n        if content:\n            base_pages = len(content) // 250\n            format_multiplier = 1.2 if format_type and format_type == \"hardcover\" else 1.0\n            return max(1, int(base_pages * format_multiplier))\n        return 1\n\nclass ValidationService:\n    def validate_complete_book_data(self, title: str, author: str, isbn: str, price: float, content: str) -> bool:\n        return (title and title.strip() and \n                author and author.strip() and \n                self.validate_isbn_format(isbn) and \n                self.validate_price_range(price) and \n                content and len(content) > 0)\n    \n    def validate_isbn_format(self, isbn: str) -> bool:\n        if not isbn:\n            return False\n        clean = ''.join(c for c in isbn if c.isdigit() or c == 'X')\n        return len(clean) == 10 or len(clean) == 13\n    \n    def validate_price_range(self, price: float) -> bool:\n        return 0.99 <= price <= 999.99\n    \n    def validate_rating(self, rating: float) -> bool:\n        return 1.0 <= rating <= 5.0\n    \n    def validate_discount_rate(self, discount_percentage: float) -> bool:\n        return 0.0 <= discount_percentage <= 0.5\n\nclass ReviewManagementService:\n    def __init__(self):\n        self.email_service = EmailService(\"smtp.bookstore.com\")\n        self.db_service = DatabaseService(\"jdbc:mysql://localhost:3306/bookstore\")\n        self.email_content_service = EmailContentService()\n    \n    def process_customer_review(self, book, customer_email: str, review: str, rating: float):\n        validator = ValidationService()\n        if validator.validate_rating(rating):\n            book.get_reviews().append(review)\n            book.get_customer_emails().append(customer_email)\n            book.set_average_rating(self._recalculate_rating_metrics(book.get_average_rating(), len(book.get_reviews()), rating))\n            self._send_review_confirmation_email(book, customer_email)\n            self._log_review_activity(book.get_isbn(), customer_email, rating)\n    \n    def _recalculate_rating_metrics(self, current_average: float, review_count: int, new_rating: float) -> float:\n        return new_rating if review_count == 1 else (current_average * (review_count - 1) + new_rating) / review_count\n    \n    def _send_review_confirmation_email(self, book, customer_email: str):\n        subject = f\"Thank you for reviewing: {book.get_title()}\"\n        body = self.email_content_service.create_review_thank_you_email(book.get_title(), book.get_author())\n        self.email_service.send_email(customer_email, subject, body)\n    \n    def _log_review_activity(self, isbn: str, customer_email: str, rating: float):\n        log_details = f\"Review added - Book: {isbn}, Customer: {customer_email}, Rating: {rating}\"\n        self.db_service.log_transaction(\"REVIEW_ADDED\", log_details)\n\nclass SalesManagementService:\n    def __init__(self):\n        self.db_service = DatabaseService(\"jdbc:mysql://localhost:3306/bookstore\")\n        self.email_service = EmailService(\"smtp.bookstore.com\")\n        self.email_content_service = EmailContentService()\n        self.inventory_service = InventoryManagementService()\n    \n    def process_sale_transaction(self, book, customer_email: str):\n        book.set_total_sales(book.get_total_sales() + 1)\n        book.get_customer_emails().append(customer_email)\n        \n        self.inventory_service.update_inventory_status(book)\n        \n        self.db_service.update_sales_data(book.get_isbn(), book.get_total_sales())\n        \n        receipt_email = self.email_content_service.generate_sales_receipt_email(book)\n        self.email_service.send_email(customer_email, f\"Purchase Confirmation - {book.get_title()}\", receipt_email)\n        \n        self._log_sales_transaction(book, customer_email)\n        \n        if book.get_total_sales() % 100 == 0:\n            self._send_milestone_notification(book)\n    \n    def _log_sales_transaction(self, book, customer_email: str):\n        pricing_service = PricingService()\n        final_price = pricing_service.calculate_final_price(book.get_price(), book.get_discount_rate())\n        log_details = f\"Sale completed - Book: {book.get_isbn()}, Customer: {customer_email}, Price: ${final_price}\"\n        self.db_service.log_transaction(\"SALE_COMPLETED\", log_details)\n    \n    def _send_milestone_notification(self, book):\n        subject = f\"Sales Milestone Reached: {book.get_title()}\"\n        body = f\"Congratulations! '{book.get_title()}' has reached {book.get_total_sales()} sales!\"\n        self.email_service.send_email(\"sales@bookstore.com\", subject, body)\n\nclass PricingService:\n    def calculate_final_price(self, price: float, discount_rate: float) -> float:\n        return price * (1.0 - discount_rate)\n    \n    def calculate_author_royalty(self, total_sales: int, final_price: float) -> float:\n        base_rate = 0.10\n        if total_sales > 5000:\n            base_rate = 0.18\n        elif total_sales > 1000:\n            base_rate = 0.15\n        return total_sales * final_price * base_rate\n\nclass InventoryManagementService:\n    def update_inventory_status(self, book):\n        if book.get_total_sales() > 1000:\n            book.set_available(random.random() > 0.1)\n\nclass EmailContentService:\n    def create_review_thank_you_email(self, title: str, author: str) -> str:\n        return f\"Dear Reader,\\n\\nThank you for reviewing '{title}' by {author}.\\nYour feedback helps other readers discover great books!\\n\\nBest regards,\\nBookstore Team\"\n    \n    def generate_sales_receipt_email(self, book) -> str:\n        pricing_service = PricingService()\n        final_price = pricing_service.calculate_final_price(book.get_price(), book.get_discount_rate())\n        return f\"PURCHASE RECEIPT\\n\\nTitle: {book.get_title()}\\nAuthor: {book.get_author()}\\nISBN: {book.get_isbn()}\\nFormat: {book.get_format()}\\nOriginal Price: ${book.get_price()}\\nDiscount: {book.get_discount_rate() * 100}%\\nFinal Price: ${final_price:.2f}\\nThank you for your purchase!\"\n    \n    def create_marketing_email(self, title: str, author: str) -> str:\n        return f\"Dear Valued Reader,\\n\\nSince you enjoyed '{title}', you might like our new releases from {author}.\\nCheck out our latest collection with special discounts!\\n\\nHappy Reading!\"\n    \n    def create_discount_notification_email(self, title: str, discount_rate: float) -> str:\n        return f\"Special Offer: {discount_rate * 100}% off on '{title}'! Limited time only.\"\n\nclass DataFormattingService:\n    def format_complete_book_data(self, book) -> str:\n        pricing_service = PricingService()\n        final_price = pricing_service.calculate_final_price(book.get_price(), book.get_discount_rate())\n        return f\"TITLE: {book.get_title()}\\nAUTHOR: {book.get_author()}\\nISBN: {book.get_isbn()}\\nGENRE: {book.get_genre()}\\nPAGES: {book.get_page_count()}\\nPRICE: ${final_price}\\nFORMAT: {book.get_format()}\\nPUBLISHER: {book.get_publisher()}\\nRATING: {book.get_average_rating()}\\nSALES: {book.get_total_sales()}\\nAVAILABLE: {book.is_available()}\\nCONTENT: {book.get_content()}\"\n    \n    def format_as_json(self, book) -> str:\n        return f'{{\"title\":\"{book.get_title()}\",\"author\":\"{book.get_author()}\",\"isbn\":\"{book.get_isbn()}\",\"sales\":{book.get_total_sales()},\"rating\":{book.get_average_rating()}}}'\n    \n    def format_as_xml(self, book) -> str:\n        return f\"<book><title>{book.get_title()}</title><author>{book.get_author()}</author><isbn>{book.get_isbn()}</isbn><sales>{book.get_total_sales()}</sales></book>\"\n\nclass ReportGenerationService:\n    def __init__(self):\n        self.pricing_service = PricingService()\n    \n    def generate_comprehensive_report(self, book) -> str:\n        final_price = self.pricing_service.calculate_final_price(book.get_price(), book.get_discount_rate())\n        revenue = book.get_total_sales() * final_price\n        royalty = self.pricing_service.calculate_author_royalty(book.get_total_sales(), final_price)\n        \n        return f\"=== COMPREHENSIVE BOOK REPORT ===\\nTitle: {book.get_title()}\\nAuthor: {book.get_author()}\\nISBN: {book.get_isbn()}\\nGenre: {book.get_genre()}\\nFormat: {book.get_format()}\\nTotal Sales: {book.get_total_sales()}\\nRevenue: ${revenue:.2f}\\nAuthor Royalty: ${royalty:.2f}\\nAverage Rating: {book.get_average_rating():.2f}\\nReviews: {len(book.get_reviews())}\\nAvailable: {book.is_available()}\"\n\nclass BookPrintingService:\n    def __init__(self):\n        self.printer = PrinterService(\"BookStore_Printer_001\")\n        self.report_service = ReportGenerationService()\n    \n    def print_book(self, book):\n        print(f\"Title: {book.get_title()}\\nAuthor: {book.get_author()}\\nContent: {book.get_content()}\")\n    \n    def print_detailed_report(self, book):\n        report = self.report_service.generate_comprehensive_report(book)\n        print(report)\n        self.printer.print_report(report)\n\nclass MarketingService:\n    def __init__(self):\n        self.email_service = EmailService(\"smtp.bookstore.com\")\n        self.email_content_service = EmailContentService()\n        self.db_service = DatabaseService(\"jdbc:mysql://localhost:3306/bookstore\")\n    \n    def send_marketing_campaign(self, book):\n        if len(book.get_customer_emails()) > 0:\n            campaign_email = self.email_content_service.create_marketing_email(book.get_title(), book.get_author())\n            self.email_service.send_bulk_email(book.get_customer_emails(), f\"New Release from {book.get_author()}\", campaign_email)\n            self._log_marketing_activity(book)\n    \n    def notify_customers_of_discount(self, book):\n        if len(book.get_customer_emails()) > 0:\n            discount_email = self.email_content_service.create_discount_notification_email(book.get_title(), book.get_discount_rate())\n            self.email_service.send_bulk_email(book.get_customer_emails(), f\"Special Discount - {book.get_title()}\", discount_email)\n    \n    def _log_marketing_activity(self, book):\n        self.db_service.log_transaction(\"MARKETING_SENT\", f\"Campaign sent for book: {book.get_isbn()} to {len(book.get_customer_emails())} customers\")\n\nclass FileExportService:\n    def __init__(self):\n        self.file_storage = FileStorage(\"/books/storage\")\n        self.formatter = DataFormattingService()\n        self.db_service = DatabaseService(\"jdbc:mysql://localhost:3306/bookstore\")\n    \n    def save_to_file(self, book, filename: str):\n        book_data = self.formatter.format_complete_book_data(book)\n        self.file_storage.save_to_file(filename, book_data)\n        self.db_service.save_book(book)\n    \n    def export_to_multiple_formats(self, book):\n        json_data = self.formatter.format_as_json(book)\n        self.file_storage.save_to_file(f\"{book.get_isbn()}.json\", json_data)\n        \n        xml_data = self.formatter.format_as_xml(book)\n        self.file_storage.save_to_file(f\"{book.get_isbn()}.xml\", xml_data)\n\nclass DiscountManagementService:\n    def __init__(self):\n        self.validator = ValidationService()\n        self.marketing_service = MarketingService()\n    \n    def apply_discount(self, book, discount_percentage: float):\n        if self.validator.validate_discount_rate(discount_percentage):\n            book.set_discount_rate(discount_percentage)\n            self.marketing_service.notify_customers_of_discount(book)\n\nclass Book:\n    def __init__(self, title: str, author: str, content: str):\n        self._title = title\n        self._author = author\n        self._content = content\n        self._publish_date = datetime.now()\n        self._reviews = []\n        self._customer_emails = []\n        self._average_rating = 0.0\n        self._total_sales = 0\n        self._is_available = True\n        self._format = \"paperback\"\n        self._discount_rate = 0.0\n        \n        self._initialize_book_defaults()\n    \n    def _initialize_book_defaults(self):\n        isbn_service = ISBNGenerationService()\n        self._isbn = isbn_service.generate_unique_isbn(getattr(self, '_genre', None))\n        \n        page_service = PageCalculationService()\n        self._page_count = page_service.calculate_dynamic_page_count(self._content, self._format)\n        \n        self._genre = \"general\"\n        self._price = 19.99\n        self._publisher = \"Independent Press\"\n    \n    # Getters and Setters\n    def get_title(self) -> str:\n        return self._title\n    \n    def set_title(self, title: str):\n        self._title = title\n    \n    def get_author(self) -> str:\n        return self._author\n    \n    def get_content(self) -> str:\n        return self._content\n    \n    def set_content(self, content: str):\n        self._content = content\n        page_service = PageCalculationService()\n        self._page_count = page_service.calculate_dynamic_page_count(content, self._format)\n    \n    def get_isbn(self) -> str:\n        return self._isbn\n    \n    def get_publish_date(self) -> datetime:\n        return self._publish_date\n    \n    def get_genre(self) -> str:\n        return self._genre\n    \n    def set_genre(self, genre: str):\n        self._genre = genre\n    \n    def get_page_count(self) -> int:\n        return self._page_count\n    \n    def get_price(self) -> float:\n        return self._price\n    \n    def set_price(self, price: float):\n        validator = ValidationService()\n        if validator.validate_price_range(price):\n            self._price = price\n    \n    def get_publisher(self) -> str:\n        return self._publisher\n    \n    def set_publisher(self, publisher: str):\n        self._publisher = publisher\n    \n    def get_reviews(self) -> List[str]:\n        return self._reviews\n    \n    def get_average_rating(self) -> float:\n        return self._average_rating\n    \n    def set_average_rating(self, average_rating: float):\n        self._average_rating = average_rating\n    \n    def get_total_sales(self) -> int:\n        return self._total_sales\n    \n    def set_total_sales(self, total_sales: int):\n        self._total_sales = total_sales\n    \n    def get_customer_emails(self) -> List[str]:\n        return self._customer_emails\n    \n    def is_available(self) -> bool:\n        return self._is_available\n    \n    def set_available(self, available: bool):\n        self._is_available = available\n    \n    def get_format(self) -> str:\n        return self._format\n    \n    def set_format(self, format_type: str):\n        self._format = format_type\n        page_service = PageCalculationService()\n        self._page_count = page_service.calculate_dynamic_page_count(self._content, format_type)\n    \n    def get_discount_rate(self) -> float:\n        return self._discount_rate\n    \n    def set_discount_rate(self, discount_rate: float):\n        self._discount_rate = discount_rate",
            "level": "HARD",
            "language": "PYTHON",
            "violation": "SRP",
            "description": "Book printing file saving"
        },
        {
            "input": "class InventoryDatabase:\n    def __init__(self, connection_string):\n        self.connection_string = connection_string\n    \n    def update_stock(self, product_id, quantity):\n        print(f\"Updating stock in database - Product: {product_id}, Quantity: {quantity}\")\n    \n    def save_product(self, product):\n        print(f\"Saving product to database: {product.get_name()}\")\n    \n    def log_transaction(self, transaction_type, details):\n        print(f\"[DB LOG] {transaction_type}: {details}\")\n\n\nclass EmailService:\n    def __init__(self, smtp_server):\n        self.smtp_server = smtp_server\n    \n    def send_email(self, recipient, subject, body):\n        print(f\"Sending email to: {recipient}, Subject: {subject}\")\n    \n    def send_bulk_email(self, recipients, subject, body):\n        print(f\"Sending bulk email to {len(recipients)} recipients\")\n\n\nclass PaymentProcessor:\n    def __init__(self, api_key):\n        self.api_key = api_key\n    \n    def process_payment(self, amount, card_number):\n        print(f\"Processing payment of ${amount}\")\n        import random\n        return random.random() > 0.1\n    \n    def refund_payment(self, transaction_id, amount):\n        print(f\"Processing refund: ${amount} for transaction: {transaction_id}\")\n\n\nclass ShippingService:\n    def __init__(self, carrier):\n        self.carrier = carrier\n    \n    def create_shipment(self, address, weight):\n        import time\n        tracking_number = f\"TRK{int(time.time() * 1000) % 100000}\"\n        print(f\"Creating shipment via {self.carrier} - Tracking: {tracking_number}\")\n        return tracking_number\n    \n    def calculate_shipping_rate(self, destination, weight):\n        return weight * 5.0 if destination.lower() == \"international\" else weight * 2.0\n\n\nclass AnalyticsService:\n    def __init__(self, analytics_key):\n        self.analytics_key = analytics_key\n    \n    def track_event(self, event_type, product_id, data):\n        print(f\"[ANALYTICS] {event_type} for product: {product_id}\")\n    \n    def generate_report(self, report_type, product_id):\n        print(f\"Generating {report_type} report for product: {product_id}\")\n\n\nclass Product:\n    def __init__(self, name, price):\n        self.name = name\n        self.price = price\n        self.product_id = self.generate_advanced_product_id()\n        self.category = None\n        self.stock_quantity = 100\n        self.weight = 1.0\n        self.description = None\n        self.customer_reviews = []\n        self.average_rating = 0.0\n        self.total_sales = 0\n        self.cost_price = price * 0.6\n        self.customer_emails = []\n        self.is_active = True\n        self.supplier = None\n        self.discount_rate = 0.0\n        self.sales_by_region = {}\n        \n        self.database = InventoryDatabase(\"jdbc:mysql://localhost:3306/inventory\")\n        self.email_service = EmailService(\"smtp.ecommerce.com\")\n        self.payment_processor = PaymentProcessor(\"pay_api_key_123\")\n        self.shipping_service = ShippingService(\"FedEx\")\n        self.analytics = AnalyticsService(\"analytics_key_456\")\n        \n        self.initialize_advanced_defaults()\n    \n    def apply_discount(self, percentage):\n        return self.price * (1 - percentage / 100)\n    \n    def display_product(self):\n        print(f\"Product: {self.name}, Price: ${self.price}\")\n    \n    def generate_advanced_product_id(self):\n        category_prefix = self.category[:min(3, len(self.category))].upper() if self.category else \"GEN\"\n        import time\n        timestamp = str(int(time.time() * 1000) % 100000)\n        checksum = str(abs(hash(self.name) % 100))\n        return f\"{category_prefix}-{timestamp}-{checksum}\"\n    \n    def calculate_dynamic_pricing(self):\n        demand_multiplier = 1.2 if self.total_sales > 1000 else (1.1 if self.total_sales > 500 else 1.0)\n        stock_multiplier = 1.15 if self.stock_quantity < 10 else 1.0\n        \n        import datetime\n        seasonal_multiplier = 1.25 if datetime.datetime.now().month == 12 else 1.0\n        \n        return self.price * demand_multiplier * stock_multiplier * seasonal_multiplier * (1 - self.discount_rate)\n    \n    def calculate_complex_profit_margin(self):\n        selling_price = self.calculate_dynamic_pricing()\n        shipping_cost = self.shipping_service.calculate_shipping_rate(\"domestic\", self.weight)\n        total_cost = self.cost_price + shipping_cost + (selling_price * 0.03)\n        return ((selling_price - total_cost) / selling_price) * 100\n    \n    def calculate_tiered_discount(self, quantity):\n        if quantity >= 100:\n            return 0.20\n        elif quantity >= 50:\n            return 0.15\n        elif quantity >= 10:\n            return 0.10\n        elif quantity >= 5:\n            return 0.05\n        return 0.0\n    \n    def validate_product_compliance(self):\n        has_valid_name = self.name is not None and 3 <= len(self.name) <= 100\n        has_valid_price = 0 < self.price <= 10000\n        has_valid_weight = 0 < self.weight <= 50\n        has_valid_stock = self.stock_quantity >= 0\n        return has_valid_name and has_valid_price and has_valid_weight and has_valid_stock\n    \n    def process_advanced_review(self, customer_email, review, rating, region):\n        if 1.0 <= rating <= 5.0 and len(review) >= 10:\n            self.customer_reviews.append(review)\n            self.customer_emails.append(customer_email)\n            self.recalculate_advanced_rating(rating)\n            \n            thank_you_email = self.create_review_thank_you_email(customer_email, rating)\n            self.email_service.send_email(customer_email, \"Thank you for your review!\", thank_you_email)\n            \n            analytics_data = {\n                \"rating\": str(rating),\n                \"region\": region\n            }\n            self.analytics.track_event(\"REVIEW_ADDED\", self.product_id, analytics_data)\n            \n            self.database.log_transaction(\"REVIEW_PROCESSED\", f\"Product: {self.product_id}, Rating: {rating}, Region: {region}\")\n    \n    def recalculate_advanced_rating(self, new_rating):\n        if len(self.customer_reviews) == 1:\n            self.average_rating = new_rating\n        else:\n            weighted_total = self.average_rating * (len(self.customer_reviews) - 1) + new_rating\n            self.average_rating = weighted_total / len(self.customer_reviews)\n        \n        if self.average_rating >= 4.5 and len(self.customer_reviews) >= 10:\n            self.trigger_best_seller_promotion()\n    \n    def create_review_thank_you_email(self, customer_email, rating):\n        email_content = f\"Dear Valued Customer,\\n\\n\"\n        email_content += f\"Thank you for your {rating}-star review of {self.name}!\\n\"\n        email_content += \"Your feedback helps other customers make informed decisions.\\n\\n\"\n        if rating >= 4.0:\n            email_content += \"As a token of appreciation, here's a 10% discount code: REVIEW10\\n\\n\"\n        email_content += \"Best regards,\\nCustomer Service Team\"\n        return email_content\n    \n    def trigger_best_seller_promotion(self):\n        promo_email = f\"BESTSELLER ALERT: {self.name} is now a top-rated product with {self.average_rating} stars!\"\n        self.email_service.send_bulk_email(self.customer_emails, \"Special Offer on Bestseller\", promo_email)\n        self.analytics.track_event(\"BESTSELLER_PROMOTION\", self.product_id, {})\n    \n    def process_complex_sale(self, quantity, customer_email, shipping_address, region, card_number):\n        if self.stock_quantity < quantity:\n            return \"FAILED: Insufficient stock\"\n        \n        unit_price = self.calculate_dynamic_pricing()\n        discount = self.calculate_tiered_discount(quantity)\n        subtotal = unit_price * quantity * (1 - discount)\n        shipping_cost = self.shipping_service.calculate_shipping_rate(region, self.weight * quantity)\n        total_amount = subtotal + shipping_cost\n        \n        if not self.payment_processor.process_payment(total_amount, card_number):\n            return \"FAILED: Payment declined\"\n        \n        self.stock_quantity -= quantity\n        self.total_sales += quantity\n        self.sales_by_region[region] = self.sales_by_region.get(region, 0) + quantity\n        \n        tracking_number = self.shipping_service.create_shipment(shipping_address, self.weight * quantity)\n        \n        self.database.update_stock(self.product_id, self.stock_quantity)\n        \n        receipt_email = self.generate_advanced_receipt(quantity, unit_price, discount, shipping_cost, total_amount, tracking_number)\n        self.email_service.send_email(customer_email, f\"Order Confirmation - {self.name}\", receipt_email)\n        \n        self.check_advanced_stock_alerts()\n        \n        sale_data = {\n            \"quantity\": str(quantity),\n            \"amount\": str(total_amount),\n            \"region\": region\n        }\n        self.analytics.track_event(\"SALE_COMPLETED\", self.product_id, sale_data)\n        \n        self.database.log_transaction(\"COMPLEX_SALE\", f\"Product: {self.product_id}, Qty: {quantity}, Amount: ${total_amount}, Region: {region}\")\n        \n        return f\"SUCCESS: Order placed - Tracking: {tracking_number}\"\n    \n    def generate_advanced_receipt(self, quantity, unit_price, discount, shipping, total, tracking):\n        return f\"\"\"ORDER RECEIPT\nProduct: {self.name} ({self.product_id})\nQuantity: {quantity}\nUnit Price: ${unit_price:.2f}\nDiscount: {discount * 100:.0f}%\nShipping: ${shipping:.2f}\nTotal: ${total:.2f}\nTracking: {tracking}\nThank you for your order!\"\"\"\n    \n    def check_advanced_stock_alerts(self):\n        if self.stock_quantity <= 5:\n            urgent_alert = f\"URGENT: Product {self.name} ({self.product_id}) critically low - Only {self.stock_quantity} units left!\"\n            self.email_service.send_email(\"urgent@company.com\", \"Critical Stock Alert\", urgent_alert)\n            self.analytics.track_event(\"CRITICAL_STOCK_ALERT\", self.product_id, {})\n        elif self.stock_quantity <= 20:\n            alert = f\"LOW STOCK: Product {self.name} has {self.stock_quantity} units remaining.\"\n            self.email_service.send_email(\"inventory@company.com\", \"Low Stock Alert\", alert)\n    \n    def execute_smart_restock(self, supplier_email):\n        recommended_stock = self.calculate_optimal_stock_level()\n        restock_quantity = recommended_stock - self.stock_quantity\n        \n        if restock_quantity > 0:\n            self.stock_quantity += restock_quantity\n            self.database.update_stock(self.product_id, self.stock_quantity)\n            \n            restock_email = self.generate_smart_restock_email(restock_quantity, recommended_stock)\n            self.email_service.send_email(supplier_email, f\"Smart Restock Completed - {self.name}\", restock_email)\n            \n            self.analytics.track_event(\"SMART_RESTOCK\", self.product_id, {\"quantity\": str(restock_quantity)})\n            self.database.log_transaction(\"SMART_RESTOCK\", f\"Product: {self.product_id}, Added: {restock_quantity}, Target: {recommended_stock}\")\n    \n    def calculate_optimal_stock_level(self):\n        import datetime\n        current_month = datetime.datetime.now().month\n        average_monthly_sales = self.total_sales // max(1, current_month)\n        seasonal_factor = 2 if current_month == 12 else 1\n        return average_monthly_sales * 2 * seasonal_factor\n    \n    def generate_smart_restock_email(self, quantity, target_level):\n        import datetime\n        day_of_year = datetime.datetime.now().timetuple().tm_yday\n        sales_velocity = self.total_sales / max(1, day_of_year)\n        \n        return f\"\"\"SMART RESTOCK REPORT\nProduct: {self.name} ({self.product_id})\nRestocked Quantity: {quantity}\nNew Stock Level: {self.stock_quantity}\nTarget Level: {target_level}\nSales Velocity: {sales_velocity} units/day\nRestock completed successfully.\"\"\"\n    \n    def generate_comprehensive_analytics(self):\n        total_revenue = self.total_sales * self.calculate_dynamic_pricing()\n        profit_margin = self.calculate_complex_profit_margin()\n        top_region = max(self.sales_by_region.items(), key=lambda x: x[1])[0] if self.sales_by_region else \"N/A\"\n        \n        return f\"\"\"COMPREHENSIVE ANALYTICS\nProduct: {self.name} ({self.product_id})\nTotal Sales: {self.total_sales} units\nRevenue: ${total_revenue:.2f}\nProfit Margin: {profit_margin:.2f}%\nAverage Rating: {self.average_rating:.2f} ({len(self.customer_reviews)} reviews)\nTop Region: {top_region}\nStock Level: {self.stock_quantity}\nCurrent Price: ${self.calculate_dynamic_pricing():.2f}\"\"\"\n    \n    def launch_marketing_campaign(self, campaign_type):\n        campaign_email = self.create_campaign_email(campaign_type)\n        self.email_service.send_bulk_email(self.customer_emails, f\"Special Campaign - {self.name}\", campaign_email)\n        \n        campaign_data = {\n            \"type\": campaign_type,\n            \"reach\": str(len(self.customer_emails))\n        }\n        self.analytics.track_event(\"MARKETING_CAMPAIGN\", self.product_id, campaign_data)\n        \n        self.database.log_transaction(\"CAMPAIGN_LAUNCHED\", f\"Product: {self.product_id}, Type: {campaign_type}, Reach: {len(self.customer_emails)}\")\n    \n    def create_campaign_email(self, campaign_type):\n        if campaign_type == \"SEASONAL\":\n            return f\"Don't miss our seasonal special on {self.name}! Limited time offer with up to 25% off!\"\n        elif campaign_type == \"CLEARANCE\":\n            return f\"CLEARANCE ALERT: {self.name} must go! Huge discounts available now!\"\n        else:\n            return f\"Special promotion on {self.name} - Check out our latest deals!\"\n    \n    def initialize_advanced_defaults(self):\n        self.category = \"Electronics\"\n        self.description = \"High-quality product\"\n        self.supplier = \"Global Supplier Inc\"\n        self.sales_by_region = {\n            \"North America\": 0,\n            \"Europe\": 0,\n            \"Asia\": 0\n        }\n        # Regenerate product ID now that category is set\n        self.product_id = self.generate_advanced_product_id()\n    \n    def get_name(self):\n        return self.name\n    \n    def get_price(self):\n        return self.price\n    \n    def set_price(self, price):\n        self.price = price\n        self.database.log_transaction(\"PRICE_UPDATE\", f\"Product: {self.product_id}, New price: ${price}\")\n    \n    def set_discount_rate(self, rate):\n        self.discount_rate = rate\n        self.analytics.track_event(\"DISCOUNT_APPLIED\", self.product_id, {\"rate\": str(rate)})\n",
            "output": "class InventoryDatabase:\n    def __init__(self, connection_string):\n        self.connection_string = connection_string\n    \n    def update_stock(self, product_id, quantity):\n        print(f\"Updating stock in database - Product: {product_id}, Quantity: {quantity}\")\n    \n    def save_product(self, product):\n        print(f\"Saving product to database: {product.get_name()}\")\n    \n    def log_transaction(self, transaction_type, details):\n        print(f\"[DB LOG] {transaction_type}: {details}\")\n\n\nclass EmailService:\n    def __init__(self, smtp_server):\n        self.smtp_server = smtp_server\n    \n    def send_email(self, recipient, subject, body):\n        print(f\"Sending email to: {recipient}, Subject: {subject}\")\n    \n    def send_bulk_email(self, recipients, subject, body):\n        print(f\"Sending bulk email to {len(recipients)} recipients\")\n\n\nclass PaymentProcessor:\n    def __init__(self, api_key):\n        self.api_key = api_key\n    \n    def process_payment(self, amount, card_number):\n        print(f\"Processing payment of ${amount}\")\n        import random\n        return random.random() > 0.1\n    \n    def refund_payment(self, transaction_id, amount):\n        print(f\"Processing refund: ${amount} for transaction: {transaction_id}\")\n\n\nclass ShippingService:\n    def __init__(self, carrier):\n        self.carrier = carrier\n    \n    def create_shipment(self, address, weight):\n        import time\n        tracking_number = f\"TRK{int(time.time() * 1000) % 100000}\"\n        print(f\"Creating shipment via {self.carrier} - Tracking: {tracking_number}\")\n        return tracking_number\n    \n    def calculate_shipping_rate(self, destination, weight):\n        return weight * 5.0 if destination.lower() == \"international\" else weight * 2.0\n\n\nclass AnalyticsService:\n    def __init__(self, analytics_key):\n        self.analytics_key = analytics_key\n    \n    def track_event(self, event_type, product_id, data):\n        print(f\"[ANALYTICS] {event_type} for product: {product_id}\")\n    \n    def generate_report(self, report_type, product_id):\n        print(f\"Generating {report_type} report for product: {product_id}\")\n\n\nclass ProductIdGenerationService:\n    def generate_advanced_product_id(self, name, category):\n        category_prefix = category[:min(3, len(category))].upper() if category else \"GEN\"\n        import time\n        timestamp = str(int(time.time() * 1000) % 100000)\n        checksum = str(abs(hash(name) % 100))\n        return f\"{category_prefix}-{timestamp}-{checksum}\"\n\n\nclass PricingCalculationService:\n    def __init__(self):\n        self.shipping_service = ShippingService(\"FedEx\")\n    \n    def apply_discount(self, price, percentage):\n        return price * (1 - percentage / 100)\n    \n    def calculate_dynamic_pricing(self, base_price, total_sales, stock_quantity, discount_rate):\n        demand_multiplier = 1.2 if total_sales > 1000 else (1.1 if total_sales > 500 else 1.0)\n        stock_multiplier = 1.15 if stock_quantity < 10 else 1.0\n        import datetime\n        seasonal_multiplier = 1.25 if datetime.datetime.now().month == 12 else 1.0\n        return base_price * demand_multiplier * stock_multiplier * seasonal_multiplier * (1 - discount_rate)\n    \n    def calculate_complex_profit_margin(self, base_price, total_sales, stock_quantity, discount_rate, cost_price, weight):\n        selling_price = self.calculate_dynamic_pricing(base_price, total_sales, stock_quantity, discount_rate)\n        shipping_cost = self.shipping_service.calculate_shipping_rate(\"domestic\", weight)\n        total_cost = cost_price + shipping_cost + (selling_price * 0.03)\n        return ((selling_price - total_cost) / selling_price) * 100\n    \n    def calculate_tiered_discount(self, quantity):\n        if quantity >= 100:\n            return 0.20\n        elif quantity >= 50:\n            return 0.15\n        elif quantity >= 10:\n            return 0.10\n        elif quantity >= 5:\n            return 0.05\n        return 0.0\n\n\nclass ValidationService:\n    def validate_product_compliance(self, name, price, weight, stock_quantity):\n        has_valid_name = name is not None and 3 <= len(name) <= 100\n        has_valid_price = 0 < price <= 10000\n        has_valid_weight = 0 < weight <= 50\n        has_valid_stock = stock_quantity >= 0\n        return has_valid_name and has_valid_price and has_valid_weight and has_valid_stock\n    \n    def validate_review(self, rating, review):\n        return 1.0 <= rating <= 5.0 and review is not None and len(review) >= 10\n\n\nclass ReviewManagementService:\n    def __init__(self):\n        self.email_service = EmailService(\"smtp.ecommerce.com\")\n        self.analytics = AnalyticsService(\"analytics_key_456\")\n        self.database = InventoryDatabase(\"jdbc:mysql://localhost:3306/inventory\")\n        self.email_content_service = EmailContentService()\n        self.validator = ValidationService()\n    \n    def process_advanced_review(self, product, customer_email, review, rating, region):\n        if self.validator.validate_review(rating, review):\n            product.get_customer_reviews().append(review)\n            product.get_customer_emails().append(customer_email)\n            product.set_average_rating(self._recalculate_advanced_rating(product.get_average_rating(), len(product.get_customer_reviews()), rating))\n            \n            thank_you_email = self.email_content_service.create_review_thank_you_email(product.get_name(), customer_email, rating)\n            self.email_service.send_email(customer_email, \"Thank you for your review!\", thank_you_email)\n            \n            analytics_data = {\n                \"rating\": str(rating),\n                \"region\": region\n            }\n            self.analytics.track_event(\"REVIEW_ADDED\", product.get_product_id(), analytics_data)\n            \n            self.database.log_transaction(\"REVIEW_PROCESSED\", f\"Product: {product.get_product_id()}, Rating: {rating}, Region: {region}\")\n            \n            if product.get_average_rating() >= 4.5 and len(product.get_customer_reviews()) >= 10:\n                self._trigger_best_seller_promotion(product)\n    \n    def _recalculate_advanced_rating(self, current_average, review_count, new_rating):\n        return new_rating if review_count == 1 else (current_average * (review_count - 1) + new_rating) / review_count\n    \n    def _trigger_best_seller_promotion(self, product):\n        promo_email = f\"BESTSELLER ALERT: {product.get_name()} is now a top-rated product with {product.get_average_rating()} stars!\"\n        self.email_service.send_bulk_email(product.get_customer_emails(), \"Special Offer on Bestseller\", promo_email)\n        self.analytics.track_event(\"BESTSELLER_PROMOTION\", product.get_product_id(), {})\n\n\nclass SalesProcessingService:\n    def __init__(self):\n        self.payment_processor = PaymentProcessor(\"pay_api_key_123\")\n        self.shipping_service = ShippingService(\"FedEx\")\n        self.database = InventoryDatabase(\"jdbc:mysql://localhost:3306/inventory\")\n        self.email_service = EmailService(\"smtp.ecommerce.com\")\n        self.analytics = AnalyticsService(\"analytics_key_456\")\n        self.pricing_service = PricingCalculationService()\n        self.email_content_service = EmailContentService()\n        self.stock_alert_service = StockAlertService()\n    \n    def process_complex_sale(self, product, quantity, customer_email, shipping_address, region, card_number):\n        if product.get_stock_quantity() < quantity:\n            return \"FAILED: Insufficient stock\"\n        \n        unit_price = self.pricing_service.calculate_dynamic_pricing(product.get_price(), product.get_total_sales(), product.get_stock_quantity(), product.get_discount_rate())\n        discount = self.pricing_service.calculate_tiered_discount(quantity)\n        subtotal = unit_price * quantity * (1 - discount)\n        shipping_cost = self.shipping_service.calculate_shipping_rate(region, product.get_weight() * quantity)\n        total_amount = subtotal + shipping_cost\n        \n        if not self.payment_processor.process_payment(total_amount, card_number):\n            return \"FAILED: Payment declined\"\n        \n        product.set_stock_quantity(product.get_stock_quantity() - quantity)\n        product.set_total_sales(product.get_total_sales() + quantity)\n        product.get_sales_by_region()[region] = product.get_sales_by_region().get(region, 0) + quantity\n        \n        tracking_number = self.shipping_service.create_shipment(shipping_address, product.get_weight() * quantity)\n        \n        self.database.update_stock(product.get_product_id(), product.get_stock_quantity())\n        \n        receipt_email = self.email_content_service.generate_advanced_receipt(product.get_name(), product.get_product_id(), quantity, unit_price, discount, shipping_cost, total_amount, tracking_number)\n        self.email_service.send_email(customer_email, f\"Order Confirmation - {product.get_name()}\", receipt_email)\n        \n        self.stock_alert_service.check_advanced_stock_alerts(product, self.email_service, self.analytics)\n        \n        sale_data = {\n            \"quantity\": str(quantity),\n            \"amount\": str(total_amount),\n            \"region\": region\n        }\n        self.analytics.track_event(\"SALE_COMPLETED\", product.get_product_id(), sale_data)\n        \n        self.database.log_transaction(\"COMPLEX_SALE\", f\"Product: {product.get_product_id()}, Qty: {quantity}, Amount: ${total_amount}, Region: {region}\")\n        \n        return f\"SUCCESS: Order placed - Tracking: {tracking_number}\"\n\n\nclass StockAlertService:\n    def check_advanced_stock_alerts(self, product, email_service, analytics):\n        if product.get_stock_quantity() <= 5:\n            urgent_alert = f\"URGENT: Product {product.get_name()} ({product.get_product_id()}) critically low - Only {product.get_stock_quantity()} units left!\"\n            email_service.send_email(\"urgent@company.com\", \"Critical Stock Alert\", urgent_alert)\n            analytics.track_event(\"CRITICAL_STOCK_ALERT\", product.get_product_id(), {})\n        elif product.get_stock_quantity() <= 20:\n            alert = f\"LOW STOCK: Product {product.get_name()} has {product.get_stock_quantity()} units remaining.\"\n            email_service.send_email(\"inventory@company.com\", \"Low Stock Alert\", alert)\n\n\nclass InventoryManagementService:\n    def __init__(self):\n        self.database = InventoryDatabase(\"jdbc:mysql://localhost:3306/inventory\")\n        self.email_service = EmailService(\"smtp.ecommerce.com\")\n        self.analytics = AnalyticsService(\"analytics_key_456\")\n        self.email_content_service = EmailContentService()\n    \n    def execute_smart_restock(self, product, supplier_email):\n        recommended_stock = self._calculate_optimal_stock_level(product.get_total_sales())\n        restock_quantity = recommended_stock - product.get_stock_quantity()\n        \n        if restock_quantity > 0:\n            product.set_stock_quantity(product.get_stock_quantity() + restock_quantity)\n            self.database.update_stock(product.get_product_id(), product.get_stock_quantity())\n            \n            restock_email = self.email_content_service.generate_smart_restock_email(product.get_name(), product.get_product_id(), restock_quantity, product.get_stock_quantity(), recommended_stock, product.get_total_sales())\n            self.email_service.send_email(supplier_email, f\"Smart Restock Completed - {product.get_name()}\", restock_email)\n            \n            self.analytics.track_event(\"SMART_RESTOCK\", product.get_product_id(), {\"quantity\": str(restock_quantity)})\n            self.database.log_transaction(\"SMART_RESTOCK\", f\"Product: {product.get_product_id()}, Added: {restock_quantity}, Target: {recommended_stock}\")\n    \n    def _calculate_optimal_stock_level(self, total_sales):\n        import datetime\n        current_month = datetime.datetime.now().month\n        average_monthly_sales = total_sales // max(1, current_month)\n        seasonal_factor = 2 if current_month == 12 else 1\n        return average_monthly_sales * 2 * seasonal_factor\n\n\nclass EmailContentService:\n    def create_review_thank_you_email(self, product_name, customer_email, rating):\n        email_content = f\"Dear Valued Customer,\\n\\n\"\n        email_content += f\"Thank you for your {rating}-star review of {product_name}!\\n\"\n        email_content += \"Your feedback helps other customers make informed decisions.\\n\\n\"\n        if rating >= 4.0:\n            email_content += \"As a token of appreciation, here's a 10% discount code: REVIEW10\\n\\n\"\n        email_content += \"Best regards,\\nCustomer Service Team\"\n        return email_content\n    \n    def generate_advanced_receipt(self, product_name, product_id, quantity, unit_price, discount, shipping, total, tracking):\n        return f\"\"\"ORDER RECEIPT\nProduct: {product_name} ({product_id})\nQuantity: {quantity}\nUnit Price: ${unit_price:.2f}\nDiscount: {discount * 100:.0f}%\nShipping: ${shipping:.2f}\nTotal: ${total:.2f}\nTracking: {tracking}\nThank you for your order!\"\"\"\n    \n    def generate_smart_restock_email(self, product_name, product_id, quantity, new_stock, target_level, total_sales):\n        import datetime\n        day_of_year = datetime.datetime.now().timetuple().tm_yday\n        sales_velocity = total_sales / max(1, day_of_year)\n        \n        return f\"\"\"SMART RESTOCK REPORT\nProduct: {product_name} ({product_id})\nRestocked Quantity: {quantity}\nNew Stock Level: {new_stock}\nTarget Level: {target_level}\nSales Velocity: {sales_velocity} units/day\nRestock completed successfully.\"\"\"\n    \n    def create_campaign_email(self, product_name, campaign_type):\n        if campaign_type == \"SEASONAL\":\n            return f\"Don't miss our seasonal special on {product_name}! Limited time offer with up to 25% off!\"\n        elif campaign_type == \"CLEARANCE\":\n            return f\"CLEARANCE ALERT: {product_name} must go! Huge discounts available now!\"\n        else:\n            return f\"Special promotion on {product_name} - Check out our latest deals!\"\n\n\nclass AnalyticsReportingService:\n    def __init__(self):\n        self.pricing_service = PricingCalculationService()\n    \n    def generate_comprehensive_analytics(self, product):\n        current_price = self.pricing_service.calculate_dynamic_pricing(product.get_price(), product.get_total_sales(), product.get_stock_quantity(), product.get_discount_rate())\n        total_revenue = product.get_total_sales() * current_price\n        profit_margin = self.pricing_service.calculate_complex_profit_margin(product.get_price(), product.get_total_sales(), product.get_stock_quantity(), product.get_discount_rate(), product.get_cost_price(), product.get_weight())\n        top_region = max(product.get_sales_by_region().items(), key=lambda x: x[1])[0] if product.get_sales_by_region() else \"N/A\"\n        \n        return f\"\"\"COMPREHENSIVE ANALYTICS\nProduct: {product.get_name()} ({product.get_product_id()})\nTotal Sales: {product.get_total_sales()} units\nRevenue: ${total_revenue:.2f}\nProfit Margin: {profit_margin:.2f}%\nAverage Rating: {product.get_average_rating():.2f} ({len(product.get_customer_reviews())} reviews)\nTop Region: {top_region}\nStock Level: {product.get_stock_quantity()}\nCurrent Price: ${current_price:.2f}\"\"\"\n\n\nclass MarketingCampaignService:\n    def __init__(self):\n        self.email_service = EmailService(\"smtp.ecommerce.com\")\n        self.analytics = AnalyticsService(\"analytics_key_456\")\n        self.database = InventoryDatabase(\"jdbc:mysql://localhost:3306/inventory\")\n        self.email_content_service = EmailContentService()\n    \n    def launch_marketing_campaign(self, product, campaign_type):\n        campaign_email = self.email_content_service.create_campaign_email(product.get_name(), campaign_type)\n        self.email_service.send_bulk_email(product.get_customer_emails(), f\"Special Campaign - {product.get_name()}\", campaign_email)\n        \n        campaign_data = {\n            \"type\": campaign_type,\n            \"reach\": str(len(product.get_customer_emails()))\n        }\n        self.analytics.track_event(\"MARKETING_CAMPAIGN\", product.get_product_id(), campaign_data)\n        \n        self.database.log_transaction(\"CAMPAIGN_LAUNCHED\", f\"Product: {product.get_product_id()}, Type: {campaign_type}, Reach: {len(product.get_customer_emails())}\")\n\n\nclass ProductDisplayService:\n    def display_product(self, product):\n        print(f\"Product: {product.get_name()}, Price: ${product.get_price()}\")\n\n\nclass DiscountManagementService:\n    def __init__(self):\n        self.analytics = AnalyticsService(\"analytics_key_456\")\n        self.database = InventoryDatabase(\"jdbc:mysql://localhost:3306/inventory\")\n    \n    def set_discount_rate(self, product, rate):\n        product.set_discount_rate(rate)\n        self.analytics.track_event(\"DISCOUNT_APPLIED\", product.get_product_id(), {\"rate\": str(rate)})\n    \n    def update_price(self, product, price):\n        product.set_price(price)\n        self.database.log_transaction(\"PRICE_UPDATE\", f\"Product: {product.get_product_id()}, New price: ${price}\")\n\n\nclass Product:\n    def __init__(self, name, price):\n        self.name = name\n        self.price = price\n        self.customer_reviews = []\n        self.customer_emails = []\n        self.sales_by_region = {}\n        self.average_rating = 0.0\n        self.total_sales = 0\n        self.stock_quantity = 100\n        self.cost_price = price * 0.6\n        self.is_active = True\n        self.discount_rate = 0.0\n        self.weight = 1.0\n        \n        self._initialize_advanced_defaults()\n    \n    def _initialize_advanced_defaults(self):\n        self.category = \"Electronics\"\n        self.description = \"High-quality product\"\n        self.supplier = \"Global Supplier Inc\"\n        self.sales_by_region = {\n            \"North America\": 0,\n            \"Europe\": 0,\n            \"Asia\": 0\n        }\n        \n        id_service = ProductIdGenerationService()\n        self.product_id = id_service.generate_advanced_product_id(self.name, self.category)\n    \n    # Getters and Setters\n    def get_name(self):\n        return self.name\n    \n    def get_price(self):\n        return self.price\n    \n    def set_price(self, price):\n        self.price = price\n    \n    def get_product_id(self):\n        return self.product_id\n    \n    def get_category(self):\n        return self.category\n    \n    def get_stock_quantity(self):\n        return self.stock_quantity\n    \n    def set_stock_quantity(self, stock_quantity):\n        self.stock_quantity = stock_quantity\n    \n    def get_weight(self):\n        return self.weight\n    \n    def get_description(self):\n        return self.description\n    \n    def get_customer_reviews(self):\n        return self.customer_reviews\n    \n    def get_average_rating(self):\n        return self.average_rating\n    \n    def set_average_rating(self, average_rating):\n        self.average_rating = average_rating\n    \n    def get_total_sales(self):\n        return self.total_sales\n    \n    def set_total_sales(self, total_sales):\n        self.total_sales = total_sales\n    \n    def get_cost_price(self):\n        return self.cost_price\n    \n    def get_customer_emails(self):\n        return self.customer_emails\n    \n    def is_active(self):\n        return self.is_active\n    \n    def get_supplier(self):\n        return self.supplier\n    \n    def get_discount_rate(self):\n        return self.discount_rate\n    \n    def set_discount_rate(self, discount_rate):\n        self.discount_rate = discount_rate\n    \n    def get_sales_by_region(self):\n        return self.sales_by_region",
            "level": "HARD",
            "language": "PYTHON",
            "violation": "SRP",
            "description": "Product discount display system"
        },
        {
            "input": "class User(val name: String, val email: String) {\n    \n    fun saveToDatabase() {\n        println(\"Saving user $name to database\")\n    }\n    \n    fun sendWelcomeEmail() {\n        println(\"Sending welcome email to $email\")\n    }\n}",
            "output": "data class User(val name: String, val email: String)\n\nclass UserRepository {\n    fun save(user: User) {\n        println(\"Saving user ${user.name} to database\")\n    }\n}\n\nclass EmailService {\n    fun sendWelcomeEmail(user: User) {\n        println(\"Sending welcome email to ${user.email}\")\n    }\n}",
            "level": "EASY",
            "language": "KOTLIN",
            "violation": "SRP",
            "description": "User database email operations"
        },
        {
            "input": "class Employee(private val name: String, private val baseSalary: Double, private val yearsOfService: Int) {\n    \n    fun calculateSalary(): Double {\n        return baseSalary + (yearsOfService * 1000)\n    }\n    \n    fun printPaySlip() {\n        println(\"Pay slip for $name: $${calculateSalary()}\")\n    }\n}",
            "output": "data class Employee(val name: String, val baseSalary: Double, val yearsOfService: Int)\n\nclass SalaryCalculator {\n    fun calculate(employee: Employee): Double {\n        return employee.baseSalary + (employee.yearsOfService * 1000)\n    }\n}\n\nclass PaySlipPrinter(private val calculator: SalaryCalculator) {\n    \n    fun print(employee: Employee) {\n        val salary = calculator.calculate(employee)\n        println(\"Pay slip for ${employee.name}: $$salary\")\n    }\n}",
            "level": "EASY",
            "language": "KOTLIN",
            "violation": "SRP",
            "description": "Employee salary payslip system"
        },
        {
            "input": "class Book(private val title: String, private val author: String, private val content: String) {\n    \n    fun printBook() {\n        println(\"Title: $title\")\n        println(\"Author: $author\")\n        println(\"Content: $content\")\n    }\n    \n    fun saveToFile(filename: String) {\n        println(\"Saving book to $filename\")\n    }\n}",
            "output": "class Book(private val title: String, private val author: String, private val content: String) {\n    \n    fun getTitle(): String = title\n    \n    fun getAuthor(): String = author\n    \n    fun getContent(): String = content\n}\n\nclass BookPrinter {\n    fun print(book: Book) {\n        println(\"Title: ${book.getTitle()}\")\n        println(\"Author: ${book.getAuthor()}\")\n        println(\"Content: ${book.getContent()}\")\n    }\n}\n\nclass BookFileSaver {\n    fun saveToFile(book: Book, filename: String) {\n        println(\"Saving book to $filename\")\n    }\n}",
            "level": "EASY",
            "language": "KOTLIN",
            "violation": "SRP",
            "description": "Book printing file saving"
        },
        {
            "input": "class Product(private val name: String, private val price: Double) {\n    \n    fun applyDiscount(percentage: Double): Double {\n        return price * (1 - percentage / 100)\n    }\n    \n    fun displayProduct() {\n        println(\"Product: $name, Price: $$price\")\n    }\n}",
            "output": "class Product(private val name: String, private val price: Double) {\n    \n    fun getName(): String = name\n    \n    fun getPrice(): Double = price\n}\n\nclass DiscountCalculator {\n    fun applyDiscount(product: Product, percentage: Double): Double {\n        return product.getPrice() * (1 - percentage / 100)\n    }\n}\n\nclass ProductDisplay {\n    fun display(product: Product) {\n        println(\"Product: ${product.getName()}, Price: $${product.getPrice()}\")\n    }\n}",
            "level": "EASY",
            "language": "KOTLIN",
            "violation": "SRP",
            "description": "Product discount display system"
        },
        {
            "input": "import java.util.*\n\nclass User(var name: String, var email: String) {\n    var password: String? = null\n    var isActive: Boolean = true\n    var role: String = \"USER\"\n    var lastLogin: Date? = null\n    var loginAttempts: Int = 0\n    \n    fun saveToDatabase() {\n        println(\"Saving user $name to database\")\n    }\n    \n    fun sendWelcomeEmail() {\n        println(\"Sending welcome email to $email\")\n    }\n    \n    fun validateEmail(email: String): Boolean {\n        if (email.isEmpty()) {\n            return false\n        }\n        return email.contains(\"@\") && email.contains(\".\")\n    }\n    \n    fun validatePassword(password: String): Boolean {\n        if (password.length < 8) {\n            return false\n        }\n        \n        val hasUpper = password.any { it.isUpperCase() }\n        val hasLower = password.any { it.isLowerCase() }\n        val hasDigit = password.any { it.isDigit() }\n        \n        return hasUpper && hasLower && hasDigit\n    }\n    \n    fun hashPassword(password: String): String {\n        var hash = 0\n        for (c in password) {\n            hash = hash * 31 + c.code\n        }\n        return kotlin.math.abs(hash).toString()\n    }\n    \n    fun authenticate(password: String): Boolean {\n        if (loginAttempts >= 5) {\n            println(\"Account locked due to too many failed attempts\")\n            return false\n        }\n        \n        if (this.password != null && this.password == hashPassword(password)) {\n            loginAttempts = 0\n            lastLogin = Date()\n            return true\n        }\n        \n        loginAttempts++\n        return false\n    }\n    \n    fun lockAccount() {\n        this.isActive = false\n        println(\"Account locked for user: $name\")\n    }\n    \n    fun unlockAccount() {\n        this.isActive = true\n        this.loginAttempts = 0\n        println(\"Account unlocked for user: $name\")\n    }\n    \n    fun setPassword(password: String) {\n        this.password = hashPassword(password)\n    }\n}",
            "output": "import java.util.*\n\nclass DatabaseService {\n    fun saveUser(user: User) {\n        println(\"Saving user ${user.name} to database\")\n    }\n}\n\nclass EmailService {\n    fun sendWelcomeEmail(email: String) {\n        println(\"Sending welcome email to $email\")\n    }\n}\n\nclass ValidationService {\n    fun validateEmail(email: String): Boolean {\n        if (email.isEmpty()) {\n            return false\n        }\n        return email.contains(\"@\") && email.contains(\".\")\n    }\n    \n    fun validatePassword(password: String): Boolean {\n        if (password.length < 8) {\n            return false\n        }\n        \n        val hasUpper = password.any { it.isUpperCase() }\n        val hasLower = password.any { it.isLowerCase() }\n        val hasDigit = password.any { it.isDigit() }\n        \n        return hasUpper && hasLower && hasDigit\n    }\n}\n\nclass PasswordService {\n    fun hashPassword(password: String): String {\n        var hash = 0\n        for (c in password) {\n            hash = hash * 31 + c.code\n        }\n        return kotlin.math.abs(hash).toString()\n    }\n}\n\nclass AuthenticationService {\n    private val passwordService = PasswordService()\n    \n    fun authenticate(user: User, password: String): Boolean {\n        if (user.loginAttempts >= 5) {\n            println(\"Account locked due to too many failed attempts\")\n            return false\n        }\n        \n        if (user.password != null && user.password == passwordService.hashPassword(password)) {\n            user.resetLoginAttempts()\n            user.updateLastLogin()\n            return true\n        }\n        \n        user.incrementLoginAttempts()\n        return false\n    }\n}\n\nclass AccountService {\n    fun lockAccount(user: User) {\n        user.isActive = false\n        println(\"Account locked for user: ${user.name}\")\n    }\n    \n    fun unlockAccount(user: User) {\n        user.isActive = true\n        user.resetLoginAttempts()\n        println(\"Account unlocked for user: ${user.name}\")\n    }\n}\n\nclass User(var name: String, var email: String) {\n    var password: String? = null\n    var isActive: Boolean = true\n    var role: String = \"USER\"\n    var lastLogin: Date? = null\n    var loginAttempts: Int = 0\n    private val passwordService = PasswordService()\n    \n    fun setPassword(password: String) {\n        this.password = passwordService.hashPassword(password)\n    }\n    \n    fun updateLastLogin() {\n        this.lastLogin = Date()\n    }\n    \n    fun incrementLoginAttempts() {\n        this.loginAttempts++\n    }\n    \n    fun resetLoginAttempts() {\n        this.loginAttempts = 0\n    }\n}",
            "level": "MODERATE",
            "language": "KOTLIN",
            "violation": "SRP",
            "description": "User database email operations"
        },
        {
            "input": "import java.util.*\n\nclass Employee(var name: String, var baseSalary: Double, var yearsOfService: Int) {\n    var department: String? = null\n    var position: String? = null\n    var employeeId: String = generateEmployeeId()\n    var hireDate: Date = Date()\n    var lastReviewDate: Date? = null\n    var performanceRating: Double = 3.0\n    var vacationDays: Int = 20\n    var usedVacationDays: Int = 0\n    var manager: String? = null\n    var email: String? = null\n    \n    fun calculateSalary(): Double {\n        return baseSalary + (yearsOfService * 1000)\n    }\n    \n    fun printPaySlip() {\n        println(\"Pay slip for $name: $${calculateSalary()}\")\n    }\n    \n    fun calculateBonus(): Double {\n        var baseBonus = baseSalary * 0.1\n        when {\n            performanceRating >= 4.0 -> baseBonus *= 1.5\n            performanceRating >= 3.5 -> baseBonus *= 1.2\n        }\n        return baseBonus\n    }\n    \n    fun calculateAnnualSalary(): Double {\n        return calculateSalary() * 12 + calculateBonus()\n    }\n    \n    fun processPayroll() {\n        val monthlySalary = calculateSalary()\n        val taxes = calculateTaxes(monthlySalary)\n        val netPay = monthlySalary - taxes\n        \n        println(\"Processing payroll for $name\")\n        println(\"Gross Pay: $$monthlySalary\")\n        println(\"Taxes: $$taxes\")\n        println(\"Net Pay: $$netPay\")\n    }\n    \n    fun calculateTaxes(salary: Double): Double {\n        return when {\n            salary <= 3000 -> salary * 0.15\n            salary <= 6000 -> salary * 0.20\n            else -> salary * 0.25\n        }\n    }\n    \n    fun requestVacation(days: Int): Boolean {\n        return if (usedVacationDays + days <= vacationDays) {\n            usedVacationDays += days\n            println(\"Vacation request approved for $name: $days days\")\n            notifyManager(\"Vacation request approved for $name\")\n            true\n        } else {\n            println(\"Vacation request denied for $name: insufficient days\")\n            false\n        }\n    }\n    \n    fun notifyManager(message: String) {\n        manager?.let {\n            println(\"Sending notification to manager $it: $message\")\n        }\n    }\n    \n    fun sendPayrollEmail() {\n        email?.let {\n            println(\"Sending payroll email to $it\")\n            println(\"Subject: Your monthly payslip\")\n            println(\"Body: Please find your payslip attached.\")\n        }\n    }\n    \n    fun conductPerformanceReview() {\n        println(\"Conducting performance review for $name\")\n        println(\"Current rating: $performanceRating\")\n        lastReviewDate = Date()\n        \n        when {\n            performanceRating >= 4.0 -> println(\"Excellent performance! Recommending for promotion.\")\n            performanceRating < 2.0 -> println(\"Performance improvement needed.\")\n        }\n    }\n    \n    fun updatePerformanceRating(rating: Double) {\n        if (rating in 1.0..5.0) {\n            performanceRating = rating\n            println(\"Performance rating updated to $rating for $name\")\n        } else {\n            println(\"Invalid rating. Must be between 1.0 and 5.0\")\n        }\n    }\n    \n    private fun generateEmployeeId(): String {\n        return \"EMP${System.currentTimeMillis() % 10000}\"\n    }\n    \n    fun printEmployeeReport() {\n        println(\"Employee Report for $name\")\n        println(\"ID: $employeeId\")\n        println(\"Department: $department\")\n        println(\"Position: $position\")\n        println(\"Hire Date: $hireDate\")\n        println(\"Years of Service: $yearsOfService\")\n        println(\"Base Salary: $$baseSalary\")\n        println(\"Performance Rating: $performanceRating\")\n        println(\"Vacation Days Remaining: ${vacationDays - usedVacationDays}\")\n    }\n}",
            "output": "import java.util.*\n\nclass SalaryCalculationService {\n    fun calculateSalary(baseSalary: Double, yearsOfService: Int): Double {\n        return baseSalary + (yearsOfService * 1000)\n    }\n    \n    fun calculateBonus(baseSalary: Double, performanceRating: Double): Double {\n        var baseBonus = baseSalary * 0.1\n        when {\n            performanceRating >= 4.0 -> baseBonus *= 1.5\n            performanceRating >= 3.5 -> baseBonus *= 1.2\n        }\n        return baseBonus\n    }\n    \n    fun calculateAnnualSalary(baseSalary: Double, yearsOfService: Int, performanceRating: Double): Double {\n        val monthlySalary = calculateSalary(baseSalary, yearsOfService)\n        val bonus = calculateBonus(baseSalary, performanceRating)\n        return monthlySalary * 12 + bonus\n    }\n}\n\nclass TaxCalculationService {\n    fun calculateTaxes(salary: Double): Double {\n        return when {\n            salary <= 3000 -> salary * 0.15\n            salary <= 6000 -> salary * 0.20\n            else -> salary * 0.25\n        }\n    }\n}\n\nclass PayrollService {\n    private val salaryService = SalaryCalculationService()\n    private val taxService = TaxCalculationService()\n    \n    fun processPayroll(employee: Employee) {\n        val monthlySalary = salaryService.calculateSalary(employee.baseSalary, employee.yearsOfService)\n        val taxes = taxService.calculateTaxes(monthlySalary)\n        val netPay = monthlySalary - taxes\n        \n        println(\"Processing payroll for ${employee.name}\")\n        println(\"Gross Pay: $$monthlySalary\")\n        println(\"Taxes: $$taxes\")\n        println(\"Net Pay: $$netPay\")\n    }\n    \n    fun printPaySlip(employee: Employee) {\n        val salary = salaryService.calculateSalary(employee.baseSalary, employee.yearsOfService)\n        println(\"Pay slip for ${employee.name}: $$salary\")\n    }\n}\n\nclass EmailService {\n    fun sendPayrollEmail(email: String?, employeeName: String) {\n        email?.let {\n            println(\"Sending payroll email to $it\")\n            println(\"Subject: Your monthly payslip\")\n            println(\"Body: Please find your payslip attached.\")\n        }\n    }\n    \n    fun notifyManager(manager: String?, message: String) {\n        manager?.let {\n            println(\"Sending notification to manager $it: $message\")\n        }\n    }\n}\n\nclass VacationService {\n    private val emailService = EmailService()\n    \n    fun requestVacation(employee: Employee, days: Int): Boolean {\n        return if (employee.usedVacationDays + days <= employee.vacationDays) {\n            employee.usedVacationDays += days\n            println(\"Vacation request approved for ${employee.name}: $days days\")\n            emailService.notifyManager(employee.manager, \"Vacation request approved for ${employee.name}\")\n            true\n        } else {\n            println(\"Vacation request denied for ${employee.name}: insufficient days\")\n            false\n        }\n    }\n}\n\nclass PerformanceService {\n    fun conductPerformanceReview(employee: Employee) {\n        println(\"Conducting performance review for ${employee.name}\")\n        println(\"Current rating: ${employee.performanceRating}\")\n        employee.lastReviewDate = Date()\n        \n        when {\n            employee.performanceRating >= 4.0 -> println(\"Excellent performance! Recommending for promotion.\")\n            employee.performanceRating < 2.0 -> println(\"Performance improvement needed.\")\n        }\n    }\n    \n    fun updatePerformanceRating(employee: Employee, rating: Double) {\n        if (rating in 1.0..5.0) {\n            employee.performanceRating = rating\n            println(\"Performance rating updated to $rating for ${employee.name}\")\n        } else {\n            println(\"Invalid rating. Must be between 1.0 and 5.0\")\n        }\n    }\n}\n\nclass EmployeeIdGenerationService {\n    fun generateEmployeeId(): String {\n        return \"EMP${System.currentTimeMillis() % 10000}\"\n    }\n}\n\nclass ReportService {\n    fun printEmployeeReport(employee: Employee) {\n        println(\"Employee Report for ${employee.name}\")\n        println(\"ID: ${employee.employeeId}\")\n        println(\"Department: ${employee.department}\")\n        println(\"Position: ${employee.position}\")\n        println(\"Hire Date: ${employee.hireDate}\")\n        println(\"Years of Service: ${employee.yearsOfService}\")\n        println(\"Base Salary: $${employee.baseSalary}\")\n        println(\"Performance Rating: ${employee.performanceRating}\")\n        println(\"Vacation Days Remaining: ${employee.vacationDays - employee.usedVacationDays}\")\n    }\n}\n\ndata class Employee(\n    var name: String,\n    var baseSalary: Double,\n    var yearsOfService: Int\n) {\n    var department: String? = null\n    var position: String? = null\n    var employeeId: String\n    var hireDate: Date = Date()\n    var lastReviewDate: Date? = null\n    var performanceRating: Double = 3.0\n    var vacationDays: Int = 20\n    var usedVacationDays: Int = 0\n    var manager: String? = null\n    var email: String? = null\n    \n    init {\n        val idService = EmployeeIdGenerationService()\n        employeeId = idService.generateEmployeeId()\n    }\n}",
            "level": "MODERATE",
            "language": "KOTLIN",
            "violation": "SRP",
            "description": "Employee salary payslip system"
        },
        {
            "input": "import java.util.*\nimport kotlin.random.Random\n\nclass FileStorage(private val basePath: String) {\n    \n    fun saveToFile(filename: String, content: String) {\n        println(\"Saving content to file: $basePath/$filename\")\n    }\n    \n    fun loadFromFile(filename: String): String {\n        println(\"Loading content from file: $basePath/$filename\")\n        return \"file content\"\n    }\n    \n    fun deleteFile(filename: String) {\n        println(\"Deleting file: $basePath/$filename\")\n    }\n}\n\nclass Book(private var title: String, private var author: String, private var content: String) {\n    private var isbn: String = \"\"\n    private val publishDate: Date = Date()\n    private var genre: String? = null\n    private var pageCount: Int = 0\n    private var price: Double = 0.0\n    private var publisher: String? = null\n    private val reviews: MutableList<String> = mutableListOf()\n    private var averageRating: Double = 0.0\n    private var totalSales: Int = 0\n    \n    private val fileStorage = FileStorage(\"/books/storage\")\n    \n    init {\n        generateISBN()\n        calculatePageCount()\n    }\n    \n    fun printBook() {\n        println(\"Title: $title\")\n        println(\"Author: $author\")\n        println(\"Content: $content\")\n    }\n    \n    fun saveToFile(filename: String) {\n        val bookData = formatBookData()\n        fileStorage.saveToFile(filename, bookData)\n    }\n    \n    private fun formatBookData(): String {\n        return \"TITLE: $title\\nAUTHOR: $author\\nISBN: $isbn\\nPAGES: $pageCount\\nPRICE: $$price\\nRATING: $averageRating\\nSALES: $totalSales\\nCONTENT: $content\"\n    }\n    \n    private fun generateISBN() {\n        val timestamp = System.currentTimeMillis() % 10000\n        val randomNum = Random.nextInt(1000)\n        isbn = \"978-$timestamp-${String.format(\"%03d\", randomNum)}\"\n    }\n    \n    private fun calculatePageCount() {\n        pageCount = if (content.isNotEmpty()) maxOf(1, content.length / 250) else 1\n    }\n    \n    fun validateISBN(isbn: String): Boolean {\n        if (isbn.length < 10) return false\n        val cleanISBN = isbn.replace(Regex(\"[^0-9X]\"), \"\")\n        return cleanISBN.length == 10 || cleanISBN.length == 13\n    }\n    \n    fun validatePrice(price: Double): Boolean {\n        return price >= 0.0 && price <= 999.99\n    }\n    \n    fun addReview(review: String, rating: Double) {\n        if (rating in 1.0..5.0) {\n            reviews.add(review)\n            averageRating = if (reviews.size == 1) {\n                rating\n            } else {\n                (averageRating * (reviews.size - 1) + rating) / reviews.size\n            }\n            println(\"Review added successfully\")\n        } else {\n            println(\"Invalid rating. Must be between 1.0 and 5.0\")\n        }\n    }\n    \n    fun recordSale() {\n        totalSales++\n        println(\"SALES LOG: Book sold - $title (ISBN: $isbn) on ${Date()}\")\n        println(\"INVENTORY: Updating stock for book: $isbn\")\n    }\n    \n    fun calculateRoyalty(salePrice: Double): Double {\n        val rate = when {\n            totalSales > 1000 -> 0.15\n            totalSales > 500 -> 0.12\n            else -> 0.10\n        }\n        return salePrice * rate\n    }\n    \n    fun generateSalesReport(): String {\n        return \"=== SALES REPORT ===\\nTitle: $title\\nAuthor: $author\\nISBN: $isbn\\nTotal Sales: $totalSales\\nAverage Rating: ${String.format(\"%.2f\", averageRating)}\\nNumber of Reviews: ${reviews.size}\\nCurrent Price: $$price\\nEstimated Revenue: ${String.format(\"%.2f\", totalSales * price)}\"\n    }\n    \n    fun printFormattedBook() {\n        val formattedOutput = \"====================\\nBOOK INFORMATION\\n====================\\nTitle: $title\\nAuthor: $author\\nISBN: $isbn\\nGenre: $genre\\nPages: $pageCount\\nPrice: $$price\\nPublisher: $publisher\\nRating: $averageRating/5.0\\nSales: $totalSales\\n====================\\nCONTENT:\\n$content\\n====================\"\n        println(formattedOutput)\n    }\n    \n    fun exportToJSON() {\n        val json = \"\"\"\n            {\n              \"title\": \"$title\",\n              \"author\": \"$author\",\n              \"isbn\": \"$isbn\",\n              \"genre\": \"$genre\",\n              \"pages\": $pageCount,\n              \"price\": $price,\n              \"rating\": $averageRating,\n              \"sales\": $totalSales\n            }\n        \"\"\".trimIndent()\n        fileStorage.saveToFile(\"$isbn.json\", json)\n    }\n    \n    // Getters and Setters\n    fun getTitle(): String = title\n    fun setTitle(title: String) { this.title = title }\n    \n    fun getAuthor(): String = author\n    fun setAuthor(author: String) { this.author = author }\n    \n    fun getContent(): String = content\n    fun setContent(content: String) {\n        this.content = content\n        calculatePageCount()\n    }\n    \n    fun getIsbn(): String = isbn\n    \n    fun getPublishDate(): Date = publishDate\n    \n    fun getGenre(): String? = genre\n    fun setGenre(genre: String?) { this.genre = genre }\n    \n    fun getPageCount(): Int = pageCount\n    \n    fun getPrice(): Double = price\n    fun setPrice(price: Double) {\n        if (validatePrice(price)) {\n            this.price = price\n        }\n    }\n    \n    fun getPublisher(): String? = publisher\n    fun setPublisher(publisher: String?) { this.publisher = publisher }\n    \n    fun getReviews(): List<String> = reviews.toList()\n    \n    fun getAverageRating(): Double = averageRating\n    \n    fun getTotalSales(): Int = totalSales\n}",
            "output": "import java.util.*\nimport kotlin.random.Random\n\nclass FileStorage(private val basePath: String) {\n    \n    fun saveToFile(filename: String, content: String) {\n        println(\"Saving content to file: $basePath/$filename\")\n    }\n    \n    fun loadFromFile(filename: String): String {\n        println(\"Loading content from file: $basePath/$filename\")\n        return \"file content\"\n    }\n    \n    fun deleteFile(filename: String) {\n        println(\"Deleting file: $basePath/$filename\")\n    }\n}\n\nclass ISBNGenerationService {\n    fun generateISBN(): String {\n        val timestamp = System.currentTimeMillis() % 10000\n        val randomNum = Random.nextInt(1000)\n        return \"978-$timestamp-${String.format(\"%03d\", randomNum)}\"\n    }\n}\n\nclass PageCalculationService {\n    fun calculatePageCount(content: String): Int {\n        return if (content.isNotEmpty()) maxOf(1, content.length / 250) else 1\n    }\n}\n\nclass ValidationService {\n    fun validateISBN(isbn: String): Boolean {\n        if (isbn.length < 10) return false\n        val cleanISBN = isbn.replace(Regex(\"[^0-9X]\"), \"\")\n        return cleanISBN.length == 10 || cleanISBN.length == 13\n    }\n    \n    fun validatePrice(price: Double): Boolean {\n        return price >= 0.0 && price <= 999.99\n    }\n    \n    fun validateRating(rating: Double): Boolean {\n        return rating in 1.0..5.0\n    }\n}\n\nclass ReviewManagementService {\n    private val validator = ValidationService()\n    \n    fun addReview(book: Book, review: String, rating: Double) {\n        if (validator.validateRating(rating)) {\n            book.getReviews().add(review)\n            book.setAverageRating(calculateNewAverageRating(book.getAverageRating(), book.getReviews().size, rating))\n            println(\"Review added successfully\")\n        } else {\n            println(\"Invalid rating. Must be between 1.0 and 5.0\")\n        }\n    }\n    \n    private fun calculateNewAverageRating(currentAverage: Double, reviewCount: Int, newRating: Double): Double {\n        return if (reviewCount == 1) {\n            newRating\n        } else {\n            (currentAverage * (reviewCount - 1) + newRating) / reviewCount\n        }\n    }\n}\n\nclass SalesManagementService {\n    fun recordSale(book: Book) {\n        book.setTotalSales(book.getTotalSales() + 1)\n        logSaleActivity(book)\n        updateInventory(book)\n    }\n    \n    private fun logSaleActivity(book: Book) {\n        println(\"SALES LOG: Book sold - ${book.getTitle()} (ISBN: ${book.getIsbn()}) on ${Date()}\")\n    }\n    \n    private fun updateInventory(book: Book) {\n        println(\"INVENTORY: Updating stock for book: ${book.getIsbn()}\")\n    }\n}\n\nclass RoyaltyCalculationService {\n    fun calculateRoyalty(salePrice: Double, totalSales: Int): Double {\n        val rate = when {\n            totalSales > 1000 -> 0.15\n            totalSales > 500 -> 0.12\n            else -> 0.10\n        }\n        return salePrice * rate\n    }\n}\n\nclass DataFormattingService {\n    fun formatBookData(book: Book): String {\n        return \"TITLE: ${book.getTitle()}\\nAUTHOR: ${book.getAuthor()}\\nISBN: ${book.getIsbn()}\\nPAGES: ${book.getPageCount()}\\nPRICE: $${book.getPrice()}\\nRATING: ${book.getAverageRating()}\\nSALES: ${book.getTotalSales()}\\nCONTENT: ${book.getContent()}\"\n    }\n    \n    fun formatBookForDisplay(book: Book): String {\n        return \"====================\\nBOOK INFORMATION\\n====================\\nTitle: ${book.getTitle()}\\nAuthor: ${book.getAuthor()}\\nISBN: ${book.getIsbn()}\\nGenre: ${book.getGenre()}\\nPages: ${book.getPageCount()}\\nPrice: $${book.getPrice()}\\nPublisher: ${book.getPublisher()}\\nRating: ${book.getAverageRating()}/5.0\\nSales: ${book.getTotalSales()}\\n====================\\nCONTENT:\\n${book.getContent()}\\n====================\"\n    }\n    \n    fun formatAsJSON(book: Book): String {\n        return \"\"\"\n            {\n              \"title\": \"${book.getTitle()}\",\n              \"author\": \"${book.getAuthor()}\",\n              \"isbn\": \"${book.getIsbn()}\",\n              \"genre\": \"${book.getGenre()}\",\n              \"pages\": ${book.getPageCount()},\n              \"price\": ${book.getPrice()},\n              \"rating\": ${book.getAverageRating()},\n              \"sales\": ${book.getTotalSales()}\n            }\n        \"\"\".trimIndent()\n    }\n}\n\nclass ReportGenerationService {\n    fun generateSalesReport(book: Book): String {\n        val estimatedRevenue = book.getTotalSales() * book.getPrice()\n        return \"=== SALES REPORT ===\\nTitle: ${book.getTitle()}\\nAuthor: ${book.getAuthor()}\\nISBN: ${book.getIsbn()}\\nTotal Sales: ${book.getTotalSales()}\\nAverage Rating: ${String.format(\"%.2f\", book.getAverageRating())}\\nNumber of Reviews: ${book.getReviews().size}\\nCurrent Price: ${book.getPrice()}\\nEstimated Revenue: ${String.format(\"%.2f\", estimatedRevenue)}\"\n    }\n}\n\nclass BookPrintingService {\n    private val formatter = DataFormattingService()\n    \n    fun printBook(book: Book) {\n        println(\"Title: ${book.getTitle()}\")\n        println(\"Author: ${book.getAuthor()}\")\n        println(\"Content: ${book.getContent()}\")\n    }\n    \n    fun printFormattedBook(book: Book) {\n        val formattedBook = formatter.formatBookForDisplay(book)\n        println(formattedBook)\n    }\n}\n\nclass BookFileService {\n    private val fileStorage = FileStorage(\"/books/storage\")\n    private val formatter = DataFormattingService()\n    \n    fun saveToFile(book: Book, filename: String) {\n        val bookData = formatter.formatBookData(book)\n        fileStorage.saveToFile(filename, bookData)\n    }\n    \n    fun exportToJSON(book: Book) {\n        val json = formatter.formatAsJSON(book)\n        fileStorage.saveToFile(\"${book.getIsbn()}.json\", json)\n    }\n}\n\nclass Book(private var title: String, private var author: String, private var content: String) {\n    private var isbn: String = \"\"\n    private val publishDate: Date = Date()\n    private var genre: String? = null\n    private var pageCount: Int = 0\n    private var price: Double = 0.0\n    private var publisher: String? = null\n    private val reviews: MutableList<String> = mutableListOf()\n    private var averageRating: Double = 0.0\n    private var totalSales: Int = 0\n    \n    init {\n        initializeBook()\n    }\n    \n    private fun initializeBook() {\n        val isbnService = ISBNGenerationService()\n        isbn = isbnService.generateISBN()\n        \n        val pageService = PageCalculationService()\n        pageCount = pageService.calculatePageCount(content)\n    }\n    \n    // Getters and Setters\n    fun getTitle(): String = title\n    fun setTitle(title: String) { this.title = title }\n    \n    fun getAuthor(): String = author\n    fun setAuthor(author: String) { this.author = author }\n    \n    fun getContent(): String = content\n    fun setContent(content: String) {\n        this.content = content\n        val pageService = PageCalculationService()\n        pageCount = pageService.calculatePageCount(content)\n    }\n    \n    fun getIsbn(): String = isbn\n    \n    fun getPublishDate(): Date = publishDate\n    \n    fun getGenre(): String? = genre\n    fun setGenre(genre: String?) { this.genre = genre }\n    \n    fun getPageCount(): Int = pageCount\n    \n    fun getPrice(): Double = price\n    fun setPrice(price: Double) {\n        val validator = ValidationService()\n        if (validator.validatePrice(price)) {\n            this.price = price\n        }\n    }\n    \n    fun getPublisher(): String? = publisher\n    fun setPublisher(publisher: String?) { this.publisher = publisher }\n    \n    fun getReviews(): MutableList<String> = reviews\n    \n    fun getAverageRating(): Double = averageRating\n    fun setAverageRating(rating: Double) { this.averageRating = rating }\n    \n    fun getTotalSales(): Int = totalSales\n    fun setTotalSales(sales: Int) { this.totalSales = sales }\n}",
            "level": "MODERATE",
            "language": "KOTLIN",
            "violation": "SRP",
            "description": "Book printing file saving"
        },
        {
            "input": "class InventoryDatabase(private val connectionString: String) {\n    fun updateStock(productId: String, quantity: Int) {\n        println(\"Updating stock in database - Product: $productId, Quantity: $quantity\")\n    }\n    \n    fun logTransaction(type: String, details: String) {\n        println(\"[DB LOG] $type: $details\")\n    }\n}\n\nclass NotificationService(private val apiKey: String) {\n    fun sendEmail(recipient: String, subject: String, body: String) {\n        println(\"Sending email to: $recipient, Subject: $subject\")\n    }\n}\n\nclass Product(private var name: String, private var price: Double) {\n    private val productId: String\n    private var stockQuantity: Int = 100\n    private val customerReviews: MutableList<String> = mutableListOf()\n    private var averageRating: Double = 0.0\n    private var totalSales: Int = 0\n    private val costPrice: Double = price * 0.6\n    private val database: InventoryDatabase\n    private val notificationService: NotificationService\n    \n    init {\n        productId = \"PRD-${System.currentTimeMillis() % 100000}\"\n        database = InventoryDatabase(\"jdbc:mysql://localhost:3306/inventory\")\n        notificationService = NotificationService(\"API_KEY_12345\")\n    }\n    \n    fun applyDiscount(percentage: Double): Double {\n        return price * (1 - percentage / 100)\n    }\n    \n    fun displayProduct() {\n        println(\"Product: $name, Price: $$price\")\n    }\n    \n    fun calculateDiscountedPrice(discountPercentage: Double): Double {\n        val discounted = price * (1 - discountPercentage / 100)\n        database.logTransaction(\"DISCOUNT_APPLIED\", \"Product: $productId, Discount: $discountPercentage%\")\n        return discounted\n    }\n    \n    fun calculateProfitMargin(): Double {\n        return ((price - costPrice) / price) * 100\n    }\n    \n    fun calculateShippingCost(destination: String): Double {\n        return if (destination.lowercase() == \"international\") 15.99 else 5.99\n    }\n    \n    fun addCustomerReview(review: String, rating: Double) {\n        if (rating in 1.0..5.0) {\n            customerReviews.add(review)\n            averageRating = if (customerReviews.size == 1) {\n                rating\n            } else {\n                (averageRating * (customerReviews.size - 1) + rating) / customerReviews.size\n            }\n            database.logTransaction(\"REVIEW_ADDED\", \"Product: $productId, Rating: $rating\")\n        }\n    }\n    \n    fun processSale(quantity: Int, customerEmail: String) {\n        if (stockQuantity >= quantity) {\n            stockQuantity -= quantity\n            totalSales += quantity\n            database.updateStock(productId, stockQuantity)\n            notificationService.sendEmail(customerEmail, \"Purchase Confirmation\", \"Receipt for $name\")\n            if (stockQuantity <= 10) {\n                notificationService.sendEmail(\"inventory@company.com\", \"Low Stock Alert\", \"Product $name low stock\")\n            }\n            database.logTransaction(\"SALE_COMPLETED\", \"Product: $productId, Quantity: $quantity\")\n        }\n    }\n    \n    fun restockProduct(quantity: Int, supplierEmail: String) {\n        stockQuantity += quantity\n        database.updateStock(productId, stockQuantity)\n        notificationService.sendEmail(supplierEmail, \"Restock Confirmation\", \"Added $quantity units\")\n        database.logTransaction(\"RESTOCK_COMPLETED\", \"Product: $productId, Added: $quantity\")\n    }\n    \n    fun generateProductReport(): String {\n        return \"Product: $name\\nID: $productId\\nPrice: $$price\\nStock: $stockQuantity\\nSales: $totalSales\\nRating: $averageRating\"\n    }\n    \n    fun displayDetailedProduct() {\n        println(\"$name ($productId) - $$price - Stock: $stockQuantity - Rating: $averageRating\")\n    }\n    \n    fun getName(): String = name\n    \n    fun getPrice(): Double = price\n    \n    fun setPrice(price: Double) {\n        this.price = price\n    }\n}",
            "output": "class InventoryDatabase(private val connectionString: String) {\n    fun updateStock(productId: String, quantity: Int) {\n        println(\"Updating stock in database - Product: $productId, Quantity: $quantity\")\n    }\n    \n    fun logTransaction(type: String, details: String) {\n        println(\"[DB LOG] $type: $details\")\n    }\n}\n\nclass NotificationService(private val apiKey: String) {\n    fun sendEmail(recipient: String, subject: String, body: String) {\n        println(\"Sending email to: $recipient, Subject: $subject\")\n    }\n}\n\nclass ProductIdGenerationService {\n    fun generateProductId(): String {\n        return \"PRD-${System.currentTimeMillis() % 100000}\"\n    }\n}\n\nclass PricingCalculationService {\n    fun applyDiscount(price: Double, percentage: Double): Double {\n        return price * (1 - percentage / 100)\n    }\n    \n    fun calculateDiscountedPrice(price: Double, discountPercentage: Double): Double {\n        return price * (1 - discountPercentage / 100)\n    }\n    \n    fun calculateProfitMargin(price: Double, costPrice: Double): Double {\n        return ((price - costPrice) / price) * 100\n    }\n    \n    fun calculateShippingCost(destination: String): Double {\n        return if (destination.lowercase() == \"international\") 15.99 else 5.99\n    }\n}\n\nclass ReviewManagementService {\n    private val database = InventoryDatabase(\"jdbc:mysql://localhost:3306/inventory\")\n    \n    fun addCustomerReview(product: Product, review: String, rating: Double) {\n        if (rating in 1.0..5.0) {\n            product.getCustomerReviews().add(review)\n            product.setAverageRating(calculateNewAverageRating(product.getAverageRating(), product.getCustomerReviews().size, rating))\n            database.logTransaction(\"REVIEW_ADDED\", \"Product: ${product.getProductId()}, Rating: $rating\")\n        }\n    }\n    \n    private fun calculateNewAverageRating(currentAverage: Double, reviewCount: Int, newRating: Double): Double {\n        return if (reviewCount == 1) newRating else (currentAverage * (reviewCount - 1) + newRating) / reviewCount\n    }\n}\n\nclass SalesProcessingService {\n    private val database = InventoryDatabase(\"jdbc:mysql://localhost:3306/inventory\")\n    private val notificationService = NotificationService(\"API_KEY_12345\")\n    private val stockAlertService = StockAlertService()\n    \n    fun processSale(product: Product, quantity: Int, customerEmail: String) {\n        if (product.getStockQuantity() >= quantity) {\n            product.setStockQuantity(product.getStockQuantity() - quantity)\n            product.setTotalSales(product.getTotalSales() + quantity)\n            \n            database.updateStock(product.getProductId(), product.getStockQuantity())\n            notificationService.sendEmail(customerEmail, \"Purchase Confirmation\", \"Receipt for ${product.getName()}\")\n            \n            stockAlertService.checkLowStockAlert(product, notificationService)\n            \n            database.logTransaction(\"SALE_COMPLETED\", \"Product: ${product.getProductId()}, Quantity: $quantity\")\n        }\n    }\n}\n\nclass StockAlertService {\n    fun checkLowStockAlert(product: Product, notificationService: NotificationService) {\n        if (product.getStockQuantity() <= 10) {\n            notificationService.sendEmail(\"inventory@company.com\", \"Low Stock Alert\", \"Product ${product.getName()} low stock\")\n        }\n    }\n}\n\nclass InventoryManagementService {\n    private val database = InventoryDatabase(\"jdbc:mysql://localhost:3306/inventory\")\n    private val notificationService = NotificationService(\"API_KEY_12345\")\n    \n    fun restockProduct(product: Product, quantity: Int, supplierEmail: String) {\n        product.setStockQuantity(product.getStockQuantity() + quantity)\n        database.updateStock(product.getProductId(), product.getStockQuantity())\n        notificationService.sendEmail(supplierEmail, \"Restock Confirmation\", \"Added $quantity units\")\n        database.logTransaction(\"RESTOCK_COMPLETED\", \"Product: ${product.getProductId()}, Added: $quantity\")\n    }\n}\n\nclass ReportGenerationService {\n    fun generateProductReport(product: Product): String {\n        return \"Product: ${product.getName()}\\nID: ${product.getProductId()}\\nPrice: $${product.getPrice()}\\nStock: ${product.getStockQuantity()}\\nSales: ${product.getTotalSales()}\\nRating: ${product.getAverageRating()}\"\n    }\n}\n\nclass ProductDisplayService {\n    fun displayProduct(product: Product) {\n        println(\"Product: ${product.getName()}, Price: $${product.getPrice()}\")\n    }\n    \n    fun displayDetailedProduct(product: Product) {\n        println(\"${product.getName()} (${product.getProductId()}) - $${product.getPrice()} - Stock: ${product.getStockQuantity()} - Rating: ${product.getAverageRating()}\")\n    }\n}\n\nclass DiscountService {\n    private val database = InventoryDatabase(\"jdbc:mysql://localhost:3306/inventory\")\n    private val pricingService = PricingCalculationService()\n    \n    fun calculateDiscountedPrice(product: Product, discountPercentage: Double): Double {\n        val discounted = pricingService.calculateDiscountedPrice(product.getPrice(), discountPercentage)\n        database.logTransaction(\"DISCOUNT_APPLIED\", \"Product: ${product.getProductId()}, Discount: $discountPercentage%\")\n        return discounted\n    }\n}\n\nclass Product(private var name: String, private var price: Double) {\n    private val productId: String\n    private var stockQuantity: Int = 100\n    private val customerReviews: MutableList<String> = mutableListOf()\n    private var averageRating: Double = 0.0\n    private var totalSales: Int = 0\n    private val costPrice: Double = price * 0.6\n    \n    init {\n        initializeProduct()\n    }\n    \n    private fun initializeProduct() {\n        val idService = ProductIdGenerationService()\n        productId = idService.generateProductId()\n    }\n    \n    // Getters and Setters\n    fun getName(): String = name\n    \n    fun setName(name: String) {\n        this.name = name\n    }\n    \n    fun getPrice(): Double = price\n    \n    fun setPrice(price: Double) {\n        this.price = price\n    }\n    \n    fun getProductId(): String = productId\n    \n    fun getStockQuantity(): Int = stockQuantity\n    \n    fun setStockQuantity(stockQuantity: Int) {\n        this.stockQuantity = stockQuantity\n    }\n    \n    fun getCustomerReviews(): MutableList<String> = customerReviews\n    \n    fun getAverageRating(): Double = averageRating\n    \n    fun setAverageRating(averageRating: Double) {\n        this.averageRating = averageRating\n    }\n    \n    fun getTotalSales(): Int = totalSales\n    \n    fun setTotalSales(totalSales: Int) {\n        this.totalSales = totalSales\n    }\n    \n    fun getCostPrice(): Double = costPrice\n    \n    fun setCostPrice(costPrice: Double) {\n        // Note: costPrice is val, so this would need to be changed to var if setter is needed\n        // this.costPrice = costPrice\n    }\n}",
            "level": "MODERATE",
            "language": "KOTLIN",
            "violation": "SRP",
            "description": "Product discount display system"
        },
        {
            "input": "import java.util.*\nimport kotlin.random.Random\n\nclass DatabaseService(private val connectionString: String) {\n    fun saveUser(user: User) {\n        println(\"Saving user to database: ${user.name}\")\n    }\n    \n    fun updateUser(user: User) {\n        println(\"Updating user in database: ${user.name}\")\n    }\n    \n    fun deleteUser(userId: String) {\n        println(\"Deleting user from database: $userId\")\n    }\n}\n\nclass EmailService(private val smtpServer: String, private val port: Int) {\n    fun sendEmail(to: String, subject: String, body: String) {\n        println(\"Sending email to: $to\")\n        println(\"Subject: $subject\")\n    }\n}\n\nclass SMSService(private val apiKey: String) {\n    fun sendSMS(phoneNumber: String, message: String) {\n        println(\"Sending SMS to: $phoneNumber\")\n        println(\"Message: $message\")\n    }\n}\n\nclass FileService(private val uploadPath: String) {\n    fun uploadFile(fileData: ByteArray, fileName: String): String {\n        println(\"Uploading file: $fileName\")\n        return \"$uploadPath/$fileName\"\n    }\n}\n\nobject SecurityConfig {\n    const val MAX_LOGIN_ATTEMPTS = 5\n    const val PASSWORD_EXPIRY_DAYS = 90\n}\n\nclass User(var name: String, var email: String) {\n    var password: String? = null\n    var isActive: Boolean = true\n    var role: String = \"USER\"\n    var lastLogin: Date? = null\n    var loginAttempts: Int = 0\n    var phoneNumber: String? = null\n    var registrationDate: Date = Date()\n    var loginHistory: MutableList<String> = mutableListOf()\n    var preferences: MutableMap<String, String> = mutableMapOf()\n    var notifications: MutableList<String> = mutableListOf()\n    var profilePictureUrl: String? = null\n    var emailVerified: Boolean = false\n    \n    private val dbService = DatabaseService(\"jdbc:mysql://localhost:3306/userdb\")\n    private val emailService = EmailService(\"smtp.company.com\", 587)\n    private val smsService = SMSService(\"api_key_12345\")\n    private val fileService = FileService(\"/uploads\")\n    \n    init {\n        initializeDefaultPreferences()\n    }\n    \n    fun saveToDatabase() {\n        dbService.saveUser(this)\n    }\n    \n    fun sendWelcomeEmail() {\n        val subject = \"Welcome to our platform!\"\n        val body = createWelcomeEmailBody()\n        emailService.sendEmail(email, subject, body)\n    }\n    \n    fun sendPasswordResetEmail() {\n        val resetToken = generatePasswordResetToken()\n        val subject = \"Password Reset Request\"\n        val body = createPasswordResetEmailBody(resetToken)\n        emailService.sendEmail(email, subject, body)\n    }\n    \n    fun sendSMSVerification() {\n        phoneNumber?.let {\n            val smsCode = generateSMSVerificationCode()\n            val message = \"Your verification code: $smsCode\"\n            smsService.sendSMS(it, message)\n        }\n    }\n    \n    fun createWelcomeEmailBody(): String {\n        return \"Dear $name,\\n\\nWelcome to our platform! Complete your profile and explore our features.\\n\\nBest regards,\\nThe Team\"\n    }\n    \n    fun createPasswordResetEmailBody(token: String): String {\n        return \"Hello $name,\\n\\nReset your password: https://oursite.com/reset?token=$token\\n\\nLink expires in 24 hours.\"\n    }\n    \n    fun generatePasswordResetToken(): String {\n        val timestamp = System.currentTimeMillis()\n        val randomPart = Random.nextDouble().toString().substring(2, 8)\n        return \"RESET_${timestamp}_$randomPart\"\n    }\n    \n    fun generateSMSVerificationCode(): String {\n        return Random.nextInt(100000, 1000000).toString()\n    }\n    \n    fun validateEmailFormat(email: String): Boolean {\n        if (email.isBlank()) return false\n        return email.contains(\"@\") && email.contains(\".\") && email.split(\"@\").size == 2\n    }\n    \n    fun validatePasswordStrength(password: String): Boolean {\n        if (password.length < 8) return false\n        \n        val hasUpper = password.any { it.isUpperCase() }\n        val hasLower = password.any { it.isLowerCase() }\n        val hasDigit = password.any { it.isDigit() }\n        val hasSpecial = password.any { \"!@#$%^&*()_+-=[]{}|;:,.<>?\".contains(it) }\n        \n        return hasUpper && hasLower && hasDigit && hasSpecial\n    }\n    \n    fun hashPassword(password: String): String {\n        var hash = 7\n        for (char in password) {\n            hash = hash * 31 + char.code\n        }\n        return \"HASH:${kotlin.math.abs(hash).toString(16).uppercase()}\"\n    }\n    \n    fun verifyPassword(plainPassword: String, hashedPassword: String): Boolean {\n        val computedHash = hashPassword(plainPassword)\n        return computedHash == hashedPassword\n    }\n    \n    fun authenticate(password: String): Boolean {\n        if (loginAttempts >= SecurityConfig.MAX_LOGIN_ATTEMPTS) {\n            println(\"Account locked due to too many failed attempts\")\n            return false\n        }\n        \n        if (this.password != null && verifyPassword(password, this.password!!)) {\n            loginAttempts = 0\n            lastLogin = Date()\n            addToLoginHistory(\"Successful login from IP: 192.168.1.100\")\n            return true\n        }\n        \n        loginAttempts++\n        addToLoginHistory(\"Failed login attempt from IP: 192.168.1.100\")\n        return false\n    }\n    \n    fun lockAccount() {\n        isActive = false\n        logSecurityEvent(\"ACCOUNT_LOCKED\", \"Account locked for user: $name\")\n        sendAccountNotification(\"Your account has been locked due to security reasons.\")\n    }\n    \n    fun unlockAccount() {\n        isActive = true\n        loginAttempts = 0\n        logSecurityEvent(\"ACCOUNT_UNLOCKED\", \"Account unlocked for user: $name\")\n        sendAccountNotification(\"Your account has been successfully unlocked.\")\n    }\n    \n    fun logSecurityEvent(eventType: String, description: String) {\n        val timestamp = Date()\n        val logEntry = \"[$timestamp] $eventType: $description\"\n        println(\"SECURITY LOG: $logEntry\")\n    }\n    \n    fun sendAccountNotification(message: String) {\n        addNotification(message)\n        if (emailVerified) {\n            emailService.sendEmail(email, \"Account Security Alert\", message)\n        }\n        phoneNumber?.let {\n            smsService.sendSMS(it, \"Security Alert: $message\")\n        }\n    }\n    \n    fun addToLoginHistory(entry: String) {\n        val timestampedEntry = \"${Date()}: $entry\"\n        loginHistory.add(timestampedEntry)\n        if (loginHistory.size > 100) {\n            loginHistory.removeAt(0)\n        }\n    }\n    \n    private fun initializeDefaultPreferences() {\n        preferences[\"theme\"] = \"light\"\n        preferences[\"language\"] = \"en\"\n        preferences[\"notifications\"] = \"enabled\"\n    }\n    \n    fun updatePreference(key: String, value: String) {\n        val oldValue = preferences[key]\n        preferences[key] = value\n        logPreferenceChange(key, oldValue, value)\n    }\n    \n    fun logPreferenceChange(key: String, oldValue: String?, newValue: String) {\n        val logEntry = \"Preference '$key' changed from '$oldValue' to '$newValue'\"\n        println(\"PREFERENCE LOG: $logEntry\")\n    }\n    \n    fun getPreference(key: String): String? {\n        return preferences[key]\n    }\n    \n    fun uploadProfilePicture(imageData: ByteArray, fileName: String) {\n        if (validateImageFile(imageData, fileName)) {\n            profilePictureUrl = fileService.uploadFile(imageData, \"profile_${name}_$fileName\")\n            logActivityEvent(\"PROFILE_PICTURE_UPLOADED\", \"User uploaded new profile picture\")\n        } else {\n            throw IllegalArgumentException(\"Invalid image file\")\n        }\n    }\n    \n    fun validateImageFile(imageData: ByteArray, fileName: String): Boolean {\n        if (imageData.isEmpty() || imageData.size > 5 * 1024 * 1024) {\n            return false\n        }\n        val lower = fileName.lowercase()\n        return lower.endsWith(\".jpg\") || lower.endsWith(\".jpeg\") || \n               lower.endsWith(\".png\") || lower.endsWith(\".gif\")\n    }\n    \n    fun logActivityEvent(eventType: String, description: String) {\n        val timestamp = Date()\n        val logEntry = \"[$timestamp] $eventType: $description (User: $name)\"\n        println(\"ACTIVITY LOG: $logEntry\")\n    }\n    \n    fun addNotification(message: String) {\n        val timestampedNotification = \"${Date()}: $message\"\n        notifications.add(timestampedNotification)\n        if (notifications.size > 50) {\n            notifications.removeAt(0)\n        }\n    }\n    \n    fun changePassword(oldPassword: String, newPassword: String) {\n        if (!authenticate(oldPassword)) {\n            throw SecurityException(\"Current password is incorrect\")\n        }\n        \n        if (!validatePasswordStrength(newPassword)) {\n            throw IllegalArgumentException(\"New password does not meet strength requirements\")\n        }\n        \n        password = hashPassword(newPassword)\n        logSecurityEvent(\"PASSWORD_CHANGED\", \"Password changed successfully\")\n        sendAccountNotification(\"Your password has been changed successfully.\")\n    }\n    \n    fun generateUserReport(): String {\n        return buildString {\n            appendLine(\"=== USER REPORT ===\")\n            appendLine(\"Name: $name\")\n            appendLine(\"Email: $email\")\n            appendLine(\"Active: $isActive\")\n            appendLine(\"Registration Date: $registrationDate\")\n            appendLine(\"Login History: ${loginHistory.size} entries\")\n        }\n    }\n    \n    fun deleteAccount() {\n        logSecurityEvent(\"ACCOUNT_DELETION_STARTED\", \"User initiated account deletion\")\n        isActive = false\n        email = \"[DELETED]\"\n        password = null\n        loginHistory.clear()\n        notifications.clear()\n        dbService.deleteUser(name)\n        logSecurityEvent(\"ACCOUNT_DELETED\", \"Account deletion completed\")\n    }\n    \n    fun setPassword(password: String) {\n        this.password = hashPassword(password)\n    }\n}",
            "output": "import java.util.*\nimport kotlin.random.Random\n\nclass DatabaseService(private val connectionString: String) {\n    fun saveUser(user: User) {\n        println(\"Saving user to database: ${user.name}\")\n    }\n    \n    fun updateUser(user: User) {\n        println(\"Updating user in database: ${user.name}\")\n    }\n    \n    fun deleteUser(userId: String) {\n        println(\"Deleting user from database: $userId\")\n    }\n}\n\nclass EmailService(private val smtpServer: String, private val port: Int) {\n    fun sendEmail(to: String, subject: String, body: String) {\n        println(\"Sending email to: $to\")\n        println(\"Subject: $subject\")\n    }\n}\n\nclass SMSService(private val apiKey: String) {\n    fun sendSMS(phoneNumber: String, message: String) {\n        println(\"Sending SMS to: $phoneNumber\")\n        println(\"Message: $message\")\n    }\n}\n\nclass FileService(private val uploadPath: String) {\n    fun uploadFile(fileData: ByteArray, fileName: String): String {\n        println(\"Uploading file: $fileName\")\n        return \"$uploadPath/$fileName\"\n    }\n    \n    fun validateImageFile(imageData: ByteArray, fileName: String): Boolean {\n        if (imageData.isEmpty() || imageData.size > 5 * 1024 * 1024) {\n            return false\n        }\n        val lower = fileName.lowercase()\n        return lower.endsWith(\".jpg\") || lower.endsWith(\".jpeg\") || \n               lower.endsWith(\".png\") || lower.endsWith(\".gif\")\n    }\n}\n\nclass EmailContentService {\n    fun createWelcomeEmailBody(name: String): String {\n        return \"Dear $name,\\n\\nWelcome to our platform! Complete your profile and explore our features.\\n\\nBest regards,\\nThe Team\"\n    }\n    \n    fun createPasswordResetEmailBody(name: String, token: String): String {\n        return \"Hello $name,\\n\\nReset your password: https://oursite.com/reset?token=$token\\n\\nLink expires in 24 hours.\"\n    }\n}\n\nclass TokenGenerationService {\n    fun generatePasswordResetToken(): String {\n        val timestamp = System.currentTimeMillis()\n        val randomPart = Random.nextDouble().toString().substring(2, 8)\n        return \"RESET_${timestamp}_$randomPart\"\n    }\n    \n    fun generateSMSVerificationCode(): String {\n        return Random.nextInt(100000, 1000000).toString()\n    }\n}\n\nclass ValidationService {\n    fun validateEmailFormat(email: String): Boolean {\n        if (email.isBlank()) return false\n        return email.contains(\"@\") && email.contains(\".\") && email.split(\"@\").size == 2\n    }\n    \n    fun validatePasswordStrength(password: String): Boolean {\n        if (password.length < 8) return false\n        \n        val hasUpper = password.any { it.isUpperCase() }\n        val hasLower = password.any { it.isLowerCase() }\n        val hasDigit = password.any { it.isDigit() }\n        val hasSpecial = password.any { \"!@#$%^&*()_+-=[]{}|;:,.<>?\".contains(it) }\n        \n        return hasUpper && hasLower && hasDigit && hasSpecial\n    }\n}\n\nclass PasswordService {\n    fun hashPassword(password: String): String {\n        var hash = 7\n        for (char in password) {\n            hash = hash * 31 + char.code\n        }\n        return \"HASH:${kotlin.math.abs(hash).toString(16).uppercase()}\"\n    }\n    \n    fun verifyPassword(plainPassword: String, hashedPassword: String): Boolean {\n        val computedHash = hashPassword(plainPassword)\n        return computedHash == hashedPassword\n    }\n}\n\nclass AuthenticationService {\n    private val passwordService = PasswordService()\n    \n    fun authenticate(user: User, password: String): Boolean {\n        if (user.loginAttempts >= 5) {\n            println(\"Account locked due to too many failed attempts\")\n            return false\n        }\n        \n        if (user.password != null && passwordService.verifyPassword(password, user.password!!)) {\n            user.resetLoginAttempts()\n            user.updateLastLogin()\n            user.addToLoginHistory(\"Successful login from IP: 192.168.1.100\")\n            return true\n        }\n        \n        user.incrementLoginAttempts()\n        user.addToLoginHistory(\"Failed login attempt from IP: 192.168.1.100\")\n        return false\n    }\n}\n\nclass SecurityService {\n    fun logSecurityEvent(eventType: String, description: String) {\n        val timestamp = Date()\n        val logEntry = \"[$timestamp] $eventType: $description\"\n        println(\"SECURITY LOG: $logEntry\")\n    }\n    \n    fun logActivityEvent(eventType: String, description: String, userName: String) {\n        val timestamp = Date()\n        val logEntry = \"[$timestamp] $eventType: $description (User: $userName)\"\n        println(\"ACTIVITY LOG: $logEntry\")\n    }\n    \n    fun logPreferenceChange(key: String, oldValue: String?, newValue: String) {\n        val logEntry = \"Preference '$key' changed from '$oldValue' to '$newValue'\"\n        println(\"PREFERENCE LOG: $logEntry\")\n    }\n}\n\nclass AccountService {\n    private val securityService = SecurityService()\n    private val notificationService = NotificationService()\n    \n    fun lockAccount(user: User) {\n        user.setActive(false)\n        securityService.logSecurityEvent(\"ACCOUNT_LOCKED\", \"Account locked for user: ${user.name}\")\n        notificationService.sendAccountNotification(user, \"Your account has been locked due to security reasons.\")\n    }\n    \n    fun unlockAccount(user: User) {\n        user.setActive(true)\n        user.resetLoginAttempts()\n        securityService.logSecurityEvent(\"ACCOUNT_UNLOCKED\", \"Account unlocked for user: ${user.name}\")\n        notificationService.sendAccountNotification(user, \"Your account has been successfully unlocked.\")\n    }\n    \n    fun deleteAccount(user: User, dbService: DatabaseService) {\n        securityService.logSecurityEvent(\"ACCOUNT_DELETION_STARTED\", \"User initiated account deletion\")\n        user.setActive(false)\n        user.setEmail(\"[DELETED]\")\n        user.setPassword(null)\n        user.clearLoginHistory()\n        user.clearNotifications()\n        dbService.deleteUser(user.name)\n        securityService.logSecurityEvent(\"ACCOUNT_DELETED\", \"Account deletion completed\")\n    }\n}\n\nclass NotificationService {\n    fun sendAccountNotification(user: User, message: String) {\n        user.addNotification(message)\n        \n        if (user.emailVerified) {\n            val emailService = EmailService(\"smtp.company.com\", 587)\n            emailService.sendEmail(user.email, \"Account Security Alert\", message)\n        }\n        \n        user.phoneNumber?.let {\n            val smsService = SMSService(\"api_key_12345\")\n            smsService.sendSMS(it, \"Security Alert: $message\")\n        }\n    }\n}\n\nclass ReportService {\n    fun generateUserReport(user: User): String {\n        return buildString {\n            appendLine(\"=== USER REPORT ===\")\n            appendLine(\"Name: ${user.name}\")\n            appendLine(\"Email: ${user.email}\")\n            appendLine(\"Active: ${user.isActive}\")\n            appendLine(\"Registration Date: ${user.registrationDate}\")\n            appendLine(\"Login History: ${user.getLoginHistorySize()} entries\")\n        }\n    }\n}\n\nclass UserManagementService {\n    private val emailService = EmailService(\"smtp.company.com\", 587)\n    private val smsService = SMSService(\"api_key_12345\")\n    private val emailContentService = EmailContentService()\n    private val tokenService = TokenGenerationService()\n    private val validationService = ValidationService()\n    private val passwordService = PasswordService()\n    private val securityService = SecurityService()\n    \n    fun sendWelcomeEmail(user: User) {\n        val subject = \"Welcome to our platform!\"\n        val body = emailContentService.createWelcomeEmailBody(user.name)\n        emailService.sendEmail(user.email, subject, body)\n    }\n    \n    fun sendPasswordResetEmail(user: User) {\n        val resetToken = tokenService.generatePasswordResetToken()\n        val subject = \"Password Reset Request\"\n        val body = emailContentService.createPasswordResetEmailBody(user.name, resetToken)\n        emailService.sendEmail(user.email, subject, body)\n    }\n    \n    fun sendSMSVerification(user: User) {\n        user.phoneNumber?.let {\n            val smsCode = tokenService.generateSMSVerificationCode()\n            val message = \"Your verification code: $smsCode\"\n            smsService.sendSMS(it, message)\n        }\n    }\n    \n    fun changePassword(user: User, oldPassword: String, newPassword: String) {\n        val authService = AuthenticationService()\n        if (!authService.authenticate(user, oldPassword)) {\n            throw SecurityException(\"Current password is incorrect\")\n        }\n        \n        if (!validationService.validatePasswordStrength(newPassword)) {\n            throw IllegalArgumentException(\"New password does not meet strength requirements\")\n        }\n        \n        user.setPassword(passwordService.hashPassword(newPassword))\n        securityService.logSecurityEvent(\"PASSWORD_CHANGED\", \"Password changed successfully\")\n        \n        val notificationService = NotificationService()\n        notificationService.sendAccountNotification(user, \"Your password has been changed successfully.\")\n    }\n    \n    fun uploadProfilePicture(user: User, imageData: ByteArray, fileName: String) {\n        val fileService = FileService(\"/uploads\")\n        \n        if (fileService.validateImageFile(imageData, fileName)) {\n            val profileUrl = fileService.uploadFile(imageData, \"profile_${user.name}_$fileName\")\n            user.setProfilePictureUrl(profileUrl)\n            securityService.logActivityEvent(\"PROFILE_PICTURE_UPLOADED\", \"User uploaded new profile picture\", user.name)\n        } else {\n            throw IllegalArgumentException(\"Invalid image file\")\n        }\n    }\n    \n    fun updatePreference(user: User, key: String, value: String) {\n        val oldValue = user.getPreference(key)\n        user.setPreference(key, value)\n        securityService.logPreferenceChange(key, oldValue, value)\n    }\n}\n\ndata class User(\n    var name: String,\n    var email: String\n) {\n    var password: String? = null\n    var isActive: Boolean = true\n    var role: String = \"USER\"\n    var lastLogin: Date? = null\n    var loginAttempts: Int = 0\n    var phoneNumber: String? = null\n    var registrationDate: Date = Date()\n    private val loginHistory: MutableList<String> = mutableListOf()\n    private val preferences: MutableMap<String, String> = mutableMapOf()\n    private val notifications: MutableList<String> = mutableListOf()\n    var profilePictureUrl: String? = null\n    var emailVerified: Boolean = false\n    \n    init {\n        initializeDefaultPreferences()\n    }\n    \n    private fun initializeDefaultPreferences() {\n        preferences[\"theme\"] = \"light\"\n        preferences[\"language\"] = \"en\"\n        preferences[\"notifications\"] = \"enabled\"\n    }\n    \n    fun addToLoginHistory(entry: String) {\n        val timestampedEntry = \"${Date()}: $entry\"\n        loginHistory.add(timestampedEntry)\n        if (loginHistory.size > 100) {\n            loginHistory.removeAt(0)\n        }\n    }\n    \n    fun addNotification(message: String) {\n        val timestampedNotification = \"${Date()}: $message\"\n        notifications.add(timestampedNotification)\n        if (notifications.size > 50) {\n            notifications.removeAt(0)\n        }\n    }\n    \n    fun clearLoginHistory() {\n        loginHistory.clear()\n    }\n    \n    fun clearNotifications() {\n        notifications.clear()\n    }\n    \n    fun getLoginHistorySize(): Int = loginHistory.size\n    \n    fun incrementLoginAttempts() {\n        loginAttempts++\n    }\n    \n    fun resetLoginAttempts() {\n        loginAttempts = 0\n    }\n    \n    fun updateLastLogin() {\n        lastLogin = Date()\n    }\n    \n    fun getPreference(key: String): String? = preferences[key]\n    \n    fun setPreference(key: String, value: String) {\n        preferences[key] = value\n    }\n    \n    fun setActive(active: Boolean) {\n        isActive = active\n    }\n    \n    fun setEmail(email: String) {\n        this.email = email\n    }\n    \n    fun setPassword(password: String?) {\n        this.password = password\n    }\n    \n    fun setProfilePictureUrl(url: String) {\n        profilePictureUrl = url\n    }\n}",
            "level": "HARD",
            "language": "KOTLIN",
            "violation": "SRP",
            "description": "User database email operations"
        },
        {
            "input": "import java.util.*\nimport kotlin.math.min\nimport kotlin.random.Random\n\nclass PayrollSystem(private val databaseUrl: String) {\n    fun savePayrollRecord(employee: Employee, grossPay: Double, netPay: Double) {\n        println(\"Saving payroll record to database for: ${employee.name}\")\n    }\n    \n    fun generatePayrollReport(period: String) {\n        println(\"Generating payroll report for period: $period\")\n    }\n}\n\nclass EmailNotificationService(private val smtpServer: String) {\n    fun sendEmail(recipient: String, subject: String, body: String) {\n        println(\"Sending email to: $recipient\")\n        println(\"Subject: $subject\")\n    }\n}\n\nclass HRDatabase(private val connectionString: String) {\n    fun updateEmployeeRecord(employeeId: String, field: String, value: String) {\n        println(\"Updating HR record - Employee: $employeeId, Field: $field\")\n    }\n    \n    fun saveVacationRequest(employeeId: String, days: Int, approved: Boolean) {\n        println(\"Recording vacation request: $employeeId, Days: $days\")\n    }\n}\n\nclass ComplianceLogger(private val logFile: String) {\n    fun logEvent(eventType: String, description: String) {\n        println(\"[COMPLIANCE LOG] $eventType: $description\")\n    }\n}\n\nclass Employee(\n    var name: String,\n    var baseSalary: Double,\n    var yearsOfService: Int\n) {\n    var department: String? = null\n    var position: String? = null\n    val employeeId: String = generateUniqueEmployeeId()\n    val hireDate: Date = Date()\n    var performanceRating: Double = 3.0\n    var vacationDays: Int = 25\n    var usedVacationDays: Int = 0\n    var manager: String? = null\n    var email: String? = null\n    var phoneNumber: String? = null\n    var isActive: Boolean = true\n    val skillCertifications: MutableList<String> = mutableListOf()\n    val personalInfo: MutableMap<String, String> = mutableMapOf()\n    var overtimeHours: Double = 0.0\n    \n    private val payrollSystem = PayrollSystem(\"jdbc:mysql://localhost:3306/payroll\")\n    private val emailService = EmailNotificationService(\"smtp.company.com\")\n    private val hrDatabase = HRDatabase(\"jdbc:mysql://localhost:3306/hr\")\n    private val complianceLogger = ComplianceLogger(\"/var/logs/compliance.log\")\n    \n    init {\n        initializeEmployeeDefaults()\n    }\n    \n    fun calculateSalary(): Double {\n        return baseSalary + (yearsOfService * 1000)\n    }\n    \n    fun printPaySlip() {\n        println(\"Pay slip for $name: $${calculateSalary()}\")\n    }\n    \n    fun calculatePerformanceBonus(): Double {\n        val baseBonus = baseSalary * 0.12\n        val ratingMultiplier = performanceRating / 5.0\n        val serviceMultiplier = min(yearsOfService * 0.02, 0.15)\n        return baseBonus * ratingMultiplier * (1.0 + serviceMultiplier)\n    }\n    \n    fun calculateOvertimeCompensation(): Double {\n        return if (overtimeHours > 0) {\n            val hourlyRate = baseSalary / (52 * 40)\n            overtimeHours * hourlyRate * 1.5\n        } else {\n            0.0\n        }\n    }\n    \n    fun calculateTotalCompensation(): Double {\n        return calculateSalary() + calculatePerformanceBonus() + calculateOvertimeCompensation()\n    }\n    \n    fun calculateFederalTax(grossPay: Double): Double {\n        return when {\n            grossPay <= 4000 -> grossPay * 0.18\n            grossPay <= 8000 -> grossPay * 0.22\n            else -> grossPay * 0.28\n        }\n    }\n    \n    fun calculateStateTax(grossPay: Double): Double {\n        return grossPay * 0.085\n    }\n    \n    fun calculateSocialSecurityTax(grossPay: Double): Double {\n        return min(grossPay * 0.062, 8853.60)\n    }\n    \n    fun generateCompensationBreakdown(): String {\n        val salary = calculateSalary()\n        val bonus = calculatePerformanceBonus()\n        val overtime = calculateOvertimeCompensation()\n        val gross = salary + bonus + overtime\n        val federalTax = calculateFederalTax(gross)\n        val stateTax = calculateStateTax(gross)\n        val ssTax = calculateSocialSecurityTax(gross)\n        val totalTax = federalTax + stateTax + ssTax\n        val netPay = gross - totalTax\n        \n        return buildString {\n            appendLine(\"=== COMPENSATION BREAKDOWN ===\")\n            appendLine(\"Base Salary: $${String.format(\"%.2f\", salary)}\")\n            appendLine(\"Performance Bonus: $${String.format(\"%.2f\", bonus)}\")\n            appendLine(\"Overtime Pay: $${String.format(\"%.2f\", overtime)}\")\n            appendLine(\"Gross Pay: $${String.format(\"%.2f\", gross)}\")\n            appendLine(\"Federal Tax: $${String.format(\"%.2f\", federalTax)}\")\n            appendLine(\"State Tax: $${String.format(\"%.2f\", stateTax)}\")\n            appendLine(\"Social Security: $${String.format(\"%.2f\", ssTax)}\")\n            append(\"Net Pay: $${String.format(\"%.2f\", netPay)}\")\n        }\n    }\n    \n    fun processMonthlyPayroll() {\n        val grossPay = calculateTotalCompensation()\n        val netPay = grossPay - (calculateFederalTax(grossPay) + calculateStateTax(grossPay) + calculateSocialSecurityTax(grossPay))\n        \n        val breakdown = generateCompensationBreakdown()\n        println(breakdown)\n        \n        payrollSystem.savePayrollRecord(this, grossPay, netPay)\n        \n        val emailBody = createPayrollNotificationEmail(breakdown)\n        emailService.sendEmail(email ?: \"\", \"Monthly Payroll - $name\", emailBody)\n        \n        complianceLogger.logEvent(\"PAYROLL_PROCESSED\", \"Monthly payroll processed for employee: $employeeId\")\n    }\n    \n    fun createPayrollNotificationEmail(breakdown: String): String {\n        return \"Dear $name,\\n\\nYour monthly payroll has been processed.\\n\\n$breakdown\\n\\nBest regards,\\nPayroll Department\"\n    }\n    \n    fun requestVacationDays(days: Int): Boolean {\n        return if (usedVacationDays + days <= vacationDays) {\n            usedVacationDays += days\n            \n            hrDatabase.saveVacationRequest(employeeId, days, true)\n            \n            val managerEmail = createManagerNotificationEmail(days)\n            emailService.sendEmail(\"${manager}@company.com\", \"Vacation Request - $name\", managerEmail)\n            \n            logVacationActivity(days, \"APPROVED\")\n            true\n        } else {\n            logVacationActivity(days, \"DENIED\")\n            false\n        }\n    }\n    \n    fun createManagerNotificationEmail(days: Int): String {\n        return \"Manager Notification:\\n\\nEmployee $name ($employeeId) has requested $days vacation days.\\nRemaining balance: ${vacationDays - usedVacationDays} days.\\nDepartment: $department\"\n    }\n    \n    fun logVacationActivity(days: Int, status: String) {\n        val logMessage = \"Vacation request - Employee: $employeeId, Days: $days, Status: $status\"\n        complianceLogger.logEvent(\"VACATION_REQUEST\", logMessage)\n    }\n    \n    fun conductAnnualPerformanceReview() {\n        val reviewReport = generatePerformanceReviewReport()\n        println(reviewReport)\n        \n        hrDatabase.updateEmployeeRecord(employeeId, \"performance_rating\", performanceRating.toString())\n        hrDatabase.updateEmployeeRecord(employeeId, \"last_review_date\", Date().toString())\n        \n        val reviewEmail = createPerformanceReviewEmail(reviewReport)\n        emailService.sendEmail(email ?: \"\", \"Annual Performance Review - $name\", reviewEmail)\n        \n        complianceLogger.logEvent(\"PERFORMANCE_REVIEW\", \"Annual review completed for employee: $employeeId\")\n    }\n    \n    fun generatePerformanceReviewReport(): String {\n        return buildString {\n            appendLine(\"=== ANNUAL PERFORMANCE REVIEW ===\")\n            appendLine(\"Employee: $name ($employeeId)\")\n            appendLine(\"Department: $department\")\n            appendLine(\"Current Rating: $performanceRating/5.0\")\n            appendLine(\"Years of Service: $yearsOfService\")\n            appendLine(\"Certifications: ${skillCertifications.size}\")\n            \n            when {\n                performanceRating >= 4.5 -> appendLine(\"Recommendation: Promotion candidate\")\n                performanceRating < 2.5 -> appendLine(\"Recommendation: Performance improvement plan required\")\n            }\n        }.trimEnd()\n    }\n    \n    fun createPerformanceReviewEmail(report: String): String {\n        return \"Dear $name,\\n\\nYour annual performance review has been completed.\\n\\n$report\\n\\nPlease schedule a meeting to discuss.\\n\\nHR Department\"\n    }\n    \n    fun updateRatingWithNotifications(newRating: Double) {\n        val oldRating = this.performanceRating\n        this.performanceRating = newRating\n        \n        hrDatabase.updateEmployeeRecord(employeeId, \"performance_rating\", newRating.toString())\n        \n        if (kotlin.math.abs(newRating - oldRating) >= 1.0) {\n            val alertEmail = createRatingChangeAlert(oldRating, newRating)\n            emailService.sendEmail(\"hr@company.com\", \"Significant Rating Change - $name\", alertEmail)\n        }\n        \n        logPerformanceChange(oldRating, newRating)\n    }\n    \n    fun createRatingChangeAlert(oldRating: Double, newRating: Double): String {\n        val changeType = if (newRating > oldRating) \"IMPROVEMENT\" else \"DECLINE\"\n        return \"PERFORMANCE ALERT:\\n\\nEmployee: $name ($employeeId)\\nOld Rating: $oldRating\\nNew Rating: $newRating\\nChange: $changeType\"\n    }\n    \n    fun logPerformanceChange(oldRating: Double, newRating: Double) {\n        val change = \"Performance rating changed - Employee: $employeeId, From: $oldRating, To: $newRating\"\n        complianceLogger.logEvent(\"RATING_CHANGE\", change)\n    }\n    \n    fun addSkillCertification(certification: String) {\n        skillCertifications.add(certification)\n        hrDatabase.updateEmployeeRecord(employeeId, \"certifications\", skillCertifications.joinToString(\",\"))\n        complianceLogger.logEvent(\"CERTIFICATION_ADDED\", \"New certification added for $employeeId: $certification\")\n    }\n    \n    fun generateUniqueEmployeeId(): String {\n        val timestamp = System.currentTimeMillis() % 100000\n        val randomNum = Random.nextInt(1000)\n        return \"EMP$timestamp$randomNum\"\n    }\n    \n    fun initializeEmployeeDefaults() {\n        personalInfo[\"emergency_contact\"] = \"\"\n        personalInfo[\"bank_routing\"] = \"\"\n        personalInfo[\"tax_filing_status\"] = \"single\"\n    }\n    \n    fun updatePersonalInformation(field: String, value: String) {\n        personalInfo[field] = value\n        hrDatabase.updateEmployeeRecord(employeeId, field, value)\n        complianceLogger.logEvent(\"PERSONAL_INFO_UPDATE\", \"Updated $field for employee: $employeeId\")\n    }\n}",
            "output": "import java.util.*\nimport kotlin.math.min\nimport kotlin.math.abs\nimport kotlin.random.Random\n\nclass PayrollSystem(private val databaseUrl: String) {\n    fun savePayrollRecord(employee: Employee, grossPay: Double, netPay: Double) {\n        println(\"Saving payroll record to database for: ${employee.name}\")\n    }\n    \n    fun generatePayrollReport(period: String) {\n        println(\"Generating payroll report for period: $period\")\n    }\n}\n\nclass EmailNotificationService(private val smtpServer: String) {\n    fun sendEmail(recipient: String, subject: String, body: String) {\n        println(\"Sending email to: $recipient\")\n        println(\"Subject: $subject\")\n    }\n}\n\nclass HRDatabase(private val connectionString: String) {\n    fun updateEmployeeRecord(employeeId: String, field: String, value: String) {\n        println(\"Updating HR record - Employee: $employeeId, Field: $field\")\n    }\n    \n    fun saveVacationRequest(employeeId: String, days: Int, approved: Boolean) {\n        println(\"Recording vacation request: $employeeId, Days: $days\")\n    }\n}\n\nclass ComplianceLogger(private val logFile: String) {\n    fun logEvent(eventType: String, description: String) {\n        println(\"[COMPLIANCE LOG] $eventType: $description\")\n    }\n}\n\nclass SalaryCalculationService {\n    fun calculateBaseSalary(baseSalary: Double, yearsOfService: Int): Double {\n        return baseSalary + (yearsOfService * 1000)\n    }\n    \n    fun calculatePerformanceBonus(baseSalary: Double, performanceRating: Double, yearsOfService: Int): Double {\n        val baseBonus = baseSalary * 0.12\n        val ratingMultiplier = performanceRating / 5.0\n        val serviceMultiplier = min(yearsOfService * 0.02, 0.15)\n        return baseBonus * ratingMultiplier * (1.0 + serviceMultiplier)\n    }\n    \n    fun calculateOvertimeCompensation(baseSalary: Double, overtimeHours: Double): Double {\n        return if (overtimeHours > 0) {\n            val hourlyRate = baseSalary / (52 * 40)\n            overtimeHours * hourlyRate * 1.5\n        } else {\n            0.0\n        }\n    }\n    \n    fun calculateTotalCompensation(baseSalary: Double, yearsOfService: Int, performanceRating: Double, overtimeHours: Double): Double {\n        val salary = calculateBaseSalary(baseSalary, yearsOfService)\n        val bonus = calculatePerformanceBonus(baseSalary, performanceRating, yearsOfService)\n        val overtime = calculateOvertimeCompensation(baseSalary, overtimeHours)\n        return salary + bonus + overtime\n    }\n}\n\nclass TaxCalculationService {\n    fun calculateFederalTax(grossPay: Double): Double {\n        return when {\n            grossPay <= 4000 -> grossPay * 0.18\n            grossPay <= 8000 -> grossPay * 0.22\n            else -> grossPay * 0.28\n        }\n    }\n    \n    fun calculateStateTax(grossPay: Double): Double {\n        return grossPay * 0.085\n    }\n    \n    fun calculateSocialSecurityTax(grossPay: Double): Double {\n        return min(grossPay * 0.062, 8853.60)\n    }\n    \n    fun calculateTotalTax(grossPay: Double): Double {\n        return calculateFederalTax(grossPay) + calculateStateTax(grossPay) + calculateSocialSecurityTax(grossPay)\n    }\n}\n\nclass EmailContentService {\n    fun createPayrollNotificationEmail(employeeName: String, breakdown: String): String {\n        return \"Dear $employeeName,\\n\\nYour monthly payroll has been processed.\\n\\n$breakdown\\n\\nBest regards,\\nPayroll Department\"\n    }\n    \n    fun createManagerNotificationEmail(employeeName: String, employeeId: String, days: Int, remainingDays: Int, department: String?): String {\n        return \"Manager Notification:\\n\\nEmployee $employeeName ($employeeId) has requested $days vacation days.\\nRemaining balance: $remainingDays days.\\nDepartment: $department\"\n    }\n    \n    fun createPerformanceReviewEmail(employeeName: String, report: String): String {\n        return \"Dear $employeeName,\\n\\nYour annual performance review has been completed.\\n\\n$report\\n\\nPlease schedule a meeting to discuss.\\n\\nHR Department\"\n    }\n    \n    fun createRatingChangeAlert(employeeName: String, employeeId: String, oldRating: Double, newRating: Double): String {\n        val changeType = if (newRating > oldRating) \"IMPROVEMENT\" else \"DECLINE\"\n        return \"PERFORMANCE ALERT:\\n\\nEmployee: $employeeName ($employeeId)\\nOld Rating: $oldRating\\nNew Rating: $newRating\\nChange: $changeType\"\n    }\n}\n\nclass ReportGenerationService {\n    fun generateCompensationBreakdown(employee: Employee, salaryService: SalaryCalculationService, taxService: TaxCalculationService): String {\n        val salary = salaryService.calculateBaseSalary(employee.baseSalary, employee.yearsOfService)\n        val bonus = salaryService.calculatePerformanceBonus(employee.baseSalary, employee.performanceRating, employee.yearsOfService)\n        val overtime = salaryService.calculateOvertimeCompensation(employee.baseSalary, employee.overtimeHours)\n        val gross = salary + bonus + overtime\n        val federalTax = taxService.calculateFederalTax(gross)\n        val stateTax = taxService.calculateStateTax(gross)\n        val ssTax = taxService.calculateSocialSecurityTax(gross)\n        val totalTax = federalTax + stateTax + ssTax\n        val netPay = gross - totalTax\n        \n        return buildString {\n            appendLine(\"=== COMPENSATION BREAKDOWN ===\")\n            appendLine(\"Base Salary: $${String.format(\"%.2f\", salary)}\")\n            appendLine(\"Performance Bonus: $${String.format(\"%.2f\", bonus)}\")\n            appendLine(\"Overtime Pay: $${String.format(\"%.2f\", overtime)}\")\n            appendLine(\"Gross Pay: $${String.format(\"%.2f\", gross)}\")\n            appendLine(\"Federal Tax: $${String.format(\"%.2f\", federalTax)}\")\n            appendLine(\"State Tax: $${String.format(\"%.2f\", stateTax)}\")\n            appendLine(\"Social Security: $${String.format(\"%.2f\", ssTax)}\")\n            append(\"Net Pay: $${String.format(\"%.2f\", netPay)}\")\n        }\n    }\n    \n    fun generatePerformanceReviewReport(employee: Employee): String {\n        return buildString {\n            appendLine(\"=== ANNUAL PERFORMANCE REVIEW ===\")\n            appendLine(\"Employee: ${employee.name} (${employee.employeeId})\")\n            appendLine(\"Department: ${employee.department}\")\n            appendLine(\"Current Rating: ${employee.performanceRating}/5.0\")\n            appendLine(\"Years of Service: ${employee.yearsOfService}\")\n            appendLine(\"Certifications: ${employee.skillCertifications.size}\")\n            \n            when {\n                employee.performanceRating >= 4.5 -> appendLine(\"Recommendation: Promotion candidate\")\n                employee.performanceRating < 2.5 -> appendLine(\"Recommendation: Performance improvement plan required\")\n            }\n        }.trimEnd()\n    }\n    \n    fun printPaySlip(employee: Employee, salaryService: SalaryCalculationService) {\n        val salary = salaryService.calculateBaseSalary(employee.baseSalary, employee.yearsOfService)\n        println(\"Pay slip for ${employee.name}: $$salary\")\n    }\n}\n\nclass PayrollProcessingService {\n    private val payrollSystem = PayrollSystem(\"mysql://localhost:3306/payroll\")\n    private val emailService = EmailNotificationService(\"smtp.company.com\")\n    private val complianceLogger = ComplianceLogger(\"/var/logs/compliance.log\")\n    private val salaryService = SalaryCalculationService()\n    private val taxService = TaxCalculationService()\n    private val reportService = ReportGenerationService()\n    private val emailContentService = EmailContentService()\n    \n    fun processMonthlyPayroll(employee: Employee) {\n        val grossPay = salaryService.calculateTotalCompensation(\n            employee.baseSalary, employee.yearsOfService,\n            employee.performanceRating, employee.overtimeHours\n        )\n        val totalTax = taxService.calculateTotalTax(grossPay)\n        val netPay = grossPay - totalTax\n        \n        val breakdown = reportService.generateCompensationBreakdown(employee, salaryService, taxService)\n        println(breakdown)\n        \n        payrollSystem.savePayrollRecord(employee, grossPay, netPay)\n        \n        val emailBody = emailContentService.createPayrollNotificationEmail(employee.name, breakdown)\n        emailService.sendEmail(employee.email ?: \"\", \"Monthly Payroll - ${employee.name}\", emailBody)\n        \n        complianceLogger.logEvent(\"PAYROLL_PROCESSED\", \"Monthly payroll processed for employee: ${employee.employeeId}\")\n    }\n}\n\nclass VacationManagementService {\n    private val hrDatabase = HRDatabase(\"mysql://localhost:3306/hr\")\n    private val emailService = EmailNotificationService(\"smtp.company.com\")\n    private val complianceLogger = ComplianceLogger(\"/var/logs/compliance.log\")\n    private val emailContentService = EmailContentService()\n    \n    fun requestVacationDays(employee: Employee, days: Int): Boolean {\n        return if (employee.usedVacationDays + days <= employee.vacationDays) {\n            employee.usedVacationDays += days\n            \n            hrDatabase.saveVacationRequest(employee.employeeId, days, true)\n            \n            val managerEmail = emailContentService.createManagerNotificationEmail(\n                employee.name, employee.employeeId, days,\n                employee.vacationDays - employee.usedVacationDays, employee.department\n            )\n            emailService.sendEmail(\"${employee.manager}@company.com\", \"Vacation Request - ${employee.name}\", managerEmail)\n            \n            logVacationActivity(employee.employeeId, days, \"APPROVED\")\n            true\n        } else {\n            logVacationActivity(employee.employeeId, days, \"DENIED\")\n            false\n        }\n    }\n    \n    private fun logVacationActivity(employeeId: String, days: Int, status: String) {\n        val logMessage = \"Vacation request - Employee: $employeeId, Days: $days, Status: $status\"\n        complianceLogger.logEvent(\"VACATION_REQUEST\", logMessage)\n    }\n}\n\nclass PerformanceManagementService {\n    private val hrDatabase = HRDatabase(\"mysql://localhost:3306/hr\")\n    private val emailService = EmailNotificationService(\"smtp.company.com\")\n    private val complianceLogger = ComplianceLogger(\"/var/logs/compliance.log\")\n    private val reportService = ReportGenerationService()\n    private val emailContentService = EmailContentService()\n    \n    fun conductAnnualPerformanceReview(employee: Employee) {\n        val reviewReport = reportService.generatePerformanceReviewReport(employee)\n        println(reviewReport)\n        \n        hrDatabase.updateEmployeeRecord(employee.employeeId, \"performance_rating\", employee.performanceRating.toString())\n        hrDatabase.updateEmployeeRecord(employee.employeeId, \"last_review_date\", Date().toString())\n        \n        val reviewEmail = emailContentService.createPerformanceReviewEmail(employee.name, reviewReport)\n        emailService.sendEmail(employee.email ?: \"\", \"Annual Performance Review - ${employee.name}\", reviewEmail)\n        \n        complianceLogger.logEvent(\"PERFORMANCE_REVIEW\", \"Annual review completed for employee: ${employee.employeeId}\")\n    }\n    \n    fun updateRatingWithNotifications(employee: Employee, newRating: Double) {\n        val oldRating = employee.performanceRating\n        employee.performanceRating = newRating\n        \n        hrDatabase.updateEmployeeRecord(employee.employeeId, \"performance_rating\", newRating.toString())\n        \n        if (abs(newRating - oldRating) >= 1.0) {\n            val alertEmail = emailContentService.createRatingChangeAlert(employee.name, employee.employeeId, oldRating, newRating)\n            emailService.sendEmail(\"hr@company.com\", \"Significant Rating Change - ${employee.name}\", alertEmail)\n        }\n        \n        logPerformanceChange(employee.employeeId, oldRating, newRating)\n    }\n    \n    private fun logPerformanceChange(employeeId: String, oldRating: Double, newRating: Double) {\n        val change = \"Performance rating changed - Employee: $employeeId, From: $oldRating, To: $newRating\"\n        complianceLogger.logEvent(\"RATING_CHANGE\", change)\n    }\n}\n\nclass EmployeeDataManagementService {\n    private val hrDatabase = HRDatabase(\"mysql://localhost:3306/hr\")\n    private val complianceLogger = ComplianceLogger(\"/var/logs/compliance.log\")\n    \n    fun addSkillCertification(employee: Employee, certification: String) {\n        employee.skillCertifications.add(certification)\n        hrDatabase.updateEmployeeRecord(employee.employeeId, \"certifications\", employee.skillCertifications.joinToString(\",\"))\n        complianceLogger.logEvent(\"CERTIFICATION_ADDED\", \"New certification added for ${employee.employeeId}: $certification\")\n    }\n    \n    fun updatePersonalInformation(employee: Employee, field: String, value: String) {\n        employee.personalInfo[field] = value\n        hrDatabase.updateEmployeeRecord(employee.employeeId, field, value)\n        complianceLogger.logEvent(\"PERSONAL_INFO_UPDATE\", \"Updated $field for employee: ${employee.employeeId}\")\n    }\n}\n\nclass EmployeeIdGenerationService {\n    fun generateUniqueEmployeeId(): String {\n        val timestamp = System.currentTimeMillis() % 100000\n        val randomNum = Random.nextInt(1000)\n        return \"EMP$timestamp$randomNum\"\n    }\n}\n\nclass Employee(\n    var name: String,\n    var baseSalary: Double,\n    var yearsOfService: Int\n) {\n    var department: String? = null\n    var position: String? = null\n    val employeeId: String\n    val hireDate: Date = Date()\n    var performanceRating: Double = 3.0\n    var vacationDays: Int = 25\n    var usedVacationDays: Int = 0\n    var manager: String? = null\n    var email: String? = null\n    var phoneNumber: String? = null\n    var isActive: Boolean = true\n    val skillCertifications: MutableList<String> = mutableListOf()\n    val personalInfo: MutableMap<String, String> = mutableMapOf()\n    var overtimeHours: Double = 0.0\n    \n    init {\n        val idService = EmployeeIdGenerationService()\n        this.employeeId = idService.generateUniqueEmployeeId()\n        initializeEmployeeDefaults()\n    }\n    \n    private fun initializeEmployeeDefaults() {\n        personalInfo[\"emergency_contact\"] = \"\"\n        personalInfo[\"bank_routing\"] = \"\"\n        personalInfo[\"tax_filing_status\"] = \"single\"\n    }\n}",
            "level": "HARD",
            "language": "KOTLIN",
            "violation": "SRP",
            "description": "Employee salary payslip system"
        },
        {
            "input": "import java.util.*\nimport kotlin.math.max\nimport kotlin.math.min\nimport kotlin.random.Random\n\nclass FileStorage(private val basePath: String) {\n    fun saveToFile(filename: String, content: String) {\n        println(\"Saving content to file: $basePath/$filename\")\n    }\n    \n    fun loadFromFile(filename: String): String {\n        println(\"Loading content from file: $basePath/$filename\")\n        return \"file content\"\n    }\n    \n    fun deleteFile(filename: String) {\n        println(\"Deleting file: $basePath/$filename\")\n    }\n}\n\nclass EmailService(private val smtpServer: String) {\n    fun sendEmail(recipient: String, subject: String, body: String) {\n        println(\"Sending email to: $recipient\")\n        println(\"Subject: $subject\")\n    }\n    \n    fun sendBulkEmail(recipients: List<String>, subject: String, body: String) {\n        println(\"Sending bulk email to ${recipients.size} recipients\")\n    }\n}\n\nclass DatabaseService(private val connectionString: String) {\n    fun saveBook(book: Book) {\n        println(\"Saving book to database: ${book.title}\")\n    }\n    \n    fun updateSalesData(isbn: String, sales: Int) {\n        println(\"Updating sales data for ISBN: $isbn\")\n    }\n    \n    fun logTransaction(type: String, details: String) {\n        println(\"[DB LOG] $type: $details\")\n    }\n}\n\nclass PrinterService(private val printerName: String) {\n    fun print(document: String) {\n        println(\"Printing on $printerName: ${document.substring(0, min(50, document.length))}...\")\n    }\n    \n    fun printReport(report: String) {\n        println(\"Printing report on $printerName\")\n    }\n}\n\nclass Book(var title: String, val author: String, var content: String) {\n    var isbn: String = \"\"\n    val publishDate: Date = Date()\n    var genre: String = \"\"\n    var pageCount: Int = 0\n    var price: Double = 0.0\n    var publisher: String = \"\"\n    val reviews: MutableList<String> = mutableListOf()\n    var averageRating: Double = 0.0\n    var totalSales: Int = 0\n    val customerEmails: MutableList<String> = mutableListOf()\n    var isAvailable: Boolean = true\n    var format: String = \"paperback\"\n    var discountRate: Double = 0.0\n    \n    private val fileStorage = FileStorage(\"/books/storage\")\n    private val emailService = EmailService(\"smtp.bookstore.com\")\n    private val dbService = DatabaseService(\"jdbc:mysql://localhost:3306/bookstore\")\n    private val printer = PrinterService(\"BookStore_Printer_001\")\n    \n    init {\n        initializeBookDefaults()\n    }\n    \n    fun printBook() {\n        println(\"Title: $title\\nAuthor: $author\\nContent: $content\")\n    }\n    \n    fun saveToFile(filename: String) {\n        val bookData = formatCompleteBookData()\n        fileStorage.saveToFile(filename, bookData)\n        dbService.saveBook(this)\n    }\n    \n    fun formatCompleteBookData(): String {\n        return \"TITLE: $title\\nAUTHOR: $author\\nISBN: $isbn\\nGENRE: $genre\\nPAGES: $pageCount\\nPRICE: $${calculateFinalPrice()}\\nFORMAT: $format\\nPUBLISHER: $publisher\\nRATING: $averageRating\\nSALES: $totalSales\\nAVAILABLE: $isAvailable\\nCONTENT: $content\"\n    }\n    \n    fun generateUniqueISBN() {\n        val timestamp = System.currentTimeMillis()\n        val category = if (genre == \"fiction\") \"FIC\" else \"NF\"\n        isbn = \"978-$category-${timestamp % 100000}-${String.format(\"%02d\", Random.nextInt(100))}\"\n    }\n    \n    fun calculateDynamicPageCount() {\n        if (content.isNotEmpty()) {\n            val basePages = content.length / 250\n            val formatMultiplier = if (format == \"hardcover\") 1.2 else 1.0\n            pageCount = max(1, (basePages * formatMultiplier).toInt())\n        }\n    }\n    \n    fun validateCompleteBookData(): Boolean {\n        return title.isNotBlank() && \n               author.isNotBlank() && \n               validateISBNFormat(isbn) && \n               validatePriceRange(price) && \n               content.isNotEmpty()\n    }\n    \n    fun validateISBNFormat(isbn: String): Boolean {\n        if (isbn.isEmpty()) return false\n        val clean = isbn.replace(\"[^0-9X]\".toRegex(), \"\")\n        return clean.length == 10 || clean.length == 13\n    }\n    \n    fun validatePriceRange(price: Double): Boolean {\n        return price in 0.99..999.99\n    }\n    \n    fun processCustomerReview(customerEmail: String, review: String, rating: Double) {\n        if (rating in 1.0..5.0) {\n            reviews.add(review)\n            customerEmails.add(customerEmail)\n            recalculateRatingMetrics(rating)\n            sendReviewConfirmationEmail(customerEmail)\n            logReviewActivity(customerEmail, rating)\n        }\n    }\n    \n    fun recalculateRatingMetrics(newRating: Double) {\n        averageRating = if (reviews.size == 1) {\n            newRating\n        } else {\n            (averageRating * (reviews.size - 1) + newRating) / reviews.size\n        }\n    }\n    \n    fun sendReviewConfirmationEmail(customerEmail: String) {\n        val subject = \"Thank you for reviewing: $title\"\n        val body = createReviewThankYouEmail()\n        emailService.sendEmail(customerEmail, subject, body)\n    }\n    \n    fun createReviewThankYouEmail(): String {\n        return \"Dear Reader,\\n\\nThank you for reviewing '$title' by $author.\\nYour feedback helps other readers discover great books!\\n\\nBest regards,\\nBookstore Team\"\n    }\n    \n    fun logReviewActivity(customerEmail: String, rating: Double) {\n        val logDetails = \"Review added - Book: $isbn, Customer: $customerEmail, Rating: $rating\"\n        dbService.logTransaction(\"REVIEW_ADDED\", logDetails)\n    }\n    \n    fun processSaleTransaction(customerEmail: String) {\n        totalSales++\n        customerEmails.add(customerEmail)\n        \n        updateInventoryStatus()\n        \n        dbService.updateSalesData(isbn, totalSales)\n        \n        val receiptEmail = generateSalesReceiptEmail()\n        emailService.sendEmail(customerEmail, \"Purchase Confirmation - $title\", receiptEmail)\n        \n        logSalesTransaction(customerEmail)\n        \n        if (totalSales % 100 == 0) {\n            sendMilestoneNotification()\n        }\n    }\n    \n    fun updateInventoryStatus() {\n        if (totalSales > 1000) {\n            isAvailable = Random.nextDouble() > 0.1\n        }\n    }\n    \n    fun generateSalesReceiptEmail(): String {\n        val finalPrice = calculateFinalPrice()\n        return \"PURCHASE RECEIPT\\n\\nTitle: $title\\nAuthor: $author\\nISBN: $isbn\\nFormat: $format\\nOriginal Price: $$price\\nDiscount: ${discountRate * 100}%\\nFinal Price: $${String.format(\"%.2f\", finalPrice)}\\nThank you for your purchase!\"\n    }\n    \n    fun logSalesTransaction(customerEmail: String) {\n        val logDetails = \"Sale completed - Book: $isbn, Customer: $customerEmail, Price: $${calculateFinalPrice()}\"\n        dbService.logTransaction(\"SALE_COMPLETED\", logDetails)\n    }\n    \n    fun sendMilestoneNotification() {\n        val subject = \"Sales Milestone Reached: $title\"\n        val body = \"Congratulations! '$title' has reached $totalSales sales!\"\n        emailService.sendEmail(\"sales@bookstore.com\", subject, body)\n    }\n    \n    fun calculateFinalPrice(): Double {\n        return price * (1.0 - discountRate)\n    }\n    \n    fun calculateAuthorRoyalty(): Double {\n        val baseRate = when {\n            totalSales > 5000 -> 0.18\n            totalSales > 1000 -> 0.15\n            else -> 0.10\n        }\n        return totalSales * calculateFinalPrice() * baseRate\n    }\n    \n    fun generateComprehensiveReport(): String {\n        val revenue = totalSales * calculateFinalPrice()\n        val royalty = calculateAuthorRoyalty()\n        return \"=== COMPREHENSIVE BOOK REPORT ===\\nTitle: $title\\nAuthor: $author\\nISBN: $isbn\\nGenre: $genre\\nFormat: $format\\nTotal Sales: $totalSales\\nRevenue: $${String.format(\"%.2f\", revenue)}\\nAuthor Royalty: $${String.format(\"%.2f\", royalty)}\\nAverage Rating: ${String.format(\"%.2f\", averageRating)}\\nReviews: ${reviews.size}\\nAvailable: $isAvailable\"\n    }\n    \n    fun printDetailedReport() {\n        val report = generateComprehensiveReport()\n        println(report)\n        printer.printReport(report)\n    }\n    \n    fun sendMarketingCampaign() {\n        if (customerEmails.isNotEmpty()) {\n            val campaignEmail = createMarketingEmail()\n            emailService.sendBulkEmail(customerEmails, \"New Release from $author\", campaignEmail)\n            logMarketingActivity()\n        }\n    }\n    \n    fun createMarketingEmail(): String {\n        return \"Dear Valued Reader,\\n\\nSince you enjoyed '$title', you might like our new releases from $author.\\nCheck out our latest collection with special discounts!\\n\\nHappy Reading!\"\n    }\n    \n    fun logMarketingActivity() {\n        dbService.logTransaction(\"MARKETING_SENT\", \"Campaign sent for book: $isbn to ${customerEmails.size} customers\")\n    }\n    \n    fun exportToMultipleFormats() {\n        val jsonData = \"{\\\"title\\\":\\\"$title\\\",\\\"author\\\":\\\"$author\\\",\\\"isbn\\\":\\\"$isbn\\\",\\\"sales\\\":$totalSales,\\\"rating\\\":$averageRating}\"\n        fileStorage.saveToFile(\"$isbn.json\", jsonData)\n        \n        val xmlData = \"<book><title>$title</title><author>$author</author><isbn>$isbn</isbn><sales>$totalSales</sales></book>\"\n        fileStorage.saveToFile(\"$isbn.xml\", xmlData)\n    }\n    \n    fun initializeBookDefaults() {\n        generateUniqueISBN()\n        calculateDynamicPageCount()\n        genre = \"general\"\n        price = 19.99\n        publisher = \"Independent Press\"\n    }\n    \n    fun applyDiscount(discountPercentage: Double) {\n        if (discountPercentage in 0.0..0.5) {\n            discountRate = discountPercentage\n            notifyCustomersOfDiscount()\n        }\n    }\n    \n    fun notifyCustomersOfDiscount() {\n        if (customerEmails.isNotEmpty()) {\n            val discountEmail = \"Special Offer: ${discountRate * 100}% off on '$title'! Limited time only.\"\n            emailService.sendBulkEmail(customerEmails, \"Special Discount - $title\", discountEmail)\n        }\n    }\n    \n    fun setContent(newContent: String) {\n        content = newContent\n        calculateDynamicPageCount()\n    }\n    \n    fun setPrice(newPrice: Double) {\n        if (validatePriceRange(newPrice)) {\n            price = newPrice\n        }\n    }\n    \n    fun setFormat(newFormat: String) {\n        format = newFormat\n        calculateDynamicPageCount()\n    }\n}",
            "output": "import java.util.*\nimport kotlin.math.max\nimport kotlin.math.min\nimport kotlin.random.Random\n\nclass FileStorage(private val basePath: String) {\n    fun saveToFile(filename: String, content: String) {\n        println(\"Saving content to file: $basePath/$filename\")\n    }\n    \n    fun loadFromFile(filename: String): String {\n        println(\"Loading content from file: $basePath/$filename\")\n        return \"file content\"\n    }\n    \n    fun deleteFile(filename: String) {\n        println(\"Deleting file: $basePath/$filename\")\n    }\n}\n\nclass EmailService(private val smtpServer: String) {\n    fun sendEmail(recipient: String, subject: String, body: String) {\n        println(\"Sending email to: $recipient\")\n        println(\"Subject: $subject\")\n    }\n    \n    fun sendBulkEmail(recipients: List<String>, subject: String, body: String) {\n        println(\"Sending bulk email to ${recipients.size} recipients\")\n    }\n}\n\nclass DatabaseService(private val connectionString: String) {\n    fun saveBook(book: Book) {\n        println(\"Saving book to database: ${book.title}\")\n    }\n    \n    fun updateSalesData(isbn: String, sales: Int) {\n        println(\"Updating sales data for ISBN: $isbn\")\n    }\n    \n    fun logTransaction(type: String, details: String) {\n        println(\"[DB LOG] $type: $details\")\n    }\n}\n\nclass PrinterService(private val printerName: String) {\n    fun print(document: String) {\n        println(\"Printing on $printerName: ${document.substring(0, min(50, document.length))}...\")\n    }\n    \n    fun printReport(report: String) {\n        println(\"Printing report on $printerName\")\n    }\n}\n\nclass ISBNGenerationService {\n    fun generateUniqueISBN(genre: String?): String {\n        val timestamp = System.currentTimeMillis()\n        val category = if (genre == \"fiction\") \"FIC\" else \"NF\"\n        return \"978-$category-${timestamp % 100000}-${String.format(\"%02d\", Random.nextInt(100))}\"\n    }\n}\n\nclass PageCalculationService {\n    fun calculateDynamicPageCount(content: String?, format: String?): Int {\n        return if (!content.isNullOrEmpty()) {\n            val basePages = content.length / 250\n            val formatMultiplier = if (format == \"hardcover\") 1.2 else 1.0\n            max(1, (basePages * formatMultiplier).toInt())\n        } else {\n            1\n        }\n    }\n}\n\nclass ValidationService {\n    fun validateCompleteBookData(\n        title: String?,\n        author: String?,\n        isbn: String?,\n        price: Double,\n        content: String?\n    ): Boolean {\n        return !title.isNullOrBlank() &&\n               !author.isNullOrBlank() &&\n               validateISBNFormat(isbn) &&\n               validatePriceRange(price) &&\n               !content.isNullOrEmpty()\n    }\n    \n    fun validateISBNFormat(isbn: String?): Boolean {\n        if (isbn.isNullOrEmpty()) return false\n        val clean = isbn.replace(\"[^0-9X]\".toRegex(), \"\")\n        return clean.length == 10 || clean.length == 13\n    }\n    \n    fun validatePriceRange(price: Double): Boolean {\n        return price in 0.99..999.99\n    }\n    \n    fun validateRating(rating: Double): Boolean {\n        return rating in 1.0..5.0\n    }\n    \n    fun validateDiscountRate(discountPercentage: Double): Boolean {\n        return discountPercentage in 0.0..0.5\n    }\n}\n\nclass ReviewManagementService {\n    private val emailService = EmailService(\"smtp.bookstore.com\")\n    private val dbService = DatabaseService(\"jdbc:mysql://localhost:3306/bookstore\")\n    private val emailContentService = EmailContentService()\n    \n    fun processCustomerReview(\n        book: Book,\n        customerEmail: String,\n        review: String,\n        rating: Double\n    ) {\n        val validator = ValidationService()\n        if (validator.validateRating(rating)) {\n            book.reviews.add(review)\n            book.customerEmails.add(customerEmail)\n            book.averageRating = recalculateRatingMetrics(\n                book.averageRating,\n                book.reviews.size,\n                rating\n            )\n            sendReviewConfirmationEmail(book, customerEmail)\n            logReviewActivity(book.isbn, customerEmail, rating)\n        }\n    }\n    \n    private fun recalculateRatingMetrics(\n        currentAverage: Double,\n        reviewCount: Int,\n        newRating: Double\n    ): Double {\n        return if (reviewCount == 1) {\n            newRating\n        } else {\n            (currentAverage * (reviewCount - 1) + newRating) / reviewCount\n        }\n    }\n    \n    private fun sendReviewConfirmationEmail(book: Book, customerEmail: String) {\n        val subject = \"Thank you for reviewing: ${book.title}\"\n        val body = emailContentService.createReviewThankYouEmail(book.title, book.author)\n        emailService.sendEmail(customerEmail, subject, body)\n    }\n    \n    private fun logReviewActivity(isbn: String, customerEmail: String, rating: Double) {\n        val logDetails = \"Review added - Book: $isbn, Customer: $customerEmail, Rating: $rating\"\n        dbService.logTransaction(\"REVIEW_ADDED\", logDetails)\n    }\n}\n\nclass SalesManagementService {\n    private val dbService = DatabaseService(\"jdbc:mysql://localhost:3306/bookstore\")\n    private val emailService = EmailService(\"smtp.bookstore.com\")\n    private val emailContentService = EmailContentService()\n    private val inventoryService = InventoryManagementService()\n    \n    fun processSaleTransaction(book: Book, customerEmail: String) {\n        book.totalSales++\n        book.customerEmails.add(customerEmail)\n        \n        inventoryService.updateInventoryStatus(book)\n        \n        dbService.updateSalesData(book.isbn, book.totalSales)\n        \n        val receiptEmail = emailContentService.generateSalesReceiptEmail(book)\n        emailService.sendEmail(\n            customerEmail,\n            \"Purchase Confirmation - ${book.title}\",\n            receiptEmail\n        )\n        \n        logSalesTransaction(book, customerEmail)\n        \n        if (book.totalSales % 100 == 0) {\n            sendMilestoneNotification(book)\n        }\n    }\n    \n    private fun logSalesTransaction(book: Book, customerEmail: String) {\n        val pricingService = PricingService()\n        val finalPrice = pricingService.calculateFinalPrice(book.price, book.discountRate)\n        val logDetails = \"Sale completed - Book: ${book.isbn}, Customer: $customerEmail, Price: $$finalPrice\"\n        dbService.logTransaction(\"SALE_COMPLETED\", logDetails)\n    }\n    \n    private fun sendMilestoneNotification(book: Book) {\n        val subject = \"Sales Milestone Reached: ${book.title}\"\n        val body = \"Congratulations! '${book.title}' has reached ${book.totalSales} sales!\"\n        emailService.sendEmail(\"sales@bookstore.com\", subject, body)\n    }\n}\n\nclass PricingService {\n    fun calculateFinalPrice(price: Double, discountRate: Double): Double {\n        return price * (1.0 - discountRate)\n    }\n    \n    fun calculateAuthorRoyalty(totalSales: Int, finalPrice: Double): Double {\n        val baseRate = when {\n            totalSales > 5000 -> 0.18\n            totalSales > 1000 -> 0.15\n            else -> 0.10\n        }\n        return totalSales * finalPrice * baseRate\n    }\n}\n\nclass InventoryManagementService {\n    fun updateInventoryStatus(book: Book) {\n        if (book.totalSales > 1000) {\n            book.isAvailable = Random.nextDouble() > 0.1\n        }\n    }\n}\n\nclass EmailContentService {\n    fun createReviewThankYouEmail(title: String, author: String): String {\n        return \"Dear Reader,\\n\\nThank you for reviewing '$title' by $author.\\nYour feedback helps other readers discover great books!\\n\\nBest regards,\\nBookstore Team\"\n    }\n    \n    fun generateSalesReceiptEmail(book: Book): String {\n        val pricingService = PricingService()\n        val finalPrice = pricingService.calculateFinalPrice(book.price, book.discountRate)\n        return \"PURCHASE RECEIPT\\n\\nTitle: ${book.title}\\nAuthor: ${book.author}\\nISBN: ${book.isbn}\\nFormat: ${book.format}\\nOriginal Price: $${book.price}\\nDiscount: ${book.discountRate * 100}%\\nFinal Price: $${String.format(\"%.2f\", finalPrice)}\\nThank you for your purchase!\"\n    }\n    \n    fun createMarketingEmail(title: String, author: String): String {\n        return \"Dear Valued Reader,\\n\\nSince you enjoyed '$title', you might like our new releases from $author.\\nCheck out our latest collection with special discounts!\\n\\nHappy Reading!\"\n    }\n    \n    fun createDiscountNotificationEmail(title: String, discountRate: Double): String {\n        return \"Special Offer: ${discountRate * 100}% off on '$title'! Limited time only.\"\n    }\n}\n\nclass DataFormattingService {\n    fun formatCompleteBookData(book: Book): String {\n        val pricingService = PricingService()\n        val finalPrice = pricingService.calculateFinalPrice(book.price, book.discountRate)\n        return \"TITLE: ${book.title}\\nAUTHOR: ${book.author}\\nISBN: ${book.isbn}\\nGENRE: ${book.genre}\\nPAGES: ${book.pageCount}\\nPRICE: $$finalPrice\\nFORMAT: ${book.format}\\nPUBLISHER: ${book.publisher}\\nRATING: ${book.averageRating}\\nSALES: ${book.totalSales}\\nAVAILABLE: ${book.isAvailable}\\nCONTENT: ${book.content}\"\n    }\n    \n    fun formatAsJSON(book: Book): String {\n        return \"{\\\"title\\\":\\\"${book.title}\\\",\\\"author\\\":\\\"${book.author}\\\",\\\"isbn\\\":\\\"${book.isbn}\\\",\\\"sales\\\":${book.totalSales},\\\"rating\\\":${book.averageRating}}\"\n    }\n    \n    fun formatAsXML(book: Book): String {\n        return \"<book><title>${book.title}</title><author>${book.author}</author><isbn>${book.isbn}</isbn><sales>${book.totalSales}</sales></book>\"\n    }\n}\n\nclass ReportGenerationService {\n    private val pricingService = PricingService()\n    \n    fun generateComprehensiveReport(book: Book): String {\n        val finalPrice = pricingService.calculateFinalPrice(book.price, book.discountRate)\n        val revenue = book.totalSales * finalPrice\n        val royalty = pricingService.calculateAuthorRoyalty(book.totalSales, finalPrice)\n        \n        return \"=== COMPREHENSIVE BOOK REPORT ===\\nTitle: ${book.title}\\nAuthor: ${book.author}\\nISBN: ${book.isbn}\\nGenre: ${book.genre}\\nFormat: ${book.format}\\nTotal Sales: ${book.totalSales}\\nRevenue: $${String.format(\"%.2f\", revenue)}\\nAuthor Royalty: $${String.format(\"%.2f\", royalty)}\\nAverage Rating: ${String.format(\"%.2f\", book.averageRating)}\\nReviews: ${book.reviews.size}\\nAvailable: ${book.isAvailable}\"\n    }\n}\n\nclass BookPrintingService {\n    private val printer = PrinterService(\"BookStore_Printer_001\")\n    private val reportService = ReportGenerationService()\n    \n    fun printBook(book: Book) {\n        println(\"Title: ${book.title}\\nAuthor: ${book.author}\\nContent: ${book.content}\")\n    }\n    \n    fun printDetailedReport(book: Book) {\n        val report = reportService.generateComprehensiveReport(book)\n        println(report)\n        printer.printReport(report)\n    }\n}\n\nclass MarketingService {\n    private val emailService = EmailService(\"smtp.bookstore.com\")\n    private val emailContentService = EmailContentService()\n    private val dbService = DatabaseService(\"jdbc:mysql://localhost:3306/bookstore\")\n    \n    fun sendMarketingCampaign(book: Book) {\n        if (book.customerEmails.isNotEmpty()) {\n            val campaignEmail = emailContentService.createMarketingEmail(book.title, book.author)\n            emailService.sendBulkEmail(\n                book.customerEmails,\n                \"New Release from ${book.author}\",\n                campaignEmail\n            )\n            logMarketingActivity(book)\n        }\n    }\n    \n    fun notifyCustomersOfDiscount(book: Book) {\n        if (book.customerEmails.isNotEmpty()) {\n            val discountEmail = emailContentService.createDiscountNotificationEmail(\n                book.title,\n                book.discountRate\n            )\n            emailService.sendBulkEmail(\n                book.customerEmails,\n                \"Special Discount - ${book.title}\",\n                discountEmail\n            )\n        }\n    }\n    \n    private fun logMarketingActivity(book: Book) {\n        dbService.logTransaction(\n            \"MARKETING_SENT\",\n            \"Campaign sent for book: ${book.isbn} to ${book.customerEmails.size} customers\"\n        )\n    }\n}\n\nclass FileExportService {\n    private val fileStorage = FileStorage(\"/books/storage\")\n    private val formatter = DataFormattingService()\n    private val dbService = DatabaseService(\"jdbc:mysql://localhost:3306/bookstore\")\n    \n    fun saveToFile(book: Book, filename: String) {\n        val bookData = formatter.formatCompleteBookData(book)\n        fileStorage.saveToFile(filename, bookData)\n        dbService.saveBook(book)\n    }\n    \n    fun exportToMultipleFormats(book: Book) {\n        val jsonData = formatter.formatAsJSON(book)\n        fileStorage.saveToFile(\"${book.isbn}.json\", jsonData)\n        \n        val xmlData = formatter.formatAsXML(book)\n        fileStorage.saveToFile(\"${book.isbn}.xml\", xmlData)\n    }\n}\n\nclass DiscountManagementService {\n    private val validator = ValidationService()\n    private val marketingService = MarketingService()\n    \n    fun applyDiscount(book: Book, discountPercentage: Double) {\n        if (validator.validateDiscountRate(discountPercentage)) {\n            book.discountRate = discountPercentage\n            marketingService.notifyCustomersOfDiscount(book)\n        }\n    }\n}\n\ndata class Book(\n    var title: String,\n    val author: String,\n    var content: String\n) {\n    var isbn: String = \"\"\n        private set\n    \n    val publishDate: Date = Date()\n    \n    var genre: String = \"\"\n        private set\n    \n    var pageCount: Int = 0\n        private set\n    \n    var price: Double = 0.0\n        private set\n    \n    var publisher: String = \"\"\n    \n    val reviews: MutableList<String> = mutableListOf()\n    \n    var averageRating: Double = 0.0\n    \n    var totalSales: Int = 0\n    \n    val customerEmails: MutableList<String> = mutableListOf()\n    \n    var isAvailable: Boolean = true\n    \n    var format: String = \"paperback\"\n        set(value) {\n            field = value\n            updatePageCount()\n        }\n    \n    var discountRate: Double = 0.0\n    \n    init {\n        initializeBookDefaults()\n    }\n    \n    private fun initializeBookDefaults() {\n        val isbnService = ISBNGenerationService()\n        isbn = isbnService.generateUniqueISBN(genre)\n        \n        updatePageCount()\n        \n        genre = \"general\"\n        price = 19.99\n        publisher = \"Independent Press\"\n    }\n    \n    private fun updatePageCount() {\n        val pageService = PageCalculationService()\n        pageCount = pageService.calculateDynamicPageCount(content, format)\n    }\n    \n    fun setContent(newContent: String) {\n        content = newContent\n        updatePageCount()\n    }\n    \n    fun setPrice(newPrice: Double) {\n        val validator = ValidationService()\n        if (validator.validatePriceRange(newPrice)) {\n            price = newPrice\n        }\n    }\n    \n    fun setGenre(newGenre: String) {\n        genre = newGenre\n    }\n    \n    // Extension functions for better API\n    fun calculateFinalPrice(): Double {\n        val pricingService = PricingService()\n        return pricingService.calculateFinalPrice(price, discountRate)\n    }\n    \n    fun calculateAuthorRoyalty(): Double {\n        val pricingService = PricingService()\n        return pricingService.calculateAuthorRoyalty(totalSales, calculateFinalPrice())\n    }\n    \n    fun validateData(): Boolean {\n        val validator = ValidationService()\n        return validator.validateCompleteBookData(title, author, isbn, price, content)\n    }\n}",
            "level": "HARD",
            "language": "KOTLIN",
            "violation": "SRP",
            "description": "Book printing file saving"
        },
        {
            "input": "class InventoryDatabase(private val connectionString: String) {\n    fun updateStock(productId: String, quantity: Int) {\n        println(\"Updating stock in database - Product: $productId, Quantity: $quantity\")\n    }\n    \n    fun saveProduct(product: Product) {\n        println(\"Saving product to database: ${product.name}\")\n    }\n    \n    fun logTransaction(type: String, details: String) {\n        println(\"[DB LOG] $type: $details\")\n    }\n}\n\nclass EmailService(private val smtpServer: String) {\n    fun sendEmail(recipient: String, subject: String, body: String) {\n        println(\"Sending email to: $recipient, Subject: $subject\")\n    }\n    \n    fun sendBulkEmail(recipients: List<String>, subject: String, body: String) {\n        println(\"Sending bulk email to ${recipients.size} recipients\")\n    }\n}\n\nclass PaymentProcessor(private val apiKey: String) {\n    fun processPayment(amount: Double, cardNumber: String): Boolean {\n        println(\"Processing payment of $$amount\")\n        return Math.random() > 0.1\n    }\n    \n    fun refundPayment(transactionId: String, amount: Double) {\n        println(\"Processing refund: $$amount for transaction: $transactionId\")\n    }\n}\n\nclass ShippingService(private val carrier: String) {\n    fun createShipment(address: String, weight: Double): String {\n        val trackingNumber = \"TRK${System.currentTimeMillis() % 100000}\"\n        println(\"Creating shipment via $carrier - Tracking: $trackingNumber\")\n        return trackingNumber\n    }\n    \n    fun calculateShippingRate(destination: String, weight: Double): Double {\n        return if (destination.equals(\"international\", ignoreCase = true)) weight * 5.0 else weight * 2.0\n    }\n}\n\nclass AnalyticsService(private val analyticsKey: String) {\n    fun trackEvent(eventType: String, productId: String, data: Map<String, String>) {\n        println(\"[ANALYTICS] $eventType for product: $productId\")\n    }\n    \n    fun generateReport(reportType: String, productId: String) {\n        println(\"Generating $reportType report for product: $productId\")\n    }\n}\n\nclass Product(val name: String, var price: Double) {\n    var productId: String = \"\"\n        private set\n    var category: String = \"\"\n        private set\n    var stockQuantity: Int = 100\n    var weight: Double = 1.0\n        private set\n    var description: String = \"\"\n        private set\n    val customerReviews: MutableList<String> = mutableListOf()\n    var averageRating: Double = 0.0\n    var totalSales: Int = 0\n    var costPrice: Double = price * 0.6\n        private set\n    val customerEmails: MutableList<String> = mutableListOf()\n    var isActive: Boolean = true\n        private set\n    var supplier: String = \"\"\n        private set\n    var discountRate: Double = 0.0\n    val salesByRegion: MutableMap<String, Int> = mutableMapOf()\n    \n    private val database = InventoryDatabase(\"jdbc:mysql://localhost:3306/inventory\")\n    private val emailService = EmailService(\"smtp.ecommerce.com\")\n    private val paymentProcessor = PaymentProcessor(\"pay_api_key_123\")\n    private val shippingService = ShippingService(\"FedEx\")\n    private val analytics = AnalyticsService(\"analytics_key_456\")\n    \n    init {\n        initializeAdvancedDefaults()\n    }\n    \n    fun applyDiscount(percentage: Double): Double {\n        return price * (1 - percentage / 100)\n    }\n    \n    fun displayProduct() {\n        println(\"Product: $name, Price: $$price\")\n    }\n    \n    fun generateAdvancedProductId(): String {\n        val categoryPrefix = if (category.isNotEmpty()) {\n            category.substring(0, minOf(3, category.length)).uppercase()\n        } else \"GEN\"\n        val timestamp = (System.currentTimeMillis() % 100000).toString()\n        val checksum = (Math.abs(name.hashCode() % 100)).toString()\n        return \"$categoryPrefix-$timestamp-$checksum\"\n    }\n    \n    fun calculateDynamicPricing(): Double {\n        val demandMultiplier = when {\n            totalSales > 1000 -> 1.2\n            totalSales > 500 -> 1.1\n            else -> 1.0\n        }\n        val stockMultiplier = if (stockQuantity < 10) 1.15 else 1.0\n        val seasonalMultiplier = if (java.time.LocalDate.now().monthValue == 12) 1.25 else 1.0\n        return price * demandMultiplier * stockMultiplier * seasonalMultiplier * (1 - discountRate)\n    }\n    \n    fun calculateComplexProfitMargin(): Double {\n        val sellingPrice = calculateDynamicPricing()\n        val shippingCost = shippingService.calculateShippingRate(\"domestic\", weight)\n        val totalCost = costPrice + shippingCost + (sellingPrice * 0.03)\n        return ((sellingPrice - totalCost) / sellingPrice) * 100\n    }\n    \n    fun calculateTieredDiscount(quantity: Int): Double {\n        return when {\n            quantity >= 100 -> 0.20\n            quantity >= 50 -> 0.15\n            quantity >= 10 -> 0.10\n            quantity >= 5 -> 0.05\n            else -> 0.0\n        }\n    }\n    \n    fun validateProductCompliance(): Boolean {\n        val hasValidName = name.length in 3..100\n        val hasValidPrice = price > 0 && price <= 10000\n        val hasValidWeight = weight > 0 && weight <= 50\n        val hasValidStock = stockQuantity >= 0\n        return hasValidName && hasValidPrice && hasValidWeight && hasValidStock\n    }\n    \n    fun processAdvancedReview(customerEmail: String, review: String, rating: Double, region: String) {\n        if (rating in 1.0..5.0 && review.length >= 10) {\n            customerReviews.add(review)\n            customerEmails.add(customerEmail)\n            recalculateAdvancedRating(rating)\n            \n            val thankYouEmail = createReviewThankYouEmail(customerEmail, rating)\n            emailService.sendEmail(customerEmail, \"Thank you for your review!\", thankYouEmail)\n            \n            val analyticsData = mapOf(\n                \"rating\" to rating.toString(),\n                \"region\" to region\n            )\n            analytics.trackEvent(\"REVIEW_ADDED\", productId, analyticsData)\n            \n            database.logTransaction(\"REVIEW_PROCESSED\", \"Product: $productId, Rating: $rating, Region: $region\")\n        }\n    }\n    \n    fun recalculateAdvancedRating(newRating: Double) {\n        averageRating = if (customerReviews.size == 1) {\n            newRating\n        } else {\n            val weightedTotal = averageRating * (customerReviews.size - 1) + newRating\n            weightedTotal / customerReviews.size\n        }\n        \n        if (averageRating >= 4.5 && customerReviews.size >= 10) {\n            triggerBestSellerPromotion()\n        }\n    }\n    \n    fun createReviewThankYouEmail(customerEmail: String, rating: Double): String {\n        return buildString {\n            append(\"Dear Valued Customer,\\n\\n\")\n            append(\"Thank you for your $rating-star review of $name!\\n\")\n            append(\"Your feedback helps other customers make informed decisions.\\n\\n\")\n            if (rating >= 4.0) {\n                append(\"As a token of appreciation, here's a 10% discount code: REVIEW10\\n\\n\")\n            }\n            append(\"Best regards,\\nCustomer Service Team\")\n        }\n    }\n    \n    fun triggerBestSellerPromotion() {\n        val promoEmail = \"BESTSELLER ALERT: $name is now a top-rated product with $averageRating stars!\"\n        emailService.sendBulkEmail(customerEmails, \"Special Offer on Bestseller\", promoEmail)\n        analytics.trackEvent(\"BESTSELLER_PROMOTION\", productId, emptyMap())\n    }\n    \n    fun processComplexSale(\n        quantity: Int,\n        customerEmail: String,\n        shippingAddress: String,\n        region: String,\n        cardNumber: String\n    ): String {\n        if (stockQuantity < quantity) {\n            return \"FAILED: Insufficient stock\"\n        }\n        \n        val unitPrice = calculateDynamicPricing()\n        val discount = calculateTieredDiscount(quantity)\n        val subtotal = unitPrice * quantity * (1 - discount)\n        val shippingCost = shippingService.calculateShippingRate(region, weight * quantity)\n        val totalAmount = subtotal + shippingCost\n        \n        if (!paymentProcessor.processPayment(totalAmount, cardNumber)) {\n            return \"FAILED: Payment declined\"\n        }\n        \n        stockQuantity -= quantity\n        totalSales += quantity\n        salesByRegion[region] = salesByRegion.getOrDefault(region, 0) + quantity\n        \n        val trackingNumber = shippingService.createShipment(shippingAddress, weight * quantity)\n        \n        database.updateStock(productId, stockQuantity)\n        \n        val receiptEmail = generateAdvancedReceipt(quantity, unitPrice, discount, shippingCost, totalAmount, trackingNumber)\n        emailService.sendEmail(customerEmail, \"Order Confirmation - $name\", receiptEmail)\n        \n        checkAdvancedStockAlerts()\n        \n        val saleData = mapOf(\n            \"quantity\" to quantity.toString(),\n            \"amount\" to totalAmount.toString(),\n            \"region\" to region\n        )\n        analytics.trackEvent(\"SALE_COMPLETED\", productId, saleData)\n        \n        database.logTransaction(\"COMPLEX_SALE\", \"Product: $productId, Qty: $quantity, Amount: $$totalAmount, Region: $region\")\n        \n        return \"SUCCESS: Order placed - Tracking: $trackingNumber\"\n    }\n    \n    fun generateAdvancedReceipt(\n        quantity: Int,\n        unitPrice: Double,\n        discount: Double,\n        shipping: Double,\n        total: Double,\n        tracking: String\n    ): String {\n        return \"ORDER RECEIPT\\n\" +\n               \"Product: $name ($productId)\\n\" +\n               \"Quantity: $quantity\\n\" +\n               \"Unit Price: $${String.format(\"%.2f\", unitPrice)}\\n\" +\n               \"Discount: ${String.format(\"%.0f\", discount * 100)}%\\n\" +\n               \"Shipping: $${String.format(\"%.2f\", shipping)}\\n\" +\n               \"Total: $${String.format(\"%.2f\", total)}\\n\" +\n               \"Tracking: $tracking\\n\" +\n               \"Thank you for your order!\"\n    }\n    \n    fun checkAdvancedStockAlerts() {\n        when {\n            stockQuantity <= 5 -> {\n                val urgentAlert = \"URGENT: Product $name ($productId) critically low - Only $stockQuantity units left!\"\n                emailService.sendEmail(\"urgent@company.com\", \"Critical Stock Alert\", urgentAlert)\n                analytics.trackEvent(\"CRITICAL_STOCK_ALERT\", productId, emptyMap())\n            }\n            stockQuantity <= 20 -> {\n                val alert = \"LOW STOCK: Product $name has $stockQuantity units remaining.\"\n                emailService.sendEmail(\"inventory@company.com\", \"Low Stock Alert\", alert)\n            }\n        }\n    }\n    \n    fun executeSmartRestock(supplierEmail: String) {\n        val recommendedStock = calculateOptimalStockLevel()\n        val restockQuantity = recommendedStock - stockQuantity\n        \n        if (restockQuantity > 0) {\n            stockQuantity += restockQuantity\n            database.updateStock(productId, stockQuantity)\n            \n            val restockEmail = generateSmartRestockEmail(restockQuantity, recommendedStock)\n            emailService.sendEmail(supplierEmail, \"Smart Restock Completed - $name\", restockEmail)\n            \n            analytics.trackEvent(\"SMART_RESTOCK\", productId, mapOf(\"quantity\" to restockQuantity.toString()))\n            database.logTransaction(\"SMART_RESTOCK\", \"Product: $productId, Added: $restockQuantity, Target: $recommendedStock\")\n        }\n    }\n    \n    fun calculateOptimalStockLevel(): Int {\n        val averageMonthlySales = totalSales / maxOf(1, java.time.LocalDate.now().monthValue)\n        val seasonalFactor = if (java.time.LocalDate.now().monthValue == 12) 2 else 1\n        return averageMonthlySales * 2 * seasonalFactor\n    }\n    \n    fun generateSmartRestockEmail(quantity: Int, targetLevel: Int): String {\n        return \"SMART RESTOCK REPORT\\n\" +\n               \"Product: $name ($productId)\\n\" +\n               \"Restocked Quantity: $quantity\\n\" +\n               \"New Stock Level: $stockQuantity\\n\" +\n               \"Target Level: $targetLevel\\n\" +\n               \"Sales Velocity: ${totalSales / maxOf(1, java.time.LocalDate.now().dayOfYear)} units/day\\n\" +\n               \"Restock completed successfully.\"\n    }\n    \n    fun generateComprehensiveAnalytics(): String {\n        val totalRevenue = totalSales * calculateDynamicPricing()\n        val profitMargin = calculateComplexProfitMargin()\n        val topRegion = salesByRegion.maxByOrNull { it.value }?.key ?: \"N/A\"\n        \n        return \"COMPREHENSIVE ANALYTICS\\n\" +\n               \"Product: $name ($productId)\\n\" +\n               \"Total Sales: $totalSales units\\n\" +\n               \"Revenue: $${String.format(\"%.2f\", totalRevenue)}\\n\" +\n               \"Profit Margin: ${String.format(\"%.2f\", profitMargin)}%\\n\" +\n               \"Average Rating: ${String.format(\"%.2f\", averageRating)} (${customerReviews.size} reviews)\\n\" +\n               \"Top Region: $topRegion\\n\" +\n               \"Stock Level: $stockQuantity\\n\" +\n               \"Current Price: $${String.format(\"%.2f\", calculateDynamicPricing())}\"\n    }\n    \n    fun launchMarketingCampaign(campaignType: String) {\n        val campaignEmail = createCampaignEmail(campaignType)\n        emailService.sendBulkEmail(customerEmails, \"Special Campaign - $name\", campaignEmail)\n        \n        val campaignData = mapOf(\n            \"type\" to campaignType,\n            \"reach\" to customerEmails.size.toString()\n        )\n        analytics.trackEvent(\"MARKETING_CAMPAIGN\", productId, campaignData)\n        \n        database.logTransaction(\"CAMPAIGN_LAUNCHED\", \"Product: $productId, Type: $campaignType, Reach: ${customerEmails.size}\")\n    }\n    \n    fun createCampaignEmail(campaignType: String): String {\n        return when (campaignType) {\n            \"SEASONAL\" -> \"Don't miss our seasonal special on $name! Limited time offer with up to 25% off!\"\n            \"CLEARANCE\" -> \"CLEARANCE ALERT: $name must go! Huge discounts available now!\"\n            else -> \"Special promotion on $name - Check out our latest deals!\"\n        }\n    }\n    \n    private fun initializeAdvancedDefaults() {\n        this.category = \"Electronics\"\n        this.description = \"High-quality product\"\n        this.supplier = \"Global Supplier Inc\"\n        this.productId = generateAdvancedProductId()\n        salesByRegion[\"North America\"] = 0\n        salesByRegion[\"Europe\"] = 0\n        salesByRegion[\"Asia\"] = 0\n    }\n    \n    fun setPrice(newPrice: Double) {\n        this.price = newPrice\n        database.logTransaction(\"PRICE_UPDATE\", \"Product: $productId, New price: $$newPrice\")\n    }\n    \n    fun setDiscountRate(rate: Double) {\n        this.discountRate = rate\n        analytics.trackEvent(\"DISCOUNT_APPLIED\", productId, mapOf(\"rate\" to rate.toString()))\n    }\n}",
            "output": "class InventoryDatabase(private val connectionString: String) {\n    fun updateStock(productId: String, quantity: Int) {\n        println(\"Updating stock in database - Product: $productId, Quantity: $quantity\")\n    }\n    \n    fun saveProduct(product: Product) {\n        println(\"Saving product to database: ${product.name}\")\n    }\n    \n    fun logTransaction(type: String, details: String) {\n        println(\"[DB LOG] $type: $details\")\n    }\n}\n\nclass EmailService(private val smtpServer: String) {\n    fun sendEmail(recipient: String, subject: String, body: String) {\n        println(\"Sending email to: $recipient, Subject: $subject\")\n    }\n    \n    fun sendBulkEmail(recipients: List<String>, subject: String, body: String) {\n        println(\"Sending bulk email to ${recipients.size} recipients\")\n    }\n}\n\nclass PaymentProcessor(private val apiKey: String) {\n    fun processPayment(amount: Double, cardNumber: String): Boolean {\n        println(\"Processing payment of $$amount\")\n        return Math.random() > 0.1\n    }\n    \n    fun refundPayment(transactionId: String, amount: Double) {\n        println(\"Processing refund: $$amount for transaction: $transactionId\")\n    }\n}\n\nclass ShippingService(private val carrier: String) {\n    fun createShipment(address: String, weight: Double): String {\n        val trackingNumber = \"TRK${System.currentTimeMillis() % 100000}\"\n        println(\"Creating shipment via $carrier - Tracking: $trackingNumber\")\n        return trackingNumber\n    }\n    \n    fun calculateShippingRate(destination: String, weight: Double): Double {\n        return if (destination.equals(\"international\", ignoreCase = true)) weight * 5.0 else weight * 2.0\n    }\n}\n\nclass AnalyticsService(private val analyticsKey: String) {\n    fun trackEvent(eventType: String, productId: String, data: Map<String, String>) {\n        println(\"[ANALYTICS] $eventType for product: $productId\")\n    }\n    \n    fun generateReport(reportType: String, productId: String) {\n        println(\"Generating $reportType report for product: $productId\")\n    }\n}\n\nclass ProductIdGenerationService {\n    fun generateAdvancedProductId(name: String, category: String?): String {\n        val categoryPrefix = if (!category.isNullOrEmpty()) {\n            category.substring(0, minOf(3, category.length)).uppercase()\n        } else \"GEN\"\n        val timestamp = (System.currentTimeMillis() % 100000).toString()\n        val checksum = (Math.abs(name.hashCode() % 100)).toString()\n        return \"$categoryPrefix-$timestamp-$checksum\"\n    }\n}\n\nclass PricingCalculationService {\n    private val shippingService = ShippingService(\"FedEx\")\n    \n    fun applyDiscount(price: Double, percentage: Double): Double {\n        return price * (1 - percentage / 100)\n    }\n    \n    fun calculateDynamicPricing(basePrice: Double, totalSales: Int, stockQuantity: Int, discountRate: Double): Double {\n        val demandMultiplier = when {\n            totalSales > 1000 -> 1.2\n            totalSales > 500 -> 1.1\n            else -> 1.0\n        }\n        val stockMultiplier = if (stockQuantity < 10) 1.15 else 1.0\n        val seasonalMultiplier = if (java.time.LocalDate.now().monthValue == 12) 1.25 else 1.0\n        return basePrice * demandMultiplier * stockMultiplier * seasonalMultiplier * (1 - discountRate)\n    }\n    \n    fun calculateComplexProfitMargin(basePrice: Double, totalSales: Int, stockQuantity: Int, discountRate: Double, costPrice: Double, weight: Double): Double {\n        val sellingPrice = calculateDynamicPricing(basePrice, totalSales, stockQuantity, discountRate)\n        val shippingCost = shippingService.calculateShippingRate(\"domestic\", weight)\n        val totalCost = costPrice + shippingCost + (sellingPrice * 0.03)\n        return ((sellingPrice - totalCost) / sellingPrice) * 100\n    }\n    \n    fun calculateTieredDiscount(quantity: Int): Double {\n        return when {\n            quantity >= 100 -> 0.20\n            quantity >= 50 -> 0.15\n            quantity >= 10 -> 0.10\n            quantity >= 5 -> 0.05\n            else -> 0.0\n        }\n    }\n}\n\nclass ValidationService {\n    fun validateProductCompliance(name: String, price: Double, weight: Double, stockQuantity: Int): Boolean {\n        val hasValidName = name.length in 3..100\n        val hasValidPrice = price > 0 && price <= 10000\n        val hasValidWeight = weight > 0 && weight <= 50\n        val hasValidStock = stockQuantity >= 0\n        return hasValidName && hasValidPrice && hasValidWeight && hasValidStock\n    }\n    \n    fun validateReview(rating: Double, review: String?): Boolean {\n        return rating in 1.0..5.0 && !review.isNullOrEmpty() && review.length >= 10\n    }\n}\n\nclass ReviewManagementService {\n    private val emailService = EmailService(\"smtp.ecommerce.com\")\n    private val analytics = AnalyticsService(\"analytics_key_456\")\n    private val database = InventoryDatabase(\"jdbc:mysql://localhost:3306/inventory\")\n    private val emailContentService = EmailContentService()\n    private val validator = ValidationService()\n    \n    fun processAdvancedReview(product: Product, customerEmail: String, review: String, rating: Double, region: String) {\n        if (validator.validateReview(rating, review)) {\n            product.customerReviews.add(review)\n            product.customerEmails.add(customerEmail)\n            product.averageRating = recalculateAdvancedRating(product.averageRating, product.customerReviews.size, rating)\n            \n            val thankYouEmail = emailContentService.createReviewThankYouEmail(product.name, customerEmail, rating)\n            emailService.sendEmail(customerEmail, \"Thank you for your review!\", thankYouEmail)\n            \n            val analyticsData = mapOf(\n                \"rating\" to rating.toString(),\n                \"region\" to region\n            )\n            analytics.trackEvent(\"REVIEW_ADDED\", product.productId, analyticsData)\n            \n            database.logTransaction(\"REVIEW_PROCESSED\", \"Product: ${product.productId}, Rating: $rating, Region: $region\")\n            \n            if (product.averageRating >= 4.5 && product.customerReviews.size >= 10) {\n                triggerBestSellerPromotion(product)\n            }\n        }\n    }\n    \n    private fun recalculateAdvancedRating(currentAverage: Double, reviewCount: Int, newRating: Double): Double {\n        return if (reviewCount == 1) newRating else (currentAverage * (reviewCount - 1) + newRating) / reviewCount\n    }\n    \n    private fun triggerBestSellerPromotion(product: Product) {\n        val promoEmail = \"BESTSELLER ALERT: ${product.name} is now a top-rated product with ${product.averageRating} stars!\"\n        emailService.sendBulkEmail(product.customerEmails, \"Special Offer on Bestseller\", promoEmail)\n        analytics.trackEvent(\"BESTSELLER_PROMOTION\", product.productId, emptyMap())\n    }\n}\n\nclass SalesProcessingService {\n    private val paymentProcessor = PaymentProcessor(\"pay_api_key_123\")\n    private val shippingService = ShippingService(\"FedEx\")\n    private val database = InventoryDatabase(\"jdbc:mysql://localhost:3306/inventory\")\n    private val emailService = EmailService(\"smtp.ecommerce.com\")\n    private val analytics = AnalyticsService(\"analytics_key_456\")\n    private val pricingService = PricingCalculationService()\n    private val emailContentService = EmailContentService()\n    private val stockAlertService = StockAlertService()\n    \n    fun processComplexSale(product: Product, quantity: Int, customerEmail: String, shippingAddress: String, region: String, cardNumber: String): String {\n        if (product.stockQuantity < quantity) {\n            return \"FAILED: Insufficient stock\"\n        }\n        \n        val unitPrice = pricingService.calculateDynamicPricing(product.price, product.totalSales, product.stockQuantity, product.discountRate)\n        val discount = pricingService.calculateTieredDiscount(quantity)\n        val subtotal = unitPrice * quantity * (1 - discount)\n        val shippingCost = shippingService.calculateShippingRate(region, product.weight * quantity)\n        val totalAmount = subtotal + shippingCost\n        \n        if (!paymentProcessor.processPayment(totalAmount, cardNumber)) {\n            return \"FAILED: Payment declined\"\n        }\n        \n        product.stockQuantity -= quantity\n        product.totalSales += quantity\n        product.salesByRegion[region] = product.salesByRegion.getOrDefault(region, 0) + quantity\n        \n        val trackingNumber = shippingService.createShipment(shippingAddress, product.weight * quantity)\n        \n        database.updateStock(product.productId, product.stockQuantity)\n        \n        val receiptEmail = emailContentService.generateAdvancedReceipt(product.name, product.productId, quantity, unitPrice, discount, shippingCost, totalAmount, trackingNumber)\n        emailService.sendEmail(customerEmail, \"Order Confirmation - ${product.name}\", receiptEmail)\n        \n        stockAlertService.checkAdvancedStockAlerts(product, emailService, analytics)\n        \n        val saleData = mapOf(\n            \"quantity\" to quantity.toString(),\n            \"amount\" to totalAmount.toString(),\n            \"region\" to region\n        )\n        analytics.trackEvent(\"SALE_COMPLETED\", product.productId, saleData)\n        \n        database.logTransaction(\"COMPLEX_SALE\", \"Product: ${product.productId}, Qty: $quantity, Amount: $$totalAmount, Region: $region\")\n        \n        return \"SUCCESS: Order placed - Tracking: $trackingNumber\"\n    }\n}\n\nclass StockAlertService {\n    fun checkAdvancedStockAlerts(product: Product, emailService: EmailService, analytics: AnalyticsService) {\n        when {\n            product.stockQuantity <= 5 -> {\n                val urgentAlert = \"URGENT: Product ${product.name} (${product.productId}) critically low - Only ${product.stockQuantity} units left!\"\n                emailService.sendEmail(\"urgent@company.com\", \"Critical Stock Alert\", urgentAlert)\n                analytics.trackEvent(\"CRITICAL_STOCK_ALERT\", product.productId, emptyMap())\n            }\n            product.stockQuantity <= 20 -> {\n                val alert = \"LOW STOCK: Product ${product.name} has ${product.stockQuantity} units remaining.\"\n                emailService.sendEmail(\"inventory@company.com\", \"Low Stock Alert\", alert)\n            }\n        }\n    }\n}\n\nclass InventoryManagementService {\n    private val database = InventoryDatabase(\"jdbc:mysql://localhost:3306/inventory\")\n    private val emailService = EmailService(\"smtp.ecommerce.com\")\n    private val analytics = AnalyticsService(\"analytics_key_456\")\n    private val emailContentService = EmailContentService()\n    \n    fun executeSmartRestock(product: Product, supplierEmail: String) {\n        val recommendedStock = calculateOptimalStockLevel(product.totalSales)\n        val restockQuantity = recommendedStock - product.stockQuantity\n        \n        if (restockQuantity > 0) {\n            product.stockQuantity += restockQuantity\n            database.updateStock(product.productId, product.stockQuantity)\n            \n            val restockEmail = emailContentService.generateSmartRestockEmail(product.name, product.productId, restockQuantity, product.stockQuantity, recommendedStock, product.totalSales)\n            emailService.sendEmail(supplierEmail, \"Smart Restock Completed - ${product.name}\", restockEmail)\n            \n            analytics.trackEvent(\"SMART_RESTOCK\", product.productId, mapOf(\"quantity\" to restockQuantity.toString()))\n            database.logTransaction(\"SMART_RESTOCK\", \"Product: ${product.productId}, Added: $restockQuantity, Target: $recommendedStock\")\n        }\n    }\n    \n    private fun calculateOptimalStockLevel(totalSales: Int): Int {\n        val averageMonthlySales = totalSales / maxOf(1, java.time.LocalDate.now().monthValue)\n        val seasonalFactor = if (java.time.LocalDate.now().monthValue == 12) 2 else 1\n        return averageMonthlySales * 2 * seasonalFactor\n    }\n}\n\nclass EmailContentService {\n    fun createReviewThankYouEmail(productName: String, customerEmail: String, rating: Double): String {\n        return buildString {\n            append(\"Dear Valued Customer,\\n\\n\")\n            append(\"Thank you for your $rating-star review of $productName!\\n\")\n            append(\"Your feedback helps other customers make informed decisions.\\n\\n\")\n            if (rating >= 4.0) {\n                append(\"As a token of appreciation, here's a 10% discount code: REVIEW10\\n\\n\")\n            }\n            append(\"Best regards,\\nCustomer Service Team\")\n        }\n    }\n    \n    fun generateAdvancedReceipt(productName: String, productId: String, quantity: Int, unitPrice: Double, discount: Double, shipping: Double, total: Double, tracking: String): String {\n        return \"ORDER RECEIPT\\n\" +\n               \"Product: $productName ($productId)\\n\" +\n               \"Quantity: $quantity\\n\" +\n               \"Unit Price: $${String.format(\"%.2f\", unitPrice)}\\n\" +\n               \"Discount: ${String.format(\"%.0f\", discount * 100)}%\\n\" +\n               \"Shipping: $${String.format(\"%.2f\", shipping)}\\n\" +\n               \"Total: $${String.format(\"%.2f\", total)}\\n\" +\n               \"Tracking: $tracking\\n\" +\n               \"Thank you for your order!\"\n    }\n    \n    fun generateSmartRestockEmail(productName: String, productId: String, quantity: Int, newStock: Int, targetLevel: Int, totalSales: Int): String {\n        return \"SMART RESTOCK REPORT\\n\" +\n               \"Product: $productName ($productId)\\n\" +\n               \"Restocked Quantity: $quantity\\n\" +\n               \"New Stock Level: $newStock\\n\" +\n               \"Target Level: $targetLevel\\n\" +\n               \"Sales Velocity: ${totalSales / maxOf(1, java.time.LocalDate.now().dayOfYear)} units/day\\n\" +\n               \"Restock completed successfully.\"\n    }\n    \n    fun createCampaignEmail(productName: String, campaignType: String): String {\n        return when (campaignType) {\n            \"SEASONAL\" -> \"Don't miss our seasonal special on $productName! Limited time offer with up to 25% off!\"\n            \"CLEARANCE\" -> \"CLEARANCE ALERT: $productName must go! Huge discounts available now!\"\n            else -> \"Special promotion on $productName - Check out our latest deals!\"\n        }\n    }\n}\n\nclass AnalyticsReportingService {\n    private val pricingService = PricingCalculationService()\n    \n    fun generateComprehensiveAnalytics(product: Product): String {\n        val currentPrice = pricingService.calculateDynamicPricing(product.price, product.totalSales, product.stockQuantity, product.discountRate)\n        val totalRevenue = product.totalSales * currentPrice\n        val profitMargin = pricingService.calculateComplexProfitMargin(product.price, product.totalSales, product.stockQuantity, product.discountRate, product.costPrice, product.weight)\n        val topRegion = product.salesByRegion.maxByOrNull { it.value }?.key ?: \"N/A\"\n        \n        return \"COMPREHENSIVE ANALYTICS\\n\" +\n               \"Product: ${product.name} (${product.productId})\\n\" +\n               \"Total Sales: ${product.totalSales} units\\n\" +\n               \"Revenue: $${String.format(\"%.2f\", totalRevenue)}\\n\" +\n               \"Profit Margin: ${String.format(\"%.2f\", profitMargin)}%\\n\" +\n               \"Average Rating: ${String.format(\"%.2f\", product.averageRating)} (${product.customerReviews.size} reviews)\\n\" +\n               \"Top Region: $topRegion\\n\" +\n               \"Stock Level: ${product.stockQuantity}\\n\" +\n               \"Current Price: $${String.format(\"%.2f\", currentPrice)}\"\n    }\n}\n\nclass MarketingCampaignService {\n    private val emailService = EmailService(\"smtp.ecommerce.com\")\n    private val analytics = AnalyticsService(\"analytics_key_456\")\n    private val database = InventoryDatabase(\"jdbc:mysql://localhost:3306/inventory\")\n    private val emailContentService = EmailContentService()\n    \n    fun launchMarketingCampaign(product: Product, campaignType: String) {\n        val campaignEmail = emailContentService.createCampaignEmail(product.name, campaignType)\n        emailService.sendBulkEmail(product.customerEmails, \"Special Campaign - ${product.name}\", campaignEmail)\n        \n        val campaignData = mapOf(\n            \"type\" to campaignType,\n            \"reach\" to product.customerEmails.size.toString()\n        )\n        analytics.trackEvent(\"MARKETING_CAMPAIGN\", product.productId, campaignData)\n        \n        database.logTransaction(\"CAMPAIGN_LAUNCHED\", \"Product: ${product.productId}, Type: $campaignType, Reach: ${product.customerEmails.size}\")\n    }\n}\n\nclass ProductDisplayService {\n    fun displayProduct(product: Product) {\n        println(\"Product: ${product.name}, Price: $${product.price}\")\n    }\n}\n\nclass DiscountManagementService {\n    private val analytics = AnalyticsService(\"analytics_key_456\")\n    private val database = InventoryDatabase(\"jdbc:mysql://localhost:3306/inventory\")\n    \n    fun setDiscountRate(product: Product, rate: Double) {\n        product.discountRate = rate\n        analytics.trackEvent(\"DISCOUNT_APPLIED\", product.productId, mapOf(\"rate\" to rate.toString()))\n    }\n    \n    fun updatePrice(product: Product, price: Double) {\n        product.price = price\n        database.logTransaction(\"PRICE_UPDATE\", \"Product: ${product.productId}, New price: $$price\")\n    }\n}\n\nclass Product(val name: String, var price: Double) {\n    var productId: String = \"\"\n        private set\n    var category: String = \"\"\n        private set\n    var stockQuantity: Int = 100\n    var weight: Double = 1.0\n        private set\n    var description: String = \"\"\n        private set\n    val customerReviews: MutableList<String> = mutableListOf()\n    var averageRating: Double = 0.0\n    var totalSales: Int = 0\n    var costPrice: Double = price * 0.6\n        private set\n    val customerEmails: MutableList<String> = mutableListOf()\n    var isActive: Boolean = true\n        private set\n    var supplier: String = \"\"\n        private set\n    var discountRate: Double = 0.0\n    val salesByRegion: MutableMap<String, Int> = mutableMapOf()\n    \n    init {\n        initializeAdvancedDefaults()\n    }\n    \n    private fun initializeAdvancedDefaults() {\n        this.category = \"Electronics\"\n        this.description = \"High-quality product\"\n        this.supplier = \"Global Supplier Inc\"\n        salesByRegion[\"North America\"] = 0\n        salesByRegion[\"Europe\"] = 0\n        salesByRegion[\"Asia\"] = 0\n        \n        val idService = ProductIdGenerationService()\n        this.productId = idService.generateAdvancedProductId(name, category)\n    }\n}",
            "level": "HARD",
            "language": "KOTLIN",
            "violation": "SRP",
            "description": "Product discount display system"
        },
        {
            "input": "public class User\n{\n    public string Name { get; set; }\n    public string Email { get; set; }\n    \n    public User(string name, string email)\n    {\n        Name = name;\n        Email = email;\n    }\n    \n    public void SaveToDatabase()\n    {\n        Console.WriteLine($\"Saving user {Name} to database\");\n    }\n    \n    public void SendWelcomeEmail()\n    {\n        Console.WriteLine($\"Sending welcome email to {Email}\");\n    }\n}",
            "output": "public class User\n{\n    public string Name { get; }\n    public string Email { get; }\n    \n    public User(string name, string email)\n    {\n        Name = name;\n        Email = email;\n    }\n}\n\npublic class UserRepository\n{\n    public void Save(User user)\n    {\n        Console.WriteLine($\"Saving user {user.Name} to database\");\n    }\n}\n\npublic class EmailService\n{\n    public void SendWelcomeEmail(User user)\n    {\n        Console.WriteLine($\"Sending welcome email to {user.Email}\");\n    }\n}",
            "level": "EASY",
            "language": "CSHARP",
            "violation": "SRP",
            "description": "User database email operations"
        },
        {
            "input": "public class Employee\n{\n    private string name;\n    private double baseSalary;\n    private int yearsOfService;\n    \n    public Employee(string name, double baseSalary, int yearsOfService)\n    {\n        this.name = name;\n        this.baseSalary = baseSalary;\n        this.yearsOfService = yearsOfService;\n    }\n    \n    public double CalculateSalary()\n    {\n        return baseSalary + (yearsOfService * 1000);\n    }\n    \n    public void PrintPaySlip()\n    {\n        Console.WriteLine($\"Pay slip for {name}: ${CalculateSalary()}\");\n    }\n}",
            "output": "public class Employee\n{\n    public string Name { get; }\n    public double BaseSalary { get; }\n    public int YearsOfService { get; }\n    \n    public Employee(string name, double baseSalary, int yearsOfService)\n    {\n        Name = name;\n        BaseSalary = baseSalary;\n        YearsOfService = yearsOfService;\n    }\n}\n\npublic class SalaryCalculator\n{\n    public double Calculate(Employee employee)\n    {\n        return employee.BaseSalary + (employee.YearsOfService * 1000);\n    }\n}\n\npublic class PaySlipPrinter\n{\n    private readonly SalaryCalculator _calculator;\n    \n    public PaySlipPrinter(SalaryCalculator calculator)\n    {\n        _calculator = calculator;\n    }\n    \n    public void Print(Employee employee)\n    {\n        double salary = _calculator.Calculate(employee);\n        Console.WriteLine($\"Pay slip for {employee.Name}: ${salary}\");\n    }\n}",
            "level": "EASY",
            "language": "CSHARP",
            "violation": "SRP",
            "description": "Employee salary payslip system"
        },
        {
            "input": "public class Book\n{\n    private string title;\n    private string author;\n    private string content;\n    \n    public Book(string title, string author, string content)\n    {\n        this.title = title;\n        this.author = author;\n        this.content = content;\n    }\n    \n    public void PrintBook()\n    {\n        Console.WriteLine($\"Title: {title}\");\n        Console.WriteLine($\"Author: {author}\");\n        Console.WriteLine($\"Content: {content}\");\n    }\n    \n    public void SaveToFile(string filename)\n    {\n        Console.WriteLine($\"Saving book to {filename}\");\n    }\n}",
            "output": "public class Book\n{\n    private string title;\n    private string author;\n    private string content;\n    \n    public Book(string title, string author, string content)\n    {\n        this.title = title;\n        this.author = author;\n        this.content = content;\n    }\n    \n    public string Title => title;\n    \n    public string Author => author;\n    \n    public string Content => content;\n}\n\npublic class BookPrinter\n{\n    public void Print(Book book)\n    {\n        Console.WriteLine($\"Title: {book.Title}\");\n        Console.WriteLine($\"Author: {book.Author}\");\n        Console.WriteLine($\"Content: {book.Content}\");\n    }\n}\n\npublic class BookFileSaver\n{\n    public void SaveToFile(Book book, string filename)\n    {\n        Console.WriteLine($\"Saving book to {filename}\");\n    }\n}",
            "level": "EASY",
            "language": "CSHARP",
            "violation": "SRP",
            "description": "Book printing file saving"
        },
        {
            "input": "public class Product\n{\n    private string name;\n    private double price;\n    \n    public Product(string name, double price)\n    {\n        this.name = name;\n        this.price = price;\n    }\n    \n    public double ApplyDiscount(double percentage)\n    {\n        return price * (1 - percentage / 100);\n    }\n    \n    public void DisplayProduct()\n    {\n        Console.WriteLine($\"Product: {name}, Price: ${price}\");\n    }\n}",
            "output": "public class Product\n{\n    private string name;\n    private double price;\n    \n    public Product(string name, double price)\n    {\n        this.name = name;\n        this.price = price;\n    }\n    \n    public string GetName()\n    {\n        return name;\n    }\n    \n    public double GetPrice()\n    {\n        return price;\n    }\n}\n\npublic class DiscountCalculator\n{\n    public double ApplyDiscount(Product product, double percentage)\n    {\n        return product.GetPrice() * (1 - percentage / 100);\n    }\n}\n\npublic class ProductDisplay\n{\n    public void Display(Product product)\n    {\n        Console.WriteLine($\"Product: {product.GetName()}, Price: ${product.GetPrice()}\");\n    }\n}",
            "level": "EASY",
            "language": "CSHARP",
            "violation": "SRP",
            "description": "Product discount display system"
        },
        {
            "input": "using System;\n\npublic class User\n{\n    public string Name { get; set; }\n    public string Email { get; set; }\n    public string Password { get; private set; }\n    public bool IsActive { get; set; }\n    public string Role { get; set; }\n    public DateTime? LastLogin { get; set; }\n    public int LoginAttempts { get; set; }\n    \n    public User(string name, string email)\n    {\n        Name = name;\n        Email = email;\n        IsActive = true;\n        Role = \"USER\";\n        LoginAttempts = 0;\n    }\n    \n    public void SaveToDatabase()\n    {\n        Console.WriteLine($\"Saving user {Name} to database\");\n    }\n    \n    public void SendWelcomeEmail()\n    {\n        Console.WriteLine($\"Sending welcome email to {Email}\");\n    }\n    \n    public bool ValidateEmail(string email)\n    {\n        if (string.IsNullOrEmpty(email))\n        {\n            return false;\n        }\n        return email.Contains(\"@\") && email.Contains(\".\");\n    }\n    \n    public bool ValidatePassword(string password)\n    {\n        if (string.IsNullOrEmpty(password) || password.Length < 8)\n        {\n            return false;\n        }\n        \n        bool hasUpper = false;\n        bool hasLower = false;\n        bool hasDigit = false;\n        \n        foreach (char c in password)\n        {\n            if (char.IsUpper(c)) hasUpper = true;\n            if (char.IsLower(c)) hasLower = true;\n            if (char.IsDigit(c)) hasDigit = true;\n        }\n        \n        return hasUpper && hasLower && hasDigit;\n    }\n    \n    public string HashPassword(string password)\n    {\n        int hash = 0;\n        foreach (char c in password)\n        {\n            hash = hash * 31 + c;\n        }\n        return Math.Abs(hash).ToString();\n    }\n    \n    public bool Authenticate(string password)\n    {\n        if (LoginAttempts >= 5)\n        {\n            Console.WriteLine(\"Account locked due to too many failed attempts\");\n            return false;\n        }\n        \n        if (Password != null && Password.Equals(HashPassword(password)))\n        {\n            LoginAttempts = 0;\n            LastLogin = DateTime.Now;\n            return true;\n        }\n        \n        LoginAttempts++;\n        return false;\n    }\n    \n    public void LockAccount()\n    {\n        IsActive = false;\n        Console.WriteLine($\"Account locked for user: {Name}\");\n    }\n    \n    public void UnlockAccount()\n    {\n        IsActive = true;\n        LoginAttempts = 0;\n        Console.WriteLine($\"Account unlocked for user: {Name}\");\n    }\n    \n    public void SetPassword(string password)\n    {\n        Password = HashPassword(password);\n    }\n}",
            "output": "using System;\n\npublic class DatabaseService\n{\n    public void SaveUser(User user)\n    {\n        Console.WriteLine($\"Saving user {user.Name} to database\");\n    }\n}\n\npublic class EmailService\n{\n    public void SendWelcomeEmail(string email)\n    {\n        Console.WriteLine($\"Sending welcome email to {email}\");\n    }\n}\n\npublic class ValidationService\n{\n    public bool ValidateEmail(string email)\n    {\n        if (string.IsNullOrEmpty(email))\n        {\n            return false;\n        }\n        return email.Contains(\"@\") && email.Contains(\".\");\n    }\n    \n    public bool ValidatePassword(string password)\n    {\n        if (string.IsNullOrEmpty(password) || password.Length < 8)\n        {\n            return false;\n        }\n        \n        bool hasUpper = false;\n        bool hasLower = false;\n        bool hasDigit = false;\n        \n        foreach (char c in password)\n        {\n            if (char.IsUpper(c)) hasUpper = true;\n            if (char.IsLower(c)) hasLower = true;\n            if (char.IsDigit(c)) hasDigit = true;\n        }\n        \n        return hasUpper && hasLower && hasDigit;\n    }\n}\n\npublic class PasswordService\n{\n    public string HashPassword(string password)\n    {\n        int hash = 0;\n        foreach (char c in password)\n        {\n            hash = hash * 31 + c;\n        }\n        return Math.Abs(hash).ToString();\n    }\n}\n\npublic class AuthenticationService\n{\n    private readonly PasswordService _passwordService;\n    \n    public AuthenticationService()\n    {\n        _passwordService = new PasswordService();\n    }\n    \n    public bool Authenticate(User user, string password)\n    {\n        if (user.LoginAttempts >= 5)\n        {\n            Console.WriteLine(\"Account locked due to too many failed attempts\");\n            return false;\n        }\n        \n        if (user.Password != null && user.Password.Equals(_passwordService.HashPassword(password)))\n        {\n            user.ResetLoginAttempts();\n            user.UpdateLastLogin();\n            return true;\n        }\n        \n        user.IncrementLoginAttempts();\n        return false;\n    }\n}\n\npublic class AccountService\n{\n    public void LockAccount(User user)\n    {\n        user.IsActive = false;\n        Console.WriteLine($\"Account locked for user: {user.Name}\");\n    }\n    \n    public void UnlockAccount(User user)\n    {\n        user.IsActive = true;\n        user.ResetLoginAttempts();\n        Console.WriteLine($\"Account unlocked for user: {user.Name}\");\n    }\n}\n\npublic class User\n{\n    public string Name { get; set; }\n    public string Email { get; set; }\n    public string Password { get; private set; }\n    public bool IsActive { get; set; }\n    public string Role { get; set; }\n    public DateTime? LastLogin { get; private set; }\n    public int LoginAttempts { get; private set; }\n    \n    private readonly PasswordService _passwordService;\n    \n    public User(string name, string email)\n    {\n        Name = name;\n        Email = email;\n        IsActive = true;\n        Role = \"USER\";\n        LoginAttempts = 0;\n        _passwordService = new PasswordService();\n    }\n    \n    public void SetPassword(string password)\n    {\n        Password = _passwordService.HashPassword(password);\n    }\n    \n    public void UpdateLastLogin()\n    {\n        LastLogin = DateTime.Now;\n    }\n    \n    public void IncrementLoginAttempts()\n    {\n        LoginAttempts++;\n    }\n    \n    public void ResetLoginAttempts()\n    {\n        LoginAttempts = 0;\n    }\n}",
            "level": "MODERATE",
            "language": "CSHARP",
            "violation": "SRP",
            "description": "User database email operations"
        },
        {
            "input": "using System;\n\npublic class Employee\n{\n    public string Name { get; set; }\n    public double BaseSalary { get; set; }\n    public int YearsOfService { get; set; }\n    public string Department { get; set; }\n    public string Position { get; set; }\n    public string EmployeeId { get; private set; }\n    public DateTime HireDate { get; private set; }\n    public DateTime? LastReviewDate { get; set; }\n    public double PerformanceRating { get; set; }\n    public int VacationDays { get; set; }\n    public int UsedVacationDays { get; set; }\n    public string Manager { get; set; }\n    public string Email { get; set; }\n    \n    public Employee(string name, double baseSalary, int yearsOfService)\n    {\n        Name = name;\n        BaseSalary = baseSalary;\n        YearsOfService = yearsOfService;\n        EmployeeId = GenerateEmployeeId();\n        HireDate = DateTime.Now;\n        VacationDays = 20;\n        UsedVacationDays = 0;\n        PerformanceRating = 3.0;\n    }\n    \n    public double CalculateSalary()\n    {\n        return BaseSalary + (YearsOfService * 1000);\n    }\n    \n    public void PrintPaySlip()\n    {\n        Console.WriteLine($\"Pay slip for {Name}: ${CalculateSalary()}\");\n    }\n    \n    public double CalculateBonus()\n    {\n        double baseBonus = BaseSalary * 0.1;\n        if (PerformanceRating >= 4.0)\n        {\n            baseBonus *= 1.5;\n        }\n        else if (PerformanceRating >= 3.5)\n        {\n            baseBonus *= 1.2;\n        }\n        return baseBonus;\n    }\n    \n    public double CalculateAnnualSalary()\n    {\n        return CalculateSalary() * 12 + CalculateBonus();\n    }\n    \n    public void ProcessPayroll()\n    {\n        double monthlySalary = CalculateSalary();\n        double taxes = CalculateTaxes(monthlySalary);\n        double netPay = monthlySalary - taxes;\n        \n        Console.WriteLine($\"Processing payroll for {Name}\");\n        Console.WriteLine($\"Gross Pay: ${monthlySalary}\");\n        Console.WriteLine($\"Taxes: ${taxes}\");\n        Console.WriteLine($\"Net Pay: ${netPay}\");\n    }\n    \n    public double CalculateTaxes(double salary)\n    {\n        if (salary <= 3000)\n        {\n            return salary * 0.15;\n        }\n        else if (salary <= 6000)\n        {\n            return salary * 0.20;\n        }\n        else\n        {\n            return salary * 0.25;\n        }\n    }\n    \n    public bool RequestVacation(int days)\n    {\n        if (UsedVacationDays + days <= VacationDays)\n        {\n            UsedVacationDays += days;\n            Console.WriteLine($\"Vacation request approved for {Name}: {days} days\");\n            NotifyManager($\"Vacation request approved for {Name}\");\n            return true;\n        }\n        else\n        {\n            Console.WriteLine($\"Vacation request denied for {Name}: insufficient days\");\n            return false;\n        }\n    }\n    \n    public void NotifyManager(string message)\n    {\n        if (!string.IsNullOrEmpty(Manager))\n        {\n            Console.WriteLine($\"Sending notification to manager {Manager}: {message}\");\n        }\n    }\n    \n    public void SendPayrollEmail()\n    {\n        if (!string.IsNullOrEmpty(Email))\n        {\n            Console.WriteLine($\"Sending payroll email to {Email}\");\n            Console.WriteLine(\"Subject: Your monthly payslip\");\n            Console.WriteLine(\"Body: Please find your payslip attached.\");\n        }\n    }\n    \n    public void ConductPerformanceReview()\n    {\n        Console.WriteLine($\"Conducting performance review for {Name}\");\n        Console.WriteLine($\"Current rating: {PerformanceRating}\");\n        LastReviewDate = DateTime.Now;\n        \n        if (PerformanceRating >= 4.0)\n        {\n            Console.WriteLine(\"Excellent performance! Recommending for promotion.\");\n        }\n        else if (PerformanceRating < 2.0)\n        {\n            Console.WriteLine(\"Performance improvement needed.\");\n        }\n    }\n    \n    public void UpdatePerformanceRating(double rating)\n    {\n        if (rating >= 1.0 && rating <= 5.0)\n        {\n            PerformanceRating = rating;\n            Console.WriteLine($\"Performance rating updated to {rating} for {Name}\");\n        }\n        else\n        {\n            Console.WriteLine(\"Invalid rating. Must be between 1.0 and 5.0\");\n        }\n    }\n    \n    private string GenerateEmployeeId()\n    {\n        return $\"EMP{DateTimeOffset.UtcNow.ToUnixTimeMilliseconds() % 10000}\";\n    }\n    \n    public void PrintEmployeeReport()\n    {\n        Console.WriteLine($\"Employee Report for {Name}\");\n        Console.WriteLine($\"ID: {EmployeeId}\");\n        Console.WriteLine($\"Department: {Department}\");\n        Console.WriteLine($\"Position: {Position}\");\n        Console.WriteLine($\"Hire Date: {HireDate}\");\n        Console.WriteLine($\"Years of Service: {YearsOfService}\");\n        Console.WriteLine($\"Base Salary: ${BaseSalary}\");\n        Console.WriteLine($\"Performance Rating: {PerformanceRating}\");\n        Console.WriteLine($\"Vacation Days Remaining: {VacationDays - UsedVacationDays}\");\n    }\n}",
            "output": "using System;\n\npublic class SalaryCalculationService\n{\n    public double CalculateSalary(double baseSalary, int yearsOfService)\n    {\n        return baseSalary + (yearsOfService * 1000);\n    }\n    \n    public double CalculateBonus(double baseSalary, double performanceRating)\n    {\n        double baseBonus = baseSalary * 0.1;\n        if (performanceRating >= 4.0)\n        {\n            baseBonus *= 1.5;\n        }\n        else if (performanceRating >= 3.5)\n        {\n            baseBonus *= 1.2;\n        }\n        return baseBonus;\n    }\n    \n    public double CalculateAnnualSalary(double baseSalary, int yearsOfService, double performanceRating)\n    {\n        double monthlySalary = CalculateSalary(baseSalary, yearsOfService);\n        double bonus = CalculateBonus(baseSalary, performanceRating);\n        return monthlySalary * 12 + bonus;\n    }\n}\n\npublic class TaxCalculationService\n{\n    public double CalculateTaxes(double salary)\n    {\n        if (salary <= 3000)\n        {\n            return salary * 0.15;\n        }\n        else if (salary <= 6000)\n        {\n            return salary * 0.20;\n        }\n        else\n        {\n            return salary * 0.25;\n        }\n    }\n}\n\npublic class PayrollService\n{\n    private readonly SalaryCalculationService _salaryService;\n    private readonly TaxCalculationService _taxService;\n    \n    public PayrollService()\n    {\n        _salaryService = new SalaryCalculationService();\n        _taxService = new TaxCalculationService();\n    }\n    \n    public void ProcessPayroll(Employee employee)\n    {\n        double monthlySalary = _salaryService.CalculateSalary(employee.BaseSalary, employee.YearsOfService);\n        double taxes = _taxService.CalculateTaxes(monthlySalary);\n        double netPay = monthlySalary - taxes;\n        \n        Console.WriteLine($\"Processing payroll for {employee.Name}\");\n        Console.WriteLine($\"Gross Pay: ${monthlySalary}\");\n        Console.WriteLine($\"Taxes: ${taxes}\");\n        Console.WriteLine($\"Net Pay: ${netPay}\");\n    }\n    \n    public void PrintPaySlip(Employee employee)\n    {\n        double salary = _salaryService.CalculateSalary(employee.BaseSalary, employee.YearsOfService);\n        Console.WriteLine($\"Pay slip for {employee.Name}: ${salary}\");\n    }\n}\n\npublic class EmailService\n{\n    public void SendPayrollEmail(string email, string employeeName)\n    {\n        if (!string.IsNullOrEmpty(email))\n        {\n            Console.WriteLine($\"Sending payroll email to {email}\");\n            Console.WriteLine(\"Subject: Your monthly payslip\");\n            Console.WriteLine(\"Body: Please find your payslip attached.\");\n        }\n    }\n    \n    public void NotifyManager(string manager, string message)\n    {\n        if (!string.IsNullOrEmpty(manager))\n        {\n            Console.WriteLine($\"Sending notification to manager {manager}: {message}\");\n        }\n    }\n}\n\npublic class VacationService\n{\n    private readonly EmailService _emailService;\n    \n    public VacationService()\n    {\n        _emailService = new EmailService();\n    }\n    \n    public bool RequestVacation(Employee employee, int days)\n    {\n        if (employee.UsedVacationDays + days <= employee.VacationDays)\n        {\n            employee.UsedVacationDays += days;\n            Console.WriteLine($\"Vacation request approved for {employee.Name}: {days} days\");\n            _emailService.NotifyManager(employee.Manager, $\"Vacation request approved for {employee.Name}\");\n            return true;\n        }\n        else\n        {\n            Console.WriteLine($\"Vacation request denied for {employee.Name}: insufficient days\");\n            return false;\n        }\n    }\n}\n\npublic class PerformanceService\n{\n    public void ConductPerformanceReview(Employee employee)\n    {\n        Console.WriteLine($\"Conducting performance review for {employee.Name}\");\n        Console.WriteLine($\"Current rating: {employee.PerformanceRating}\");\n        employee.LastReviewDate = DateTime.Now;\n        \n        if (employee.PerformanceRating >= 4.0)\n        {\n            Console.WriteLine(\"Excellent performance! Recommending for promotion.\");\n        }\n        else if (employee.PerformanceRating < 2.0)\n        {\n            Console.WriteLine(\"Performance improvement needed.\");\n        }\n    }\n    \n    public void UpdatePerformanceRating(Employee employee, double rating)\n    {\n        if (rating >= 1.0 && rating <= 5.0)\n        {\n            employee.PerformanceRating = rating;\n            Console.WriteLine($\"Performance rating updated to {rating} for {employee.Name}\");\n        }\n        else\n        {\n            Console.WriteLine(\"Invalid rating. Must be between 1.0 and 5.0\");\n        }\n    }\n}\n\npublic class EmployeeIdGenerationService\n{\n    public string GenerateEmployeeId()\n    {\n        return $\"EMP{DateTimeOffset.UtcNow.ToUnixTimeMilliseconds() % 10000}\";\n    }\n}\n\npublic class ReportService\n{\n    public void PrintEmployeeReport(Employee employee)\n    {\n        Console.WriteLine($\"Employee Report for {employee.Name}\");\n        Console.WriteLine($\"ID: {employee.EmployeeId}\");\n        Console.WriteLine($\"Department: {employee.Department}\");\n        Console.WriteLine($\"Position: {employee.Position}\");\n        Console.WriteLine($\"Hire Date: {employee.HireDate}\");\n        Console.WriteLine($\"Years of Service: {employee.YearsOfService}\");\n        Console.WriteLine($\"Base Salary: ${employee.BaseSalary}\");\n        Console.WriteLine($\"Performance Rating: {employee.PerformanceRating}\");\n        Console.WriteLine($\"Vacation Days Remaining: {employee.VacationDays - employee.UsedVacationDays}\");\n    }\n}\n\npublic class Employee\n{\n    public string Name { get; set; }\n    public double BaseSalary { get; set; }\n    public int YearsOfService { get; set; }\n    public string Department { get; set; }\n    public string Position { get; set; }\n    public string EmployeeId { get; private set; }\n    public DateTime HireDate { get; private set; }\n    public DateTime? LastReviewDate { get; set; }\n    public double PerformanceRating { get; set; }\n    public int VacationDays { get; set; }\n    public int UsedVacationDays { get; set; }\n    public string Manager { get; set; }\n    public string Email { get; set; }\n    \n    public Employee(string name, double baseSalary, int yearsOfService)\n    {\n        Name = name;\n        BaseSalary = baseSalary;\n        YearsOfService = yearsOfService;\n        \n        var idService = new EmployeeIdGenerationService();\n        EmployeeId = idService.GenerateEmployeeId();\n        \n        HireDate = DateTime.Now;\n        VacationDays = 20;\n        UsedVacationDays = 0;\n        PerformanceRating = 3.0;\n    }\n}",
            "level": "MODERATE",
            "language": "CSHARP",
            "violation": "SRP",
            "description": "Employee salary payslip system"
        },
        {
            "input": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\n\npublic class FileStorage\n{\n    private string basePath;\n    \n    public FileStorage(string basePath)\n    {\n        this.basePath = basePath;\n    }\n    \n    public void SaveToFile(string filename, string content)\n    {\n        Console.WriteLine($\"Saving content to file: {basePath}/{filename}\");\n    }\n    \n    public string LoadFromFile(string filename)\n    {\n        Console.WriteLine($\"Loading content from file: {basePath}/{filename}\");\n        return \"file content\";\n    }\n    \n    public void DeleteFile(string filename)\n    {\n        Console.WriteLine($\"Deleting file: {basePath}/{filename}\");\n    }\n}\n\npublic class Book\n{\n    private string title;\n    private string author;\n    private string content;\n    private string isbn;\n    private DateTime publishDate;\n    private string genre;\n    private int pageCount;\n    private double price;\n    private string publisher;\n    private List<string> reviews;\n    private double averageRating;\n    private int totalSales;\n    \n    private FileStorage fileStorage;\n    \n    public Book(string title, string author, string content)\n    {\n        this.title = title;\n        this.author = author;\n        this.content = content;\n        this.publishDate = DateTime.Now;\n        this.reviews = new List<string>();\n        this.averageRating = 0.0;\n        this.totalSales = 0;\n        this.fileStorage = new FileStorage(\"/books/storage\");\n        \n        GenerateISBN();\n        CalculatePageCount();\n    }\n    \n    public void PrintBook()\n    {\n        Console.WriteLine($\"Title: {title}\");\n        Console.WriteLine($\"Author: {author}\");\n        Console.WriteLine($\"Content: {content}\");\n    }\n    \n    public void SaveToFile(string filename)\n    {\n        string bookData = FormatBookData();\n        fileStorage.SaveToFile(filename, bookData);\n    }\n    \n    private string FormatBookData()\n    {\n        return $\"TITLE: {title}\\nAUTHOR: {author}\\nISBN: {isbn}\\nPAGES: {pageCount}\\nPRICE: ${price}\\nRATING: {averageRating}\\nSALES: {totalSales}\\nCONTENT: {content}\";\n    }\n    \n    private void GenerateISBN()\n    {\n        long timestamp = DateTimeOffset.Now.ToUnixTimeMilliseconds() % 10000;\n        int randomNum = new Random().Next(1000);\n        isbn = $\"978-{timestamp}-{randomNum:D3}\";\n    }\n    \n    private void CalculatePageCount()\n    {\n        pageCount = !string.IsNullOrEmpty(content) ? Math.Max(1, content.Length / 250) : 1;\n    }\n    \n    public bool ValidateISBN(string isbn)\n    {\n        if (string.IsNullOrEmpty(isbn) || isbn.Length < 10) return false;\n        string cleanISBN = Regex.Replace(isbn, @\"[^0-9X]\", \"\");\n        return cleanISBN.Length == 10 || cleanISBN.Length == 13;\n    }\n    \n    public bool ValidatePrice(double price)\n    {\n        return price >= 0.0 && price <= 999.99;\n    }\n    \n    public void AddReview(string review, double rating)\n    {\n        if (rating >= 1.0 && rating <= 5.0)\n        {\n            reviews.Add(review);\n            averageRating = reviews.Count == 1 ? rating : (averageRating * (reviews.Count - 1) + rating) / reviews.Count;\n            Console.WriteLine(\"Review added successfully\");\n        }\n        else\n        {\n            Console.WriteLine(\"Invalid rating. Must be between 1.0 and 5.0\");\n        }\n    }\n    \n    public void RecordSale()\n    {\n        totalSales++;\n        Console.WriteLine($\"SALES LOG: Book sold - {title} (ISBN: {isbn}) on {DateTime.Now}\");\n        Console.WriteLine($\"INVENTORY: Updating stock for book: {isbn}\");\n    }\n    \n    public double CalculateRoyalty(double salePrice)\n    {\n        double rate = totalSales > 1000 ? 0.15 : (totalSales > 500 ? 0.12 : 0.10);\n        return salePrice * rate;\n    }\n    \n    public string GenerateSalesReport()\n    {\n        double estimatedRevenue = totalSales * price;\n        return $\"=== SALES REPORT ===\\nTitle: {title}\\nAuthor: {author}\\nISBN: {isbn}\\nTotal Sales: {totalSales}\\nAverage Rating: {averageRating:F2}\\nNumber of Reviews: {reviews.Count}\\nCurrent Price: ${price}\\nEstimated Revenue: ${estimatedRevenue:F2}\";\n    }\n    \n    public void PrintFormattedBook()\n    {\n        string formattedOutput = $\"====================\\nBOOK INFORMATION\\n====================\\nTitle: {title}\\nAuthor: {author}\\nISBN: {isbn}\\nGenre: {genre}\\nPages: {pageCount}\\nPrice: ${price}\\nPublisher: {publisher}\\nRating: {averageRating}/5.0\\nSales: {totalSales}\\n====================\\nCONTENT:\\n{content}\\n====================\";\n        Console.WriteLine(formattedOutput);\n    }\n    \n    public void ExportToJSON()\n    {\n        string json = $@\"{{\n  \"\"title\"\": \"\"{title}\"\",\n  \"\"author\"\": \"\"{author}\"\",\n  \"\"isbn\"\": \"\"{isbn}\"\",\n  \"\"genre\"\": \"\"{genre}\"\",\n  \"\"pages\"\": {pageCount},\n  \"\"price\"\": {price},\n  \"\"rating\"\": {averageRating},\n  \"\"sales\"\": {totalSales}\n}}\";\n        fileStorage.SaveToFile($\"{isbn}.json\", json);\n    }\n    \n    // Properties\n    public string Title\n    {\n        get => title;\n        set => title = value;\n    }\n    \n    public string Author\n    {\n        get => author;\n        set => author = value;\n    }\n    \n    public string Content\n    {\n        get => content;\n        set\n        {\n            content = value;\n            CalculatePageCount();\n        }\n    }\n    \n    public string ISBN => isbn;\n    \n    public DateTime PublishDate => publishDate;\n    \n    public string Genre\n    {\n        get => genre;\n        set => genre = value;\n    }\n    \n    public int PageCount => pageCount;\n    \n    public double Price\n    {\n        get => price;\n        set\n        {\n            if (ValidatePrice(value))\n            {\n                price = value;\n            }\n        }\n    }\n    \n    public string Publisher\n    {\n        get => publisher;\n        set => publisher = value;\n    }\n    \n    public IReadOnlyList<string> Reviews => reviews.AsReadOnly();\n    \n    public double AverageRating => averageRating;\n    \n    public int TotalSales => totalSales;\n}",
            "output": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\n\npublic class FileStorage\n{\n    private readonly string basePath;\n    \n    public FileStorage(string basePath)\n    {\n        this.basePath = basePath;\n    }\n    \n    public void SaveToFile(string filename, string content)\n    {\n        Console.WriteLine($\"Saving content to file: {basePath}/{filename}\");\n    }\n    \n    public string LoadFromFile(string filename)\n    {\n        Console.WriteLine($\"Loading content from file: {basePath}/{filename}\");\n        return \"file content\";\n    }\n    \n    public void DeleteFile(string filename)\n    {\n        Console.WriteLine($\"Deleting file: {basePath}/{filename}\");\n    }\n}\n\npublic class ISBNGenerationService\n{\n    public string GenerateISBN()\n    {\n        long timestamp = DateTimeOffset.Now.ToUnixTimeMilliseconds() % 10000;\n        int randomNum = new Random().Next(1000);\n        return $\"978-{timestamp}-{randomNum:D3}\";\n    }\n}\n\npublic class PageCalculationService\n{\n    public int CalculatePageCount(string content)\n    {\n        return !string.IsNullOrEmpty(content) ? Math.Max(1, content.Length / 250) : 1;\n    }\n}\n\npublic class ValidationService\n{\n    public bool ValidateISBN(string isbn)\n    {\n        if (string.IsNullOrEmpty(isbn) || isbn.Length < 10) return false;\n        string cleanISBN = Regex.Replace(isbn, @\"[^0-9X]\", \"\");\n        return cleanISBN.Length == 10 || cleanISBN.Length == 13;\n    }\n    \n    public bool ValidatePrice(double price)\n    {\n        return price >= 0.0 && price <= 999.99;\n    }\n    \n    public bool ValidateRating(double rating)\n    {\n        return rating >= 1.0 && rating <= 5.0;\n    }\n}\n\npublic class ReviewManagementService\n{\n    private readonly ValidationService validator;\n    \n    public ReviewManagementService()\n    {\n        validator = new ValidationService();\n    }\n    \n    public void AddReview(Book book, string review, double rating)\n    {\n        if (validator.ValidateRating(rating))\n        {\n            book.Reviews.Add(review);\n            book.AverageRating = CalculateNewAverageRating(book.AverageRating, book.Reviews.Count, rating);\n            Console.WriteLine(\"Review added successfully\");\n        }\n        else\n        {\n            Console.WriteLine(\"Invalid rating. Must be between 1.0 and 5.0\");\n        }\n    }\n    \n    private double CalculateNewAverageRating(double currentAverage, int reviewCount, double newRating)\n    {\n        return reviewCount == 1 ? newRating : (currentAverage * (reviewCount - 1) + newRating) / reviewCount;\n    }\n}\n\npublic class SalesManagementService\n{\n    public void RecordSale(Book book)\n    {\n        book.TotalSales++;\n        LogSaleActivity(book);\n        UpdateInventory(book);\n    }\n    \n    private void LogSaleActivity(Book book)\n    {\n        Console.WriteLine($\"SALES LOG: Book sold - {book.Title} (ISBN: {book.ISBN}) on {DateTime.Now}\");\n    }\n    \n    private void UpdateInventory(Book book)\n    {\n        Console.WriteLine($\"INVENTORY: Updating stock for book: {book.ISBN}\");\n    }\n}\n\npublic class RoyaltyCalculationService\n{\n    public double CalculateRoyalty(double salePrice, int totalSales)\n    {\n        double rate = totalSales > 1000 ? 0.15 : (totalSales > 500 ? 0.12 : 0.10);\n        return salePrice * rate;\n    }\n}\n\npublic class DataFormattingService\n{\n    public string FormatBookData(Book book)\n    {\n        return $\"TITLE: {book.Title}\\nAUTHOR: {book.Author}\\nISBN: {book.ISBN}\\nPAGES: {book.PageCount}\\nPRICE: ${book.Price}\\nRATING: {book.AverageRating}\\nSALES: {book.TotalSales}\\nCONTENT: {book.Content}\";\n    }\n    \n    public string FormatBookForDisplay(Book book)\n    {\n        return $\"====================\\nBOOK INFORMATION\\n====================\\nTitle: {book.Title}\\nAuthor: {book.Author}\\nISBN: {book.ISBN}\\nGenre: {book.Genre}\\nPages: {book.PageCount}\\nPrice: ${book.Price}\\nPublisher: {book.Publisher}\\nRating: {book.AverageRating}/5.0\\nSales: {book.TotalSales}\\n====================\\nCONTENT:\\n{book.Content}\\n====================\";\n    }\n    \n    public string FormatAsJSON(Book book)\n    {\n        return $@\"{{\n  \"\"title\"\": \"\"{book.Title}\"\",\n  \"\"author\"\": \"\"{book.Author}\"\",\n  \"\"isbn\"\": \"\"{book.ISBN}\"\",\n  \"\"genre\"\": \"\"{book.Genre}\"\",\n  \"\"pages\"\": {book.PageCount},\n  \"\"price\"\": {book.Price},\n  \"\"rating\"\": {book.AverageRating},\n  \"\"sales\"\": {book.TotalSales}\n}}\";\n    }\n}\n\npublic class ReportGenerationService\n{\n    public string GenerateSalesReport(Book book)\n    {\n        double estimatedRevenue = book.TotalSales * book.Price;\n        return $\"=== SALES REPORT ===\\nTitle: {book.Title}\\nAuthor: {book.Author}\\nISBN: {book.ISBN}\\nTotal Sales: {book.TotalSales}\\nAverage Rating: {book.AverageRating:F2}\\nNumber of Reviews: {book.Reviews.Count}\\nCurrent Price: ${book.Price}\\nEstimated Revenue: ${estimatedRevenue:F2}\";\n    }\n}\n\npublic class BookPrintingService\n{\n    private readonly DataFormattingService formatter;\n    \n    public BookPrintingService()\n    {\n        formatter = new DataFormattingService();\n    }\n    \n    public void PrintBook(Book book)\n    {\n        Console.WriteLine($\"Title: {book.Title}\");\n        Console.WriteLine($\"Author: {book.Author}\");\n        Console.WriteLine($\"Content: {book.Content}\");\n    }\n    \n    public void PrintFormattedBook(Book book)\n    {\n        string formattedBook = formatter.FormatBookForDisplay(book);\n        Console.WriteLine(formattedBook);\n    }\n}\n\npublic class BookFileService\n{\n    private readonly FileStorage fileStorage;\n    private readonly DataFormattingService formatter;\n    \n    public BookFileService()\n    {\n        fileStorage = new FileStorage(\"/books/storage\");\n        formatter = new DataFormattingService();\n    }\n    \n    public void SaveToFile(Book book, string filename)\n    {\n        string bookData = formatter.FormatBookData(book);\n        fileStorage.SaveToFile(filename, bookData);\n    }\n    \n    public void ExportToJSON(Book book)\n    {\n        string json = formatter.FormatAsJSON(book);\n        fileStorage.SaveToFile($\"{book.ISBN}.json\", json);\n    }\n}\n\npublic class Book\n{\n    private string title;\n    private string author;\n    private string content;\n    private string isbn;\n    private readonly DateTime publishDate;\n    private string genre;\n    private int pageCount;\n    private double price;\n    private string publisher;\n    private readonly List<string> reviews;\n    private double averageRating;\n    private int totalSales;\n    \n    public Book(string title, string author, string content)\n    {\n        this.title = title;\n        this.author = author;\n        this.content = content;\n        this.publishDate = DateTime.Now;\n        this.reviews = new List<string>();\n        this.averageRating = 0.0;\n        this.totalSales = 0;\n        \n        InitializeBook();\n    }\n    \n    private void InitializeBook()\n    {\n        var isbnService = new ISBNGenerationService();\n        isbn = isbnService.GenerateISBN();\n        \n        var pageService = new PageCalculationService();\n        pageCount = pageService.CalculatePageCount(content);\n    }\n    \n    // Properties\n    public string Title\n    {\n        get => title;\n        set => title = value;\n    }\n    \n    public string Author\n    {\n        get => author;\n        set => author = value;\n    }\n    \n    public string Content\n    {\n        get => content;\n        set\n        {\n            content = value;\n            var pageService = new PageCalculationService();\n            pageCount = pageService.CalculatePageCount(value);\n        }\n    }\n    \n    public string ISBN => isbn;\n    \n    public DateTime PublishDate => publishDate;\n    \n    public string Genre\n    {\n        get => genre;\n        set => genre = value;\n    }\n    \n    public int PageCount => pageCount;\n    \n    public double Price\n    {\n        get => price;\n        set\n        {\n            var validator = new ValidationService();\n            if (validator.ValidatePrice(value))\n            {\n                price = value;\n            }\n        }\n    }\n    \n    public string Publisher\n    {\n        get => publisher;\n        set => publisher = value;\n    }\n    \n    public List<string> Reviews => reviews;\n    \n    public double AverageRating\n    {\n        get => averageRating;\n        set => averageRating = value;\n    }\n    \n    public int TotalSales\n    {\n        get => totalSales;\n        set => totalSales = value;\n    }\n}",
            "level": "MODERATE",
            "language": "CSHARP",
            "violation": "SRP",
            "description": "Book printing file saving"
        },
        {
            "input": "using System;\nusing System.Collections.Generic;\n\npublic class InventoryDatabase\n{\n    private readonly string connectionString;\n    \n    public InventoryDatabase(string connectionString)\n    {\n        this.connectionString = connectionString;\n    }\n    \n    public void UpdateStock(string productId, int quantity)\n    {\n        Console.WriteLine($\"Updating stock in database - Product: {productId}, Quantity: {quantity}\");\n    }\n    \n    public void LogTransaction(string type, string details)\n    {\n        Console.WriteLine($\"[DB LOG] {type}: {details}\");\n    }\n}\n\npublic class NotificationService\n{\n    private readonly string apiKey;\n    \n    public NotificationService(string apiKey)\n    {\n        this.apiKey = apiKey;\n    }\n    \n    public void SendEmail(string recipient, string subject, string body)\n    {\n        Console.WriteLine($\"Sending email to: {recipient}, Subject: {subject}\");\n    }\n}\n\npublic class Product\n{\n    private string name;\n    private double price;\n    private readonly string productId;\n    private int stockQuantity = 100;\n    private readonly List<string> customerReviews;\n    private double averageRating = 0.0;\n    private int totalSales = 0;\n    private readonly double costPrice;\n    private readonly InventoryDatabase database;\n    private readonly NotificationService notificationService;\n    \n    public Product(string name, double price)\n    {\n        this.name = name;\n        this.price = price;\n        this.productId = $\"PRD-{DateTimeOffset.Now.ToUnixTimeMilliseconds() % 100000}\";\n        this.customerReviews = new List<string>();\n        this.costPrice = price * 0.6;\n        this.database = new InventoryDatabase(\"jdbc:mysql://localhost:3306/inventory\");\n        this.notificationService = new NotificationService(\"API_KEY_12345\");\n    }\n    \n    public double ApplyDiscount(double percentage)\n    {\n        return price * (1 - percentage / 100);\n    }\n    \n    public void DisplayProduct()\n    {\n        Console.WriteLine($\"Product: {name}, Price: ${price}\");\n    }\n    \n    public double CalculateDiscountedPrice(double discountPercentage)\n    {\n        double discounted = price * (1 - discountPercentage / 100);\n        database.LogTransaction(\"DISCOUNT_APPLIED\", $\"Product: {productId}, Discount: {discountPercentage}%\");\n        return discounted;\n    }\n    \n    public double CalculateProfitMargin()\n    {\n        return ((price - costPrice) / price) * 100;\n    }\n    \n    public double CalculateShippingCost(string destination)\n    {\n        return destination.ToLower() == \"international\" ? 15.99 : 5.99;\n    }\n    \n    public void AddCustomerReview(string review, double rating)\n    {\n        if (rating >= 1.0 && rating <= 5.0)\n        {\n            customerReviews.Add(review);\n            if (customerReviews.Count == 1)\n            {\n                averageRating = rating;\n            }\n            else\n            {\n                averageRating = (averageRating * (customerReviews.Count - 1) + rating) / customerReviews.Count;\n            }\n            database.LogTransaction(\"REVIEW_ADDED\", $\"Product: {productId}, Rating: {rating}\");\n        }\n    }\n    \n    public void ProcessSale(int quantity, string customerEmail)\n    {\n        if (stockQuantity >= quantity)\n        {\n            stockQuantity -= quantity;\n            totalSales += quantity;\n            database.UpdateStock(productId, stockQuantity);\n            notificationService.SendEmail(customerEmail, \"Purchase Confirmation\", $\"Receipt for {name}\");\n            if (stockQuantity <= 10)\n            {\n                notificationService.SendEmail(\"inventory@company.com\", \"Low Stock Alert\", $\"Product {name} low stock\");\n            }\n            database.LogTransaction(\"SALE_COMPLETED\", $\"Product: {productId}, Quantity: {quantity}\");\n        }\n    }\n    \n    public void RestockProduct(int quantity, string supplierEmail)\n    {\n        stockQuantity += quantity;\n        database.UpdateStock(productId, stockQuantity);\n        notificationService.SendEmail(supplierEmail, \"Restock Confirmation\", $\"Added {quantity} units\");\n        database.LogTransaction(\"RESTOCK_COMPLETED\", $\"Product: {productId}, Added: {quantity}\");\n    }\n    \n    public string GenerateProductReport()\n    {\n        return $\"Product: {name}\\nID: {productId}\\nPrice: ${price}\\nStock: {stockQuantity}\\nSales: {totalSales}\\nRating: {averageRating}\";\n    }\n    \n    public void DisplayDetailedProduct()\n    {\n        Console.WriteLine($\"{name} ({productId}) - ${price} - Stock: {stockQuantity} - Rating: {averageRating}\");\n    }\n    \n    public string GetName() => name;\n    \n    public double GetPrice() => price;\n    \n    public void SetPrice(double price)\n    {\n        this.price = price;\n    }\n}",
            "output": "using System;\nusing System.Collections.Generic;\n\npublic class InventoryDatabase\n{\n    private readonly string connectionString;\n    \n    public InventoryDatabase(string connectionString)\n    {\n        this.connectionString = connectionString;\n    }\n    \n    public void UpdateStock(string productId, int quantity)\n    {\n        Console.WriteLine($\"Updating stock in database - Product: {productId}, Quantity: {quantity}\");\n    }\n    \n    public void LogTransaction(string type, string details)\n    {\n        Console.WriteLine($\"[DB LOG] {type}: {details}\");\n    }\n}\n\npublic class NotificationService\n{\n    private readonly string apiKey;\n    \n    public NotificationService(string apiKey)\n    {\n        this.apiKey = apiKey;\n    }\n    \n    public void SendEmail(string recipient, string subject, string body)\n    {\n        Console.WriteLine($\"Sending email to: {recipient}, Subject: {subject}\");\n    }\n}\n\npublic class ProductIdGenerationService\n{\n    public string GenerateProductId()\n    {\n        return $\"PRD-{DateTimeOffset.Now.ToUnixTimeMilliseconds() % 100000}\";\n    }\n}\n\npublic class PricingCalculationService\n{\n    public double ApplyDiscount(double price, double percentage)\n    {\n        return price * (1 - percentage / 100);\n    }\n    \n    public double CalculateDiscountedPrice(double price, double discountPercentage)\n    {\n        return price * (1 - discountPercentage / 100);\n    }\n    \n    public double CalculateProfitMargin(double price, double costPrice)\n    {\n        return ((price - costPrice) / price) * 100;\n    }\n    \n    public double CalculateShippingCost(string destination)\n    {\n        return destination.ToLower() == \"international\" ? 15.99 : 5.99;\n    }\n}\n\npublic class ReviewManagementService\n{\n    private readonly InventoryDatabase database;\n    \n    public ReviewManagementService()\n    {\n        this.database = new InventoryDatabase(\"jdbc:mysql://localhost:3306/inventory\");\n    }\n    \n    public void AddCustomerReview(Product product, string review, double rating)\n    {\n        if (rating >= 1.0 && rating <= 5.0)\n        {\n            product.GetCustomerReviews().Add(review);\n            product.SetAverageRating(CalculateNewAverageRating(product.GetAverageRating(), product.GetCustomerReviews().Count, rating));\n            database.LogTransaction(\"REVIEW_ADDED\", $\"Product: {product.GetProductId()}, Rating: {rating}\");\n        }\n    }\n    \n    private double CalculateNewAverageRating(double currentAverage, int reviewCount, double newRating)\n    {\n        return reviewCount == 1 ? newRating : (currentAverage * (reviewCount - 1) + newRating) / reviewCount;\n    }\n}\n\npublic class SalesProcessingService\n{\n    private readonly InventoryDatabase database;\n    private readonly NotificationService notificationService;\n    private readonly StockAlertService stockAlertService;\n    \n    public SalesProcessingService()\n    {\n        this.database = new InventoryDatabase(\"jdbc:mysql://localhost:3306/inventory\");\n        this.notificationService = new NotificationService(\"API_KEY_12345\");\n        this.stockAlertService = new StockAlertService();\n    }\n    \n    public void ProcessSale(Product product, int quantity, string customerEmail)\n    {\n        if (product.GetStockQuantity() >= quantity)\n        {\n            product.SetStockQuantity(product.GetStockQuantity() - quantity);\n            product.SetTotalSales(product.GetTotalSales() + quantity);\n            \n            database.UpdateStock(product.GetProductId(), product.GetStockQuantity());\n            notificationService.SendEmail(customerEmail, \"Purchase Confirmation\", $\"Receipt for {product.GetName()}\");\n            \n            stockAlertService.CheckLowStockAlert(product, notificationService);\n            \n            database.LogTransaction(\"SALE_COMPLETED\", $\"Product: {product.GetProductId()}, Quantity: {quantity}\");\n        }\n    }\n}\n\npublic class StockAlertService\n{\n    public void CheckLowStockAlert(Product product, NotificationService notificationService)\n    {\n        if (product.GetStockQuantity() <= 10)\n        {\n            notificationService.SendEmail(\"inventory@company.com\", \"Low Stock Alert\", $\"Product {product.GetName()} low stock\");\n        }\n    }\n}\n\npublic class InventoryManagementService\n{\n    private readonly InventoryDatabase database;\n    private readonly NotificationService notificationService;\n    \n    public InventoryManagementService()\n    {\n        this.database = new InventoryDatabase(\"jdbc:mysql://localhost:3306/inventory\");\n        this.notificationService = new NotificationService(\"API_KEY_12345\");\n    }\n    \n    public void RestockProduct(Product product, int quantity, string supplierEmail)\n    {\n        product.SetStockQuantity(product.GetStockQuantity() + quantity);\n        database.UpdateStock(product.GetProductId(), product.GetStockQuantity());\n        notificationService.SendEmail(supplierEmail, \"Restock Confirmation\", $\"Added {quantity} units\");\n        database.LogTransaction(\"RESTOCK_COMPLETED\", $\"Product: {product.GetProductId()}, Added: {quantity}\");\n    }\n}\n\npublic class ReportGenerationService\n{\n    public string GenerateProductReport(Product product)\n    {\n        return $\"Product: {product.GetName()}\\nID: {product.GetProductId()}\\nPrice: ${product.GetPrice()}\\nStock: {product.GetStockQuantity()}\\nSales: {product.GetTotalSales()}\\nRating: {product.GetAverageRating()}\";\n    }\n}\n\npublic class ProductDisplayService\n{\n    public void DisplayProduct(Product product)\n    {\n        Console.WriteLine($\"Product: {product.GetName()}, Price: ${product.GetPrice()}\");\n    }\n    \n    public void DisplayDetailedProduct(Product product)\n    {\n        Console.WriteLine($\"{product.GetName()} ({product.GetProductId()}) - ${product.GetPrice()} - Stock: {product.GetStockQuantity()} - Rating: {product.GetAverageRating()}\");\n    }\n}\n\npublic class DiscountService\n{\n    private readonly InventoryDatabase database;\n    private readonly PricingCalculationService pricingService;\n    \n    public DiscountService()\n    {\n        this.database = new InventoryDatabase(\"jdbc:mysql://localhost:3306/inventory\");\n        this.pricingService = new PricingCalculationService();\n    }\n    \n    public double CalculateDiscountedPrice(Product product, double discountPercentage)\n    {\n        double discounted = pricingService.CalculateDiscountedPrice(product.GetPrice(), discountPercentage);\n        database.LogTransaction(\"DISCOUNT_APPLIED\", $\"Product: {product.GetProductId()}, Discount: {discountPercentage}%\");\n        return discounted;\n    }\n}\n\npublic class Product\n{\n    private string name;\n    private double price;\n    private readonly string productId;\n    private int stockQuantity = 100;\n    private readonly List<string> customerReviews;\n    private double averageRating = 0.0;\n    private int totalSales = 0;\n    private readonly double costPrice;\n    \n    public Product(string name, double price)\n    {\n        this.name = name;\n        this.price = price;\n        this.customerReviews = new List<string>();\n        this.costPrice = price * 0.6;\n        \n        InitializeProduct();\n    }\n    \n    private void InitializeProduct()\n    {\n        var idService = new ProductIdGenerationService();\n        productId = idService.GenerateProductId();\n    }\n    \n    // Getters and Setters\n    public string GetName() => name;\n    \n    public void SetName(string name)\n    {\n        this.name = name;\n    }\n    \n    public double GetPrice() => price;\n    \n    public void SetPrice(double price)\n    {\n        this.price = price;\n    }\n    \n    public string GetProductId() => productId;\n    \n    public int GetStockQuantity() => stockQuantity;\n    \n    public void SetStockQuantity(int stockQuantity)\n    {\n        this.stockQuantity = stockQuantity;\n    }\n    \n    public List<string> GetCustomerReviews() => customerReviews;\n    \n    public double GetAverageRating() => averageRating;\n    \n    public void SetAverageRating(double averageRating)\n    {\n        this.averageRating = averageRating;\n    }\n    \n    public int GetTotalSales() => totalSales;\n    \n    public void SetTotalSales(int totalSales)\n    {\n        this.totalSales = totalSales;\n    }\n    \n    public double GetCostPrice() => costPrice;\n    \n    public void SetCostPrice(double costPrice)\n    {\n        // Note: costPrice is readonly, so this setter cannot modify it\n        // If modification is needed, remove readonly modifier\n        // this.costPrice = costPrice;\n    }\n}",
            "level": "MODERATE",
            "language": "CSHARP",
            "violation": "SRP",
            "description": "Product discount display system"
        },
        {
            "input": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\npublic class DatabaseService\n{\n    private readonly string _connectionString;\n    \n    public DatabaseService(string connectionString)\n    {\n        _connectionString = connectionString;\n    }\n    \n    public void SaveUser(User user)\n    {\n        Console.WriteLine($\"Saving user to database: {user.Name}\");\n    }\n    \n    public void UpdateUser(User user)\n    {\n        Console.WriteLine($\"Updating user in database: {user.Name}\");\n    }\n    \n    public void DeleteUser(string userId)\n    {\n        Console.WriteLine($\"Deleting user from database: {userId}\");\n    }\n}\n\npublic class EmailService\n{\n    private readonly string _smtpServer;\n    private readonly int _port;\n    \n    public EmailService(string smtpServer, int port)\n    {\n        _smtpServer = smtpServer;\n        _port = port;\n    }\n    \n    public void SendEmail(string to, string subject, string body)\n    {\n        Console.WriteLine($\"Sending email to: {to}\");\n        Console.WriteLine($\"Subject: {subject}\");\n    }\n}\n\npublic class SMSService\n{\n    private readonly string _apiKey;\n    \n    public SMSService(string apiKey)\n    {\n        _apiKey = apiKey;\n    }\n    \n    public void SendSMS(string phoneNumber, string message)\n    {\n        Console.WriteLine($\"Sending SMS to: {phoneNumber}\");\n        Console.WriteLine($\"Message: {message}\");\n    }\n}\n\npublic class FileService\n{\n    private readonly string _uploadPath;\n    \n    public FileService(string uploadPath)\n    {\n        _uploadPath = uploadPath;\n    }\n    \n    public string UploadFile(byte[] fileData, string fileName)\n    {\n        Console.WriteLine($\"Uploading file: {fileName}\");\n        return $\"{_uploadPath}/{fileName}\";\n    }\n}\n\npublic static class SecurityConfig\n{\n    public const int MaxLoginAttempts = 5;\n    public const int PasswordExpiryDays = 90;\n}\n\npublic class User\n{\n    public string Name { get; set; }\n    public string Email { get; set; }\n    public string Password { get; private set; }\n    public bool IsActive { get; set; }\n    public string Role { get; set; }\n    public DateTime? LastLogin { get; set; }\n    public int LoginAttempts { get; set; }\n    public string PhoneNumber { get; set; }\n    public DateTime RegistrationDate { get; set; }\n    public List<string> LoginHistory { get; private set; }\n    public Dictionary<string, string> Preferences { get; private set; }\n    public List<string> Notifications { get; private set; }\n    public string ProfilePictureUrl { get; set; }\n    public bool EmailVerified { get; set; }\n    \n    private readonly DatabaseService _dbService;\n    private readonly EmailService _emailService;\n    private readonly SMSService _smsService;\n    private readonly FileService _fileService;\n    \n    public User(string name, string email)\n    {\n        Name = name;\n        Email = email;\n        IsActive = true;\n        Role = \"USER\";\n        LoginAttempts = 0;\n        RegistrationDate = DateTime.Now;\n        LoginHistory = new List<string>();\n        Preferences = new Dictionary<string, string>();\n        Notifications = new List<string>();\n        EmailVerified = false;\n        \n        _dbService = new DatabaseService(\"Server=localhost;Database=userdb;\");\n        _emailService = new EmailService(\"smtp.company.com\", 587);\n        _smsService = new SMSService(\"api_key_12345\");\n        _fileService = new FileService(\"/uploads\");\n        \n        InitializeDefaultPreferences();\n    }\n    \n    public void SaveToDatabase()\n    {\n        _dbService.SaveUser(this);\n    }\n    \n    public void SendWelcomeEmail()\n    {\n        string subject = \"Welcome to our platform!\";\n        string body = CreateWelcomeEmailBody();\n        _emailService.SendEmail(Email, subject, body);\n    }\n    \n    public void SendPasswordResetEmail()\n    {\n        string resetToken = GeneratePasswordResetToken();\n        string subject = \"Password Reset Request\";\n        string body = CreatePasswordResetEmailBody(resetToken);\n        _emailService.SendEmail(Email, subject, body);\n    }\n    \n    public void SendSMSVerification()\n    {\n        if (!string.IsNullOrEmpty(PhoneNumber))\n        {\n            string smsCode = GenerateSMSVerificationCode();\n            string message = $\"Your verification code: {smsCode}\";\n            _smsService.SendSMS(PhoneNumber, message);\n        }\n    }\n    \n    public string CreateWelcomeEmailBody()\n    {\n        return $\"Dear {Name},\\n\\nWelcome to our platform! Complete your profile and explore our features.\\n\\nBest regards,\\nThe Team\";\n    }\n    \n    public string CreatePasswordResetEmailBody(string token)\n    {\n        return $\"Hello {Name},\\n\\nReset your password: https://oursite.com/reset?token={token}\\n\\nLink expires in 24 hours.\";\n    }\n    \n    public string GeneratePasswordResetToken()\n    {\n        long timestamp = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds();\n        string randomPart = new Random().NextDouble().ToString()[2..8];\n        return $\"RESET_{timestamp}_{randomPart}\";\n    }\n    \n    public string GenerateSMSVerificationCode()\n    {\n        return new Random().Next(100000, 1000000).ToString();\n    }\n    \n    public bool ValidateEmailFormat(string email)\n    {\n        if (string.IsNullOrWhiteSpace(email))\n            return false;\n        return email.Contains(\"@\") && email.Contains(\".\") && email.Split('@').Length == 2;\n    }\n    \n    public bool ValidatePasswordStrength(string password)\n    {\n        if (string.IsNullOrEmpty(password) || password.Length < 8)\n            return false;\n        \n        bool hasUpper = password.Any(char.IsUpper);\n        bool hasLower = password.Any(char.IsLower);\n        bool hasDigit = password.Any(char.IsDigit);\n        bool hasSpecial = password.Any(c => \"!@#$%^&*()_+-=[]{}|;:,.<>?\".Contains(c));\n        \n        return hasUpper && hasLower && hasDigit && hasSpecial;\n    }\n    \n    public string HashPassword(string password)\n    {\n        int hash = 7;\n        foreach (char c in password)\n        {\n            hash = hash * 31 + c;\n        }\n        return $\"HASH:{Math.Abs(hash):X}\";\n    }\n    \n    public bool VerifyPassword(string plainPassword, string hashedPassword)\n    {\n        string computedHash = HashPassword(plainPassword);\n        return computedHash.Equals(hashedPassword);\n    }\n    \n    public bool Authenticate(string password)\n    {\n        if (LoginAttempts >= SecurityConfig.MaxLoginAttempts)\n        {\n            Console.WriteLine(\"Account locked due to too many failed attempts\");\n            return false;\n        }\n        \n        if (Password != null && VerifyPassword(password, Password))\n        {\n            LoginAttempts = 0;\n            LastLogin = DateTime.Now;\n            AddToLoginHistory(\"Successful login from IP: 192.168.1.100\");\n            return true;\n        }\n        \n        LoginAttempts++;\n        AddToLoginHistory(\"Failed login attempt from IP: 192.168.1.100\");\n        return false;\n    }\n    \n    public void LockAccount()\n    {\n        IsActive = false;\n        LogSecurityEvent(\"ACCOUNT_LOCKED\", $\"Account locked for user: {Name}\");\n        SendAccountNotification(\"Your account has been locked due to security reasons.\");\n    }\n    \n    public void UnlockAccount()\n    {\n        IsActive = true;\n        LoginAttempts = 0;\n        LogSecurityEvent(\"ACCOUNT_UNLOCKED\", $\"Account unlocked for user: {Name}\");\n        SendAccountNotification(\"Your account has been successfully unlocked.\");\n    }\n    \n    public void LogSecurityEvent(string eventType, string description)\n    {\n        DateTime timestamp = DateTime.Now;\n        string logEntry = $\"[{timestamp}] {eventType}: {description}\";\n        Console.WriteLine($\"SECURITY LOG: {logEntry}\");\n    }\n    \n    public void SendAccountNotification(string message)\n    {\n        AddNotification(message);\n        if (EmailVerified)\n        {\n            _emailService.SendEmail(Email, \"Account Security Alert\", message);\n        }\n        if (!string.IsNullOrEmpty(PhoneNumber))\n        {\n            _smsService.SendSMS(PhoneNumber, $\"Security Alert: {message}\");\n        }\n    }\n    \n    public void AddToLoginHistory(string entry)\n    {\n        string timestampedEntry = $\"{DateTime.Now}: {entry}\";\n        LoginHistory.Add(timestampedEntry);\n        if (LoginHistory.Count > 100)\n        {\n            LoginHistory.RemoveAt(0);\n        }\n    }\n    \n    private void InitializeDefaultPreferences()\n    {\n        Preferences[\"theme\"] = \"light\";\n        Preferences[\"language\"] = \"en\";\n        Preferences[\"notifications\"] = \"enabled\";\n    }\n    \n    public void UpdatePreference(string key, string value)\n    {\n        string oldValue = Preferences.ContainsKey(key) ? Preferences[key] : null;\n        Preferences[key] = value;\n        LogPreferenceChange(key, oldValue, value);\n    }\n    \n    public void LogPreferenceChange(string key, string oldValue, string newValue)\n    {\n        string logEntry = $\"Preference '{key}' changed from '{oldValue}' to '{newValue}'\";\n        Console.WriteLine($\"PREFERENCE LOG: {logEntry}\");\n    }\n    \n    public string GetPreference(string key)\n    {\n        return Preferences.ContainsKey(key) ? Preferences[key] : null;\n    }\n    \n    public void UploadProfilePicture(byte[] imageData, string fileName)\n    {\n        if (ValidateImageFile(imageData, fileName))\n        {\n            ProfilePictureUrl = _fileService.UploadFile(imageData, $\"profile_{Name}_{fileName}\");\n            LogActivityEvent(\"PROFILE_PICTURE_UPLOADED\", \"User uploaded new profile picture\");\n        }\n        else\n        {\n            throw new ArgumentException(\"Invalid image file\");\n        }\n    }\n    \n    public bool ValidateImageFile(byte[] imageData, string fileName)\n    {\n        if (imageData == null || imageData.Length == 0 || imageData.Length > 5 * 1024 * 1024)\n        {\n            return false;\n        }\n        string lower = fileName.ToLower();\n        return lower.EndsWith(\".jpg\") || lower.EndsWith(\".jpeg\") || \n               lower.EndsWith(\".png\") || lower.EndsWith(\".gif\");\n    }\n    \n    public void LogActivityEvent(string eventType, string description)\n    {\n        DateTime timestamp = DateTime.Now;\n        string logEntry = $\"[{timestamp}] {eventType}: {description} (User: {Name})\";\n        Console.WriteLine($\"ACTIVITY LOG: {logEntry}\");\n    }\n    \n    public void AddNotification(string message)\n    {\n        string timestampedNotification = $\"{DateTime.Now}: {message}\";\n        Notifications.Add(timestampedNotification);\n        if (Notifications.Count > 50)\n        {\n            Notifications.RemoveAt(0);\n        }\n    }\n    \n    public void ChangePassword(string oldPassword, string newPassword)\n    {\n        if (!Authenticate(oldPassword))\n        {\n            throw new UnauthorizedAccessException(\"Current password is incorrect\");\n        }\n        \n        if (!ValidatePasswordStrength(newPassword))\n        {\n            throw new ArgumentException(\"New password does not meet strength requirements\");\n        }\n        \n        Password = HashPassword(newPassword);\n        LogSecurityEvent(\"PASSWORD_CHANGED\", \"Password changed successfully\");\n        SendAccountNotification(\"Your password has been changed successfully.\");\n    }\n    \n    public string GenerateUserReport()\n    {\n        var report = new StringBuilder();\n        report.AppendLine(\"=== USER REPORT ===\");\n        report.AppendLine($\"Name: {Name}\");\n        report.AppendLine($\"Email: {Email}\");\n        report.AppendLine($\"Active: {IsActive}\");\n        report.AppendLine($\"Registration Date: {RegistrationDate}\");\n        report.AppendLine($\"Login History: {LoginHistory.Count} entries\");\n        return report.ToString();\n    }\n    \n    public void DeleteAccount()\n    {\n        LogSecurityEvent(\"ACCOUNT_DELETION_STARTED\", \"User initiated account deletion\");\n        IsActive = false;\n        Email = \"[DELETED]\";\n        Password = null;\n        LoginHistory.Clear();\n        Notifications.Clear();\n        _dbService.DeleteUser(Name);\n        LogSecurityEvent(\"ACCOUNT_DELETED\", \"Account deletion completed\");\n    }\n    \n    public void SetPassword(string password)\n    {\n        Password = HashPassword(password);\n    }\n}",
            "output": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\npublic class DatabaseService\n{\n    private readonly string _connectionString;\n    \n    public DatabaseService(string connectionString)\n    {\n        _connectionString = connectionString;\n    }\n    \n    public void SaveUser(User user)\n    {\n        Console.WriteLine($\"Saving user to database: {user.Name}\");\n    }\n    \n    public void UpdateUser(User user)\n    {\n        Console.WriteLine($\"Updating user in database: {user.Name}\");\n    }\n    \n    public void DeleteUser(string userId)\n    {\n        Console.WriteLine($\"Deleting user from database: {userId}\");\n    }\n}\n\npublic class EmailService\n{\n    private readonly string _smtpServer;\n    private readonly int _port;\n    \n    public EmailService(string smtpServer, int port)\n    {\n        _smtpServer = smtpServer;\n        _port = port;\n    }\n    \n    public void SendEmail(string to, string subject, string body)\n    {\n        Console.WriteLine($\"Sending email to: {to}\");\n        Console.WriteLine($\"Subject: {subject}\");\n    }\n}\n\npublic class SMSService\n{\n    private readonly string _apiKey;\n    \n    public SMSService(string apiKey)\n    {\n        _apiKey = apiKey;\n    }\n    \n    public void SendSMS(string phoneNumber, string message)\n    {\n        Console.WriteLine($\"Sending SMS to: {phoneNumber}\");\n        Console.WriteLine($\"Message: {message}\");\n    }\n}\n\npublic class FileService\n{\n    private readonly string _uploadPath;\n    \n    public FileService(string uploadPath)\n    {\n        _uploadPath = uploadPath;\n    }\n    \n    public string UploadFile(byte[] fileData, string fileName)\n    {\n        Console.WriteLine($\"Uploading file: {fileName}\");\n        return $\"{_uploadPath}/{fileName}\";\n    }\n    \n    public bool ValidateImageFile(byte[] imageData, string fileName)\n    {\n        if (imageData == null || imageData.Length == 0 || imageData.Length > 5 * 1024 * 1024)\n        {\n            return false;\n        }\n        string lower = fileName.ToLower();\n        return lower.EndsWith(\".jpg\") || lower.EndsWith(\".jpeg\") || \n               lower.EndsWith(\".png\") || lower.EndsWith(\".gif\");\n    }\n}\n\npublic class EmailContentService\n{\n    public string CreateWelcomeEmailBody(string name)\n    {\n        return $\"Dear {name},\\n\\nWelcome to our platform! Complete your profile and explore our features.\\n\\nBest regards,\\nThe Team\";\n    }\n    \n    public string CreatePasswordResetEmailBody(string name, string token)\n    {\n        return $\"Hello {name},\\n\\nReset your password: https://oursite.com/reset?token={token}\\n\\nLink expires in 24 hours.\";\n    }\n}\n\npublic class TokenGenerationService\n{\n    private readonly Random _random = new Random();\n    \n    public string GeneratePasswordResetToken()\n    {\n        long timestamp = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds();\n        string randomPart = _random.NextDouble().ToString()[2..8];\n        return $\"RESET_{timestamp}_{randomPart}\";\n    }\n    \n    public string GenerateSMSVerificationCode()\n    {\n        return _random.Next(100000, 1000000).ToString();\n    }\n}\n\npublic class ValidationService\n{\n    public bool ValidateEmailFormat(string email)\n    {\n        if (string.IsNullOrWhiteSpace(email))\n            return false;\n        return email.Contains(\"@\") && email.Contains(\".\") && email.Split('@').Length == 2;\n    }\n    \n    public bool ValidatePasswordStrength(string password)\n    {\n        if (string.IsNullOrEmpty(password) || password.Length < 8)\n            return false;\n        \n        bool hasUpper = password.Any(char.IsUpper);\n        bool hasLower = password.Any(char.IsLower);\n        bool hasDigit = password.Any(char.IsDigit);\n        bool hasSpecial = password.Any(c => \"!@#$%^&*()_+-=[]{}|;:,.<>?\".Contains(c));\n        \n        return hasUpper && hasLower && hasDigit && hasSpecial;\n    }\n}\n\npublic class PasswordService\n{\n    public string HashPassword(string password)\n    {\n        int hash = 7;\n        foreach (char c in password)\n        {\n            hash = hash * 31 + c;\n        }\n        return $\"HASH:{Math.Abs(hash):X}\";\n    }\n    \n    public bool VerifyPassword(string plainPassword, string hashedPassword)\n    {\n        string computedHash = HashPassword(plainPassword);\n        return computedHash.Equals(hashedPassword);\n    }\n}\n\npublic class AuthenticationService\n{\n    private readonly PasswordService _passwordService;\n    \n    public AuthenticationService()\n    {\n        _passwordService = new PasswordService();\n    }\n    \n    public bool Authenticate(User user, string password)\n    {\n        if (user.LoginAttempts >= 5)\n        {\n            Console.WriteLine(\"Account locked due to too many failed attempts\");\n            return false;\n        }\n        \n        if (user.Password != null && _passwordService.VerifyPassword(password, user.Password))\n        {\n            user.ResetLoginAttempts();\n            user.UpdateLastLogin();\n            user.AddToLoginHistory(\"Successful login from IP: 192.168.1.100\");\n            return true;\n        }\n        \n        user.IncrementLoginAttempts();\n        user.AddToLoginHistory(\"Failed login attempt from IP: 192.168.1.100\");\n        return false;\n    }\n}\n\npublic class SecurityService\n{\n    public void LogSecurityEvent(string eventType, string description)\n    {\n        DateTime timestamp = DateTime.Now;\n        string logEntry = $\"[{timestamp}] {eventType}: {description}\";\n        Console.WriteLine($\"SECURITY LOG: {logEntry}\");\n    }\n    \n    public void LogActivityEvent(string eventType, string description, string userName)\n    {\n        DateTime timestamp = DateTime.Now;\n        string logEntry = $\"[{timestamp}] {eventType}: {description} (User: {userName})\";\n        Console.WriteLine($\"ACTIVITY LOG: {logEntry}\");\n    }\n    \n    public void LogPreferenceChange(string key, string oldValue, string newValue)\n    {\n        string logEntry = $\"Preference '{key}' changed from '{oldValue}' to '{newValue}'\";\n        Console.WriteLine($\"PREFERENCE LOG: {logEntry}\");\n    }\n}\n\npublic class AccountService\n{\n    private readonly SecurityService _securityService;\n    private readonly NotificationService _notificationService;\n    \n    public AccountService()\n    {\n        _securityService = new SecurityService();\n        _notificationService = new NotificationService();\n    }\n    \n    public void LockAccount(User user)\n    {\n        user.SetActive(false);\n        _securityService.LogSecurityEvent(\"ACCOUNT_LOCKED\", $\"Account locked for user: {user.Name}\");\n        _notificationService.SendAccountNotification(user, \"Your account has been locked due to security reasons.\");\n    }\n    \n    public void UnlockAccount(User user)\n    {\n        user.SetActive(true);\n        user.ResetLoginAttempts();\n        _securityService.LogSecurityEvent(\"ACCOUNT_UNLOCKED\", $\"Account unlocked for user: {user.Name}\");\n        _notificationService.SendAccountNotification(user, \"Your account has been successfully unlocked.\");\n    }\n    \n    public void DeleteAccount(User user, DatabaseService dbService)\n    {\n        _securityService.LogSecurityEvent(\"ACCOUNT_DELETION_STARTED\", \"User initiated account deletion\");\n        user.SetActive(false);\n        user.SetEmail(\"[DELETED]\");\n        user.SetPassword(null);\n        user.ClearLoginHistory();\n        user.ClearNotifications();\n        dbService.DeleteUser(user.Name);\n        _securityService.LogSecurityEvent(\"ACCOUNT_DELETED\", \"Account deletion completed\");\n    }\n}\n\npublic class NotificationService\n{\n    public void SendAccountNotification(User user, string message)\n    {\n        user.AddNotification(message);\n        \n        if (user.EmailVerified)\n        {\n            var emailService = new EmailService(\"smtp.company.com\", 587);\n            emailService.SendEmail(user.Email, \"Account Security Alert\", message);\n        }\n        \n        if (!string.IsNullOrEmpty(user.PhoneNumber))\n        {\n            var smsService = new SMSService(\"api_key_12345\");\n            smsService.SendSMS(user.PhoneNumber, $\"Security Alert: {message}\");\n        }\n    }\n}\n\npublic class ReportService\n{\n    public string GenerateUserReport(User user)\n    {\n        var report = new StringBuilder();\n        report.AppendLine(\"=== USER REPORT ===\");\n        report.AppendLine($\"Name: {user.Name}\");\n        report.AppendLine($\"Email: {user.Email}\");\n        report.AppendLine($\"Active: {user.IsActive}\");\n        report.AppendLine($\"Registration Date: {user.RegistrationDate}\");\n        report.AppendLine($\"Login History: {user.GetLoginHistorySize()} entries\");\n        return report.ToString();\n    }\n}\n\npublic class UserManagementService\n{\n    private readonly EmailService _emailService;\n    private readonly SMSService _smsService;\n    private readonly EmailContentService _emailContentService;\n    private readonly TokenGenerationService _tokenService;\n    private readonly ValidationService _validationService;\n    private readonly PasswordService _passwordService;\n    private readonly SecurityService _securityService;\n    \n    public UserManagementService()\n    {\n        _emailService = new EmailService(\"smtp.company.com\", 587);\n        _smsService = new SMSService(\"api_key_12345\");\n        _emailContentService = new EmailContentService();\n        _tokenService = new TokenGenerationService();\n        _validationService = new ValidationService();\n        _passwordService = new PasswordService();\n        _securityService = new SecurityService();\n    }\n    \n    public void SendWelcomeEmail(User user)\n    {\n        string subject = \"Welcome to our platform!\";\n        string body = _emailContentService.CreateWelcomeEmailBody(user.Name);\n        _emailService.SendEmail(user.Email, subject, body);\n    }\n    \n    public void SendPasswordResetEmail(User user)\n    {\n        string resetToken = _tokenService.GeneratePasswordResetToken();\n        string subject = \"Password Reset Request\";\n        string body = _emailContentService.CreatePasswordResetEmailBody(user.Name, resetToken);\n        _emailService.SendEmail(user.Email, subject, body);\n    }\n    \n    public void SendSMSVerification(User user)\n    {\n        if (!string.IsNullOrEmpty(user.PhoneNumber))\n        {\n            string smsCode = _tokenService.GenerateSMSVerificationCode();\n            string message = $\"Your verification code: {smsCode}\";\n            _smsService.SendSMS(user.PhoneNumber, message);\n        }\n    }\n    \n    public void ChangePassword(User user, string oldPassword, string newPassword)\n    {\n        var authService = new AuthenticationService();\n        if (!authService.Authenticate(user, oldPassword))\n        {\n            throw new UnauthorizedAccessException(\"Current password is incorrect\");\n        }\n        \n        if (!_validationService.ValidatePasswordStrength(newPassword))\n        {\n            throw new ArgumentException(\"New password does not meet strength requirements\");\n        }\n        \n        user.SetPassword(_passwordService.HashPassword(newPassword));\n        _securityService.LogSecurityEvent(\"PASSWORD_CHANGED\", \"Password changed successfully\");\n        \n        var notificationService = new NotificationService();\n        notificationService.SendAccountNotification(user, \"Your password has been changed successfully.\");\n    }\n    \n    public void UploadProfilePicture(User user, byte[] imageData, string fileName)\n    {\n        var fileService = new FileService(\"/uploads\");\n        \n        if (fileService.ValidateImageFile(imageData, fileName))\n        {\n            string profileUrl = fileService.UploadFile(imageData, $\"profile_{user.Name}_{fileName}\");\n            user.SetProfilePictureUrl(profileUrl);\n            _securityService.LogActivityEvent(\"PROFILE_PICTURE_UPLOADED\", \"User uploaded new profile picture\", user.Name);\n        }\n        else\n        {\n            throw new ArgumentException(\"Invalid image file\");\n        }\n    }\n    \n    public void UpdatePreference(User user, string key, string value)\n    {\n        string oldValue = user.GetPreference(key);\n        user.SetPreference(key, value);\n        _securityService.LogPreferenceChange(key, oldValue, value);\n    }\n}\n\npublic class User\n{\n    public string Name { get; set; }\n    public string Email { get; private set; }\n    public string Password { get; private set; }\n    public bool IsActive { get; private set; }\n    public string Role { get; set; }\n    public DateTime? LastLogin { get; private set; }\n    public int LoginAttempts { get; private set; }\n    public string PhoneNumber { get; set; }\n    public DateTime RegistrationDate { get; private set; }\n    public string ProfilePictureUrl { get; private set; }\n    public bool EmailVerified { get; set; }\n    \n    private readonly List<string> _loginHistory;\n    private readonly Dictionary<string, string> _preferences;\n    private readonly List<string> _notifications;\n    \n    public User(string name, string email)\n    {\n        Name = name;\n        Email = email;\n        IsActive = true;\n        Role = \"USER\";\n        LoginAttempts = 0;\n        RegistrationDate = DateTime.Now;\n        EmailVerified = false;\n        \n        _loginHistory = new List<string>();\n        _preferences = new Dictionary<string, string>();\n        _notifications = new List<string>();\n        \n        InitializeDefaultPreferences();\n    }\n    \n    private void InitializeDefaultPreferences()\n    {\n        _preferences[\"theme\"] = \"light\";\n        _preferences[\"language\"] = \"en\";\n        _preferences[\"notifications\"] = \"enabled\";\n    }\n    \n    public void AddToLoginHistory(string entry)\n    {\n        string timestampedEntry = $\"{DateTime.Now}: {entry}\";\n        _loginHistory.Add(timestampedEntry);\n        if (_loginHistory.Count > 100)\n        {\n            _loginHistory.RemoveAt(0);\n        }\n    }\n    \n    public void AddNotification(string message)\n    {\n        string timestampedNotification = $\"{DateTime.Now}: {message}\";\n        _notifications.Add(timestampedNotification);\n        if (_notifications.Count > 50)\n        {\n            _notifications.RemoveAt(0);\n        }\n    }\n    \n    public void ClearLoginHistory()\n    {\n        _loginHistory.Clear();\n    }\n    \n    public void ClearNotifications()\n    {\n        _notifications.Clear();\n    }\n    \n    public int GetLoginHistorySize()\n    {\n        return _loginHistory.Count;\n    }\n    \n    public void IncrementLoginAttempts()\n    {\n        LoginAttempts++;\n    }\n    \n    public void ResetLoginAttempts()\n    {\n        LoginAttempts = 0;\n    }\n    \n    public void UpdateLastLogin()\n    {\n        LastLogin = DateTime.Now;\n    }\n    \n    public string GetPreference(string key)\n    {\n        return _preferences.ContainsKey(key) ? _preferences[key] : null;\n    }\n    \n    public void SetPreference(string key, string value)\n    {\n        _preferences[key] = value;\n    }\n    \n    public void SetActive(bool active)\n    {\n        IsActive = active;\n    }\n    \n    public void SetEmail(string email)\n    {\n        Email = email;\n    }\n    \n    public void SetPassword(string password)\n    {\n        Password = password;\n    }\n    \n    public void SetProfilePictureUrl(string url)\n    {\n        ProfilePictureUrl = url;\n    }\n}",
            "level": "HARD",
            "language": "CSHARP",
            "violation": "SRP",
            "description": "User database email operations"
        },
        {
            "input": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class PayrollSystem\n{\n    private string databaseUrl;\n    \n    public PayrollSystem(string databaseUrl)\n    {\n        this.databaseUrl = databaseUrl;\n    }\n    \n    public void SavePayrollRecord(Employee employee, double grossPay, double netPay)\n    {\n        Console.WriteLine($\"Saving payroll record to database for: {employee.Name}\");\n    }\n    \n    public void GeneratePayrollReport(string period)\n    {\n        Console.WriteLine($\"Generating payroll report for period: {period}\");\n    }\n}\n\npublic class EmailNotificationService\n{\n    private string smtpServer;\n    \n    public EmailNotificationService(string smtpServer)\n    {\n        this.smtpServer = smtpServer;\n    }\n    \n    public void SendEmail(string recipient, string subject, string body)\n    {\n        Console.WriteLine($\"Sending email to: {recipient}\");\n        Console.WriteLine($\"Subject: {subject}\");\n    }\n}\n\npublic class HRDatabase\n{\n    private string connectionString;\n    \n    public HRDatabase(string connectionString)\n    {\n        this.connectionString = connectionString;\n    }\n    \n    public void UpdateEmployeeRecord(string employeeId, string field, string value)\n    {\n        Console.WriteLine($\"Updating HR record - Employee: {employeeId}, Field: {field}\");\n    }\n    \n    public void SaveVacationRequest(string employeeId, int days, bool approved)\n    {\n        Console.WriteLine($\"Recording vacation request: {employeeId}, Days: {days}\");\n    }\n}\n\npublic class ComplianceLogger\n{\n    private string logFile;\n    \n    public ComplianceLogger(string logFile)\n    {\n        this.logFile = logFile;\n    }\n    \n    public void LogEvent(string eventType, string description)\n    {\n        Console.WriteLine($\"[COMPLIANCE LOG] {eventType}: {description}\");\n    }\n}\n\npublic class Employee\n{\n    private string name;\n    private double baseSalary;\n    private int yearsOfService;\n    private string department;\n    private string position;\n    private string employeeId;\n    private DateTime hireDate;\n    private double performanceRating;\n    private int vacationDays;\n    private int usedVacationDays;\n    private string manager;\n    private string email;\n    private string phoneNumber;\n    private bool isActive;\n    private List<string> skillCertifications;\n    private Dictionary<string, string> personalInfo;\n    private double overtimeHours;\n    \n    private PayrollSystem payrollSystem;\n    private EmailNotificationService emailService;\n    private HRDatabase hrDatabase;\n    private ComplianceLogger complianceLogger;\n    \n    public Employee(string name, double baseSalary, int yearsOfService)\n    {\n        this.name = name;\n        this.baseSalary = baseSalary;\n        this.yearsOfService = yearsOfService;\n        this.employeeId = GenerateUniqueEmployeeId();\n        this.hireDate = DateTime.Now;\n        this.vacationDays = 25;\n        this.usedVacationDays = 0;\n        this.performanceRating = 3.0;\n        this.isActive = true;\n        this.skillCertifications = new List<string>();\n        this.personalInfo = new Dictionary<string, string>();\n        this.overtimeHours = 0.0;\n        \n        this.payrollSystem = new PayrollSystem(\"Server=localhost;Database=payroll;Trusted_Connection=true;\");\n        this.emailService = new EmailNotificationService(\"smtp.company.com\");\n        this.hrDatabase = new HRDatabase(\"Server=localhost;Database=hr;Trusted_Connection=true;\");\n        this.complianceLogger = new ComplianceLogger(@\"C:\\logs\\compliance.log\");\n        \n        InitializeEmployeeDefaults();\n    }\n    \n    public double CalculateSalary()\n    {\n        return baseSalary + (yearsOfService * 1000);\n    }\n    \n    public void PrintPaySlip()\n    {\n        Console.WriteLine($\"Pay slip for {name}: ${CalculateSalary()}\");\n    }\n    \n    public double CalculatePerformanceBonus()\n    {\n        double baseBonus = baseSalary * 0.12;\n        double ratingMultiplier = performanceRating / 5.0;\n        double serviceMultiplier = Math.Min(yearsOfService * 0.02, 0.15);\n        return baseBonus * ratingMultiplier * (1.0 + serviceMultiplier);\n    }\n    \n    public double CalculateOvertimeCompensation()\n    {\n        if (overtimeHours > 0)\n        {\n            double hourlyRate = baseSalary / (52 * 40);\n            return overtimeHours * hourlyRate * 1.5;\n        }\n        return 0.0;\n    }\n    \n    public double CalculateTotalCompensation()\n    {\n        return CalculateSalary() + CalculatePerformanceBonus() + CalculateOvertimeCompensation();\n    }\n    \n    public double CalculateFederalTax(double grossPay)\n    {\n        if (grossPay <= 4000) return grossPay * 0.18;\n        else if (grossPay <= 8000) return grossPay * 0.22;\n        else return grossPay * 0.28;\n    }\n    \n    public double CalculateStateTax(double grossPay)\n    {\n        return grossPay * 0.085;\n    }\n    \n    public double CalculateSocialSecurityTax(double grossPay)\n    {\n        return Math.Min(grossPay * 0.062, 8853.60);\n    }\n    \n    public string GenerateCompensationBreakdown()\n    {\n        double salary = CalculateSalary();\n        double bonus = CalculatePerformanceBonus();\n        double overtime = CalculateOvertimeCompensation();\n        double gross = salary + bonus + overtime;\n        double federalTax = CalculateFederalTax(gross);\n        double stateTax = CalculateStateTax(gross);\n        double ssTax = CalculateSocialSecurityTax(gross);\n        double totalTax = federalTax + stateTax + ssTax;\n        double netPay = gross - totalTax;\n        \n        var breakdown = new System.Text.StringBuilder();\n        breakdown.AppendLine(\"=== COMPENSATION BREAKDOWN ===\");\n        breakdown.AppendLine($\"Base Salary: ${salary:F2}\");\n        breakdown.AppendLine($\"Performance Bonus: ${bonus:F2}\");\n        breakdown.AppendLine($\"Overtime Pay: ${overtime:F2}\");\n        breakdown.AppendLine($\"Gross Pay: ${gross:F2}\");\n        breakdown.AppendLine($\"Federal Tax: ${federalTax:F2}\");\n        breakdown.AppendLine($\"State Tax: ${stateTax:F2}\");\n        breakdown.AppendLine($\"Social Security: ${ssTax:F2}\");\n        breakdown.Append($\"Net Pay: ${netPay:F2}\");\n        return breakdown.ToString();\n    }\n    \n    public void ProcessMonthlyPayroll()\n    {\n        double grossPay = CalculateTotalCompensation();\n        double netPay = grossPay - (CalculateFederalTax(grossPay) + CalculateStateTax(grossPay) + CalculateSocialSecurityTax(grossPay));\n        \n        string breakdown = GenerateCompensationBreakdown();\n        Console.WriteLine(breakdown);\n        \n        payrollSystem.SavePayrollRecord(this, grossPay, netPay);\n        \n        string emailBody = CreatePayrollNotificationEmail(breakdown);\n        emailService.SendEmail(email, $\"Monthly Payroll - {name}\", emailBody);\n        \n        complianceLogger.LogEvent(\"PAYROLL_PROCESSED\", $\"Monthly payroll processed for employee: {employeeId}\");\n    }\n    \n    public string CreatePayrollNotificationEmail(string breakdown)\n    {\n        return $\"Dear {name},\\n\\nYour monthly payroll has been processed.\\n\\n{breakdown}\\n\\nBest regards,\\nPayroll Department\";\n    }\n    \n    public bool RequestVacationDays(int days)\n    {\n        if (usedVacationDays + days <= vacationDays)\n        {\n            usedVacationDays += days;\n            \n            hrDatabase.SaveVacationRequest(employeeId, days, true);\n            \n            string managerEmail = CreateManagerNotificationEmail(days);\n            emailService.SendEmail($\"{manager}@company.com\", $\"Vacation Request - {name}\", managerEmail);\n            \n            LogVacationActivity(days, \"APPROVED\");\n            return true;\n        }\n        else\n        {\n            LogVacationActivity(days, \"DENIED\");\n            return false;\n        }\n    }\n    \n    public string CreateManagerNotificationEmail(int days)\n    {\n        return $\"Manager Notification:\\n\\nEmployee {name} ({employeeId}) has requested {days} vacation days.\\nRemaining balance: {vacationDays - usedVacationDays} days.\\nDepartment: {department}\";\n    }\n    \n    public void LogVacationActivity(int days, string status)\n    {\n        string logMessage = $\"Vacation request - Employee: {employeeId}, Days: {days}, Status: {status}\";\n        complianceLogger.LogEvent(\"VACATION_REQUEST\", logMessage);\n    }\n    \n    public void ConductAnnualPerformanceReview()\n    {\n        string reviewReport = GeneratePerformanceReviewReport();\n        Console.WriteLine(reviewReport);\n        \n        hrDatabase.UpdateEmployeeRecord(employeeId, \"performance_rating\", performanceRating.ToString());\n        hrDatabase.UpdateEmployeeRecord(employeeId, \"last_review_date\", DateTime.Now.ToString());\n        \n        string reviewEmail = CreatePerformanceReviewEmail(reviewReport);\n        emailService.SendEmail(email, $\"Annual Performance Review - {name}\", reviewEmail);\n        \n        complianceLogger.LogEvent(\"PERFORMANCE_REVIEW\", $\"Annual review completed for employee: {employeeId}\");\n    }\n    \n    public string GeneratePerformanceReviewReport()\n    {\n        var report = new System.Text.StringBuilder();\n        report.AppendLine(\"=== ANNUAL PERFORMANCE REVIEW ===\");\n        report.AppendLine($\"Employee: {name} ({employeeId})\");\n        report.AppendLine($\"Department: {department}\");\n        report.AppendLine($\"Current Rating: {performanceRating}/5.0\");\n        report.AppendLine($\"Years of Service: {yearsOfService}\");\n        report.AppendLine($\"Certifications: {skillCertifications.Count}\");\n        \n        if (performanceRating >= 4.5)\n        {\n            report.AppendLine(\"Recommendation: Promotion candidate\");\n        }\n        else if (performanceRating < 2.5)\n        {\n            report.AppendLine(\"Recommendation: Performance improvement plan required\");\n        }\n        \n        return report.ToString().TrimEnd();\n    }\n    \n    public string CreatePerformanceReviewEmail(string report)\n    {\n        return $\"Dear {name},\\n\\nYour annual performance review has been completed.\\n\\n{report}\\n\\nPlease schedule a meeting to discuss.\\n\\nHR Department\";\n    }\n    \n    public void UpdateRatingWithNotifications(double newRating)\n    {\n        double oldRating = this.performanceRating;\n        this.performanceRating = newRating;\n        \n        hrDatabase.UpdateEmployeeRecord(employeeId, \"performance_rating\", newRating.ToString());\n        \n        if (Math.Abs(newRating - oldRating) >= 1.0)\n        {\n            string alertEmail = CreateRatingChangeAlert(oldRating, newRating);\n            emailService.SendEmail(\"hr@company.com\", $\"Significant Rating Change - {name}\", alertEmail);\n        }\n        \n        LogPerformanceChange(oldRating, newRating);\n    }\n    \n    public string CreateRatingChangeAlert(double oldRating, double newRating)\n    {\n        string changeType = newRating > oldRating ? \"IMPROVEMENT\" : \"DECLINE\";\n        return $\"PERFORMANCE ALERT:\\n\\nEmployee: {name} ({employeeId})\\nOld Rating: {oldRating}\\nNew Rating: {newRating}\\nChange: {changeType}\";\n    }\n    \n    public void LogPerformanceChange(double oldRating, double newRating)\n    {\n        string change = $\"Performance rating changed - Employee: {employeeId}, From: {oldRating}, To: {newRating}\";\n        complianceLogger.LogEvent(\"RATING_CHANGE\", change);\n    }\n    \n    public void AddSkillCertification(string certification)\n    {\n        skillCertifications.Add(certification);\n        hrDatabase.UpdateEmployeeRecord(employeeId, \"certifications\", string.Join(\",\", skillCertifications));\n        complianceLogger.LogEvent(\"CERTIFICATION_ADDED\", $\"New certification added for {employeeId}: {certification}\");\n    }\n    \n    public string GenerateUniqueEmployeeId()\n    {\n        long timestamp = DateTimeOffset.Now.ToUnixTimeMilliseconds() % 100000;\n        int randomNum = new Random().Next(1000);\n        return $\"EMP{timestamp}{randomNum}\";\n    }\n    \n    public void InitializeEmployeeDefaults()\n    {\n        personalInfo[\"emergency_contact\"] = \"\";\n        personalInfo[\"bank_routing\"] = \"\";\n        personalInfo[\"tax_filing_status\"] = \"single\";\n    }\n    \n    public void UpdatePersonalInformation(string field, string value)\n    {\n        personalInfo[field] = value;\n        hrDatabase.UpdateEmployeeRecord(employeeId, field, value);\n        complianceLogger.LogEvent(\"PERSONAL_INFO_UPDATE\", $\"Updated {field} for employee: {employeeId}\");\n    }\n    \n    // Properties\n    public string Name\n    {\n        get { return name; }\n        set { name = value; }\n    }\n    \n    public double BaseSalary\n    {\n        get { return baseSalary; }\n        set { baseSalary = value; }\n    }\n    \n    public string Department\n    {\n        get { return department; }\n        set { department = value; }\n    }\n    \n    public double PerformanceRating\n    {\n        get { return performanceRating; }\n    }\n    \n    public string Email\n    {\n        get { return email; }\n        set { email = value; }\n    }\n    \n    public double OvertimeHours\n    {\n        get { return overtimeHours; }\n        set { overtimeHours = value; }\n    }\n}",
            "output": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\npublic class PayrollSystem\n{\n    private string databaseUrl;\n    \n    public PayrollSystem(string databaseUrl)\n    {\n        this.databaseUrl = databaseUrl;\n    }\n    \n    public void SavePayrollRecord(Employee employee, double grossPay, double netPay)\n    {\n        Console.WriteLine($\"Saving payroll record to database for: {employee.Name}\");\n    }\n    \n    public void GeneratePayrollReport(string period)\n    {\n        Console.WriteLine($\"Generating payroll report for period: {period}\");\n    }\n}\n\npublic class EmailNotificationService\n{\n    private string smtpServer;\n    \n    public EmailNotificationService(string smtpServer)\n    {\n        this.smtpServer = smtpServer;\n    }\n    \n    public void SendEmail(string recipient, string subject, string body)\n    {\n        Console.WriteLine($\"Sending email to: {recipient}\");\n        Console.WriteLine($\"Subject: {subject}\");\n    }\n}\n\npublic class HRDatabase\n{\n    private string connectionString;\n    \n    public HRDatabase(string connectionString)\n    {\n        this.connectionString = connectionString;\n    }\n    \n    public void UpdateEmployeeRecord(string employeeId, string field, string value)\n    {\n        Console.WriteLine($\"Updating HR record - Employee: {employeeId}, Field: {field}\");\n    }\n    \n    public void SaveVacationRequest(string employeeId, int days, bool approved)\n    {\n        Console.WriteLine($\"Recording vacation request: {employeeId}, Days: {days}\");\n    }\n}\n\npublic class ComplianceLogger\n{\n    private string logFile;\n    \n    public ComplianceLogger(string logFile)\n    {\n        this.logFile = logFile;\n    }\n    \n    public void LogEvent(string eventType, string description)\n    {\n        Console.WriteLine($\"[COMPLIANCE LOG] {eventType}: {description}\");\n    }\n}\n\npublic class SalaryCalculationService\n{\n    public double CalculateBaseSalary(double baseSalary, int yearsOfService)\n    {\n        return baseSalary + (yearsOfService * 1000);\n    }\n    \n    public double CalculatePerformanceBonus(double baseSalary, double performanceRating, int yearsOfService)\n    {\n        double baseBonus = baseSalary * 0.12;\n        double ratingMultiplier = performanceRating / 5.0;\n        double serviceMultiplier = Math.Min(yearsOfService * 0.02, 0.15);\n        return baseBonus * ratingMultiplier * (1.0 + serviceMultiplier);\n    }\n    \n    public double CalculateOvertimeCompensation(double baseSalary, double overtimeHours)\n    {\n        if (overtimeHours > 0)\n        {\n            double hourlyRate = baseSalary / (52 * 40);\n            return overtimeHours * hourlyRate * 1.5;\n        }\n        return 0.0;\n    }\n    \n    public double CalculateTotalCompensation(double baseSalary, int yearsOfService, double performanceRating, double overtimeHours)\n    {\n        double salary = CalculateBaseSalary(baseSalary, yearsOfService);\n        double bonus = CalculatePerformanceBonus(baseSalary, performanceRating, yearsOfService);\n        double overtime = CalculateOvertimeCompensation(baseSalary, overtimeHours);\n        return salary + bonus + overtime;\n    }\n}\n\npublic class TaxCalculationService\n{\n    public double CalculateFederalTax(double grossPay)\n    {\n        if (grossPay <= 4000) return grossPay * 0.18;\n        else if (grossPay <= 8000) return grossPay * 0.22;\n        else return grossPay * 0.28;\n    }\n    \n    public double CalculateStateTax(double grossPay)\n    {\n        return grossPay * 0.085;\n    }\n    \n    public double CalculateSocialSecurityTax(double grossPay)\n    {\n        return Math.Min(grossPay * 0.062, 8853.60);\n    }\n    \n    public double CalculateTotalTax(double grossPay)\n    {\n        return CalculateFederalTax(grossPay) + CalculateStateTax(grossPay) + CalculateSocialSecurityTax(grossPay);\n    }\n}\n\npublic class EmailContentService\n{\n    public string CreatePayrollNotificationEmail(string employeeName, string breakdown)\n    {\n        return $\"Dear {employeeName},\\n\\nYour monthly payroll has been processed.\\n\\n{breakdown}\\n\\nBest regards,\\nPayroll Department\";\n    }\n    \n    public string CreateManagerNotificationEmail(string employeeName, string employeeId, int days, int remainingDays, string department)\n    {\n        return $\"Manager Notification:\\n\\nEmployee {employeeName} ({employeeId}) has requested {days} vacation days.\\nRemaining balance: {remainingDays} days.\\nDepartment: {department}\";\n    }\n    \n    public string CreatePerformanceReviewEmail(string employeeName, string report)\n    {\n        return $\"Dear {employeeName},\\n\\nYour annual performance review has been completed.\\n\\n{report}\\n\\nPlease schedule a meeting to discuss.\\n\\nHR Department\";\n    }\n    \n    public string CreateRatingChangeAlert(string employeeName, string employeeId, double oldRating, double newRating)\n    {\n        string changeType = newRating > oldRating ? \"IMPROVEMENT\" : \"DECLINE\";\n        return $\"PERFORMANCE ALERT:\\n\\nEmployee: {employeeName} ({employeeId})\\nOld Rating: {oldRating}\\nNew Rating: {newRating}\\nChange: {changeType}\";\n    }\n}\n\npublic class ReportGenerationService\n{\n    public string GenerateCompensationBreakdown(Employee employee, SalaryCalculationService salaryService, TaxCalculationService taxService)\n    {\n        double salary = salaryService.CalculateBaseSalary(employee.BaseSalary, employee.YearsOfService);\n        double bonus = salaryService.CalculatePerformanceBonus(employee.BaseSalary, employee.PerformanceRating, employee.YearsOfService);\n        double overtime = salaryService.CalculateOvertimeCompensation(employee.BaseSalary, employee.OvertimeHours);\n        double gross = salary + bonus + overtime;\n        double federalTax = taxService.CalculateFederalTax(gross);\n        double stateTax = taxService.CalculateStateTax(gross);\n        double ssTax = taxService.CalculateSocialSecurityTax(gross);\n        double totalTax = federalTax + stateTax + ssTax;\n        double netPay = gross - totalTax;\n        \n        var breakdown = new StringBuilder();\n        breakdown.AppendLine(\"=== COMPENSATION BREAKDOWN ===\");\n        breakdown.AppendLine($\"Base Salary: ${salary:F2}\");\n        breakdown.AppendLine($\"Performance Bonus: ${bonus:F2}\");\n        breakdown.AppendLine($\"Overtime Pay: ${overtime:F2}\");\n        breakdown.AppendLine($\"Gross Pay: ${gross:F2}\");\n        breakdown.AppendLine($\"Federal Tax: ${federalTax:F2}\");\n        breakdown.AppendLine($\"State Tax: ${stateTax:F2}\");\n        breakdown.AppendLine($\"Social Security: ${ssTax:F2}\");\n        breakdown.Append($\"Net Pay: ${netPay:F2}\");\n        return breakdown.ToString();\n    }\n    \n    public string GeneratePerformanceReviewReport(Employee employee)\n    {\n        var report = new StringBuilder();\n        report.AppendLine(\"=== ANNUAL PERFORMANCE REVIEW ===\");\n        report.AppendLine($\"Employee: {employee.Name} ({employee.EmployeeId})\");\n        report.AppendLine($\"Department: {employee.Department}\");\n        report.AppendLine($\"Current Rating: {employee.PerformanceRating}/5.0\");\n        report.AppendLine($\"Years of Service: {employee.YearsOfService}\");\n        report.AppendLine($\"Certifications: {employee.SkillCertifications.Count}\");\n        \n        if (employee.PerformanceRating >= 4.5)\n        {\n            report.AppendLine(\"Recommendation: Promotion candidate\");\n        }\n        else if (employee.PerformanceRating < 2.5)\n        {\n            report.AppendLine(\"Recommendation: Performance improvement plan required\");\n        }\n        \n        return report.ToString().TrimEnd();\n    }\n    \n    public void PrintPaySlip(Employee employee, SalaryCalculationService salaryService)\n    {\n        double salary = salaryService.CalculateBaseSalary(employee.BaseSalary, employee.YearsOfService);\n        Console.WriteLine($\"Pay slip for {employee.Name}: ${salary}\");\n    }\n}\n\npublic class PayrollProcessingService\n{\n    private PayrollSystem payrollSystem;\n    private EmailNotificationService emailService;\n    private ComplianceLogger complianceLogger;\n    private SalaryCalculationService salaryService;\n    private TaxCalculationService taxService;\n    private ReportGenerationService reportService;\n    private EmailContentService emailContentService;\n    \n    public PayrollProcessingService()\n    {\n        this.payrollSystem = new PayrollSystem(\"Server=localhost;Database=payroll;Trusted_Connection=true;\");\n        this.emailService = new EmailNotificationService(\"smtp.company.com\");\n        this.complianceLogger = new ComplianceLogger(@\"C:\\logs\\compliance.log\");\n        this.salaryService = new SalaryCalculationService();\n        this.taxService = new TaxCalculationService();\n        this.reportService = new ReportGenerationService();\n        this.emailContentService = new EmailContentService();\n    }\n    \n    public void ProcessMonthlyPayroll(Employee employee)\n    {\n        double grossPay = salaryService.CalculateTotalCompensation(\n            employee.BaseSalary, employee.YearsOfService,\n            employee.PerformanceRating, employee.OvertimeHours);\n        double totalTax = taxService.CalculateTotalTax(grossPay);\n        double netPay = grossPay - totalTax;\n        \n        string breakdown = reportService.GenerateCompensationBreakdown(employee, salaryService, taxService);\n        Console.WriteLine(breakdown);\n        \n        payrollSystem.SavePayrollRecord(employee, grossPay, netPay);\n        \n        string emailBody = emailContentService.CreatePayrollNotificationEmail(employee.Name, breakdown);\n        emailService.SendEmail(employee.Email, $\"Monthly Payroll - {employee.Name}\", emailBody);\n        \n        complianceLogger.LogEvent(\"PAYROLL_PROCESSED\", $\"Monthly payroll processed for employee: {employee.EmployeeId}\");\n    }\n}\n\npublic class VacationManagementService\n{\n    private HRDatabase hrDatabase;\n    private EmailNotificationService emailService;\n    private ComplianceLogger complianceLogger;\n    private EmailContentService emailContentService;\n    \n    public VacationManagementService()\n    {\n        this.hrDatabase = new HRDatabase(\"Server=localhost;Database=hr;Trusted_Connection=true;\");\n        this.emailService = new EmailNotificationService(\"smtp.company.com\");\n        this.complianceLogger = new ComplianceLogger(@\"C:\\logs\\compliance.log\");\n        this.emailContentService = new EmailContentService();\n    }\n    \n    public bool RequestVacationDays(Employee employee, int days)\n    {\n        if (employee.UsedVacationDays + days <= employee.VacationDays)\n        {\n            employee.UsedVacationDays += days;\n            \n            hrDatabase.SaveVacationRequest(employee.EmployeeId, days, true);\n            \n            string managerEmail = emailContentService.CreateManagerNotificationEmail(\n                employee.Name, employee.EmployeeId, days,\n                employee.VacationDays - employee.UsedVacationDays, employee.Department);\n            emailService.SendEmail($\"{employee.Manager}@company.com\", $\"Vacation Request - {employee.Name}\", managerEmail);\n            \n            LogVacationActivity(employee.EmployeeId, days, \"APPROVED\");\n            return true;\n        }\n        else\n        {\n            LogVacationActivity(employee.EmployeeId, days, \"DENIED\");\n            return false;\n        }\n    }\n    \n    private void LogVacationActivity(string employeeId, int days, string status)\n    {\n        string logMessage = $\"Vacation request - Employee: {employeeId}, Days: {days}, Status: {status}\";\n        complianceLogger.LogEvent(\"VACATION_REQUEST\", logMessage);\n    }\n}\n\npublic class PerformanceManagementService\n{\n    private HRDatabase hrDatabase;\n    private EmailNotificationService emailService;\n    private ComplianceLogger complianceLogger;\n    private ReportGenerationService reportService;\n    private EmailContentService emailContentService;\n    \n    public PerformanceManagementService()\n    {\n        this.hrDatabase = new HRDatabase(\"Server=localhost;Database=hr;Trusted_Connection=true;\");\n        this.emailService = new EmailNotificationService(\"smtp.company.com\");\n        this.complianceLogger = new ComplianceLogger(@\"C:\\logs\\compliance.log\");\n        this.reportService = new ReportGenerationService();\n        this.emailContentService = new EmailContentService();\n    }\n    \n    public void ConductAnnualPerformanceReview(Employee employee)\n    {\n        string reviewReport = reportService.GeneratePerformanceReviewReport(employee);\n        Console.WriteLine(reviewReport);\n        \n        hrDatabase.UpdateEmployeeRecord(employee.EmployeeId, \"performance_rating\", employee.PerformanceRating.ToString());\n        hrDatabase.UpdateEmployeeRecord(employee.EmployeeId, \"last_review_date\", DateTime.Now.ToString());\n        \n        string reviewEmail = emailContentService.CreatePerformanceReviewEmail(employee.Name, reviewReport);\n        emailService.SendEmail(employee.Email, $\"Annual Performance Review - {employee.Name}\", reviewEmail);\n        \n        complianceLogger.LogEvent(\"PERFORMANCE_REVIEW\", $\"Annual review completed for employee: {employee.EmployeeId}\");\n    }\n    \n    public void UpdateRatingWithNotifications(Employee employee, double newRating)\n    {\n        double oldRating = employee.PerformanceRating;\n        employee.PerformanceRating = newRating;\n        \n        hrDatabase.UpdateEmployeeRecord(employee.EmployeeId, \"performance_rating\", newRating.ToString());\n        \n        if (Math.Abs(newRating - oldRating) >= 1.0)\n        {\n            string alertEmail = emailContentService.CreateRatingChangeAlert(employee.Name, employee.EmployeeId, oldRating, newRating);\n            emailService.SendEmail(\"hr@company.com\", $\"Significant Rating Change - {employee.Name}\", alertEmail);\n        }\n        \n        LogPerformanceChange(employee.EmployeeId, oldRating, newRating);\n    }\n    \n    private void LogPerformanceChange(string employeeId, double oldRating, double newRating)\n    {\n        string change = $\"Performance rating changed - Employee: {employeeId}, From: {oldRating}, To: {newRating}\";\n        complianceLogger.LogEvent(\"RATING_CHANGE\", change);\n    }\n}\n\npublic class EmployeeDataManagementService\n{\n    private HRDatabase hrDatabase;\n    private ComplianceLogger complianceLogger;\n    \n    public EmployeeDataManagementService()\n    {\n        this.hrDatabase = new HRDatabase(\"Server=localhost;Database=hr;Trusted_Connection=true;\");\n        this.complianceLogger = new ComplianceLogger(@\"C:\\logs\\compliance.log\");\n    }\n    \n    public void AddSkillCertification(Employee employee, string certification)\n    {\n        employee.SkillCertifications.Add(certification);\n        hrDatabase.UpdateEmployeeRecord(employee.EmployeeId, \"certifications\", string.Join(\",\", employee.SkillCertifications));\n        complianceLogger.LogEvent(\"CERTIFICATION_ADDED\", $\"New certification added for {employee.EmployeeId}: {certification}\");\n    }\n    \n    public void UpdatePersonalInformation(Employee employee, string field, string value)\n    {\n        employee.PersonalInfo[field] = value;\n        hrDatabase.UpdateEmployeeRecord(employee.EmployeeId, field, value);\n        complianceLogger.LogEvent(\"PERSONAL_INFO_UPDATE\", $\"Updated {field} for employee: {employee.EmployeeId}\");\n    }\n}\n\npublic class EmployeeIdGenerationService\n{\n    public string GenerateUniqueEmployeeId()\n    {\n        long timestamp = DateTimeOffset.Now.ToUnixTimeMilliseconds() % 100000;\n        int randomNum = new Random().Next(1000);\n        return $\"EMP{timestamp}{randomNum}\";\n    }\n}\n\npublic class Employee\n{\n    public string Name { get; set; }\n    public double BaseSalary { get; set; }\n    public int YearsOfService { get; set; }\n    public string Department { get; set; }\n    public string Position { get; set; }\n    public string EmployeeId { get; private set; }\n    public DateTime HireDate { get; private set; }\n    public double PerformanceRating { get; set; }\n    public int VacationDays { get; set; }\n    public int UsedVacationDays { get; set; }\n    public string Manager { get; set; }\n    public string Email { get; set; }\n    public string PhoneNumber { get; set; }\n    public bool IsActive { get; set; }\n    public List<string> SkillCertifications { get; private set; }\n    public Dictionary<string, string> PersonalInfo { get; private set; }\n    public double OvertimeHours { get; set; }\n    \n    public Employee(string name, double baseSalary, int yearsOfService)\n    {\n        this.Name = name;\n        this.BaseSalary = baseSalary;\n        this.YearsOfService = yearsOfService;\n        \n        var idService = new EmployeeIdGenerationService();\n        this.EmployeeId = idService.GenerateUniqueEmployeeId();\n        \n        this.HireDate = DateTime.Now;\n        this.VacationDays = 25;\n        this.UsedVacationDays = 0;\n        this.PerformanceRating = 3.0;\n        this.IsActive = true;\n        this.SkillCertifications = new List<string>();\n        this.PersonalInfo = new Dictionary<string, string>();\n        this.OvertimeHours = 0.0;\n        \n        InitializeEmployeeDefaults();\n    }\n    \n    private void InitializeEmployeeDefaults()\n    {\n        PersonalInfo[\"emergency_contact\"] = \"\";\n        PersonalInfo[\"bank_routing\"] = \"\";\n        PersonalInfo[\"tax_filing_status\"] = \"single\";\n    }\n}",
            "level": "HARD",
            "language": "CSHARP",
            "violation": "SRP",
            "description": "Employee salary payslip system"
        },
        {
            "input": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace BookstoreSystem\n{\n    public class FileStorage\n    {\n        private readonly string basePath;\n        \n        public FileStorage(string basePath)\n        {\n            this.basePath = basePath;\n        }\n        \n        public void SaveToFile(string filename, string content)\n        {\n            Console.WriteLine($\"Saving content to file: {basePath}/{filename}\");\n        }\n        \n        public string LoadFromFile(string filename)\n        {\n            Console.WriteLine($\"Loading content from file: {basePath}/{filename}\");\n            return \"file content\";\n        }\n        \n        public void DeleteFile(string filename)\n        {\n            Console.WriteLine($\"Deleting file: {basePath}/{filename}\");\n        }\n    }\n    \n    public class EmailService\n    {\n        private readonly string smtpServer;\n        \n        public EmailService(string smtpServer)\n        {\n            this.smtpServer = smtpServer;\n        }\n        \n        public void SendEmail(string recipient, string subject, string body)\n        {\n            Console.WriteLine($\"Sending email to: {recipient}\");\n            Console.WriteLine($\"Subject: {subject}\");\n        }\n        \n        public void SendBulkEmail(List<string> recipients, string subject, string body)\n        {\n            Console.WriteLine($\"Sending bulk email to {recipients.Count} recipients\");\n        }\n    }\n    \n    public class DatabaseService\n    {\n        private readonly string connectionString;\n        \n        public DatabaseService(string connectionString)\n        {\n            this.connectionString = connectionString;\n        }\n        \n        public void SaveBook(Book book)\n        {\n            Console.WriteLine($\"Saving book to database: {book.Title}\");\n        }\n        \n        public void UpdateSalesData(string isbn, int sales)\n        {\n            Console.WriteLine($\"Updating sales data for ISBN: {isbn}\");\n        }\n        \n        public void LogTransaction(string type, string details)\n        {\n            Console.WriteLine($\"[DB LOG] {type}: {details}\");\n        }\n    }\n    \n    public class PrinterService\n    {\n        private readonly string printerName;\n        \n        public PrinterService(string printerName)\n        {\n            this.printerName = printerName;\n        }\n        \n        public void Print(string document)\n        {\n            Console.WriteLine($\"Printing on {printerName}: {document.Substring(0, Math.Min(50, document.Length))}...\");\n        }\n        \n        public void PrintReport(string report)\n        {\n            Console.WriteLine($\"Printing report on {printerName}\");\n        }\n    }\n    \n    public class Book\n    {\n        public string Title { get; set; }\n        public string Author { get; }\n        public string Content { get; set; }\n        public string ISBN { get; private set; }\n        public DateTime PublishDate { get; }\n        public string Genre { get; set; }\n        public int PageCount { get; private set; }\n        public double Price { get; set; }\n        public string Publisher { get; set; }\n        public List<string> Reviews { get; }\n        public double AverageRating { get; set; }\n        public int TotalSales { get; set; }\n        public List<string> CustomerEmails { get; }\n        public bool IsAvailable { get; set; }\n        public string Format { get; set; }\n        public double DiscountRate { get; set; }\n        \n        private readonly FileStorage fileStorage;\n        private readonly EmailService emailService;\n        private readonly DatabaseService dbService;\n        private readonly PrinterService printer;\n        \n        public Book(string title, string author, string content)\n        {\n            Title = title;\n            Author = author;\n            Content = content;\n            PublishDate = DateTime.Now;\n            Reviews = new List<string>();\n            CustomerEmails = new List<string>();\n            AverageRating = 0.0;\n            TotalSales = 0;\n            IsAvailable = true;\n            Format = \"paperback\";\n            DiscountRate = 0.0;\n            \n            fileStorage = new FileStorage(\"/books/storage\");\n            emailService = new EmailService(\"smtp.bookstore.com\");\n            dbService = new DatabaseService(\"Server=localhost;Database=bookstore;Integrated Security=true;\");\n            printer = new PrinterService(\"BookStore_Printer_001\");\n            \n            InitializeBookDefaults();\n        }\n        \n        public void PrintBook()\n        {\n            Console.WriteLine($\"Title: {Title}\\nAuthor: {Author}\\nContent: {Content}\");\n        }\n        \n        public void SaveToFile(string filename)\n        {\n            string bookData = FormatCompleteBookData();\n            fileStorage.SaveToFile(filename, bookData);\n            dbService.SaveBook(this);\n        }\n        \n        public string FormatCompleteBookData()\n        {\n            return $\"TITLE: {Title}\\nAUTHOR: {Author}\\nISBN: {ISBN}\\nGENRE: {Genre}\\nPAGES: {PageCount}\\nPRICE: ${CalculateFinalPrice()}\\nFORMAT: {Format}\\nPUBLISHER: {Publisher}\\nRATING: {AverageRating}\\nSALES: {TotalSales}\\nAVAILABLE: {IsAvailable}\\nCONTENT: {Content}\";\n        }\n        \n        public void GenerateUniqueISBN()\n        {\n            long timestamp = DateTimeOffset.Now.ToUnixTimeMilliseconds();\n            string category = (Genre != null && Genre.Equals(\"fiction\")) ? \"FIC\" : \"NF\";\n            Random random = new Random();\n            ISBN = $\"978-{category}-{timestamp % 100000}-{random.Next(100):D2}\";\n        }\n        \n        public void CalculateDynamicPageCount()\n        {\n            if (!string.IsNullOrEmpty(Content))\n            {\n                int basePages = Content.Length / 250;\n                double formatMultiplier = Format.Equals(\"hardcover\") ? 1.2 : 1.0;\n                PageCount = Math.Max(1, (int)(basePages * formatMultiplier));\n            }\n        }\n        \n        public bool ValidateCompleteBookData()\n        {\n            return !string.IsNullOrWhiteSpace(Title) &&\n                   !string.IsNullOrWhiteSpace(Author) &&\n                   ValidateISBNFormat(ISBN) &&\n                   ValidatePriceRange(Price) &&\n                   !string.IsNullOrEmpty(Content);\n        }\n        \n        public bool ValidateISBNFormat(string isbn)\n        {\n            if (string.IsNullOrEmpty(isbn)) return false;\n            string clean = System.Text.RegularExpressions.Regex.Replace(isbn, \"[^0-9X]\", \"\");\n            return clean.Length == 10 || clean.Length == 13;\n        }\n        \n        public bool ValidatePriceRange(double price)\n        {\n            return price >= 0.99 && price <= 999.99;\n        }\n        \n        public void ProcessCustomerReview(string customerEmail, string review, double rating)\n        {\n            if (rating >= 1.0 && rating <= 5.0)\n            {\n                Reviews.Add(review);\n                CustomerEmails.Add(customerEmail);\n                RecalculateRatingMetrics(rating);\n                SendReviewConfirmationEmail(customerEmail);\n                LogReviewActivity(customerEmail, rating);\n            }\n        }\n        \n        public void RecalculateRatingMetrics(double newRating)\n        {\n            AverageRating = Reviews.Count == 1 ? newRating : (AverageRating * (Reviews.Count - 1) + newRating) / Reviews.Count;\n        }\n        \n        public void SendReviewConfirmationEmail(string customerEmail)\n        {\n            string subject = $\"Thank you for reviewing: {Title}\";\n            string body = CreateReviewThankYouEmail();\n            emailService.SendEmail(customerEmail, subject, body);\n        }\n        \n        public string CreateReviewThankYouEmail()\n        {\n            return $\"Dear Reader,\\n\\nThank you for reviewing '{Title}' by {Author}.\\nYour feedback helps other readers discover great books!\\n\\nBest regards,\\nBookstore Team\";\n        }\n        \n        public void LogReviewActivity(string customerEmail, double rating)\n        {\n            string logDetails = $\"Review added - Book: {ISBN}, Customer: {customerEmail}, Rating: {rating}\";\n            dbService.LogTransaction(\"REVIEW_ADDED\", logDetails);\n        }\n        \n        public void ProcessSaleTransaction(string customerEmail)\n        {\n            TotalSales++;\n            CustomerEmails.Add(customerEmail);\n            \n            UpdateInventoryStatus();\n            \n            dbService.UpdateSalesData(ISBN, TotalSales);\n            \n            string receiptEmail = GenerateSalesReceiptEmail();\n            emailService.SendEmail(customerEmail, $\"Purchase Confirmation - {Title}\", receiptEmail);\n            \n            LogSalesTransaction(customerEmail);\n            \n            if (TotalSales % 100 == 0)\n            {\n                SendMilestoneNotification();\n            }\n        }\n        \n        public void UpdateInventoryStatus()\n        {\n            if (TotalSales > 1000)\n            {\n                Random random = new Random();\n                IsAvailable = random.NextDouble() > 0.1;\n            }\n        }\n        \n        public string GenerateSalesReceiptEmail()\n        {\n            double finalPrice = CalculateFinalPrice();\n            return $\"PURCHASE RECEIPT\\n\\nTitle: {Title}\\nAuthor: {Author}\\nISBN: {ISBN}\\nFormat: {Format}\\nOriginal Price: ${Price}\\nDiscount: {DiscountRate * 100}%\\nFinal Price: ${finalPrice:F2}\\nThank you for your purchase!\";\n        }\n        \n        public void LogSalesTransaction(string customerEmail)\n        {\n            string logDetails = $\"Sale completed - Book: {ISBN}, Customer: {customerEmail}, Price: ${CalculateFinalPrice()}\";\n            dbService.LogTransaction(\"SALE_COMPLETED\", logDetails);\n        }\n        \n        public void SendMilestoneNotification()\n        {\n            string subject = $\"Sales Milestone Reached: {Title}\";\n            string body = $\"Congratulations! '{Title}' has reached {TotalSales} sales!\";\n            emailService.SendEmail(\"sales@bookstore.com\", subject, body);\n        }\n        \n        public double CalculateFinalPrice()\n        {\n            return Price * (1.0 - DiscountRate);\n        }\n        \n        public double CalculateAuthorRoyalty()\n        {\n            double baseRate = 0.10;\n            if (TotalSales > 5000) baseRate = 0.18;\n            else if (TotalSales > 1000) baseRate = 0.15;\n            return TotalSales * CalculateFinalPrice() * baseRate;\n        }\n        \n        public string GenerateComprehensiveReport()\n        {\n            double revenue = TotalSales * CalculateFinalPrice();\n            double royalty = CalculateAuthorRoyalty();\n            return $\"=== COMPREHENSIVE BOOK REPORT ===\\nTitle: {Title}\\nAuthor: {Author}\\nISBN: {ISBN}\\nGenre: {Genre}\\nFormat: {Format}\\nTotal Sales: {TotalSales}\\nRevenue: ${revenue:F2}\\nAuthor Royalty: ${royalty:F2}\\nAverage Rating: {AverageRating:F2}\\nReviews: {Reviews.Count}\\nAvailable: {IsAvailable}\";\n        }\n        \n        public void PrintDetailedReport()\n        {\n            string report = GenerateComprehensiveReport();\n            Console.WriteLine(report);\n            printer.PrintReport(report);\n        }\n        \n        public void SendMarketingCampaign()\n        {\n            if (CustomerEmails.Any())\n            {\n                string campaignEmail = CreateMarketingEmail();\n                emailService.SendBulkEmail(CustomerEmails, $\"New Release from {Author}\", campaignEmail);\n                LogMarketingActivity();\n            }\n        }\n        \n        public string CreateMarketingEmail()\n        {\n            return $\"Dear Valued Reader,\\n\\nSince you enjoyed '{Title}', you might like our new releases from {Author}.\\nCheck out our latest collection with special discounts!\\n\\nHappy Reading!\";\n        }\n        \n        public void LogMarketingActivity()\n        {\n            dbService.LogTransaction(\"MARKETING_SENT\", $\"Campaign sent for book: {ISBN} to {CustomerEmails.Count} customers\");\n        }\n        \n        public void ExportToMultipleFormats()\n        {\n            string jsonData = $\"{{\\\"title\\\":\\\"{Title}\\\",\\\"author\\\":\\\"{Author}\\\",\\\"isbn\\\":\\\"{ISBN}\\\",\\\"sales\\\":{TotalSales},\\\"rating\\\":{AverageRating}}}\";\n            fileStorage.SaveToFile($\"{ISBN}.json\", jsonData);\n            \n            string xmlData = $\"<book><title>{Title}</title><author>{Author}</author><isbn>{ISBN}</isbn><sales>{TotalSales}</sales></book>\";\n            fileStorage.SaveToFile($\"{ISBN}.xml\", xmlData);\n        }\n        \n        public void InitializeBookDefaults()\n        {\n            GenerateUniqueISBN();\n            CalculateDynamicPageCount();\n            Genre = \"general\";\n            Price = 19.99;\n            Publisher = \"Independent Press\";\n        }\n        \n        public void ApplyDiscount(double discountPercentage)\n        {\n            if (discountPercentage >= 0.0 && discountPercentage <= 0.5)\n            {\n                DiscountRate = discountPercentage;\n                NotifyCustomersOfDiscount();\n            }\n        }\n        \n        public void NotifyCustomersOfDiscount()\n        {\n            if (CustomerEmails.Any())\n            {\n                string discountEmail = $\"Special Offer: {DiscountRate * 100}% off on '{Title}'! Limited time only.\";\n                emailService.SendBulkEmail(CustomerEmails, $\"Special Discount - {Title}\", discountEmail);\n            }\n        }\n        \n        public void SetContent(string content)\n        {\n            Content = content;\n            CalculateDynamicPageCount();\n        }\n        \n        public void SetPrice(double price)\n        {\n            if (ValidatePriceRange(price))\n            {\n                Price = price;\n            }\n        }\n        \n        public void SetFormat(string format)\n        {\n            Format = format;\n            CalculateDynamicPageCount();\n        }\n    }\n}",
            "output": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\n\nnamespace BookstoreSystem\n{\n    public class FileStorage\n    {\n        private readonly string basePath;\n        \n        public FileStorage(string basePath)\n        {\n            this.basePath = basePath;\n        }\n        \n        public void SaveToFile(string filename, string content)\n        {\n            Console.WriteLine($\"Saving content to file: {basePath}/{filename}\");\n        }\n        \n        public string LoadFromFile(string filename)\n        {\n            Console.WriteLine($\"Loading content from file: {basePath}/{filename}\");\n            return \"file content\";\n        }\n        \n        public void DeleteFile(string filename)\n        {\n            Console.WriteLine($\"Deleting file: {basePath}/{filename}\");\n        }\n    }\n    \n    public class EmailService\n    {\n        private readonly string smtpServer;\n        \n        public EmailService(string smtpServer)\n        {\n            this.smtpServer = smtpServer;\n        }\n        \n        public void SendEmail(string recipient, string subject, string body)\n        {\n            Console.WriteLine($\"Sending email to: {recipient}\");\n            Console.WriteLine($\"Subject: {subject}\");\n        }\n        \n        public void SendBulkEmail(List<string> recipients, string subject, string body)\n        {\n            Console.WriteLine($\"Sending bulk email to {recipients.Count} recipients\");\n        }\n    }\n    \n    public class DatabaseService\n    {\n        private readonly string connectionString;\n        \n        public DatabaseService(string connectionString)\n        {\n            this.connectionString = connectionString;\n        }\n        \n        public void SaveBook(Book book)\n        {\n            Console.WriteLine($\"Saving book to database: {book.Title}\");\n        }\n        \n        public void UpdateSalesData(string isbn, int sales)\n        {\n            Console.WriteLine($\"Updating sales data for ISBN: {isbn}\");\n        }\n        \n        public void LogTransaction(string type, string details)\n        {\n            Console.WriteLine($\"[DB LOG] {type}: {details}\");\n        }\n    }\n    \n    public class PrinterService\n    {\n        private readonly string printerName;\n        \n        public PrinterService(string printerName)\n        {\n            this.printerName = printerName;\n        }\n        \n        public void Print(string document)\n        {\n            Console.WriteLine($\"Printing on {printerName}: {document.Substring(0, Math.Min(50, document.Length))}...\");\n        }\n        \n        public void PrintReport(string report)\n        {\n            Console.WriteLine($\"Printing report on {printerName}\");\n        }\n    }\n    \n    public interface IISBNGenerationService\n    {\n        string GenerateUniqueISBN(string genre);\n    }\n    \n    public class ISBNGenerationService : IISBNGenerationService\n    {\n        public string GenerateUniqueISBN(string genre)\n        {\n            long timestamp = DateTimeOffset.Now.ToUnixTimeMilliseconds();\n            string category = (genre != null && genre.Equals(\"fiction\")) ? \"FIC\" : \"NF\";\n            Random random = new Random();\n            return $\"978-{category}-{timestamp % 100000}-{random.Next(100):D2}\";\n        }\n    }\n    \n    public interface IPageCalculationService\n    {\n        int CalculateDynamicPageCount(string content, string format);\n    }\n    \n    public class PageCalculationService : IPageCalculationService\n    {\n        public int CalculateDynamicPageCount(string content, string format)\n        {\n            if (!string.IsNullOrEmpty(content))\n            {\n                int basePages = content.Length / 250;\n                double formatMultiplier = (format != null && format.Equals(\"hardcover\")) ? 1.2 : 1.0;\n                return Math.Max(1, (int)(basePages * formatMultiplier));\n            }\n            return 1;\n        }\n    }\n    \n    public interface IValidationService\n    {\n        bool ValidateCompleteBookData(string title, string author, string isbn, double price, string content);\n        bool ValidateISBNFormat(string isbn);\n        bool ValidatePriceRange(double price);\n        bool ValidateRating(double rating);\n        bool ValidateDiscountRate(double discountPercentage);\n    }\n    \n    public class ValidationService : IValidationService\n    {\n        public bool ValidateCompleteBookData(string title, string author, string isbn, double price, string content)\n        {\n            return !string.IsNullOrWhiteSpace(title) &&\n                   !string.IsNullOrWhiteSpace(author) &&\n                   ValidateISBNFormat(isbn) &&\n                   ValidatePriceRange(price) &&\n                   !string.IsNullOrEmpty(content);\n        }\n        \n        public bool ValidateISBNFormat(string isbn)\n        {\n            if (string.IsNullOrEmpty(isbn)) return false;\n            string clean = Regex.Replace(isbn, \"[^0-9X]\", \"\");\n            return clean.Length == 10 || clean.Length == 13;\n        }\n        \n        public bool ValidatePriceRange(double price)\n        {\n            return price >= 0.99 && price <= 999.99;\n        }\n        \n        public bool ValidateRating(double rating)\n        {\n            return rating >= 1.0 && rating <= 5.0;\n        }\n        \n        public bool ValidateDiscountRate(double discountPercentage)\n        {\n            return discountPercentage >= 0.0 && discountPercentage <= 0.5;\n        }\n    }\n    \n    public interface IReviewManagementService\n    {\n        void ProcessCustomerReview(Book book, string customerEmail, string review, double rating);\n    }\n    \n    public class ReviewManagementService : IReviewManagementService\n    {\n        private readonly EmailService emailService;\n        private readonly DatabaseService dbService;\n        private readonly IEmailContentService emailContentService;\n        private readonly IValidationService validationService;\n        \n        public ReviewManagementService()\n        {\n            emailService = new EmailService(\"smtp.bookstore.com\");\n            dbService = new DatabaseService(\"Server=localhost;Database=bookstore;Integrated Security=true;\");\n            emailContentService = new EmailContentService();\n            validationService = new ValidationService();\n        }\n        \n        public void ProcessCustomerReview(Book book, string customerEmail, string review, double rating)\n        {\n            if (validationService.ValidateRating(rating))\n            {\n                book.Reviews.Add(review);\n                book.CustomerEmails.Add(customerEmail);\n                book.AverageRating = RecalculateRatingMetrics(book.AverageRating, book.Reviews.Count, rating);\n                SendReviewConfirmationEmail(book, customerEmail);\n                LogReviewActivity(book.ISBN, customerEmail, rating);\n            }\n        }\n        \n        private double RecalculateRatingMetrics(double currentAverage, int reviewCount, double newRating)\n        {\n            return reviewCount == 1 ? newRating : (currentAverage * (reviewCount - 1) + newRating) / reviewCount;\n        }\n        \n        private void SendReviewConfirmationEmail(Book book, string customerEmail)\n        {\n            string subject = $\"Thank you for reviewing: {book.Title}\";\n            string body = emailContentService.CreateReviewThankYouEmail(book.Title, book.Author);\n            emailService.SendEmail(customerEmail, subject, body);\n        }\n        \n        private void LogReviewActivity(string isbn, string customerEmail, double rating)\n        {\n            string logDetails = $\"Review added - Book: {isbn}, Customer: {customerEmail}, Rating: {rating}\";\n            dbService.LogTransaction(\"REVIEW_ADDED\", logDetails);\n        }\n    }\n    \n    public interface ISalesManagementService\n    {\n        void ProcessSaleTransaction(Book book, string customerEmail);\n    }\n    \n    public class SalesManagementService : ISalesManagementService\n    {\n        private readonly DatabaseService dbService;\n        private readonly EmailService emailService;\n        private readonly IEmailContentService emailContentService;\n        private readonly IInventoryManagementService inventoryService;\n        \n        public SalesManagementService()\n        {\n            dbService = new DatabaseService(\"Server=localhost;Database=bookstore;Integrated Security=true;\");\n            emailService = new EmailService(\"smtp.bookstore.com\");\n            emailContentService = new EmailContentService();\n            inventoryService = new InventoryManagementService();\n        }\n        \n        public void ProcessSaleTransaction(Book book, string customerEmail)\n        {\n            book.TotalSales++;\n            book.CustomerEmails.Add(customerEmail);\n            \n            inventoryService.UpdateInventoryStatus(book);\n            \n            dbService.UpdateSalesData(book.ISBN, book.TotalSales);\n            \n            string receiptEmail = emailContentService.GenerateSalesReceiptEmail(book);\n            emailService.SendEmail(customerEmail, $\"Purchase Confirmation - {book.Title}\", receiptEmail);\n            \n            LogSalesTransaction(book, customerEmail);\n            \n            if (book.TotalSales % 100 == 0)\n            {\n                SendMilestoneNotification(book);\n            }\n        }\n        \n        private void LogSalesTransaction(Book book, string customerEmail)\n        {\n            var pricingService = new PricingService();\n            double finalPrice = pricingService.CalculateFinalPrice(book.Price, book.DiscountRate);\n            string logDetails = $\"Sale completed - Book: {book.ISBN}, Customer: {customerEmail}, Price: ${finalPrice}\";\n            dbService.LogTransaction(\"SALE_COMPLETED\", logDetails);\n        }\n        \n        private void SendMilestoneNotification(Book book)\n        {\n            string subject = $\"Sales Milestone Reached: {book.Title}\";\n            string body = $\"Congratulations! '{book.Title}' has reached {book.TotalSales} sales!\";\n            emailService.SendEmail(\"sales@bookstore.com\", subject, body);\n        }\n    }\n    \n    public interface IPricingService\n    {\n        double CalculateFinalPrice(double price, double discountRate);\n        double CalculateAuthorRoyalty(int totalSales, double finalPrice);\n    }\n    \n    public class PricingService : IPricingService\n    {\n        public double CalculateFinalPrice(double price, double discountRate)\n        {\n            return price * (1.0 - discountRate);\n        }\n        \n        public double CalculateAuthorRoyalty(int totalSales, double finalPrice)\n        {\n            double baseRate = totalSales switch\n            {\n                > 5000 => 0.18,\n                > 1000 => 0.15,\n                _ => 0.10\n            };\n            return totalSales * finalPrice * baseRate;\n        }\n    }\n    \n    public interface IInventoryManagementService\n    {\n        void UpdateInventoryStatus(Book book);\n    }\n    \n    public class InventoryManagementService : IInventoryManagementService\n    {\n        public void UpdateInventoryStatus(Book book)\n        {\n            if (book.TotalSales > 1000)\n            {\n                Random random = new Random();\n                book.IsAvailable = random.NextDouble() > 0.1;\n            }\n        }\n    }\n    \n    public interface IEmailContentService\n    {\n        string CreateReviewThankYouEmail(string title, string author);\n        string GenerateSalesReceiptEmail(Book book);\n        string CreateMarketingEmail(string title, string author);\n        string CreateDiscountNotificationEmail(string title, double discountRate);\n    }\n    \n    public class EmailContentService : IEmailContentService\n    {\n        public string CreateReviewThankYouEmail(string title, string author)\n        {\n            return $\"Dear Reader,\\n\\nThank you for reviewing '{title}' by {author}.\\nYour feedback helps other readers discover great books!\\n\\nBest regards,\\nBookstore Team\";\n        }\n        \n        public string GenerateSalesReceiptEmail(Book book)\n        {\n            var pricingService = new PricingService();\n            double finalPrice = pricingService.CalculateFinalPrice(book.Price, book.DiscountRate);\n            return $\"PURCHASE RECEIPT\\n\\nTitle: {book.Title}\\nAuthor: {book.Author}\\nISBN: {book.ISBN}\\nFormat: {book.Format}\\nOriginal Price: ${book.Price}\\nDiscount: {book.DiscountRate * 100}%\\nFinal Price: ${finalPrice:F2}\\nThank you for your purchase!\";\n        }\n        \n        public string CreateMarketingEmail(string title, string author)\n        {\n            return $\"Dear Valued Reader,\\n\\nSince you enjoyed '{title}', you might like our new releases from {author}.\\nCheck out our latest collection with special discounts!\\n\\nHappy Reading!\";\n        }\n        \n        public string CreateDiscountNotificationEmail(string title, double discountRate)\n        {\n            return $\"Special Offer: {discountRate * 100}% off on '{title}'! Limited time only.\";\n        }\n    }\n    \n    public interface IDataFormattingService\n    {\n        string FormatCompleteBookData(Book book);\n        string FormatAsJSON(Book book);\n        string FormatAsXML(Book book);\n    }\n    \n    public class DataFormattingService : IDataFormattingService\n    {\n        private readonly IPricingService pricingService;\n        \n        public DataFormattingService()\n        {\n            pricingService = new PricingService();\n        }\n        \n        public string FormatCompleteBookData(Book book)\n        {\n            double finalPrice = pricingService.CalculateFinalPrice(book.Price, book.DiscountRate);\n            return $\"TITLE: {book.Title}\\nAUTHOR: {book.Author}\\nISBN: {book.ISBN}\\nGENRE: {book.Genre}\\nPAGES: {book.PageCount}\\nPRICE: ${finalPrice}\\nFORMAT: {book.Format}\\nPUBLISHER: {book.Publisher}\\nRATING: {book.AverageRating}\\nSALES: {book.TotalSales}\\nAVAILABLE: {book.IsAvailable}\\nCONTENT: {book.Content}\";\n        }\n        \n        public string FormatAsJSON(Book book)\n        {\n            return $\"{{\\\"title\\\":\\\"{book.Title}\\\",\\\"author\\\":\\\"{book.Author}\\\",\\\"isbn\\\":\\\"{book.ISBN}\\\",\\\"sales\\\":{book.TotalSales},\\\"rating\\\":{book.AverageRating}}}\";\n        }\n        \n        public string FormatAsXML(Book book)\n        {\n            return $\"<book><title>{book.Title}</title><author>{book.Author}</author><isbn>{book.ISBN}</isbn><sales>{book.TotalSales}</sales></book>\";\n        }\n    }\n    \n    public interface IReportGenerationService\n    {\n        string GenerateComprehensiveReport(Book book);\n    }\n    \n    public class ReportGenerationService : IReportGenerationService\n    {\n        private readonly IPricingService pricingService;\n        \n        public ReportGenerationService()\n        {\n            pricingService = new PricingService();\n        }\n        \n        public string GenerateComprehensiveReport(Book book)\n        {\n            double finalPrice = pricingService.CalculateFinalPrice(book.Price, book.DiscountRate);\n            double revenue = book.TotalSales * finalPrice;\n            double royalty = pricingService.CalculateAuthorRoyalty(book.TotalSales, finalPrice);\n            \n            return $\"=== COMPREHENSIVE BOOK REPORT ===\\nTitle: {book.Title}\\nAuthor: {book.Author}\\nISBN: {book.ISBN}\\nGenre: {book.Genre}\\nFormat: {book.Format}\\nTotal Sales: {book.TotalSales}\\nRevenue: ${revenue:F2}\\nAuthor Royalty: ${royalty:F2}\\nAverage Rating: {book.AverageRating:F2}\\nReviews: {book.Reviews.Count}\\nAvailable: {book.IsAvailable}\";\n        }\n    }\n    \n    public interface IBookPrintingService\n    {\n        void PrintBook(Book book);\n        void PrintDetailedReport(Book book);\n    }\n    \n    public class BookPrintingService : IBookPrintingService\n    {\n        private readonly PrinterService printer;\n        private readonly IReportGenerationService reportService;\n        \n        public BookPrintingService()\n        {\n            printer = new PrinterService(\"BookStore_Printer_001\");\n            reportService = new ReportGenerationService();\n        }\n        \n        public void PrintBook(Book book)\n        {\n            Console.WriteLine($\"Title: {book.Title}\\nAuthor: {book.Author}\\nContent: {book.Content}\");\n        }\n        \n        public void PrintDetailedReport(Book book)\n        {\n            string report = reportService.GenerateComprehensiveReport(book);\n            Console.WriteLine(report);\n            printer.PrintReport(report);\n        }\n    }\n    \n    public interface IMarketingService\n    {\n        void SendMarketingCampaign(Book book);\n        void NotifyCustomersOfDiscount(Book book);\n    }\n    \n    public class MarketingService : IMarketingService\n    {\n        private readonly EmailService emailService;\n        private readonly IEmailContentService emailContentService;\n        private readonly DatabaseService dbService;\n        \n        public MarketingService()\n        {\n            emailService = new EmailService(\"smtp.bookstore.com\");\n            emailContentService = new EmailContentService();\n            dbService = new DatabaseService(\"Server=localhost;Database=bookstore;Integrated Security=true;\");\n        }\n        \n        public void SendMarketingCampaign(Book book)\n        {\n            if (book.CustomerEmails.Any())\n            {\n                string campaignEmail = emailContentService.CreateMarketingEmail(book.Title, book.Author);\n                emailService.SendBulkEmail(book.CustomerEmails, $\"New Release from {book.Author}\", campaignEmail);\n                LogMarketingActivity(book);\n            }\n        }\n        \n        public void NotifyCustomersOfDiscount(Book book)\n        {\n            if (book.CustomerEmails.Any())\n            {\n                string discountEmail = emailContentService.CreateDiscountNotificationEmail(book.Title, book.DiscountRate);\n                emailService.SendBulkEmail(book.CustomerEmails, $\"Special Discount - {book.Title}\", discountEmail);\n            }\n        }\n        \n        private void LogMarketingActivity(Book book)\n        {\n            dbService.LogTransaction(\"MARKETING_SENT\", $\"Campaign sent for book: {book.ISBN} to {book.CustomerEmails.Count} customers\");\n        }\n    }\n    \n    public interface IFileExportService\n    {\n        void SaveToFile(Book book, string filename);\n        void ExportToMultipleFormats(Book book);\n    }\n    \n    public class FileExportService : IFileExportService\n    {\n        private readonly FileStorage fileStorage;\n        private readonly IDataFormattingService formatter;\n        private readonly DatabaseService dbService;\n        \n        public FileExportService()\n        {\n            fileStorage = new FileStorage(\"/books/storage\");\n            formatter = new DataFormattingService();\n            dbService = new DatabaseService(\"Server=localhost;Database=bookstore;Integrated Security=true;\");\n        }\n        \n        public void SaveToFile(Book book, string filename)\n        {\n            string bookData = formatter.FormatCompleteBookData(book);\n            fileStorage.SaveToFile(filename, bookData);\n            dbService.SaveBook(book);\n        }\n        \n        public void ExportToMultipleFormats(Book book)\n        {\n            string jsonData = formatter.FormatAsJSON(book);\n            fileStorage.SaveToFile($\"{book.ISBN}.json\", jsonData);\n            \n            string xmlData = formatter.FormatAsXML(book);\n            fileStorage.SaveToFile($\"{book.ISBN}.xml\", xmlData);\n        }\n    }\n    \n    public interface IDiscountManagementService\n    {\n        void ApplyDiscount(Book book, double discountPercentage);\n    }\n    \n    public class DiscountManagementService : IDiscountManagementService\n    {\n        private readonly IValidationService validator;\n        private readonly IMarketingService marketingService;\n        \n        public DiscountManagementService()\n        {\n            validator = new ValidationService();\n            marketingService = new MarketingService();\n        }\n        \n        public void ApplyDiscount(Book book, double discountPercentage)\n        {\n            if (validator.ValidateDiscountRate(discountPercentage))\n            {\n                book.DiscountRate = discountPercentage;\n                marketingService.NotifyCustomersOfDiscount(book);\n            }\n        }\n    }\n    \n    public class Book\n    {\n        private string _isbn;\n        private string _genre;\n        private int _pageCount;\n        private double _price;\n        \n        public string Title { get; set; }\n        public string Author { get; }\n        public string Content { get; private set; }\n        \n        public string ISBN \n        { \n            get => _isbn;\n            private set => _isbn = value;\n        }\n        \n        public DateTime PublishDate { get; }\n        \n        public string Genre \n        { \n            get => _genre;\n            set => _genre = value;\n        }\n        \n        public int PageCount \n        { \n            get => _pageCount;\n            private set => _pageCount = value;\n        }\n        \n        public double Price \n        { \n            get => _price;\n            private set => _price = value;\n        }\n        \n        public string Publisher { get; set; }\n        public List<string> Reviews { get; }\n        public double AverageRating { get; set; }\n        public int TotalSales { get; set; }\n        public List<string> CustomerEmails { get; }\n        public bool IsAvailable { get; set; }\n        \n        private string _format;\n        public string Format \n        { \n            get => _format;\n            set \n            {\n                _format = value;\n                UpdatePageCount();\n            }\n        }\n        \n        public double DiscountRate { get; set; }\n        \n        public Book(string title, string author, string content)\n        {\n            Title = title;\n            Author = author;\n            Content = content;\n            PublishDate = DateTime.Now;\n            Reviews = new List<string>();\n            CustomerEmails = new List<string>();\n            AverageRating = 0.0;\n            TotalSales = 0;\n            IsAvailable = true;\n            _format = \"paperback\";\n            DiscountRate = 0.0;\n            \n            InitializeBookDefaults();\n        }\n        \n        private void InitializeBookDefaults()\n        {\n            var isbnService = new ISBNGenerationService();\n            _isbn = isbnService.GenerateUniqueISBN(_genre);\n            \n            UpdatePageCount();\n            \n            _genre = \"general\";\n            _price = 19.99;\n            Publisher = \"Independent Press\";\n        }\n        \n        private void UpdatePageCount()\n        {\n            var pageService = new PageCalculationService();\n            _pageCount = pageService.CalculateDynamicPageCount(Content, _format);\n        }\n        \n        public void SetContent(string content)\n        {\n            Content = content;\n            UpdatePageCount();\n        }\n        \n        public void SetPrice(double price)\n        {\n            var validator = new ValidationService();\n            if (validator.ValidatePriceRange(price))\n            {\n                _price = price;\n            }\n        }\n        \n        // Extension methods as regular methods\n        public double CalculateFinalPrice()\n        {\n            var pricingService = new PricingService();\n            return pricingService.CalculateFinalPrice(_price, DiscountRate);\n        }\n        \n        public double CalculateAuthorRoyalty()\n        {\n            var pricingService = new PricingService();\n            return pricingService.CalculateAuthorRoyalty(TotalSales, CalculateFinalPrice());\n        }\n        \n        public bool ValidateData()\n        {\n            var validator = new ValidationService();\n            return validator.ValidateCompleteBookData(Title, Author, _isbn, _price, Content);\n        }\n    }\n}",
            "level": "HARD",
            "language": "CSHARP",
            "violation": "SRP",
            "description": "Book printing file saving"
        },
        {
            "input": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nclass InventoryDatabase\n{\n    private string connectionString;\n    \n    public InventoryDatabase(string connectionString)\n    {\n        this.connectionString = connectionString;\n    }\n    \n    public void UpdateStock(string productId, int quantity)\n    {\n        Console.WriteLine($\"Updating stock in database - Product: {productId}, Quantity: {quantity}\");\n    }\n    \n    public void SaveProduct(Product product)\n    {\n        Console.WriteLine($\"Saving product to database: {product.Name}\");\n    }\n    \n    public void LogTransaction(string type, string details)\n    {\n        Console.WriteLine($\"[DB LOG] {type}: {details}\");\n    }\n}\n\nclass EmailService\n{\n    private string smtpServer;\n    \n    public EmailService(string smtpServer)\n    {\n        this.smtpServer = smtpServer;\n    }\n    \n    public void SendEmail(string recipient, string subject, string body)\n    {\n        Console.WriteLine($\"Sending email to: {recipient}, Subject: {subject}\");\n    }\n    \n    public void SendBulkEmail(List<string> recipients, string subject, string body)\n    {\n        Console.WriteLine($\"Sending bulk email to {recipients.Count} recipients\");\n    }\n}\n\nclass PaymentProcessor\n{\n    private string apiKey;\n    \n    public PaymentProcessor(string apiKey)\n    {\n        this.apiKey = apiKey;\n    }\n    \n    public bool ProcessPayment(double amount, string cardNumber)\n    {\n        Console.WriteLine($\"Processing payment of ${amount}\");\n        Random random = new Random();\n        return random.NextDouble() > 0.1;\n    }\n    \n    public void RefundPayment(string transactionId, double amount)\n    {\n        Console.WriteLine($\"Processing refund: ${amount} for transaction: {transactionId}\");\n    }\n}\n\nclass ShippingService\n{\n    private string carrier;\n    \n    public ShippingService(string carrier)\n    {\n        this.carrier = carrier;\n    }\n    \n    public string CreateShipment(string address, double weight)\n    {\n        string trackingNumber = $\"TRK{DateTimeOffset.UtcNow.ToUnixTimeMilliseconds() % 100000}\";\n        Console.WriteLine($\"Creating shipment via {carrier} - Tracking: {trackingNumber}\");\n        return trackingNumber;\n    }\n    \n    public double CalculateShippingRate(string destination, double weight)\n    {\n        return destination.Equals(\"international\", StringComparison.OrdinalIgnoreCase) ? weight * 5.0 : weight * 2.0;\n    }\n}\n\nclass AnalyticsService\n{\n    private string analyticsKey;\n    \n    public AnalyticsService(string analyticsKey)\n    {\n        this.analyticsKey = analyticsKey;\n    }\n    \n    public void TrackEvent(string eventType, string productId, Dictionary<string, string> data)\n    {\n        Console.WriteLine($\"[ANALYTICS] {eventType} for product: {productId}\");\n    }\n    \n    public void GenerateReport(string reportType, string productId)\n    {\n        Console.WriteLine($\"Generating {reportType} report for product: {productId}\");\n    }\n}\n\npublic class Product\n{\n    private string name;\n    private double price;\n    private string productId;\n    private string category;\n    private int stockQuantity;\n    private double weight;\n    private string description;\n    private List<string> customerReviews;\n    private double averageRating;\n    private int totalSales;\n    private double costPrice;\n    private List<string> customerEmails;\n    private bool isActive;\n    private string supplier;\n    private double discountRate;\n    private Dictionary<string, int> salesByRegion;\n    \n    private InventoryDatabase database;\n    private EmailService emailService;\n    private PaymentProcessor paymentProcessor;\n    private ShippingService shippingService;\n    private AnalyticsService analytics;\n    \n    public Product(string name, double price)\n    {\n        this.name = name;\n        this.price = price;\n        this.productId = GenerateAdvancedProductId();\n        this.customerReviews = new List<string>();\n        this.customerEmails = new List<string>();\n        this.salesByRegion = new Dictionary<string, int>();\n        this.averageRating = 0.0;\n        this.totalSales = 0;\n        this.stockQuantity = 100;\n        this.costPrice = price * 0.6;\n        this.isActive = true;\n        this.discountRate = 0.0;\n        this.weight = 1.0;\n        \n        this.database = new InventoryDatabase(\"Server=localhost;Database=inventory;Trusted_Connection=true;\");\n        this.emailService = new EmailService(\"smtp.ecommerce.com\");\n        this.paymentProcessor = new PaymentProcessor(\"pay_api_key_123\");\n        this.shippingService = new ShippingService(\"FedEx\");\n        this.analytics = new AnalyticsService(\"analytics_key_456\");\n        \n        InitializeAdvancedDefaults();\n    }\n    \n    public double ApplyDiscount(double percentage)\n    {\n        return price * (1 - percentage / 100);\n    }\n    \n    public void DisplayProduct()\n    {\n        Console.WriteLine($\"Product: {name}, Price: ${price}\");\n    }\n    \n    public string GenerateAdvancedProductId()\n    {\n        string categoryPrefix = !string.IsNullOrEmpty(category) ? category.Substring(0, Math.Min(3, category.Length)).ToUpper() : \"GEN\";\n        string timestamp = (DateTimeOffset.UtcNow.ToUnixTimeMilliseconds() % 100000).ToString();\n        string checksum = Math.Abs(name.GetHashCode() % 100).ToString();\n        return $\"{categoryPrefix}-{timestamp}-{checksum}\";\n    }\n    \n    public double CalculateDynamicPricing()\n    {\n        double demandMultiplier = totalSales > 1000 ? 1.2 : (totalSales > 500 ? 1.1 : 1.0);\n        double stockMultiplier = stockQuantity < 10 ? 1.15 : 1.0;\n        double seasonalMultiplier = DateTime.Now.Month == 12 ? 1.25 : 1.0;\n        return price * demandMultiplier * stockMultiplier * seasonalMultiplier * (1 - discountRate);\n    }\n    \n    public double CalculateComplexProfitMargin()\n    {\n        double sellingPrice = CalculateDynamicPricing();\n        double shippingCost = shippingService.CalculateShippingRate(\"domestic\", weight);\n        double totalCost = costPrice + shippingCost + (sellingPrice * 0.03);\n        return ((sellingPrice - totalCost) / sellingPrice) * 100;\n    }\n    \n    public double CalculateTieredDiscount(int quantity)\n    {\n        if (quantity >= 100) return 0.20;\n        if (quantity >= 50) return 0.15;\n        if (quantity >= 10) return 0.10;\n        if (quantity >= 5) return 0.05;\n        return 0.0;\n    }\n    \n    public bool ValidateProductCompliance()\n    {\n        bool hasValidName = !string.IsNullOrEmpty(name) && name.Length >= 3 && name.Length <= 100;\n        bool hasValidPrice = price > 0 && price <= 10000;\n        bool hasValidWeight = weight > 0 && weight <= 50;\n        bool hasValidStock = stockQuantity >= 0;\n        return hasValidName && hasValidPrice && hasValidWeight && hasValidStock;\n    }\n    \n    public void ProcessAdvancedReview(string customerEmail, string review, double rating, string region)\n    {\n        if (rating >= 1.0 && rating <= 5.0 && review.Length >= 10)\n        {\n            customerReviews.Add(review);\n            customerEmails.Add(customerEmail);\n            RecalculateAdvancedRating(rating);\n            \n            string thankYouEmail = CreateReviewThankYouEmail(customerEmail, rating);\n            emailService.SendEmail(customerEmail, \"Thank you for your review!\", thankYouEmail);\n            \n            Dictionary<string, string> analyticsData = new Dictionary<string, string>\n            {\n                [\"rating\"] = rating.ToString(),\n                [\"region\"] = region\n            };\n            analytics.TrackEvent(\"REVIEW_ADDED\", productId, analyticsData);\n            \n            database.LogTransaction(\"REVIEW_PROCESSED\", $\"Product: {productId}, Rating: {rating}, Region: {region}\");\n        }\n    }\n    \n    public void RecalculateAdvancedRating(double newRating)\n    {\n        if (customerReviews.Count == 1)\n        {\n            averageRating = newRating;\n        }\n        else\n        {\n            double weightedTotal = averageRating * (customerReviews.Count - 1) + newRating;\n            averageRating = weightedTotal / customerReviews.Count;\n        }\n        \n        if (averageRating >= 4.5 && customerReviews.Count >= 10)\n        {\n            TriggerBestSellerPromotion();\n        }\n    }\n    \n    public string CreateReviewThankYouEmail(string customerEmail, double rating)\n    {\n        StringBuilder email = new StringBuilder();\n        email.AppendLine(\"Dear Valued Customer,\");\n        email.AppendLine();\n        email.AppendLine($\"Thank you for your {rating}-star review of {name}!\");\n        email.AppendLine(\"Your feedback helps other customers make informed decisions.\");\n        email.AppendLine();\n        if (rating >= 4.0)\n        {\n            email.AppendLine(\"As a token of appreciation, here's a 10% discount code: REVIEW10\");\n            email.AppendLine();\n        }\n        email.AppendLine(\"Best regards,\");\n        email.AppendLine(\"Customer Service Team\");\n        return email.ToString();\n    }\n    \n    public void TriggerBestSellerPromotion()\n    {\n        string promoEmail = $\"BESTSELLER ALERT: {name} is now a top-rated product with {averageRating} stars!\";\n        emailService.SendBulkEmail(customerEmails, \"Special Offer on Bestseller\", promoEmail);\n        analytics.TrackEvent(\"BESTSELLER_PROMOTION\", productId, new Dictionary<string, string>());\n    }\n    \n    public string ProcessComplexSale(int quantity, string customerEmail, string shippingAddress, string region, string cardNumber)\n    {\n        if (stockQuantity < quantity)\n        {\n            return \"FAILED: Insufficient stock\";\n        }\n        \n        double unitPrice = CalculateDynamicPricing();\n        double discount = CalculateTieredDiscount(quantity);\n        double subtotal = unitPrice * quantity * (1 - discount);\n        double shippingCost = shippingService.CalculateShippingRate(region, weight * quantity);\n        double totalAmount = subtotal + shippingCost;\n        \n        if (!paymentProcessor.ProcessPayment(totalAmount, cardNumber))\n        {\n            return \"FAILED: Payment declined\";\n        }\n        \n        stockQuantity -= quantity;\n        totalSales += quantity;\n        salesByRegion[region] = salesByRegion.GetValueOrDefault(region, 0) + quantity;\n        \n        string trackingNumber = shippingService.CreateShipment(shippingAddress, weight * quantity);\n        \n        database.UpdateStock(productId, stockQuantity);\n        \n        string receiptEmail = GenerateAdvancedReceipt(quantity, unitPrice, discount, shippingCost, totalAmount, trackingNumber);\n        emailService.SendEmail(customerEmail, $\"Order Confirmation - {name}\", receiptEmail);\n        \n        CheckAdvancedStockAlerts();\n        \n        Dictionary<string, string> saleData = new Dictionary<string, string>\n        {\n            [\"quantity\"] = quantity.ToString(),\n            [\"amount\"] = totalAmount.ToString(),\n            [\"region\"] = region\n        };\n        analytics.TrackEvent(\"SALE_COMPLETED\", productId, saleData);\n        \n        database.LogTransaction(\"COMPLEX_SALE\", $\"Product: {productId}, Qty: {quantity}, Amount: ${totalAmount}, Region: {region}\");\n        \n        return $\"SUCCESS: Order placed - Tracking: {trackingNumber}\";\n    }\n    \n    public string GenerateAdvancedReceipt(int quantity, double unitPrice, double discount, double shipping, double total, string tracking)\n    {\n        return $\"ORDER RECEIPT\\n\" +\n               $\"Product: {name} ({productId})\\n\" +\n               $\"Quantity: {quantity}\\n\" +\n               $\"Unit Price: ${unitPrice:F2}\\n\" +\n               $\"Discount: {discount * 100:F0}%\\n\" +\n               $\"Shipping: ${shipping:F2}\\n\" +\n               $\"Total: ${total:F2}\\n\" +\n               $\"Tracking: {tracking}\\n\" +\n               \"Thank you for your order!\";\n    }\n    \n    public void CheckAdvancedStockAlerts()\n    {\n        if (stockQuantity <= 5)\n        {\n            string urgentAlert = $\"URGENT: Product {name} ({productId}) critically low - Only {stockQuantity} units left!\";\n            emailService.SendEmail(\"urgent@company.com\", \"Critical Stock Alert\", urgentAlert);\n            analytics.TrackEvent(\"CRITICAL_STOCK_ALERT\", productId, new Dictionary<string, string>());\n        }\n        else if (stockQuantity <= 20)\n        {\n            string alert = $\"LOW STOCK: Product {name} has {stockQuantity} units remaining.\";\n            emailService.SendEmail(\"inventory@company.com\", \"Low Stock Alert\", alert);\n        }\n    }\n    \n    public void ExecuteSmartRestock(string supplierEmail)\n    {\n        int recommendedStock = CalculateOptimalStockLevel();\n        int restockQuantity = recommendedStock - stockQuantity;\n        \n        if (restockQuantity > 0)\n        {\n            stockQuantity += restockQuantity;\n            database.UpdateStock(productId, stockQuantity);\n            \n            string restockEmail = GenerateSmartRestockEmail(restockQuantity, recommendedStock);\n            emailService.SendEmail(supplierEmail, $\"Smart Restock Completed - {name}\", restockEmail);\n            \n            analytics.TrackEvent(\"SMART_RESTOCK\", productId, new Dictionary<string, string> { [\"quantity\"] = restockQuantity.ToString() });\n            database.LogTransaction(\"SMART_RESTOCK\", $\"Product: {productId}, Added: {restockQuantity}, Target: {recommendedStock}\");\n        }\n    }\n    \n    public int CalculateOptimalStockLevel()\n    {\n        int averageMonthlySales = totalSales / Math.Max(1, DateTime.Now.Month);\n        int seasonalFactor = DateTime.Now.Month == 12 ? 2 : 1;\n        return averageMonthlySales * 2 * seasonalFactor;\n    }\n    \n    public string GenerateSmartRestockEmail(int quantity, int targetLevel)\n    {\n        int dayOfYear = DateTime.Now.DayOfYear;\n        double salesVelocity = (double)totalSales / Math.Max(1, dayOfYear);\n        \n        return $\"SMART RESTOCK REPORT\\n\" +\n               $\"Product: {name} ({productId})\\n\" +\n               $\"Restocked Quantity: {quantity}\\n\" +\n               $\"New Stock Level: {stockQuantity}\\n\" +\n               $\"Target Level: {targetLevel}\\n\" +\n               $\"Sales Velocity: {salesVelocity:F2} units/day\\n\" +\n               \"Restock completed successfully.\";\n    }\n    \n    public string GenerateComprehensiveAnalytics()\n    {\n        double totalRevenue = totalSales * CalculateDynamicPricing();\n        double profitMargin = CalculateComplexProfitMargin();\n        string topRegion = salesByRegion.Count > 0 ? salesByRegion.OrderByDescending(x => x.Value).First().Key : \"N/A\";\n        \n        return $\"COMPREHENSIVE ANALYTICS\\n\" +\n               $\"Product: {name} ({productId})\\n\" +\n               $\"Total Sales: {totalSales} units\\n\" +\n               $\"Revenue: ${totalRevenue:F2}\\n\" +\n               $\"Profit Margin: {profitMargin:F2}%\\n\" +\n               $\"Average Rating: {averageRating:F2} ({customerReviews.Count} reviews)\\n\" +\n               $\"Top Region: {topRegion}\\n\" +\n               $\"Stock Level: {stockQuantity}\\n\" +\n               $\"Current Price: ${CalculateDynamicPricing():F2}\";\n    }\n    \n    public void LaunchMarketingCampaign(string campaignType)\n    {\n        string campaignEmail = CreateCampaignEmail(campaignType);\n        emailService.SendBulkEmail(customerEmails, $\"Special Campaign - {name}\", campaignEmail);\n        \n        Dictionary<string, string> campaignData = new Dictionary<string, string>\n        {\n            [\"type\"] = campaignType,\n            [\"reach\"] = customerEmails.Count.ToString()\n        };\n        analytics.TrackEvent(\"MARKETING_CAMPAIGN\", productId, campaignData);\n        \n        database.LogTransaction(\"CAMPAIGN_LAUNCHED\", $\"Product: {productId}, Type: {campaignType}, Reach: {customerEmails.Count}\");\n    }\n    \n    public string CreateCampaignEmail(string campaignType)\n    {\n        return campaignType switch\n        {\n            \"SEASONAL\" => $\"Don't miss our seasonal special on {name}! Limited time offer with up to 25% off!\",\n            \"CLEARANCE\" => $\"CLEARANCE ALERT: {name} must go! Huge discounts available now!\",\n            _ => $\"Special promotion on {name} - Check out our latest deals!\"\n        };\n    }\n    \n    public void InitializeAdvancedDefaults()\n    {\n        this.category = \"Electronics\";\n        this.description = \"High-quality product\";\n        this.supplier = \"Global Supplier Inc\";\n        salesByRegion[\"North America\"] = 0;\n        salesByRegion[\"Europe\"] = 0;\n        salesByRegion[\"Asia\"] = 0;\n    }\n    \n    public string Name\n    {\n        get { return name; }\n    }\n    \n    public double Price\n    {\n        get { return price; }\n        set \n        { \n            price = value;\n            database.LogTransaction(\"PRICE_UPDATE\", $\"Product: {productId}, New price: ${price}\");\n        }\n    }\n    \n    public void SetDiscountRate(double rate)\n    {\n        this.discountRate = rate;\n        analytics.TrackEvent(\"DISCOUNT_APPLIED\", productId, new Dictionary<string, string> { [\"rate\"] = rate.ToString() });\n    }\n}",
            "output": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nclass InventoryDatabase\n{\n    private string connectionString;\n    \n    public InventoryDatabase(string connectionString)\n    {\n        this.connectionString = connectionString;\n    }\n    \n    public void UpdateStock(string productId, int quantity)\n    {\n        Console.WriteLine($\"Updating stock in database - Product: {productId}, Quantity: {quantity}\");\n    }\n    \n    public void SaveProduct(Product product)\n    {\n        Console.WriteLine($\"Saving product to database: {product.Name}\");\n    }\n    \n    public void LogTransaction(string type, string details)\n    {\n        Console.WriteLine($\"[DB LOG] {type}: {details}\");\n    }\n}\n\nclass EmailService\n{\n    private string smtpServer;\n    \n    public EmailService(string smtpServer)\n    {\n        this.smtpServer = smtpServer;\n    }\n    \n    public void SendEmail(string recipient, string subject, string body)\n    {\n        Console.WriteLine($\"Sending email to: {recipient}, Subject: {subject}\");\n    }\n    \n    public void SendBulkEmail(List<string> recipients, string subject, string body)\n    {\n        Console.WriteLine($\"Sending bulk email to {recipients.Count} recipients\");\n    }\n}\n\nclass PaymentProcessor\n{\n    private string apiKey;\n    \n    public PaymentProcessor(string apiKey)\n    {\n        this.apiKey = apiKey;\n    }\n    \n    public bool ProcessPayment(double amount, string cardNumber)\n    {\n        Console.WriteLine($\"Processing payment of ${amount}\");\n        Random random = new Random();\n        return random.NextDouble() > 0.1;\n    }\n    \n    public void RefundPayment(string transactionId, double amount)\n    {\n        Console.WriteLine($\"Processing refund: ${amount} for transaction: {transactionId}\");\n    }\n}\n\nclass ShippingService\n{\n    private string carrier;\n    \n    public ShippingService(string carrier)\n    {\n        this.carrier = carrier;\n    }\n    \n    public string CreateShipment(string address, double weight)\n    {\n        string trackingNumber = $\"TRK{DateTimeOffset.UtcNow.ToUnixTimeMilliseconds() % 100000}\";\n        Console.WriteLine($\"Creating shipment via {carrier} - Tracking: {trackingNumber}\");\n        return trackingNumber;\n    }\n    \n    public double CalculateShippingRate(string destination, double weight)\n    {\n        return destination.Equals(\"international\", StringComparison.OrdinalIgnoreCase) ? weight * 5.0 : weight * 2.0;\n    }\n}\n\nclass AnalyticsService\n{\n    private string analyticsKey;\n    \n    public AnalyticsService(string analyticsKey)\n    {\n        this.analyticsKey = analyticsKey;\n    }\n    \n    public void TrackEvent(string eventType, string productId, Dictionary<string, string> data)\n    {\n        Console.WriteLine($\"[ANALYTICS] {eventType} for product: {productId}\");\n    }\n    \n    public void GenerateReport(string reportType, string productId)\n    {\n        Console.WriteLine($\"Generating {reportType} report for product: {productId}\");\n    }\n}\n\nclass ProductIdGenerationService\n{\n    public string GenerateAdvancedProductId(string name, string category)\n    {\n        string categoryPrefix = !string.IsNullOrEmpty(category) ? category.Substring(0, Math.Min(3, category.Length)).ToUpper() : \"GEN\";\n        string timestamp = (DateTimeOffset.UtcNow.ToUnixTimeMilliseconds() % 100000).ToString();\n        string checksum = Math.Abs(name.GetHashCode() % 100).ToString();\n        return $\"{categoryPrefix}-{timestamp}-{checksum}\";\n    }\n}\n\nclass PricingCalculationService\n{\n    private ShippingService shippingService;\n    \n    public PricingCalculationService()\n    {\n        this.shippingService = new ShippingService(\"FedEx\");\n    }\n    \n    public double ApplyDiscount(double price, double percentage)\n    {\n        return price * (1 - percentage / 100);\n    }\n    \n    public double CalculateDynamicPricing(double basePrice, int totalSales, int stockQuantity, double discountRate)\n    {\n        double demandMultiplier = totalSales > 1000 ? 1.2 : (totalSales > 500 ? 1.1 : 1.0);\n        double stockMultiplier = stockQuantity < 10 ? 1.15 : 1.0;\n        double seasonalMultiplier = DateTime.Now.Month == 12 ? 1.25 : 1.0;\n        return basePrice * demandMultiplier * stockMultiplier * seasonalMultiplier * (1 - discountRate);\n    }\n    \n    public double CalculateComplexProfitMargin(double basePrice, int totalSales, int stockQuantity, double discountRate, double costPrice, double weight)\n    {\n        double sellingPrice = CalculateDynamicPricing(basePrice, totalSales, stockQuantity, discountRate);\n        double shippingCost = shippingService.CalculateShippingRate(\"domestic\", weight);\n        double totalCost = costPrice + shippingCost + (sellingPrice * 0.03);\n        return ((sellingPrice - totalCost) / sellingPrice) * 100;\n    }\n    \n    public double CalculateTieredDiscount(int quantity)\n    {\n        if (quantity >= 100) return 0.20;\n        if (quantity >= 50) return 0.15;\n        if (quantity >= 10) return 0.10;\n        if (quantity >= 5) return 0.05;\n        return 0.0;\n    }\n}\n\nclass ValidationService\n{\n    public bool ValidateProductCompliance(string name, double price, double weight, int stockQuantity)\n    {\n        bool hasValidName = !string.IsNullOrEmpty(name) && name.Length >= 3 && name.Length <= 100;\n        bool hasValidPrice = price > 0 && price <= 10000;\n        bool hasValidWeight = weight > 0 && weight <= 50;\n        bool hasValidStock = stockQuantity >= 0;\n        return hasValidName && hasValidPrice && hasValidWeight && hasValidStock;\n    }\n    \n    public bool ValidateReview(double rating, string review)\n    {\n        return rating >= 1.0 && rating <= 5.0 && !string.IsNullOrEmpty(review) && review.Length >= 10;\n    }\n}\n\nclass ReviewManagementService\n{\n    private EmailService emailService;\n    private AnalyticsService analytics;\n    private InventoryDatabase database;\n    private EmailContentService emailContentService;\n    private ValidationService validator;\n    \n    public ReviewManagementService()\n    {\n        this.emailService = new EmailService(\"smtp.ecommerce.com\");\n        this.analytics = new AnalyticsService(\"analytics_key_456\");\n        this.database = new InventoryDatabase(\"Server=localhost;Database=inventory;Trusted_Connection=true;\");\n        this.emailContentService = new EmailContentService();\n        this.validator = new ValidationService();\n    }\n    \n    public void ProcessAdvancedReview(Product product, string customerEmail, string review, double rating, string region)\n    {\n        if (validator.ValidateReview(rating, review))\n        {\n            product.CustomerReviews.Add(review);\n            product.CustomerEmails.Add(customerEmail);\n            product.AverageRating = RecalculateAdvancedRating(product.AverageRating, product.CustomerReviews.Count, rating);\n            \n            string thankYouEmail = emailContentService.CreateReviewThankYouEmail(product.Name, customerEmail, rating);\n            emailService.SendEmail(customerEmail, \"Thank you for your review!\", thankYouEmail);\n            \n            Dictionary<string, string> analyticsData = new Dictionary<string, string>\n            {\n                [\"rating\"] = rating.ToString(),\n                [\"region\"] = region\n            };\n            analytics.TrackEvent(\"REVIEW_ADDED\", product.ProductId, analyticsData);\n            \n            database.LogTransaction(\"REVIEW_PROCESSED\", $\"Product: {product.ProductId}, Rating: {rating}, Region: {region}\");\n            \n            if (product.AverageRating >= 4.5 && product.CustomerReviews.Count >= 10)\n            {\n                TriggerBestSellerPromotion(product);\n            }\n        }\n    }\n    \n    private double RecalculateAdvancedRating(double currentAverage, int reviewCount, double newRating)\n    {\n        return reviewCount == 1 ? newRating : (currentAverage * (reviewCount - 1) + newRating) / reviewCount;\n    }\n    \n    private void TriggerBestSellerPromotion(Product product)\n    {\n        string promoEmail = $\"BESTSELLER ALERT: {product.Name} is now a top-rated product with {product.AverageRating} stars!\";\n        emailService.SendBulkEmail(product.CustomerEmails, \"Special Offer on Bestseller\", promoEmail);\n        analytics.TrackEvent(\"BESTSELLER_PROMOTION\", product.ProductId, new Dictionary<string, string>());\n    }\n}\n\nclass SalesProcessingService\n{\n    private PaymentProcessor paymentProcessor;\n    private ShippingService shippingService;\n    private InventoryDatabase database;\n    private EmailService emailService;\n    private AnalyticsService analytics;\n    private PricingCalculationService pricingService;\n    private EmailContentService emailContentService;\n    private StockAlertService stockAlertService;\n    \n    public SalesProcessingService()\n    {\n        this.paymentProcessor = new PaymentProcessor(\"pay_api_key_123\");\n        this.shippingService = new ShippingService(\"FedEx\");\n        this.database = new InventoryDatabase(\"Server=localhost;Database=inventory;Trusted_Connection=true;\");\n        this.emailService = new EmailService(\"smtp.ecommerce.com\");\n        this.analytics = new AnalyticsService(\"analytics_key_456\");\n        this.pricingService = new PricingCalculationService();\n        this.emailContentService = new EmailContentService();\n        this.stockAlertService = new StockAlertService();\n    }\n    \n    public string ProcessComplexSale(Product product, int quantity, string customerEmail, string shippingAddress, string region, string cardNumber)\n    {\n        if (product.StockQuantity < quantity)\n        {\n            return \"FAILED: Insufficient stock\";\n        }\n        \n        double unitPrice = pricingService.CalculateDynamicPricing(product.Price, product.TotalSales, product.StockQuantity, product.DiscountRate);\n        double discount = pricingService.CalculateTieredDiscount(quantity);\n        double subtotal = unitPrice * quantity * (1 - discount);\n        double shippingCost = shippingService.CalculateShippingRate(region, product.Weight * quantity);\n        double totalAmount = subtotal + shippingCost;\n        \n        if (!paymentProcessor.ProcessPayment(totalAmount, cardNumber))\n        {\n            return \"FAILED: Payment declined\";\n        }\n        \n        product.StockQuantity -= quantity;\n        product.TotalSales += quantity;\n        product.SalesByRegion[region] = product.SalesByRegion.GetValueOrDefault(region, 0) + quantity;\n        \n        string trackingNumber = shippingService.CreateShipment(shippingAddress, product.Weight * quantity);\n        \n        database.UpdateStock(product.ProductId, product.StockQuantity);\n        \n        string receiptEmail = emailContentService.GenerateAdvancedReceipt(product.Name, product.ProductId, quantity, unitPrice, discount, shippingCost, totalAmount, trackingNumber);\n        emailService.SendEmail(customerEmail, $\"Order Confirmation - {product.Name}\", receiptEmail);\n        \n        stockAlertService.CheckAdvancedStockAlerts(product, emailService, analytics);\n        \n        Dictionary<string, string> saleData = new Dictionary<string, string>\n        {\n            [\"quantity\"] = quantity.ToString(),\n            [\"amount\"] = totalAmount.ToString(),\n            [\"region\"] = region\n        };\n        analytics.TrackEvent(\"SALE_COMPLETED\", product.ProductId, saleData);\n        \n        database.LogTransaction(\"COMPLEX_SALE\", $\"Product: {product.ProductId}, Qty: {quantity}, Amount: ${totalAmount}, Region: {region}\");\n        \n        return $\"SUCCESS: Order placed - Tracking: {trackingNumber}\";\n    }\n}\n\nclass StockAlertService\n{\n    public void CheckAdvancedStockAlerts(Product product, EmailService emailService, AnalyticsService analytics)\n    {\n        if (product.StockQuantity <= 5)\n        {\n            string urgentAlert = $\"URGENT: Product {product.Name} ({product.ProductId}) critically low - Only {product.StockQuantity} units left!\";\n            emailService.SendEmail(\"urgent@company.com\", \"Critical Stock Alert\", urgentAlert);\n            analytics.TrackEvent(\"CRITICAL_STOCK_ALERT\", product.ProductId, new Dictionary<string, string>());\n        }\n        else if (product.StockQuantity <= 20)\n        {\n            string alert = $\"LOW STOCK: Product {product.Name} has {product.StockQuantity} units remaining.\";\n            emailService.SendEmail(\"inventory@company.com\", \"Low Stock Alert\", alert);\n        }\n    }\n}\n\nclass InventoryManagementService\n{\n    private InventoryDatabase database;\n    private EmailService emailService;\n    private AnalyticsService analytics;\n    private EmailContentService emailContentService;\n    \n    public InventoryManagementService()\n    {\n        this.database = new InventoryDatabase(\"Server=localhost;Database=inventory;Trusted_Connection=true;\");\n        this.emailService = new EmailService(\"smtp.ecommerce.com\");\n        this.analytics = new AnalyticsService(\"analytics_key_456\");\n        this.emailContentService = new EmailContentService();\n    }\n    \n    public void ExecuteSmartRestock(Product product, string supplierEmail)\n    {\n        int recommendedStock = CalculateOptimalStockLevel(product.TotalSales);\n        int restockQuantity = recommendedStock - product.StockQuantity;\n        \n        if (restockQuantity > 0)\n        {\n            product.StockQuantity += restockQuantity;\n            database.UpdateStock(product.ProductId, product.StockQuantity);\n            \n            string restockEmail = emailContentService.GenerateSmartRestockEmail(product.Name, product.ProductId, restockQuantity, product.StockQuantity, recommendedStock, product.TotalSales);\n            emailService.SendEmail(supplierEmail, $\"Smart Restock Completed - {product.Name}\", restockEmail);\n            \n            analytics.TrackEvent(\"SMART_RESTOCK\", product.ProductId, new Dictionary<string, string> { [\"quantity\"] = restockQuantity.ToString() });\n            database.LogTransaction(\"SMART_RESTOCK\", $\"Product: {product.ProductId}, Added: {restockQuantity}, Target: {recommendedStock}\");\n        }\n    }\n    \n    private int CalculateOptimalStockLevel(int totalSales)\n    {\n        int averageMonthlySales = totalSales / Math.Max(1, DateTime.Now.Month);\n        int seasonalFactor = DateTime.Now.Month == 12 ? 2 : 1;\n        return averageMonthlySales * 2 * seasonalFactor;\n    }\n}\n\nclass EmailContentService\n{\n    public string CreateReviewThankYouEmail(string productName, string customerEmail, double rating)\n    {\n        StringBuilder email = new StringBuilder();\n        email.AppendLine(\"Dear Valued Customer,\");\n        email.AppendLine();\n        email.AppendLine($\"Thank you for your {rating}-star review of {productName}!\");\n        email.AppendLine(\"Your feedback helps other customers make informed decisions.\");\n        email.AppendLine();\n        if (rating >= 4.0)\n        {\n            email.AppendLine(\"As a token of appreciation, here's a 10% discount code: REVIEW10\");\n            email.AppendLine();\n        }\n        email.AppendLine(\"Best regards,\");\n        email.AppendLine(\"Customer Service Team\");\n        return email.ToString();\n    }\n    \n    public string GenerateAdvancedReceipt(string productName, string productId, int quantity, double unitPrice, double discount, double shipping, double total, string tracking)\n    {\n        return $\"ORDER RECEIPT\\n\" +\n               $\"Product: {productName} ({productId})\\n\" +\n               $\"Quantity: {quantity}\\n\" +\n               $\"Unit Price: ${unitPrice:F2}\\n\" +\n               $\"Discount: {discount * 100:F0}%\\n\" +\n               $\"Shipping: ${shipping:F2}\\n\" +\n               $\"Total: ${total:F2}\\n\" +\n               $\"Tracking: {tracking}\\n\" +\n               \"Thank you for your order!\";\n    }\n    \n    public string GenerateSmartRestockEmail(string productName, string productId, int quantity, int newStock, int targetLevel, int totalSales)\n    {\n        int dayOfYear = DateTime.Now.DayOfYear;\n        double salesVelocity = (double)totalSales / Math.Max(1, dayOfYear);\n        \n        return $\"SMART RESTOCK REPORT\\n\" +\n               $\"Product: {productName} ({productId})\\n\" +\n               $\"Restocked Quantity: {quantity}\\n\" +\n               $\"New Stock Level: {newStock}\\n\" +\n               $\"Target Level: {targetLevel}\\n\" +\n               $\"Sales Velocity: {salesVelocity:F2} units/day\\n\" +\n               \"Restock completed successfully.\";\n    }\n    \n    public string CreateCampaignEmail(string productName, string campaignType)\n    {\n        return campaignType switch\n        {\n            \"SEASONAL\" => $\"Don't miss our seasonal special on {productName}! Limited time offer with up to 25% off!\",\n            \"CLEARANCE\" => $\"CLEARANCE ALERT: {productName} must go! Huge discounts available now!\",\n            _ => $\"Special promotion on {productName} - Check out our latest deals!\"\n        };\n    }\n}\n\nclass AnalyticsReportingService\n{\n    private PricingCalculationService pricingService;\n    \n    public AnalyticsReportingService()\n    {\n        this.pricingService = new PricingCalculationService();\n    }\n    \n    public string GenerateComprehensiveAnalytics(Product product)\n    {\n        double currentPrice = pricingService.CalculateDynamicPricing(product.Price, product.TotalSales, product.StockQuantity, product.DiscountRate);\n        double totalRevenue = product.TotalSales * currentPrice;\n        double profitMargin = pricingService.CalculateComplexProfitMargin(product.Price, product.TotalSales, product.StockQuantity, product.DiscountRate, product.CostPrice, product.Weight);\n        string topRegion = product.SalesByRegion.Count > 0 ? product.SalesByRegion.OrderByDescending(x => x.Value).First().Key : \"N/A\";\n        \n        return $\"COMPREHENSIVE ANALYTICS\\n\" +\n               $\"Product: {product.Name} ({product.ProductId})\\n\" +\n               $\"Total Sales: {product.TotalSales} units\\n\" +\n               $\"Revenue: ${totalRevenue:F2}\\n\" +\n               $\"Profit Margin: {profitMargin:F2}%\\n\" +\n               $\"Average Rating: {product.AverageRating:F2} ({product.CustomerReviews.Count} reviews)\\n\" +\n               $\"Top Region: {topRegion}\\n\" +\n               $\"Stock Level: {product.StockQuantity}\\n\" +\n               $\"Current Price: ${currentPrice:F2}\";\n    }\n}\n\nclass MarketingCampaignService\n{\n    private EmailService emailService;\n    private AnalyticsService analytics;\n    private InventoryDatabase database;\n    private EmailContentService emailContentService;\n    \n    public MarketingCampaignService()\n    {\n        this.emailService = new EmailService(\"smtp.ecommerce.com\");\n        this.analytics = new AnalyticsService(\"analytics_key_456\");\n        this.database = new InventoryDatabase(\"Server=localhost;Database=inventory;Trusted_Connection=true;\");\n        this.emailContentService = new EmailContentService();\n    }\n    \n    public void LaunchMarketingCampaign(Product product, string campaignType)\n    {\n        string campaignEmail = emailContentService.CreateCampaignEmail(product.Name, campaignType);\n        emailService.SendBulkEmail(product.CustomerEmails, $\"Special Campaign - {product.Name}\", campaignEmail);\n        \n        Dictionary<string, string> campaignData = new Dictionary<string, string>\n        {\n            [\"type\"] = campaignType,\n            [\"reach\"] = product.CustomerEmails.Count.ToString()\n        };\n        analytics.TrackEvent(\"MARKETING_CAMPAIGN\", product.ProductId, campaignData);\n        \n        database.LogTransaction(\"CAMPAIGN_LAUNCHED\", $\"Product: {product.ProductId}, Type: {campaignType}, Reach: {product.CustomerEmails.Count}\");\n    }\n}\n\nclass ProductDisplayService\n{\n    public void DisplayProduct(Product product)\n    {\n        Console.WriteLine($\"Product: {product.Name}, Price: ${product.Price}\");\n    }\n}\n\nclass DiscountManagementService\n{\n    private AnalyticsService analytics;\n    private InventoryDatabase database;\n    \n    public DiscountManagementService()\n    {\n        this.analytics = new AnalyticsService(\"analytics_key_456\");\n        this.database = new InventoryDatabase(\"Server=localhost;Database=inventory;Trusted_Connection=true;\");\n    }\n    \n    public void SetDiscountRate(Product product, double rate)\n    {\n        product.DiscountRate = rate;\n        analytics.TrackEvent(\"DISCOUNT_APPLIED\", product.ProductId, new Dictionary<string, string> { [\"rate\"] = rate.ToString() });\n    }\n    \n    public void UpdatePrice(Product product, double price)\n    {\n        product.Price = price;\n        database.LogTransaction(\"PRICE_UPDATE\", $\"Product: {product.ProductId}, New price: ${price}\");\n    }\n}\n\npublic class Product\n{\n    public string Name { get; private set; }\n    public double Price { get; set; }\n    public string ProductId { get; private set; }\n    public string Category { get; private set; }\n    public int StockQuantity { get; set; }\n    public double Weight { get; private set; }\n    public string Description { get; private set; }\n    public List<string> CustomerReviews { get; private set; }\n    public double AverageRating { get; set; }\n    public int TotalSales { get; set; }\n    public double CostPrice { get; private set; }\n    public List<string> CustomerEmails { get; private set; }\n    public bool IsActive { get; private set; }\n    public string Supplier { get; private set; }\n    public double DiscountRate { get; set; }\n    public Dictionary<string, int> SalesByRegion { get; private set; }\n    \n    public Product(string name, double price)\n    {\n        this.Name = name;\n        this.Price = price;\n        this.CustomerReviews = new List<string>();\n        this.CustomerEmails = new List<string>();\n        this.SalesByRegion = new Dictionary<string, int>();\n        this.AverageRating = 0.0;\n        this.TotalSales = 0;\n        this.StockQuantity = 100;\n        this.CostPrice = price * 0.6;\n        this.IsActive = true;\n        this.DiscountRate = 0.0;\n        this.Weight = 1.0;\n        \n        InitializeAdvancedDefaults();\n    }\n    \n    private void InitializeAdvancedDefaults()\n    {\n        this.Category = \"Electronics\";\n        this.Description = \"High-quality product\";\n        this.Supplier = \"Global Supplier Inc\";\n        this.SalesByRegion[\"North America\"] = 0;\n        this.SalesByRegion[\"Europe\"] = 0;\n        this.SalesByRegion[\"Asia\"] = 0;\n        \n        ProductIdGenerationService idService = new ProductIdGenerationService();\n        this.ProductId = idService.GenerateAdvancedProductId(this.Name, this.Category);\n    }\n}",
            "level": "HARD",
            "language": "CSHARP",
            "violation": "SRP",
            "description": "Product discount display system"
        }
    ]
}
