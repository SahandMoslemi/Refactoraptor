{
  "code_examples": [
    {
      "input": "public class Shape {\n    private String type;\n    \n    public Shape(String type) {\n        this.type = type;\n    }\n    \n    public String getType() {\n        return type;\n    }\n}\n\npublic class Rectangle extends Shape {\n    private double width;\n    private double height;\n    \n    public Rectangle(double width, double height) {\n        super(\"rectangle\");\n        this.width = width;\n        this.height = height;\n    }\n    \n    public double getWidth() {\n        return width;\n    }\n    \n    public double getHeight() {\n        return height;\n    }\n}\n\npublic class Circle extends Shape {\n    private double radius;\n    \n    public Circle(double radius) {\n        super(\"circle\");\n        this.radius = radius;\n    }\n    \n    public double getRadius() {\n        return radius;\n    }\n}\n\npublic class AreaCalculator {\n    public double calculateArea(Shape shape) {\n        if (shape.getType().equals(\"rectangle\")) {\n            Rectangle rectangle = (Rectangle) shape;\n            return rectangle.getWidth() * rectangle.getHeight();\n        } else if (shape.getType().equals(\"circle\")) {\n            Circle circle = (Circle) shape;\n            return Math.PI * circle.getRadius() * circle.getRadius();\n        }\n        return 0;\n    }\n}",
      "output": "public abstract class Shape {\n    public abstract double calculateArea();\n}\n\npublic class Rectangle extends Shape {\n    private double width;\n    private double height;\n    \n    public Rectangle(double width, double height) {\n        this.width = width;\n        this.height = height;\n    }\n    \n    @Override\n    public double calculateArea() {\n        return width * height;\n    }\n}\n\npublic class Circle extends Shape {\n    private double radius;\n    \n    public Circle(double radius) {\n        this.radius = radius;\n    }\n    \n    @Override\n    public double calculateArea() {\n        return Math.PI * radius * radius;\n    }\n}\n\npublic class AreaCalculator {\n    public double calculateArea(Shape shape) {\n        return shape.calculateArea();\n    }\n}",
      "level": "EASY",
      "language": "JAVA",
      "violation": "OCP",
      "description": "Shape area calculation system"
    },
    {
      "input": "public class Character {\n    private String type;\n    \n    public Character(String type) {\n        this.type = type;\n    }\n    \n    public String getType() {\n        return type;\n    }\n}\n\npublic class Warrior extends Character {\n    private int strength;\n    \n    public Warrior(int strength) {\n        super(\"warrior\");\n        this.strength = strength;\n    }\n    \n    public int getStrength() {\n        return strength;\n    }\n}\n\npublic class Mage extends Character {\n    private int mana;\n    \n    public Mage(int mana) {\n        super(\"mage\");\n        this.mana = mana;\n    }\n    \n    public int getMana() {\n        return mana;\n    }\n}\n\npublic class DamageCalculator {\n    public int calculateDamage(Character character) {\n        if (character.getType().equals(\"warrior\")) {\n            Warrior warrior = (Warrior) character;\n            return warrior.getStrength() * 2;\n        } else if (character.getType().equals(\"mage\")) {\n            Mage mage = (Mage) character;\n            return mage.getMana() * 3;\n        }\n        return 0;\n    }\n}",
      "output": "public abstract class Character {\n    public abstract int calculateDamage();\n}\n\npublic class Warrior extends Character {\n    private int strength;\n    \n    public Warrior(int strength) {\n        this.strength = strength;\n    }\n    \n    @Override\n    public int calculateDamage() {\n        return strength * 2;\n    }\n}\n\npublic class Mage extends Character {\n    private int mana;\n    \n    public Mage(int mana) {\n        this.mana = mana;\n    }\n    \n    @Override\n    public int calculateDamage() {\n        return mana * 3;\n    }\n}\n\npublic class DamageCalculator {\n    public int calculateDamage(Character character) {\n        return character.calculateDamage();\n    }\n}",
      "level": "EASY",
      "language": "JAVA",
      "violation": "OCP",
      "description": "Character damage calculation system"
    },
    {
      "input": "public class Animal {\n    private String type;\n    \n    public Animal(String type) {\n        this.type = type;\n    }\n    \n    public String getType() {\n        return type;\n    }\n}\n\npublic class Dog extends Animal {\n    public Dog() {\n        super(\"dog\");\n    }\n}\n\npublic class Cat extends Animal {\n    public Cat() {\n        super(\"cat\");\n    }\n}\n\npublic class SoundMaker {\n    public String makeSound(Animal animal) {\n        if (animal.getType().equals(\"dog\")) {\n            return \"Woof!\";\n        } else if (animal.getType().equals(\"cat\")) {\n            return \"Meow!\";\n        }\n        return \"...\";\n    }\n}",
      "output": "public abstract class Animal {\n    public abstract String makeSound();\n}\n\npublic class Dog extends Animal {\n    @Override\n    public String makeSound() {\n        return \"Woof!\";\n    }\n}\n\npublic class Cat extends Animal {\n    @Override\n    public String makeSound() {\n        return \"Meow!\";\n    }\n}\n\npublic class SoundMaker {\n    public String makeSound(Animal animal) {\n        return animal.makeSound();\n    }\n}",
      "level": "EASY",
      "language": "JAVA",
      "violation": "OCP",
      "description": "Animal sound generation system"
    },
    {
      "input": "public class Vehicle {\n    private String type;\n    \n    public Vehicle(String type) {\n        this.type = type;\n    }\n    \n    public String getType() {\n        return type;\n    }\n}\n\npublic class Car extends Vehicle {\n    private int horsePower;\n    \n    public Car(int horsePower) {\n        super(\"car\");\n        this.horsePower = horsePower;\n    }\n    \n    public int getHorsePower() {\n        return horsePower;\n    }\n}\n\npublic class Bicycle extends Vehicle {\n    private int gearCount;\n    \n    public Bicycle(int gearCount) {\n        super(\"bicycle\");\n        this.gearCount = gearCount;\n    }\n    \n    public int getGearCount() {\n        return gearCount;\n    }\n}\n\npublic class SpeedCalculator {\n    public double calculateMaxSpeed(Vehicle vehicle) {\n        if (vehicle.getType().equals(\"car\")) {\n            Car car = (Car) vehicle;\n            return car.getHorsePower() * 0.4;\n        } else if (vehicle.getType().equals(\"bicycle\")) {\n            Bicycle bicycle = (Bicycle) vehicle;\n            return bicycle.getGearCount() * 5.0;\n        }\n        return 0;\n    }\n}",
      "output": "public abstract class Vehicle {\n    public abstract double calculateMaxSpeed();\n}\n\npublic class Car extends Vehicle {\n    private int horsePower;\n    \n    public Car(int horsePower) {\n        this.horsePower = horsePower;\n    }\n    \n    @Override\n    public double calculateMaxSpeed() {\n        return horsePower * 0.4;\n    }\n}\n\npublic class Bicycle extends Vehicle {\n    private int gearCount;\n    \n    public Bicycle(int gearCount) {\n        this.gearCount = gearCount;\n    }\n    \n    @Override\n    public double calculateMaxSpeed() {\n        return gearCount * 5.0;\n    }\n}\n\npublic class SpeedCalculator {\n    public double calculateMaxSpeed(Vehicle vehicle) {\n        return vehicle.calculateMaxSpeed();\n    }\n}",
      "level": "EASY",
      "language": "JAVA",
      "violation": "OCP",
      "description": "Vehicle speed calculation system"
    },
    {
      "input": "public class PaymentProcessor {\n    public void processPayment(String paymentType, double amount) {\n        switch (paymentType) {\n            case \"creditCard\":\n                processCreditCardPayment(amount);\n                break;\n            case \"paypal\":\n                processPaypalPayment(amount);\n                break;\n            case \"bankTransfer\":\n                processBankTransferPayment(amount);\n                break;\n            default:\n                throw new IllegalArgumentException(\"Unsupported payment type\");\n        }\n    }\n    \n    private void processCreditCardPayment(double amount) {\n        System.out.println(\"Processing credit card payment of $\" + amount);\n        System.out.println(\"Validating credit card information\");\n        System.out.println(\"Charging credit card\");\n        System.out.println(\"Recording the credit card transaction\");\n    }\n    \n    private void processPaypalPayment(double amount) {\n        System.out.println(\"Processing PayPal payment of $\" + amount);\n        System.out.println(\"Redirecting user to PayPal\");\n        System.out.println(\"Confirming PayPal payment\");\n        System.out.println(\"Recording the PayPal transaction\");\n    }\n    \n    private void processBankTransferPayment(double amount) {\n        System.out.println(\"Processing bank transfer of $\" + amount);\n        System.out.println(\"Generating bank transfer instructions\");\n        System.out.println(\"Sending transfer confirmation email\");\n        System.out.println(\"Recording the bank transfer transaction\");\n    }\n}",
      "output": "public interface PaymentMethod {\n    void processPayment(double amount);\n}\n\npublic class CreditCardPayment implements PaymentMethod {\n    @Override\n    public void processPayment(double amount) {\n        System.out.println(\"Processing credit card payment of $\" + amount);\n        System.out.println(\"Validating credit card information\");\n        System.out.println(\"Charging credit card\");\n        System.out.println(\"Recording the credit card transaction\");\n    }\n}\n\npublic class PaypalPayment implements PaymentMethod {\n    @Override\n    public void processPayment(double amount) {\n        System.out.println(\"Processing PayPal payment of $\" + amount);\n        System.out.println(\"Redirecting user to PayPal\");\n        System.out.println(\"Confirming PayPal payment\");\n        System.out.println(\"Recording the PayPal transaction\");\n    }\n}\n\npublic class BankTransferPayment implements PaymentMethod {\n    @Override\n    public void processPayment(double amount) {\n        System.out.println(\"Processing bank transfer of $\" + amount);\n        System.out.println(\"Generating bank transfer instructions\");\n        System.out.println(\"Sending transfer confirmation email\");\n        System.out.println(\"Recording the bank transfer transaction\");\n    }\n}\n\npublic class PaymentProcessor {\n    public void processPayment(PaymentMethod paymentMethod, double amount) {\n        paymentMethod.processPayment(amount);\n    }\n}",
      "level": "MODERATE",
      "language": "JAVA",
      "violation": "OCP",
      "description": "Payment processing system"
    },
    {
      "input": "public class CustomerService {\n    private CustomerRepository repository;\n    private EmailService emailService;\n    \n    public CustomerService(CustomerRepository repository, EmailService emailService) {\n        this.repository = repository;\n        this.emailService = emailService;\n    }\n    \n    public Customer registerCustomer(String name, String email, String customerType) {\n        validateCustomerData(name, email);\n        \n        Customer customer = new Customer(name, email);\n        repository.save(customer);\n        \n        sendWelcomeEmail(customer, customerType);\n        \n        return customer;\n    }\n    \n    private void validateCustomerData(String name, String email) {\n        if (name == null || name.trim().isEmpty()) {\n            throw new IllegalArgumentException(\"Name cannot be empty\");\n        }\n        \n        if (email == null || !email.matches(\"^[A-Za-z0-9+_.-]+@(.+)$\")) {\n            throw new IllegalArgumentException(\"Invalid email format\");\n        }\n        \n        if (repository.findByEmail(email) != null) {\n            throw new IllegalArgumentException(\"Email already registered\");\n        }\n    }\n    \n    private void sendWelcomeEmail(Customer customer, String customerType) {\n        String subject = \"Welcome to Our Service\";\n        String body;\n        \n        if (customerType.equals(\"standard\")) {\n            body = \"Dear \" + customer.getName() + \",\\n\\n\" +\n                  \"Welcome to our service! We're excited to have you join us.\\n\\n\" +\n                  \"Your account has been created successfully. You can now access all standard features.\\n\\n\" +\n                  \"Best regards,\\n\" +\n                  \"The Service Team\";\n        } else if (customerType.equals(\"premium\")) {\n            body = \"Dear \" + customer.getName() + \",\\n\\n\" +\n                  \"Welcome to our PREMIUM service! We're thrilled to have you as a premium member.\\n\\n\" +\n                  \"Your premium account has been activated with all exclusive features.\\n\" +\n                  \"Our premium support team is available 24/7 to assist you.\\n\\n\" +\n                  \"Best regards,\\n\" +\n                  \"The Premium Service Team\";\n        } else if (customerType.equals(\"trial\")) {\n            body = \"Dear \" + customer.getName() + \",\\n\\n\" +\n                  \"Thank you for trying our service! Your 30-day trial has begun.\\n\\n\" +\n                  \"Explore all the features we offer during your trial period.\\n\" +\n                  \"We'll send you a reminder before your trial expires.\\n\\n\" +\n                  \"Best regards,\\n\" +\n                  \"The Service Team\";\n        } else {\n            throw new IllegalArgumentException(\"Unsupported customer type: \" + customerType);\n        }\n        \n        emailService.sendEmail(customer.getEmail(), subject, body);\n    }\n}\n\npublic class Customer {\n    private String name;\n    private String email;\n    \n    public Customer(String name, String email) {\n        this.name = name;\n        this.email = email;\n    }\n    \n    public String getName() {\n        return name;\n    }\n    \n    public String getEmail() {\n        return email;\n    }\n}\n\npublic interface CustomerRepository {\n    void save(Customer customer);\n    Customer findByEmail(String email);\n}\n\npublic interface EmailService {\n    void sendEmail(String to, String subject, String body);\n}",
      "output": "public class CustomerService {\n    private CustomerRepository repository;\n    private EmailService emailService;\n    private Map<String, WelcomeEmailStrategy> emailStrategies;\n    \n    public CustomerService(CustomerRepository repository, EmailService emailService) {\n        this.repository = repository;\n        this.emailService = emailService;\n        initializeEmailStrategies();\n    }\n    \n    private void initializeEmailStrategies() {\n        emailStrategies = new HashMap<>();\n        emailStrategies.put(\"standard\", new StandardWelcomeEmailStrategy());\n        emailStrategies.put(\"premium\", new PremiumWelcomeEmailStrategy());\n        emailStrategies.put(\"trial\", new TrialWelcomeEmailStrategy());\n    }\n    \n    public void registerEmailStrategy(String customerType, WelcomeEmailStrategy strategy) {\n        emailStrategies.put(customerType, strategy);\n    }\n    \n    public Customer registerCustomer(String name, String email, String customerType) {\n        validateCustomerData(name, email);\n        \n        Customer customer = new Customer(name, email);\n        repository.save(customer);\n        \n        // Send welcome email based on customer type\n        sendWelcomeEmail(customer, customerType);\n        \n        return customer;\n    }\n    \n    private void validateCustomerData(String name, String email) {\n        if (name == null || name.trim().isEmpty()) {\n            throw new IllegalArgumentException(\"Name cannot be empty\");\n        }\n        \n        if (email == null || !email.matches(\"^[A-Za-z0-9+_.-]+@(.+)$\")) {\n            throw new IllegalArgumentException(\"Invalid email format\");\n        }\n        \n        if (repository.findByEmail(email) != null) {\n            throw new IllegalArgumentException(\"Email already registered\");\n        }\n    }\n    \n    private void sendWelcomeEmail(Customer customer, String customerType) {\n        WelcomeEmailStrategy strategy = emailStrategies.get(customerType);\n        if (strategy == null) {\n            throw new IllegalArgumentException(\"Unsupported customer type: \" + customerType);\n        }\n        \n        String subject = \"Welcome to Our Service\";\n        String body = strategy.createEmailBody(customer);\n        \n        emailService.sendEmail(customer.getEmail(), subject, body);\n    }\n}\n\npublic interface WelcomeEmailStrategy {\n    String createEmailBody(Customer customer);\n}\n\npublic class StandardWelcomeEmailStrategy implements WelcomeEmailStrategy {\n    @Override\n    public String createEmailBody(Customer customer) {\n        return \"Dear \" + customer.getName() + \",\\n\\n\" +\n              \"Welcome to our service! We're excited to have you join us.\\n\\n\" +\n              \"Your account has been created successfully. You can now access all standard features.\\n\\n\" +\n              \"Best regards,\\n\" +\n              \"The Service Team\";\n    }\n}\n\npublic class PremiumWelcomeEmailStrategy implements WelcomeEmailStrategy {\n    @Override\n    public String createEmailBody(Customer customer) {\n        return \"Dear \" + customer.getName() + \",\\n\\n\" +\n              \"Welcome to our PREMIUM service! We're thrilled to have you as a premium member.\\n\\n\" +\n              \"Your premium account has been activated with all exclusive features.\\n\" +\n              \"Our premium support team is available 24/7 to assist you.\\n\\n\" +\n              \"Best regards,\\n\" +\n              \"The Premium Service Team\";\n    }\n}\n\npublic class TrialWelcomeEmailStrategy implements WelcomeEmailStrategy {\n    @Override\n    public String createEmailBody(Customer customer) {\n        return \"Dear \" + customer.getName() + \",\\n\\n\" +\n              \"Thank you for trying our service! Your 30-day trial has begun.\\n\\n\" +\n              \"Explore all the features we offer during your trial period.\\n\" +\n              \"We'll send you a reminder before your trial expires.\\n\\n\" +\n              \"Best regards,\\n\" +\n              \"The Service Team\";\n    }\n}\n\npublic class Customer {\n    private String name;\n    private String email;\n    \n    public Customer(String name, String email) {\n        this.name = name;\n        this.email = email;\n    }\n    \n    public String getName() {\n        return name;\n    }\n    \n    public String getEmail() {\n        return email;\n    }\n}\n\npublic interface CustomerRepository {\n    void save(Customer customer);\n    Customer findByEmail(String email);\n}\n\npublic interface EmailService {\n    void sendEmail(String to, String subject, String body);\n}",
      "level": "MODERATE",
      "language": "JAVA",
      "violation": "OCP",
      "description": "Customer registration email system"
    },
    {
      "input": "public class DocumentService {\n    private DocumentRepository repository;\n    private SecurityService securityService;\n    private Logger logger;\n    \n    public DocumentService(DocumentRepository repository, SecurityService securityService, Logger logger) {\n        this.repository = repository;\n        this.securityService = securityService;\n        this.logger = logger;\n    }\n    \n    public Document createDocument(String title, String content, User creator) {\n        Document document = new Document(title, content, creator);\n        repository.save(document);\n        logger.log(\"Document created: \" + document.getId());\n        return document;\n    }\n    \n    public void shareDocument(Document document, User recipient, User sharedBy) {\n        validateSharingPermissions(document, sharedBy);\n        document.addSharedUser(recipient);\n        repository.update(document);\n        logger.log(\"Document \" + document.getId() + \" shared with \" + recipient.getUsername());\n        notifyUser(document, recipient, sharedBy);\n    }\n    \n    private void validateSharingPermissions(Document document, User user) {\n        if (!securityService.canShareDocument(document, user)) {\n            throw new SecurityException(\"User does not have permission to share this document\");\n        }\n    }\n    \n    private void notifyUser(Document document, User recipient, User sharedBy) {\n        String recipientContact = recipient.getContactInfo();\n        String message = \"Document '\" + document.getTitle() + \"' has been shared with you by \" + sharedBy.getUsername();\n        \n        String contactType = recipient.getPreferredContactMethod();\n        \n        if (contactType.equals(\"email\")) {\n            sendEmail(recipientContact, \"Document Shared\", message);\n        } else if (contactType.equals(\"sms\")) {\n            sendSMS(recipientContact, message);\n        } else if (contactType.equals(\"push\")) {\n            sendPushNotification(recipientContact, \"Document Shared\", message);\n        } else if (contactType.equals(\"slack\")) {\n            sendSlackMessage(recipientContact, message);\n        } else {\n            logger.log(\"Unknown contact method: \" + contactType);\n        }\n    }\n    \n    private void sendEmail(String email, String subject, String message) {\n        System.out.println(\"Sending email to \" + email);\n        System.out.println(\"Subject: \" + subject);\n        System.out.println(\"Message: \" + message);\n    }\n    \n    private void sendSMS(String phoneNumber, String message) {\n        System.out.println(\"Sending SMS to \" + phoneNumber);\n        System.out.println(\"Message: \" + message);\n    }\n    \n    private void sendPushNotification(String deviceId, String title, String message) {\n        System.out.println(\"Sending push notification to device \" + deviceId);\n        System.out.println(\"Title: \" + title);\n        System.out.println(\"Message: \" + message);\n    }\n    \n    private void sendSlackMessage(String slackUserId, String message) {\n        System.out.println(\"Sending Slack message to \" + slackUserId);\n        System.out.println(\"Message: \" + message);\n    }\n}\n\npublic class Document {\n    private String id;\n    private String title;\n    private String content;\n    private User creator;\n    private Set<User> sharedUsers;\n    \n    public Document(String title, String content, User creator) {\n        this.id = UUID.randomUUID().toString();\n        this.title = title;\n        this.content = content;\n        this.creator = creator;\n        this.sharedUsers = new HashSet<>();\n    }\n    \n    public String getId() {\n        return id;\n    }\n    \n    public String getTitle() {\n        return title;\n    }\n    \n    public String getContent() {\n        return content;\n    }\n    \n    public User getCreator() {\n        return creator;\n    }\n    \n    public Set<User> getSharedUsers() {\n        return sharedUsers;\n    }\n    \n    public void addSharedUser(User user) {\n        sharedUsers.add(user);\n    }\n}\n\npublic class User {\n    private String id;\n    private String username;\n    private String contactInfo;\n    private String preferredContactMethod;\n    \n    public User(String username, String contactInfo, String preferredContactMethod) {\n        this.id = UUID.randomUUID().toString();\n        this.username = username;\n        this.contactInfo = contactInfo;\n        this.preferredContactMethod = preferredContactMethod;\n    }\n    \n    public String getId() {\n        return id;\n    }\n    \n    public String getUsername() {\n        return username;\n    }\n    \n    public String getContactInfo() {\n        return contactInfo;\n    }\n    \n    public String getPreferredContactMethod() {\n        return preferredContactMethod;\n    }\n}\n\npublic interface DocumentRepository {\n    void save(Document document);\n    void update(Document document);\n    Document findById(String id);\n}\n\npublic interface SecurityService {\n    boolean canShareDocument(Document document, User user);\n}\n\npublic interface Logger {\n    void log(String message);\n}",
      "output": "public class DocumentService {\n    private DocumentRepository repository;\n    private SecurityService securityService;\n    private Logger logger;\n    private Map<String, NotificationStrategy> notificationStrategies;\n    \n    public DocumentService(DocumentRepository repository, SecurityService securityService, Logger logger) {\n        this.repository = repository;\n        this.securityService = securityService;\n        this.logger = logger;\n        initializeNotificationStrategies();\n    }\n    \n    private void initializeNotificationStrategies() {\n        notificationStrategies = new HashMap<>();\n        notificationStrategies.put(\"email\", new EmailNotificationStrategy());\n        notificationStrategies.put(\"sms\", new SMSNotificationStrategy());\n        notificationStrategies.put(\"push\", new PushNotificationStrategy());\n        notificationStrategies.put(\"slack\", new SlackNotificationStrategy());\n    }\n    \n    public void registerNotificationStrategy(String type, NotificationStrategy strategy) {\n        notificationStrategies.put(type, strategy);\n    }\n    \n    public Document createDocument(String title, String content, User creator) {\n        Document document = new Document(title, content, creator);\n        repository.save(document);\n        logger.log(\"Document created: \" + document.getId());\n        return document;\n    }\n    \n    public void shareDocument(Document document, User recipient, User sharedBy) {\n        validateSharingPermissions(document, sharedBy);\n        document.addSharedUser(recipient);\n        repository.update(document);\n        logger.log(\"Document \" + document.getId() + \" shared with \" + recipient.getUsername());\n        notifyUser(document, recipient, sharedBy);\n    }\n    \n    private void validateSharingPermissions(Document document, User user) {\n        if (!securityService.canShareDocument(document, user)) {\n            throw new SecurityException(\"User does not have permission to share this document\");\n        }\n    }\n    \n    private void notifyUser(Document document, User recipient, User sharedBy) {\n        String recipientContact = recipient.getContactInfo();\n        String message = \"Document '\" + document.getTitle() + \"' has been shared with you by \" + sharedBy.getUsername();\n        \n        // Notification logic based on recipient's preferred contact method\n        String contactType = recipient.getPreferredContactMethod();\n        NotificationStrategy strategy = notificationStrategies.get(contactType);\n        \n        if (strategy != null) {\n            strategy.sendNotification(recipientContact, \"Document Shared\", message);\n        } else {\n            logger.log(\"Unknown contact method: \" + contactType);\n        }\n    }\n}\n\npublic interface NotificationStrategy {\n    void sendNotification(String contactInfo, String subject, String message);\n}\n\npublic class EmailNotificationStrategy implements NotificationStrategy {\n    @Override\n    public void sendNotification(String email, String subject, String message) {\n        System.out.println(\"Sending email to \" + email);\n        System.out.println(\"Subject: \" + subject);\n        System.out.println(\"Message: \" + message);\n        // Email sending logic would go here\n    }\n}\n\npublic class SMSNotificationStrategy implements NotificationStrategy {\n    @Override\n    public void sendNotification(String phoneNumber, String subject, String message) {\n        System.out.println(\"Sending SMS to \" + phoneNumber);\n        System.out.println(\"Message: \" + message);\n        // SMS sending logic would go here\n    }\n}\n\npublic class PushNotificationStrategy implements NotificationStrategy {\n    @Override\n    public void sendNotification(String deviceId, String subject, String message) {\n        System.out.println(\"Sending push notification to device \" + deviceId);\n        System.out.println(\"Title: \" + subject);\n        System.out.println(\"Message: \" + message);\n        // Push notification logic would go here\n    }\n}\n\npublic class SlackNotificationStrategy implements NotificationStrategy {\n    @Override\n    public void sendNotification(String slackUserId, String subject, String message) {\n        System.out.println(\"Sending Slack message to \" + slackUserId);\n        System.out.println(\"Message: \" + message);\n        // Slack messaging logic would go here\n    }\n}\n\npublic class Document {\n    private String id;\n    private String title;\n    private String content;\n    private User creator;\n    private Set<User> sharedUsers;\n    \n    public Document(String title, String content, User creator) {\n        this.id = UUID.randomUUID().toString();\n        this.title = title;\n        this.content = content;\n        this.creator = creator;\n        this.sharedUsers = new HashSet<>();\n    }\n    \n    public String getId() {\n        return id;\n    }\n    \n    public String getTitle() {\n        return title;\n    }\n    \n    public String getContent() {\n        return content;\n    }\n    \n    public User getCreator() {\n        return creator;\n    }\n    \n    public Set<User> getSharedUsers() {\n        return sharedUsers;\n    }\n    \n    public void addSharedUser(User user) {\n        sharedUsers.add(user);\n    }\n}\n\npublic class User {\n    private String id;\n    private String username;\n    private String contactInfo;\n    private String preferredContactMethod;\n    \n    public User(String username, String contactInfo, String preferredContactMethod) {\n        this.id = UUID.randomUUID().toString();\n        this.username = username;\n        this.contactInfo = contactInfo;\n        this.preferredContactMethod = preferredContactMethod;\n    }\n    \n    public String getId() {\n        return id;\n    }\n    \n    public String getUsername() {\n        return username;\n    }\n    \n    public String getContactInfo() {\n        return contactInfo;\n    }\n    \n    public String getPreferredContactMethod() {\n        return preferredContactMethod;\n    }\n}\n\npublic interface DocumentRepository {\n    void save(Document document);\n    void update(Document document);\n    Document findById(String id);\n}\n\npublic interface SecurityService {\n    boolean canShareDocument(Document document, User user);\n}\n\npublic interface Logger {\n    void log(String message);\n}",
      "level": "MODERATE",
      "language": "JAVA",
      "violation": "OCP",

      "description": "Document sharing notification system"
    },
    {
      "input": "public class ReportExporter {\n    private DataSource dataSource;\n    private FileSystem fileSystem;\n    \n    public ReportExporter(DataSource dataSource, FileSystem fileSystem) {\n        this.dataSource = dataSource;\n        this.fileSystem = fileSystem;\n    }\n    \n    public ExportResult exportReport(String reportId, String exportFormat, String destination) {\n        Report report = dataSource.getReport(reportId);\n        \n        if (report == null) {\n            return new ExportResult(false, \"Report not found\", null);\n        }\n        \n        byte[] reportData = generateReportData(report, exportFormat);\n        if (reportData == null) {\n            return new ExportResult(false, \"Failed to generate report\", null);\n        }\n        \n        String fileName = report.getTitle() + getFileExtension(exportFormat);\n        fileSystem.writeFile(destination + \"/\" + fileName, reportData);\n        return new ExportResult(true, \"Report exported successfully\", destination + \"/\" + fileName);\n    }\n    \n    private byte[] generateReportData(Report report, String exportFormat) {\n        try {\n            ReportData data = dataSource.getReportData(report.getId());\n            \n            if (exportFormat.equals(\"pdf\")) {\n                PdfDocument document = new PdfDocument();\n                return document.generate();\n                \n            } else if (exportFormat.equals(\"excel\")) {\n                ExcelDocument document = new ExcelDocument();\n                return document.generate();\n                \n            } else if (exportFormat.equals(\"html\")) {\n                StringBuilder html = new StringBuilder();\n                return html.toString().getBytes();\n                \n            } else if (exportFormat.equals(\"csv\")) {\n                StringBuilder csv = new StringBuilder();\n                return csv.toString().getBytes();\n            }\n            \n        } catch (Exception e) {\n            return null;\n        }\n        return null;\n    }\n    \n    private String getFileExtension(String format) {\n        if (format.equals(\"pdf\")) return \".pdf\";\n        else if (format.equals(\"excel\")) return \".xlsx\";\n        else if (format.equals(\"html\")) return \".html\";\n        else if (format.equals(\"csv\")) return \".csv\";\n        else return \".txt\";\n    }\n}\n\npublic class ExportResult {\n    private boolean success;\n    private String message;\n    private String outputPath;\n    \n    public ExportResult(boolean success, String message, String outputPath) {\n        this.success = success;\n        this.message = message;\n        this.outputPath = outputPath;\n    }\n}\n\npublic interface DataSource {\n    Report getReport(String reportId);\n    ReportData getReportData(String reportId);\n}\n\npublic interface FileSystem {\n    boolean writeFile(String path, byte[] data);\n}\n\npublic class Report {\n    private String id;\n    private String title;\n    \n    public String getId() { return id; }\n    public String getTitle() { return title; }\n}\n\npublic class ReportData {\n}\n\npublic class PdfDocument {\n    public byte[] generate() { return new byte[0]; }\n}\n\npublic class ExcelDocument {\n    public byte[] generate() { return new byte[0]; }\n}",
      "output": "public class ReportExporter {\n    private DataSource dataSource;\n    private FileSystem fileSystem;\n    private Map<String, ExportFormatStrategy> exportStrategies;\n    \n    public ReportExporter(DataSource dataSource, FileSystem fileSystem) {\n        this.dataSource = dataSource;\n        this.fileSystem = fileSystem;\n        initializeExportStrategies();\n    }\n    \n    private void initializeExportStrategies() {\n        exportStrategies = new HashMap<>();\n        exportStrategies.put(\"pdf\", new PdfExportStrategy());\n        exportStrategies.put(\"excel\", new ExcelExportStrategy());\n        exportStrategies.put(\"html\", new HtmlExportStrategy());\n        exportStrategies.put(\"csv\", new CsvExportStrategy());\n    }\n    \n    public void registerExportStrategy(String format, ExportFormatStrategy strategy) {\n        exportStrategies.put(format, strategy);\n    }\n    \n    public ExportResult exportReport(String reportId, String exportFormat, String destination) {\n        Report report = dataSource.getReport(reportId);\n        \n        if (report == null) {\n            return new ExportResult(false, \"Report not found\", null);\n        }\n        \n        byte[] reportData = generateReportData(report, exportFormat);\n        if (reportData == null) {\n            return new ExportResult(false, \"Failed to generate report\", null);\n        }\n        \n        String fileName = report.getTitle() + getFileExtension(exportFormat);\n        fileSystem.writeFile(destination + \"/\" + fileName, reportData);\n        return new ExportResult(true, \"Report exported successfully\", destination + \"/\" + fileName);\n    }\n    \n    private byte[] generateReportData(Report report, String exportFormat) {\n        try {\n            ReportData data = dataSource.getReportData(report.getId());\n            ExportFormatStrategy strategy = exportStrategies.get(exportFormat);\n            \n            if (strategy != null) {\n                return strategy.generateReport(report, data);\n            }\n        } catch (Exception e) {\n            return null;\n        }\n        return null;\n    }\n    \n    private String getFileExtension(String format) {\n        ExportFormatStrategy strategy = exportStrategies.get(format);\n        return strategy != null ? strategy.getFileExtension() : \".txt\";\n    }\n}\n\npublic interface ExportFormatStrategy {\n    byte[] generateReport(Report report, ReportData data) throws Exception;\n    String getFileExtension();\n}\n\npublic class PdfExportStrategy implements ExportFormatStrategy {\n    @Override\n    public byte[] generateReport(Report report, ReportData data) throws Exception {\n        PdfDocument document = new PdfDocument();\n        return document.generate();\n    }\n    \n    @Override\n    public String getFileExtension() {\n        return \".pdf\";\n    }\n}\n\npublic class ExcelExportStrategy implements ExportFormatStrategy {\n    @Override\n    public byte[] generateReport(Report report, ReportData data) throws Exception {\n        ExcelDocument document = new ExcelDocument();\n        return document.generate();\n    }\n    \n    @Override\n    public String getFileExtension() {\n        return \".xlsx\";\n    }\n}\n\npublic class HtmlExportStrategy implements ExportFormatStrategy {\n    @Override\n    public byte[] generateReport(Report report, ReportData data) throws Exception {\n        StringBuilder html = new StringBuilder();\n        return html.toString().getBytes();\n    }\n    \n    @Override\n    public String getFileExtension() {\n        return \".html\";\n    }\n}\n\npublic class CsvExportStrategy implements ExportFormatStrategy {\n    @Override\n    public byte[] generateReport(Report report, ReportData data) throws Exception {\n        StringBuilder csv = new StringBuilder();\n        return csv.toString().getBytes();\n    }\n    \n    @Override\n    public String getFileExtension() {\n        return \".csv\";\n    }\n}\n\npublic class ExportResult {\n    private boolean success;\n    private String message;\n    private String outputPath;\n    \n    public ExportResult(boolean success, String message, String outputPath) {\n        this.success = success;\n        this.message = message;\n        this.outputPath = outputPath;\n    }\n}\n\npublic interface DataSource {\n    Report getReport(String reportId);\n    ReportData getReportData(String reportId);\n}\n\npublic interface FileSystem {\n    boolean writeFile(String path, byte[] data);\n}\n\npublic class Report {\n    private String id;\n    private String title;\n    \n    public String getId() { return id; }\n    public String getTitle() { return title; }\n}\n\npublic class ReportData {\n}\n\npublic class PdfDocument {\n    public byte[] generate() { return new byte[0]; }\n}\n\npublic class ExcelDocument {\n    public byte[] generate() { return new byte[0]; }\n}",
      "level": "MODERATE",
      "language": "JAVA",
      "violation": "OCP",
      "description": "Report export format system"
    },
    {
      "input": "import java.util.*;\nimport java.text.SimpleDateFormat;\nimport java.text.DecimalFormat;\nimport java.util.stream.Collectors;\n\npublic class SalesData {\n    private List<Sale> sales;\n    private String companyName;\n    private String reportingPeriod;\n    \n    public SalesData(List<Sale> sales, String companyName, String reportingPeriod) {\n        this.sales = sales;\n        this.companyName = companyName;\n        this.reportingPeriod = reportingPeriod;\n    }\n    \n    public List<Sale> getSales() {\n        return sales;\n    }\n    \n    public String getCompanyName() {\n        return companyName;\n    }\n    \n    public String getReportingPeriod() {\n        return reportingPeriod;\n    }\n    \n    public void addSale(Sale sale) {\n        this.sales.add(sale);\n    }\n    \n    public List<Sale> getSalesByRegion(String region) {\n        return sales.stream()\n                .filter(sale -> sale.getRegion().equals(region))\n                .collect(Collectors.toList());\n    }\n}\n\npublic class Sale {\n    private String productName;\n    private String productCategory;\n    private double amount;\n    private int quantity;\n    private Date date;\n    private String region;\n    private String salesPerson;\n    private String customerId;\n    private double discount;\n    \n    public Sale(String productName, String productCategory, double amount, int quantity, \n                Date date, String region, String salesPerson, String customerId, double discount) {\n        this.productName = productName;\n        this.productCategory = productCategory;\n        this.amount = amount;\n        this.quantity = quantity;\n        this.date = date;\n        this.region = region;\n        this.salesPerson = salesPerson;\n        this.customerId = customerId;\n        this.discount = discount;\n    }\n    \n    public String getProductName() {\n        return productName;\n    }\n    \n    public String getProductCategory() {\n        return productCategory;\n    }\n    \n    public double getAmount() {\n        return amount;\n    }\n    \n    public int getQuantity() {\n        return quantity;\n    }\n    \n    public Date getDate() {\n        return date;\n    }\n    \n    public String getRegion() {\n        return region;\n    }\n    \n    public String getSalesPerson() {\n        return salesPerson;\n    }\n    \n    public String getCustomerId() {\n        return customerId;\n    }\n    \n    public double getDiscount() {\n        return discount;\n    }\n    \n    public double getNetAmount() {\n        return amount - discount;\n    }\n}\n\npublic class ReportGenerator {\n    private DecimalFormat currencyFormat = new DecimalFormat(\"$#,##0.00\");\n    private SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd\");\n    \n    public String generateReport(String reportType, SalesData data) {\n        StringBuilder report = new StringBuilder();\n        \n        // Add header\n        report.append(\"===================================\\n\");\n        report.append(\"    \").append(data.getCompanyName()).append(\"\\n\");\n        report.append(\"  Reporting Period: \").append(data.getReportingPeriod()).append(\"\\n\");\n        report.append(\"===================================\\n\\n\");\n        \n        if (reportType.equals(\"daily\")) {\n            report.append(\"DAILY SALES REPORT\\n\");\n            report.append(\"===================\\n\\n\");\n            \n            Map<String, Double> dailySales = new HashMap<>();\n            Map<String, Integer> dailyQuantities = new HashMap<>();\n            \n            for (Sale sale : data.getSales()) {\n                String dateStr = dateFormat.format(sale.getDate());\n                dailySales.put(dateStr, dailySales.getOrDefault(dateStr, 0.0) + sale.getNetAmount());\n                dailyQuantities.put(dateStr, dailyQuantities.getOrDefault(dateStr, 0) + sale.getQuantity());\n            }\n            \n            for (Map.Entry<String, Double> entry : dailySales.entrySet()) {\n                String date = entry.getKey();\n                report.append(\"Date: \").append(date)\n                      .append(\", Total Sales: \").append(currencyFormat.format(entry.getValue()))\n                      .append(\", Units Sold: \").append(dailyQuantities.get(date))\n                      .append(\"\\n\");\n            }\n            \n            double total = dailySales.values().stream().mapToDouble(Double::doubleValue).sum();\n            int totalUnits = dailyQuantities.values().stream().mapToInt(Integer::intValue).sum();\n            report.append(\"\\nGrand Total: \").append(currencyFormat.format(total));\n            report.append(\"\\nTotal Units: \").append(totalUnits);\n            report.append(\"\\nAverage Daily Sales: \").append(currencyFormat.format(total / dailySales.size()));\n            \n        } else if (reportType.equals(\"product\")) {\n            report.append(\"PRODUCT SALES REPORT\\n\");\n            report.append(\"====================\\n\\n\");\n            \n            Map<String, Double> productSales = new HashMap<>();\n            Map<String, Integer> productQuantities = new HashMap<>();\n            Map<String, String> productCategories = new HashMap<>();\n            \n            for (Sale sale : data.getSales()) {\n                String product = sale.getProductName();\n                productSales.put(product, productSales.getOrDefault(product, 0.0) + sale.getNetAmount());\n                productQuantities.put(product, productQuantities.getOrDefault(product, 0) + sale.getQuantity());\n                productCategories.put(product, sale.getProductCategory());\n            }\n            \n            // Sort by sales amount descending\n            List<Map.Entry<String, Double>> sortedProducts = new ArrayList<>(productSales.entrySet());\n            sortedProducts.sort(Map.Entry.<String, Double>comparingByValue().reversed());\n            \n            for (Map.Entry<String, Double> entry : sortedProducts) {\n                String product = entry.getKey();\n                report.append(\"Product: \").append(product)\n                      .append(\" (Category: \").append(productCategories.get(product)).append(\")\")\n                      .append(\"\\n  Sales: \").append(currencyFormat.format(entry.getValue()))\n                      .append(\", Units: \").append(productQuantities.get(product))\n                      .append(\", Avg Price: \").append(currencyFormat.format(entry.getValue() / productQuantities.get(product)))\n                      .append(\"\\n\\n\");\n            }\n            \n            double total = productSales.values().stream().mapToDouble(Double::doubleValue).sum();\n            report.append(\"Total Product Sales: \").append(currencyFormat.format(total));\n            \n        } else if (reportType.equals(\"regional\")) {\n            report.append(\"REGIONAL SALES REPORT\\n\");\n            report.append(\"=====================\\n\\n\");\n            \n            Map<String, Double> regionalSales = new HashMap<>();\n            Map<String, Set<String>> regionalCustomers = new HashMap<>();\n            Map<String, Set<String>> regionalSalespeople = new HashMap<>();\n            \n            for (Sale sale : data.getSales()) {\n                String region = sale.getRegion();\n                regionalSales.put(region, regionalSales.getOrDefault(region, 0.0) + sale.getNetAmount());\n                \n                regionalCustomers.computeIfAbsent(region, k -> new HashSet<>()).add(sale.getCustomerId());\n                regionalSalespeople.computeIfAbsent(region, k -> new HashSet<>()).add(sale.getSalesPerson());\n            }\n            \n            for (Map.Entry<String, Double> entry : regionalSales.entrySet()) {\n                String region = entry.getKey();\n                report.append(\"Region: \").append(region)\n                      .append(\"\\n  Total Sales: \").append(currencyFormat.format(entry.getValue()))\n                      .append(\"\\n  Unique Customers: \").append(regionalCustomers.get(region).size())\n                      .append(\"\\n  Sales Team Size: \").append(regionalSalespeople.get(region).size())\n                      .append(\"\\n  Avg Sales per Customer: \")\n                      .append(currencyFormat.format(entry.getValue() / regionalCustomers.get(region).size()))\n                      .append(\"\\n\\n\");\n            }\n            \n            double total = regionalSales.values().stream().mapToDouble(Double::doubleValue).sum();\n            report.append(\"Total Regional Sales: \").append(currencyFormat.format(total));\n            \n        } else if (reportType.equals(\"salesperson\")) {\n            report.append(\"SALESPERSON PERFORMANCE REPORT\\n\");\n            report.append(\"==============================\\n\\n\");\n            \n            Map<String, Double> salespersonSales = new HashMap<>();\n            Map<String, Set<String>> salespersonCustomers = new HashMap<>();\n            Map<String, String> salespersonRegions = new HashMap<>();\n            \n            for (Sale sale : data.getSales()) {\n                String salesperson = sale.getSalesPerson();\n                salespersonSales.put(salesperson, salespersonSales.getOrDefault(salesperson, 0.0) + sale.getNetAmount());\n                salespersonCustomers.computeIfAbsent(salesperson, k -> new HashSet<>()).add(sale.getCustomerId());\n                salespersonRegions.put(salesperson, sale.getRegion());\n            }\n            \n            // Sort by performance\n            List<Map.Entry<String, Double>> sortedSalespeople = new ArrayList<>(salespersonSales.entrySet());\n            sortedSalespeople.sort(Map.Entry.<String, Double>comparingByValue().reversed());\n            \n            int rank = 1;\n            for (Map.Entry<String, Double> entry : sortedSalespeople) {\n                String salesperson = entry.getKey();\n                report.append(\"#\").append(rank++).append(\" \").append(salesperson)\n                      .append(\" (Region: \").append(salespersonRegions.get(salesperson)).append(\")\")\n                      .append(\"\\n  Total Sales: \").append(currencyFormat.format(entry.getValue()))\n                      .append(\"\\n  Customers Served: \").append(salespersonCustomers.get(salesperson).size())\n                      .append(\"\\n  Avg Sale per Customer: \")\n                      .append(currencyFormat.format(entry.getValue() / salespersonCustomers.get(salesperson).size()))\n                      .append(\"\\n\\n\");\n            }\n            \n        } else if (reportType.equals(\"category\")) {\n            report.append(\"CATEGORY ANALYSIS REPORT\\n\");\n            report.append(\"========================\\n\\n\");\n            \n            Map<String, Double> categorySales = new HashMap<>();\n            Map<String, Integer> categoryQuantities = new HashMap<>();\n            Map<String, Set<String>> categoryProducts = new HashMap<>();\n            \n            for (Sale sale : data.getSales()) {\n                String category = sale.getProductCategory();\n                categorySales.put(category, categorySales.getOrDefault(category, 0.0) + sale.getNetAmount());\n                categoryQuantities.put(category, categoryQuantities.getOrDefault(category, 0) + sale.getQuantity());\n                categoryProducts.computeIfAbsent(category, k -> new HashSet<>()).add(sale.getProductName());\n            }\n            \n            double totalSales = categorySales.values().stream().mapToDouble(Double::doubleValue).sum();\n            \n            for (Map.Entry<String, Double> entry : categorySales.entrySet()) {\n                String category = entry.getKey();\n                double categoryTotal = entry.getValue();\n                double percentage = (categoryTotal / totalSales) * 100;\n                \n                report.append(\"Category: \").append(category)\n                      .append(\"\\n  Sales: \").append(currencyFormat.format(categoryTotal))\n                      .append(\" (\").append(String.format(\"%.1f\", percentage)).append(\"% of total)\")\n                      .append(\"\\n  Units Sold: \").append(categoryQuantities.get(category))\n                      .append(\"\\n  Product Variety: \").append(categoryProducts.get(category).size()).append(\" products\")\n                      .append(\"\\n\\n\");\n            }\n        }\n        \n        // Add footer\n        report.append(\"\\n\\n===================================\\n\");\n        report.append(\"Report Generated: \").append(new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(new Date()));\n        report.append(\"\\n===================================\\n\");\n        \n        return report.toString();\n    }\n    \n    public String generateSummaryReport(SalesData data) {\n        StringBuilder summary = new StringBuilder();\n        summary.append(\"EXECUTIVE SUMMARY\\n\");\n        summary.append(\"=================\\n\\n\");\n        \n        double totalSales = data.getSales().stream().mapToDouble(Sale::getNetAmount).sum();\n        int totalTransactions = data.getSales().size();\n        double avgTransaction = totalSales / totalTransactions;\n        \n        Set<String> uniqueCustomers = data.getSales().stream()\n                .map(Sale::getCustomerId)\n                .collect(Collectors.toSet());\n        \n        summary.append(\"Total Sales: \").append(currencyFormat.format(totalSales)).append(\"\\n\");\n        summary.append(\"Total Transactions: \").append(totalTransactions).append(\"\\n\");\n        summary.append(\"Average Transaction: \").append(currencyFormat.format(avgTransaction)).append(\"\\n\");\n        summary.append(\"Unique Customers: \").append(uniqueCustomers.size()).append(\"\\n\");\n        \n        return summary.toString();\n    }\n}",
      "output": "import java.util.*;\nimport java.text.SimpleDateFormat;\nimport java.text.DecimalFormat;\nimport java.util.stream.Collectors;\n\npublic class SalesData {\n    private List<Sale> sales;\n    private String companyName;\n    private String reportingPeriod;\n    \n    public SalesData(List<Sale> sales, String companyName, String reportingPeriod) {\n        this.sales = sales;\n        this.companyName = companyName;\n        this.reportingPeriod = reportingPeriod;\n    }\n    \n    public List<Sale> getSales() {\n        return sales;\n    }\n    \n    public String getCompanyName() {\n        return companyName;\n    }\n    \n    public String getReportingPeriod() {\n        return reportingPeriod;\n    }\n    \n    public void addSale(Sale sale) {\n        this.sales.add(sale);\n    }\n    \n    public List<Sale> getSalesByRegion(String region) {\n        return sales.stream()\n                .filter(sale -> sale.getRegion().equals(region))\n                .collect(Collectors.toList());\n    }\n}\n\npublic class Sale {\n    private String productName;\n    private String productCategory;\n    private double amount;\n    private int quantity;\n    private Date date;\n    private String region;\n    private String salesPerson;\n    private String customerId;\n    private double discount;\n    \n    public Sale(String productName, String productCategory, double amount, int quantity, \n                Date date, String region, String salesPerson, String customerId, double discount) {\n        this.productName = productName;\n        this.productCategory = productCategory;\n        this.amount = amount;\n        this.quantity = quantity;\n        this.date = date;\n        this.region = region;\n        this.salesPerson = salesPerson;\n        this.customerId = customerId;\n        this.discount = discount;\n    }\n    \n    public String getProductName() {\n        return productName;\n    }\n    \n    public String getProductCategory() {\n        return productCategory;\n    }\n    \n    public double getAmount() {\n        return amount;\n    }\n    \n    public int getQuantity() {\n        return quantity;\n    }\n    \n    public Date getDate() {\n        return date;\n    }\n    \n    public String getRegion() {\n        return region;\n    }\n    \n    public String getSalesPerson() {\n        return salesPerson;\n    }\n    \n    public String getCustomerId() {\n        return customerId;\n    }\n    \n    public double getDiscount() {\n        return discount;\n    }\n    \n    public double getNetAmount() {\n        return amount - discount;\n    }\n}\n\npublic interface ReportStrategy {\n    String generateReport(SalesData data);\n    String getReportTitle();\n}\n\npublic abstract class BaseReportStrategy implements ReportStrategy {\n    protected DecimalFormat currencyFormat = new DecimalFormat(\"$#,##0.00\");\n    protected SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd\");\n    \n    protected String generateHeader(SalesData data) {\n        StringBuilder header = new StringBuilder();\n        header.append(\"===================================\\n\");\n        header.append(\"    \").append(data.getCompanyName()).append(\"\\n\");\n        header.append(\"  Reporting Period: \").append(data.getReportingPeriod()).append(\"\\n\");\n        header.append(\"===================================\\n\\n\");\n        return header.toString();\n    }\n    \n    protected String generateFooter() {\n        StringBuilder footer = new StringBuilder();\n        footer.append(\"\\n\\n===================================\\n\");\n        footer.append(\"Report Generated: \").append(new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(new Date()));\n        footer.append(\"\\n===================================\\n\");\n        return footer.toString();\n    }\n}\n\npublic class DailyReportStrategy extends BaseReportStrategy {\n    @Override\n    public String getReportTitle() {\n        return \"DAILY SALES REPORT\";\n    }\n    \n    @Override\n    public String generateReport(SalesData data) {\n        StringBuilder report = new StringBuilder();\n        report.append(generateHeader(data));\n        report.append(getReportTitle()).append(\"\\n\");\n        report.append(\"===================\\n\\n\");\n        \n        Map<String, Double> dailySales = new HashMap<>();\n        Map<String, Integer> dailyQuantities = new HashMap<>();\n        \n        for (Sale sale : data.getSales()) {\n            String dateStr = dateFormat.format(sale.getDate());\n            dailySales.put(dateStr, dailySales.getOrDefault(dateStr, 0.0) + sale.getNetAmount());\n            dailyQuantities.put(dateStr, dailyQuantities.getOrDefault(dateStr, 0) + sale.getQuantity());\n        }\n        \n        for (Map.Entry<String, Double> entry : dailySales.entrySet()) {\n            String date = entry.getKey();\n            report.append(\"Date: \").append(date)\n                  .append(\", Total Sales: \").append(currencyFormat.format(entry.getValue()))\n                  .append(\", Units Sold: \").append(dailyQuantities.get(date))\n                  .append(\"\\n\");\n        }\n        \n        double total = dailySales.values().stream().mapToDouble(Double::doubleValue).sum();\n        int totalUnits = dailyQuantities.values().stream().mapToInt(Integer::intValue).sum();\n        report.append(\"\\nGrand Total: \").append(currencyFormat.format(total));\n        report.append(\"\\nTotal Units: \").append(totalUnits);\n        report.append(\"\\nAverage Daily Sales: \").append(currencyFormat.format(total / dailySales.size()));\n        \n        report.append(generateFooter());\n        return report.toString();\n    }\n}\n\npublic class ProductReportStrategy extends BaseReportStrategy {\n    @Override\n    public String getReportTitle() {\n        return \"PRODUCT SALES REPORT\";\n    }\n    \n    @Override\n    public String generateReport(SalesData data) {\n        StringBuilder report = new StringBuilder();\n        report.append(generateHeader(data));\n        report.append(getReportTitle()).append(\"\\n\");\n        report.append(\"====================\\n\\n\");\n        \n        Map<String, Double> productSales = new HashMap<>();\n        Map<String, Integer> productQuantities = new HashMap<>();\n        Map<String, String> productCategories = new HashMap<>();\n        \n        for (Sale sale : data.getSales()) {\n            String product = sale.getProductName();\n            productSales.put(product, productSales.getOrDefault(product, 0.0) + sale.getNetAmount());\n            productQuantities.put(product, productQuantities.getOrDefault(product, 0) + sale.getQuantity());\n            productCategories.put(product, sale.getProductCategory());\n        }\n        \n        // Sort by sales amount descending\n        List<Map.Entry<String, Double>> sortedProducts = new ArrayList<>(productSales.entrySet());\n        sortedProducts.sort(Map.Entry.<String, Double>comparingByValue().reversed());\n        \n        for (Map.Entry<String, Double> entry : sortedProducts) {\n            String product = entry.getKey();\n            report.append(\"Product: \").append(product)\n                  .append(\" (Category: \").append(productCategories.get(product)).append(\")\")\n                  .append(\"\\n  Sales: \").append(currencyFormat.format(entry.getValue()))\n                  .append(\", Units: \").append(productQuantities.get(product))\n                  .append(\", Avg Price: \").append(currencyFormat.format(entry.getValue() / productQuantities.get(product)))\n                  .append(\"\\n\\n\");\n        }\n        \n        double total = productSales.values().stream().mapToDouble(Double::doubleValue).sum();\n        report.append(\"Total Product Sales: \").append(currencyFormat.format(total));\n        \n        report.append(generateFooter());\n        return report.toString();\n    }\n}\n\npublic class RegionalReportStrategy extends BaseReportStrategy {\n    @Override\n    public String getReportTitle() {\n        return \"REGIONAL SALES REPORT\";\n    }\n    \n    @Override\n    public String generateReport(SalesData data) {\n        StringBuilder report = new StringBuilder();\n        report.append(generateHeader(data));\n        report.append(getReportTitle()).append(\"\\n\");\n        report.append(\"=====================\\n\\n\");\n        \n        Map<String, Double> regionalSales = new HashMap<>();\n        Map<String, Set<String>> regionalCustomers = new HashMap<>();\n        Map<String, Set<String>> regionalSalespeople = new HashMap<>();\n        \n        for (Sale sale : data.getSales()) {\n            String region = sale.getRegion();\n            regionalSales.put(region, regionalSales.getOrDefault(region, 0.0) + sale.getNetAmount());\n            \n            regionalCustomers.computeIfAbsent(region, k -> new HashSet<>()).add(sale.getCustomerId());\n            regionalSalespeople.computeIfAbsent(region, k -> new HashSet<>()).add(sale.getSalesPerson());\n        }\n        \n        for (Map.Entry<String, Double> entry : regionalSales.entrySet()) {\n            String region = entry.getKey();\n            report.append(\"Region: \").append(region)\n                  .append(\"\\n  Total Sales: \").append(currencyFormat.format(entry.getValue()))\n                  .append(\"\\n  Unique Customers: \").append(regionalCustomers.get(region).size())\n                  .append(\"\\n  Sales Team Size: \").append(regionalSalespeople.get(region).size())\n                  .append(\"\\n  Avg Sales per Customer: \")\n                  .append(currencyFormat.format(entry.getValue() / regionalCustomers.get(region).size()))\n                  .append(\"\\n\\n\");\n        }\n        \n        double total = regionalSales.values().stream().mapToDouble(Double::doubleValue).sum();\n        report.append(\"Total Regional Sales: \").append(currencyFormat.format(total));\n        \n        report.append(generateFooter());\n        return report.toString();\n    }\n}\n\npublic class SalespersonReportStrategy extends BaseReportStrategy {\n    @Override\n    public String getReportTitle() {\n        return \"SALESPERSON PERFORMANCE REPORT\";\n    }\n    \n    @Override\n    public String generateReport(SalesData data) {\n        StringBuilder report = new StringBuilder();\n        report.append(generateHeader(data));\n        report.append(getReportTitle()).append(\"\\n\");\n        report.append(\"==============================\\n\\n\");\n        \n        Map<String, Double> salespersonSales = new HashMap<>();\n        Map<String, Set<String>> salespersonCustomers = new HashMap<>();\n        Map<String, String> salespersonRegions = new HashMap<>();\n        \n        for (Sale sale : data.getSales()) {\n            String salesperson = sale.getSalesPerson();\n            salespersonSales.put(salesperson, salespersonSales.getOrDefault(salesperson, 0.0) + sale.getNetAmount());\n            salespersonCustomers.computeIfAbsent(salesperson, k -> new HashSet<>()).add(sale.getCustomerId());\n            salespersonRegions.put(salesperson, sale.getRegion());\n        }\n        \n        // Sort by performance\n        List<Map.Entry<String, Double>> sortedSalespeople = new ArrayList<>(salespersonSales.entrySet());\n        sortedSalespeople.sort(Map.Entry.<String, Double>comparingByValue().reversed());\n        \n        int rank = 1;\n        for (Map.Entry<String, Double> entry : sortedSalespeople) {\n            String salesperson = entry.getKey();\n            report.append(\"#\").append(rank++).append(\" \").append(salesperson)\n                  .append(\" (Region: \").append(salespersonRegions.get(salesperson)).append(\")\")\n                  .append(\"\\n  Total Sales: \").append(currencyFormat.format(entry.getValue()))\n                  .append(\"\\n  Customers Served: \").append(salespersonCustomers.get(salesperson).size())\n                  .append(\"\\n  Avg Sale per Customer: \")\n                  .append(currencyFormat.format(entry.getValue() / salespersonCustomers.get(salesperson).size()))\n                  .append(\"\\n\\n\");\n        }\n        \n        report.append(generateFooter());\n        return report.toString();\n    }\n}\n\npublic class CategoryReportStrategy extends BaseReportStrategy {\n    @Override\n    public String getReportTitle() {\n        return \"CATEGORY ANALYSIS REPORT\";\n    }\n    \n    @Override\n    public String generateReport(SalesData data) {\n        StringBuilder report = new StringBuilder();\n        report.append(generateHeader(data));\n        report.append(getReportTitle()).append(\"\\n\");\n        report.append(\"========================\\n\\n\");\n        \n        Map<String, Double> categorySales = new HashMap<>();\n        Map<String, Integer> categoryQuantities = new HashMap<>();\n        Map<String, Set<String>> categoryProducts = new HashMap<>();\n        \n        for (Sale sale : data.getSales()) {\n            String category = sale.getProductCategory();\n            categorySales.put(category, categorySales.getOrDefault(category, 0.0) + sale.getNetAmount());\n            categoryQuantities.put(category, categoryQuantities.getOrDefault(category, 0) + sale.getQuantity());\n            categoryProducts.computeIfAbsent(category, k -> new HashSet<>()).add(sale.getProductName());\n        }\n        \n        double totalSales = categorySales.values().stream().mapToDouble(Double::doubleValue).sum();\n        \n        for (Map.Entry<String, Double> entry : categorySales.entrySet()) {\n            String category = entry.getKey();\n            double categoryTotal = entry.getValue();\n            double percentage = (categoryTotal / totalSales) * 100;\n            \n            report.append(\"Category: \").append(category)\n                  .append(\"\\n  Sales: \").append(currencyFormat.format(categoryTotal))\n                  .append(\" (\").append(String.format(\"%.1f\", percentage)).append(\"% of total)\")\n                  .append(\"\\n  Units Sold: \").append(categoryQuantities.get(category))\n                  .append(\"\\n  Product Variety: \").append(categoryProducts.get(category).size()).append(\" products\")\n                  .append(\"\\n\\n\");\n        }\n        \n        report.append(generateFooter());\n        return report.toString();\n    }\n}\n\npublic class SummaryReportStrategy extends BaseReportStrategy {\n    @Override\n    public String getReportTitle() {\n        return \"EXECUTIVE SUMMARY\";\n    }\n    \n    @Override\n    public String generateReport(SalesData data) {\n        StringBuilder report = new StringBuilder();\n        report.append(generateHeader(data));\n        report.append(getReportTitle()).append(\"\\n\");\n        report.append(\"=================\\n\\n\");\n        \n        double totalSales = data.getSales().stream().mapToDouble(Sale::getNetAmount).sum();\n        int totalTransactions = data.getSales().size();\n        double avgTransaction = totalTransactions > 0 ? totalSales / totalTransactions : 0.0;\n        \n        Set<String> uniqueCustomers = data.getSales().stream()\n                .map(Sale::getCustomerId)\n                .collect(Collectors.toSet());\n        \n        Set<String> uniqueProducts = data.getSales().stream()\n                .map(Sale::getProductName)\n                .collect(Collectors.toSet());\n        \n        Set<String> uniqueRegions = data.getSales().stream()\n                .map(Sale::getRegion)\n                .collect(Collectors.toSet());\n        \n        report.append(\"Total Sales: \").append(currencyFormat.format(totalSales)).append(\"\\n\");\n        report.append(\"Total Transactions: \").append(totalTransactions).append(\"\\n\");\n        report.append(\"Average Transaction: \").append(currencyFormat.format(avgTransaction)).append(\"\\n\");\n        report.append(\"Unique Customers: \").append(uniqueCustomers.size()).append(\"\\n\");\n        report.append(\"Unique Products: \").append(uniqueProducts.size()).append(\"\\n\");\n        report.append(\"Active Regions: \").append(uniqueRegions.size()).append(\"\\n\");\n        \n        // Top performing metrics\n        Map<String, Double> productSales = new HashMap<>();\n        Map<String, Double> regionSales = new HashMap<>();\n        \n        for (Sale sale : data.getSales()) {\n            productSales.put(sale.getProductName(), \n                productSales.getOrDefault(sale.getProductName(), 0.0) + sale.getNetAmount());\n            regionSales.put(sale.getRegion(), \n                regionSales.getOrDefault(sale.getRegion(), 0.0) + sale.getNetAmount());\n        }\n        \n        String topProduct = productSales.entrySet().stream()\n                .max(Map.Entry.comparingByValue())\n                .map(Map.Entry::getKey)\n                .orElse(\"N/A\");\n        \n        String topRegion = regionSales.entrySet().stream()\n                .max(Map.Entry.comparingByValue())\n                .map(Map.Entry::getKey)\n                .orElse(\"N/A\");\n        \n        report.append(\"\\nTop Performing Product: \").append(topProduct).append(\"\\n\");\n        report.append(\"Top Performing Region: \").append(topRegion).append(\"\\n\");\n        \n        report.append(generateFooter());\n        return report.toString();\n    }\n}\n\npublic class ReportGenerator {\n    private ReportStrategy reportStrategy;\n    \n    public ReportGenerator(ReportStrategy reportStrategy) {\n        this.reportStrategy = reportStrategy;\n    }\n    \n    public void setReportStrategy(ReportStrategy reportStrategy) {\n        this.reportStrategy = reportStrategy;\n    }\n    \n    public String generateReport(SalesData data) {\n        if (reportStrategy == null) {\n            throw new IllegalStateException(\"Report strategy must be set before generating report\");\n        }\n        return reportStrategy.generateReport(data);\n    }\n    \n    public String getReportTitle() {\n        if (reportStrategy == null) {\n            return \"Unknown Report\";\n        }\n        return reportStrategy.getReportTitle();\n    }\n}\n\npublic class ReportFactory {\n    public static ReportStrategy createReportStrategy(String reportType) {\n        switch (reportType.toLowerCase()) {\n            case \"daily\":\n                return new DailyReportStrategy();\n            case \"product\":\n                return new ProductReportStrategy();\n            case \"regional\":\n                return new RegionalReportStrategy();\n            case \"salesperson\":\n                return new SalespersonReportStrategy();\n            case \"category\":\n                return new CategoryReportStrategy();\n            case \"summary\":\n                return new SummaryReportStrategy();\n            default:\n                throw new IllegalArgumentException(\"Unknown report type: \" + reportType);\n        }\n    }\n    \n    public static List<String> getAvailableReportTypes() {\n        return Arrays.asList(\"daily\", \"product\", \"regional\", \"salesperson\", \"category\", \"summary\");\n    }\n}",
      "level": "HARD",
      "language": "JAVA",
      "violation": "OCP",
      "description": "Sales report generation system"
    },
    {
      "input": "import java.util.*;\n\npublic class Order {\n    private String customerId;\n    private List<OrderItem> items;\n    private String country;\n    private Date orderDate;\n    private String orderType;\n    private boolean isBusinessOrder;\n    \n    public Order(String customerId, List<OrderItem> items, String country, Date orderDate, String orderType, boolean isBusinessOrder) {\n        this.customerId = customerId;\n        this.items = items;\n        this.country = country;\n        this.orderDate = orderDate;\n        this.orderType = orderType;\n        this.isBusinessOrder = isBusinessOrder;\n    }\n    \n    public String getCustomerId() {\n        return customerId;\n    }\n    \n    public List<OrderItem> getItems() {\n        return items;\n    }\n    \n    public String getCountry() {\n        return country;\n    }\n    \n    public Date getOrderDate() {\n        return orderDate;\n    }\n    \n    public String getOrderType() {\n        return orderType;\n    }\n    \n    public boolean isBusinessOrder() {\n        return isBusinessOrder;\n    }\n    \n    public double getTotalAmount() {\n        return items.stream()\n                .mapToDouble(item -> item.getPrice() * item.getQuantity())\n                .sum();\n    }\n}\n\npublic class OrderItem {\n    private String productId;\n    private double price;\n    private int quantity;\n    private String category;\n    private boolean isDigital;\n    private double weight;\n    \n    public OrderItem(String productId, double price, int quantity, String category, boolean isDigital, double weight) {\n        this.productId = productId;\n        this.price = price;\n        this.quantity = quantity;\n        this.category = category;\n        this.isDigital = isDigital;\n        this.weight = weight;\n    }\n    \n    public String getProductId() {\n        return productId;\n    }\n    \n    public double getPrice() {\n        return price;\n    }\n    \n    public int getQuantity() {\n        return quantity;\n    }\n    \n    public String getCategory() {\n        return category;\n    }\n    \n    public boolean isDigital() {\n        return isDigital;\n    }\n    \n    public double getWeight() {\n        return weight;\n    }\n    \n    public double getTotalPrice() {\n        return price * quantity;\n    }\n}\n\npublic class TaxCalculator {\n    private static final double DEFAULT_TAX_RATE = 0.05;\n    \n    public double calculateTax(Order order) {\n        double totalTax = 0.0;\n        \n        if (order.getCountry().equals(\"US\")) {\n            totalTax = calculateUSTax(order);\n        } else if (order.getCountry().equals(\"EU\")) {\n            totalTax = calculateEUTax(order);\n        } else if (order.getCountry().equals(\"CA\")) {\n            totalTax = calculateCanadaTax(order);\n        } else if (order.getCountry().equals(\"UK\")) {\n            totalTax = calculateUKTax(order);\n        } else if (order.getCountry().equals(\"AU\")) {\n            totalTax = calculateAustraliaTax(order);\n        } else if (order.getCountry().equals(\"JP\")) {\n            totalTax = calculateJapanTax(order);\n        } else if (order.getCountry().equals(\"IN\")) {\n            totalTax = calculateIndiaTax(order);\n        } else {\n            // Default tax calculation for unsupported countries\n            for (OrderItem item : order.getItems()) {\n                double itemPrice = item.getPrice() * item.getQuantity();\n                totalTax += itemPrice * DEFAULT_TAX_RATE;\n            }\n        }\n        \n        // Apply business order discount\n        if (order.isBusinessOrder()) {\n            totalTax *= 0.9; // 10% discount on tax for business orders\n        }\n        \n        // Apply digital goods adjustment\n        totalTax += calculateDigitalGoodsTax(order);\n        \n        return totalTax;\n    }\n    \n    private double calculateUSTax(Order order) {\n        Map<String, Double> stateTaxRates = getStateTaxRates();\n        Map<String, Double> categoryTaxRates = getCategoryTaxRates();\n        \n        String state = order.getCustomerId().substring(0, 2);\n        double stateTaxRate = stateTaxRates.getOrDefault(state, 0.05);\n        \n        double totalTax = 0.0;\n        for (OrderItem item : order.getItems()) {\n            double itemPrice = item.getPrice() * item.getQuantity();\n            double categoryRate = categoryTaxRates.getOrDefault(item.getCategory(), 0.0);\n            double itemTax = itemPrice * (stateTaxRate + categoryRate);\n            \n            // Special handling for luxury items over $1000\n            if (item.getCategory().equals(\"luxury\") && itemPrice > 1000) {\n                itemTax += itemPrice * 0.02; // Additional 2% luxury tax\n            }\n            \n            totalTax += itemTax;\n        }\n        \n        return totalTax;\n    }\n    \n    private double calculateEUTax(Order order) {\n        Map<String, Double> countryVatRates = getCountryVatRates();\n        \n        String countryCode = order.getCustomerId().substring(0, 2);\n        double vatRate = countryVatRates.getOrDefault(countryCode, 0.20);\n        \n        double totalTax = 0.0;\n        for (OrderItem item : order.getItems()) {\n            double itemPrice = item.getPrice() * item.getQuantity();\n            double itemVat = itemPrice * vatRate;\n            \n            // Reduced VAT for food items\n            if (item.getCategory().equals(\"food\")) {\n                itemVat = itemPrice * (vatRate * 0.5);\n            }\n            \n            totalTax += itemVat;\n        }\n        \n        return totalTax;\n    }\n    \n    private double calculateCanadaTax(Order order) {\n        Map<String, Double> provinceTaxRates = getProvinceTaxRates();\n        double gst = 0.05;\n        \n        String province = order.getCustomerId().substring(0, 2);\n        double provincialTax = provinceTaxRates.getOrDefault(province, 0.08);\n        \n        double totalTax = 0.0;\n        for (OrderItem item : order.getItems()) {\n            double itemPrice = item.getPrice() * item.getQuantity();\n            double itemTax = itemPrice * (gst + provincialTax);\n            \n            // No tax on essential food items\n            if (item.getCategory().equals(\"food\") && !item.getCategory().equals(\"luxury\")) {\n                itemTax = 0.0;\n            }\n            \n            totalTax += itemTax;\n        }\n        \n        return totalTax;\n    }\n    \n    private double calculateUKTax(Order order) {\n        double vatRate = 0.20;\n        double reducedVatRate = 0.05;\n        \n        double totalTax = 0.0;\n        for (OrderItem item : order.getItems()) {\n            double itemPrice = item.getPrice() * item.getQuantity();\n            double itemTax;\n            \n            if (item.getCategory().equals(\"food\") || item.getCategory().equals(\"books\")) {\n                itemTax = 0.0; // Zero-rated items\n            } else if (item.getCategory().equals(\"energy\") || item.getCategory().equals(\"domestic fuel\")) {\n                itemTax = itemPrice * reducedVatRate;\n            } else {\n                itemTax = itemPrice * vatRate;\n            }\n            \n            totalTax += itemTax;\n        }\n        \n        return totalTax;\n    }\n    \n    private double calculateAustraliaTax(Order order) {\n        double gstRate = 0.10;\n        \n        double totalTax = 0.0;\n        for (OrderItem item : order.getItems()) {\n            double itemPrice = item.getPrice() * item.getQuantity();\n            double itemTax = itemPrice * gstRate;\n            \n            // GST-free items\n            if (item.getCategory().equals(\"food\") || item.getCategory().equals(\"medical\")) {\n                itemTax = 0.0;\n            }\n            \n            totalTax += itemTax;\n        }\n        \n        return totalTax;\n    }\n    \n    private double calculateJapanTax(Order order) {\n        double consumptionTax = 0.10;\n        double reducedRate = 0.08;\n        \n        double totalTax = 0.0;\n        for (OrderItem item : order.getItems()) {\n            double itemPrice = item.getPrice() * item.getQuantity();\n            double itemTax;\n            \n            if (item.getCategory().equals(\"food\") || item.getCategory().equals(\"newspaper\")) {\n                itemTax = itemPrice * reducedRate;\n            } else {\n                itemTax = itemPrice * consumptionTax;\n            }\n            \n            totalTax += itemTax;\n        }\n        \n        return totalTax;\n    }\n    \n    private double calculateIndiaTax(Order order) {\n        Map<String, Double> gstRates = getIndiaGSTRates();\n        \n        double totalTax = 0.0;\n        for (OrderItem item : order.getItems()) {\n            double itemPrice = item.getPrice() * item.getQuantity();\n            double gstRate = gstRates.getOrDefault(item.getCategory(), 0.18);\n            double itemTax = itemPrice * gstRate;\n            \n            totalTax += itemTax;\n        }\n        \n        return totalTax;\n    }\n    \n    private double calculateDigitalGoodsTax(Order order) {\n        double digitalTax = 0.0;\n        \n        for (OrderItem item : order.getItems()) {\n            if (item.isDigital()) {\n                double itemPrice = item.getPrice() * item.getQuantity();\n                // Additional digital services tax\n                digitalTax += itemPrice * 0.02;\n            }\n        }\n        \n        return digitalTax;\n    }\n    \n    private Map<String, Double> getStateTaxRates() {\n        Map<String, Double> rates = new HashMap<>();\n        rates.put(\"CA\", 0.0725);\n        rates.put(\"NY\", 0.045);\n        rates.put(\"TX\", 0.0625);\n        rates.put(\"FL\", 0.06);\n        rates.put(\"WA\", 0.065);\n        rates.put(\"OR\", 0.0);\n        rates.put(\"MT\", 0.0);\n        return rates;\n    }\n    \n    private Map<String, Double> getCategoryTaxRates() {\n        Map<String, Double> rates = new HashMap<>();\n        rates.put(\"luxury\", 0.03);\n        rates.put(\"food\", 0.0);\n        rates.put(\"electronics\", 0.01);\n        rates.put(\"clothing\", 0.005);\n        return rates;\n    }\n    \n    private Map<String, Double> getCountryVatRates() {\n        Map<String, Double> rates = new HashMap<>();\n        rates.put(\"DE\", 0.19);\n        rates.put(\"FR\", 0.20);\n        rates.put(\"IT\", 0.22);\n        rates.put(\"ES\", 0.21);\n        rates.put(\"NL\", 0.21);\n        rates.put(\"BE\", 0.21);\n        return rates;\n    }\n    \n    private Map<String, Double> getProvinceTaxRates() {\n        Map<String, Double> rates = new HashMap<>();\n        rates.put(\"ON\", 0.08);\n        rates.put(\"BC\", 0.07);\n        rates.put(\"AB\", 0.0);\n        rates.put(\"QC\", 0.09975);\n        rates.put(\"NS\", 0.10);\n        return rates;\n    }\n    \n    private Map<String, Double> getIndiaGSTRates() {\n        Map<String, Double> rates = new HashMap<>();\n        rates.put(\"food\", 0.05);\n        rates.put(\"clothing\", 0.12);\n        rates.put(\"electronics\", 0.18);\n        rates.put(\"luxury\", 0.28);\n        rates.put(\"automotive\", 0.28);\n        return rates;\n    }\n}",
      "output": "import java.util.*;\n\npublic class Order {\n    private String customerId;\n    private List<OrderItem> items;\n    private String country;\n    private Date orderDate;\n    private String orderType;\n    private boolean isBusinessOrder;\n    \n    public Order(String customerId, List<OrderItem> items, String country, Date orderDate, String orderType, boolean isBusinessOrder) {\n        this.customerId = customerId;\n        this.items = items;\n        this.country = country;\n        this.orderDate = orderDate;\n        this.orderType = orderType;\n        this.isBusinessOrder = isBusinessOrder;\n    }\n    \n    public String getCustomerId() {\n        return customerId;\n    }\n    \n    public List<OrderItem> getItems() {\n        return items;\n    }\n    \n    public String getCountry() {\n        return country;\n    }\n    \n    public Date getOrderDate() {\n        return orderDate;\n    }\n    \n    public String getOrderType() {\n        return orderType;\n    }\n    \n    public boolean isBusinessOrder() {\n        return isBusinessOrder;\n    }\n    \n    public double getTotalAmount() {\n        return items.stream()\n                .mapToDouble(item -> item.getPrice() * item.getQuantity())\n                .sum();\n    }\n}\n\npublic class OrderItem {\n    private String productId;\n    private double price;\n    private int quantity;\n    private String category;\n    private boolean isDigital;\n    private double weight;\n    \n    public OrderItem(String productId, double price, int quantity, String category, boolean isDigital, double weight) {\n        this.productId = productId;\n        this.price = price;\n        this.quantity = quantity;\n        this.category = category;\n        this.isDigital = isDigital;\n        this.weight = weight;\n    }\n    \n    public String getProductId() {\n        return productId;\n    }\n    \n    public double getPrice() {\n        return price;\n    }\n    \n    public int getQuantity() {\n        return quantity;\n    }\n    \n    public String getCategory() {\n        return category;\n    }\n    \n    public boolean isDigital() {\n        return isDigital;\n    }\n    \n    public double getWeight() {\n        return weight;\n    }\n    \n    public double getTotalPrice() {\n        return price * quantity;\n    }\n}\n\npublic interface TaxStrategy {\n    double calculateTax(Order order);\n}\n\npublic abstract class BaseTaxStrategy implements TaxStrategy {\n    protected double calculateDigitalGoodsTax(Order order) {\n        double digitalTax = 0.0;\n        for (OrderItem item : order.getItems()) {\n            if (item.isDigital()) {\n                double itemPrice = item.getPrice() * item.getQuantity();\n                digitalTax += itemPrice * 0.02;\n            }\n        }\n        return digitalTax;\n    }\n    \n    protected double applyBusinessDiscount(double tax, Order order) {\n        return order.isBusinessOrder() ? tax * 0.9 : tax;\n    }\n}\n\npublic class USTaxStrategy extends BaseTaxStrategy {\n    @Override\n    public double calculateTax(Order order) {\n        Map<String, Double> stateTaxRates = getStateTaxRates();\n        Map<String, Double> categoryTaxRates = getCategoryTaxRates();\n        \n        String state = order.getCustomerId().substring(0, 2);\n        double stateTaxRate = stateTaxRates.getOrDefault(state, 0.05);\n        \n        double totalTax = 0.0;\n        for (OrderItem item : order.getItems()) {\n            double itemPrice = item.getPrice() * item.getQuantity();\n            double categoryRate = categoryTaxRates.getOrDefault(item.getCategory(), 0.0);\n            double itemTax = itemPrice * (stateTaxRate + categoryRate);\n            \n            if (item.getCategory().equals(\"luxury\") && itemPrice > 1000) {\n                itemTax += itemPrice * 0.02;\n            }\n            \n            totalTax += itemTax;\n        }\n        \n        totalTax += calculateDigitalGoodsTax(order);\n        return applyBusinessDiscount(totalTax, order);\n    }\n    \n    private Map<String, Double> getStateTaxRates() {\n        Map<String, Double> rates = new HashMap<>();\n        rates.put(\"CA\", 0.0725);\n        rates.put(\"NY\", 0.045);\n        rates.put(\"TX\", 0.0625);\n        rates.put(\"FL\", 0.06);\n        rates.put(\"WA\", 0.065);\n        rates.put(\"OR\", 0.0);\n        rates.put(\"MT\", 0.0);\n        return rates;\n    }\n    \n    private Map<String, Double> getCategoryTaxRates() {\n        Map<String, Double> rates = new HashMap<>();\n        rates.put(\"luxury\", 0.03);\n        rates.put(\"food\", 0.0);\n        rates.put(\"electronics\", 0.01);\n        rates.put(\"clothing\", 0.005);\n        return rates;\n    }\n}\n\npublic class EUTaxStrategy extends BaseTaxStrategy {\n    @Override\n    public double calculateTax(Order order) {\n        Map<String, Double> countryVatRates = getCountryVatRates();\n        \n        String countryCode = order.getCustomerId().substring(0, 2);\n        double vatRate = countryVatRates.getOrDefault(countryCode, 0.20);\n        \n        double totalTax = 0.0;\n        for (OrderItem item : order.getItems()) {\n            double itemPrice = item.getPrice() * item.getQuantity();\n            double itemVat = itemPrice * vatRate;\n            \n            if (item.getCategory().equals(\"food\")) {\n                itemVat = itemPrice * (vatRate * 0.5);\n            }\n            \n            totalTax += itemVat;\n        }\n        \n        totalTax += calculateDigitalGoodsTax(order);\n        return applyBusinessDiscount(totalTax, order);\n    }\n    \n    private Map<String, Double> getCountryVatRates() {\n        Map<String, Double> rates = new HashMap<>();\n        rates.put(\"DE\", 0.19);\n        rates.put(\"FR\", 0.20);\n        rates.put(\"IT\", 0.22);\n        rates.put(\"ES\", 0.21);\n        rates.put(\"NL\", 0.21);\n        rates.put(\"BE\", 0.21);\n        return rates;\n    }\n}\n\npublic class CanadaTaxStrategy extends BaseTaxStrategy {\n    @Override\n    public double calculateTax(Order order) {\n        Map<String, Double> provinceTaxRates = getProvinceTaxRates();\n        double gst = 0.05;\n        \n        String province = order.getCustomerId().substring(0, 2);\n        double provincialTax = provinceTaxRates.getOrDefault(province, 0.08);\n        \n        double totalTax = 0.0;\n        for (OrderItem item : order.getItems()) {\n            double itemPrice = item.getPrice() * item.getQuantity();\n            double itemTax = itemPrice * (gst + provincialTax);\n            \n            if (item.getCategory().equals(\"food\") && !item.getCategory().equals(\"luxury\")) {\n                itemTax = 0.0;\n            }\n            \n            totalTax += itemTax;\n        }\n        \n        totalTax += calculateDigitalGoodsTax(order);\n        return applyBusinessDiscount(totalTax, order);\n    }\n    \n    private Map<String, Double> getProvinceTaxRates() {\n        Map<String, Double> rates = new HashMap<>();\n        rates.put(\"ON\", 0.08);\n        rates.put(\"BC\", 0.07);\n        rates.put(\"AB\", 0.0);\n        rates.put(\"QC\", 0.09975);\n        rates.put(\"NS\", 0.10);\n        return rates;\n    }\n}\n\npublic class UKTaxStrategy extends BaseTaxStrategy {\n    @Override\n    public double calculateTax(Order order) {\n        double vatRate = 0.20;\n        double reducedVatRate = 0.05;\n        \n        double totalTax = 0.0;\n        for (OrderItem item : order.getItems()) {\n            double itemPrice = item.getPrice() * item.getQuantity();\n            double itemTax;\n            \n            if (item.getCategory().equals(\"food\") || item.getCategory().equals(\"books\")) {\n                itemTax = 0.0;\n            } else if (item.getCategory().equals(\"energy\") || item.getCategory().equals(\"domestic fuel\")) {\n                itemTax = itemPrice * reducedVatRate;\n            } else {\n                itemTax = itemPrice * vatRate;\n            }\n            \n            totalTax += itemTax;\n        }\n        \n        totalTax += calculateDigitalGoodsTax(order);\n        return applyBusinessDiscount(totalTax, order);\n    }\n}\n\npublic class AustraliaTaxStrategy extends BaseTaxStrategy {\n    @Override\n    public double calculateTax(Order order) {\n        double gstRate = 0.10;\n        \n        double totalTax = 0.0;\n        for (OrderItem item : order.getItems()) {\n            double itemPrice = item.getPrice() * item.getQuantity();\n            double itemTax = itemPrice * gstRate;\n            \n            if (item.getCategory().equals(\"food\") || item.getCategory().equals(\"medical\")) {\n                itemTax = 0.0;\n            }\n            \n            totalTax += itemTax;\n        }\n        \n        totalTax += calculateDigitalGoodsTax(order);\n        return applyBusinessDiscount(totalTax, order);\n    }\n}\n\npublic class JapanTaxStrategy extends BaseTaxStrategy {\n    @Override\n    public double calculateTax(Order order) {\n        double consumptionTax = 0.10;\n        double reducedRate = 0.08;\n        \n        double totalTax = 0.0;\n        for (OrderItem item : order.getItems()) {\n            double itemPrice = item.getPrice() * item.getQuantity();\n            double itemTax;\n            \n            if (item.getCategory().equals(\"food\") || item.getCategory().equals(\"newspaper\")) {\n                itemTax = itemPrice * reducedRate;\n            } else {\n                itemTax = itemPrice * consumptionTax;\n            }\n            \n            totalTax += itemTax;\n        }\n        \n        totalTax += calculateDigitalGoodsTax(order);\n        return applyBusinessDiscount(totalTax, order);\n    }\n}\n\npublic class IndiaTaxStrategy extends BaseTaxStrategy {\n    @Override\n    public double calculateTax(Order order) {\n        Map<String, Double> gstRates = getGSTRates();\n        \n        double totalTax = 0.0;\n        for (OrderItem item : order.getItems()) {\n            double itemPrice = item.getPrice() * item.getQuantity();\n            double gstRate = gstRates.getOrDefault(item.getCategory(), 0.18);\n            double itemTax = itemPrice * gstRate;\n            \n            totalTax += itemTax;\n        }\n        \n        totalTax += calculateDigitalGoodsTax(order);\n        return applyBusinessDiscount(totalTax, order);\n    }\n    \n    private Map<String, Double> getGSTRates() {\n        Map<String, Double> rates = new HashMap<>();\n        rates.put(\"food\", 0.05);\n        rates.put(\"clothing\", 0.12);\n        rates.put(\"electronics\", 0.18);\n        rates.put(\"luxury\", 0.28);\n        rates.put(\"automotive\", 0.28);\n        return rates;\n    }\n}\n\npublic class DefaultTaxStrategy extends BaseTaxStrategy {\n    private static final double DEFAULT_TAX_RATE = 0.05;\n    \n    @Override\n    public double calculateTax(Order order) {\n        double totalTax = 0.0;\n        for (OrderItem item : order.getItems()) {\n            double itemPrice = item.getPrice() * item.getQuantity();\n            totalTax += itemPrice * DEFAULT_TAX_RATE;\n        }\n        \n        totalTax += calculateDigitalGoodsTax(order);\n        return applyBusinessDiscount(totalTax, order);\n    }\n}\n\npublic class TaxCalculator {\n    private Map<String, TaxStrategy> taxStrategies;\n    private TaxStrategy defaultStrategy;\n    \n    public TaxCalculator() {\n        taxStrategies = new HashMap<>();\n        initializeStrategies();\n        defaultStrategy = new DefaultTaxStrategy();\n    }\n    \n    private void initializeStrategies() {\n        taxStrategies.put(\"US\", new USTaxStrategy());\n        taxStrategies.put(\"EU\", new EUTaxStrategy());\n        taxStrategies.put(\"CA\", new CanadaTaxStrategy());\n        taxStrategies.put(\"UK\", new UKTaxStrategy());\n        taxStrategies.put(\"AU\", new AustraliaTaxStrategy());\n        taxStrategies.put(\"JP\", new JapanTaxStrategy());\n        taxStrategies.put(\"IN\", new IndiaTaxStrategy());\n    }\n    \n    public void registerTaxStrategy(String country, TaxStrategy strategy) {\n        taxStrategies.put(country, strategy);\n    }\n    \n    public void setDefaultStrategy(TaxStrategy strategy) {\n        this.defaultStrategy = strategy;\n    }\n    \n    public double calculateTax(Order order) {\n        TaxStrategy strategy = taxStrategies.getOrDefault(order.getCountry(), defaultStrategy);\n        return strategy.calculateTax(order);\n    }\n    \n    public Set<String> getSupportedCountries() {\n        return new HashSet<>(taxStrategies.keySet());\n    }\n    \n    public boolean isCountrySupported(String country) {\n        return taxStrategies.containsKey(country);\n    }\n}",
      "level": "HARD",
      "language": "JAVA",
      "violation": "OCP",
      "description": "Order tax calculation system"
    },
    {
        "input": "import java.util.*;\nimport java.util.regex.*;\nimport java.time.*;\nimport java.util.stream.*;\n\npublic class Content {\n    private String text;\n    private String type;\n    private Map<String, String> metadata;\n    private String contentId;\n    private long timestamp;\n    private String source;\n    private int priority;\n    private List<String> tags;\n    private boolean isPublic;\n    \n    public Content(String text, String type, Map<String, String> metadata, String contentId, long timestamp, String source, int priority) {\n        this.text = text;\n        this.type = type;\n        this.metadata = metadata != null ? metadata : new HashMap<>();\n        this.contentId = contentId;\n        this.timestamp = timestamp;\n        this.source = source;\n        this.priority = priority;\n        this.tags = new ArrayList<>();\n        this.isPublic = false;\n    }\n    \n    public String getText() {\n        return text;\n    }\n    \n    public void setText(String text) {\n        this.text = text;\n    }\n    \n    public String getType() {\n        return type;\n    }\n    \n    public Map<String, String> getMetadata() {\n        return metadata;\n    }\n    \n    public String getContentId() {\n        return contentId;\n    }\n    \n    public long getTimestamp() {\n        return timestamp;\n    }\n    \n    public String getSource() {\n        return source;\n    }\n    \n    public int getPriority() {\n        return priority;\n    }\n    \n    public List<String> getTags() {\n        return tags;\n    }\n    \n    public void addTag(String tag) {\n        if (!tags.contains(tag)) {\n            tags.add(tag);\n        }\n    }\n    \n    public boolean isPublic() {\n        return isPublic;\n    }\n    \n    public void setPublic(boolean isPublic) {\n        this.isPublic = isPublic;\n    }\n}\n\npublic class ContentFilter {\n    private Map<String, Integer> filterStats;\n    private Set<String> bannedWords;\n    private Pattern emailPattern;\n    private Pattern phonePattern;\n    private Pattern urlPattern;\n    private Pattern creditCardPattern;\n    private Pattern ssnPattern;\n    private int totalFiltered;\n    \n    public ContentFilter() {\n        this.filterStats = new HashMap<>();\n        this.bannedWords = new HashSet<>();\n        this.emailPattern = Pattern.compile(\"[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}\");\n        this.phonePattern = Pattern.compile(\"\\\\b\\\\d{3}-\\\\d{3}-\\\\d{4}\\\\b|\\\\(\\\\d{3}\\\\)\\\\s*\\\\d{3}-\\\\d{4}\");\n        this.urlPattern = Pattern.compile(\"https?://[^\\\\s]+\");\n        this.creditCardPattern = Pattern.compile(\"\\\\b\\\\d{4}[\\\\s-]?\\\\d{4}[\\\\s-]?\\\\d{4}[\\\\s-]?\\\\d{4}\\\\b\");\n        this.ssnPattern = Pattern.compile(\"\\\\d{3}-\\\\d{2}-\\\\d{4}\");\n        this.totalFiltered = 0;\n        \n        bannedWords.addAll(Arrays.asList(\"badword1\", \"badword2\", \"badword3\", \"inappropriate\", \"offensive\", \"spam\", \"scam\"));\n    }\n    \n    public String filterContent(Content content) {\n        String filteredText = content.getText();\n        String contentType = content.getType();\n        Map<String, String> metadata = content.getMetadata();\n        \n        if (contentType.equals(\"email\")) {\n            filteredText = filterEmailContent(filteredText, metadata);\n            updateStats(\"email\");\n            \n        } else if (contentType.equals(\"social\")) {\n            filteredText = filterSocialContent(filteredText, metadata);\n            updateStats(\"social\");\n            \n        } else if (contentType.equals(\"comment\")) {\n            filteredText = filterCommentContent(filteredText, metadata);\n            updateStats(\"comment\");\n            \n        } else if (contentType.equals(\"blog\")) {\n            filteredText = filterBlogContent(filteredText, metadata);\n            updateStats(\"blog\");\n            \n        } else if (contentType.equals(\"news\")) {\n            filteredText = filterNewsContent(filteredText, metadata);\n            updateStats(\"news\");\n            \n        } else if (contentType.equals(\"forum\")) {\n            filteredText = filterForumContent(filteredText, metadata);\n            updateStats(\"forum\");\n            \n        } else if (contentType.equals(\"chat\")) {\n            filteredText = filterChatContent(filteredText, metadata);\n            updateStats(\"chat\");\n            \n        } else if (contentType.equals(\"review\")) {\n            filteredText = filterReviewContent(filteredText, metadata);\n            updateStats(\"review\");\n            \n        } else if (contentType.equals(\"article\")) {\n            filteredText = filterArticleContent(filteredText, metadata);\n            updateStats(\"article\");\n            \n        } else if (contentType.equals(\"video\")) {\n            filteredText = filterVideoContent(filteredText, metadata);\n            updateStats(\"video\");\n            \n        } else {\n            filteredText = filterGenericContent(filteredText, metadata);\n            updateStats(\"generic\");\n        }\n        \n        filteredText = removeCommonProfanity(filteredText);\n        filteredText = removePersonalInfo(filteredText);\n        filteredText = filterUrls(filteredText, metadata);\n        filteredText = filterEmails(filteredText, metadata);\n        filteredText = filterPhoneNumbers(filteredText, metadata);\n        \n        totalFiltered++;\n        content.setText(filteredText);\n        content.addTag(\"filtered\");\n        \n        return filteredText;\n    }\n    \n    private String filterEmailContent(String text, Map<String, String> metadata) {\n        String audience = metadata.getOrDefault(\"audience\", \"general\");\n        \n        text = applyConfidentialityFilter(text, audience);\n        text = removeEmailHeaders(text);\n        text = filterDepartmentInfo(text, metadata.getOrDefault(\"department\", \"unknown\"));\n        \n        return text;\n    }\n    \n    private String filterSocialContent(String text, Map<String, String> metadata) {\n        String platform = metadata.getOrDefault(\"platform\", \"general\");\n        String audience = metadata.getOrDefault(\"audience\", \"general\");\n        \n        text = filterPlatformSpecificContent(text, platform);\n        text = filterAgeRestrictedContent(text, audience);\n        text = addVerificationLabels(text, metadata.getOrDefault(\"userType\", \"regular\"));\n        \n        return text;\n    }\n    \n    private String filterCommentContent(String text, Map<String, String> metadata) {\n        String context = metadata.getOrDefault(\"context\", \"general\");\n        \n        text = filterContextSpecificLanguage(text, context);\n        text = moderateExtremeLanguage(text, metadata.getOrDefault(\"moderation\", \"standard\"));\n        \n        return text;\n    }\n    \n    private String filterBlogContent(String text, Map<String, String> metadata) {\n        String category = metadata.getOrDefault(\"category\", \"general\");\n        \n        text = filterCategorySpecificTerms(text, category);\n        text = filterAgeInappropriateContent(text, metadata.getOrDefault(\"ageRating\", \"all\"));\n        \n        return text;\n    }\n    \n    private String filterNewsContent(String text, Map<String, String> metadata) {\n        String verification = metadata.getOrDefault(\"verification\", \"unverified\");\n        String source = metadata.getOrDefault(\"source\", \"unknown\");\n        \n        text = addVerificationLabels(text, verification);\n        text = addSourceLabels(text, source);\n        text = filterNewsSpecificTerms(text);\n        \n        return text;\n    }\n    \n    private String filterForumContent(String text, Map<String, String> metadata) {\n        String forumType = metadata.getOrDefault(\"forumType\", \"general\");\n        String userLevel = metadata.getOrDefault(\"userLevel\", \"novice\");\n        \n        text = filterForumSpecificTerms(text, forumType);\n        text = addUserLevelLabels(text, userLevel);\n        \n        return text;\n    }\n    \n    private String filterChatContent(String text, Map<String, String> metadata) {\n        String chatType = metadata.getOrDefault(\"chatType\", \"public\");\n        String encryption = metadata.getOrDefault(\"encryption\", \"none\");\n        \n        text = filterChatSpecificContent(text, chatType);\n        text = filterCredentials(text, encryption);\n        text = filterChatAbbreviations(text);\n        \n        return text;\n    }\n    \n    private String filterReviewContent(String text, Map<String, String> metadata) {\n        String productType = metadata.getOrDefault(\"productType\", \"general\");\n        String reviewerStatus = metadata.getOrDefault(\"reviewerStatus\", \"regular\");\n        \n        text = filterProductSpecificConcerns(text, productType);\n        text = addReviewerStatusLabels(text, reviewerStatus);\n        text = moderateExtremeOpinions(text);\n        \n        return text;\n    }\n    \n    private String filterArticleContent(String text, Map<String, String> metadata) {\n        String publication = metadata.getOrDefault(\"publication\", \"unknown\");\n        String category = metadata.getOrDefault(\"category\", \"general\");\n        \n        text = addPublicationLabels(text, publication);\n        text = addCategoryLabels(text, category);\n        \n        return text;\n    }\n    \n    private String filterVideoContent(String text, Map<String, String> metadata) {\n        String platform = metadata.getOrDefault(\"platform\", \"general\");\n        String contentType = metadata.getOrDefault(\"contentType\", \"general\");\n        \n        text = filterVideoSpecificContent(text, platform);\n        text = addContentTypeLabels(text, contentType);\n        \n        return text;\n    }\n    \n    private String filterGenericContent(String text, Map<String, String> metadata) {\n        String contentSource = metadata.getOrDefault(\"source\", \"unknown\");\n        \n        text = addSourceLabels(text, contentSource);\n        text = filterCommercialContent(text);\n        \n        return text;\n    }\n    \n    private String applyConfidentialityFilter(String text, String audience) {\n        if (audience.equals(\"public\")) {\n            text = text.replaceAll(\"(?i)confidential:\", \"[REDACTED]\");\n            text = text.replaceAll(\"(?i)internal use only\", \"[INTERNAL]\");\n            text = text.replaceAll(\"(?i)proprietary\", \"[CONFIDENTIAL]\");\n        }\n        return text;\n    }\n    \n    private String removeEmailHeaders(String text) {\n        text = text.replaceAll(\"(?i)from:\\\\s.*?\\\\n\", \"\");\n        text = text.replaceAll(\"(?i)to:\\\\s.*?\\\\n\", \"\");\n        text = text.replaceAll(\"(?i)cc:\\\\s.*?\\\\n\", \"\");\n        text = text.replaceAll(\"(?i)subject:\\\\s.*?\\\\n\", \"\");\n        return text;\n    }\n    \n    private String filterDepartmentInfo(String text, String department) {\n        if (department.equals(\"hr\")) {\n            text = text.replaceAll(\"(?i)salary|compensation|benefits\", \"[HR-INFO]\");\n        } else if (department.equals(\"legal\")) {\n            text = text.replaceAll(\"(?i)lawsuit|litigation|settlement\", \"[LEGAL-MATTER]\");\n        }\n        return text;\n    }\n    \n    private String filterPlatformSpecificContent(String text, String platform) {\n        if (platform.equals(\"twitter\")) {\n            text = text.replaceAll(\"@([A-Za-z0-9_]+)\", \"[USERNAME]\");\n            text = text.replaceAll(\"#([A-Za-z0-9_]+)\", \"[HASHTAG]\");\n        } else if (platform.equals(\"facebook\")) {\n            text = text.replaceAll(\"@\\\\[[^\\\\]]+\\\\]\", \"[NAME]\");\n        } else if (platform.equals(\"instagram\")) {\n            text = text.replaceAll(\"@([A-Za-z0-9_.]+)\", \"[HANDLE]\");\n        }\n        return text;\n    }\n    \n    private String filterAgeRestrictedContent(String text, String audience) {\n        if (audience.equals(\"minor\")) {\n            text = text.replaceAll(\"(?i)alcohol|beer|wine|gambling|casino\", \"[AGE-RESTRICTED]\");\n        }\n        return text;\n    }\n    \n    private String addVerificationLabels(String text, String userType) {\n        if (userType.equals(\"verified\")) {\n            text = \"[VERIFIED] \" + text;\n        }\n        return text;\n    }\n    \n    private String filterContextSpecificLanguage(String text, String context) {\n        if (context.equals(\"news\")) {\n            text = text.replaceAll(\"(?i)allegedly|reportedly|rumored\", \"[STATEMENT]\");\n        } else if (context.equals(\"review\")) {\n            text = text.replaceAll(\"(?i)terrible|awful|worst ever\", \"not satisfactory\");\n        } else if (context.equals(\"political\")) {\n            text = text.replaceAll(\"(?i)corrupt|scandal|investigation\", \"[POLITICAL-CLAIM]\");\n        }\n        return text;\n    }\n    \n    private String moderateExtremeLanguage(String text, String moderation) {\n        if (moderation.equals(\"strict\")) {\n            text = text.replaceAll(\"(?i)disagree|wrong|false\", \"alternative view\");\n        }\n        return text;\n    }\n    \n    private String filterCategorySpecificTerms(String text, String category) {\n        if (category.equals(\"technology\")) {\n            text = text.replaceAll(\"(?i)hack|exploit|vulnerability\", \"[TECH-ISSUE]\");\n        } else if (category.equals(\"health\")) {\n            text = text.replaceAll(\"(?i)cure|treatment|medication\", \"[MEDICAL-INFO]\");\n        }\n        return text;\n    }\n    \n    private String filterAgeInappropriateContent(String text, String ageRating) {\n        if (ageRating.equals(\"teen\")) {\n            text = text.replaceAll(\"(?i)violence|graphic|explicit\", \"[MATURE-CONTENT]\");\n        }\n        return text;\n    }\n    \n    private String addSourceLabels(String text, String source) {\n        if (source.equals(\"social\")) {\n            text = \"[SOCIAL-SOURCE] \" + text;\n        } else if (source.equals(\"user-generated\")) {\n            text = \"[USER-CONTENT] \" + text;\n        }\n        return text;\n    }\n    \n    private String filterNewsSpecificTerms(String text) {\n        return text.replaceAll(\"(?i)exclusive:|scoop:\", \"[STORY]:\");\n    }\n    \n    private String filterForumSpecificTerms(String text, String forumType) {\n        if (forumType.equals(\"technical\")) {\n            text = text.replaceAll(\"(?i)bug|error|crash\", \"[ISSUE]\");\n        } else if (forumType.equals(\"gaming\")) {\n            text = text.replaceAll(\"(?i)cheat|hack|mod\", \"[GAME-MODIFICATION]\");\n        }\n        return text;\n    }\n    \n    private String addUserLevelLabels(String text, String userLevel) {\n        if (userLevel.equals(\"newbie\")) {\n            text = \"[NEW-USER] \" + text;\n        } else if (userLevel.equals(\"expert\")) {\n            text = \"[EXPERT] \" + text;\n        }\n        return text;\n    }\n    \n    private String filterChatSpecificContent(String text, String chatType) {\n        if (chatType.equals(\"public\")) {\n            text = text.replaceAll(\"(?i)private|personal|secret\", \"[PRIVATE-INFO]\");\n        }\n        return text;\n    }\n    \n    private String filterCredentials(String text, String encryption) {\n        if (encryption.equals(\"none\")) {\n            text = text.replaceAll(\"(?i)password|token|key\", \"[CREDENTIALS]\");\n        }\n        return text;\n    }\n    \n    private String filterChatAbbreviations(String text) {\n        return text.replaceAll(\"(?i)wtf|omfg|stfu|lmao\", \"[ABBREV]\");\n    }\n    \n    private String filterProductSpecificConcerns(String text, String productType) {\n        if (productType.equals(\"restaurant\")) {\n            text = text.replaceAll(\"(?i)food poisoning|sick|illness\", \"[HEALTH-CONCERN]\");\n        } else if (productType.equals(\"hotel\")) {\n            text = text.replaceAll(\"(?i)dirty|filthy|disgusting\", \"needs improvement\");\n        }\n        return text;\n    }\n    \n    private String addReviewerStatusLabels(String text, String reviewerStatus) {\n        if (reviewerStatus.equals(\"verified\")) {\n            text = \"[VERIFIED-REVIEW] \" + text;\n        }\n        return text;\n    }\n    \n    private String moderateExtremeOpinions(String text) {\n        return text.replaceAll(\"(?i)love it|hate it|perfect|disaster\", \"[OPINION]\");\n    }\n    \n    private String addPublicationLabels(String text, String publication) {\n        if (publication.equals(\"tabloid\")) {\n            text = \"[TABLOID] \" + text;\n        }\n        return text;\n    }\n    \n    private String addCategoryLabels(String text, String category) {\n        if (category.equals(\"opinion\")) {\n            text = \"[OPINION-PIECE] \" + text;\n        }\n        return text;\n    }\n    \n    private String filterVideoSpecificContent(String text, String platform) {\n        if (platform.equals(\"youtube\")) {\n            text = text.replaceAll(\"(?i)like and subscribe\", \"[ENGAGEMENT-REQUEST]\");\n        }\n        return text;\n    }\n    \n    private String addContentTypeLabels(String text, String contentType) {\n        if (contentType.equals(\"tutorial\")) {\n            text = text.replaceAll(\"(?i)step by step|how to\", \"[TUTORIAL]\");\n        }\n        return text;\n    }\n    \n    private String filterCommercialContent(String text) {\n        return text.replaceAll(\"(?i)spam|advertisement|promotion\", \"[COMMERCIAL]\");\n    }\n    \n    private String removeCommonProfanity(String text) {\n        for (String word : bannedWords) {\n            text = text.replaceAll(\"(?i)\\\\b\" + Pattern.quote(word) + \"\\\\b\", \"[INAPPROPRIATE]\");\n        }\n        return text;\n    }\n    \n    private String removePersonalInfo(String text) {\n        text = ssnPattern.matcher(text).replaceAll(\"[SSN]\");\n        text = creditCardPattern.matcher(text).replaceAll(\"[CREDIT_CARD]\");\n        text = text.replaceAll(\"\\\\b(?:\\\\d{1,3}\\\\.){3}\\\\d{1,3}\\\\b\", \"[IP_ADDRESS]\");\n        return text;\n    }\n    \n    private String filterUrls(String text, Map<String, String> metadata) {\n        String urlPolicy = metadata.getOrDefault(\"urlPolicy\", \"allow\");\n        if (urlPolicy.equals(\"block\")) {\n            text = urlPattern.matcher(text).replaceAll(\"[URL]\");\n        }\n        return text;\n    }\n    \n    private String filterEmails(String text, Map<String, String> metadata) {\n        String emailPolicy = metadata.getOrDefault(\"emailPolicy\", \"allow\");\n        if (emailPolicy.equals(\"block\")) {\n            text = emailPattern.matcher(text).replaceAll(\"[EMAIL]\");\n        }\n        return text;\n    }\n    \n    private String filterPhoneNumbers(String text, Map<String, String> metadata) {\n        String phonePolicy = metadata.getOrDefault(\"phonePolicy\", \"allow\");\n        if (phonePolicy.equals(\"block\")) {\n            text = phonePattern.matcher(text).replaceAll(\"[PHONE]\");\n        }\n        return text;\n    }\n    \n    private void updateStats(String contentType) {\n        filterStats.put(contentType, filterStats.getOrDefault(contentType, 0) + 1);\n    }\n    \n    public Map<String, Integer> getFilterStats() {\n        return new HashMap<>(filterStats);\n    }\n    \n    public int getTotalFiltered() {\n        return totalFiltered;\n    }\n    \n    public void addBannedWord(String word) {\n        bannedWords.add(word.toLowerCase());\n    }\n    \n    public void removeBannedWord(String word) {\n        bannedWords.remove(word.toLowerCase());\n    }\n}",
          "output": "import java.util.*;\nimport java.util.regex.*;\nimport java.time.*;\nimport java.util.stream.*;\n\npublic class Content {\n    private String text;\n    private String type;\n    private Map<String, String> metadata;\n    private String contentId;\n    private long timestamp;\n    private String source;\n    private int priority;\n    private List<String> tags;\n    private boolean isPublic;\n    \n    public Content(String text, String type, Map<String, String> metadata, String contentId, long timestamp, String source, int priority) {\n        this.text = text;\n        this.type = type;\n        this.metadata = metadata != null ? metadata : new HashMap<>();\n        this.contentId = contentId;\n        this.timestamp = timestamp;\n        this.source = source;\n        this.priority = priority;\n        this.tags = new ArrayList<>();\n        this.isPublic = false;\n    }\n    \n    public String getText() {\n        return text;\n    }\n    \n    public void setText(String text) {\n        this.text = text;\n    }\n    \n    public String getType() {\n        return type;\n    }\n    \n    public Map<String, String> getMetadata() {\n        return metadata;\n    }\n    \n    public String getContentId() {\n        return contentId;\n    }\n    \n    public long getTimestamp() {\n        return timestamp;\n    }\n    \n    public String getSource() {\n        return source;\n    }\n    \n    public int getPriority() {\n        return priority;\n    }\n    \n    public List<String> getTags() {\n        return tags;\n    }\n    \n    public void addTag(String tag) {\n        if (!tags.contains(tag)) {\n            tags.add(tag);\n        }\n    }\n    \n    public boolean isPublic() {\n        return isPublic;\n    }\n    \n    public void setPublic(boolean isPublic) {\n        this.isPublic = isPublic;\n    }\n}\n\npublic interface ContentFilterStrategy {\n    String filter(String text, Map<String, String> metadata);\n}\n\npublic class EmailContentFilter implements ContentFilterStrategy {\n    @Override\n    public String filter(String text, Map<String, String> metadata) {\n        String audience = metadata.getOrDefault(\"audience\", \"general\");\n        \n        text = applyConfidentialityFilter(text, audience);\n        text = removeEmailHeaders(text);\n        text = filterDepartmentInfo(text, metadata.getOrDefault(\"department\", \"unknown\"));\n        \n        return text;\n    }\n    \n    private String applyConfidentialityFilter(String text, String audience) {\n        if (audience.equals(\"public\")) {\n            text = text.replaceAll(\"(?i)confidential:\", \"[REDACTED]\");\n            text = text.replaceAll(\"(?i)internal use only\", \"[INTERNAL]\");\n            text = text.replaceAll(\"(?i)proprietary\", \"[CONFIDENTIAL]\");\n        }\n        return text;\n    }\n    \n    private String removeEmailHeaders(String text) {\n        text = text.replaceAll(\"(?i)from:\\\\s.*?\\\\n\", \"\");\n        text = text.replaceAll(\"(?i)to:\\\\s.*?\\\\n\", \"\");\n        text = text.replaceAll(\"(?i)cc:\\\\s.*?\\\\n\", \"\");\n        text = text.replaceAll(\"(?i)subject:\\\\s.*?\\\\n\", \"\");\n        return text;\n    }\n    \n    private String filterDepartmentInfo(String text, String department) {\n        if (department.equals(\"hr\")) {\n            text = text.replaceAll(\"(?i)salary|compensation|benefits\", \"[HR-INFO]\");\n        } else if (department.equals(\"legal\")) {\n            text = text.replaceAll(\"(?i)lawsuit|litigation|settlement\", \"[LEGAL-MATTER]\");\n        }\n        return text;\n    }\n}\n\npublic class SocialContentFilter implements ContentFilterStrategy {\n    @Override\n    public String filter(String text, Map<String, String> metadata) {\n        String platform = metadata.getOrDefault(\"platform\", \"general\");\n        String audience = metadata.getOrDefault(\"audience\", \"general\");\n        \n        text = filterPlatformSpecificContent(text, platform);\n        text = filterAgeRestrictedContent(text, audience);\n        text = addVerificationLabels(text, metadata.getOrDefault(\"userType\", \"regular\"));\n        \n        return text;\n    }\n    \n    private String filterPlatformSpecificContent(String text, String platform) {\n        if (platform.equals(\"twitter\")) {\n            text = text.replaceAll(\"@([A-Za-z0-9_]+)\", \"[USERNAME]\");\n            text = text.replaceAll(\"#([A-Za-z0-9_]+)\", \"[HASHTAG]\");\n        } else if (platform.equals(\"facebook\")) {\n            text = text.replaceAll(\"@\\\\[[^\\\\]]+\\\\]\", \"[NAME]\");\n        } else if (platform.equals(\"instagram\")) {\n            text = text.replaceAll(\"@([A-Za-z0-9_.]+)\", \"[HANDLE]\");\n        }\n        return text;\n    }\n    \n    private String filterAgeRestrictedContent(String text, String audience) {\n        if (audience.equals(\"minor\")) {\n            text = text.replaceAll(\"(?i)alcohol|beer|wine|gambling|casino\", \"[AGE-RESTRICTED]\");\n        }\n        return text;\n    }\n    \n    private String addVerificationLabels(String text, String userType) {\n        if (userType.equals(\"verified\")) {\n            text = \"[VERIFIED] \" + text;\n        }\n        return text;\n    }\n}\n\npublic class CommentContentFilter implements ContentFilterStrategy {\n    @Override\n    public String filter(String text, Map<String, String> metadata) {\n        String context = metadata.getOrDefault(\"context\", \"general\");\n        \n        text = filterContextSpecificLanguage(text, context);\n        text = moderateExtremeLanguage(text, metadata.getOrDefault(\"moderation\", \"standard\"));\n        \n        return text;\n    }\n    \n    private String filterContextSpecificLanguage(String text, String context) {\n        if (context.equals(\"news\")) {\n            text = text.replaceAll(\"(?i)allegedly|reportedly|rumored\", \"[STATEMENT]\");\n        } else if (context.equals(\"review\")) {\n            text = text.replaceAll(\"(?i)terrible|awful|worst ever\", \"not satisfactory\");\n        } else if (context.equals(\"political\")) {\n            text = text.replaceAll(\"(?i)corrupt|scandal|investigation\", \"[POLITICAL-CLAIM]\");\n        }\n        return text;\n    }\n    \n    private String moderateExtremeLanguage(String text, String moderation) {\n        if (moderation.equals(\"strict\")) {\n            text = text.replaceAll(\"(?i)disagree|wrong|false\", \"alternative view\");\n        }\n        return text;\n    }\n}\n\npublic class BlogContentFilter implements ContentFilterStrategy {\n    @Override\n    public String filter(String text, Map<String, String> metadata) {\n        String category = metadata.getOrDefault(\"category\", \"general\");\n        \n        text = filterCategorySpecificTerms(text, category);\n        text = filterAgeInappropriateContent(text, metadata.getOrDefault(\"ageRating\", \"all\"));\n        \n        return text;\n    }\n    \n    private String filterCategorySpecificTerms(String text, String category) {\n        if (category.equals(\"technology\")) {\n            text = text.replaceAll(\"(?i)hack|exploit|vulnerability\", \"[TECH-ISSUE]\");\n        } else if (category.equals(\"health\")) {\n            text = text.replaceAll(\"(?i)cure|treatment|medication\", \"[MEDICAL-INFO]\");\n        }\n        return text;\n    }\n    \n    private String filterAgeInappropriateContent(String text, String ageRating) {\n        if (ageRating.equals(\"teen\")) {\n            text = text.replaceAll(\"(?i)violence|graphic|explicit\", \"[MATURE-CONTENT]\");\n        }\n        return text;\n    }\n}\n\npublic class NewsContentFilter implements ContentFilterStrategy {\n    @Override\n    public String filter(String text, Map<String, String> metadata) {\n        String verification = metadata.getOrDefault(\"verification\", \"unverified\");\n        String source = metadata.getOrDefault(\"source\", \"unknown\");\n        \n        text = addVerificationLabels(text, verification);\n        text = addSourceLabels(text, source);\n        text = filterNewsSpecificTerms(text);\n        \n        return text;\n    }\n    \n    private String addVerificationLabels(String text, String verification) {\n        if (verification.equals(\"unverified\")) {\n            text = \"[UNVERIFIED-SOURCE] \" + text;\n        }\n        return text;\n    }\n    \n    private String addSourceLabels(String text, String source) {\n        if (source.equals(\"social\")) {\n            text = \"[SOCIAL-SOURCE] \" + text;\n        }\n        return text;\n    }\n    \n    private String filterNewsSpecificTerms(String text) {\n        return text.replaceAll(\"(?i)exclusive:|scoop:\", \"[STORY]:\");\n    }\n}\n\npublic class ForumContentFilter implements ContentFilterStrategy {\n    @Override\n    public String filter(String text, Map<String, String> metadata) {\n        String forumType = metadata.getOrDefault(\"forumType\", \"general\");\n        String userLevel = metadata.getOrDefault(\"userLevel\", \"novice\");\n        \n        text = filterForumSpecificTerms(text, forumType);\n        text = addUserLevelLabels(text, userLevel);\n        \n        return text;\n    }\n    \n    private String filterForumSpecificTerms(String text, String forumType) {\n        if (forumType.equals(\"technical\")) {\n            text = text.replaceAll(\"(?i)bug|error|crash\", \"[ISSUE]\");\n        } else if (forumType.equals(\"gaming\")) {\n            text = text.replaceAll(\"(?i)cheat|hack|mod\", \"[GAME-MODIFICATION]\");\n        }\n        return text;\n    }\n    \n    private String addUserLevelLabels(String text, String userLevel) {\n        if (userLevel.equals(\"newbie\")) {\n            text = \"[NEW-USER] \" + text;\n        } else if (userLevel.equals(\"expert\")) {\n            text = \"[EXPERT] \" + text;\n        }\n        return text;\n    }\n}\n\npublic class ChatContentFilter implements ContentFilterStrategy {\n    @Override\n    public String filter(String text, Map<String, String> metadata) {\n        String chatType = metadata.getOrDefault(\"chatType\", \"public\");\n        String encryption = metadata.getOrDefault(\"encryption\", \"none\");\n        \n        text = filterChatSpecificContent(text, chatType);\n        text = filterCredentials(text, encryption);\n        text = filterChatAbbreviations(text);\n        \n        return text;\n    }\n    \n    private String filterChatSpecificContent(String text, String chatType) {\n        if (chatType.equals(\"public\")) {\n            text = text.replaceAll(\"(?i)private|personal|secret\", \"[PRIVATE-INFO]\");\n        }\n        return text;\n    }\n    \n    private String filterCredentials(String text, String encryption) {\n        if (encryption.equals(\"none\")) {\n            text = text.replaceAll(\"(?i)password|token|key\", \"[CREDENTIALS]\");\n        }\n        return text;\n    }\n    \n    private String filterChatAbbreviations(String text) {\n        return text.replaceAll(\"(?i)wtf|omfg|stfu|lmao\", \"[ABBREV]\");\n    }\n}\n\npublic class ReviewContentFilter implements ContentFilterStrategy {\n    @Override\n    public String filter(String text, Map<String, String> metadata) {\n        String productType = metadata.getOrDefault(\"productType\", \"general\");\n        String reviewerStatus = metadata.getOrDefault(\"reviewerStatus\", \"regular\");\n        \n        text = filterProductSpecificConcerns(text, productType);\n        text = addReviewerStatusLabels(text, reviewerStatus);\n        text = moderateExtremeOpinions(text);\n        \n        return text;\n    }\n    \n    private String filterProductSpecificConcerns(String text, String productType) {\n        if (productType.equals(\"restaurant\")) {\n            text = text.replaceAll(\"(?i)food poisoning|sick|illness\", \"[HEALTH-CONCERN]\");\n        } else if (productType.equals(\"hotel\")) {\n            text = text.replaceAll(\"(?i)dirty|filthy|disgusting\", \"needs improvement\");\n        }\n        return text;\n    }\n    \n    private String addReviewerStatusLabels(String text, String reviewerStatus) {\n        if (reviewerStatus.equals(\"verified\")) {\n            text = \"[VERIFIED-REVIEW] \" + text;\n        }\n        return text;\n    }\n    \n    private String moderateExtremeOpinions(String text) {\n        return text.replaceAll(\"(?i)love it|hate it|perfect|disaster\", \"[OPINION]\");\n    }\n}\n\npublic class ArticleContentFilter implements ContentFilterStrategy {\n    @Override\n    public String filter(String text, Map<String, String> metadata) {\n        String publication = metadata.getOrDefault(\"publication\", \"unknown\");\n        String category = metadata.getOrDefault(\"category\", \"general\");\n        \n        text = addPublicationLabels(text, publication);\n        text = addCategoryLabels(text, category);\n        \n        return text;\n    }\n    \n    private String addPublicationLabels(String text, String publication) {\n        if (publication.equals(\"tabloid\")) {\n            text = \"[TABLOID] \" + text;\n        }\n        return text;\n    }\n    \n    private String addCategoryLabels(String text, String category) {\n        if (category.equals(\"opinion\")) {\n            text = \"[OPINION-PIECE] \" + text;\n        }\n        return text;\n    }\n}\n\npublic class VideoContentFilter implements ContentFilterStrategy {\n    @Override\n    public String filter(String text, Map<String, String> metadata) {\n        String platform = metadata.getOrDefault(\"platform\", \"general\");\n        String contentType = metadata.getOrDefault(\"contentType\", \"general\");\n        \n        text = filterVideoSpecificContent(text, platform);\n        text = addContentTypeLabels(text, contentType);\n        \n        return text;\n    }\n    \n    private String filterVideoSpecificContent(String text, String platform) {\n        if (platform.equals(\"youtube\")) {\n            text = text.replaceAll(\"(?i)like and subscribe\", \"[ENGAGEMENT-REQUEST]\");\n        }\n        return text;\n    }\n    \n    private String addContentTypeLabels(String text, String contentType) {\n        if (contentType.equals(\"tutorial\")) {\n            text = text.replaceAll(\"(?i)step by step|how to\", \"[TUTORIAL]\");\n        }\n        return text;\n    }\n}\n\npublic class GenericContentFilter implements ContentFilterStrategy {\n    @Override\n    public String filter(String text, Map<String, String> metadata) {\n        String contentSource = metadata.getOrDefault(\"source\", \"unknown\");\n        \n        text = addSourceLabels(text, contentSource);\n        text = filterCommercialContent(text);\n        \n        return text;\n    }\n    \n    private String addSourceLabels(String text, String contentSource) {\n        if (contentSource.equals(\"user-generated\")) {\n            text = \"[USER-CONTENT] \" + text;\n        }\n        return text;\n    }\n    \n    private String filterCommercialContent(String text) {\n        return text.replaceAll(\"(?i)spam|advertisement|promotion\", \"[COMMERCIAL]\");\n    }\n}\n\npublic class ContentFilter {\n    private Map<String, ContentFilterStrategy> filterStrategies;\n    private Map<String, Integer> filterStats;\n    private Set<String> bannedWords;\n    private Pattern emailPattern;\n    private Pattern phonePattern;\n    private Pattern urlPattern;\n    private Pattern creditCardPattern;\n    private Pattern ssnPattern;\n    private int totalFiltered;\n    \n    public ContentFilter() {\n        this.filterStrategies = new HashMap<>();\n        this.filterStats = new HashMap<>();\n        this.bannedWords = new HashSet<>();\n        this.emailPattern = Pattern.compile(\"[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}\");\n        this.phonePattern = Pattern.compile(\"\\\\b\\\\d{3}-\\\\d{3}-\\\\d{4}\\\\b|\\\\(\\\\d{3}\\\\)\\\\s*\\\\d{3}-\\\\d{4}\");\n        this.urlPattern = Pattern.compile(\"https?://[^\\\\s]+\");\n        this.creditCardPattern = Pattern.compile(\"\\\\b\\\\d{4}[\\\\s-]?\\\\d{4}[\\\\s-]?\\\\d{4}[\\\\s-]?\\\\d{4}\\\\b\");\n        this.ssnPattern = Pattern.compile(\"\\\\d{3}-\\\\d{2}-\\\\d{4}\");\n        this.totalFiltered = 0;\n        \n        bannedWords.addAll(Arrays.asList(\"badword1\", \"badword2\", \"badword3\", \"inappropriate\", \"offensive\", \"spam\", \"scam\"));\n        \n        initializeFilterStrategies();\n    }\n    \n    private void initializeFilterStrategies() {\n        filterStrategies.put(\"email\", new EmailContentFilter());\n        filterStrategies.put(\"social\", new SocialContentFilter());\n        filterStrategies.put(\"comment\", new CommentContentFilter());\n        filterStrategies.put(\"blog\", new BlogContentFilter());\n        filterStrategies.put(\"news\", new NewsContentFilter());\n        filterStrategies.put(\"forum\", new ForumContentFilter());\n        filterStrategies.put(\"chat\", new ChatContentFilter());\n        filterStrategies.put(\"review\", new ReviewContentFilter());\n        filterStrategies.put(\"article\", new ArticleContentFilter());\n        filterStrategies.put(\"video\", new VideoContentFilter());\n        filterStrategies.put(\"default\", new GenericContentFilter());\n    }\n    \n    public void registerFilterStrategy(String contentType, ContentFilterStrategy strategy) {\n        filterStrategies.put(contentType, strategy);\n    }\n    \n    public String filterContent(Content content) {\n        String filteredText = content.getText();\n        String contentType = content.getType();\n        Map<String, String> metadata = content.getMetadata();\n        \n        ContentFilterStrategy strategy = filterStrategies.getOrDefault(contentType, filterStrategies.get(\"default\"));\n        filteredText = strategy.filter(filteredText, metadata);\n        \n        filteredText = removeCommonProfanity(filteredText);\n        filteredText = removePersonalInfo(filteredText);\n        filteredText = filterUrls(filteredText, metadata);\n        filteredText = filterEmails(filteredText, metadata);\n        filteredText = filterPhoneNumbers(filteredText, metadata);\n        \n        updateStats(contentType);\n        totalFiltered++;\n        content.setText(filteredText);\n        content.addTag(\"filtered\");\n        \n        return filteredText;\n    }\n    \n    private String removeCommonProfanity(String text) {\n        for (String word : bannedWords) {\n            text = text.replaceAll(\"(?i)\\\\b\" + Pattern.quote(word) + \"\\\\b\", \"[INAPPROPRIATE]\");\n        }\n        return text;\n    }\n    \n    private String removePersonalInfo(String text) {\n        text = ssnPattern.matcher(text).replaceAll(\"[SSN]\");\n        text = creditCardPattern.matcher(text).replaceAll(\"[CREDIT_CARD]\");\n        text = text.replaceAll(\"\\\\b(?:\\\\d{1,3}\\\\.){3}\\\\d{1,3}\\\\b\", \"[IP_ADDRESS]\");\n        return text;\n    }\n    \n    private String filterUrls(String text, Map<String, String> metadata) {\n        String urlPolicy = metadata.getOrDefault(\"urlPolicy\", \"allow\");\n        if (urlPolicy.equals(\"block\")) {\n            text = urlPattern.matcher(text).replaceAll(\"[URL]\");\n        }\n        return text;\n    }\n    \n    private String filterEmails(String text, Map<String, String> metadata) {\n        String emailPolicy = metadata.getOrDefault(\"emailPolicy\", \"allow\");\n        if (emailPolicy.equals(\"block\")) {\n            text = emailPattern.matcher(text).replaceAll(\"[EMAIL]\");\n        }\n        return text;\n    }\n    \n    private String filterPhoneNumbers(String text, Map<String, String> metadata) {\n        String phonePolicy = metadata.getOrDefault(\"phonePolicy\", \"allow\");\n        if (phonePolicy.equals(\"block\")) {\n            text = phonePattern.matcher(text).replaceAll(\"[PHONE]\");\n        }\n        return text;\n    }\n    \n    private void updateStats(String contentType) {\n        filterStats.put(contentType, filterStats.getOrDefault(contentType, 0) + 1);\n    }\n    \n    public Map<String, Integer> getFilterStats() {\n        return new HashMap<>(filterStats);\n    }\n    \n    public int getTotalFiltered() {\n        return totalFiltered;\n    }\n    \n    public void addBannedWord(String word) {\n        bannedWords.add(word.toLowerCase());\n    }\n    \n    public void removeBannedWord(String word) {\n        bannedWords.remove(word.toLowerCase());\n    }\n}",
        "level": "HARD",
      "language": "JAVA",
      "violation": "OCP",
      "description": "Content filtering system"
    },
    {
      "input": "public class ShippingService {\n    private OrderRepository orderRepository;\n    private InventoryService inventoryService;\n    private Logger logger;\n    \n    public ShippingService(OrderRepository orderRepository, InventoryService inventoryService, Logger logger) {\n        this.orderRepository = orderRepository;\n        this.inventoryService = inventoryService;\n        this.logger = logger;\n    }\n    \n    public ShipmentResult processShipment(String orderId) {\n        Order order = orderRepository.findById(orderId);\n        \n        if (order == null) {\n            throw new IllegalArgumentException(\"Order not found: \" + orderId);\n        }\n        \n        if (order.getStatus() != OrderStatus.PAID) {\n            return new ShipmentResult(false, \"Order is not paid yet\", null);\n        }\n        \n        for (OrderItem item : order.getItems()) {\n            if (!inventoryService.isInStock(item.getProductId(), item.getQuantity())) {\n                return new ShipmentResult(false, \"Product out of stock: \" + item.getProductId(), null);\n            }\n        }\n        \n        Shipment shipment = new Shipment(orderId, new Date());\n        ShippingCost shippingCost = calculateShippingCost(order);\n        shipment.setCost(shippingCost.getCost());\n        \n        for (OrderItem item : order.getItems()) {\n            inventoryService.reserve(item.getProductId(), item.getQuantity());\n        }\n        \n        order.setStatus(OrderStatus.SHIPPED);\n        orderRepository.update(order);\n        \n        logger.log(\"Order shipped: \" + orderId + \", cost: \" + shippingCost.getCost());\n        return new ShipmentResult(true, \"Order shipped successfully\", shipment);\n    }\n    \n    private ShippingCost calculateShippingCost(Order order) {\n        Address destination = order.getShippingAddress();\n        double totalWeight = calculateOrderWeight(order);\n        double baseCost = 0.0;\n        \n        String shippingMethod = order.getShippingMethod();\n        \n        if (shippingMethod.equals(\"standard\")) {\n            baseCost = 5.0;\n            double weightCost = totalWeight * 0.5;\n            double distance = calculateDistance(destination);\n            double distanceFactor = distance * 0.01;\n            \n            return new ShippingCost(baseCost + weightCost + distanceFactor);\n            \n        } else if (shippingMethod.equals(\"express\")) {\n            baseCost = 15.0;\n            double weightCost = totalWeight * 0.75;\n            double distance = calculateDistance(destination);\n            double distanceFactor = distance * 0.015;\n            \n            return new ShippingCost(baseCost + weightCost + distanceFactor);\n            \n        } else if (shippingMethod.equals(\"overnight\")) {\n            baseCost = 25.0;\n            double weightCost = totalWeight * 1.0;\n            double distance = calculateDistance(destination);\n            double distanceFactor = distance * 0.02;\n            \n            return new ShippingCost(baseCost + weightCost + distanceFactor);\n            \n        } else if (shippingMethod.equals(\"international\")) {\n            baseCost = 30.0;\n            double weightCost = totalWeight * 2.0;\n            double distance = calculateDistance(destination);\n            double distanceFactor = distance * 0.025;\n            double customsFee = order.getTotalAmount() * 0.05; \n            \n            return new ShippingCost(baseCost + weightCost + distanceFactor + customsFee);\n        }\n        \n        return new ShippingCost(10.0);\n    }\n    \n    private double calculateOrderWeight(Order order) {\n        double totalWeight = 0.0;\n        for (OrderItem item : order.getItems()) {\n            Product product = inventoryService.getProduct(item.getProductId());\n            totalWeight += product.getWeight() * item.getQuantity();\n        }\n        return totalWeight;\n    }\n    \n    private double calculateDistance(Address destination) {\n        Address warehouseAddress = new Address(\"Warehouse\", \"123 Main St\", \"City\", \"State\", \"Country\", \"12345\");\n        \n        if (warehouseAddress.getCountry().equals(destination.getCountry())) {\n            if (warehouseAddress.getState().equals(destination.getState())) {\n                if (warehouseAddress.getCity().equals(destination.getCity())) {\n                    return 10.0; \n                }\n                return 50.0; \n            }\n            return 200.0; \n        }\n        return 1000.0; \n    }\n}\n\npublic class Order {\n    private String id;\n    private List<OrderItem> items;\n    private Address shippingAddress;\n    private String shippingMethod;\n    private OrderStatus status;\n    private double totalAmount;\n    \n    public Order(String id, List<OrderItem> items, Address shippingAddress, String shippingMethod) {\n        this.id = id;\n        this.items = items;\n        this.shippingAddress = shippingAddress;\n        this.shippingMethod = shippingMethod;\n        this.status = OrderStatus.CREATED;\n        calculateTotalAmount();\n    }\n    \n    private void calculateTotalAmount() {\n        this.totalAmount = items.stream()\n            .mapToDouble(item -> item.getPrice() * item.getQuantity())\n            .sum();\n    }\n    \n    public String getId() {\n        return id;\n    }\n    \n    public List<OrderItem> getItems() {\n        return items;\n    }\n    \n    public Address getShippingAddress() {\n        return shippingAddress;\n    }\n    \n    public String getShippingMethod() {\n        return shippingMethod;\n    }\n    \n    public OrderStatus getStatus() {\n        return status;\n    }\n    \n    public void setStatus(OrderStatus status) {\n        this.status = status;\n    }\n    \n    public double getTotalAmount() {\n        return totalAmount;\n    }\n}\n\npublic class OrderItem {\n    private String productId;\n    private int quantity;\n    private double price;\n    \n    public OrderItem(String productId, int quantity, double price) {\n        this.productId = productId;\n        this.quantity = quantity;\n        this.price = price;\n    }\n    \n    public String getProductId() {\n        return productId;\n    }\n    \n    public int getQuantity() {\n        return quantity;\n    }\n    \n    public double getPrice() {\n        return price;\n    }\n}\n\npublic class Address {\n    private String name;\n    private String street;\n    private String city;\n    private String state;\n    private String country;\n    private String zipCode;\n    \n    public Address(String name, String street, String city, String state, String country, String zipCode) {\n        this.name = name;\n        this.street = street;\n        this.city = city;\n        this.state = state;\n        this.country = country;\n        this.zipCode = zipCode;\n    }\n    \n    public String getName() {\n        return name;\n    }\n    \n    public String getStreet() {\n        return street;\n    }\n    \n    public String getCity() {\n        return city;\n    }\n    \n    public String getState() {\n        return state;\n    }\n    \n    public String getCountry() {\n        return country;\n    }\n    \n    public String getZipCode() {\n        return zipCode;\n    }\n}\n\npublic class Shipment {\n    private String orderId;\n    private Date shipmentDate;\n    private double cost;\n    \n    public Shipment(String orderId, Date shipmentDate) {\n        this.orderId = orderId;\n        this.shipmentDate = shipmentDate;\n    }\n    \n    public String getOrderId() {\n        return orderId;\n    }\n    \n    public Date getShipmentDate() {\n        return shipmentDate;\n    }\n    \n    public double getCost() {\n        return cost;\n    }\n    \n    public void setCost(double cost) {\n        this.cost = cost;\n    }\n}\n\npublic class ShippingCost {\n    private double cost;\n    \n    public ShippingCost(double cost) {\n        this.cost = cost;\n    }\n    \n    public double getCost() {\n        return cost;\n    }\n}\n\npublic class ShipmentResult {\n    private boolean success;\n    private String message;\n    private Shipment shipment;\n    \n    public ShipmentResult(boolean success, String message, Shipment shipment) {\n        this.success = success;\n        this.message = message;\n        this.shipment = shipment;\n    }\n    \n    public boolean isSuccess() {\n        return success;\n    }\n    \n    public String getMessage() {\n        return message;\n    }\n    \n    public Shipment getShipment() {\n        return shipment;\n    }\n}\n\npublic interface OrderRepository {\n    Order findById(String id);\n    void update(Order order);\n}\n\npublic interface InventoryService {\n    boolean isInStock(String productId, int quantity);\n    void reserve(String productId, int quantity);\n    Product getProduct(String productId);\n}\n\npublic class Product {\n    private String id;\n    private String name;\n    private double weight;\n    private double price;\n    \n    public Product(String id, String name, double weight, double price) {\n        this.id = id;\n        this.name = name;\n        this.weight = weight;\n        this.price = price;\n    }\n    \n    public String getId() {\n        return id;\n    }\n    \n    public String getName() {\n        return name;\n    }\n    \n    public double getWeight() {\n        return weight;\n    }\n    \n    public double getPrice() {\n        return price;\n    }\n}\n\npublic interface Logger {\n    void log(String message);\n}\n\npublic enum OrderStatus {\n    CREATED, PAID, SHIPPED, DELIVERED, CANCELLED\n}",
      "output": "public class ShippingService {\n    private OrderRepository orderRepository;\n    private InventoryService inventoryService;\n    private Logger logger;\n    private Map<String, ShippingStrategy> shippingStrategies;\n    \n    public ShippingService(OrderRepository orderRepository, InventoryService inventoryService, Logger logger) {\n        this.orderRepository = orderRepository;\n        this.inventoryService = inventoryService;\n        this.logger = logger;\n        initializeShippingStrategies();\n    }\n    \n    private void initializeShippingStrategies() {\n        shippingStrategies = new HashMap<>();\n        shippingStrategies.put(\"standard\", new StandardShippingStrategy());\n        shippingStrategies.put(\"express\", new ExpressShippingStrategy());\n        shippingStrategies.put(\"overnight\", new OvernightShippingStrategy());\n        shippingStrategies.put(\"international\", new InternationalShippingStrategy());\n    }\n    \n    public void registerShippingStrategy(String method, ShippingStrategy strategy) {\n        shippingStrategies.put(method, strategy);\n    }\n    \n    public ShipmentResult processShipment(String orderId) {\n        Order order = orderRepository.findById(orderId);\n        \n        if (order == null) {\n            throw new IllegalArgumentException(\"Order not found: \" + orderId);\n        }\n        \n        if (order.getStatus() != OrderStatus.PAID) {\n            return new ShipmentResult(false, \"Order is not paid yet\", null);\n        }\n        \n        for (OrderItem item : order.getItems()) {\n            if (!inventoryService.isInStock(item.getProductId(), item.getQuantity())) {\n                return new ShipmentResult(false, \"Product out of stock: \" + item.getProductId(), null);\n            }\n        }\n        \n        Shipment shipment = new Shipment(orderId, new Date());\n        ShippingCost shippingCost = calculateShippingCost(order);\n        shipment.setCost(shippingCost.getCost());\n        \n        // Reserve inventory items\n        for (OrderItem item : order.getItems()) {\n            inventoryService.reserve(item.getProductId(), item.getQuantity());\n        }\n        \n        // Update order status\n        order.setStatus(OrderStatus.SHIPPED);\n        orderRepository.update(order);\n        \n        logger.log(\"Order shipped: \" + orderId + \", cost: \" + shippingCost.getCost());\n        return new ShipmentResult(true, \"Order shipped successfully\", shipment);\n    }\n    \n    private ShippingCost calculateShippingCost(Order order) {\n        String shippingMethod = order.getShippingMethod();\n        ShippingStrategy strategy = shippingStrategies.get(shippingMethod);\n        \n        if (strategy == null) {\n            // Default strategy if method not recognized\n            return new ShippingCost(10.0);\n        }\n        \n        double totalWeight = calculateOrderWeight(order);\n        Address destination = order.getShippingAddress();\n        double distance = calculateDistance(destination);\n        \n        return strategy.calculateCost(order, totalWeight, distance);\n    }\n    \n    private double calculateOrderWeight(Order order) {\n        double totalWeight = 0.0;\n        for (OrderItem item : order.getItems()) {\n            Product product = inventoryService.getProduct(item.getProductId());\n            totalWeight += product.getWeight() * item.getQuantity();\n        }\n        return totalWeight;\n    }\n    \n    private double calculateDistance(Address destination) {\n        // Simplified distance calculation. In a real system, this would use\n        // geographic coordinates or a distance service.\n        Address warehouseAddress = new Address(\"Warehouse\", \"123 Main St\", \"City\", \"State\", \"Country\", \"12345\");\n        \n        if (warehouseAddress.getCountry().equals(destination.getCountry())) {\n            if (warehouseAddress.getState().equals(destination.getState())) {\n                if (warehouseAddress.getCity().equals(destination.getCity())) {\n                    return 10.0; // Same city\n                }\n                return 50.0; // Same state, different city\n            }\n            return 200.0; // Same country, different state\n        }\n        return 1000.0; // International\n    }\n}\n\npublic interface ShippingStrategy {\n    ShippingCost calculateCost(Order order, double weight, double distance);\n}\n\npublic class StandardShippingStrategy implements ShippingStrategy {\n    @Override\n    public ShippingCost calculateCost(Order order, double weight, double distance) {\n        double baseCost = 5.0;\n        double weightCost = weight * 0.5;\n        double distanceFactor = distance * 0.01;\n        \n        return new ShippingCost(baseCost + weightCost + distanceFactor);\n    }\n}\n\npublic class ExpressShippingStrategy implements ShippingStrategy {\n    @Override\n    public ShippingCost calculateCost(Order order, double weight, double distance) {\n        double baseCost = 15.0;\n        double weightCost = weight * 0.75;\n        double distanceFactor = distance * 0.015;\n        \n        return new ShippingCost(baseCost + weightCost + distanceFactor);\n    }\n}\n\npublic class OvernightShippingStrategy implements ShippingStrategy {\n    @Override\n    public ShippingCost calculateCost(Order order, double weight, double distance) {\n        double baseCost = 25.0;\n        double weightCost = weight * 1.0;\n        double distanceFactor = distance * 0.02;\n        \n        return new ShippingCost(baseCost + weightCost + distanceFactor);\n    }\n}\n\npublic class InternationalShippingStrategy implements ShippingStrategy {\n    @Override\n    public ShippingCost calculateCost(Order order, double weight, double distance) {\n        double baseCost = 30.0;\n        double weightCost = weight * 2.0;\n        double distanceFactor = distance * 0.025;\n        double customsFee = order.getTotalAmount() * 0.05; // 5% of order value\n        \n        return new ShippingCost(baseCost + weightCost + distanceFactor + customsFee);\n    }\n}\n\npublic class Order {\n    private String id;\n    private List<OrderItem> items;\n    private Address shippingAddress;\n    private String shippingMethod;\n    private OrderStatus status;\n    private double totalAmount;\n    \n    public Order(String id, List<OrderItem> items, Address shippingAddress, String shippingMethod) {\n        this.id = id;\n        this.items = items;\n        this.shippingAddress = shippingAddress;\n        this.shippingMethod = shippingMethod;\n        this.status = OrderStatus.CREATED;\n        calculateTotalAmount();\n    }\n    \n    private void calculateTotalAmount() {\n        this.totalAmount = items.stream()\n            .mapToDouble(item -> item.getPrice() * item.getQuantity())\n            .sum();\n    }\n    \n    public String getId() {\n        return id;\n    }\n    \n    public List<OrderItem> getItems() {\n        return items;\n    }\n    \n    public Address getShippingAddress() {\n        return shippingAddress;\n    }\n    \n    public String getShippingMethod() {\n        return shippingMethod;\n    }\n    \n    public OrderStatus getStatus() {\n        return status;\n    }\n    \n    public void setStatus(OrderStatus status) {\n        this.status = status;\n    }\n    \n    public double getTotalAmount() {\n        return totalAmount;\n    }\n}\n\npublic class OrderItem {\n    private String productId;\n    private int quantity;\n    private double price;\n    \n    public OrderItem(String productId, int quantity, double price) {\n        this.productId = productId;\n        this.quantity = quantity;\n        this.price = price;\n    }\n    \n    public String getProductId() {\n        return productId;\n    }\n    \n    public int getQuantity() {\n        return quantity;\n    }\n    \n    public double getPrice() {\n        return price;\n    }\n}\n\npublic class Address {\n    private String name;\n    private String street;\n    private String city;\n    private String state;\n    private String country;\n    private String zipCode;\n    \n    public Address(String name, String street, String city, String state, String country, String zipCode) {\n        this.name = name;\n        this.street = street;\n        this.city = city;\n        this.state = state;\n        this.country = country;\n        this.zipCode = zipCode;\n    }\n    \n    public String getName() {\n        return name;\n    }\n    \n    public String getStreet() {\n        return street;\n    }\n    \n    public String getCity() {\n        return city;\n    }\n    \n    public String getState() {\n        return state;\n    }\n    \n    public String getCountry() {\n        return country;\n    }\n    \n    public String getZipCode() {\n        return zipCode;\n    }\n}\n\npublic class Shipment {\n    private String orderId;\n    private Date shipmentDate;\n    private double cost;\n    \n    public Shipment(String orderId, Date shipmentDate) {\n        this.orderId = orderId;\n        this.shipmentDate = shipmentDate;\n    }\n    \n    public String getOrderId() {\n        return orderId;\n    }\n    \n    public Date getShipmentDate() {\n        return shipmentDate;\n    }\n    \n    public double getCost() {\n        return cost;\n    }\n    \n    public void setCost(double cost) {\n        this.cost = cost;\n    }\n}\n\npublic class ShippingCost {\n    private double cost;\n    \n    public ShippingCost(double cost) {\n        this.cost = cost;\n    }\n    \n    public double getCost() {\n        return cost;\n    }\n}\n\npublic class ShipmentResult {\n    private boolean success;\n    private String message;\n    private Shipment shipment;\n    \n    public ShipmentResult(boolean success, String message, Shipment shipment) {\n        this.success = success;\n        this.message = message;\n        this.shipment = shipment;\n    }\n    \n    public boolean isSuccess() {\n        return success;\n    }\n    \n    public String getMessage() {\n        return message;\n    }\n    \n    public Shipment getShipment() {\n        return shipment;\n    }\n}\n\npublic interface OrderRepository {\n    Order findById(String id);\n    void update(Order order);\n}\n\npublic interface InventoryService {\n    boolean isInStock(String productId, int quantity);\n    void reserve(String productId, int quantity);\n    Product getProduct(String productId);\n}\n\npublic class Product {\n    private String id;\n    private String name;\n    private double weight;\n    private double price;\n    \n    public Product(String id, String name, double weight, double price) {\n        this.id = id;\n        this.name = name;\n        this.weight = weight;\n        this.price = price;\n    }\n    \n    public String getId() {\n        return id;\n    }\n    \n    public String getName() {\n        return name;\n    }\n    \n    public double getWeight() {\n        return weight;\n    }\n    \n    public double getPrice() {\n        return price;\n    }\n}\n\npublic interface Logger {\n    void log(String message);\n}\n\npublic enum OrderStatus {\n    CREATED, PAID, SHIPPED, DELIVERED, CANCELLED\n}",
      "level": "HARD",
      "language": "JAVA",
      "violation": "OCP",
      "description": "Shipping cost calculation system"
    },
    {
      "input": "class Shape:\n    def __init__(self, shape_type):\n        self.type = shape_type\n        \n    def get_type(self):\n        return self.type\n\nclass Rectangle(Shape):\n    def __init__(self, width, height):\n        super().__init__(\"rectangle\")\n        self.width = width\n        self.height = height\n        \n    def get_width(self):\n        return self.width\n        \n    def get_height(self):\n        return self.height\n\nclass Circle(Shape):\n    def __init__(self, radius):\n        super().__init__(\"circle\")\n        self.radius = radius\n        \n    def get_radius(self):\n        return self.radius\n\nclass AreaCalculator:\n    def calculate_area(self, shape):\n        if shape.get_type() == \"rectangle\":\n            return shape.get_width() * shape.get_height()\n        elif shape.get_type() == \"circle\":\n            import math\n            return math.pi * shape.get_radius() ** 2\n        return 0",
      "output": "from abc import ABC, abstractmethod\nimport math\n\nclass Shape(ABC):\n    @abstractmethod\n    def calculate_area(self):\n        pass\n\nclass Rectangle(Shape):\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n        \n    def calculate_area(self):\n        return self.width * self.height\n\nclass Circle(Shape):\n    def __init__(self, radius):\n        self.radius = radius\n        \n    def calculate_area(self):\n        return math.pi * self.radius ** 2\n\nclass AreaCalculator:\n    def calculate_area(self, shape):\n        return shape.calculate_area()",
      "level": "EASY",
      "language": "PYTHON",
      "violation": "OCP",
      "description": "Shape area calculation system"
    },
    {
      "input": "class Character:\n    def __init__(self, type):\n        self.__type = type\n    \n    def get_type(self):\n        return self.__type\n\nclass Warrior(Character):\n    def __init__(self, strength):\n        super().__init__(\"warrior\")\n        self.__strength = strength\n    \n    def get_strength(self):\n        return self.__strength\n\nclass Mage(Character):\n    def __init__(self, mana):\n        super().__init__(\"mage\")\n        self.__mana = mana\n    \n    def get_mana(self):\n        return self.__mana\n\nclass DamageCalculator:\n    def calculate_damage(self, character):\n        if character.get_type() == \"warrior\":\n            warrior = character\n            return warrior.get_strength() * 2\n        elif character.get_type() == \"mage\":\n            mage = character\n            return mage.get_mana() * 3\n        return 0",
      "output": "from abc import ABC, abstractmethod\n\nclass Character(ABC):\n    @abstractmethod\n    def calculate_damage(self):\n        pass\n\nclass Warrior(Character):\n    def __init__(self, strength):\n        self.__strength = strength\n    \n    def calculate_damage(self):\n        return self.__strength * 2\n\nclass Mage(Character):\n    def __init__(self, mana):\n        self.__mana = mana\n    \n    def calculate_damage(self):\n        return self.__mana * 3\n\nclass DamageCalculator:\n    def calculate_damage(self, character):\n        return character.calculate_damage()",
      "level": "EASY",
      "language": "PYTHON",
      "violation": "OCP",
      "description": "Character damage calculation system"
    },
    {
      "input": "class Animal:\n    def __init__(self, type):\n        self.__type = type\n    \n    def get_type(self):\n        return self.__type\n\nclass Dog(Animal):\n    def __init__(self):\n        super().__init__(\"dog\")\n\nclass Cat(Animal):\n    def __init__(self):\n        super().__init__(\"cat\")\n\nclass SoundMaker:\n    def make_sound(self, animal):\n        if animal.get_type() == \"dog\":\n            return \"Woof!\"\n        elif animal.get_type() == \"cat\":\n            return \"Meow!\"\n        return \"...\"",
      "output": "from abc import ABC, abstractmethod\n\nclass Animal(ABC):\n    @abstractmethod\n    def make_sound(self):\n        pass\n\nclass Dog(Animal):\n    def make_sound(self):\n        return \"Woof!\"\n\nclass Cat(Animal):\n    def make_sound(self):\n        return \"Meow!\"\n\nclass SoundMaker:\n    def make_sound(self, animal):\n        return animal.make_sound()",
      "level": "EASY",
      "language": "PYTHON",
      "violation": "OCP",
      "description": "Animal sound generation system"
    },
    {
      "input": "class Vehicle:\n    def __init__(self, type):\n        self.__type = type\n    \n    def get_type(self):\n        return self.__type\n\nclass Car(Vehicle):\n    def __init__(self, horse_power):\n        super().__init__(\"car\")\n        self.__horse_power = horse_power\n    \n    def get_horse_power(self):\n        return self.__horse_power\n\nclass Bicycle(Vehicle):\n    def __init__(self, gear_count):\n        super().__init__(\"bicycle\")\n        self.__gear_count = gear_count\n    \n    def get_gear_count(self):\n        return self.__gear_count\n\nclass SpeedCalculator:\n    def calculate_max_speed(self, vehicle):\n        if vehicle.get_type() == \"car\":\n            car = vehicle\n            return car.get_horse_power() * 0.4\n        elif vehicle.get_type() == \"bicycle\":\n            bicycle = vehicle\n            return bicycle.get_gear_count() * 5.0\n        return 0",
      "output": "from abc import ABC, abstractmethod\n\nclass Vehicle(ABC):\n    @abstractmethod\n    def calculate_max_speed(self):\n        pass\n\nclass Car(Vehicle):\n    def __init__(self, horse_power):\n        self.__horse_power = horse_power\n    \n    def calculate_max_speed(self):\n        return self.__horse_power * 0.4\n\nclass Bicycle(Vehicle):\n    def __init__(self, gear_count):\n        self.__gear_count = gear_count\n    \n    def calculate_max_speed(self):\n        return self.__gear_count * 5.0\n\nclass SpeedCalculator:\n    def calculate_max_speed(self, vehicle):\n        return vehicle.calculate_max_speed()",
      "level": "EASY",
      "language": "PYTHON",
      "violation": "OCP",
      "description": "Vehicle speed calculation system"
    },
    {
      "input": "class PaymentProcessor:\n    def process_payment(self, payment_type, amount):\n        if payment_type == \"credit_card\":\n            self._process_credit_card_payment(amount)\n        elif payment_type == \"paypal\":\n            self._process_paypal_payment(amount)\n        elif payment_type == \"bank_transfer\":\n            self._process_bank_transfer_payment(amount)\n        else:\n            raise ValueError(\"Unsupported payment type\")\n    \n    def _process_credit_card_payment(self, amount):\n        print(f\"Processing credit card payment of ${amount}\")\n        print(\"Validating credit card information\")\n        print(\"Charging credit card\")\n        print(\"Recording the credit card transaction\")\n    \n    def _process_paypal_payment(self, amount):\n        print(f\"Processing PayPal payment of ${amount}\")\n        print(\"Redirecting user to PayPal\")\n        print(\"Confirming PayPal payment\")\n        print(\"Recording the PayPal transaction\")\n    \n    def _process_bank_transfer_payment(self, amount):\n        print(f\"Processing bank transfer of ${amount}\")\n        print(\"Generating bank transfer instructions\")\n        print(\"Sending transfer confirmation email\")\n        print(\"Recording the bank transfer transaction\")",
      "output": "from abc import ABC, abstractmethod\n\nclass PaymentMethod(ABC):\n    @abstractmethod\n    def process_payment(self, amount):\n        pass\n        \nclass CreditCardPayment(PaymentMethod):\n    def process_payment(self, amount):\n        print(f\"Processing credit card payment of ${amount}\")\n        print(\"Validating credit card information\")\n        print(\"Charging credit card\")\n        print(\"Recording the credit card transaction\")\n\nclass PaypalPayment(PaymentMethod):\n    def process_payment(self, amount):\n        print(f\"Processing PayPal payment of ${amount}\")\n        print(\"Redirecting user to PayPal\")\n        print(\"Confirming PayPal payment\")\n        print(\"Recording the PayPal transaction\")\n\nclass BankTransferPayment(PaymentMethod):\n    def process_payment(self, amount):\n        print(f\"Processing bank transfer of ${amount}\")\n        print(\"Generating bank transfer instructions\")\n        print(\"Sending transfer confirmation email\")\n        print(\"Recording the bank transfer transaction\")\n\nclass PaymentProcessor:\n    def process_payment(self, payment_method, amount):\n        payment_method.process_payment(amount)",
      "level": "MODERATE",
      "language": "PYTHON",
      "violation": "OCP",
      "description": "Payment processing system"
    },
    {
      "input": "class Customer:\n    def __init__(self, name, email):\n        self.name = name\n        self.email = email\n\n    def get_name(self):\n        return self.name\n\n    def get_email(self):\n        return self.email\n\nclass CustomerRepository:\n    def save(self, customer):\n        pass\n\n    def find_by_email(self, email):\n        pass\n\nclass EmailService:\n    def send_email(self, to, subject, body):\n        pass\n\nclass CustomerService:\n    def __init__(self, repository, email_service):\n        self.repository = repository\n        self.email_service = email_service\n\n    def register_customer(self, name, email, customer_type):\n        self.validate_customer_data(name, email)\n\n        customer = Customer(name, email)\n        self.repository.save(customer)\n\n        self.send_welcome_email(customer, customer_type)\n\n        return customer\n\n    def validate_customer_data(self, name, email):\n        if name is None or name.strip() == \"\":\n            raise ValueError(\"Name cannot be empty\")\n\n        if email is None or not re.match(r'^[A-Za-z0-9+_.-]+@(.+)$', email):\n            raise ValueError(\"Invalid email format\")\n\n        if self.repository.find_by_email(email) is not None:\n            raise ValueError(\"Email already registered\")\n\n    def send_welcome_email(self, customer, customer_type):\n        subject = \"Welcome to Our Service\"\n        body = \"\"\n\n        if customer_type == \"standard\":\n            body = f\"Dear {customer.get_name()},\\n\\n\" \\\n                  f\"Welcome to our service! We're excited to have you join us.\\n\\n\" \\\n                  f\"Your account has been created successfully. You can now access all standard features.\\n\\n\" \\\n                  f\"Best regards,\\n\" \\\n                  f\"The Service Team\"\n        elif customer_type == \"premium\":\n            body = f\"Dear {customer.get_name()},\\n\\n\" \\\n                  f\"Welcome to our PREMIUM service! We're thrilled to have you as a premium member.\\n\\n\" \\\n                  f\"Your premium account has been activated with all exclusive features.\\n\" \\\n                  f\"Our premium support team is available 24/7 to assist you.\\n\\n\" \\\n                  f\"Best regards,\\n\" \\\n                  f\"The Premium Service Team\"\n        elif customer_type == \"trial\":\n            body = f\"Dear {customer.get_name()},\\n\\n\" \\\n                  f\"Thank you for trying our service! Your 30-day trial has begun.\\n\\n\" \\\n                  f\"Explore all the features we offer during your trial period.\\n\" \\\n                  f\"We'll send you a reminder before your trial expires.\\n\\n\" \\\n                  f\"Best regards,\\n\" \\\n                  f\"The Service Team\"\n        else:\n            raise ValueError(f\"Unsupported customer type: {customer_type}\")\n\n        self.email_service.send_email(customer.get_email(), subject, body)",
      "output": "from abc import ABC, abstractmethod\nimport re\nfrom typing import Dict\n\nclass Customer:\n    def __init__(self, name, email):\n        self.name = name\n        self.email = email\n\n    def get_name(self):\n        return self.name\n\n    def get_email(self):\n        return self.email\n\nclass CustomerRepository:\n    def save(self, customer):\n        pass\n\n    def find_by_email(self, email):\n        pass\n\nclass EmailService:\n    def send_email(self, to, subject, body):\n        pass\n\nclass WelcomeEmailStrategy(ABC):\n    @abstractmethod\n    def create_email_body(self, customer):\n        pass\n\nclass StandardWelcomeEmailStrategy(WelcomeEmailStrategy):\n    def create_email_body(self, customer):\n        return f\"Dear {customer.get_name()},\\n\\n\" \\\n               f\"Welcome to our service! We're excited to have you join us.\\n\\n\" \\\n               f\"Your account has been created successfully. You can now access all standard features.\\n\\n\" \\\n               f\"Best regards,\\n\" \\\n               f\"The Service Team\"\n\nclass PremiumWelcomeEmailStrategy(WelcomeEmailStrategy):\n    def create_email_body(self, customer):\n        return f\"Dear {customer.get_name()},\\n\\n\" \\\n               f\"Welcome to our PREMIUM service! We're thrilled to have you as a premium member.\\n\\n\" \\\n               f\"Your premium account has been activated with all exclusive features.\\n\" \\\n               f\"Our premium support team is available 24/7 to assist you.\\n\\n\" \\\n               f\"Best regards,\\n\" \\\n               f\"The Premium Service Team\"\n\nclass TrialWelcomeEmailStrategy(WelcomeEmailStrategy):\n    def create_email_body(self, customer):\n        return f\"Dear {customer.get_name()},\\n\\n\" \\\n               f\"Thank you for trying our service! Your 30-day trial has begun.\\n\\n\" \\\n               f\"Explore all the features we offer during your trial period.\\n\" \\\n               f\"We'll send you a reminder before your trial expires.\\n\\n\" \\\n               f\"Best regards,\\n\" \\\n               f\"The Service Team\"\n\nclass CustomerService:\n    def __init__(self, repository, email_service):\n        self.repository = repository\n        self.email_service = email_service\n        self.email_strategies: Dict[str, WelcomeEmailStrategy] = {}\n        self.initialize_email_strategies()\n\n    def initialize_email_strategies(self):\n        self.email_strategies = {\n            \"standard\": StandardWelcomeEmailStrategy(),\n            \"premium\": PremiumWelcomeEmailStrategy(),\n            \"trial\": TrialWelcomeEmailStrategy()\n        }\n\n    def register_email_strategy(self, customer_type, strategy):\n        self.email_strategies[customer_type] = strategy\n\n    def register_customer(self, name, email, customer_type):\n        self.validate_customer_data(name, email)\n\n        customer = Customer(name, email)\n        self.repository.save(customer)\n\n        # Send welcome email based on customer type\n        self.send_welcome_email(customer, customer_type)\n\n        return customer\n\n    def validate_customer_data(self, name, email):\n        if name is None or name.strip() == \"\":\n            raise ValueError(\"Name cannot be empty\")\n\n        if email is None or not re.match(r'^[A-Za-z0-9+_.-]+@(.+)$', email):\n            raise ValueError(\"Invalid email format\")\n\n        if self.repository.find_by_email(email) is not None:\n            raise ValueError(\"Email already registered\")\n\n    def send_welcome_email(self, customer, customer_type):\n        strategy = self.email_strategies.get(customer_type)\n        if strategy is None:\n            raise ValueError(f\"Unsupported customer type: {customer_type}\")\n\n        subject = \"Welcome to Our Service\"\n        body = strategy.create_email_body(customer)\n\n        self.email_service.send_email(customer.get_email(), subject, body)",
      "level": "MODERATE",
      "language": "PYTHON",
      "violation": "OCP",
      "description": "Customer registration email system"
    },
    {
      "input": "import uuid\nfrom typing import Set\n\nclass Document:\n    def __init__(self, title, content, creator):\n        self.id = str(uuid.uuid4())\n        self.title = title\n        self.content = content\n        self.creator = creator\n        self.shared_users = set()\n    \n    def get_id(self):\n        return self.id\n    \n    def get_title(self):\n        return self.title\n    \n    def get_content(self):\n        return self.content\n    \n    def get_creator(self):\n        return self.creator\n    \n    def get_shared_users(self):\n        return self.shared_users\n    \n    def add_shared_user(self, user):\n        self.shared_users.add(user)\n\nclass User:\n    def __init__(self, username, contact_info, preferred_contact_method):\n        self.id = str(uuid.uuid4())\n        self.username = username\n        self.contact_info = contact_info\n        self.preferred_contact_method = preferred_contact_method\n    \n    def get_id(self):\n        return self.id\n    \n    def get_username(self):\n        return self.username\n    \n    def get_contact_info(self):\n        return self.contact_info\n    \n    def get_preferred_contact_method(self):\n        return self.preferred_contact_method\n\nclass DocumentRepository:\n    def save(self, document):\n        pass\n    \n    def update(self, document):\n        pass\n    \n    def find_by_id(self, id):\n        pass\n\nclass SecurityService:\n    def can_share_document(self, document, user):\n        pass\n\nclass Logger:\n    def log(self, message):\n        pass\n\nclass DocumentService:\n    def __init__(self, repository, security_service, logger):\n        self.repository = repository\n        self.security_service = security_service\n        self.logger = logger\n    \n    def create_document(self, title, content, creator):\n        document = Document(title, content, creator)\n        self.repository.save(document)\n        self.logger.log(f\"Document created: {document.get_id()}\")\n        return document\n    \n    def share_document(self, document, recipient, shared_by):\n        self.validate_sharing_permissions(document, shared_by)\n        document.add_shared_user(recipient)\n        self.repository.update(document)\n        self.logger.log(f\"Document {document.get_id()} shared with {recipient.get_username()}\")\n        self.notify_user(document, recipient, shared_by)\n    \n    def validate_sharing_permissions(self, document, user):\n        if not self.security_service.can_share_document(document, user):\n            raise SecurityError(\"User does not have permission to share this document\")\n    \n    def notify_user(self, document, recipient, shared_by):\n        recipient_contact = recipient.get_contact_info()\n        message = f\"Document '{document.get_title()}' has been shared with you by {shared_by.get_username()}\"\n        \n        contact_type = recipient.get_preferred_contact_method()\n        \n        if contact_type == \"email\":\n            self.send_email(recipient_contact, \"Document Shared\", message)\n        elif contact_type == \"sms\":\n            self.send_sms(recipient_contact, message)\n        elif contact_type == \"push\":\n            self.send_push_notification(recipient_contact, \"Document Shared\", message)\n        elif contact_type == \"slack\":\n            self.send_slack_message(recipient_contact, message)\n        else:\n            self.logger.log(f\"Unknown contact method: {contact_type}\")\n    \n    def send_email(self, email, subject, message):\n        print(f\"Sending email to {email}\")\n        print(f\"Subject: {subject}\")\n        print(f\"Message: {message}\")\n    \n    def send_sms(self, phone_number, message):\n        print(f\"Sending SMS to {phone_number}\")\n        print(f\"Message: {message}\")\n    \n    def send_push_notification(self, device_id, title, message):\n        print(f\"Sending push notification to device {device_id}\")\n        print(f\"Title: {title}\")\n        print(f\"Message: {message}\")\n    \n    def send_slack_message(self, slack_user_id, message):\n        print(f\"Sending Slack message to {slack_user_id}\")\n        print(f\"Message: {message}\")\n\nclass SecurityError(Exception):\n    pass",
      "output": "import uuid\nfrom typing import Set, Dict\nfrom abc import ABC, abstractmethod\n\nclass Document:\n    def __init__(self, title, content, creator):\n        self.id = str(uuid.uuid4())\n        self.title = title\n        self.content = content\n        self.creator = creator\n        self.shared_users = set()\n    \n    def get_id(self):\n        return self.id\n    \n    def get_title(self):\n        return self.title\n    \n    def get_content(self):\n        return self.content\n    \n    def get_creator(self):\n        return self.creator\n    \n    def get_shared_users(self):\n        return self.shared_users\n    \n    def add_shared_user(self, user):\n        self.shared_users.add(user)\n\nclass User:\n    def __init__(self, username, contact_info, preferred_contact_method):\n        self.id = str(uuid.uuid4())\n        self.username = username\n        self.contact_info = contact_info\n        self.preferred_contact_method = preferred_contact_method\n    \n    def get_id(self):\n        return self.id\n    \n    def get_username(self):\n        return self.username\n    \n    def get_contact_info(self):\n        return self.contact_info\n    \n    def get_preferred_contact_method(self):\n        return self.preferred_contact_method\n\nclass DocumentRepository:\n    def save(self, document):\n        pass\n    \n    def update(self, document):\n        pass\n    \n    def find_by_id(self, id):\n        pass\n\nclass SecurityService:\n    def can_share_document(self, document, user):\n        pass\n\nclass Logger:\n    def log(self, message):\n        pass\n\nclass NotificationStrategy(ABC):\n    @abstractmethod\n    def send_notification(self, contact_info, subject, message):\n        pass\n\nclass EmailNotificationStrategy(NotificationStrategy):\n    def send_notification(self, email, subject, message):\n        print(f\"Sending email to {email}\")\n        print(f\"Subject: {subject}\")\n        print(f\"Message: {message}\")\n        # Email sending logic would go here\n\nclass SMSNotificationStrategy(NotificationStrategy):\n    def send_notification(self, phone_number, subject, message):\n        print(f\"Sending SMS to {phone_number}\")\n        print(f\"Message: {message}\")\n        # SMS sending logic would go here\n\nclass PushNotificationStrategy(NotificationStrategy):\n    def send_notification(self, device_id, subject, message):\n        print(f\"Sending push notification to device {device_id}\")\n        print(f\"Title: {subject}\")\n        print(f\"Message: {message}\")\n        # Push notification logic would go here\n\nclass SlackNotificationStrategy(NotificationStrategy):\n    def send_notification(self, slack_user_id, subject, message):\n        print(f\"Sending Slack message to {slack_user_id}\")\n        print(f\"Message: {message}\")\n        # Slack messaging logic would go here\n\nclass DocumentService:\n    def __init__(self, repository, security_service, logger):\n        self.repository = repository\n        self.security_service = security_service\n        self.logger = logger\n        self.notification_strategies: Dict[str, NotificationStrategy] = {}\n        self.initialize_notification_strategies()\n    \n    def initialize_notification_strategies(self):\n        self.notification_strategies = {\n            \"email\": EmailNotificationStrategy(),\n            \"sms\": SMSNotificationStrategy(),\n            \"push\": PushNotificationStrategy(),\n            \"slack\": SlackNotificationStrategy()\n        }\n    \n    def register_notification_strategy(self, type, strategy):\n        self.notification_strategies[type] = strategy\n    \n    def create_document(self, title, content, creator):\n        document = Document(title, content, creator)\n        self.repository.save(document)\n        self.logger.log(f\"Document created: {document.get_id()}\")\n        return document\n    \n    def share_document(self, document, recipient, shared_by):\n        self.validate_sharing_permissions(document, shared_by)\n        document.add_shared_user(recipient)\n        self.repository.update(document)\n        self.logger.log(f\"Document {document.get_id()} shared with {recipient.get_username()}\")\n        self.notify_user(document, recipient, shared_by)\n    \n    def validate_sharing_permissions(self, document, user):\n        if not self.security_service.can_share_document(document, user):\n            raise SecurityError(\"User does not have permission to share this document\")\n    \n    def notify_user(self, document, recipient, shared_by):\n        recipient_contact = recipient.get_contact_info()\n        message = f\"Document '{document.get_title()}' has been shared with you by {shared_by.get_username()}\"\n        \n        # Notification logic based on recipient's preferred contact method\n        contact_type = recipient.get_preferred_contact_method()\n        strategy = self.notification_strategies.get(contact_type)\n        \n        if strategy:\n            strategy.send_notification(recipient_contact, \"Document Shared\", message)\n        else:\n            self.logger.log(f\"Unknown contact method: {contact_type}\")\n\nclass SecurityError(Exception):\n    pass",
      "level": "MODERATE",
      "language": "PYTHON",
      "violation": "OCP",

      "description": "Document sharing notification system"
    },
    {
      "input": "class Report:\n    def __init__(self, id, title):\n        self.id = id\n        self.title = title\n    \n    def get_id(self):\n        return self.id\n    \n    def get_title(self):\n        return self.title\n\nclass ReportData:\n    pass\n\nclass PdfDocument:\n    def generate(self):\n        return bytes()\n\nclass ExcelDocument:\n    def generate(self):\n        return bytes()\n\nclass ExportResult:\n    def __init__(self, success, message, output_path):\n        self.success = success\n        self.message = message\n        self.output_path = output_path\n\nclass DataSource:\n    def get_report(self, report_id):\n        pass\n    \n    def get_report_data(self, report_id):\n        pass\n\nclass FileSystem:\n    def write_file(self, path, data):\n        pass\n\nclass ReportExporter:\n    def __init__(self, data_source, file_system):\n        self.data_source = data_source\n        self.file_system = file_system\n    \n    def export_report(self, report_id, export_format, destination):\n        report = self.data_source.get_report(report_id)\n        \n        if report is None:\n            return ExportResult(False, \"Report not found\", None)\n        \n        report_data = self.generate_report_data(report, export_format)\n        if report_data is None:\n            return ExportResult(False, \"Failed to generate report\", None)\n        \n        file_name = report.get_title() + self.get_file_extension(export_format)\n        self.file_system.write_file(destination + \"/\" + file_name, report_data)\n        return ExportResult(True, \"Report exported successfully\", destination + \"/\" + file_name)\n    \n    def generate_report_data(self, report, export_format):\n        try:\n            data = self.data_source.get_report_data(report.get_id())\n            \n            if export_format == \"pdf\":\n                document = PdfDocument()\n                return document.generate()\n                \n            elif export_format == \"excel\":\n                document = ExcelDocument()\n                return document.generate()\n                \n            elif export_format == \"html\":\n                html = \"\"\n                return html.encode()\n                \n            elif export_format == \"csv\":\n                csv = \"\"\n                return csv.encode()\n            \n        except Exception as e:\n            return None\n        return None\n    \n    def get_file_extension(self, format):\n        if format == \"pdf\":\n            return \".pdf\"\n        elif format == \"excel\":\n            return \".xlsx\"\n        elif format == \"html\":\n            return \".html\"\n        elif format == \"csv\":\n            return \".csv\"\n        else:\n            return \".txt\"",
      "output": "from abc import ABC, abstractmethod\nfrom typing import Dict\n\nclass Report:\n    def __init__(self, id, title):\n        self.id = id\n        self.title = title\n    \n    def get_id(self):\n        return self.id\n    \n    def get_title(self):\n        return self.title\n\nclass ReportData:\n    pass\n\nclass PdfDocument:\n    def generate(self):\n        return bytes()\n\nclass ExcelDocument:\n    def generate(self):\n        return bytes()\n\nclass ExportResult:\n    def __init__(self, success, message, output_path):\n        self.success = success\n        self.message = message\n        self.output_path = output_path\n\nclass DataSource:\n    def get_report(self, report_id):\n        pass\n    \n    def get_report_data(self, report_id):\n        pass\n\nclass FileSystem:\n    def write_file(self, path, data):\n        pass\n\nclass ExportFormatStrategy(ABC):\n    @abstractmethod\n    def generate_report(self, report, data):\n        pass\n    \n    @abstractmethod\n    def get_file_extension(self):\n        pass\n\nclass PdfExportStrategy(ExportFormatStrategy):\n    def generate_report(self, report, data):\n        document = PdfDocument()\n        return document.generate()\n    \n    def get_file_extension(self):\n        return \".pdf\"\n\nclass ExcelExportStrategy(ExportFormatStrategy):\n    def generate_report(self, report, data):\n        document = ExcelDocument()\n        return document.generate()\n    \n    def get_file_extension(self):\n        return \".xlsx\"\n\nclass HtmlExportStrategy(ExportFormatStrategy):\n    def generate_report(self, report, data):\n        html = \"\"\n        return html.encode()\n    \n    def get_file_extension(self):\n        return \".html\"\n\nclass CsvExportStrategy(ExportFormatStrategy):\n    def generate_report(self, report, data):\n        csv = \"\"\n        return csv.encode()\n    \n    def get_file_extension(self):\n        return \".csv\"\n\nclass ReportExporter:\n    def __init__(self, data_source, file_system):\n        self.data_source = data_source\n        self.file_system = file_system\n        self.export_strategies: Dict[str, ExportFormatStrategy] = {}\n        self.initialize_export_strategies()\n    \n    def initialize_export_strategies(self):\n        self.export_strategies = {\n            \"pdf\": PdfExportStrategy(),\n            \"excel\": ExcelExportStrategy(),\n            \"html\": HtmlExportStrategy(),\n            \"csv\": CsvExportStrategy()\n        }\n    \n    def register_export_strategy(self, format, strategy):\n        self.export_strategies[format] = strategy\n    \n    def export_report(self, report_id, export_format, destination):\n        report = self.data_source.get_report(report_id)\n        \n        if report is None:\n            return ExportResult(False, \"Report not found\", None)\n        \n        report_data = self.generate_report_data(report, export_format)\n        if report_data is None:\n            return ExportResult(False, \"Failed to generate report\", None)\n        \n        file_name = report.get_title() + self.get_file_extension(export_format)\n        self.file_system.write_file(destination + \"/\" + file_name, report_data)\n        return ExportResult(True, \"Report exported successfully\", destination + \"/\" + file_name)\n    \n    def generate_report_data(self, report, export_format):\n        try:\n            data = self.data_source.get_report_data(report.get_id())\n            strategy = self.export_strategies.get(export_format)\n            \n            if strategy:\n                return strategy.generate_report(report, data)\n        except Exception as e:\n            return None\n        return None\n    \n    def get_file_extension(self, format):\n        strategy = self.export_strategies.get(format)\n        return strategy.get_file_extension() if strategy else \".txt\"",
      "level": "MODERATE",
      "language": "PYTHON",
      "violation": "OCP",
      "description": "Report export format system"
    },
    {
      "input": "from datetime import datetime\nfrom typing import List, Dict, Set\nfrom collections import defaultdict\n\nclass SalesData:\n    def __init__(self, sales: List['Sale'], company_name: str, reporting_period: str):\n        self.sales = sales\n        self.company_name = company_name\n        self.reporting_period = reporting_period\n    \n    def get_sales(self) -> List['Sale']:\n        return self.sales\n    \n    def get_company_name(self) -> str:\n        return self.company_name\n    \n    def get_reporting_period(self) -> str:\n        return self.reporting_period\n    \n    def add_sale(self, sale: 'Sale'):\n        self.sales.append(sale)\n    \n    def get_sales_by_region(self, region: str) -> List['Sale']:\n        return [sale for sale in self.sales if sale.region == region]\n\nclass Sale:\n    def __init__(self, product_name: str, product_category: str, amount: float, \n                 quantity: int, date: datetime, region: str, sales_person: str, \n                 customer_id: str, discount: float):\n        self.product_name = product_name\n        self.product_category = product_category\n        self.amount = amount\n        self.quantity = quantity\n        self.date = date\n        self.region = region\n        self.sales_person = sales_person\n        self.customer_id = customer_id\n        self.discount = discount\n    \n    def get_product_name(self) -> str:\n        return self.product_name\n    \n    def get_product_category(self) -> str:\n        return self.product_category\n    \n    def get_amount(self) -> float:\n        return self.amount\n    \n    def get_quantity(self) -> int:\n        return self.quantity\n    \n    def get_date(self) -> datetime:\n        return self.date\n    \n    def get_region(self) -> str:\n        return self.region\n    \n    def get_sales_person(self) -> str:\n        return self.sales_person\n    \n    def get_customer_id(self) -> str:\n        return self.customer_id\n    \n    def get_discount(self) -> float:\n        return self.discount\n    \n    def get_net_amount(self) -> float:\n        return self.amount - self.discount\n\nclass ReportGenerator:\n    def __init__(self):\n        self.currency_format = \"${:,.2f}\"\n        self.date_format = \"%Y-%m-%d\"\n    \n    def generate_report(self, report_type: str, data: SalesData) -> str:\n        report_lines = []\n        \n        # Add header\n        report_lines.extend([\n            \"===================================\",\n            f\"    {data.get_company_name()}\",\n            f\"  Reporting Period: {data.get_reporting_period()}\",\n            \"===================================\",\n            \"\"\n        ])\n        \n        if report_type == \"daily\":\n            report_lines.extend([\n                \"DAILY SALES REPORT\",\n                \"===================\",\n                \"\"\n            ])\n            \n            daily_sales = defaultdict(float)\n            daily_quantities = defaultdict(int)\n            \n            for sale in data.get_sales():\n                date_str = sale.get_date().strftime(self.date_format)\n                daily_sales[date_str] += sale.get_net_amount()\n                daily_quantities[date_str] += sale.get_quantity()\n            \n            for date_str in sorted(daily_sales.keys()):\n                sales_amount = daily_sales[date_str]\n                units_sold = daily_quantities[date_str]\n                report_lines.append(\n                    f\"Date: {date_str}, Total Sales: {self.currency_format.format(sales_amount)}, \"\n                    f\"Units Sold: {units_sold}\"\n                )\n            \n            total_sales = sum(daily_sales.values())\n            total_units = sum(daily_quantities.values())\n            avg_daily_sales = total_sales / len(daily_sales) if daily_sales else 0\n            \n            report_lines.extend([\n                \"\",\n                f\"Grand Total: {self.currency_format.format(total_sales)}\",\n                f\"Total Units: {total_units}\",\n                f\"Average Daily Sales: {self.currency_format.format(avg_daily_sales)}\"\n            ])\n        \n        elif report_type == \"product\":\n            report_lines.extend([\n                \"PRODUCT SALES REPORT\",\n                \"====================\",\n                \"\"\n            ])\n            \n            product_sales = defaultdict(float)\n            product_quantities = defaultdict(int)\n            product_categories = {}\n            \n            for sale in data.get_sales():\n                product = sale.get_product_name()\n                product_sales[product] += sale.get_net_amount()\n                product_quantities[product] += sale.get_quantity()\n                product_categories[product] = sale.get_product_category()\n            \n            # Sort by sales amount descending\n            sorted_products = sorted(product_sales.items(), key=lambda x: x[1], reverse=True)\n            \n            for product, sales_amount in sorted_products:\n                units_sold = product_quantities[product]\n                category = product_categories[product]\n                avg_price = sales_amount / units_sold if units_sold > 0 else 0\n                \n                report_lines.extend([\n                    f\"Product: {product} (Category: {category})\",\n                    f\"  Sales: {self.currency_format.format(sales_amount)}, \"\n                    f\"Units: {units_sold}, \"\n                    f\"Avg Price: {self.currency_format.format(avg_price)}\",\n                    \"\"\n                ])\n            \n            total_product_sales = sum(product_sales.values())\n            report_lines.append(f\"Total Product Sales: {self.currency_format.format(total_product_sales)}\")\n        \n        elif report_type == \"regional\":\n            report_lines.extend([\n                \"REGIONAL SALES REPORT\",\n                \"=====================\",\n                \"\"\n            ])\n            \n            regional_sales = defaultdict(float)\n            regional_customers = defaultdict(set)\n            regional_salespeople = defaultdict(set)\n            \n            for sale in data.get_sales():\n                region = sale.get_region()\n                regional_sales[region] += sale.get_net_amount()\n                regional_customers[region].add(sale.get_customer_id())\n                regional_salespeople[region].add(sale.get_sales_person())\n            \n            for region, sales_amount in regional_sales.items():\n                customer_count = len(regional_customers[region])\n                sales_team_size = len(regional_salespeople[region])\n                avg_sales_per_customer = sales_amount / customer_count if customer_count > 0 else 0\n                \n                report_lines.extend([\n                    f\"Region: {region}\",\n                    f\"  Total Sales: {self.currency_format.format(sales_amount)}\",\n                    f\"  Unique Customers: {customer_count}\",\n                    f\"  Sales Team Size: {sales_team_size}\",\n                    f\"  Avg Sales per Customer: {self.currency_format.format(avg_sales_per_customer)}\",\n                    \"\"\n                ])\n            \n            total_regional_sales = sum(regional_sales.values())\n            report_lines.append(f\"Total Regional Sales: {self.currency_format.format(total_regional_sales)}\")\n        \n        elif report_type == \"salesperson\":\n            report_lines.extend([\n                \"SALESPERSON PERFORMANCE REPORT\",\n                \"==============================\",\n                \"\"\n            ])\n            \n            salesperson_sales = defaultdict(float)\n            salesperson_customers = defaultdict(set)\n            salesperson_regions = {}\n            \n            for sale in data.get_sales():\n                salesperson = sale.get_sales_person()\n                salesperson_sales[salesperson] += sale.get_net_amount()\n                salesperson_customers[salesperson].add(sale.get_customer_id())\n                salesperson_regions[salesperson] = sale.get_region()\n            \n            # Sort by performance\n            sorted_salespeople = sorted(salesperson_sales.items(), key=lambda x: x[1], reverse=True)\n            \n            for rank, (salesperson, sales_amount) in enumerate(sorted_salespeople, 1):\n                customer_count = len(salesperson_customers[salesperson])\n                region = salesperson_regions[salesperson]\n                avg_sale_per_customer = sales_amount / customer_count if customer_count > 0 else 0\n                \n                report_lines.extend([\n                    f\"#{rank} {salesperson} (Region: {region})\",\n                    f\"  Total Sales: {self.currency_format.format(sales_amount)}\",\n                    f\"  Customers Served: {customer_count}\",\n                    f\"  Avg Sale per Customer: {self.currency_format.format(avg_sale_per_customer)}\",\n                    \"\"\n                ])\n        \n        elif report_type == \"category\":\n            report_lines.extend([\n                \"CATEGORY ANALYSIS REPORT\",\n                \"========================\",\n                \"\"\n            ])\n            \n            category_sales = defaultdict(float)\n            category_quantities = defaultdict(int)\n            category_products = defaultdict(set)\n            \n            for sale in data.get_sales():\n                category = sale.get_product_category()\n                category_sales[category] += sale.get_net_amount()\n                category_quantities[category] += sale.get_quantity()\n                category_products[category].add(sale.get_product_name())\n            \n            total_sales = sum(category_sales.values())\n            \n            for category, sales_amount in category_sales.items():\n                units_sold = category_quantities[category]\n                product_variety = len(category_products[category])\n                percentage = (sales_amount / total_sales * 100) if total_sales > 0 else 0\n                \n                report_lines.extend([\n                    f\"Category: {category}\",\n                    f\"  Sales: {self.currency_format.format(sales_amount)} ({percentage:.1f}% of total)\",\n                    f\"  Units Sold: {units_sold}\",\n                    f\"  Product Variety: {product_variety} products\",\n                    \"\"\n                ])\n        \n        elif report_type == \"quarterly\":\n            report_lines.extend([\n                \"QUARTERLY PERFORMANCE REPORT\",\n                \"============================\",\n                \"\"\n            ])\n            \n            quarterly_sales = defaultdict(float)\n            quarterly_quantities = defaultdict(int)\n            \n            for sale in data.get_sales():\n                quarter = f\"Q{(sale.get_date().month - 1) // 3 + 1} {sale.get_date().year}\"\n                quarterly_sales[quarter] += sale.get_net_amount()\n                quarterly_quantities[quarter] += sale.get_quantity()\n            \n            for quarter in sorted(quarterly_sales.keys()):\n                sales_amount = quarterly_sales[quarter]\n                units_sold = quarterly_quantities[quarter]\n                report_lines.append(\n                    f\"Quarter: {quarter}, Sales: {self.currency_format.format(sales_amount)}, \"\n                    f\"Units: {units_sold}\"\n                )\n            \n            total_quarterly_sales = sum(quarterly_sales.values())\n            report_lines.append(f\"\\nTotal Quarterly Sales: {self.currency_format.format(total_quarterly_sales)}\")\n        \n        elif report_type == \"monthly\":\n            report_lines.extend([\n                \"MONTHLY SALES BREAKDOWN\",\n                \"=======================\",\n                \"\"\n            ])\n            \n            monthly_sales = defaultdict(float)\n            monthly_returns = defaultdict(float)\n            \n            for sale in data.get_sales():\n                month_year = sale.get_date().strftime(\"%Y-%m\")\n                monthly_sales[month_year] += sale.get_net_amount()\n                monthly_returns[month_year] += sale.get_discount()\n            \n            for month in sorted(monthly_sales.keys()):\n                sales_amount = monthly_sales[month]\n                returns_amount = monthly_returns[month]\n                net_performance = sales_amount + returns_amount\n                \n                report_lines.extend([\n                    f\"Month: {month}\",\n                    f\"  Net Sales: {self.currency_format.format(sales_amount)}\",\n                    f\"  Discounts Given: {self.currency_format.format(returns_amount)}\",\n                    f\"  Gross Revenue: {self.currency_format.format(net_performance)}\",\n                    \"\"\n                ])\n        \n        # Add footer\n        report_lines.extend([\n            \"\",\n            \"===================================\",\n            f\"Report Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\",\n            \"===================================\"\n        ])\n        \n        return \"\\n\".join(report_lines)\n    \n    def generate_summary_report(self, data: SalesData) -> str:\n        summary_lines = [\n            \"EXECUTIVE SUMMARY\",\n            \"=================\",\n            \"\"\n        ]\n        \n        total_sales = sum(sale.get_net_amount() for sale in data.get_sales())\n        total_transactions = len(data.get_sales())\n        avg_transaction = total_sales / total_transactions if total_transactions > 0 else 0\n        \n        unique_customers = set(sale.get_customer_id() for sale in data.get_sales())\n        unique_products = set(sale.get_product_name() for sale in data.get_sales())\n        unique_regions = set(sale.get_region() for sale in data.get_sales())\n        \n        summary_lines.extend([\n            f\"Total Sales: {self.currency_format.format(total_sales)}\",\n            f\"Total Transactions: {total_transactions}\",\n            f\"Average Transaction: {self.currency_format.format(avg_transaction)}\",\n            f\"Unique Customers: {len(unique_customers)}\",\n            f\"Unique Products: {len(unique_products)}\",\n            f\"Active Regions: {len(unique_regions)}\"\n        ])\n        \n        return \"\\n\".join(summary_lines)\n    \n    def generate_comparative_report(self, data: SalesData, comparison_period: str) -> str:\n        comparative_lines = [\n            \"COMPARATIVE ANALYSIS REPORT\",\n            \"===========================\",\n            \"\"\n        ]\n        \n        # This would compare with previous period data\n        # For now, just showing structure\n        total_sales = sum(sale.get_net_amount() for sale in data.get_sales())\n        \n        comparative_lines.extend([\n            f\"Current Period Sales: {self.currency_format.format(total_sales)}\",\n            f\"Comparison Period: {comparison_period}\",\n            \"Note: Comparison data would be calculated here\"\n        ])\n        \n        return \"\\n\".join(comparative_lines)",
      "output": "from datetime import datetime\nfrom typing import List, Dict, Set, Optional\nfrom collections import defaultdict\nfrom abc import ABC, abstractmethod\n\nclass SalesData:\n    def __init__(self, sales: List['Sale'], company_name: str, reporting_period: str):\n        self.sales = sales\n        self.company_name = company_name\n        self.reporting_period = reporting_period\n    \n    def get_sales(self) -> List['Sale']:\n        return self.sales\n    \n    def get_company_name(self) -> str:\n        return self.company_name\n    \n    def get_reporting_period(self) -> str:\n        return self.reporting_period\n    \n    def add_sale(self, sale: 'Sale'):\n        self.sales.append(sale)\n    \n    def get_sales_by_region(self, region: str) -> List['Sale']:\n        return [sale for sale in self.sales if sale.region == region]\n\nclass Sale:\n    def __init__(self, product_name: str, product_category: str, amount: float, \n                 quantity: int, date: datetime, region: str, sales_person: str, \n                 customer_id: str, discount: float):\n        self.product_name = product_name\n        self.product_category = product_category\n        self.amount = amount\n        self.quantity = quantity\n        self.date = date\n        self.region = region\n        self.sales_person = sales_person\n        self.customer_id = customer_id\n        self.discount = discount\n    \n    def get_product_name(self) -> str:\n        return self.product_name\n    \n    def get_product_category(self) -> str:\n        return self.product_category\n    \n    def get_amount(self) -> float:\n        return self.amount\n    \n    def get_quantity(self) -> int:\n        return self.quantity\n    \n    def get_date(self) -> datetime:\n        return self.date\n    \n    def get_region(self) -> str:\n        return self.region\n    \n    def get_sales_person(self) -> str:\n        return self.sales_person\n    \n    def get_customer_id(self) -> str:\n        return self.customer_id\n    \n    def get_discount(self) -> float:\n        return self.discount\n    \n    def get_net_amount(self) -> float:\n        return self.amount - self.discount\n\nclass ReportStrategy(ABC):\n    @abstractmethod\n    def generate_report(self, data: SalesData) -> str:\n        pass\n    \n    @abstractmethod\n    def get_report_title(self) -> str:\n        pass\n\nclass BaseReportStrategy(ReportStrategy):\n    def __init__(self):\n        self.currency_format = \"${:,.2f}\"\n        self.date_format = \"%Y-%m-%d\"\n    \n    def generate_header(self, data: SalesData) -> List[str]:\n        return [\n            \"===================================\",\n            f\"    {data.get_company_name()}\",\n            f\"  Reporting Period: {data.get_reporting_period()}\",\n            \"===================================\",\n            \"\"\n        ]\n    \n    def generate_footer(self) -> List[str]:\n        return [\n            \"\",\n            \"===================================\",\n            f\"Report Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\",\n            \"===================================\"\n        ]\n\nclass DailyReportStrategy(BaseReportStrategy):\n    def get_report_title(self) -> str:\n        return \"DAILY SALES REPORT\"\n    \n    def generate_report(self, data: SalesData) -> str:\n        report_lines = self.generate_header(data)\n        \n        report_lines.extend([\n            self.get_report_title(),\n            \"===================\",\n            \"\"\n        ])\n        \n        daily_sales = defaultdict(float)\n        daily_quantities = defaultdict(int)\n        \n        for sale in data.get_sales():\n            date_str = sale.get_date().strftime(self.date_format)\n            daily_sales[date_str] += sale.get_net_amount()\n            daily_quantities[date_str] += sale.get_quantity()\n        \n        for date_str in sorted(daily_sales.keys()):\n            sales_amount = daily_sales[date_str]\n            units_sold = daily_quantities[date_str]\n            report_lines.append(\n                f\"Date: {date_str}, Total Sales: {self.currency_format.format(sales_amount)}, \"\n                f\"Units Sold: {units_sold}\"\n            )\n        \n        total_sales = sum(daily_sales.values())\n        total_units = sum(daily_quantities.values())\n        avg_daily_sales = total_sales / len(daily_sales) if daily_sales else 0\n        \n        report_lines.extend([\n            \"\",\n            f\"Grand Total: {self.currency_format.format(total_sales)}\",\n            f\"Total Units: {total_units}\",\n            f\"Average Daily Sales: {self.currency_format.format(avg_daily_sales)}\"\n        ])\n        \n        report_lines.extend(self.generate_footer())\n        return \"\\n\".join(report_lines)\n\nclass ProductReportStrategy(BaseReportStrategy):\n    def get_report_title(self) -> str:\n        return \"PRODUCT SALES REPORT\"\n    \n    def generate_report(self, data: SalesData) -> str:\n        report_lines = self.generate_header(data)\n        \n        report_lines.extend([\n            self.get_report_title(),\n            \"====================\",\n            \"\"\n        ])\n        \n        product_sales = defaultdict(float)\n        product_quantities = defaultdict(int)\n        product_categories = {}\n        \n        for sale in data.get_sales():\n            product = sale.get_product_name()\n            product_sales[product] += sale.get_net_amount()\n            product_quantities[product] += sale.get_quantity()\n            product_categories[product] = sale.get_product_category()\n        \n        # Sort by sales amount descending\n        sorted_products = sorted(product_sales.items(), key=lambda x: x[1], reverse=True)\n        \n        for product, sales_amount in sorted_products:\n            units_sold = product_quantities[product]\n            category = product_categories[product]\n            avg_price = sales_amount / units_sold if units_sold > 0 else 0\n            \n            report_lines.extend([\n                f\"Product: {product} (Category: {category})\",\n                f\"  Sales: {self.currency_format.format(sales_amount)}, \"\n                f\"Units: {units_sold}, \"\n                f\"Avg Price: {self.currency_format.format(avg_price)}\",\n                \"\"\n            ])\n        \n        total_product_sales = sum(product_sales.values())\n        report_lines.append(f\"Total Product Sales: {self.currency_format.format(total_product_sales)}\")\n        \n        report_lines.extend(self.generate_footer())\n        return \"\\n\".join(report_lines)\n\nclass RegionalReportStrategy(BaseReportStrategy):\n    def get_report_title(self) -> str:\n        return \"REGIONAL SALES REPORT\"\n    \n    def generate_report(self, data: SalesData) -> str:\n        report_lines = self.generate_header(data)\n        \n        report_lines.extend([\n            self.get_report_title(),\n            \"=====================\",\n            \"\"\n        ])\n        \n        regional_sales = defaultdict(float)\n        regional_customers = defaultdict(set)\n        regional_salespeople = defaultdict(set)\n        \n        for sale in data.get_sales():\n            region = sale.get_region()\n            regional_sales[region] += sale.get_net_amount()\n            regional_customers[region].add(sale.get_customer_id())\n            regional_salespeople[region].add(sale.get_sales_person())\n        \n        for region, sales_amount in regional_sales.items():\n            customer_count = len(regional_customers[region])\n            sales_team_size = len(regional_salespeople[region])\n            avg_sales_per_customer = sales_amount / customer_count if customer_count > 0 else 0\n            \n            report_lines.extend([\n                f\"Region: {region}\",\n                f\"  Total Sales: {self.currency_format.format(sales_amount)}\",\n                f\"  Unique Customers: {customer_count}\",\n                f\"  Sales Team Size: {sales_team_size}\",\n                f\"  Avg Sales per Customer: {self.currency_format.format(avg_sales_per_customer)}\",\n                \"\"\n            ])\n        \n        total_regional_sales = sum(regional_sales.values())\n        report_lines.append(f\"Total Regional Sales: {self.currency_format.format(total_regional_sales)}\")\n        \n        report_lines.extend(self.generate_footer())\n        return \"\\n\".join(report_lines)\n\nclass SalespersonReportStrategy(BaseReportStrategy):\n    def get_report_title(self) -> str:\n        return \"SALESPERSON PERFORMANCE REPORT\"\n    \n    def generate_report(self, data: SalesData) -> str:\n        report_lines = self.generate_header(data)\n        \n        report_lines.extend([\n            self.get_report_title(),\n            \"==============================\",\n            \"\"\n        ])\n        \n        salesperson_sales = defaultdict(float)\n        salesperson_customers = defaultdict(set)\n        salesperson_regions = {}\n        \n        for sale in data.get_sales():\n            salesperson = sale.get_sales_person()\n            salesperson_sales[salesperson] += sale.get_net_amount()\n            salesperson_customers[salesperson].add(sale.get_customer_id())\n            salesperson_regions[salesperson] = sale.get_region()\n        \n        # Sort by performance\n        sorted_salespeople = sorted(salesperson_sales.items(), key=lambda x: x[1], reverse=True)\n        \n        for rank, (salesperson, sales_amount) in enumerate(sorted_salespeople, 1):\n            customer_count = len(salesperson_customers[salesperson])\n            region = salesperson_regions[salesperson]\n            avg_sale_per_customer = sales_amount / customer_count if customer_count > 0 else 0\n            \n            report_lines.extend([\n                f\"#{rank} {salesperson} (Region: {region})\",\n                f\"  Total Sales: {self.currency_format.format(sales_amount)}\",\n                f\"  Customers Served: {customer_count}\",\n                f\"  Avg Sale per Customer: {self.currency_format.format(avg_sale_per_customer)}\",\n                \"\"\n            ])\n        \n        report_lines.extend(self.generate_footer())\n        return \"\\n\".join(report_lines)\n\nclass CategoryReportStrategy(BaseReportStrategy):\n    def get_report_title(self) -> str:\n        return \"CATEGORY ANALYSIS REPORT\"\n    \n    def generate_report(self, data: SalesData) -> str:\n        report_lines = self.generate_header(data)\n        \n        report_lines.extend([\n            self.get_report_title(),\n            \"========================\",\n            \"\"\n        ])\n        \n        category_sales = defaultdict(float)\n        category_quantities = defaultdict(int)\n        category_products = defaultdict(set)\n        \n        for sale in data.get_sales():\n            category = sale.get_product_category()\n            category_sales[category] += sale.get_net_amount()\n            category_quantities[category] += sale.get_quantity()\n            category_products[category].add(sale.get_product_name())\n        \n        total_sales = sum(category_sales.values())\n        \n        for category, sales_amount in category_sales.items():\n            units_sold = category_quantities[category]\n            product_variety = len(category_products[category])\n            percentage = (sales_amount / total_sales * 100) if total_sales > 0 else 0\n            \n            report_lines.extend([\n                f\"Category: {category}\",\n                f\"  Sales: {self.currency_format.format(sales_amount)} ({percentage:.1f}% of total)\",\n                f\"  Units Sold: {units_sold}\",\n                f\"  Product Variety: {product_variety} products\",\n                \"\"\n            ])\n        \n        report_lines.extend(self.generate_footer())\n        return \"\\n\".join(report_lines)\n\nclass QuarterlyReportStrategy(BaseReportStrategy):\n    def get_report_title(self) -> str:\n        return \"QUARTERLY PERFORMANCE REPORT\"\n    \n    def generate_report(self, data: SalesData) -> str:\n        report_lines = self.generate_header(data)\n        \n        report_lines.extend([\n            self.get_report_title(),\n            \"============================\",\n            \"\"\n        ])\n        \n        quarterly_sales = defaultdict(float)\n        quarterly_quantities = defaultdict(int)\n        \n        for sale in data.get_sales():\n            quarter = f\"Q{(sale.get_date().month - 1) // 3 + 1} {sale.get_date().year}\"\n            quarterly_sales[quarter] += sale.get_net_amount()\n            quarterly_quantities[quarter] += sale.get_quantity()\n        \n        for quarter in sorted(quarterly_sales.keys()):\n            sales_amount = quarterly_sales[quarter]\n            units_sold = quarterly_quantities[quarter]\n            report_lines.append(\n                f\"Quarter: {quarter}, Sales: {self.currency_format.format(sales_amount)}, \"\n                f\"Units: {units_sold}\"\n            )\n        \n        total_quarterly_sales = sum(quarterly_sales.values())\n        report_lines.append(f\"\\nTotal Quarterly Sales: {self.currency_format.format(total_quarterly_sales)}\")\n        \n        report_lines.extend(self.generate_footer())\n        return \"\\n\".join(report_lines)\n\nclass MonthlyReportStrategy(BaseReportStrategy):\n    def get_report_title(self) -> str:\n        return \"MONTHLY SALES BREAKDOWN\"\n    \n    def generate_report(self, data: SalesData) -> str:\n        report_lines = self.generate_header(data)\n        \n        report_lines.extend([\n            self.get_report_title(),\n            \"=======================\",\n            \"\"\n        ])\n        \n        monthly_sales = defaultdict(float)\n        monthly_returns = defaultdict(float)\n        \n        for sale in data.get_sales():\n            month_year = sale.get_date().strftime(\"%Y-%m\")\n            monthly_sales[month_year] += sale.get_net_amount()\n            monthly_returns[month_year] += sale.get_discount()\n        \n        for month in sorted(monthly_sales.keys()):\n            sales_amount = monthly_sales[month]\n            returns_amount = monthly_returns[month]\n            net_performance = sales_amount + returns_amount\n            \n            report_lines.extend([\n                f\"Month: {month}\",\n                f\"  Net Sales: {self.currency_format.format(sales_amount)}\",\n                f\"  Discounts Given: {self.currency_format.format(returns_amount)}\",\n                f\"  Gross Revenue: {self.currency_format.format(net_performance)}\",\n                \"\"\n            ])\n        \n        report_lines.extend(self.generate_footer())\n        return \"\\n\".join(report_lines)\n\nclass SummaryReportStrategy(BaseReportStrategy):\n    def get_report_title(self) -> str:\n        return \"EXECUTIVE SUMMARY\"\n    \n    def generate_report(self, data: SalesData) -> str:\n        report_lines = self.generate_header(data)\n        \n        report_lines.extend([\n            self.get_report_title(),\n            \"=================\",\n            \"\"\n        ])\n        \n        total_sales = sum(sale.get_net_amount() for sale in data.get_sales())\n        total_transactions = len(data.get_sales())\n        avg_transaction = total_sales / total_transactions if total_transactions > 0 else 0\n        \n        unique_customers = set(sale.get_customer_id() for sale in data.get_sales())\n        unique_products = set(sale.get_product_name() for sale in data.get_sales())\n        unique_regions = set(sale.get_region() for sale in data.get_sales())\n        \n        report_lines.extend([\n            f\"Total Sales: {self.currency_format.format(total_sales)}\",\n            f\"Total Transactions: {total_transactions}\",\n            f\"Average Transaction: {self.currency_format.format(avg_transaction)}\",\n            f\"Unique Customers: {len(unique_customers)}\",\n            f\"Unique Products: {len(unique_products)}\",\n            f\"Active Regions: {len(unique_regions)}\"\n        ])\n        \n        # Top performing metrics\n        if data.get_sales():\n            product_sales = defaultdict(float)\n            region_sales = defaultdict(float)\n            \n            for sale in data.get_sales():\n                product_sales[sale.get_product_name()] += sale.get_net_amount()\n                region_sales[sale.get_region()] += sale.get_net_amount()\n            \n            top_product = max(product_sales.items(), key=lambda x: x[1])[0] if product_sales else \"N/A\"\n            top_region = max(region_sales.items(), key=lambda x: x[1])[0] if region_sales else \"N/A\"\n            \n            report_lines.extend([\n                \"\",\n                f\"Top Performing Product: {top_product}\",\n                f\"Top Performing Region: {top_region}\"\n            ])\n        \n        report_lines.extend(self.generate_footer())\n        return \"\\n\".join(report_lines)\n\nclass ComparativeReportStrategy(BaseReportStrategy):\n    def __init__(self, comparison_period: str):\n        super().__init__()\n        self.comparison_period = comparison_period\n    \n    def get_report_title(self) -> str:\n        return \"COMPARATIVE ANALYSIS REPORT\"\n    \n    def generate_report(self, data: SalesData) -> str:\n        report_lines = self.generate_header(data)\n        \n        report_lines.extend([\n            self.get_report_title(),\n            \"===========================\",\n            \"\"\n        ])\n        \n        total_sales = sum(sale.get_net_amount() for sale in data.get_sales())\n        \n        report_lines.extend([\n            f\"Current Period Sales: {self.currency_format.format(total_sales)}\",\n            f\"Comparison Period: {self.comparison_period}\",\n            \"Note: Comparison data would be calculated here with historical data\"\n        ])\n        \n        report_lines.extend(self.generate_footer())\n        return \"\\n\".join(report_lines)\n\nclass ReportGenerator:\n    def __init__(self, report_strategy: Optional[ReportStrategy] = None):\n        self._report_strategy = report_strategy\n    \n    def set_report_strategy(self, report_strategy: ReportStrategy):\n        self._report_strategy = report_strategy\n    \n    def generate_report(self, data: SalesData) -> str:\n        if self._report_strategy is None:\n            raise ValueError(\"Report strategy must be set before generating report\")\n        return self._report_strategy.generate_report(data)\n    \n    def get_report_title(self) -> str:\n        if self._report_strategy is None:\n            return \"Unknown Report\"\n        return self._report_strategy.get_report_title()\n\nclass ReportFactory:\n    _strategies = {\n        \"daily\": DailyReportStrategy,\n        \"product\": ProductReportStrategy,\n        \"regional\": RegionalReportStrategy,\n        \"salesperson\": SalespersonReportStrategy,\n        \"category\": CategoryReportStrategy,\n        \"quarterly\": QuarterlyReportStrategy,\n        \"monthly\": MonthlyReportStrategy,\n        \"summary\": SummaryReportStrategy,\n    }\n    \n    @classmethod\n    def create_report_strategy(cls, report_type: str, **kwargs) -> ReportStrategy:\n        report_type = report_type.lower()\n        \n        if report_type == \"comparative\":\n            comparison_period = kwargs.get(\"comparison_period\", \"Previous Period\")\n            return ComparativeReportStrategy(comparison_period)\n        \n        if report_type not in cls._strategies:\n            raise ValueError(f\"Unknown report type: {report_type}\")\n        \n        return cls._strategies[report_type]()\n    \n    @classmethod\n    def get_available_report_types(cls) -> List[str]:\n        return list(cls._strategies.keys()) + [\"comparative\"]\n    \n    @classmethod\n    def register_strategy(cls, report_type: str, strategy_class: type):\n        \"\"\"Allow registration of new report strategies\"\"\"\n        cls._strategies[report_type.lower()] = strategy_class\n\n# Example usage and demonstration\nif __name__ == \"__main__\":\n    # Create sample data\n    sample_sales = [\n        Sale(\"Laptop\", \"Electronics\", 1200.0, 1, datetime(2024, 1, 15), \"North\", \"John Doe\", \"CUST001\", 50.0),\n        Sale(\"Mouse\", \"Electronics\", 25.0, 2, datetime(2024, 1, 16), \"South\", \"Jane Smith\", \"CUST002\", 0.0),\n        Sale(\"Keyboard\", \"Electronics\", 75.0, 1, datetime(2024, 1, 17), \"North\", \"John Doe\", \"CUST003\", 5.0)\n    ]\n    \n    sales_data = SalesData(sample_sales, \"TechCorp Inc.\", \"Q1 2024\")\n    \n    # Generate different reports using the strategy pattern\n    generator = ReportGenerator()\n    \n    # Daily report\n    daily_strategy = ReportFactory.create_report_strategy(\"daily\")\n    generator.set_report_strategy(daily_strategy)\n    print(generator.generate_report(sales_data))\n    \n    print(\"\\n\" + \"=\"*50 + \"\\n\")\n    \n    # Product report\n    product_strategy = ReportFactory.create_report_strategy(\"product\")\n    generator.set_report_strategy(product_strategy)\n    print(generator.generate_report(sales_data))",
      "level": "HARD",
      "language": "PYTHON",
      "violation": "OCP",
      "description": "Sales report generation system"
    },
    {
      "input": "from datetime import datetime\nfrom typing import List, Dict\n\nclass OrderItem:\n    def __init__(self, product_id: str, price: float, quantity: int, category: str, is_digital: bool = False, weight: float = 0.0):\n        self.product_id = product_id\n        self.price = price\n        self.quantity = quantity\n        self.category = category\n        self.is_digital = is_digital\n        self.weight = weight\n    \n    def get_total_price(self) -> float:\n        return self.price * self.quantity\n\nclass Order:\n    def __init__(self, customer_id: str, items: List[OrderItem], country: str, order_date: datetime, order_type: str, is_business_order: bool = False):\n        self.customer_id = customer_id\n        self.items = items\n        self.country = country\n        self.order_date = order_date\n        self.order_type = order_type\n        self.is_business_order = is_business_order\n    \n    def get_total_amount(self) -> float:\n        return sum(item.get_total_price() for item in self.items)\n\nclass TaxCalculator:\n    DEFAULT_TAX_RATE = 0.05\n    \n    def __init__(self):\n        pass\n    \n    def calculate_tax(self, order: Order) -> float:\n        total_tax = 0.0\n        \n        if order.country == \"US\":\n            total_tax = self._calculate_us_tax(order)\n        elif order.country == \"EU\":\n            total_tax = self._calculate_eu_tax(order)\n        elif order.country == \"CA\":\n            total_tax = self._calculate_canada_tax(order)\n        elif order.country == \"UK\":\n            total_tax = self._calculate_uk_tax(order)\n        elif order.country == \"AU\":\n            total_tax = self._calculate_australia_tax(order)\n        elif order.country == \"JP\":\n            total_tax = self._calculate_japan_tax(order)\n        elif order.country == \"IN\":\n            total_tax = self._calculate_india_tax(order)\n        elif order.country == \"BR\":\n            total_tax = self._calculate_brazil_tax(order)\n        elif order.country == \"MX\":\n            total_tax = self._calculate_mexico_tax(order)\n        elif order.country == \"SG\":\n            total_tax = self._calculate_singapore_tax(order)\n        else:\n            # Default tax calculation for unsupported countries\n            for item in order.items:\n                item_price = item.price * item.quantity\n                total_tax += item_price * self.DEFAULT_TAX_RATE\n        \n        # Apply business order discount\n        if order.is_business_order:\n            total_tax *= 0.9  # 10% discount on tax for business orders\n        \n        # Apply digital goods adjustment\n        total_tax += self._calculate_digital_goods_tax(order)\n        \n        return total_tax\n    \n    def _calculate_us_tax(self, order: Order) -> float:\n        state_tax_rates = self._get_state_tax_rates()\n        category_tax_rates = self._get_category_tax_rates()\n        \n        state = order.customer_id[:2]\n        state_tax_rate = state_tax_rates.get(state, 0.05)\n        \n        total_tax = 0.0\n        for item in order.items:\n            item_price = item.price * item.quantity\n            category_rate = category_tax_rates.get(item.category, 0.0)\n            item_tax = item_price * (state_tax_rate + category_rate)\n            \n            # Special handling for luxury items over $1000\n            if item.category == \"luxury\" and item_price > 1000:\n                item_tax += item_price * 0.02  # Additional 2% luxury tax\n            \n            # Sales tax exemption for certain states on clothing under $110\n            if item.category == \"clothing\" and state in [\"NY\", \"NJ\"] and item_price < 110:\n                item_tax = 0.0\n            \n            total_tax += item_tax\n        \n        return total_tax\n    \n    def _calculate_eu_tax(self, order: Order) -> float:\n        country_vat_rates = self._get_country_vat_rates()\n        \n        country_code = order.customer_id[:2]\n        vat_rate = country_vat_rates.get(country_code, 0.20)\n        \n        total_tax = 0.0\n        for item in order.items:\n            item_price = item.price * item.quantity\n            item_vat = item_price * vat_rate\n            \n            # Reduced VAT for food items\n            if item.category == \"food\":\n                item_vat = item_price * (vat_rate * 0.5)\n            \n            # Zero VAT for books and newspapers in some countries\n            if item.category in [\"books\", \"newspapers\"] and country_code in [\"UK\", \"IE\"]:\n                item_vat = 0.0\n            \n            total_tax += item_vat\n        \n        return total_tax\n    \n    def _calculate_canada_tax(self, order: Order) -> float:\n        province_tax_rates = self._get_province_tax_rates()\n        gst = 0.05\n        \n        province = order.customer_id[:2]\n        provincial_tax = province_tax_rates.get(province, 0.08)\n        \n        total_tax = 0.0\n        for item in order.items:\n            item_price = item.price * item.quantity\n            item_tax = item_price * (gst + provincial_tax)\n            \n            # No tax on essential food items\n            if item.category == \"food\" and item.category != \"luxury\":\n                item_tax = 0.0\n            \n            # Special handling for books and magazines\n            if item.category in [\"books\", \"magazines\"]:\n                item_tax = 0.0\n            \n            total_tax += item_tax\n        \n        return total_tax\n    \n    def _calculate_uk_tax(self, order: Order) -> float:\n        vat_rate = 0.20\n        reduced_vat_rate = 0.05\n        \n        total_tax = 0.0\n        for item in order.items:\n            item_price = item.price * item.quantity\n            \n            if item.category in [\"food\", \"books\", \"newspapers\", \"children_clothing\"]:\n                item_tax = 0.0  # Zero-rated items\n            elif item.category in [\"energy\", \"domestic_fuel\", \"contraceptives\"]:\n                item_tax = item_price * reduced_vat_rate\n            else:\n                item_tax = item_price * vat_rate\n            \n            total_tax += item_tax\n        \n        return total_tax\n    \n    def _calculate_australia_tax(self, order: Order) -> float:\n        gst_rate = 0.10\n        \n        total_tax = 0.0\n        for item in order.items:\n            item_price = item.price * item.quantity\n            item_tax = item_price * gst_rate\n            \n            # GST-free items\n            if item.category in [\"food\", \"medical\", \"education\", \"exports\"]:\n                item_tax = 0.0\n            \n            # Input-taxed items (no GST charged)\n            if item.category in [\"residential_rent\", \"financial_services\"]:\n                item_tax = 0.0\n            \n            total_tax += item_tax\n        \n        return total_tax\n    \n    def _calculate_japan_tax(self, order: Order) -> float:\n        consumption_tax = 0.10\n        reduced_rate = 0.08\n        \n        total_tax = 0.0\n        for item in order.items:\n            item_price = item.price * item.quantity\n            \n            if item.category in [\"food\", \"beverages\", \"newspapers\"]:\n                item_tax = item_price * reduced_rate\n            else:\n                item_tax = item_price * consumption_tax\n            \n            # Special handling for restaurant meals\n            if item.category == \"restaurant\" and order.order_type == \"takeout\":\n                item_tax = item_price * reduced_rate\n            \n            total_tax += item_tax\n        \n        return total_tax\n    \n    def _calculate_india_tax(self, order: Order) -> float:\n        gst_rates = self._get_india_gst_rates()\n        \n        total_tax = 0.0\n        for item in order.items:\n            item_price = item.price * item.quantity\n            gst_rate = gst_rates.get(item.category, 0.18)\n            item_tax = item_price * gst_rate\n            \n            # IGST for inter-state transactions\n            if self._is_interstate_transaction(order):\n                item_tax = item_price * gst_rate  # IGST\n            else:\n                # CGST + SGST\n                item_tax = item_price * gst_rate\n            \n            total_tax += item_tax\n        \n        return total_tax\n    \n    def _calculate_brazil_tax(self, order: Order) -> float:\n        icms_rate = 0.18  # State tax\n        ipi_rate = 0.10   # Federal tax\n        \n        total_tax = 0.0\n        for item in order.items:\n            item_price = item.price * item.quantity\n            \n            # ICMS (state circulation tax)\n            icms_tax = item_price * icms_rate\n            \n            # IPI (federal excise tax) - only on manufactured goods\n            ipi_tax = 0.0\n            if item.category in [\"electronics\", \"automotive\", \"cosmetics\"]:\n                ipi_tax = item_price * ipi_rate\n            \n            total_tax += icms_tax + ipi_tax\n        \n        return total_tax\n    \n    def _calculate_mexico_tax(self, order: Order) -> float:\n        iva_rate = 0.16  # Value Added Tax\n        ieps_rate = 0.08  # Special tax on certain goods\n        \n        total_tax = 0.0\n        for item in order.items:\n            item_price = item.price * item.quantity\n            \n            # IVA (Value Added Tax)\n            iva_tax = item_price * iva_rate\n            \n            # IEPS (Special tax on production and services)\n            ieps_tax = 0.0\n            if item.category in [\"alcohol\", \"tobacco\", \"fuel\", \"sugary_drinks\"]:\n                ieps_tax = item_price * ieps_rate\n            \n            # Zero-rated items\n            if item.category in [\"food\", \"medicine\", \"books\"]:\n                iva_tax = 0.0\n            \n            total_tax += iva_tax + ieps_tax\n        \n        return total_tax\n    \n    def _calculate_singapore_tax(self, order: Order) -> float:\n        gst_rate = 0.08  # Goods and Services Tax (increased from 7% to 8% in 2023)\n        \n        total_tax = 0.0\n        for item in order.items:\n            item_price = item.price * item.quantity\n            item_tax = item_price * gst_rate\n            \n            # Zero-rated items\n            if item.category in [\"exports\", \"international_services\"]:\n                item_tax = 0.0\n            \n            # Exempt items\n            if item.category in [\"residential_property\", \"financial_services\", \"digital_services\"]:\n                item_tax = 0.0\n            \n            total_tax += item_tax\n        \n        return total_tax\n    \n    def _calculate_digital_goods_tax(self, order: Order) -> float:\n        digital_tax = 0.0\n        \n        for item in order.items:\n            if item.is_digital:\n                item_price = item.price * item.quantity\n                # Additional digital services tax\n                digital_tax += item_price * 0.02\n        \n        return digital_tax\n    \n    def _is_interstate_transaction(self, order: Order) -> bool:\n        # Simplified logic - in real implementation, this would check\n        # if buyer and seller are in different states\n        return order.customer_id[2:4] != \"MH\"  # Assuming seller is in Maharashtra\n    \n    def _get_state_tax_rates(self) -> Dict[str, float]:\n        return {\n            \"CA\": 0.0725,\n            \"NY\": 0.045,\n            \"TX\": 0.0625,\n            \"FL\": 0.06,\n            \"WA\": 0.065,\n            \"OR\": 0.0,\n            \"MT\": 0.0,\n            \"NH\": 0.0,\n            \"DE\": 0.0\n        }\n    \n    def _get_category_tax_rates(self) -> Dict[str, float]:\n        return {\n            \"luxury\": 0.03,\n            \"food\": 0.0,\n            \"electronics\": 0.01,\n            \"clothing\": 0.005,\n            \"automotive\": 0.02\n        }\n    \n    def _get_country_vat_rates(self) -> Dict[str, float]:\n        return {\n            \"DE\": 0.19,\n            \"FR\": 0.20,\n            \"IT\": 0.22,\n            \"ES\": 0.21,\n            \"NL\": 0.21,\n            \"BE\": 0.21,\n            \"AT\": 0.20,\n            \"SE\": 0.25,\n            \"DK\": 0.25\n        }\n    \n    def _get_province_tax_rates(self) -> Dict[str, float]:\n        return {\n            \"ON\": 0.08,\n            \"BC\": 0.07,\n            \"AB\": 0.0,\n            \"QC\": 0.09975,\n            \"NS\": 0.10,\n            \"NB\": 0.10,\n            \"MB\": 0.07,\n            \"SK\": 0.06\n        }\n    \n    def _get_india_gst_rates(self) -> Dict[str, float]:\n        return {\n            \"food\": 0.05,\n            \"clothing\": 0.12,\n            \"electronics\": 0.18,\n            \"luxury\": 0.28,\n            \"automotive\": 0.28,\n            \"books\": 0.0,\n            \"medicine\": 0.05,\n            \"gold\": 0.03\n        }",
      "output": "from abc import ABC, abstractmethod\nfrom datetime import datetime\nfrom typing import List, Dict, Set\n\nclass OrderItem:\n    def __init__(self, product_id: str, price: float, quantity: int, category: str, is_digital: bool = False, weight: float = 0.0):\n        self.product_id = product_id\n        self.price = price\n        self.quantity = quantity\n        self.category = category\n        self.is_digital = is_digital\n        self.weight = weight\n    \n    def get_total_price(self) -> float:\n        return self.price * self.quantity\n\nclass Order:\n    def __init__(self, customer_id: str, items: List[OrderItem], country: str, order_date: datetime, order_type: str, is_business_order: bool = False):\n        self.customer_id = customer_id\n        self.items = items\n        self.country = country\n        self.order_date = order_date\n        self.order_type = order_type\n        self.is_business_order = is_business_order\n    \n    def get_total_amount(self) -> float:\n        return sum(item.get_total_price() for item in self.items)\n\nclass TaxStrategy(ABC):\n    @abstractmethod\n    def calculate_tax(self, order: Order) -> float:\n        pass\n\nclass BaseTaxStrategy(TaxStrategy):\n    def calculate_digital_goods_tax(self, order: Order) -> float:\n        digital_tax = 0.0\n        for item in order.items:\n            if item.is_digital:\n                item_price = item.price * item.quantity\n                digital_tax += item_price * 0.02\n        return digital_tax\n    \n    def apply_business_discount(self, tax: float, order: Order) -> float:\n        return tax * 0.9 if order.is_business_order else tax\n\nclass USTaxStrategy(BaseTaxStrategy):\n    def calculate_tax(self, order: Order) -> float:\n        state_tax_rates = self._get_state_tax_rates()\n        category_tax_rates = self._get_category_tax_rates()\n        \n        state = order.customer_id[:2]\n        state_tax_rate = state_tax_rates.get(state, 0.05)\n        \n        total_tax = 0.0\n        for item in order.items:\n            item_price = item.price * item.quantity\n            category_rate = category_tax_rates.get(item.category, 0.0)\n            item_tax = item_price * (state_tax_rate + category_rate)\n            \n            if item.category == \"luxury\" and item_price > 1000:\n                item_tax += item_price * 0.02\n            \n            if item.category == \"clothing\" and state in [\"NY\", \"NJ\"] and item_price < 110:\n                item_tax = 0.0\n            \n            total_tax += item_tax\n        \n        total_tax += self.calculate_digital_goods_tax(order)\n        return self.apply_business_discount(total_tax, order)\n    \n    def _get_state_tax_rates(self) -> Dict[str, float]:\n        return {\n            \"CA\": 0.0725, \"NY\": 0.045, \"TX\": 0.0625, \"FL\": 0.06,\n            \"WA\": 0.065, \"OR\": 0.0, \"MT\": 0.0, \"NH\": 0.0, \"DE\": 0.0\n        }\n    \n    def _get_category_tax_rates(self) -> Dict[str, float]:\n        return {\n            \"luxury\": 0.03, \"food\": 0.0, \"electronics\": 0.01,\n            \"clothing\": 0.005, \"automotive\": 0.02\n        }\n\nclass EUTaxStrategy(BaseTaxStrategy):\n    def calculate_tax(self, order: Order) -> float:\n        country_vat_rates = self._get_country_vat_rates()\n        \n        country_code = order.customer_id[:2]\n        vat_rate = country_vat_rates.get(country_code, 0.20)\n        \n        total_tax = 0.0\n        for item in order.items:\n            item_price = item.price * item.quantity\n            item_vat = item_price * vat_rate\n            \n            if item.category == \"food\":\n                item_vat = item_price * (vat_rate * 0.5)\n            \n            if item.category in [\"books\", \"newspapers\"] and country_code in [\"UK\", \"IE\"]:\n                item_vat = 0.0\n            \n            total_tax += item_vat\n        \n        total_tax += self.calculate_digital_goods_tax(order)\n        return self.apply_business_discount(total_tax, order)\n    \n    def _get_country_vat_rates(self) -> Dict[str, float]:\n        return {\n            \"DE\": 0.19, \"FR\": 0.20, \"IT\": 0.22, \"ES\": 0.21,\n            \"NL\": 0.21, \"BE\": 0.21, \"AT\": 0.20, \"SE\": 0.25, \"DK\": 0.25\n        }\n\nclass CanadaTaxStrategy(BaseTaxStrategy):\n    def calculate_tax(self, order: Order) -> float:\n        province_tax_rates = self._get_province_tax_rates()\n        gst = 0.05\n        \n        province = order.customer_id[:2]\n        provincial_tax = province_tax_rates.get(province, 0.08)\n        \n        total_tax = 0.0\n        for item in order.items:\n            item_price = item.price * item.quantity\n            item_tax = item_price * (gst + provincial_tax)\n            \n            if item.category == \"food\" and item.category != \"luxury\":\n                item_tax = 0.0\n            \n            if item.category in [\"books\", \"magazines\"]:\n                item_tax = 0.0\n            \n            total_tax += item_tax\n        \n        total_tax += self.calculate_digital_goods_tax(order)\n        return self.apply_business_discount(total_tax, order)\n    \n    def _get_province_tax_rates(self) -> Dict[str, float]:\n        return {\n            \"ON\": 0.08, \"BC\": 0.07, \"AB\": 0.0, \"QC\": 0.09975,\n            \"NS\": 0.10, \"NB\": 0.10, \"MB\": 0.07, \"SK\": 0.06\n        }\n\nclass UKTaxStrategy(BaseTaxStrategy):\n    def calculate_tax(self, order: Order) -> float:\n        vat_rate = 0.20\n        reduced_vat_rate = 0.05\n        \n        total_tax = 0.0\n        for item in order.items:\n            item_price = item.price * item.quantity\n            \n            if item.category in [\"food\", \"books\", \"newspapers\", \"children_clothing\"]:\n                item_tax = 0.0\n            elif item.category in [\"energy\", \"domestic_fuel\", \"contraceptives\"]:\n                item_tax = item_price * reduced_vat_rate\n            else:\n                item_tax = item_price * vat_rate\n            \n            total_tax += item_tax\n        \n        total_tax += self.calculate_digital_goods_tax(order)\n        return self.apply_business_discount(total_tax, order)\n\nclass AustraliaTaxStrategy(BaseTaxStrategy):\n    def calculate_tax(self, order: Order) -> float:\n        gst_rate = 0.10\n        \n        total_tax = 0.0\n        for item in order.items:\n            item_price = item.price * item.quantity\n            item_tax = item_price * gst_rate\n            \n            if item.category in [\"food\", \"medical\", \"education\", \"exports\"]:\n                item_tax = 0.0\n            \n            if item.category in [\"residential_rent\", \"financial_services\"]:\n                item_tax = 0.0\n            \n            total_tax += item_tax\n        \n        total_tax += self.calculate_digital_goods_tax(order)\n        return self.apply_business_discount(total_tax, order)\n\nclass JapanTaxStrategy(BaseTaxStrategy):\n    def calculate_tax(self, order: Order) -> float:\n        consumption_tax = 0.10\n        reduced_rate = 0.08\n        \n        total_tax = 0.0\n        for item in order.items:\n            item_price = item.price * item.quantity\n            \n            if item.category in [\"food\", \"beverages\", \"newspapers\"]:\n                item_tax = item_price * reduced_rate\n            else:\n                item_tax = item_price * consumption_tax\n            \n            if item.category == \"restaurant\" and order.order_type == \"takeout\":\n                item_tax = item_price * reduced_rate\n            \n            total_tax += item_tax\n        \n        total_tax += self.calculate_digital_goods_tax(order)\n        return self.apply_business_discount(total_tax, order)\n\nclass IndiaTaxStrategy(BaseTaxStrategy):\n    def calculate_tax(self, order: Order) -> float:\n        gst_rates = self._get_gst_rates()\n        \n        total_tax = 0.0\n        for item in order.items:\n            item_price = item.price * item.quantity\n            gst_rate = gst_rates.get(item.category, 0.18)\n            item_tax = item_price * gst_rate\n            \n            if self._is_interstate_transaction(order):\n                item_tax = item_price * gst_rate  # IGST\n            else:\n                item_tax = item_price * gst_rate  # CGST + SGST\n            \n            total_tax += item_tax\n        \n        total_tax += self.calculate_digital_goods_tax(order)\n        return self.apply_business_discount(total_tax, order)\n    \n    def _get_gst_rates(self) -> Dict[str, float]:\n        return {\n            \"food\": 0.05, \"clothing\": 0.12, \"electronics\": 0.18,\n            \"luxury\": 0.28, \"automotive\": 0.28, \"books\": 0.0,\n            \"medicine\": 0.05, \"gold\": 0.03\n        }\n    \n    def _is_interstate_transaction(self, order: Order) -> bool:\n        return order.customer_id[2:4] != \"MH\"\n\nclass BrazilTaxStrategy(BaseTaxStrategy):\n    def calculate_tax(self, order: Order) -> float:\n        icms_rate = 0.18\n        ipi_rate = 0.10\n        \n        total_tax = 0.0\n        for item in order.items:\n            item_price = item.price * item.quantity\n            \n            icms_tax = item_price * icms_rate\n            \n            ipi_tax = 0.0\n            if item.category in [\"electronics\", \"automotive\", \"cosmetics\"]:\n                ipi_tax = item_price * ipi_rate\n            \n            total_tax += icms_tax + ipi_tax\n        \n        total_tax += self.calculate_digital_goods_tax(order)\n        return self.apply_business_discount(total_tax, order)\n\nclass MexicoTaxStrategy(BaseTaxStrategy):\n    def calculate_tax(self, order: Order) -> float:\n        iva_rate = 0.16\n        ieps_rate = 0.08\n        \n        total_tax = 0.0\n        for item in order.items:\n            item_price = item.price * item.quantity\n            \n            iva_tax = item_price * iva_rate\n            \n            ieps_tax = 0.0\n            if item.category in [\"alcohol\", \"tobacco\", \"fuel\", \"sugary_drinks\"]:\n                ieps_tax = item_price * ieps_rate\n            \n            if item.category in [\"food\", \"medicine\", \"books\"]:\n                iva_tax = 0.0\n            \n            total_tax += iva_tax + ieps_tax\n        \n        total_tax += self.calculate_digital_goods_tax(order)\n        return self.apply_business_discount(total_tax, order)\n\nclass SingaporeTaxStrategy(BaseTaxStrategy):\n    def calculate_tax(self, order: Order) -> float:\n        gst_rate = 0.08\n        \n        total_tax = 0.0\n        for item in order.items:\n            item_price = item.price * item.quantity\n            item_tax = item_price * gst_rate\n            \n            if item.category in [\"exports\", \"international_services\"]:\n                item_tax = 0.0\n            \n            if item.category in [\"residential_property\", \"financial_services\", \"digital_services\"]:\n                item_tax = 0.0\n            \n            total_tax += item_tax\n        \n        total_tax += self.calculate_digital_goods_tax(order)\n        return self.apply_business_discount(total_tax, order)\n\nclass DefaultTaxStrategy(BaseTaxStrategy):\n    DEFAULT_TAX_RATE = 0.05\n    \n    def calculate_tax(self, order: Order) -> float:\n        total_tax = 0.0\n        for item in order.items:\n            item_price = item.price * item.quantity\n            total_tax += item_price * self.DEFAULT_TAX_RATE\n        \n        total_tax += self.calculate_digital_goods_tax(order)\n        return self.apply_business_discount(total_tax, order)\n\nclass TaxCalculator:\n    def __init__(self):\n        self._tax_strategies: Dict[str, TaxStrategy] = {}\n        self._default_strategy = DefaultTaxStrategy()\n        self._initialize_strategies()\n    \n    def _initialize_strategies(self):\n        strategies = {\n            \"US\": USTaxStrategy(),\n            \"EU\": EUTaxStrategy(),\n            \"CA\": CanadaTaxStrategy(),\n            \"UK\": UKTaxStrategy(),\n            \"AU\": AustraliaTaxStrategy(),\n            \"JP\": JapanTaxStrategy(),\n            \"IN\": IndiaTaxStrategy(),\n            \"BR\": BrazilTaxStrategy(),\n            \"MX\": MexicoTaxStrategy(),\n            \"SG\": SingaporeTaxStrategy()\n        }\n        self._tax_strategies.update(strategies)\n    \n    def register_tax_strategy(self, country: str, strategy: TaxStrategy) -> None:\n        \"\"\"Register a new tax strategy for a country.\"\"\"\n        self._tax_strategies[country] = strategy\n    \n    def unregister_tax_strategy(self, country: str) -> bool:\n        \"\"\"Remove a tax strategy for a country.\"\"\"\n        if country in self._tax_strategies:\n            del self._tax_strategies[country]\n            return True\n        return False\n    \n    def set_default_strategy(self, strategy: TaxStrategy) -> None:\n        \"\"\"Set the default tax strategy for unsupported countries.\"\"\"\n        self._default_strategy = strategy\n    \n    def calculate_tax(self, order: Order) -> float:\n        \"\"\"Calculate tax for an order using the appropriate strategy.\"\"\"\n        strategy = self._tax_strategies.get(order.country, self._default_strategy)\n        return strategy.calculate_tax(order)\n    \n    def get_supported_countries(self) -> Set[str]:\n        \"\"\"Get set of all supported countries.\"\"\"\n        return set(self._tax_strategies.keys())\n    \n    def is_country_supported(self, country: str) -> bool:\n        \"\"\"Check if a country is supported.\"\"\"\n        return country in self._tax_strategies\n    \n    def get_tax_strategy(self, country: str) -> TaxStrategy:\n        \"\"\"Get the tax strategy for a specific country.\"\"\"\n        return self._tax_strategies.get(country, self._default_strategy)\n    \n    def calculate_tax_breakdown(self, order: Order) -> Dict[str, float]:\n        \"\"\"Calculate detailed tax breakdown for an order.\"\"\"\n        strategy = self._tax_strategies.get(order.country, self._default_strategy)\n        base_tax = strategy.calculate_tax(order)\n        \n        # Calculate components\n        digital_tax = strategy.calculate_digital_goods_tax(order)\n        pre_discount_tax = base_tax / (0.9 if order.is_business_order else 1.0)\n        business_discount = pre_discount_tax - base_tax if order.is_business_order else 0.0\n        \n        return {\n            \"base_tax\": pre_discount_tax - digital_tax,\n            \"digital_goods_tax\": digital_tax,\n            \"business_discount\": business_discount,\n            \"total_tax\": base_tax\n        }",
      "level": "HARD",
      "language": "PYTHON",
      "violation": "OCP",
      "description": "Order tax calculation system"
    },
    {
        "input": "import re\nimport time\nfrom typing import Dict, List, Set, Optional\nfrom dataclasses import dataclass, field\nfrom datetime import datetime\n\n@dataclass\nclass Content:\n    text: str\n    content_type: str\n    metadata: Dict[str, str]\n    content_id: str\n    timestamp: int\n    source: str\n    priority: int\n    tags: List[str] = field(default_factory=list)\n    is_public: bool = False\n    \n    def add_tag(self, tag: str) -> None:\n        if tag not in self.tags:\n            self.tags.append(tag)\n    \n    def set_public(self, is_public: bool) -> None:\n        self.is_public = is_public\n\nclass ContentFilter:\n    def __init__(self):\n        self.filter_stats: Dict[str, int] = {}\n        self.banned_words: Set[str] = {\n            \"badword1\", \"badword2\", \"badword3\", \n            \"inappropriate\", \"offensive\", \"spam\", \"scam\"\n        }\n        self.email_pattern = re.compile(r'[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}')\n        self.phone_pattern = re.compile(r'\\b\\d{3}-\\d{3}-\\d{4}\\b|\\(\\d{3}\\)\\s*\\d{3}-\\d{4}')\n        self.url_pattern = re.compile(r'https?://[^\\s]+')\n        self.credit_card_pattern = re.compile(r'\\b\\d{4}[\\s-]?\\d{4}[\\s-]?\\d{4}[\\s-]?\\d{4}\\b')\n        self.ssn_pattern = re.compile(r'\\d{3}-\\d{2}-\\d{4}')\n        self.total_filtered = 0\n    \n    def filter_content(self, content: Content) -> str:\n        filtered_text = content.text\n        content_type = content.content_type\n        metadata = content.metadata\n        \n        if content_type == \"email\":\n            filtered_text = self._filter_email_content(filtered_text, metadata)\n            self._update_stats(\"email\")\n            \n        elif content_type == \"social\":\n            filtered_text = self._filter_social_content(filtered_text, metadata)\n            self._update_stats(\"social\")\n            \n        elif content_type == \"comment\":\n            filtered_text = self._filter_comment_content(filtered_text, metadata)\n            self._update_stats(\"comment\")\n            \n        elif content_type == \"blog\":\n            filtered_text = self._filter_blog_content(filtered_text, metadata)\n            self._update_stats(\"blog\")\n            \n        elif content_type == \"news\":\n            filtered_text = self._filter_news_content(filtered_text, metadata)\n            self._update_stats(\"news\")\n            \n        elif content_type == \"forum\":\n            filtered_text = self._filter_forum_content(filtered_text, metadata)\n            self._update_stats(\"forum\")\n            \n        elif content_type == \"chat\":\n            filtered_text = self._filter_chat_content(filtered_text, metadata)\n            self._update_stats(\"chat\")\n            \n        elif content_type == \"review\":\n            filtered_text = self._filter_review_content(filtered_text, metadata)\n            self._update_stats(\"review\")\n            \n        elif content_type == \"article\":\n            filtered_text = self._filter_article_content(filtered_text, metadata)\n            self._update_stats(\"article\")\n            \n        elif content_type == \"video\":\n            filtered_text = self._filter_video_content(filtered_text, metadata)\n            self._update_stats(\"video\")\n            \n        else:\n            filtered_text = self._filter_generic_content(filtered_text, metadata)\n            self._update_stats(\"generic\")\n        \n        # Apply common filters to all content types\n        filtered_text = self._remove_common_profanity(filtered_text)\n        filtered_text = self._remove_personal_info(filtered_text)\n        filtered_text = self._filter_urls(filtered_text, metadata)\n        filtered_text = self._filter_emails(filtered_text, metadata)\n        filtered_text = self._filter_phone_numbers(filtered_text, metadata)\n        \n        self.total_filtered += 1\n        content.text = filtered_text\n        content.add_tag(\"filtered\")\n        \n        return filtered_text\n    \n    def _filter_email_content(self, text: str, metadata: Dict[str, str]) -> str:\n        audience = metadata.get(\"audience\", \"general\")\n        \n        text = self._apply_confidentiality_filter(text, audience)\n        text = self._remove_email_headers(text)\n        text = self._filter_department_info(text, metadata.get(\"department\", \"unknown\"))\n        \n        return text\n    \n    def _filter_social_content(self, text: str, metadata: Dict[str, str]) -> str:\n        platform = metadata.get(\"platform\", \"general\")\n        audience = metadata.get(\"audience\", \"general\")\n        \n        text = self._filter_platform_specific_content(text, platform)\n        text = self._filter_age_restricted_content(text, audience)\n        text = self._add_verification_labels(text, metadata.get(\"userType\", \"regular\"))\n        \n        return text\n    \n    def _filter_comment_content(self, text: str, metadata: Dict[str, str]) -> str:\n        context = metadata.get(\"context\", \"general\")\n        \n        text = self._filter_context_specific_language(text, context)\n        text = self._moderate_extreme_language(text, metadata.get(\"moderation\", \"standard\"))\n        \n        return text\n    \n    def _filter_blog_content(self, text: str, metadata: Dict[str, str]) -> str:\n        category = metadata.get(\"category\", \"general\")\n        \n        text = self._filter_category_specific_terms(text, category)\n        text = self._filter_age_inappropriate_content(text, metadata.get(\"ageRating\", \"all\"))\n        \n        return text\n    \n    def _filter_news_content(self, text: str, metadata: Dict[str, str]) -> str:\n        verification = metadata.get(\"verification\", \"unverified\")\n        source = metadata.get(\"source\", \"unknown\")\n        \n        text = self._add_verification_labels(text, verification)\n        text = self._add_source_labels(text, source)\n        text = self._filter_news_specific_terms(text)\n        \n        return text\n    \n    def _filter_forum_content(self, text: str, metadata: Dict[str, str]) -> str:\n        forum_type = metadata.get(\"forumType\", \"general\")\n        user_level = metadata.get(\"userLevel\", \"novice\")\n        \n        text = self._filter_forum_specific_terms(text, forum_type)\n        text = self._add_user_level_labels(text, user_level)\n        \n        return text\n    \n    def _filter_chat_content(self, text: str, metadata: Dict[str, str]) -> str:\n        chat_type = metadata.get(\"chatType\", \"public\")\n        encryption = metadata.get(\"encryption\", \"none\")\n        \n        text = self._filter_chat_specific_content(text, chat_type)\n        text = self._filter_credentials(text, encryption)\n        text = self._filter_chat_abbreviations(text)\n        \n        return text\n    \n    def _filter_review_content(self, text: str, metadata: Dict[str, str]) -> str:\n        product_type = metadata.get(\"productType\", \"general\")\n        reviewer_status = metadata.get(\"reviewerStatus\", \"regular\")\n        \n        text = self._filter_product_specific_concerns(text, product_type)\n        text = self._add_reviewer_status_labels(text, reviewer_status)\n        text = self._moderate_extreme_opinions(text)\n        \n        return text\n    \n    def _filter_article_content(self, text: str, metadata: Dict[str, str]) -> str:\n        publication = metadata.get(\"publication\", \"unknown\")\n        category = metadata.get(\"category\", \"general\")\n        \n        text = self._add_publication_labels(text, publication)\n        text = self._add_category_labels(text, category)\n        \n        return text\n    \n    def _filter_video_content(self, text: str, metadata: Dict[str, str]) -> str:\n        platform = metadata.get(\"platform\", \"general\")\n        content_type = metadata.get(\"contentType\", \"general\")\n        \n        text = self._filter_video_specific_content(text, platform)\n        text = self._add_content_type_labels(text, content_type)\n        \n        return text\n    \n    def _filter_generic_content(self, text: str, metadata: Dict[str, str]) -> str:\n        content_source = metadata.get(\"source\", \"unknown\")\n        \n        text = self._add_source_labels(text, content_source)\n        text = self._filter_commercial_content(text)\n        \n        return text\n    \n    def _apply_confidentiality_filter(self, text: str, audience: str) -> str:\n        if audience == \"public\":\n            text = re.sub(r'(?i)confidential:', '[REDACTED]', text)\n            text = re.sub(r'(?i)internal use only', '[INTERNAL]', text)\n            text = re.sub(r'(?i)proprietary', '[CONFIDENTIAL]', text)\n        return text\n    \n    def _remove_email_headers(self, text: str) -> str:\n        text = re.sub(r'(?i)from:\\s.*?\\n', '', text)\n        text = re.sub(r'(?i)to:\\s.*?\\n', '', text)\n        text = re.sub(r'(?i)cc:\\s.*?\\n', '', text)\n        text = re.sub(r'(?i)subject:\\s.*?\\n', '', text)\n        return text\n    \n    def _filter_department_info(self, text: str, department: str) -> str:\n        if department == \"hr\":\n            text = re.sub(r'(?i)salary|compensation|benefits', '[HR-INFO]', text)\n        elif department == \"legal\":\n            text = re.sub(r'(?i)lawsuit|litigation|settlement', '[LEGAL-MATTER]', text)\n        return text\n    \n    def _filter_platform_specific_content(self, text: str, platform: str) -> str:\n        if platform == \"twitter\":\n            text = re.sub(r'@([A-Za-z0-9_]+)', '[USERNAME]', text)\n            text = re.sub(r'#([A-Za-z0-9_]+)', '[HASHTAG]', text)\n        elif platform == \"facebook\":\n            text = re.sub(r'@\\[[^\\]]+\\]', '[NAME]', text)\n        elif platform == \"instagram\":\n            text = re.sub(r'@([A-Za-z0-9_.]+)', '[HANDLE]', text)\n        return text\n    \n    def _filter_age_restricted_content(self, text: str, audience: str) -> str:\n        if audience == \"minor\":\n            text = re.sub(r'(?i)alcohol|beer|wine|gambling|casino', '[AGE-RESTRICTED]', text)\n        return text\n    \n    def _add_verification_labels(self, text: str, user_type: str) -> str:\n        if user_type == \"verified\":\n            text = \"[VERIFIED] \" + text\n        return text\n    \n    def _filter_context_specific_language(self, text: str, context: str) -> str:\n        if context == \"news\":\n            text = re.sub(r'(?i)allegedly|reportedly|rumored', '[STATEMENT]', text)\n        elif context == \"review\":\n            text = re.sub(r'(?i)terrible|awful|worst ever', 'not satisfactory', text)\n        elif context == \"political\":\n            text = re.sub(r'(?i)corrupt|scandal|investigation', '[POLITICAL-CLAIM]', text)\n        return text\n    \n    def _moderate_extreme_language(self, text: str, moderation: str) -> str:\n        if moderation == \"strict\":\n            text = re.sub(r'(?i)disagree|wrong|false', 'alternative view', text)\n        return text\n    \n    def _filter_category_specific_terms(self, text: str, category: str) -> str:\n        if category == \"technology\":\n            text = re.sub(r'(?i)hack|exploit|vulnerability', '[TECH-ISSUE]', text)\n        elif category == \"health\":\n            text = re.sub(r'(?i)cure|treatment|medication', '[MEDICAL-INFO]', text)\n        return text\n    \n    def _filter_age_inappropriate_content(self, text: str, age_rating: str) -> str:\n        if age_rating == \"teen\":\n            text = re.sub(r'(?i)violence|graphic|explicit', '[MATURE-CONTENT]', text)\n        return text\n    \n    def _add_source_labels(self, text: str, source: str) -> str:\n        if source == \"social\":\n            text = \"[SOCIAL-SOURCE] \" + text\n        elif source == \"user-generated\":\n            text = \"[USER-CONTENT] \" + text\n        return text\n    \n    def _filter_news_specific_terms(self, text: str) -> str:\n        return re.sub(r'(?i)exclusive:|scoop:', '[STORY]:', text)\n    \n    def _filter_forum_specific_terms(self, text: str, forum_type: str) -> str:\n        if forum_type == \"technical\":\n            text = re.sub(r'(?i)bug|error|crash', '[ISSUE]', text)\n        elif forum_type == \"gaming\":\n            text = re.sub(r'(?i)cheat|hack|mod', '[GAME-MODIFICATION]', text)\n        return text\n    \n    def _add_user_level_labels(self, text: str, user_level: str) -> str:\n        if user_level == \"newbie\":\n            text = \"[NEW-USER] \" + text\n        elif user_level == \"expert\":\n            text = \"[EXPERT] \" + text\n        return text\n    \n    def _filter_chat_specific_content(self, text: str, chat_type: str) -> str:\n        if chat_type == \"public\":\n            text = re.sub(r'(?i)private|personal|secret', '[PRIVATE-INFO]', text)\n        return text\n    \n    def _filter_credentials(self, text: str, encryption: str) -> str:\n        if encryption == \"none\":\n            text = re.sub(r'(?i)password|token|key', '[CREDENTIALS]', text)\n        return text\n    \n    def _filter_chat_abbreviations(self, text: str) -> str:\n        return re.sub(r'(?i)wtf|omfg|stfu|lmao', '[ABBREV]', text)\n    \n    def _filter_product_specific_concerns(self, text: str, product_type: str) -> str:\n        if product_type == \"restaurant\":\n            text = re.sub(r'(?i)food poisoning|sick|illness', '[HEALTH-CONCERN]', text)\n        elif product_type == \"hotel\":\n            text = re.sub(r'(?i)dirty|filthy|disgusting', 'needs improvement', text)\n        return text\n    \n    def _add_reviewer_status_labels(self, text: str, reviewer_status: str) -> str:\n        if reviewer_status == \"verified\":\n            text = \"[VERIFIED-REVIEW] \" + text\n        return text\n    \n    def _moderate_extreme_opinions(self, text: str) -> str:\n        return re.sub(r'(?i)love it|hate it|perfect|disaster', '[OPINION]', text)\n    \n    def _add_publication_labels(self, text: str, publication: str) -> str:\n        if publication == \"tabloid\":\n            text = \"[TABLOID] \" + text\n        return text\n    \n    def _add_category_labels(self, text: str, category: str) -> str:\n        if category == \"opinion\":\n            text = \"[OPINION-PIECE] \" + text\n        return text\n    \n    def _filter_video_specific_content(self, text: str, platform: str) -> str:\n        if platform == \"youtube\":\n            text = re.sub(r'(?i)like and subscribe', '[ENGAGEMENT-REQUEST]', text)\n        return text\n    \n    def _add_content_type_labels(self, text: str, content_type: str) -> str:\n        if content_type == \"tutorial\":\n            text = re.sub(r'(?i)step by step|how to', '[TUTORIAL]', text)\n        return text\n    \n    def _filter_commercial_content(self, text: str) -> str:\n        return re.sub(r'(?i)spam|advertisement|promotion', '[COMMERCIAL]', text)\n    \n    def _remove_common_profanity(self, text: str) -> str:\n        for word in self.banned_words:\n            pattern = rf'(?i)\\b{re.escape(word)}\\b'\n            text = re.sub(pattern, '[INAPPROPRIATE]', text)\n        return text\n    \n    def _remove_personal_info(self, text: str) -> str:\n        text = self.ssn_pattern.sub('[SSN]', text)\n        text = self.credit_card_pattern.sub('[CREDIT_CARD]', text)\n        text = re.sub(r'\\b(?:\\d{1,3}\\.){3}\\d{1,3}\\b', '[IP_ADDRESS]', text)\n        return text\n    \n    def _filter_urls(self, text: str, metadata: Dict[str, str]) -> str:\n        url_policy = metadata.get(\"urlPolicy\", \"allow\")\n        if url_policy == \"block\":\n            text = self.url_pattern.sub('[URL]', text)\n        return text\n    \n    def _filter_emails(self, text: str, metadata: Dict[str, str]) -> str:\n        email_policy = metadata.get(\"emailPolicy\", \"allow\")\n        if email_policy == \"block\":\n            text = self.email_pattern.sub('[EMAIL]', text)\n        return text\n    \n    def _filter_phone_numbers(self, text: str, metadata: Dict[str, str]) -> str:\n        phone_policy = metadata.get(\"phonePolicy\", \"allow\")\n        if phone_policy == \"block\":\n            text = self.phone_pattern.sub('[PHONE]', text)\n        return text\n    \n    def _update_stats(self, content_type: str) -> None:\n        self.filter_stats[content_type] = self.filter_stats.get(content_type, 0) + 1\n    \n    def get_filter_stats(self) -> Dict[str, int]:\n        return self.filter_stats.copy()\n    \n    def get_total_filtered(self) -> int:\n        return self.total_filtered\n    \n    def add_banned_word(self, word: str) -> None:\n        self.banned_words.add(word.lower())\n    \n    def remove_banned_word(self, word: str) -> None:\n        self.banned_words.discard(word.lower())\n    \n    def get_banned_words(self) -> Set[str]:\n        return self.banned_words.copy()",
          "output": "import re\nimport time\nfrom typing import Dict, List, Set, Optional, Protocol\nfrom dataclasses import dataclass, field\nfrom datetime import datetime\nfrom abc import ABC, abstractmethod\n\n@dataclass\nclass Content:\n    text: str\n    content_type: str\n    metadata: Dict[str, str]\n    content_id: str\n    timestamp: int\n    source: str\n    priority: int\n    tags: List[str] = field(default_factory=list)\n    is_public: bool = False\n    \n    def add_tag(self, tag: str) -> None:\n        if tag not in self.tags:\n            self.tags.append(tag)\n    \n    def set_public(self, is_public: bool) -> None:\n        self.is_public = is_public\n\nclass ContentFilterStrategy(ABC):\n    @abstractmethod\n    def filter(self, text: str, metadata: Dict[str, str]) -> str:\n        pass\n\nclass EmailContentFilter(ContentFilterStrategy):\n    def filter(self, text: str, metadata: Dict[str, str]) -> str:\n        audience = metadata.get(\"audience\", \"general\")\n        \n        text = self._apply_confidentiality_filter(text, audience)\n        text = self._remove_email_headers(text)\n        text = self._filter_department_info(text, metadata.get(\"department\", \"unknown\"))\n        \n        return text\n    \n    def _apply_confidentiality_filter(self, text: str, audience: str) -> str:\n        if audience == \"public\":\n            text = re.sub(r'(?i)confidential:', '[REDACTED]', text)\n            text = re.sub(r'(?i)internal use only', '[INTERNAL]', text)\n            text = re.sub(r'(?i)proprietary', '[CONFIDENTIAL]', text)\n        return text\n    \n    def _remove_email_headers(self, text: str) -> str:\n        text = re.sub(r'(?i)from:\\s.*?\\n', '', text)\n        text = re.sub(r'(?i)to:\\s.*?\\n', '', text)\n        text = re.sub(r'(?i)cc:\\s.*?\\n', '', text)\n        text = re.sub(r'(?i)subject:\\s.*?\\n', '', text)\n        return text\n    \n    def _filter_department_info(self, text: str, department: str) -> str:\n        if department == \"hr\":\n            text = re.sub(r'(?i)salary|compensation|benefits', '[HR-INFO]', text)\n        elif department == \"legal\":\n            text = re.sub(r'(?i)lawsuit|litigation|settlement', '[LEGAL-MATTER]', text)\n        return text\n\nclass SocialContentFilter(ContentFilterStrategy):\n    def filter(self, text: str, metadata: Dict[str, str]) -> str:\n        platform = metadata.get(\"platform\", \"general\")\n        audience = metadata.get(\"audience\", \"general\")\n        \n        text = self._filter_platform_specific_content(text, platform)\n        text = self._filter_age_restricted_content(text, audience)\n        text = self._add_verification_labels(text, metadata.get(\"userType\", \"regular\"))\n        \n        return text\n    \n    def _filter_platform_specific_content(self, text: str, platform: str) -> str:\n        if platform == \"twitter\":\n            text = re.sub(r'@([A-Za-z0-9_]+)', '[USERNAME]', text)\n            text = re.sub(r'#([A-Za-z0-9_]+)', '[HASHTAG]', text)\n        elif platform == \"facebook\":\n            text = re.sub(r'@\\[[^\\]]+\\]', '[NAME]', text)\n        elif platform == \"instagram\":\n            text = re.sub(r'@([A-Za-z0-9_.]+)', '[HANDLE]', text)\n        return text\n    \n    def _filter_age_restricted_content(self, text: str, audience: str) -> str:\n        if audience == \"minor\":\n            text = re.sub(r'(?i)alcohol|beer|wine|gambling|casino', '[AGE-RESTRICTED]', text)\n        return text\n    \n    def _add_verification_labels(self, text: str, user_type: str) -> str:\n        if user_type == \"verified\":\n            text = \"[VERIFIED] \" + text\n        return text\n\nclass CommentContentFilter(ContentFilterStrategy):\n    def filter(self, text: str, metadata: Dict[str, str]) -> str:\n        context = metadata.get(\"context\", \"general\")\n        \n        text = self._filter_context_specific_language(text, context)\n        text = self._moderate_extreme_language(text, metadata.get(\"moderation\", \"standard\"))\n        \n        return text\n    \n    def _filter_context_specific_language(self, text: str, context: str) -> str:\n        if context == \"news\":\n            text = re.sub(r'(?i)allegedly|reportedly|rumored', '[STATEMENT]', text)\n        elif context == \"review\":\n            text = re.sub(r'(?i)terrible|awful|worst ever', 'not satisfactory', text)\n        elif context == \"political\":\n            text = re.sub(r'(?i)corrupt|scandal|investigation', '[POLITICAL-CLAIM]', text)\n        return text\n    \n    def _moderate_extreme_language(self, text: str, moderation: str) -> str:\n        if moderation == \"strict\":\n            text = re.sub(r'(?i)disagree|wrong|false', 'alternative view', text)\n        return text\n\nclass BlogContentFilter(ContentFilterStrategy):\n    def filter(self, text: str, metadata: Dict[str, str]) -> str:\n        category = metadata.get(\"category\", \"general\")\n        \n        text = self._filter_category_specific_terms(text, category)\n        text = self._filter_age_inappropriate_content(text, metadata.get(\"ageRating\", \"all\"))\n        \n        return text\n    \n    def _filter_category_specific_terms(self, text: str, category: str) -> str:\n        if category == \"technology\":\n            text = re.sub(r'(?i)hack|exploit|vulnerability', '[TECH-ISSUE]', text)\n        elif category == \"health\":\n            text = re.sub(r'(?i)cure|treatment|medication', '[MEDICAL-INFO]', text)\n        return text\n    \n    def _filter_age_inappropriate_content(self, text: str, age_rating: str) -> str:\n        if age_rating == \"teen\":\n            text = re.sub(r'(?i)violence|graphic|explicit', '[MATURE-CONTENT]', text)\n        return text\n\nclass NewsContentFilter(ContentFilterStrategy):\n    def filter(self, text: str, metadata: Dict[str, str]) -> str:\n        verification = metadata.get(\"verification\", \"unverified\")\n        source = metadata.get(\"source\", \"unknown\")\n        \n        text = self._add_verification_labels(text, verification)\n        text = self._add_source_labels(text, source)\n        text = self._filter_news_specific_terms(text)\n        \n        return text\n    \n    def _add_verification_labels(self, text: str, verification: str) -> str:\n        if verification == \"unverified\":\n            text = \"[UNVERIFIED-SOURCE] \" + text\n        return text\n    \n    def _add_source_labels(self, text: str, source: str) -> str:\n        if source == \"social\":\n            text = \"[SOCIAL-SOURCE] \" + text\n        return text\n    \n    def _filter_news_specific_terms(self, text: str) -> str:\n        return re.sub(r'(?i)exclusive:|scoop:', '[STORY]:', text)\n\nclass ForumContentFilter(ContentFilterStrategy):\n    def filter(self, text: str, metadata: Dict[str, str]) -> str:\n        forum_type = metadata.get(\"forumType\", \"general\")\n        user_level = metadata.get(\"userLevel\", \"novice\")\n        \n        text = self._filter_forum_specific_terms(text, forum_type)\n        text = self._add_user_level_labels(text, user_level)\n        \n        return text\n    \n    def _filter_forum_specific_terms(self, text: str, forum_type: str) -> str:\n        if forum_type == \"technical\":\n            text = re.sub(r'(?i)bug|error|crash', '[ISSUE]', text)\n        elif forum_type == \"gaming\":\n            text = re.sub(r'(?i)cheat|hack|mod', '[GAME-MODIFICATION]', text)\n        return text\n    \n    def _add_user_level_labels(self, text: str, user_level: str) -> str:\n        if user_level == \"newbie\":\n            text = \"[NEW-USER] \" + text\n        elif user_level == \"expert\":\n            text = \"[EXPERT] \" + text\n        return text\n\nclass ChatContentFilter(ContentFilterStrategy):\n    def filter(self, text: str, metadata: Dict[str, str]) -> str:\n        chat_type = metadata.get(\"chatType\", \"public\")\n        encryption = metadata.get(\"encryption\", \"none\")\n        \n        text = self._filter_chat_specific_content(text, chat_type)\n        text = self._filter_credentials(text, encryption)\n        text = self._filter_chat_abbreviations(text)\n        \n        return text\n    \n    def _filter_chat_specific_content(self, text: str, chat_type: str) -> str:\n        if chat_type == \"public\":\n            text = re.sub(r'(?i)private|personal|secret', '[PRIVATE-INFO]', text)\n        return text\n    \n    def _filter_credentials(self, text: str, encryption: str) -> str:\n        if encryption == \"none\":\n            text = re.sub(r'(?i)password|token|key', '[CREDENTIALS]', text)\n        return text\n    \n    def _filter_chat_abbreviations(self, text: str) -> str:\n        return re.sub(r'(?i)wtf|omfg|stfu|lmao', '[ABBREV]', text)\n\nclass ReviewContentFilter(ContentFilterStrategy):\n    def filter(self, text: str, metadata: Dict[str, str]) -> str:\n        product_type = metadata.get(\"productType\", \"general\")\n        reviewer_status = metadata.get(\"reviewerStatus\", \"regular\")\n        \n        text = self._filter_product_specific_concerns(text, product_type)\n        text = self._add_reviewer_status_labels(text, reviewer_status)\n        text = self._moderate_extreme_opinions(text)\n        \n        return text\n    \n    def _filter_product_specific_concerns(self, text: str, product_type: str) -> str:\n        if product_type == \"restaurant\":\n            text = re.sub(r'(?i)food poisoning|sick|illness', '[HEALTH-CONCERN]', text)\n        elif product_type == \"hotel\":\n            text = re.sub(r'(?i)dirty|filthy|disgusting', 'needs improvement', text)\n        return text\n    \n    def _add_reviewer_status_labels(self, text: str, reviewer_status: str) -> str:\n        if reviewer_status == \"verified\":\n            text = \"[VERIFIED-REVIEW] \" + text\n        return text\n    \n    def _moderate_extreme_opinions(self, text: str) -> str:\n        return re.sub(r'(?i)love it|hate it|perfect|disaster', '[OPINION]', text)\n\nclass ArticleContentFilter(ContentFilterStrategy):\n    def filter(self, text: str, metadata: Dict[str, str]) -> str:\n        publication = metadata.get(\"publication\", \"unknown\")\n        category = metadata.get(\"category\", \"general\")\n        \n        text = self._add_publication_labels(text, publication)\n        text = self._add_category_labels(text, category)\n        \n        return text\n    \n    def _add_publication_labels(self, text: str, publication: str) -> str:\n        if publication == \"tabloid\":\n            text = \"[TABLOID] \" + text\n        return text\n    \n    def _add_category_labels(self, text: str, category: str) -> str:\n        if category == \"opinion\":\n            text = \"[OPINION-PIECE] \" + text\n        return text\n\nclass VideoContentFilter(ContentFilterStrategy):\n    def filter(self, text: str, metadata: Dict[str, str]) -> str:\n        platform = metadata.get(\"platform\", \"general\")\n        content_type = metadata.get(\"contentType\", \"general\")\n        \n        text = self._filter_video_specific_content(text, platform)\n        text = self._add_content_type_labels(text, content_type)\n        \n        return text\n    \n    def _filter_video_specific_content(self, text: str, platform: str) -> str:\n        if platform == \"youtube\":\n            text = re.sub(r'(?i)like and subscribe', '[ENGAGEMENT-REQUEST]', text)\n        return text\n    \n    def _add_content_type_labels(self, text: str, content_type: str) -> str:\n        if content_type == \"tutorial\":\n            text = re.sub(r'(?i)step by step|how to', '[TUTORIAL]', text)\n        return text\n\nclass GenericContentFilter(ContentFilterStrategy):\n    def filter(self, text: str, metadata: Dict[str, str]) -> str:\n        content_source = metadata.get(\"source\", \"unknown\")\n        \n        text = self._add_source_labels(text, content_source)\n        text = self._filter_commercial_content(text)\n        \n        return text\n    \n    def _add_source_labels(self, text: str, content_source: str) -> str:\n        if content_source == \"user-generated\":\n            text = \"[USER-CONTENT] \" + text\n        return text\n    \n    def _filter_commercial_content(self, text: str) -> str:\n        return re.sub(r'(?i)spam|advertisement|promotion', '[COMMERCIAL]', text)\n\nclass ContentFilter:\n    def __init__(self):\n        self.filter_strategies: Dict[str, ContentFilterStrategy] = {}\n        self.filter_stats: Dict[str, int] = {}\n        self.banned_words: Set[str] = {\n            \"badword1\", \"badword2\", \"badword3\", \n            \"inappropriate\", \"offensive\", \"spam\", \"scam\"\n        }\n        self.email_pattern = re.compile(r'[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}')\n        self.phone_pattern = re.compile(r'\\b\\d{3}-\\d{3}-\\d{4}\\b|\\(\\d{3}\\)\\s*\\d{3}-\\d{4}')\n        self.url_pattern = re.compile(r'https?://[^\\s]+')\n        self.credit_card_pattern = re.compile(r'\\b\\d{4}[\\s-]?\\d{4}[\\s-]?\\d{4}[\\s-]?\\d{4}\\b')\n        self.ssn_pattern = re.compile(r'\\d{3}-\\d{2}-\\d{4}')\n        self.total_filtered = 0\n        \n        self._initialize_filter_strategies()\n    \n    def _initialize_filter_strategies(self) -> None:\n        self.filter_strategies = {\n            \"email\": EmailContentFilter(),\n            \"social\": SocialContentFilter(),\n            \"comment\": CommentContentFilter(),\n            \"blog\": BlogContentFilter(),\n            \"news\": NewsContentFilter(),\n            \"forum\": ForumContentFilter(),\n            \"chat\": ChatContentFilter(),\n            \"review\": ReviewContentFilter(),\n            \"article\": ArticleContentFilter(),\n            \"video\": VideoContentFilter(),\n            \"default\": GenericContentFilter()\n        }\n    \n    def register_filter_strategy(self, content_type: str, strategy: ContentFilterStrategy) -> None:\n        self.filter_strategies[content_type] = strategy\n    \n    def filter_content(self, content: Content) -> str:\n        filtered_text = content.text\n        content_type = content.content_type\n        metadata = content.metadata\n        \n        strategy = self.filter_strategies.get(content_type, self.filter_strategies[\"default\"])\n        filtered_text = strategy.filter(filtered_text, metadata)\n        \n        # Apply common filters to all content types\n        filtered_text = self._remove_common_profanity(filtered_text)\n        filtered_text = self._remove_personal_info(filtered_text)\n        filtered_text = self._filter_urls(filtered_text, metadata)\n        filtered_text = self._filter_emails(filtered_text, metadata)\n        filtered_text = self._filter_phone_numbers(filtered_text, metadata)\n        \n        self._update_stats(content_type)\n        self.total_filtered += 1\n        content.text = filtered_text\n        content.add_tag(\"filtered\")\n        \n        return filtered_text\n    \n    def _remove_common_profanity(self, text: str) -> str:\n        for word in self.banned_words:\n            pattern = rf'(?i)\\b{re.escape(word)}\\b'\n            text = re.sub(pattern, '[INAPPROPRIATE]', text)\n        return text\n    \n    def _remove_personal_info(self, text: str) -> str:\n        text = self.ssn_pattern.sub('[SSN]', text)\n        text = self.credit_card_pattern.sub('[CREDIT_CARD]', text)\n        text = re.sub(r'\\b(?:\\d{1,3}\\.){3}\\d{1,3}\\b', '[IP_ADDRESS]', text)\n        return text\n    \n    def _filter_urls(self, text: str, metadata: Dict[str, str]) -> str:\n        url_policy = metadata.get(\"urlPolicy\", \"allow\")\n        if url_policy == \"block\":\n            text = self.url_pattern.sub('[URL]', text)\n        return text\n    \n    def _filter_emails(self, text: str, metadata: Dict[str, str]) -> str:\n        email_policy = metadata.get(\"emailPolicy\", \"allow\")\n        if email_policy == \"block\":\n            text = self.email_pattern.sub('[EMAIL]', text)\n        return text\n    \n    def _filter_phone_numbers(self, text: str, metadata: Dict[str, str]) -> str:\n        phone_policy = metadata.get(\"phonePolicy\", \"allow\")\n        if phone_policy == \"block\":\n            text = self.phone_pattern.sub('[PHONE]', text)\n        return text\n    \n    def _update_stats(self, content_type: str) -> None:\n        self.filter_stats[content_type] = self.filter_stats.get(content_type, 0) + 1\n    \n    def get_filter_stats(self) -> Dict[str, int]:\n        return self.filter_stats.copy()\n    \n    def get_total_filtered(self) -> int:\n        return self.total_filtered\n    \n    def add_banned_word(self, word: str) -> None:\n        self.banned_words.add(word.lower())\n    \n    def remove_banned_word(self, word: str) -> None:\n        self.banned_words.discard(word.lower())\n    \n    def get_banned_words(self) -> Set[str]:\n        return self.banned_words.copy()",
        "level": "HARD",
      "language": "PYTHON",
      "violation": "OCP",
      "description": "Content filtering system"
    },
    {
      "input": "import datetime\n\nclass Order:\n    def __init__(self, id, items, shipping_address, shipping_method):\n        self.id = id\n        self.items = items\n        self.shipping_address = shipping_address\n        self.shipping_method = shipping_method\n        self.status = OrderStatus.CREATED\n        self.calculate_total_amount()\n    \n    def calculate_total_amount(self):\n        self.total_amount = sum(item.price * item.quantity for item in self.items)\n    \n    def get_id(self):\n        return self.id\n    \n    def get_items(self):\n        return self.items\n    \n    def get_shipping_address(self):\n        return self.shipping_address\n    \n    def get_shipping_method(self):\n        return self.shipping_method\n    \n    def get_status(self):\n        return self.status\n    \n    def set_status(self, status):\n        self.status = status\n    \n    def get_total_amount(self):\n        return self.total_amount\n\nclass OrderItem:\n    def __init__(self, product_id, quantity, price):\n        self.product_id = product_id\n        self.quantity = quantity\n        self.price = price\n    \n    def get_product_id(self):\n        return self.product_id\n    \n    def get_quantity(self):\n        return self.quantity\n    \n    def get_price(self):\n        return self.price\n\nclass Address:\n    def __init__(self, name, street, city, state, country, zip_code):\n        self.name = name\n        self.street = street\n        self.city = city\n        self.state = state\n        self.country = country\n        self.zip_code = zip_code\n    \n    def get_name(self):\n        return self.name\n    \n    def get_street(self):\n        return self.street\n    \n    def get_city(self):\n        return self.city\n    \n    def get_state(self):\n        return self.state\n    \n    def get_country(self):\n        return self.country\n    \n    def get_zip_code(self):\n        return self.zip_code\n\nclass Shipment:\n    def __init__(self, order_id, shipment_date):\n        self.order_id = order_id\n        self.shipment_date = shipment_date\n        self.cost = 0.0\n    \n    def get_order_id(self):\n        return self.order_id\n    \n    def get_shipment_date(self):\n        return self.shipment_date\n    \n    def get_cost(self):\n        return self.cost\n    \n    def set_cost(self, cost):\n        self.cost = cost\n\nclass ShippingCost:\n    def __init__(self, cost):\n        self.cost = cost\n    \n    def get_cost(self):\n        return self.cost\n\nclass ShipmentResult:\n    def __init__(self, success, message, shipment):\n        self.success = success\n        self.message = message\n        self.shipment = shipment\n    \n    def is_success(self):\n        return self.success\n    \n    def get_message(self):\n        return self.message\n    \n    def get_shipment(self):\n        return self.shipment\n\nclass OrderRepository:\n    def find_by_id(self, id):\n        pass\n    \n    def update(self, order):\n        pass\n\nclass InventoryService:\n    def is_in_stock(self, product_id, quantity):\n        pass\n    \n    def reserve(self, product_id, quantity):\n        pass\n    \n    def get_product(self, product_id):\n        pass\n\nclass Product:\n    def __init__(self, id, name, weight, price):\n        self.id = id\n        self.name = name\n        self.weight = weight\n        self.price = price\n    \n    def get_id(self):\n        return self.id\n    \n    def get_name(self):\n        return self.name\n    \n    def get_weight(self):\n        return self.weight\n    \n    def get_price(self):\n        return self.price\n\nclass Logger:\n    def log(self, message):\n        pass\n\nclass OrderStatus:\n    CREATED = \"CREATED\"\n    PAID = \"PAID\"\n    SHIPPED = \"SHIPPED\"\n    DELIVERED = \"DELIVERED\"\n    CANCELLED = \"CANCELLED\"\n\nclass ShippingService:\n    def __init__(self, order_repository, inventory_service, logger):\n        self.order_repository = order_repository\n        self.inventory_service = inventory_service\n        self.logger = logger\n    \n    def process_shipment(self, order_id):\n        order = self.order_repository.find_by_id(order_id)\n        \n        if order is None:\n            raise ValueError(f\"Order not found: {order_id}\")\n        \n        if order.get_status() != OrderStatus.PAID:\n            return ShipmentResult(False, \"Order is not paid yet\", None)\n        \n        for item in order.get_items():\n            if not self.inventory_service.is_in_stock(item.get_product_id(), item.get_quantity()):\n                return ShipmentResult(False, f\"Product out of stock: {item.get_product_id()}\", None)\n        \n        shipment = Shipment(order_id, datetime.datetime.now())\n        shipping_cost = self.calculate_shipping_cost(order)\n        shipment.set_cost(shipping_cost.get_cost())\n        \n        for item in order.get_items():\n            self.inventory_service.reserve(item.get_product_id(), item.get_quantity())\n        \n        order.set_status(OrderStatus.SHIPPED)\n        self.order_repository.update(order)\n        \n        self.logger.log(f\"Order shipped: {order_id}, cost: {shipping_cost.get_cost()}\")\n        return ShipmentResult(True, \"Order shipped successfully\", shipment)\n    \n    def calculate_shipping_cost(self, order):\n        destination = order.get_shipping_address()\n        total_weight = self.calculate_order_weight(order)\n        base_cost = 0.0\n        \n        shipping_method = order.get_shipping_method()\n        \n        if shipping_method == \"standard\":\n            base_cost = 5.0\n            weight_cost = total_weight * 0.5\n            distance = self.calculate_distance(destination)\n            distance_factor = distance * 0.01\n            \n            return ShippingCost(base_cost + weight_cost + distance_factor)\n            \n        elif shipping_method == \"express\":\n            base_cost = 15.0\n            weight_cost = total_weight * 0.75\n            distance = self.calculate_distance(destination)\n            distance_factor = distance * 0.015\n            \n            return ShippingCost(base_cost + weight_cost + distance_factor)\n            \n        elif shipping_method == \"overnight\":\n            base_cost = 25.0\n            weight_cost = total_weight * 1.0\n            distance = self.calculate_distance(destination)\n            distance_factor = distance * 0.02\n            \n            return ShippingCost(base_cost + weight_cost + distance_factor)\n            \n        elif shipping_method == \"international\":\n            base_cost = 30.0\n            weight_cost = total_weight * 2.0\n            distance = self.calculate_distance(destination)\n            distance_factor = distance * 0.025\n            customs_fee = order.get_total_amount() * 0.05  # 5% of order value\n            \n            return ShippingCost(base_cost + weight_cost + distance_factor + customs_fee)\n        \n        return ShippingCost(10.0)\n    \n    def calculate_order_weight(self, order):\n        total_weight = 0.0\n        for item in order.get_items():\n            product = self.inventory_service.get_product(item.get_product_id())\n            total_weight += product.get_weight() * item.get_quantity()\n        return total_weight\n    \n    def calculate_distance(self, destination):\n        warehouse_address = Address(\"Warehouse\", \"123 Main St\", \"City\", \"State\", \"Country\", \"12345\")\n        \n        if warehouse_address.get_country() == destination.get_country():\n            if warehouse_address.get_state() == destination.get_state():\n                if warehouse_address.get_city() == destination.get_city():\n                    return 10.0  # Same city\n                return 50.0  # Same state, different city\n            return 200.0  # Same country, different state\n        return 1000.0  # International",
      "output": "import datetime\nfrom abc import ABC, abstractmethod\n\nclass Order:\n    def __init__(self, id, items, shipping_address, shipping_method):\n        self.id = id\n        self.items = items\n        self.shipping_address = shipping_address\n        self.shipping_method = shipping_method\n        self.status = OrderStatus.CREATED\n        self.calculate_total_amount()\n    \n    def calculate_total_amount(self):\n        self.total_amount = sum(item.price * item.quantity for item in self.items)\n    \n    def get_id(self):\n        return self.id\n    \n    def get_items(self):\n        return self.items\n    \n    def get_shipping_address(self):\n        return self.shipping_address\n    \n    def get_shipping_method(self):\n        return self.shipping_method\n    \n    def get_status(self):\n        return self.status\n    \n    def set_status(self, status):\n        self.status = status\n    \n    def get_total_amount(self):\n        return self.total_amount\n\nclass OrderItem:\n    def __init__(self, product_id, quantity, price):\n        self.product_id = product_id\n        self.quantity = quantity\n        self.price = price\n    \n    def get_product_id(self):\n        return self.product_id\n    \n    def get_quantity(self):\n        return self.quantity\n    \n    def get_price(self):\n        return self.price\n\nclass Address:\n    def __init__(self, name, street, city, state, country, zip_code):\n        self.name = name\n        self.street = street\n        self.city = city\n        self.state = state\n        self.country = country\n        self.zip_code = zip_code\n    \n    def get_name(self):\n        return self.name\n    \n    def get_street(self):\n        return self.street\n    \n    def get_city(self):\n        return self.city\n    \n    def get_state(self):\n        return self.state\n    \n    def get_country(self):\n        return self.country\n    \n    def get_zip_code(self):\n        return self.zip_code\n\nclass Shipment:\n    def __init__(self, order_id, shipment_date):\n        self.order_id = order_id\n        self.shipment_date = shipment_date\n        self.cost = 0.0\n    \n    def get_order_id(self):\n        return self.order_id\n    \n    def get_shipment_date(self):\n        return self.shipment_date\n    \n    def get_cost(self):\n        return self.cost\n    \n    def set_cost(self, cost):\n        self.cost = cost\n\nclass ShippingCost:\n    def __init__(self, cost):\n        self.cost = cost\n    \n    def get_cost(self):\n        return self.cost\n\nclass ShipmentResult:\n    def __init__(self, success, message, shipment):\n        self.success = success\n        self.message = message\n        self.shipment = shipment\n    \n    def is_success(self):\n        return self.success\n    \n    def get_message(self):\n        return self.message\n    \n    def get_shipment(self):\n        return self.shipment\n\nclass OrderRepository:\n    def find_by_id(self, id):\n        pass\n    \n    def update(self, order):\n        pass\n\nclass InventoryService:\n    def is_in_stock(self, product_id, quantity):\n        pass\n    \n    def reserve(self, product_id, quantity):\n        pass\n    \n    def get_product(self, product_id):\n        pass\n\nclass Product:\n    def __init__(self, id, name, weight, price):\n        self.id = id\n        self.name = name\n        self.weight = weight\n        self.price = price\n    \n    def get_id(self):\n        return self.id\n    \n    def get_name(self):\n        return self.name\n    \n    def get_weight(self):\n        return self.weight\n    \n    def get_price(self):\n        return self.price\n\nclass Logger:\n    def log(self, message):\n        pass\n\nclass OrderStatus:\n    CREATED = \"CREATED\"\n    PAID = \"PAID\"\n    SHIPPED = \"SHIPPED\"\n    DELIVERED = \"DELIVERED\"\n    CANCELLED = \"CANCELLED\"\n\nclass ShippingStrategy(ABC):\n    @abstractmethod\n    def calculate_cost(self, order, weight, distance):\n        pass\n\nclass StandardShippingStrategy(ShippingStrategy):\n    def calculate_cost(self, order, weight, distance):\n        base_cost = 5.0\n        weight_cost = weight * 0.5\n        distance_factor = distance * 0.01\n        \n        return ShippingCost(base_cost + weight_cost + distance_factor)\n\nclass ExpressShippingStrategy(ShippingStrategy):\n    def calculate_cost(self, order, weight, distance):\n        base_cost = 15.0\n        weight_cost = weight * 0.75\n        distance_factor = distance * 0.015\n        \n        return ShippingCost(base_cost + weight_cost + distance_factor)\n\nclass OvernightShippingStrategy(ShippingStrategy):\n    def calculate_cost(self, order, weight, distance):\n        base_cost = 25.0\n        weight_cost = weight * 1.0\n        distance_factor = distance * 0.02\n        \n        return ShippingCost(base_cost + weight_cost + distance_factor)\n\nclass InternationalShippingStrategy(ShippingStrategy):\n    def calculate_cost(self, order, weight, distance):\n        base_cost = 30.0\n        weight_cost = weight * 2.0\n        distance_factor = distance * 0.025\n        customs_fee = order.get_total_amount() * 0.05  # 5% of order value\n        \n        return ShippingCost(base_cost + weight_cost + distance_factor + customs_fee)\n\nclass ShippingService:\n    def __init__(self, order_repository, inventory_service, logger):\n        self.order_repository = order_repository\n        self.inventory_service = inventory_service\n        self.logger = logger\n        self.shipping_strategies = {}\n        self.initialize_shipping_strategies()\n    \n    def initialize_shipping_strategies(self):\n        self.shipping_strategies[\"standard\"] = StandardShippingStrategy()\n        self.shipping_strategies[\"express\"] = ExpressShippingStrategy()\n        self.shipping_strategies[\"overnight\"] = OvernightShippingStrategy()\n        self.shipping_strategies[\"international\"] = InternationalShippingStrategy()\n    \n    def register_shipping_strategy(self, method, strategy):\n        self.shipping_strategies[method] = strategy\n    \n    def process_shipment(self, order_id):\n        order = self.order_repository.find_by_id(order_id)\n        \n        if order is None:\n            raise ValueError(f\"Order not found: {order_id}\")\n        \n        if order.get_status() != OrderStatus.PAID:\n            return ShipmentResult(False, \"Order is not paid yet\", None)\n        \n        for item in order.get_items():\n            if not self.inventory_service.is_in_stock(item.get_product_id(), item.get_quantity()):\n                return ShipmentResult(False, f\"Product out of stock: {item.get_product_id()}\", None)\n        \n        shipment = Shipment(order_id, datetime.datetime.now())\n        shipping_cost = self.calculate_shipping_cost(order)\n        shipment.set_cost(shipping_cost.get_cost())\n        \n        # Reserve inventory items\n        for item in order.get_items():\n            self.inventory_service.reserve(item.get_product_id(), item.get_quantity())\n        \n        # Update order status\n        order.set_status(OrderStatus.SHIPPED)\n        self.order_repository.update(order)\n        \n        self.logger.log(f\"Order shipped: {order_id}, cost: {shipping_cost.get_cost()}\")\n        return ShipmentResult(True, \"Order shipped successfully\", shipment)\n    \n    def calculate_shipping_cost(self, order):\n        shipping_method = order.get_shipping_method()\n        strategy = self.shipping_strategies.get(shipping_method)\n        \n        if strategy is None:\n            # Default strategy if method not recognized\n            return ShippingCost(10.0)\n        \n        total_weight = self.calculate_order_weight(order)\n        destination = order.get_shipping_address()\n        distance = self.calculate_distance(destination)\n        \n        return strategy.calculate_cost(order, total_weight, distance)\n    \n    def calculate_order_weight(self, order):\n        total_weight = 0.0\n        for item in order.get_items():\n            product = self.inventory_service.get_product(item.get_product_id())\n            total_weight += product.get_weight() * item.get_quantity()\n        return total_weight\n    \n    def calculate_distance(self, destination):\n        # Simplified distance calculation. In a real system, this would use\n        # geographic coordinates or a distance service.\n        warehouse_address = Address(\"Warehouse\", \"123 Main St\", \"City\", \"State\", \"Country\", \"12345\")\n        \n        if warehouse_address.get_country() == destination.get_country():\n            if warehouse_address.get_state() == destination.get_state():\n                if warehouse_address.get_city() == destination.get_city():\n                    return 10.0  # Same city\n                return 50.0  # Same state, different city\n            return 200.0  # Same country, different state\n        return 1000.0  # International",
      "level": "HARD",
      "language": "PYTHON",
      "violation": "OCP",
      "description": "Shipping cost calculation system"
    },
    {
      "input": "class Shape(private val type: String) {\n    fun getType(): String {\n        return type\n    }\n}\n\nclass Rectangle(private val width: Double, private val height: Double) : Shape(\"rectangle\") {\n    fun getWidth(): Double {\n        return width\n    }\n    \n    fun getHeight(): Double {\n        return height\n    }\n}\n\nclass Circle(private val radius: Double) : Shape(\"circle\") {\n    fun getRadius(): Double {\n        return radius\n    }\n}\n\nclass AreaCalculator {\n    fun calculateArea(shape: Shape): Double {\n        return when (shape.getType()) {\n            \"rectangle\" -> {\n                val rectangle = shape as Rectangle\n                rectangle.getWidth() * rectangle.getHeight()\n            }\n            \"circle\" -> {\n                val circle = shape as Circle\n                Math.PI * circle.getRadius() * circle.getRadius()\n            }\n            else -> 0.0\n        }\n    }\n}",
      "output": "abstract class Shape {\n    abstract fun calculateArea(): Double\n}\n\nclass Rectangle(private val width: Double, private val height: Double) : Shape() {\n    override fun calculateArea(): Double {\n        return width * height\n    }\n}\n\nclass Circle(private val radius: Double) : Shape() {\n    override fun calculateArea(): Double {\n        return Math.PI * radius * radius\n    }\n}\n\nclass AreaCalculator {\n    fun calculateArea(shape: Shape): Double {\n        return shape.calculateArea()\n    }\n}",
      "level": "EASY",
      "language": "KOTLIN",
      "violation": "OCP",
      "description": "Shape area calculation system"
    },
    {
      "input": "class Character(private val type: String) {\n    fun getType(): String {\n        return type\n    }\n}\n\nclass Warrior(private val strength: Int) : Character(\"warrior\") {\n    fun getStrength(): Int {\n        return strength\n    }\n}\n\nclass Mage(private val mana: Int) : Character(\"mage\") {\n    fun getMana(): Int {\n        return mana\n    }\n}\n\nclass DamageCalculator {\n    fun calculateDamage(character: Character): Int {\n        return when (character.getType()) {\n            \"warrior\" -> {\n                val warrior = character as Warrior\n                warrior.getStrength() * 2\n            }\n            \"mage\" -> {\n                val mage = character as Mage\n                mage.getMana() * 3\n            }\n            else -> 0\n        }\n    }\n}",
      "output": "abstract class Character {\n    abstract fun calculateDamage(): Int\n}\n\nclass Warrior(private val strength: Int) : Character() {\n    override fun calculateDamage(): Int {\n        return strength * 2\n    }\n}\n\nclass Mage(private val mana: Int) : Character() {\n    override fun calculateDamage(): Int {\n        return mana * 3\n    }\n}\n\nclass DamageCalculator {\n    fun calculateDamage(character: Character): Int {\n        return character.calculateDamage()\n    }\n}",
      "level": "EASY",
      "language": "KOTLIN",
      "violation": "OCP",
      "description": "Character damage calculation system"
    },
    {
      "input": "class Animal(private val type: String) {\n    fun getType(): String {\n        return type\n    }\n}\n\nclass Dog : Animal(\"dog\")\n\nclass Cat : Animal(\"cat\")\n\nclass SoundMaker {\n    fun makeSound(animal: Animal): String {\n        return when (animal.getType()) {\n            \"dog\" -> \"Woof!\"\n            \"cat\" -> \"Meow!\"\n            else -> \"...\"\n        }\n    }\n}",
      "output": "abstract class Animal {\n    abstract fun makeSound(): String\n}\n\nclass Dog : Animal() {\n    override fun makeSound(): String {\n        return \"Woof!\"\n    }\n}\n\nclass Cat : Animal() {\n    override fun makeSound(): String {\n        return \"Meow!\"\n    }\n}\n\nclass SoundMaker {\n    fun makeSound(animal: Animal): String {\n        return animal.makeSound()\n    }\n}",
      "level": "EASY",
      "language": "KOTLIN",
      "violation": "OCP",
      "description": "Animal sound generation system"
    },
    {
      "input": "class Vehicle(private val type: String) {\n    fun getType(): String {\n        return type\n    }\n}\n\nclass Car(private val horsePower: Int) : Vehicle(\"car\") {\n    fun getHorsePower(): Int {\n        return horsePower\n    }\n}\n\nclass Bicycle(private val gearCount: Int) : Vehicle(\"bicycle\") {\n    fun getGearCount(): Int {\n        return gearCount\n    }\n}\n\nclass SpeedCalculator {\n    fun calculateMaxSpeed(vehicle: Vehicle): Double {\n        return when (vehicle.getType()) {\n            \"car\" -> {\n                val car = vehicle as Car\n                car.getHorsePower() * 0.4\n            }\n            \"bicycle\" -> {\n                val bicycle = vehicle as Bicycle\n                bicycle.getGearCount() * 5.0\n            }\n            else -> 0.0\n        }\n    }\n}",
      "output": "abstract class Vehicle {\n    abstract fun calculateMaxSpeed(): Double\n}\n\nclass Car(private val horsePower: Int) : Vehicle() {\n    override fun calculateMaxSpeed(): Double {\n        return horsePower * 0.4\n    }\n}\n\nclass Bicycle(private val gearCount: Int) : Vehicle() {\n    override fun calculateMaxSpeed(): Double {\n        return gearCount * 5.0\n    }\n}\n\nclass SpeedCalculator {\n    fun calculateMaxSpeed(vehicle: Vehicle): Double {\n        return vehicle.calculateMaxSpeed()\n    }\n}",
      "level": "EASY",
      "language": "KOTLIN",
      "violation": "OCP",
      "description": "Vehicle speed calculation system"
    },
    {
      "input": "class PaymentProcessor {\n    fun processPayment(paymentType: String, amount: Double) {\n        when (paymentType) {\n            \"creditCard\" -> processCreditCardPayment(amount)\n            \"paypal\" -> processPaypalPayment(amount)\n            \"bankTransfer\" -> processBankTransferPayment(amount)\n            else -> throw IllegalArgumentException(\"Unsupported payment type\")\n        }\n    }\n    \n    private fun processCreditCardPayment(amount: Double) {\n        println(\"Processing credit card payment of $${amount}\")\n        println(\"Validating credit card information\")\n        println(\"Charging credit card\")\n        println(\"Recording the credit card transaction\")\n    }\n    \n    private fun processPaypalPayment(amount: Double) {\n        println(\"Processing PayPal payment of $${amount}\")\n        println(\"Redirecting user to PayPal\")\n        println(\"Confirming PayPal payment\")\n        println(\"Recording the PayPal transaction\")\n    }\n    \n    private fun processBankTransferPayment(amount: Double) {\n        println(\"Processing bank transfer of $${amount}\")\n        println(\"Generating bank transfer instructions\")\n        println(\"Sending transfer confirmation email\")\n        println(\"Recording the bank transfer transaction\")\n    }\n}",
      "output": "interface PaymentMethod {\n    fun processPayment(amount: Double)\n}\n\nclass CreditCardPayment : PaymentMethod {\n    override fun processPayment(amount: Double) {\n        println(\"Processing credit card payment of $${amount}\")\n        println(\"Validating credit card information\")\n        println(\"Charging credit card\")\n        println(\"Recording the credit card transaction\")\n    }\n}\n\nclass PaypalPayment : PaymentMethod {\n    override fun processPayment(amount: Double) {\n        println(\"Processing PayPal payment of $${amount}\")\n        println(\"Redirecting user to PayPal\")\n        println(\"Confirming PayPal payment\")\n        println(\"Recording the PayPal transaction\")\n    }\n}\n\nclass BankTransferPayment : PaymentMethod {\n    override fun processPayment(amount: Double) {\n        println(\"Processing bank transfer of $${amount}\")\n        println(\"Generating bank transfer instructions\")\n        println(\"Sending transfer confirmation email\")\n        println(\"Recording the bank transfer transaction\")\n    }\n}\n\nclass PaymentProcessor {\n    fun processPayment(paymentMethod: PaymentMethod, amount: Double) {\n        paymentMethod.processPayment(amount)\n    }\n}",
      "level": "MODERATE",
      "language": "KOTLIN",
      "violation": "OCP",
      "description": "Payment processing system"
    },
    {
      "input": "class Customer(private val name: String, private val email: String) {\n    fun getName(): String {\n        return name\n    }\n    \n    fun getEmail(): String {\n        return email\n    }\n}\n\ninterface CustomerRepository {\n    fun save(customer: Customer)\n    fun findByEmail(email: String): Customer?\n}\n\ninterface EmailService {\n    fun sendEmail(to: String, subject: String, body: String)\n}\n\nclass CustomerService(private val repository: CustomerRepository, private val emailService: EmailService) {\n    \n    fun registerCustomer(name: String, email: String, customerType: String): Customer {\n        validateCustomerData(name, email)\n        \n        val customer = Customer(name, email)\n        repository.save(customer)\n        \n        sendWelcomeEmail(customer, customerType)\n        \n        return customer\n    }\n    \n    private fun validateCustomerData(name: String, email: String) {\n        if (name.isBlank()) {\n            throw IllegalArgumentException(\"Name cannot be empty\")\n        }\n        \n        if (email.isBlank() || !email.matches(Regex(\"^[A-Za-z0-9+_.-]+@(.+)$\"))) {\n            throw IllegalArgumentException(\"Invalid email format\")\n        }\n        \n        if (repository.findByEmail(email) != null) {\n            throw IllegalArgumentException(\"Email already registered\")\n        }\n    }\n    \n    private fun sendWelcomeEmail(customer: Customer, customerType: String) {\n        val subject = \"Welcome to Our Service\"\n        val body: String\n        \n        when (customerType) {\n            \"standard\" -> {\n                body = \"Dear ${customer.getName()},\\n\\n\" +\n                      \"Welcome to our service! We're excited to have you join us.\\n\\n\" +\n                      \"Your account has been created successfully. You can now access all standard features.\\n\\n\" +\n                      \"Best regards,\\n\" +\n                      \"The Service Team\"\n            }\n            \"premium\" -> {\n                body = \"Dear ${customer.getName()},\\n\\n\" +\n                      \"Welcome to our PREMIUM service! We're thrilled to have you as a premium member.\\n\\n\" +\n                      \"Your premium account has been activated with all exclusive features.\\n\" +\n                      \"Our premium support team is available 24/7 to assist you.\\n\\n\" +\n                      \"Best regards,\\n\" +\n                      \"The Premium Service Team\"\n            }\n            \"trial\" -> {\n                body = \"Dear ${customer.getName()},\\n\\n\" +\n                      \"Thank you for trying our service! Your 30-day trial has begun.\\n\\n\" +\n                      \"Explore all the features we offer during your trial period.\\n\" +\n                      \"We'll send you a reminder before your trial expires.\\n\\n\" +\n                      \"Best regards,\\n\" +\n                      \"The Service Team\"\n            }\n            else -> throw IllegalArgumentException(\"Unsupported customer type: $customerType\")\n        }\n        \n        emailService.sendEmail(customer.getEmail(), subject, body)\n    }\n}",
      "output": "class Customer(private val name: String, private val email: String) {\n    fun getName(): String {\n        return name\n    }\n    \n    fun getEmail(): String {\n        return email\n    }\n}\n\ninterface CustomerRepository {\n    fun save(customer: Customer)\n    fun findByEmail(email: String): Customer?\n}\n\ninterface EmailService {\n    fun sendEmail(to: String, subject: String, body: String)\n}\n\ninterface WelcomeEmailStrategy {\n    fun createEmailBody(customer: Customer): String\n}\n\nclass StandardWelcomeEmailStrategy : WelcomeEmailStrategy {\n    override fun createEmailBody(customer: Customer): String {\n        return \"Dear ${customer.getName()},\\n\\n\" +\n               \"Welcome to our service! We're excited to have you join us.\\n\\n\" +\n               \"Your account has been created successfully. You can now access all standard features.\\n\\n\" +\n               \"Best regards,\\n\" +\n               \"The Service Team\"\n    }\n}\n\nclass PremiumWelcomeEmailStrategy : WelcomeEmailStrategy {\n    override fun createEmailBody(customer: Customer): String {\n        return \"Dear ${customer.getName()},\\n\\n\" +\n               \"Welcome to our PREMIUM service! We're thrilled to have you as a premium member.\\n\\n\" +\n               \"Your premium account has been activated with all exclusive features.\\n\" +\n               \"Our premium support team is available 24/7 to assist you.\\n\\n\" +\n               \"Best regards,\\n\" +\n               \"The Premium Service Team\"\n    }\n}\n\nclass TrialWelcomeEmailStrategy : WelcomeEmailStrategy {\n    override fun createEmailBody(customer: Customer): String {\n        return \"Dear ${customer.getName()},\\n\\n\" +\n               \"Thank you for trying our service! Your 30-day trial has begun.\\n\\n\" +\n               \"Explore all the features we offer during your trial period.\\n\" +\n               \"We'll send you a reminder before your trial expires.\\n\\n\" +\n               \"Best regards,\\n\" +\n               \"The Service Team\"\n    }\n}\n\nclass CustomerService(private val repository: CustomerRepository, private val emailService: EmailService) {\n    private val emailStrategies = mutableMapOf<String, WelcomeEmailStrategy>()\n    \n    init {\n        initializeEmailStrategies()\n    }\n    \n    private fun initializeEmailStrategies() {\n        emailStrategies[\"standard\"] = StandardWelcomeEmailStrategy()\n        emailStrategies[\"premium\"] = PremiumWelcomeEmailStrategy()\n        emailStrategies[\"trial\"] = TrialWelcomeEmailStrategy()\n    }\n    \n    fun registerEmailStrategy(customerType: String, strategy: WelcomeEmailStrategy) {\n        emailStrategies[customerType] = strategy\n    }\n    \n    fun registerCustomer(name: String, email: String, customerType: String): Customer {\n        validateCustomerData(name, email)\n        \n        val customer = Customer(name, email)\n        repository.save(customer)\n        \n        // Send welcome email based on customer type\n        sendWelcomeEmail(customer, customerType)\n        \n        return customer\n    }\n    \n    private fun validateCustomerData(name: String, email: String) {\n        if (name.isBlank()) {\n            throw IllegalArgumentException(\"Name cannot be empty\")\n        }\n        \n        if (email.isBlank() || !email.matches(Regex(\"^[A-Za-z0-9+_.-]+@(.+)$\"))) {\n            throw IllegalArgumentException(\"Invalid email format\")\n        }\n        \n        if (repository.findByEmail(email) != null) {\n            throw IllegalArgumentException(\"Email already registered\")\n        }\n    }\n    \n    private fun sendWelcomeEmail(customer: Customer, customerType: String) {\n        val strategy = emailStrategies[customerType] ?: throw IllegalArgumentException(\"Unsupported customer type: $customerType\")\n        \n        val subject = \"Welcome to Our Service\"\n        val body = strategy.createEmailBody(customer)\n        \n        emailService.sendEmail(customer.getEmail(), subject, body)\n    }\n}",
      "level": "MODERATE",
      "language": "KOTLIN",
      "violation": "OCP",
      "description": "Customer registration email system"
    },
    {
      "input": "class Document(\n    private val title: String,\n    private val content: String,\n    private val creator: User\n) {\n    private val id: String = UUID.randomUUID().toString()\n    private val sharedUsers: MutableSet<User> = HashSet()\n    \n    fun getId(): String {\n        return id\n    }\n    \n    fun getTitle(): String {\n        return title\n    }\n    \n    fun getContent(): String {\n        return content\n    }\n    \n    fun getCreator(): User {\n        return creator\n    }\n    \n    fun getSharedUsers(): Set<User> {\n        return sharedUsers\n    }\n    \n    fun addSharedUser(user: User) {\n        sharedUsers.add(user)\n    }\n}\n\nclass User(\n    private val username: String,\n    private val contactInfo: String,\n    private val preferredContactMethod: String\n) {\n    private val id: String = UUID.randomUUID().toString()\n    \n    fun getId(): String {\n        return id\n    }\n    \n    fun getUsername(): String {\n        return username\n    }\n    \n    fun getContactInfo(): String {\n        return contactInfo\n    }\n    \n    fun getPreferredContactMethod(): String {\n        return preferredContactMethod\n    }\n}\n\ninterface DocumentRepository {\n    fun save(document: Document)\n    fun update(document: Document)\n    fun findById(id: String): Document?\n}\n\ninterface SecurityService {\n    fun canShareDocument(document: Document, user: User): Boolean\n}\n\ninterface Logger {\n    fun log(message: String)\n}\n\nclass DocumentService(\n    private val repository: DocumentRepository,\n    private val securityService: SecurityService,\n    private val logger: Logger\n) {\n    \n    fun createDocument(title: String, content: String, creator: User): Document {\n        val document = Document(title, content, creator)\n        repository.save(document)\n        logger.log(\"Document created: ${document.getId()}\")\n        return document\n    }\n    \n    fun shareDocument(document: Document, recipient: User, sharedBy: User) {\n        validateSharingPermissions(document, sharedBy)\n        document.addSharedUser(recipient)\n        repository.update(document)\n        logger.log(\"Document ${document.getId()} shared with ${recipient.getUsername()}\")\n        notifyUser(document, recipient, sharedBy)\n    }\n    \n    private fun validateSharingPermissions(document: Document, user: User) {\n        if (!securityService.canShareDocument(document, user)) {\n            throw SecurityException(\"User does not have permission to share this document\")\n        }\n    }\n    \n    private fun notifyUser(document: Document, recipient: User, sharedBy: User) {\n        val recipientContact = recipient.getContactInfo()\n        val message = \"Document '${document.getTitle()}' has been shared with you by ${sharedBy.getUsername()}\"\n        \n        val contactType = recipient.getPreferredContactMethod()\n        \n        when (contactType) {\n            \"email\" -> sendEmail(recipientContact, \"Document Shared\", message)\n            \"sms\" -> sendSMS(recipientContact, message)\n            \"push\" -> sendPushNotification(recipientContact, \"Document Shared\", message)\n            \"slack\" -> sendSlackMessage(recipientContact, message)\n            else -> logger.log(\"Unknown contact method: $contactType\")\n        }\n    }\n    \n    private fun sendEmail(email: String, subject: String, message: String) {\n        println(\"Sending email to $email\")\n        println(\"Subject: $subject\")\n        println(\"Message: $message\")\n    }\n    \n    private fun sendSMS(phoneNumber: String, message: String) {\n        println(\"Sending SMS to $phoneNumber\")\n        println(\"Message: $message\")\n    }\n    \n    private fun sendPushNotification(deviceId: String, title: String, message: String) {\n        println(\"Sending push notification to device $deviceId\")\n        println(\"Title: $title\")\n        println(\"Message: $message\")\n    }\n    \n    private fun sendSlackMessage(slackUserId: String, message: String) {\n        println(\"Sending Slack message to $slackUserId\")\n        println(\"Message: $message\")\n    }\n}\n\nclass SecurityException(message: String) : Exception(message)",
      "output": "interface NotificationStrategy {\n    fun sendNotification(contactInfo: String, subject: String, message: String)\n}\n\nclass EmailNotificationStrategy : NotificationStrategy {\n    override fun sendNotification(contactInfo: String, subject: String, message: String) {\n        println(\"Sending email to $contactInfo\")\n        println(\"Subject: $subject\")\n        println(\"Message: $message\")\n        // Email sending logic would go here\n    }\n}\n\nclass SMSNotificationStrategy : NotificationStrategy {\n    override fun sendNotification(contactInfo: String, subject: String, message: String) {\n        println(\"Sending SMS to $contactInfo\")\n        println(\"Message: $message\")\n        // SMS sending logic would go here\n    }\n}\n\nclass PushNotificationStrategy : NotificationStrategy {\n    override fun sendNotification(contactInfo: String, subject: String, message: String) {\n        println(\"Sending push notification to device $contactInfo\")\n        println(\"Title: $subject\")\n        println(\"Message: $message\")\n        // Push notification logic would go here\n    }\n}\n\nclass SlackNotificationStrategy : NotificationStrategy {\n    override fun sendNotification(contactInfo: String, subject: String, message: String) {\n        println(\"Sending Slack message to $contactInfo\")\n        println(\"Message: $message\")\n        // Slack messaging logic would go here\n    }\n}\n\nclass Document(\n    private val title: String,\n    private val content: String,\n    private val creator: User\n) {\n    private val id: String = UUID.randomUUID().toString()\n    private val sharedUsers: MutableSet<User> = HashSet()\n    \n    fun getId(): String {\n        return id\n    }\n    \n    fun getTitle(): String {\n        return title\n    }\n    \n    fun getContent(): String {\n        return content\n    }\n    \n    fun getCreator(): User {\n        return creator\n    }\n    \n    fun getSharedUsers(): Set<User> {\n        return sharedUsers\n    }\n    \n    fun addSharedUser(user: User) {\n        sharedUsers.add(user)\n    }\n}\n\nclass User(\n    private val username: String,\n    private val contactInfo: String,\n    private val preferredContactMethod: String\n) {\n    private val id: String = UUID.randomUUID().toString()\n    \n    fun getId(): String {\n        return id\n    }\n    \n    fun getUsername(): String {\n        return username\n    }\n    \n    fun getContactInfo(): String {\n        return contactInfo\n    }\n    \n    fun getPreferredContactMethod(): String {\n        return preferredContactMethod\n    }\n}\n\ninterface DocumentRepository {\n    fun save(document: Document)\n    fun update(document: Document)\n    fun findById(id: String): Document?\n}\n\ninterface SecurityService {\n    fun canShareDocument(document: Document, user: User): Boolean\n}\n\ninterface Logger {\n    fun log(message: String)\n}\n\nclass DocumentService(\n    private val repository: DocumentRepository,\n    private val securityService: SecurityService,\n    private val logger: Logger\n) {\n    private val notificationStrategies = mutableMapOf<String, NotificationStrategy>()\n    \n    init {\n        initializeNotificationStrategies()\n    }\n    \n    private fun initializeNotificationStrategies() {\n        notificationStrategies[\"email\"] = EmailNotificationStrategy()\n        notificationStrategies[\"sms\"] = SMSNotificationStrategy()\n        notificationStrategies[\"push\"] = PushNotificationStrategy()\n        notificationStrategies[\"slack\"] = SlackNotificationStrategy()\n    }\n    \n    fun registerNotificationStrategy(type: String, strategy: NotificationStrategy) {\n        notificationStrategies[type] = strategy\n    }\n    \n    fun createDocument(title: String, content: String, creator: User): Document {\n        val document = Document(title, content, creator)\n        repository.save(document)\n        logger.log(\"Document created: ${document.getId()}\")\n        return document\n    }\n    \n    fun shareDocument(document: Document, recipient: User, sharedBy: User) {\n        validateSharingPermissions(document, sharedBy)\n        document.addSharedUser(recipient)\n        repository.update(document)\n        logger.log(\"Document ${document.getId()} shared with ${recipient.getUsername()}\")\n        notifyUser(document, recipient, sharedBy)\n    }\n    \n    private fun validateSharingPermissions(document: Document, user: User) {\n        if (!securityService.canShareDocument(document, user)) {\n            throw SecurityException(\"User does not have permission to share this document\")\n        }\n    }\n    \n    private fun notifyUser(document: Document, recipient: User, sharedBy: User) {\n        val recipientContact = recipient.getContactInfo()\n        val message = \"Document '${document.getTitle()}' has been shared with you by ${sharedBy.getUsername()}\"\n        \n        // Notification logic based on recipient's preferred contact method\n        val contactType = recipient.getPreferredContactMethod()\n        val strategy = notificationStrategies[contactType]\n        \n        if (strategy != null) {\n            strategy.sendNotification(recipientContact, \"Document Shared\", message)\n        } else {\n            logger.log(\"Unknown contact method: $contactType\")\n        }\n    }\n}\n\nclass SecurityException(message: String) : Exception(message)",
      "level": "MODERATE",
      "language": "KOTLIN",
      "violation": "OCP",

      "description": "Document sharing notification system"
    },
    {
      "input": "class Report(private val id: String, private val title: String) {\n    fun getId(): String {\n        return id\n    }\n    \n    fun getTitle(): String {\n        return title\n    }\n}\n\nclass ReportData {\n}\n\nclass PdfDocument {\n    fun generate(): ByteArray {\n        return ByteArray(0)\n    }\n}\n\nclass ExcelDocument {\n    fun generate(): ByteArray {\n        return ByteArray(0)\n    }\n}\n\nclass ExportResult(val success: Boolean, val message: String, val outputPath: String?)\n\ninterface DataSource {\n    fun getReport(reportId: String): Report?\n    fun getReportData(reportId: String): ReportData\n}\n\ninterface FileSystem {\n    fun writeFile(path: String, data: ByteArray): Boolean\n}\n\nclass ReportExporter(private val dataSource: DataSource, private val fileSystem: FileSystem) {\n    \n    fun exportReport(reportId: String, exportFormat: String, destination: String): ExportResult {\n        val report = dataSource.getReport(reportId)\n        \n        if (report == null) {\n            return ExportResult(false, \"Report not found\", null)\n        }\n        \n        val reportData = generateReportData(report, exportFormat)\n        if (reportData == null) {\n            return ExportResult(false, \"Failed to generate report\", null)\n        }\n        \n        val fileName = report.getTitle() + getFileExtension(exportFormat)\n        fileSystem.writeFile(\"$destination/$fileName\", reportData)\n        return ExportResult(true, \"Report exported successfully\", \"$destination/$fileName\")\n    }\n    \n    private fun generateReportData(report: Report, exportFormat: String): ByteArray? {\n        try {\n            val data = dataSource.getReportData(report.getId())\n            \n            return when (exportFormat) {\n                \"pdf\" -> {\n                    val document = PdfDocument()\n                    document.generate()\n                }\n                \"excel\" -> {\n                    val document = ExcelDocument()\n                    document.generate()\n                }\n                \"html\" -> {\n                    val html = StringBuilder()\n                    html.toString().toByteArray()\n                }\n                \"csv\" -> {\n                    val csv = StringBuilder()\n                    csv.toString().toByteArray()\n                }\n                else -> null\n            }\n            \n        } catch (e: Exception) {\n            return null\n        }\n    }\n    \n    private fun getFileExtension(format: String): String {\n        return when (format) {\n            \"pdf\" -> \".pdf\"\n            \"excel\" -> \".xlsx\"\n            \"html\" -> \".html\"\n            \"csv\" -> \".csv\"\n            else -> \".txt\"\n        }\n    }\n}",
      "output": "interface ExportFormatStrategy {\n    fun generateReport(report: Report, data: ReportData): ByteArray\n    fun getFileExtension(): String\n}\n\nclass PdfExportStrategy : ExportFormatStrategy {\n    override fun generateReport(report: Report, data: ReportData): ByteArray {\n        val document = PdfDocument()\n        return document.generate()\n    }\n    \n    override fun getFileExtension(): String {\n        return \".pdf\"\n    }\n}\n\nclass ExcelExportStrategy : ExportFormatStrategy {\n    override fun generateReport(report: Report, data: ReportData): ByteArray {\n        val document = ExcelDocument()\n        return document.generate()\n    }\n    \n    override fun getFileExtension(): String {\n        return \".xlsx\"\n    }\n}\n\nclass HtmlExportStrategy : ExportFormatStrategy {\n    override fun generateReport(report: Report, data: ReportData): ByteArray {\n        val html = StringBuilder()\n        return html.toString().toByteArray()\n    }\n    \n    override fun getFileExtension(): String {\n        return \".html\"\n    }\n}\n\nclass CsvExportStrategy : ExportFormatStrategy {\n    override fun generateReport(report: Report, data: ReportData): ByteArray {\n        val csv = StringBuilder()\n        return csv.toString().toByteArray()\n    }\n    \n    override fun getFileExtension(): String {\n        return \".csv\"\n    }\n}\n\nclass Report(private val id: String, private val title: String) {\n    fun getId(): String {\n        return id\n    }\n    \n    fun getTitle(): String {\n        return title\n    }\n}\n\nclass ReportData {\n    // Placeholder for actual report data\n}\n\nclass PdfDocument {\n    fun generate(): ByteArray {\n        return ByteArray(0)\n    }\n}\n\nclass ExcelDocument {\n    fun generate(): ByteArray {\n        return ByteArray(0)\n    }\n}\n\nclass ExportResult(val success: Boolean, val message: String, val outputPath: String?)\n\ninterface DataSource {\n    fun getReport(reportId: String): Report?\n    fun getReportData(reportId: String): ReportData\n}\n\ninterface FileSystem {\n    fun writeFile(path: String, data: ByteArray): Boolean\n}\n\nclass ReportExporter(private val dataSource: DataSource, private val fileSystem: FileSystem) {\n    private val exportStrategies = mutableMapOf<String, ExportFormatStrategy>()\n    \n    init {\n        initializeExportStrategies()\n    }\n    \n    private fun initializeExportStrategies() {\n        exportStrategies[\"pdf\"] = PdfExportStrategy()\n        exportStrategies[\"excel\"] = ExcelExportStrategy()\n        exportStrategies[\"html\"] = HtmlExportStrategy()\n        exportStrategies[\"csv\"] = CsvExportStrategy()\n    }\n    \n    fun registerExportStrategy(format: String, strategy: ExportFormatStrategy) {\n        exportStrategies[format] = strategy\n    }\n    \n    fun exportReport(reportId: String, exportFormat: String, destination: String): ExportResult {\n        val report = dataSource.getReport(reportId)\n        \n        if (report == null) {\n            return ExportResult(false, \"Report not found\", null)\n        }\n        \n        val reportData = generateReportData(report, exportFormat)\n        if (reportData == null) {\n            return ExportResult(false, \"Failed to generate report\", null)\n        }\n        \n        val fileName = report.getTitle() + getFileExtension(exportFormat)\n        fileSystem.writeFile(\"$destination/$fileName\", reportData)\n        return ExportResult(true, \"Report exported successfully\", \"$destination/$fileName\")\n    }\n    \n    private fun generateReportData(report: Report, exportFormat: String): ByteArray? {\n        try {\n            val data = dataSource.getReportData(report.getId())\n            val strategy = exportStrategies[exportFormat]\n            \n            return strategy?.generateReport(report, data)\n        } catch (e: Exception) {\n            return null\n        }\n    }\n    \n    private fun getFileExtension(format: String): String {\n        val strategy = exportStrategies[format]\n        return strategy?.getFileExtension() ?: \".txt\"\n    }\n}",
      "level": "MODERATE",
      "language": "KOTLIN",
      "violation": "OCP",
      "description": "Report export format system"
    },
    {
      "input": "import java.text.DecimalFormat\nimport java.text.SimpleDateFormat\nimport java.util.*\n\ndata class SalesData(\n    private val sales: MutableList<Sale>,\n    private val companyName: String,\n    private val reportingPeriod: String\n) {\n    fun getSales(): List<Sale> = sales.toList()\n    \n    fun getCompanyName(): String = companyName\n    \n    fun getReportingPeriod(): String = reportingPeriod\n    \n    fun addSale(sale: Sale) {\n        sales.add(sale)\n    }\n    \n    fun getSalesByRegion(region: String): List<Sale> {\n        return sales.filter { it.region == region }\n    }\n    \n    fun getTotalSales(): Double {\n        return sales.sumOf { it.getNetAmount() }\n    }\n}\n\ndata class Sale(\n    val productName: String,\n    val productCategory: String,\n    val amount: Double,\n    val quantity: Int,\n    val date: Date,\n    val region: String,\n    val salesPerson: String,\n    val customerId: String,\n    val discount: Double\n) {\n    fun getProductName(): String = productName\n    \n    fun getProductCategory(): String = productCategory\n    \n    fun getAmount(): Double = amount\n    \n    fun getQuantity(): Int = quantity\n    \n    fun getDate(): Date = date\n    \n    fun getRegion(): String = region\n    \n    fun getSalesPerson(): String = salesPerson\n    \n    fun getCustomerId(): String = customerId\n    \n    fun getDiscount(): Double = discount\n    \n    fun getNetAmount(): Double = amount - discount\n}\n\nclass ReportGenerator {\n    private val currencyFormat = DecimalFormat(\"$#,##0.00\")\n    private val dateFormat = SimpleDateFormat(\"yyyy-MM-dd\")\n    \n    fun generateReport(reportType: String, data: SalesData): String {\n        val report = StringBuilder()\n        \n        // Add header\n        report.appendLine(\"===================================\")\n        report.appendLine(\"    ${data.getCompanyName()}\")\n        report.appendLine(\"  Reporting Period: ${data.getReportingPeriod()}\")\n        report.appendLine(\"===================================\")\n        report.appendLine()\n        \n        when (reportType.lowercase()) {\n            \"daily\" -> {\n                report.appendLine(\"DAILY SALES REPORT\")\n                report.appendLine(\"===================\")\n                report.appendLine()\n                \n                val dailySales = mutableMapOf<String, Double>()\n                val dailyQuantities = mutableMapOf<String, Int>()\n                \n                data.getSales().forEach { sale ->\n                    val dateStr = dateFormat.format(sale.getDate())\n                    dailySales[dateStr] = dailySales.getOrDefault(dateStr, 0.0) + sale.getNetAmount()\n                    dailyQuantities[dateStr] = dailyQuantities.getOrDefault(dateStr, 0) + sale.getQuantity()\n                }\n                \n                dailySales.keys.sorted().forEach { dateStr ->\n                    val salesAmount = dailySales[dateStr]!!\n                    val unitsAmount = dailyQuantities[dateStr]!!\n                    report.appendLine(\n                        \"Date: $dateStr, Total Sales: ${currencyFormat.format(salesAmount)}, \" +\n                        \"Units Sold: $unitsAmount\"\n                    )\n                }\n                \n                val totalSales = dailySales.values.sum()\n                val totalUnits = dailyQuantities.values.sum()\n                val avgDailySales = if (dailySales.isNotEmpty()) totalSales / dailySales.size else 0.0\n                \n                report.appendLine()\n                report.appendLine(\"Grand Total: ${currencyFormat.format(totalSales)}\")\n                report.appendLine(\"Total Units: $totalUnits\")\n                report.appendLine(\"Average Daily Sales: ${currencyFormat.format(avgDailySales)}\")\n            }\n            \n            \"product\" -> {\n                report.appendLine(\"PRODUCT SALES REPORT\")\n                report.appendLine(\"====================\")\n                report.appendLine()\n                \n                val productSales = mutableMapOf<String, Double>()\n                val productQuantities = mutableMapOf<String, Int>()\n                val productCategories = mutableMapOf<String, String>()\n                \n                data.getSales().forEach { sale ->\n                    val product = sale.getProductName()\n                    productSales[product] = productSales.getOrDefault(product, 0.0) + sale.getNetAmount()\n                    productQuantities[product] = productQuantities.getOrDefault(product, 0) + sale.getQuantity()\n                    productCategories[product] = sale.getProductCategory()\n                }\n                \n                // Sort by sales amount descending\n                val sortedProducts = productSales.toList().sortedByDescending { it.second }\n                \n                sortedProducts.forEach { (product, salesAmount) ->\n                    val unitsAmount = productQuantities[product]!!\n                    val category = productCategories[product]!!\n                    val avgPrice = if (unitsAmount > 0) salesAmount / unitsAmount else 0.0\n                    \n                    report.appendLine(\"Product: $product (Category: $category)\")\n                    report.appendLine(\n                        \"  Sales: ${currencyFormat.format(salesAmount)}, \" +\n                        \"Units: $unitsAmount, \" +\n                        \"Avg Price: ${currencyFormat.format(avgPrice)}\"\n                    )\n                    report.appendLine()\n                }\n                \n                val totalProductSales = productSales.values.sum()\n                report.appendLine(\"Total Product Sales: ${currencyFormat.format(totalProductSales)}\")\n            }\n            \n            \"regional\" -> {\n                report.appendLine(\"REGIONAL SALES REPORT\")\n                report.appendLine(\"=====================\")\n                report.appendLine()\n                \n                val regionalSales = mutableMapOf<String, Double>()\n                val regionalCustomers = mutableMapOf<String, MutableSet<String>>()\n                val regionalSalespeople = mutableMapOf<String, MutableSet<String>>()\n                \n                data.getSales().forEach { sale ->\n                    val region = sale.getRegion()\n                    regionalSales[region] = regionalSales.getOrDefault(region, 0.0) + sale.getNetAmount()\n                    \n                    regionalCustomers.getOrPut(region) { mutableSetOf() }.add(sale.getCustomerId())\n                    regionalSalespeople.getOrPut(region) { mutableSetOf() }.add(sale.getSalesPerson())\n                }\n                \n                regionalSales.forEach { (region, salesAmount) ->\n                    val customerCount = regionalCustomers[region]?.size ?: 0\n                    val salesTeamSize = regionalSalespeople[region]?.size ?: 0\n                    val avgSalesPerCustomer = if (customerCount > 0) salesAmount / customerCount else 0.0\n                    \n                    report.appendLine(\"Region: $region\")\n                    report.appendLine(\"  Total Sales: ${currencyFormat.format(salesAmount)}\")\n                    report.appendLine(\"  Unique Customers: $customerCount\")\n                    report.appendLine(\"  Sales Team Size: $salesTeamSize\")\n                    report.appendLine(\"  Avg Sales per Customer: ${currencyFormat.format(avgSalesPerCustomer)}\")\n                    report.appendLine()\n                }\n                \n                val totalRegionalSales = regionalSales.values.sum()\n                report.appendLine(\"Total Regional Sales: ${currencyFormat.format(totalRegionalSales)}\")\n            }\n            \n            \"salesperson\" -> {\n                report.appendLine(\"SALESPERSON PERFORMANCE REPORT\")\n                report.appendLine(\"==============================\")\n                report.appendLine()\n                \n                val salespersonSales = mutableMapOf<String, Double>()\n                val salespersonCustomers = mutableMapOf<String, MutableSet<String>>()\n                val salespersonRegions = mutableMapOf<String, String>()\n                \n                data.getSales().forEach { sale ->\n                    val salesperson = sale.getSalesPerson()\n                    salespersonSales[salesperson] = salespersonSales.getOrDefault(salesperson, 0.0) + sale.getNetAmount()\n                    salespersonCustomers.getOrPut(salesperson) { mutableSetOf() }.add(sale.getCustomerId())\n                    salespersonRegions[salesperson] = sale.getRegion()\n                }\n                \n                // Sort by performance\n                val sortedSalespeople = salespersonSales.toList().sortedByDescending { it.second }\n                \n                sortedSalespeople.forEachIndexed { index, (salesperson, salesAmount) ->\n                    val rank = index + 1\n                    val customerCount = salespersonCustomers[salesperson]?.size ?: 0\n                    val region = salespersonRegions[salesperson] ?: \"Unknown\"\n                    val avgSalePerCustomer = if (customerCount > 0) salesAmount / customerCount else 0.0\n                    \n                    report.appendLine(\"#$rank $salesperson (Region: $region)\")\n                    report.appendLine(\"  Total Sales: ${currencyFormat.format(salesAmount)}\")\n                    report.appendLine(\"  Customers Served: $customerCount\")\n                    report.appendLine(\"  Avg Sale per Customer: ${currencyFormat.format(avgSalePerCustomer)}\")\n                    report.appendLine()\n                }\n            }\n            \n            \"category\" -> {\n                report.appendLine(\"CATEGORY ANALYSIS REPORT\")\n                report.appendLine(\"========================\")\n                report.appendLine()\n                \n                val categorySales = mutableMapOf<String, Double>()\n                val categoryQuantities = mutableMapOf<String, Int>()\n                val categoryProducts = mutableMapOf<String, MutableSet<String>>()\n                \n                data.getSales().forEach { sale ->\n                    val category = sale.getProductCategory()\n                    categorySales[category] = categorySales.getOrDefault(category, 0.0) + sale.getNetAmount()\n                    categoryQuantities[category] = categoryQuantities.getOrDefault(category, 0) + sale.getQuantity()\n                    categoryProducts.getOrPut(category) { mutableSetOf() }.add(sale.getProductName())\n                }\n                \n                val totalSales = categorySales.values.sum()\n                \n                categorySales.forEach { (category, salesAmount) ->\n                    val unitsSold = categoryQuantities[category] ?: 0\n                    val productVariety = categoryProducts[category]?.size ?: 0\n                    val percentage = if (totalSales > 0) (salesAmount / totalSales * 100) else 0.0\n                    \n                    report.appendLine(\"Category: $category\")\n                    report.appendLine(\"  Sales: ${currencyFormat.format(salesAmount)} (${String.format(\"%.1f\", percentage)}% of total)\")\n                    report.appendLine(\"  Units Sold: $unitsSold\")\n                    report.appendLine(\"  Product Variety: $productVariety products\")\n                    report.appendLine()\n                }\n            }\n            \n            \"quarterly\" -> {\n                report.appendLine(\"QUARTERLY PERFORMANCE REPORT\")\n                report.appendLine(\"============================\")\n                report.appendLine()\n                \n                val quarterlySales = mutableMapOf<String, Double>()\n                val quarterlyQuantities = mutableMapOf<String, Int>()\n                \n                data.getSales().forEach { sale ->\n                    val calendar = Calendar.getInstance().apply { time = sale.getDate() }\n                    val quarter = \"Q${(calendar.get(Calendar.MONTH) / 3) + 1} ${calendar.get(Calendar.YEAR)}\"\n                    quarterlySales[quarter] = quarterlySales.getOrDefault(quarter, 0.0) + sale.getNetAmount()\n                    quarterlyQuantities[quarter] = quarterlyQuantities.getOrDefault(quarter, 0) + sale.getQuantity()\n                }\n                \n                quarterlySales.keys.sorted().forEach { quarter ->\n                    val salesAmount = quarterlySales[quarter]!!\n                    val unitsSold = quarterlyQuantities[quarter]!!\n                    report.appendLine(\n                        \"Quarter: $quarter, Sales: ${currencyFormat.format(salesAmount)}, \" +\n                        \"Units: $unitsSold\"\n                    )\n                }\n                \n                val totalQuarterlySales = quarterlySales.values.sum()\n                report.appendLine()\n                report.appendLine(\"Total Quarterly Sales: ${currencyFormat.format(totalQuarterlySales)}\")\n            }\n            \n            \"monthly\" -> {\n                report.appendLine(\"MONTHLY SALES BREAKDOWN\")\n                report.appendLine(\"=======================\")\n                report.appendLine()\n                \n                val monthlySales = mutableMapOf<String, Double>()\n                val monthlyDiscounts = mutableMapOf<String, Double>()\n                \n                data.getSales().forEach { sale ->\n                    val monthYear = SimpleDateFormat(\"yyyy-MM\").format(sale.getDate())\n                    monthlySales[monthYear] = monthlySales.getOrDefault(monthYear, 0.0) + sale.getNetAmount()\n                    monthlyDiscounts[monthYear] = monthlyDiscounts.getOrDefault(monthYear, 0.0) + sale.getDiscount()\n                }\n                \n                monthlySales.keys.sorted().forEach { month ->\n                    val salesAmount = monthlySales[month]!!\n                    val discountsAmount = monthlyDiscounts[month]!!\n                    val grossRevenue = salesAmount + discountsAmount\n                    \n                    report.appendLine(\"Month: $month\")\n                    report.appendLine(\"  Net Sales: ${currencyFormat.format(salesAmount)}\")\n                    report.appendLine(\"  Discounts Given: ${currencyFormat.format(discountsAmount)}\")\n                    report.appendLine(\"  Gross Revenue: ${currencyFormat.format(grossRevenue)}\")\n                    report.appendLine()\n                }\n            }\n            \n            \"customer\" -> {\n                report.appendLine(\"CUSTOMER ANALYSIS REPORT\")\n                report.appendLine(\"========================\")\n                report.appendLine()\n                \n                val customerSales = mutableMapOf<String, Double>()\n                val customerTransactions = mutableMapOf<String, Int>()\n                val customerRegions = mutableMapOf<String, String>()\n                \n                data.getSales().forEach { sale ->\n                    val customer = sale.getCustomerId()\n                    customerSales[customer] = customerSales.getOrDefault(customer, 0.0) + sale.getNetAmount()\n                    customerTransactions[customer] = customerTransactions.getOrDefault(customer, 0) + 1\n                    customerRegions[customer] = sale.getRegion()\n                }\n                \n                val sortedCustomers = customerSales.toList().sortedByDescending { it.second }\n                \n                sortedCustomers.forEach { (customer, salesAmount) ->\n                    val transactionCount = customerTransactions[customer] ?: 0\n                    val region = customerRegions[customer] ?: \"Unknown\"\n                    val avgTransaction = if (transactionCount > 0) salesAmount / transactionCount else 0.0\n                    \n                    report.appendLine(\"Customer: $customer (Region: $region)\")\n                    report.appendLine(\"  Total Purchases: ${currencyFormat.format(salesAmount)}\")\n                    report.appendLine(\"  Transaction Count: $transactionCount\")\n                    report.appendLine(\"  Avg Transaction: ${currencyFormat.format(avgTransaction)}\")\n                    report.appendLine()\n                }\n            }\n        }\n        \n        // Add footer\n        report.appendLine()\n        report.appendLine(\"===================================\")\n        report.appendLine(\"Report Generated: ${SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Date())}\")\n        report.appendLine(\"===================================\")\n        \n        return report.toString()\n    }\n    \n    fun generateSummaryReport(data: SalesData): String {\n        val summary = StringBuilder()\n        summary.appendLine(\"EXECUTIVE SUMMARY\")\n        summary.appendLine(\"=================\")\n        summary.appendLine()\n        \n        val totalSales = data.getSales().sumOf { it.getNetAmount() }\n        val totalTransactions = data.getSales().size\n        val avgTransaction = if (totalTransactions > 0) totalSales / totalTransactions else 0.0\n        \n        val uniqueCustomers = data.getSales().map { it.getCustomerId() }.toSet()\n        val uniqueProducts = data.getSales().map { it.getProductName() }.toSet()\n        val uniqueRegions = data.getSales().map { it.getRegion() }.toSet()\n        \n        summary.appendLine(\"Total Sales: ${currencyFormat.format(totalSales)}\")\n        summary.appendLine(\"Total Transactions: $totalTransactions\")\n        summary.appendLine(\"Average Transaction: ${currencyFormat.format(avgTransaction)}\")\n        summary.appendLine(\"Unique Customers: ${uniqueCustomers.size}\")\n        summary.appendLine(\"Unique Products: ${uniqueProducts.size}\")\n        summary.appendLine(\"Active Regions: ${uniqueRegions.size}\")\n        \n        return summary.toString()\n    }\n    \n    fun generateComparativeReport(data: SalesData, comparisonPeriod: String): String {\n        val comparative = StringBuilder()\n        comparative.appendLine(\"COMPARATIVE ANALYSIS REPORT\")\n        comparative.appendLine(\"===========================\")\n        comparative.appendLine()\n        \n        val totalSales = data.getSales().sumOf { it.getNetAmount() }\n        \n        comparative.appendLine(\"Current Period Sales: ${currencyFormat.format(totalSales)}\")\n        comparative.appendLine(\"Comparison Period: $comparisonPeriod\")\n        comparative.appendLine(\"Note: Comparison data would be calculated here with historical data\")\n        \n        return comparative.toString()\n    }\n    \n    fun generateTrendAnalysisReport(data: SalesData): String {\n        val trend = StringBuilder()\n        trend.appendLine(\"SALES TREND ANALYSIS\")\n        trend.appendLine(\"====================\")\n        trend.appendLine()\n        \n        // Group sales by month\n        val monthlyTrends = mutableMapOf<String, Double>()\n        data.getSales().forEach { sale ->\n            val monthYear = SimpleDateFormat(\"yyyy-MM\").format(sale.getDate())\n            monthlyTrends[monthYear] = monthlyTrends.getOrDefault(monthYear, 0.0) + sale.getNetAmount()\n        }\n        \n        val sortedMonths = monthlyTrends.keys.sorted()\n        \n        trend.appendLine(\"Monthly Sales Trends:\")\n        sortedMonths.forEach { month ->\n            val sales = monthlyTrends[month]!!\n            trend.appendLine(\"$month: ${currencyFormat.format(sales)}\")\n        }\n        \n        // Calculate growth rate if we have multiple months\n        if (sortedMonths.size > 1) {\n            val firstMonth = monthlyTrends[sortedMonths.first()]!!\n            val lastMonth = monthlyTrends[sortedMonths.last()]!!\n            val growthRate = if (firstMonth > 0) ((lastMonth - firstMonth) / firstMonth * 100) else 0.0\n            \n            trend.appendLine()\n            trend.appendLine(\"Growth Analysis:\")\n            trend.appendLine(\"Period Growth Rate: ${String.format(\"%.2f\", growthRate)}%\")\n        }\n        \n        return trend.toString()\n    }\n}",
      "output": "import java.text.DecimalFormat\nimport java.text.SimpleDateFormat\nimport java.util.*\n\ndata class SalesData(\n    private val sales: MutableList<Sale>,\n    private val companyName: String,\n    private val reportingPeriod: String\n) {\n    fun getSales(): List<Sale> = sales.toList()\n    \n    fun getCompanyName(): String = companyName\n    \n    fun getReportingPeriod(): String = reportingPeriod\n    \n    fun addSale(sale: Sale) {\n        sales.add(sale)\n    }\n    \n    fun getSalesByRegion(region: String): List<Sale> {\n        return sales.filter { it.region == region }\n    }\n    \n    fun getTotalSales(): Double {\n        return sales.sumOf { it.getNetAmount() }\n    }\n}\n\ndata class Sale(\n    val productName: String,\n    val productCategory: String,\n    val amount: Double,\n    val quantity: Int,\n    val date: Date,\n    val region: String,\n    val salesPerson: String,\n    val customerId: String,\n    val discount: Double\n) {\n    fun getProductName(): String = productName\n    \n    fun getProductCategory(): String = productCategory\n    \n    fun getAmount(): Double = amount\n    \n    fun getQuantity(): Int = quantity\n    \n    fun getDate(): Date = date\n    \n    fun getRegion(): String = region\n    \n    fun getSalesPerson(): String = salesPerson\n    \n    fun getCustomerId(): String = customerId\n    \n    fun getDiscount(): Double = discount\n    \n    fun getNetAmount(): Double = amount - discount\n}\n\ninterface ReportStrategy {\n    fun generateReport(data: SalesData): String\n    fun getReportTitle(): String\n}\n\nabstract class BaseReportStrategy : ReportStrategy {\n    protected val currencyFormat = DecimalFormat(\"$#,##0.00\")\n    protected val dateFormat = SimpleDateFormat(\"yyyy-MM-dd\")\n    \n    protected fun generateHeader(data: SalesData): List<String> {\n        return listOf(\n            \"===================================\",\n            \"    ${data.getCompanyName()}\",\n            \"  Reporting Period: ${data.getReportingPeriod()}\",\n            \"===================================\",\n            \"\"\n        )\n    }\n    \n    protected fun generateFooter(): List<String> {\n        return listOf(\n            \"\",\n            \"===================================\",\n            \"Report Generated: ${SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Date())}\",\n            \"===================================\"\n        )\n    }\n}\n\nclass DailyReportStrategy : BaseReportStrategy() {\n    override fun getReportTitle(): String = \"DAILY SALES REPORT\"\n    \n    override fun generateReport(data: SalesData): String {\n        val reportLines = mutableListOf<String>()\n        reportLines.addAll(generateHeader(data))\n        \n        reportLines.addAll(listOf(\n            getReportTitle(),\n            \"===================\",\n            \"\"\n        ))\n        \n        val dailySales = mutableMapOf<String, Double>()\n        val dailyQuantities = mutableMapOf<String, Int>()\n        \n        data.getSales().forEach { sale ->\n            val dateStr = dateFormat.format(sale.getDate())\n            dailySales[dateStr] = dailySales.getOrDefault(dateStr, 0.0) + sale.getNetAmount()\n            dailyQuantities[dateStr] = dailyQuantities.getOrDefault(dateStr, 0) + sale.getQuantity()\n        }\n        \n        dailySales.keys.sorted().forEach { dateStr ->\n            val salesAmount = dailySales[dateStr]!!\n            val unitsAmount = dailyQuantities[dateStr]!!\n            reportLines.add(\n                \"Date: $dateStr, Total Sales: ${currencyFormat.format(salesAmount)}, \" +\n                \"Units Sold: $unitsAmount\"\n            )\n        }\n        \n        val totalSales = dailySales.values.sum()\n        val totalUnits = dailyQuantities.values.sum()\n        val avgDailySales = if (dailySales.isNotEmpty()) totalSales / dailySales.size else 0.0\n        \n        reportLines.addAll(listOf(\n            \"\",\n            \"Grand Total: ${currencyFormat.format(totalSales)}\",\n            \"Total Units: $totalUnits\",\n            \"Average Daily Sales: ${currencyFormat.format(avgDailySales)}\"\n        ))\n        \n        reportLines.addAll(generateFooter())\n        return reportLines.joinToString(\"\\n\")\n    }\n}\n\nclass ProductReportStrategy : BaseReportStrategy() {\n    override fun getReportTitle(): String = \"PRODUCT SALES REPORT\"\n    \n    override fun generateReport(data: SalesData): String {\n        val reportLines = mutableListOf<String>()\n        reportLines.addAll(generateHeader(data))\n        \n        reportLines.addAll(listOf(\n            getReportTitle(),\n            \"====================\",\n            \"\"\n        ))\n        \n        val productSales = mutableMapOf<String, Double>()\n        val productQuantities = mutableMapOf<String, Int>()\n        val productCategories = mutableMapOf<String, String>()\n        \n        data.getSales().forEach { sale ->\n            val product = sale.getProductName()\n            productSales[product] = productSales.getOrDefault(product, 0.0) + sale.getNetAmount()\n            productQuantities[product] = productQuantities.getOrDefault(product, 0) + sale.getQuantity()\n            productCategories[product] = sale.getProductCategory()\n        }\n        \n        val sortedProducts = productSales.toList().sortedByDescending { it.second }\n        \n        sortedProducts.forEach { (product, salesAmount) ->\n            val unitsAmount = productQuantities[product]!!\n            val category = productCategories[product]!!\n            val avgPrice = if (unitsAmount > 0) salesAmount / unitsAmount else 0.0\n            \n            reportLines.addAll(listOf(\n                \"Product: $product (Category: $category)\",\n                \"  Sales: ${currencyFormat.format(salesAmount)}, \" +\n                \"Units: $unitsAmount, \" +\n                \"Avg Price: ${currencyFormat.format(avgPrice)}\",\n                \"\"\n            ))\n        }\n        \n        val totalProductSales = productSales.values.sum()\n        reportLines.add(\"Total Product Sales: ${currencyFormat.format(totalProductSales)}\")\n        \n        reportLines.addAll(generateFooter())\n        return reportLines.joinToString(\"\\n\")\n    }\n}\n\nclass RegionalReportStrategy : BaseReportStrategy() {\n    override fun getReportTitle(): String = \"REGIONAL SALES REPORT\"\n    \n    override fun generateReport(data: SalesData): String {\n        val reportLines = mutableListOf<String>()\n        reportLines.addAll(generateHeader(data))\n        \n        reportLines.addAll(listOf(\n            getReportTitle(),\n            \"=====================\",\n            \"\"\n        ))\n        \n        val regionalSales = mutableMapOf<String, Double>()\n        val regionalCustomers = mutableMapOf<String, MutableSet<String>>()\n        val regionalSalespeople = mutableMapOf<String, MutableSet<String>>()\n        \n        data.getSales().forEach { sale ->\n            val region = sale.getRegion()\n            regionalSales[region] = regionalSales.getOrDefault(region, 0.0) + sale.getNetAmount()\n            \n            regionalCustomers.getOrPut(region) { mutableSetOf() }.add(sale.getCustomerId())\n            regionalSalespeople.getOrPut(region) { mutableSetOf() }.add(sale.getSalesPerson())\n        }\n        \n        regionalSales.forEach { (region, salesAmount) ->\n            val customerCount = regionalCustomers[region]?.size ?: 0\n            val salesTeamSize = regionalSalespeople[region]?.size ?: 0\n            val avgSalesPerCustomer = if (customerCount > 0) salesAmount / customerCount else 0.0\n            \n            reportLines.addAll(listOf(\n                \"Region: $region\",\n                \"  Total Sales: ${currencyFormat.format(salesAmount)}\",\n                \"  Unique Customers: $customerCount\",\n                \"  Sales Team Size: $salesTeamSize\",\n                \"  Avg Sales per Customer: ${currencyFormat.format(avgSalesPerCustomer)}\",\n                \"\"\n            ))\n        }\n        \n        val totalRegionalSales = regionalSales.values.sum()\n        reportLines.add(\"Total Regional Sales: ${currencyFormat.format(totalRegionalSales)}\")\n        \n        reportLines.addAll(generateFooter())\n        return reportLines.joinToString(\"\\n\")\n    }\n}\n\nclass SalespersonReportStrategy : BaseReportStrategy() {\n    override fun getReportTitle(): String = \"SALESPERSON PERFORMANCE REPORT\"\n    \n    override fun generateReport(data: SalesData): String {\n        val reportLines = mutableListOf<String>()\n        reportLines.addAll(generateHeader(data))\n        \n        reportLines.addAll(listOf(\n            getReportTitle(),\n            \"==============================\",\n            \"\"\n        ))\n        \n        val salespersonSales = mutableMapOf<String, Double>()\n        val salespersonCustomers = mutableMapOf<String, MutableSet<String>>()\n        val salespersonRegions = mutableMapOf<String, String>()\n        \n        data.getSales().forEach { sale ->\n            val salesperson = sale.getSalesPerson()\n            salespersonSales[salesperson] = salespersonSales.getOrDefault(salesperson, 0.0) + sale.getNetAmount()\n            salespersonCustomers.getOrPut(salesperson) { mutableSetOf() }.add(sale.getCustomerId())\n            salespersonRegions[salesperson] = sale.getRegion()\n        }\n        \n        val sortedSalespeople = salespersonSales.toList().sortedByDescending { it.second }\n        \n        sortedSalespeople.forEachIndexed { index, (salesperson, salesAmount) ->\n            val rank = index + 1\n            val customerCount = salespersonCustomers[salesperson]?.size ?: 0\n            val region = salespersonRegions[salesperson] ?: \"Unknown\"\n            val avgSalePerCustomer = if (customerCount > 0) salesAmount / customerCount else 0.0\n            \n            reportLines.addAll(listOf(\n                \"#$rank $salesperson (Region: $region)\",\n                \"  Total Sales: ${currencyFormat.format(salesAmount)}\",\n                \"  Customers Served: $customerCount\",\n                \"  Avg Sale per Customer: ${currencyFormat.format(avgSalePerCustomer)}\",\n                \"\"\n            ))\n        }\n        \n        reportLines.addAll(generateFooter())\n        return reportLines.joinToString(\"\\n\")\n    }\n}\n\nclass CategoryReportStrategy : BaseReportStrategy() {\n    override fun getReportTitle(): String = \"CATEGORY ANALYSIS REPORT\"\n    \n    override fun generateReport(data: SalesData): String {\n        val reportLines = mutableListOf<String>()\n        reportLines.addAll(generateHeader(data))\n        \n        reportLines.addAll(listOf(\n            getReportTitle(),\n            \"========================\",\n            \"\"\n        ))\n        \n        val categorySales = mutableMapOf<String, Double>()\n        val categoryQuantities = mutableMapOf<String, Int>()\n        val categoryProducts = mutableMapOf<String, MutableSet<String>>()\n        \n        data.getSales().forEach { sale ->\n            val category = sale.getProductCategory()\n            categorySales[category] = categorySales.getOrDefault(category, 0.0) + sale.getNetAmount()\n            categoryQuantities[category] = categoryQuantities.getOrDefault(category, 0) + sale.getQuantity()\n            categoryProducts.getOrPut(category) { mutableSetOf() }.add(sale.getProductName())\n        }\n        \n        val totalSales = categorySales.values.sum()\n        \n        categorySales.forEach { (category, salesAmount) ->\n            val unitsSold = categoryQuantities[category] ?: 0\n            val productVariety = categoryProducts[category]?.size ?: 0\n            val percentage = if (totalSales > 0) (salesAmount / totalSales * 100) else 0.0\n            \n            reportLines.addAll(listOf(\n                \"Category: $category\",\n                \"  Sales: ${currencyFormat.format(salesAmount)} (${String.format(\"%.1f\", percentage)}% of total)\",\n                \"  Units Sold: $unitsSold\",\n                \"  Product Variety: $productVariety products\",\n                \"\"\n            ))\n        }\n        \n        reportLines.addAll(generateFooter())\n        return reportLines.joinToString(\"\\n\")\n    }\n}\n\nclass QuarterlyReportStrategy : BaseReportStrategy() {\n    override fun getReportTitle(): String = \"QUARTERLY PERFORMANCE REPORT\"\n    \n    override fun generateReport(data: SalesData): String {\n        val reportLines = mutableListOf<String>()\n        reportLines.addAll(generateHeader(data))\n        \n        reportLines.addAll(listOf(\n            getReportTitle(),\n            \"============================\",\n            \"\"\n        ))\n        \n        val quarterlySales = mutableMapOf<String, Double>()\n        val quarterlyQuantities = mutableMapOf<String, Int>()\n        \n        data.getSales().forEach { sale ->\n            val calendar = Calendar.getInstance().apply { time = sale.getDate() }\n            val quarter = \"Q${(calendar.get(Calendar.MONTH) / 3) + 1} ${calendar.get(Calendar.YEAR)}\"\n            quarterlySales[quarter] = quarterlySales.getOrDefault(quarter, 0.0) + sale.getNetAmount()\n            quarterlyQuantities[quarter] = quarterlyQuantities.getOrDefault(quarter, 0) + sale.getQuantity()\n        }\n        \n        quarterlySales.keys.sorted().forEach { quarter ->\n            val salesAmount = quarterlySales[quarter]!!\n            val unitsSold = quarterlyQuantities[quarter]!!\n            reportLines.add(\n                \"Quarter: $quarter, Sales: ${currencyFormat.format(salesAmount)}, \" +\n                \"Units: $unitsSold\"\n            )\n        }\n        \n        val totalQuarterlySales = quarterlySales.values.sum()\n        reportLines.addAll(listOf(\n            \"\",\n            \"Total Quarterly Sales: ${currencyFormat.format(totalQuarterlySales)}\"\n        ))\n        \n        reportLines.addAll(generateFooter())\n        return reportLines.joinToString(\"\\n\")\n    }\n}\n\nclass MonthlyReportStrategy : BaseReportStrategy() {\n    override fun getReportTitle(): String = \"MONTHLY SALES BREAKDOWN\"\n    \n    override fun generateReport(data: SalesData): String {\n        val reportLines = mutableListOf<String>()\n        reportLines.addAll(generateHeader(data))\n        \n        reportLines.addAll(listOf(\n            getReportTitle(),\n            \"=======================\",\n            \"\"\n        ))\n        \n        val monthlySales = mutableMapOf<String, Double>()\n        val monthlyDiscounts = mutableMapOf<String, Double>()\n        \n        data.getSales().forEach { sale ->\n            val monthYear = SimpleDateFormat(\"yyyy-MM\").format(sale.getDate())\n            monthlySales[monthYear] = monthlySales.getOrDefault(monthYear, 0.0) + sale.getNetAmount()\n            monthlyDiscounts[monthYear] = monthlyDiscounts.getOrDefault(monthYear, 0.0) + sale.getDiscount()\n        }\n        \n        monthlySales.keys.sorted().forEach { month ->\n            val salesAmount = monthlySales[month]!!\n            val discountsAmount = monthlyDiscounts[month]!!\n            val grossRevenue = salesAmount + discountsAmount\n            \n            reportLines.addAll(listOf(\n                \"Month: $month\",\n                \"  Net Sales: ${currencyFormat.format(salesAmount)}\",\n                \"  Discounts Given: ${currencyFormat.format(discountsAmount)}\",\n                \"  Gross Revenue: ${currencyFormat.format(grossRevenue)}\",\n                \"\"\n            ))\n        }\n        \n        reportLines.addAll(generateFooter())\n        return reportLines.joinToString(\"\\n\")\n    }\n}\n\nclass CustomerReportStrategy : BaseReportStrategy() {\n    override fun getReportTitle(): String = \"CUSTOMER ANALYSIS REPORT\"\n    \n    override fun generateReport(data: SalesData): String {\n        val reportLines = mutableListOf<String>()\n        reportLines.addAll(generateHeader(data))\n        \n        reportLines.addAll(listOf(\n            getReportTitle(),\n            \"========================\",\n            \"\"\n        ))\n        \n        val customerSales = mutableMapOf<String, Double>()\n        val customerTransactions = mutableMapOf<String, Int>()\n        val customerRegions = mutableMapOf<String, String>()\n        \n        data.getSales().forEach { sale ->\n            val customer = sale.getCustomerId()\n            customerSales[customer] = customerSales.getOrDefault(customer, 0.0) + sale.getNetAmount()\n            customerTransactions[customer] = customerTransactions.getOrDefault(customer, 0) + 1\n            customerRegions[customer] = sale.getRegion()\n        }\n        \n        val sortedCustomers = customerSales.toList().sortedByDescending { it.second }\n        \n        sortedCustomers.forEach { (customer, salesAmount) ->\n            val transactionCount = customerTransactions[customer] ?: 0\n            val region = customerRegions[customer] ?: \"Unknown\"\n            val avgTransaction = if (transactionCount > 0) salesAmount / transactionCount else 0.0\n            \n            reportLines.addAll(listOf(\n                \"Customer: $customer (Region: $region)\",\n                \"  Total Purchases: ${currencyFormat.format(salesAmount)}\",\n                \"  Transaction Count: $transactionCount\",\n                \"  Avg Transaction: ${currencyFormat.format(avgTransaction)}\",\n                \"\"\n            ))\n        }\n        \n        reportLines.addAll(generateFooter())\n        return reportLines.joinToString(\"\\n\")\n    }\n}\n\nclass SummaryReportStrategy : BaseReportStrategy() {\n    override fun getReportTitle(): String = \"EXECUTIVE SUMMARY\"\n    \n    override fun generateReport(data: SalesData): String {\n        val reportLines = mutableListOf<String>()\n        reportLines.addAll(generateHeader(data))\n        \n        reportLines.addAll(listOf(\n            getReportTitle(),\n            \"=================\",\n            \"\"\n        ))\n        \n        val totalSales = data.getSales().sumOf { it.getNetAmount() }\n        val totalTransactions = data.getSales().size\n        val avgTransaction = if (totalTransactions > 0) totalSales / totalTransactions else 0.0\n        \n        val uniqueCustomers = data.getSales().map { it.getCustomerId() }.toSet()\n        val uniqueProducts = data.getSales().map { it.getProductName() }.toSet()\n        val uniqueRegions = data.getSales().map { it.getRegion() }.toSet()\n        \n        reportLines.addAll(listOf(\n            \"Total Sales: ${currencyFormat.format(totalSales)}\",\n            \"Total Transactions: $totalTransactions\",\n            \"Average Transaction: ${currencyFormat.format(avgTransaction)}\",\n            \"Unique Customers: ${uniqueCustomers.size}\",\n            \"Unique Products: ${uniqueProducts.size}\",\n            \"Active Regions: ${uniqueRegions.size}\"\n        ))\n        \n        // Top performing metrics\n        if (data.getSales().isNotEmpty()) {\n            val productSales = mutableMapOf<String, Double>()\n            val regionSales = mutableMapOf<String, Double>()\n            \n            data.getSales().forEach { sale ->\n                productSales[sale.getProductName()] = productSales.getOrDefault(sale.getProductName(), 0.0) + sale.getNetAmount()\n                regionSales[sale.getRegion()] = regionSales.getOrDefault(sale.getRegion(), 0.0) + sale.getNetAmount()\n            }\n            \n            val topProduct = productSales.maxByOrNull { it.value }?.key ?: \"N/A\"\n            val topRegion = regionSales.maxByOrNull { it.value }?.key ?: \"N/A\"\n            \n            reportLines.addAll(listOf(\n                \"\",\n                \"Top Performing Product: $topProduct\",\n                \"Top Performing Region: $topRegion\"\n            ))\n        }\n        \n        reportLines.addAll(generateFooter())\n        return reportLines.joinToString(\"\\n\")\n    }\n}\n\nclass ComparativeReportStrategy(private val comparisonPeriod: String) : BaseReportStrategy() {\n    override fun getReportTitle(): String = \"COMPARATIVE ANALYSIS REPORT\"\n    \n    override fun generateReport(data: SalesData): String {\n        val reportLines = mutableListOf<String>()\n        reportLines.addAll(generateHeader(data))\n        \n        reportLines.addAll(listOf(\n            getReportTitle(),\n            \"===========================\",\n            \"\"\n        ))\n        \n        val totalSales = data.getSales().sumOf { it.getNetAmount() }\n        \n        reportLines.addAll(listOf(\n            \"Current Period Sales: ${currencyFormat.format(totalSales)}\",\n            \"Comparison Period: $comparisonPeriod\",\n            \"Note: Comparison data would be calculated here with historical data\"\n        ))\n        \n        reportLines.addAll(generateFooter())\n        return reportLines.joinToString(\"\\n\")\n    }\n}\n\nclass TrendAnalysisReportStrategy : BaseReportStrategy() {\n    override fun getReportTitle(): String = \"SALES TREND ANALYSIS\"\n    \n    override fun generateReport(data: SalesData): String {\n        val reportLines = mutableListOf<String>()\n        reportLines.addAll(generateHeader(data))\n        \n        reportLines.addAll(listOf(\n            getReportTitle(),\n            \"====================\",\n            \"\"\n        ))\n        \n        // Group sales by month\n        val monthlyTrends = mutableMapOf<String, Double>()\n        data.getSales().forEach { sale ->\n            val monthYear = SimpleDateFormat(\"yyyy-MM\").format(sale.getDate())\n            monthlyTrends[monthYear] = monthlyTrends.getOrDefault(monthYear, 0.0) + sale.getNetAmount()\n        }\n        \n        val sortedMonths = monthlyTrends.keys.sorted()\n        \n        reportLines.add(\"Monthly Sales Trends:\")\n        sortedMonths.forEach { month ->\n            val sales = monthlyTrends[month]!!\n            reportLines.add(\"$month: ${currencyFormat.format(sales)}\")\n        }\n        \n        // Calculate growth rate if we have multiple months\n        if (sortedMonths.size > 1) {\n            val firstMonth = monthlyTrends[sortedMonths.first()]!!\n            val lastMonth = monthlyTrends[sortedMonths.last()]!!\n            val growthRate = if (firstMonth > 0) ((lastMonth - firstMonth) / firstMonth * 100) else 0.0\n            \n            reportLines.addAll(listOf(\n                \"\",\n                \"Growth Analysis:\",\n                \"Period Growth Rate: ${String.format(\"%.2f\", growthRate)}%\"\n            ))\n        }\n        \n        reportLines.addAll(generateFooter())\n        return reportLines.joinToString(\"\\n\")\n    }\n}\n\nclass ReportGenerator(private var reportStrategy: ReportStrategy? = null) {\n    \n    fun setReportStrategy(reportStrategy: ReportStrategy) {\n        this.reportStrategy = reportStrategy\n    }\n    \n    fun generateReport(data: SalesData): String {\n        return reportStrategy?.generateReport(data) \n            ?: throw IllegalStateException(\"Report strategy must be set before generating report\")\n    }\n    \n    fun getReportTitle(): String {\n        return reportStrategy?.getReportTitle() ?: \"Unknown Report\"\n    }\n}\n\nobject ReportFactory {\n    private val strategies = mutableMapOf<String, () -> ReportStrategy>(\n        \"daily\" to { DailyReportStrategy() },\n        \"product\" to { ProductReportStrategy() },\n        \"regional\" to { RegionalReportStrategy() },\n        \"salesperson\" to { SalespersonReportStrategy() },\n        \"category\" to { CategoryReportStrategy() },\n        \"quarterly\" to { QuarterlyReportStrategy() },\n        \"monthly\" to { MonthlyReportStrategy() },\n        \"customer\" to { CustomerReportStrategy() },\n        \"summary\" to { SummaryReportStrategy() },\n        \"trend\" to { TrendAnalysisReportStrategy() }\n    )\n    \n    fun createReportStrategy(reportType: String, vararg params: Any): ReportStrategy {\n        val type = reportType.lowercase()\n        \n        return when (type) {\n            \"comparative\" -> {\n                val comparisonPeriod = params.firstOrNull() as? String ?: \"Previous Period\"\n                ComparativeReportStrategy(comparisonPeriod)\n            }\n            else -> strategies[type]?.invoke() \n                ?: throw IllegalArgumentException(\"Unknown report type: $reportType\")\n        }\n    }\n    \n    fun getAvailableReportTypes(): List<String> {\n        return strategies.keys.toList() + \"comparative\"\n    }\n    \n    fun registerStrategy(reportType: String, strategyFactory: () -> ReportStrategy) {\n        strategies[reportType.lowercase()] = strategyFactory\n    }\n    \n    inline fun <reified T : ReportStrategy> registerStrategy(reportType: String) {\n        strategies[reportType.lowercase()] = { T::class.java.getDeclaredConstructor().newInstance() }\n    }\n}\n\n// Extension functions for enhanced functionality\nfun SalesData.generateReport(reportType: String, vararg params: Any): String {\n    val strategy = ReportFactory.createReportStrategy(reportType, *params)\n    val generator = ReportGenerator(strategy)\n    return generator.generateReport(this)\n}\n\nfun List<Sale>.toSalesData(companyName: String, reportingPeriod: String): SalesData {\n    return SalesData(this.toMutableList(), companyName, reportingPeriod)\n}\n\n// Example usage\nfun main() {\n    // Create sample data\n    val sampleSales = listOf(\n        Sale(\"Laptop\", \"Electronics\", 1200.0, 1, Date(), \"North\", \"John Doe\", \"CUST001\", 50.0),\n        Sale(\"Mouse\", \"Electronics\", 25.0, 2, Date(), \"South\", \"Jane Smith\", \"CUST002\", 0.0),\n        Sale(\"Keyboard\", \"Electronics\", 75.0, 1, Date(), \"North\", \"John Doe\", \"CUST003\", 5.0)\n    )\n    \n    val salesData = sampleSales.toSalesData(\"TechCorp Inc.\", \"Q1 2024\")\n    \n    // Generate different reports using the strategy pattern\n    val generator = ReportGenerator()\n    \n    // Daily report\n    val dailyStrategy = ReportFactory.createReportStrategy(\"daily\")\n    generator.setReportStrategy(dailyStrategy)\n    println(generator.generateReport(salesData))\n    \n    println(\"\\n\" + \"=\".repeat(50) + \"\\n\")\n    \n    // Product report using extension function\n    println(salesData.generateReport(\"product\"))\n    \n    // Register a custom strategy\n    ReportFactory.registerStrategy(\"custom\") { SummaryReportStrategy() }\n    \n    // Use the custom strategy\n    println(salesData.generateReport(\"custom\"))\n}",
      "level": "HARD",
      "language": "KOTLIN",
      "violation": "OCP",
      "description": "Sales report generation system"
    },
    {
      "input": "import java.util.*\n\ndata class OrderItem(\n    val productId: String,\n    val price: Double,\n    val quantity: Int,\n    val category: String,\n    val isDigital: Boolean = false,\n    val weight: Double = 0.0\n) {\n    fun getTotalPrice(): Double = price * quantity\n}\n\ndata class Order(\n    val customerId: String,\n    val items: List<OrderItem>,\n    val country: String,\n    val orderDate: Date,\n    val orderType: String,\n    val isBusinessOrder: Boolean = false\n) {\n    fun getTotalAmount(): Double = items.sumOf { it.getTotalPrice() }\n}\n\nclass TaxCalculator {\n    companion object {\n        private const val DEFAULT_TAX_RATE = 0.05\n    }\n    \n    fun calculateTax(order: Order): Double {\n        var totalTax = 0.0\n        \n        when (order.country) {\n            \"US\" -> totalTax = calculateUSTax(order)\n            \"EU\" -> totalTax = calculateEUTax(order)\n            \"CA\" -> totalTax = calculateCanadaTax(order)\n            \"UK\" -> totalTax = calculateUKTax(order)\n            \"AU\" -> totalTax = calculateAustraliaTax(order)\n            \"JP\" -> totalTax = calculateJapanTax(order)\n            \"IN\" -> totalTax = calculateIndiaTax(order)\n            \"BR\" -> totalTax = calculateBrazilTax(order)\n            \"MX\" -> totalTax = calculateMexicoTax(order)\n            \"SG\" -> totalTax = calculateSingaporeTax(order)\n            \"KR\" -> totalTax = calculateSouthKoreaTax(order)\n            \"CN\" -> totalTax = calculateChinaTax(order)\n            \"DE\" -> totalTax = calculateGermanyTax(order)\n            \"FR\" -> totalTax = calculateFranceTax(order)\n            \"IT\" -> totalTax = calculateItalyTax(order)\n            else -> {\n                // Default tax calculation for unsupported countries\n                order.items.forEach { item ->\n                    val itemPrice = item.price * item.quantity\n                    totalTax += itemPrice * DEFAULT_TAX_RATE\n                }\n            }\n        }\n        \n        // Apply business order discount\n        if (order.isBusinessOrder) {\n            totalTax *= 0.9 // 10% discount on tax for business orders\n        }\n        \n        // Apply digital goods adjustment\n        totalTax += calculateDigitalGoodsTax(order)\n        \n        // Apply seasonal adjustments\n        totalTax += calculateSeasonalAdjustment(order)\n        \n        return totalTax\n    }\n    \n    private fun calculateUSTax(order: Order): Double {\n        val stateTaxRates = getStateTaxRates()\n        val categoryTaxRates = getCategoryTaxRates()\n        \n        val state = order.customerId.substring(0, 2)\n        val stateTaxRate = stateTaxRates[state] ?: 0.05\n        \n        var totalTax = 0.0\n        order.items.forEach { item ->\n            val itemPrice = item.price * item.quantity\n            val categoryRate = categoryTaxRates[item.category] ?: 0.0\n            var itemTax = itemPrice * (stateTaxRate + categoryRate)\n            \n            // Special handling for luxury items over $1000\n            if (item.category == \"luxury\" && itemPrice > 1000) {\n                itemTax += itemPrice * 0.02 // Additional 2% luxury tax\n            }\n            \n            // Sales tax exemption for certain states on clothing under $110\n            if (item.category == \"clothing\" && state in listOf(\"NY\", \"NJ\") && itemPrice < 110) {\n                itemTax = 0.0\n            }\n            \n            // Special handling for food items in certain states\n            if (item.category == \"food\" && state in listOf(\"CA\", \"NY\", \"WA\")) {\n                itemTax = 0.0\n            }\n            \n            totalTax += itemTax\n        }\n        \n        return totalTax\n    }\n    \n    private fun calculateEUTax(order: Order): Double {\n        val countryVatRates = getCountryVatRates()\n        \n        val countryCode = order.customerId.substring(0, 2)\n        val vatRate = countryVatRates[countryCode] ?: 0.20\n        \n        var totalTax = 0.0\n        order.items.forEach { item ->\n            val itemPrice = item.price * item.quantity\n            var itemVat = itemPrice * vatRate\n            \n            // Reduced VAT for food items\n            if (item.category == \"food\") {\n                itemVat = itemPrice * (vatRate * 0.5)\n            }\n            \n            // Zero VAT for books and newspapers in some countries\n            if (item.category in listOf(\"books\", \"newspapers\") && countryCode in listOf(\"UK\", \"IE\")) {\n                itemVat = 0.0\n            }\n            \n            // Special VAT rates for digital services\n            if (item.isDigital && countryCode in listOf(\"DE\", \"FR\", \"IT\")) {\n                itemVat = itemPrice * 0.19 // Digital services VAT\n            }\n            \n            totalTax += itemVat\n        }\n        \n        return totalTax\n    }\n    \n    private fun calculateCanadaTax(order: Order): Double {\n        val provinceTaxRates = getProvinceTaxRates()\n        val gst = 0.05\n        \n        val province = order.customerId.substring(0, 2)\n        val provincialTax = provinceTaxRates[province] ?: 0.08\n        \n        var totalTax = 0.0\n        order.items.forEach { item ->\n            val itemPrice = item.price * item.quantity\n            var itemTax = itemPrice * (gst + provincialTax)\n            \n            // No tax on essential food items\n            if (item.category == \"food\" && item.category != \"luxury\") {\n                itemTax = 0.0\n            }\n            \n            // Special handling for books and magazines\n            if (item.category in listOf(\"books\", \"magazines\")) {\n                itemTax = 0.0\n            }\n            \n            // Carbon tax for certain items\n            if (item.category in listOf(\"fuel\", \"automotive\") && province !in listOf(\"AB\", \"SK\")) {\n                itemTax += itemPrice * 0.02\n            }\n            \n            totalTax += itemTax\n        }\n        \n        return totalTax\n    }\n    \n    private fun calculateUKTax(order: Order): Double {\n        val vatRate = 0.20\n        val reducedVatRate = 0.05\n        \n        var totalTax = 0.0\n        order.items.forEach { item ->\n            val itemPrice = item.price * item.quantity\n            val itemTax = when {\n                item.category in listOf(\"food\", \"books\", \"newspapers\", \"children_clothing\") -> 0.0\n                item.category in listOf(\"energy\", \"domestic_fuel\", \"contraceptives\") -> itemPrice * reducedVatRate\n                item.category == \"luxury\" && itemPrice > 2000 -> itemPrice * (vatRate + 0.05) // Luxury tax\n                else -> itemPrice * vatRate\n            }\n            \n            totalTax += itemTax\n        }\n        \n        return totalTax\n    }\n    \n    private fun calculateAustraliaTax(order: Order): Double {\n        val gstRate = 0.10\n        \n        var totalTax = 0.0\n        order.items.forEach { item ->\n            val itemPrice = item.price * item.quantity\n            var itemTax = itemPrice * gstRate\n            \n            // GST-free items\n            if (item.category in listOf(\"food\", \"medical\", \"education\", \"exports\")) {\n                itemTax = 0.0\n            }\n            \n            // Input-taxed items\n            if (item.category in listOf(\"residential_rent\", \"financial_services\")) {\n                itemTax = 0.0\n            }\n            \n            // Wine equalization tax\n            if (item.category == \"wine\") {\n                itemTax += itemPrice * 0.29\n            }\n            \n            totalTax += itemTax\n        }\n        \n        return totalTax\n    }\n    \n    private fun calculateJapanTax(order: Order): Double {\n        val consumptionTax = 0.10\n        val reducedRate = 0.08\n        \n        var totalTax = 0.0\n        order.items.forEach { item ->\n            val itemPrice = item.price * item.quantity\n            val itemTax = when {\n                item.category in listOf(\"food\", \"beverages\", \"newspapers\") -> itemPrice * reducedRate\n                item.category == \"restaurant\" && order.orderType == \"takeout\" -> itemPrice * reducedRate\n                else -> itemPrice * consumptionTax\n            }\n            \n            totalTax += itemTax\n        }\n        \n        return totalTax\n    }\n    \n    private fun calculateIndiaTax(order: Order): Double {\n        val gstRates = getIndiaGSTRates()\n        \n        var totalTax = 0.0\n        order.items.forEach { item ->\n            val itemPrice = item.price * item.quantity\n            val gstRate = gstRates[item.category] ?: 0.18\n            var itemTax = itemPrice * gstRate\n            \n            // IGST for inter-state transactions\n            if (isInterstateTransaction(order)) {\n                itemTax = itemPrice * gstRate // IGST\n            } else {\n                itemTax = itemPrice * gstRate // CGST + SGST\n            }\n            \n            // Cess on luxury and sin goods\n            if (item.category in listOf(\"luxury_cars\", \"tobacco\", \"coal\")) {\n                itemTax += itemPrice * 0.15\n            }\n            \n            totalTax += itemTax\n        }\n        \n        return totalTax\n    }\n    \n    private fun calculateBrazilTax(order: Order): Double {\n        val icmsRate = 0.18 // State tax\n        val ipiRate = 0.10 // Federal tax\n        val pisRate = 0.0165 // PIS\n        val cofinsRate = 0.076 // COFINS\n        \n        var totalTax = 0.0\n        order.items.forEach { item ->\n            val itemPrice = item.price * item.quantity\n            \n            // ICMS (state circulation tax)\n            val icmsTax = itemPrice * icmsRate\n            \n            // IPI (federal excise tax) - only on manufactured goods\n            val ipiTax = if (item.category in listOf(\"electronics\", \"automotive\", \"cosmetics\")) {\n                itemPrice * ipiRate\n            } else 0.0\n            \n            // PIS and COFINS\n            val pisTax = itemPrice * pisRate\n            val cofinsTax = itemPrice * cofinsRate\n            \n            totalTax += icmsTax + ipiTax + pisTax + cofinsTax\n        }\n        \n        return totalTax\n    }\n    \n    private fun calculateMexicoTax(order: Order): Double {\n        val ivaRate = 0.16 // Value Added Tax\n        val iepsRate = 0.08 // Special tax on certain goods\n        \n        var totalTax = 0.0\n        order.items.forEach { item ->\n            val itemPrice = item.price * item.quantity\n            \n            // IVA (Value Added Tax)\n            var ivaTax = itemPrice * ivaRate\n            \n            // IEPS (Special tax on production and services)\n            val iepsTax = if (item.category in listOf(\"alcohol\", \"tobacco\", \"fuel\", \"sugary_drinks\")) {\n                itemPrice * iepsRate\n            } else 0.0\n            \n            // Zero-rated items\n            if (item.category in listOf(\"food\", \"medicine\", \"books\")) {\n                ivaTax = 0.0\n            }\n            \n            totalTax += ivaTax + iepsTax\n        }\n        \n        return totalTax\n    }\n    \n    private fun calculateSingaporeTax(order: Order): Double {\n        val gstRate = 0.08 // Goods and Services Tax\n        \n        var totalTax = 0.0\n        order.items.forEach { item ->\n            val itemPrice = item.price * item.quantity\n            var itemTax = itemPrice * gstRate\n            \n            // Zero-rated items\n            if (item.category in listOf(\"exports\", \"international_services\")) {\n                itemTax = 0.0\n            }\n            \n            // Exempt items\n            if (item.category in listOf(\"residential_property\", \"financial_services\", \"digital_services\")) {\n                itemTax = 0.0\n            }\n            \n            totalTax += itemTax\n        }\n        \n        return totalTax\n    }\n    \n    private fun calculateSouthKoreaTax(order: Order): Double {\n        val vatRate = 0.10\n        \n        var totalTax = 0.0\n        order.items.forEach { item ->\n            val itemPrice = item.price * item.quantity\n            var itemTax = itemPrice * vatRate\n            \n            // Zero-rated items\n            if (item.category in listOf(\"exports\", \"medical\", \"education\")) {\n                itemTax = 0.0\n            }\n            \n            // Individual consumption tax on luxury items\n            if (item.category == \"luxury\" && itemPrice > 5000) {\n                itemTax += itemPrice * 0.20\n            }\n            \n            totalTax += itemTax\n        }\n        \n        return totalTax\n    }\n    \n    private fun calculateChinaTax(order: Order): Double {\n        val vatRate = 0.13 // Standard VAT rate\n        val reducedVatRate = 0.09\n        \n        var totalTax = 0.0\n        order.items.forEach { item ->\n            val itemPrice = item.price * item.quantity\n            val itemTax = when (item.category) {\n                \"food\", \"books\", \"newspapers\" -> itemPrice * reducedVatRate\n                \"luxury\" -> itemPrice * (vatRate + 0.10) // Consumption tax on luxury\n                else -> itemPrice * vatRate\n            }\n            \n            totalTax += itemTax\n        }\n        \n        return totalTax\n    }\n    \n    private fun calculateGermanyTax(order: Order): Double {\n        val standardVat = 0.19\n        val reducedVat = 0.07\n        \n        var totalTax = 0.0\n        order.items.forEach { item ->\n            val itemPrice = item.price * item.quantity\n            val itemTax = when (item.category) {\n                \"food\", \"books\", \"newspapers\", \"public_transport\" -> itemPrice * reducedVat\n                else -> itemPrice * standardVat\n            }\n            \n            totalTax += itemTax\n        }\n        \n        return totalTax\n    }\n    \n    private fun calculateFranceTax(order: Order): Double {\n        val standardVat = 0.20\n        val intermediateVat = 0.10\n        val reducedVat = 0.055\n        val superReducedVat = 0.021\n        \n        var totalTax = 0.0\n        order.items.forEach { item ->\n            val itemPrice = item.price * item.quantity\n            val itemTax = when (item.category) {\n                \"medicine\", \"books\" -> itemPrice * superReducedVat\n                \"food\", \"restaurant\" -> itemPrice * reducedVat\n                \"transport\", \"accommodation\" -> itemPrice * intermediateVat\n                else -> itemPrice * standardVat\n            }\n            \n            totalTax += itemTax\n        }\n        \n        return totalTax\n    }\n    \n    private fun calculateItalyTax(order: Order): Double {\n        val standardVat = 0.22\n        val reducedVat = 0.10\n        val superReducedVat = 0.04\n        \n        var totalTax = 0.0\n        order.items.forEach { item ->\n            val itemPrice = item.price * item.quantity\n            val itemTax = when (item.category) {\n                \"food\", \"medicine\" -> itemPrice * superReducedVat\n                \"books\", \"transport\" -> itemPrice * reducedVat\n                else -> itemPrice * standardVat\n            }\n            \n            totalTax += itemTax\n        }\n        \n        return totalTax\n    }\n    \n    private fun calculateDigitalGoodsTax(order: Order): Double {\n        var digitalTax = 0.0\n        order.items.filter { it.isDigital }.forEach { item ->\n            val itemPrice = item.price * item.quantity\n            digitalTax += itemPrice * 0.02 // Additional digital services tax\n        }\n        return digitalTax\n    }\n    \n    private fun calculateSeasonalAdjustment(order: Order): Double {\n        val calendar = Calendar.getInstance()\n        calendar.time = order.orderDate\n        val month = calendar.get(Calendar.MONTH)\n        \n        // Holiday season surcharge (November-December)\n        return if (month in 10..11) {\n            order.getTotalAmount() * 0.005 // 0.5% holiday surcharge\n        } else 0.0\n    }\n    \n    private fun isInterstateTransaction(order: Order): Boolean {\n        // Simplified logic - check if buyer and seller are in different states\n        return order.customerId.substring(2, 4) != \"MH\" // Assuming seller is in Maharashtra\n    }\n    \n    private fun getStateTaxRates(): Map<String, Double> = mapOf(\n        \"CA\" to 0.0725, \"NY\" to 0.045, \"TX\" to 0.0625, \"FL\" to 0.06,\n        \"WA\" to 0.065, \"OR\" to 0.0, \"MT\" to 0.0, \"NH\" to 0.0, \"DE\" to 0.0,\n        \"NV\" to 0.0685, \"IL\" to 0.0625, \"PA\" to 0.06, \"OH\" to 0.0575\n    )\n    \n    private fun getCategoryTaxRates(): Map<String, Double> = mapOf(\n        \"luxury\" to 0.03, \"food\" to 0.0, \"electronics\" to 0.01,\n        \"clothing\" to 0.005, \"automotive\" to 0.02, \"books\" to 0.0,\n        \"medicine\" to 0.0, \"fuel\" to 0.03\n    )\n    \n    private fun getCountryVatRates(): Map<String, Double> = mapOf(\n        \"DE\" to 0.19, \"FR\" to 0.20, \"IT\" to 0.22, \"ES\" to 0.21,\n        \"NL\" to 0.21, \"BE\" to 0.21, \"AT\" to 0.20, \"SE\" to 0.25,\n        \"DK\" to 0.25, \"FI\" to 0.24, \"NO\" to 0.25, \"PL\" to 0.23\n    )\n    \n    private fun getProvinceTaxRates(): Map<String, Double> = mapOf(\n        \"ON\" to 0.08, \"BC\" to 0.07, \"AB\" to 0.0, \"QC\" to 0.09975,\n        \"NS\" to 0.10, \"NB\" to 0.10, \"MB\" to 0.07, \"SK\" to 0.06,\n        \"PE\" to 0.10, \"NL\" to 0.10, \"YT\" to 0.0, \"NT\" to 0.0, \"NU\" to 0.0\n    )\n    \n    private fun getIndiaGSTRates(): Map<String, Double> = mapOf(\n        \"food\" to 0.05, \"clothing\" to 0.12, \"electronics\" to 0.18,\n        \"luxury\" to 0.28, \"automotive\" to 0.28, \"books\" to 0.0,\n        \"medicine\" to 0.05, \"gold\" to 0.03, \"textiles\" to 0.05,\n        \"petroleum\" to 0.0, \"alcohol\" to 0.0 // Alcohol is under state excise\n    )\n}",
      "output": "import java.util.*\n\ndata class OrderItem(\n    val productId: String,\n    val price: Double,\n    val quantity: Int,\n    val category: String,\n    val isDigital: Boolean = false,\n    val weight: Double = 0.0\n) {\n    fun getTotalPrice(): Double = price * quantity\n}\n\ndata class Order(\n    val customerId: String,\n    val items: List<OrderItem>,\n    val country: String,\n    val orderDate: Date,\n    val orderType: String,\n    val isBusinessOrder: Boolean = false\n) {\n    fun getTotalAmount(): Double = items.sumOf { it.getTotalPrice() }\n}\n\ninterface TaxStrategy {\n    fun calculateTax(order: Order): Double\n}\n\nabstract class BaseTaxStrategy : TaxStrategy {\n    protected fun calculateDigitalGoodsTax(order: Order): Double {\n        return order.items.filter { it.isDigital }\n            .sumOf { item ->\n                val itemPrice = item.price * item.quantity\n                itemPrice * 0.02 // Additional digital services tax\n            }\n    }\n    \n    protected fun applyBusinessDiscount(tax: Double, order: Order): Double {\n        return if (order.isBusinessOrder) tax * 0.9 else tax\n    }\n    \n    protected fun calculateSeasonalAdjustment(order: Order): Double {\n        val calendar = Calendar.getInstance().apply { time = order.orderDate }\n        val month = calendar.get(Calendar.MONTH)\n        \n        // Holiday season surcharge (November-December)\n        return if (month in 10..11) {\n            order.getTotalAmount() * 0.005 // 0.5% holiday surcharge\n        } else 0.0\n    }\n}\n\nclass USTaxStrategy : BaseTaxStrategy() {\n    override fun calculateTax(order: Order): Double {\n        val stateTaxRates = getStateTaxRates()\n        val categoryTaxRates = getCategoryTaxRates()\n        \n        val state = order.customerId.substring(0, 2)\n        val stateTaxRate = stateTaxRates[state] ?: 0.05\n        \n        var totalTax = 0.0\n        order.items.forEach { item ->\n            val itemPrice = item.price * item.quantity\n            val categoryRate = categoryTaxRates[item.category] ?: 0.0\n            var itemTax = itemPrice * (stateTaxRate + categoryRate)\n            \n            if (item.category == \"luxury\" && itemPrice > 1000) {\n                itemTax += itemPrice * 0.02\n            }\n            \n            if (item.category == \"clothing\" && state in listOf(\"NY\", \"NJ\") && itemPrice < 110) {\n                itemTax = 0.0\n            }\n            \n            if (item.category == \"food\" && state in listOf(\"CA\", \"NY\", \"WA\")) {\n                itemTax = 0.0\n            }\n            \n            totalTax += itemTax\n        }\n        \n        totalTax += calculateDigitalGoodsTax(order)\n        totalTax += calculateSeasonalAdjustment(order)\n        return applyBusinessDiscount(totalTax, order)\n    }\n    \n    private fun getStateTaxRates(): Map<String, Double> = mapOf(\n        \"CA\" to 0.0725, \"NY\" to 0.045, \"TX\" to 0.0625, \"FL\" to 0.06,\n        \"WA\" to 0.065, \"OR\" to 0.0, \"MT\" to 0.0, \"NH\" to 0.0, \"DE\" to 0.0,\n        \"NV\" to 0.0685, \"IL\" to 0.0625, \"PA\" to 0.06, \"OH\" to 0.0575\n    )\n    \n    private fun getCategoryTaxRates(): Map<String, Double> = mapOf(\n        \"luxury\" to 0.03, \"food\" to 0.0, \"electronics\" to 0.01,\n        \"clothing\" to 0.005, \"automotive\" to 0.02, \"books\" to 0.0,\n        \"medicine\" to 0.0, \"fuel\" to 0.03\n    )\n}\n\nclass EUTaxStrategy : BaseTaxStrategy() {\n    override fun calculateTax(order: Order): Double {\n        val countryVatRates = getCountryVatRates()\n        \n        val countryCode = order.customerId.substring(0, 2)\n        val vatRate = countryVatRates[countryCode] ?: 0.20\n        \n        var totalTax = 0.0\n        order.items.forEach { item ->\n            val itemPrice = item.price * item.quantity\n            var itemVat = itemPrice * vatRate\n            \n            if (item.category == \"food\") {\n                itemVat = itemPrice * (vatRate * 0.5)\n            }\n            \n            if (item.category in listOf(\"books\", \"newspapers\") && countryCode in listOf(\"UK\", \"IE\")) {\n                itemVat = 0.0\n            }\n            \n            if (item.isDigital && countryCode in listOf(\"DE\", \"FR\", \"IT\")) {\n                itemVat = itemPrice * 0.19\n            }\n            \n            totalTax += itemVat\n        }\n        \n        totalTax += calculateDigitalGoodsTax(order)\n        totalTax += calculateSeasonalAdjustment(order)\n        return applyBusinessDiscount(totalTax, order)\n    }\n    \n    private fun getCountryVatRates(): Map<String, Double> = mapOf(\n        \"DE\" to 0.19, \"FR\" to 0.20, \"IT\" to 0.22, \"ES\" to 0.21,\n        \"NL\" to 0.21, \"BE\" to 0.21, \"AT\" to 0.20, \"SE\" to 0.25,\n        \"DK\" to 0.25, \"FI\" to 0.24, \"NO\" to 0.25, \"PL\" to 0.23\n    )\n}\n\nclass CanadaTaxStrategy : BaseTaxStrategy() {\n    override fun calculateTax(order: Order): Double {\n        val provinceTaxRates = getProvinceTaxRates()\n        val gst = 0.05\n        \n        val province = order.customerId.substring(0, 2)\n        val provincialTax = provinceTaxRates[province] ?: 0.08\n        \n        var totalTax = 0.0\n        order.items.forEach { item ->\n            val itemPrice = item.price * item.quantity\n            var itemTax = itemPrice * (gst + provincialTax)\n            \n            if (item.category == \"food\" && item.category != \"luxury\") {\n                itemTax = 0.0\n            }\n            \n            if (item.category in listOf(\"books\", \"magazines\")) {\n                itemTax = 0.0\n            }\n            \n            if (item.category in listOf(\"fuel\", \"automotive\") && province !in listOf(\"AB\", \"SK\")) {\n                itemTax += itemPrice * 0.02\n            }\n            \n            totalTax += itemTax\n        }\n        \n        totalTax += calculateDigitalGoodsTax(order)\n        totalTax += calculateSeasonalAdjustment(order)\n        return applyBusinessDiscount(totalTax, order)\n    }\n    \n    private fun getProvinceTaxRates(): Map<String, Double> = mapOf(\n        \"ON\" to 0.08, \"BC\" to 0.07, \"AB\" to 0.0, \"QC\" to 0.09975,\n        \"NS\" to 0.10, \"NB\" to 0.10, \"MB\" to 0.07, \"SK\" to 0.06,\n        \"PE\" to 0.10, \"NL\" to 0.10, \"YT\" to 0.0, \"NT\" to 0.0, \"NU\" to 0.0\n    )\n}\n\nclass UKTaxStrategy : BaseTaxStrategy() {\n    override fun calculateTax(order: Order): Double {\n        val vatRate = 0.20\n        val reducedVatRate = 0.05\n        \n        var totalTax = 0.0\n        order.items.forEach { item ->\n            val itemPrice = item.price * item.quantity\n            val itemTax = when {\n                item.category in listOf(\"food\", \"books\", \"newspapers\", \"children_clothing\") -> 0.0\n                item.category in listOf(\"energy\", \"domestic_fuel\", \"contraceptives\") -> itemPrice * reducedVatRate\n                item.category == \"luxury\" && itemPrice > 2000 -> itemPrice * (vatRate + 0.05)\n                else -> itemPrice * vatRate\n            }\n            \n            totalTax += itemTax\n        }\n        \n        totalTax += calculateDigitalGoodsTax(order)\n        totalTax += calculateSeasonalAdjustment(order)\n        return applyBusinessDiscount(totalTax, order)\n    }\n}\n\nclass AustraliaTaxStrategy : BaseTaxStrategy() {\n    override fun calculateTax(order: Order): Double {\n        val gstRate = 0.10\n        \n        var totalTax = 0.0\n        order.items.forEach { item ->\n            val itemPrice = item.price * item.quantity\n            var itemTax = itemPrice * gstRate\n            \n            if (item.category in listOf(\"food\", \"medical\", \"education\", \"exports\")) {\n                itemTax = 0.0\n            }\n            \n            if (item.category in listOf(\"residential_rent\", \"financial_services\")) {\n                itemTax = 0.0\n            }\n            \n            if (item.category == \"wine\") {\n                itemTax += itemPrice * 0.29\n            }\n            \n            totalTax += itemTax\n        }\n        \n        totalTax += calculateDigitalGoodsTax(order)\n        totalTax += calculateSeasonalAdjustment(order)\n        return applyBusinessDiscount(totalTax, order)\n    }\n}\n\nclass JapanTaxStrategy : BaseTaxStrategy() {\n    override fun calculateTax(order: Order): Double {\n        val consumptionTax = 0.10\n        val reducedRate = 0.08\n        \n        var totalTax = 0.0\n        order.items.forEach { item ->\n            val itemPrice = item.price * item.quantity\n            val itemTax = when {\n                item.category in listOf(\"food\", \"beverages\", \"newspapers\") -> itemPrice * reducedRate\n                item.category == \"restaurant\" && order.orderType == \"takeout\" -> itemPrice * reducedRate\n                else -> itemPrice * consumptionTax\n            }\n            \n            totalTax += itemTax\n        }\n        \n        totalTax += calculateDigitalGoodsTax(order)\n        totalTax += calculateSeasonalAdjustment(order)\n        return applyBusinessDiscount(totalTax, order)\n    }\n}\n\nclass IndiaTaxStrategy : BaseTaxStrategy() {\n    override fun calculateTax(order: Order): Double {\n        val gstRates = getGSTRates()\n        \n        var totalTax = 0.0\n        order.items.forEach { item ->\n            val itemPrice = item.price * item.quantity\n            val gstRate = gstRates[item.category] ?: 0.18\n            var itemTax = itemPrice * gstRate\n            \n            if (isInterstateTransaction(order)) {\n                itemTax = itemPrice * gstRate // IGST\n            } else {\n                itemTax = itemPrice * gstRate // CGST + SGST\n            }\n            \n            if (item.category in listOf(\"luxury_cars\", \"tobacco\", \"coal\")) {\n                itemTax += itemPrice * 0.15\n            }\n            \n            totalTax += itemTax\n        }\n        \n        totalTax += calculateDigitalGoodsTax(order)\n        totalTax += calculateSeasonalAdjustment(order)\n        return applyBusinessDiscount(totalTax, order)\n    }\n    \n    private fun getGSTRates(): Map<String, Double> = mapOf(\n        \"food\" to 0.05, \"clothing\" to 0.12, \"electronics\" to 0.18,\n        \"luxury\" to 0.28, \"automotive\" to 0.28, \"books\" to 0.0,\n        \"medicine\" to 0.05, \"gold\" to 0.03, \"textiles\" to 0.05,\n        \"petroleum\" to 0.0, \"alcohol\" to 0.0\n    )\n    \n    private fun isInterstateTransaction(order: Order): Boolean {\n        return order.customerId.substring(2, 4) != \"MH\"\n    }\n}\n\nclass BrazilTaxStrategy : BaseTaxStrategy() {\n    override fun calculateTax(order: Order): Double {\n        val icmsRate = 0.18\n        val ipiRate = 0.10\n        val pisRate = 0.0165\n        val cofinsRate = 0.076\n        \n        var totalTax = 0.0\n        order.items.forEach { item ->\n            val itemPrice = item.price * item.quantity\n            \n            val icmsTax = itemPrice * icmsRate\n            \n            val ipiTax = if (item.category in listOf(\"electronics\", \"automotive\", \"cosmetics\")) {\n                itemPrice * ipiRate\n            } else 0.0\n            \n            val pisTax = itemPrice * pisRate\n            val cofinsTax = itemPrice * cofinsRate\n            \n            totalTax += icmsTax + ipiTax + pisTax + cofinsTax\n        }\n        \n        totalTax += calculateDigitalGoodsTax(order)\n        totalTax += calculateSeasonalAdjustment(order)\n        return applyBusinessDiscount(totalTax, order)\n    }\n}\n\nclass MexicoTaxStrategy : BaseTaxStrategy() {\n    override fun calculateTax(order: Order): Double {\n        val ivaRate = 0.16\n        val iepsRate = 0.08\n        \n        var totalTax = 0.0\n        order.items.forEach { item ->\n            val itemPrice = item.price * item.quantity\n            \n            var ivaTax = itemPrice * ivaRate\n            \n            val iepsTax = if (item.category in listOf(\"alcohol\", \"tobacco\", \"fuel\", \"sugary_drinks\")) {\n                itemPrice * iepsRate\n            } else 0.0\n            \n            if (item.category in listOf(\"food\", \"medicine\", \"books\")) {\n                ivaTax = 0.0\n            }\n            \n            totalTax += ivaTax + iepsTax\n        }\n        \n        totalTax += calculateDigitalGoodsTax(order)\n        totalTax += calculateSeasonalAdjustment(order)\n        return applyBusinessDiscount(totalTax, order)\n    }\n}\n\nclass SingaporeTaxStrategy : BaseTaxStrategy() {\n    override fun calculateTax(order: Order): Double {\n        val gstRate = 0.08\n        \n        var totalTax = 0.0\n        order.items.forEach { item ->\n            val itemPrice = item.price * item.quantity\n            var itemTax = itemPrice * gstRate\n            \n            if (item.category in listOf(\"exports\", \"international_services\")) {\n                itemTax = 0.0\n            }\n            \n            if (item.category in listOf(\"residential_property\", \"financial_services\", \"digital_services\")) {\n                itemTax = 0.0\n            }\n            \n            totalTax += itemTax\n        }\n        \n        totalTax += calculateDigitalGoodsTax(order)\n        totalTax += calculateSeasonalAdjustment(order)\n        return applyBusinessDiscount(totalTax, order)\n    }\n}\n\nclass SouthKoreaTaxStrategy : BaseTaxStrategy() {\n    override fun calculateTax(order: Order): Double {\n        val vatRate = 0.10\n        \n        var totalTax = 0.0\n        order.items.forEach { item ->\n            val itemPrice = item.price * item.quantity\n            var itemTax = itemPrice * vatRate\n            \n            if (item.category in listOf(\"exports\", \"medical\", \"education\")) {\n                itemTax = 0.0\n            }\n            \n            if (item.category == \"luxury\" && itemPrice > 5000) {\n                itemTax += itemPrice * 0.20\n            }\n            \n            totalTax += itemTax\n        }\n        \n        totalTax += calculateDigitalGoodsTax(order)\n        totalTax += calculateSeasonalAdjustment(order)\n        return applyBusinessDiscount(totalTax, order)\n    }\n}\n\nclass ChinaTaxStrategy : BaseTaxStrategy() {\n    override fun calculateTax(order: Order): Double {\n        val vatRate = 0.13\n        val reducedVatRate = 0.09\n        \n        var totalTax = 0.0\n        order.items.forEach { item ->\n            val itemPrice = item.price * item.quantity\n            val itemTax = when (item.category) {\n                \"food\", \"books\", \"newspapers\" -> itemPrice * reducedVatRate\n                \"luxury\" -> itemPrice * (vatRate + 0.10)\n                else -> itemPrice * vatRate\n            }\n            \n            totalTax += itemTax\n        }\n        \n        totalTax += calculateDigitalGoodsTax(order)\n        totalTax += calculateSeasonalAdjustment(order)\n        return applyBusinessDiscount(totalTax, order)\n    }\n}\n\nclass GermanyTaxStrategy : BaseTaxStrategy() {\n    override fun calculateTax(order: Order): Double {\n        val standardVat = 0.19\n        val reducedVat = 0.07\n        \n        var totalTax = 0.0\n        order.items.forEach { item ->\n            val itemPrice = item.price * item.quantity\n            val itemTax = when (item.category) {\n                \"food\", \"books\", \"newspapers\", \"public_transport\" -> itemPrice * reducedVat\n                else -> itemPrice * standardVat\n            }\n            \n            totalTax += itemTax\n        }\n        \n        totalTax += calculateDigitalGoodsTax(order)\n        totalTax += calculateSeasonalAdjustment(order)\n        return applyBusinessDiscount(totalTax, order)\n    }\n}\n\nclass FranceTaxStrategy : BaseTaxStrategy() {\n    override fun calculateTax(order: Order): Double {\n        val standardVat = 0.20\n        val intermediateVat = 0.10\n        val reducedVat = 0.055\n        val superReducedVat = 0.021\n        \n        var totalTax = 0.0\n        order.items.forEach { item ->\n            val itemPrice = item.price * item.quantity\n            val itemTax = when (item.category) {\n                \"medicine\", \"books\" -> itemPrice * superReducedVat\n                \"food\", \"restaurant\" -> itemPrice * reducedVat\n                \"transport\", \"accommodation\" -> itemPrice * intermediateVat\n                else -> itemPrice * standardVat\n            }\n            \n            totalTax += itemTax\n        }\n        \n        totalTax += calculateDigitalGoodsTax(order)\n        totalTax += calculateSeasonalAdjustment(order)\n        return applyBusinessDiscount(totalTax, order)\n    }\n}\n\nclass ItalyTaxStrategy : BaseTaxStrategy() {\n    override fun calculateTax(order: Order): Double {\n        val standardVat = 0.22\n        val reducedVat = 0.10\n        val superReducedVat = 0.04\n        \n        var totalTax = 0.0\n        order.items.forEach { item ->\n            val itemPrice = item.price * item.quantity\n            val itemTax = when (item.category) {\n                \"food\", \"medicine\" -> itemPrice * superReducedVat\n                \"books\", \"transport\" -> itemPrice * reducedVat\n                else -> itemPrice * standardVat\n            }\n            \n            totalTax += itemTax\n        }\n        \n        totalTax += calculateDigitalGoodsTax(order)\n        totalTax += calculateSeasonalAdjustment(order)\n        return applyBusinessDiscount(totalTax, order)\n    }\n}\n\nclass DefaultTaxStrategy : BaseTaxStrategy() {\n    companion object {\n        private const val DEFAULT_TAX_RATE = 0.05\n    }\n    \n    override fun calculateTax(order: Order): Double {\n        var totalTax = 0.0\n        order.items.forEach { item ->\n            val itemPrice = item.price * item.quantity\n            totalTax += itemPrice * DEFAULT_TAX_RATE\n        }\n        \n        totalTax += calculateDigitalGoodsTax(order)\n        totalTax += calculateSeasonalAdjustment(order)\n        return applyBusinessDiscount(totalTax, order)\n    }\n}\n\nclass TaxCalculator {\n    private val taxStrategies = mutableMapOf<String, TaxStrategy>()\n    private var defaultStrategy: TaxStrategy = DefaultTaxStrategy()\n    \n    init {\n        initializeStrategies()\n    }\n    \n    private fun initializeStrategies() {\n        val strategies = mapOf(\n            \"US\" to USTaxStrategy(),\n            \"EU\" to EUTaxStrategy(),\n            \"CA\" to CanadaTaxStrategy(),\n            \"UK\" to UKTaxStrategy(),\n            \"AU\" to AustraliaTaxStrategy(),\n            \"JP\" to JapanTaxStrategy(),\n            \"IN\" to IndiaTaxStrategy(),\n            \"BR\" to BrazilTaxStrategy(),\n            \"MX\" to MexicoTaxStrategy(),\n            \"SG\" to SingaporeTaxStrategy(),\n            \"KR\" to SouthKoreaTaxStrategy(),\n            \"CN\" to ChinaTaxStrategy(),\n            \"DE\" to GermanyTaxStrategy(),\n            \"FR\" to FranceTaxStrategy(),\n            \"IT\" to ItalyTaxStrategy()\n        )\n        taxStrategies.putAll(strategies)\n    }\n    \n    fun registerTaxStrategy(country: String, strategy: TaxStrategy) {\n        taxStrategies[country] = strategy\n    }\n    \n    fun unregisterTaxStrategy(country: String): Boolean {\n        return taxStrategies.remove(country) != null\n    }\n    \n    fun setDefaultStrategy(strategy: TaxStrategy) {\n        defaultStrategy = strategy\n    }\n    \n    fun calculateTax(order: Order): Double {\n        val strategy = taxStrategies[order.country] ?: defaultStrategy\n        return strategy.calculateTax(order)\n    }\n    \n    fun getSupportedCountries(): Set<String> {\n        return taxStrategies.keys.toSet()\n    }\n    \n    fun isCountrySupported(country: String): Boolean {\n        return country in taxStrategies\n    }\n    \n    fun getTaxStrategy(country: String): TaxStrategy {\n        return taxStrategies[country] ?: defaultStrategy\n    }\n    \n    fun calculateTaxBreakdown(order: Order): Map<String, Double> {\n        val strategy = taxStrategies[order.country] ?: defaultStrategy\n        \n        if (strategy is BaseTaxStrategy) {\n            val totalTax = strategy.calculateTax(order)\n            val digitalTax = strategy.calculateDigitalGoodsTax(order)\n            val seasonalAdjustment = strategy.calculateSeasonalAdjustment(order)\n            \n            val preDiscountTax = totalTax / (if (order.isBusinessOrder) 0.9 else 1.0)\n            val businessDiscount = if (order.isBusinessOrder) preDiscountTax - totalTax else 0.0\n            val baseTax = preDiscountTax - digitalTax - seasonalAdjustment\n            \n            return mapOf(\n                \"base_tax\" to baseTax,\n                \"digital_goods_tax\" to digitalTax,\n                \"seasonal_adjustment\" to seasonalAdjustment,\n                \"business_discount\" to businessDiscount,\n                \"total_tax\" to totalTax\n            )\n        }\n        \n        return mapOf(\"total_tax\" to strategy.calculateTax(order))\n    }\n    \n    fun validateOrder(order: Order): List<String> {\n        val errors = mutableListOf<String>()\n        \n        if (order.customerId.isBlank()) {\n            errors.add(\"Customer ID cannot be blank\")\n        }\n        \n        if (order.items.isEmpty()) {\n            errors.add(\"Order must contain at least one item\")\n        }\n        \n        order.items.forEach { item ->\n            if (item.price < 0) {\n                errors.add(\"Item ${item.productId} has negative price\")\n            }\n            if (item.quantity <= 0) {\n                errors.add(\"Item ${item.productId} has invalid quantity\")\n            }\n        }\n        \n        return errors\n    }\n}",
      "level": "HARD",
      "language": "KOTLIN",
      "violation": "OCP",
      "description": "Order tax calculation system"
    },
    {
        "input": "import java.util.regex.Pattern\nimport kotlin.collections.mutableSetOf\nimport kotlin.collections.mutableMapOf\nimport kotlin.collections.mutableListOf\n\ndata class Content(\n    var text: String,\n    val contentType: String,\n    val metadata: MutableMap<String, String>,\n    val contentId: String,\n    val timestamp: Long,\n    val source: String,\n    val priority: Int,\n    val tags: MutableList<String> = mutableListOf(),\n    var isPublic: Boolean = false\n) {\n    fun addTag(tag: String) {\n        if (tag !in tags) {\n            tags.add(tag)\n        }\n    }\n    \n    fun setPublic(public: Boolean) {\n        isPublic = public\n    }\n}\n\nclass ContentFilter {\n    private val filterStats: MutableMap<String, Int> = mutableMapOf()\n    private val bannedWords: MutableSet<String> = mutableSetOf(\n        \"badword1\", \"badword2\", \"badword3\", \n        \"inappropriate\", \"offensive\", \"spam\", \"scam\"\n    )\n    private val emailPattern = Pattern.compile(\"[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}\")\n    private val phonePattern = Pattern.compile(\"\\\\b\\\\d{3}-\\\\d{3}-\\\\d{4}\\\\b|\\\\(\\\\d{3}\\\\)\\\\s*\\\\d{3}-\\\\d{4}\")\n    private val urlPattern = Pattern.compile(\"https?://[^\\\\s]+\")\n    private val creditCardPattern = Pattern.compile(\"\\\\b\\\\d{4}[\\\\s-]?\\\\d{4}[\\\\s-]?\\\\d{4}[\\\\s-]?\\\\d{4}\\\\b\")\n    private val ssnPattern = Pattern.compile(\"\\\\d{3}-\\\\d{2}-\\\\d{4}\")\n    private var totalFiltered = 0\n    \n    fun filterContent(content: Content): String {\n        var filteredText = content.text\n        val contentType = content.contentType\n        val metadata = content.metadata\n        \n        when (contentType) {\n            \"email\" -> {\n                filteredText = filterEmailContent(filteredText, metadata)\n                updateStats(\"email\")\n            }\n            \"social\" -> {\n                filteredText = filterSocialContent(filteredText, metadata)\n                updateStats(\"social\")\n            }\n            \"comment\" -> {\n                filteredText = filterCommentContent(filteredText, metadata)\n                updateStats(\"comment\")\n            }\n            \"blog\" -> {\n                filteredText = filterBlogContent(filteredText, metadata)\n                updateStats(\"blog\")\n            }\n            \"news\" -> {\n                filteredText = filterNewsContent(filteredText, metadata)\n                updateStats(\"news\")\n            }\n            \"forum\" -> {\n                filteredText = filterForumContent(filteredText, metadata)\n                updateStats(\"forum\")\n            }\n            \"chat\" -> {\n                filteredText = filterChatContent(filteredText, metadata)\n                updateStats(\"chat\")\n            }\n            \"review\" -> {\n                filteredText = filterReviewContent(filteredText, metadata)\n                updateStats(\"review\")\n            }\n            \"article\" -> {\n                filteredText = filterArticleContent(filteredText, metadata)\n                updateStats(\"article\")\n            }\n            \"video\" -> {\n                filteredText = filterVideoContent(filteredText, metadata)\n                updateStats(\"video\")\n            }\n            else -> {\n                filteredText = filterGenericContent(filteredText, metadata)\n                updateStats(\"generic\")\n            }\n        }\n        \n        // Apply common filters to all content types\n        filteredText = removeCommonProfanity(filteredText)\n        filteredText = removePersonalInfo(filteredText)\n        filteredText = filterUrls(filteredText, metadata)\n        filteredText = filterEmails(filteredText, metadata)\n        filteredText = filterPhoneNumbers(filteredText, metadata)\n        \n        totalFiltered++\n        content.text = filteredText\n        content.addTag(\"filtered\")\n        \n        return filteredText\n    }\n    \n    private fun filterEmailContent(text: String, metadata: Map<String, String>): String {\n        val audience = metadata[\"audience\"] ?: \"general\"\n        \n        var result = applyConfidentialityFilter(text, audience)\n        result = removeEmailHeaders(result)\n        result = filterDepartmentInfo(result, metadata[\"department\"] ?: \"unknown\")\n        \n        return result\n    }\n    \n    private fun filterSocialContent(text: String, metadata: Map<String, String>): String {\n        val platform = metadata[\"platform\"] ?: \"general\"\n        val audience = metadata[\"audience\"] ?: \"general\"\n        \n        var result = filterPlatformSpecificContent(text, platform)\n        result = filterAgeRestrictedContent(result, audience)\n        result = addVerificationLabels(result, metadata[\"userType\"] ?: \"regular\")\n        \n        return result\n    }\n    \n    private fun filterCommentContent(text: String, metadata: Map<String, String>): String {\n        val context = metadata[\"context\"] ?: \"general\"\n        \n        var result = filterContextSpecificLanguage(text, context)\n        result = moderateExtremeLanguage(result, metadata[\"moderation\"] ?: \"standard\")\n        \n        return result\n    }\n    \n    private fun filterBlogContent(text: String, metadata: Map<String, String>): String {\n        val category = metadata[\"category\"] ?: \"general\"\n        \n        var result = filterCategorySpecificTerms(text, category)\n        result = filterAgeInappropriateContent(result, metadata[\"ageRating\"] ?: \"all\")\n        \n        return result\n    }\n    \n    private fun filterNewsContent(text: String, metadata: Map<String, String>): String {\n        val verification = metadata[\"verification\"] ?: \"unverified\"\n        val source = metadata[\"source\"] ?: \"unknown\"\n        \n        var result = addVerificationLabels(text, verification)\n        result = addSourceLabels(result, source)\n        result = filterNewsSpecificTerms(result)\n        \n        return result\n    }\n    \n    private fun filterForumContent(text: String, metadata: Map<String, String>): String {\n        val forumType = metadata[\"forumType\"] ?: \"general\"\n        val userLevel = metadata[\"userLevel\"] ?: \"novice\"\n        \n        var result = filterForumSpecificTerms(text, forumType)\n        result = addUserLevelLabels(result, userLevel)\n        \n        return result\n    }\n    \n    private fun filterChatContent(text: String, metadata: Map<String, String>): String {\n        val chatType = metadata[\"chatType\"] ?: \"public\"\n        val encryption = metadata[\"encryption\"] ?: \"none\"\n        \n        var result = filterChatSpecificContent(text, chatType)\n        result = filterCredentials(result, encryption)\n        result = filterChatAbbreviations(result)\n        \n        return result\n    }\n    \n    private fun filterReviewContent(text: String, metadata: Map<String, String>): String {\n        val productType = metadata[\"productType\"] ?: \"general\"\n        val reviewerStatus = metadata[\"reviewerStatus\"] ?: \"regular\"\n        \n        var result = filterProductSpecificConcerns(text, productType)\n        result = addReviewerStatusLabels(result, reviewerStatus)\n        result = moderateExtremeOpinions(result)\n        \n        return result\n    }\n    \n    private fun filterArticleContent(text: String, metadata: Map<String, String>): String {\n        val publication = metadata[\"publication\"] ?: \"unknown\"\n        val category = metadata[\"category\"] ?: \"general\"\n        \n        var result = addPublicationLabels(text, publication)\n        result = addCategoryLabels(result, category)\n        \n        return result\n    }\n    \n    private fun filterVideoContent(text: String, metadata: Map<String, String>): String {\n        val platform = metadata[\"platform\"] ?: \"general\"\n        val contentType = metadata[\"contentType\"] ?: \"general\"\n        \n        var result = filterVideoSpecificContent(text, platform)\n        result = addContentTypeLabels(result, contentType)\n        \n        return result\n    }\n    \n    private fun filterGenericContent(text: String, metadata: Map<String, String>): String {\n        val contentSource = metadata[\"source\"] ?: \"unknown\"\n        \n        var result = addSourceLabels(text, contentSource)\n        result = filterCommercialContent(result)\n        \n        return result\n    }\n    \n    private fun applyConfidentialityFilter(text: String, audience: String): String {\n        return when (audience) {\n            \"public\" -> {\n                text.replace(Regex(\"(?i)confidential:\"), \"[REDACTED]\")\n                    .replace(Regex(\"(?i)internal use only\"), \"[INTERNAL]\")\n                    .replace(Regex(\"(?i)proprietary\"), \"[CONFIDENTIAL]\")\n            }\n            else -> text\n        }\n    }\n    \n    private fun removeEmailHeaders(text: String): String {\n        return text.replace(Regex(\"(?i)from:\\\\s.*?\\\\n\"), \"\")\n                  .replace(Regex(\"(?i)to:\\\\s.*?\\\\n\"), \"\")\n                  .replace(Regex(\"(?i)cc:\\\\s.*?\\\\n\"), \"\")\n                  .replace(Regex(\"(?i)subject:\\\\s.*?\\\\n\"), \"\")\n    }\n    \n    private fun filterDepartmentInfo(text: String, department: String): String {\n        return when (department) {\n            \"hr\" -> text.replace(Regex(\"(?i)salary|compensation|benefits\"), \"[HR-INFO]\")\n            \"legal\" -> text.replace(Regex(\"(?i)lawsuit|litigation|settlement\"), \"[LEGAL-MATTER]\")\n            else -> text\n        }\n    }\n    \n    private fun filterPlatformSpecificContent(text: String, platform: String): String {\n        return when (platform) {\n            \"twitter\" -> {\n                text.replace(Regex(\"@([A-Za-z0-9_]+)\"), \"[USERNAME]\")\n                    .replace(Regex(\"#([A-Za-z0-9_]+)\"), \"[HASHTAG]\")\n            }\n            \"facebook\" -> text.replace(Regex(\"@\\\\[[^\\\\]]+\\\\]\"), \"[NAME]\")\n            \"instagram\" -> text.replace(Regex(\"@([A-Za-z0-9_.]+)\"), \"[HANDLE]\")\n            else -> text\n        }\n    }\n    \n    private fun filterAgeRestrictedContent(text: String, audience: String): String {\n        return when (audience) {\n            \"minor\" -> text.replace(Regex(\"(?i)alcohol|beer|wine|gambling|casino\"), \"[AGE-RESTRICTED]\")\n            else -> text\n        }\n    }\n    \n    private fun addVerificationLabels(text: String, userType: String): String {\n        return when (userType) {\n            \"verified\" -> \"[VERIFIED] $text\"\n            else -> text\n        }\n    }\n    \n    private fun filterContextSpecificLanguage(text: String, context: String): String {\n        return when (context) {\n            \"news\" -> text.replace(Regex(\"(?i)allegedly|reportedly|rumored\"), \"[STATEMENT]\")\n            \"review\" -> text.replace(Regex(\"(?i)terrible|awful|worst ever\"), \"not satisfactory\")\n            \"political\" -> text.replace(Regex(\"(?i)corrupt|scandal|investigation\"), \"[POLITICAL-CLAIM]\")\n            else -> text\n        }\n    }\n    \n    private fun moderateExtremeLanguage(text: String, moderation: String): String {\n        return when (moderation) {\n            \"strict\" -> text.replace(Regex(\"(?i)disagree|wrong|false\"), \"alternative view\")\n            else -> text\n        }\n    }\n    \n    private fun filterCategorySpecificTerms(text: String, category: String): String {\n        return when (category) {\n            \"technology\" -> text.replace(Regex(\"(?i)hack|exploit|vulnerability\"), \"[TECH-ISSUE]\")\n            \"health\" -> text.replace(Regex(\"(?i)cure|treatment|medication\"), \"[MEDICAL-INFO]\")\n            else -> text\n        }\n    }\n    \n    private fun filterAgeInappropriateContent(text: String, ageRating: String): String {\n        return when (ageRating) {\n            \"teen\" -> text.replace(Regex(\"(?i)violence|graphic|explicit\"), \"[MATURE-CONTENT]\")\n            else -> text\n        }\n    }\n    \n    private fun addSourceLabels(text: String, source: String): String {\n        return when (source) {\n            \"social\" -> \"[SOCIAL-SOURCE] $text\"\n            \"user-generated\" -> \"[USER-CONTENT] $text\"\n            else -> text\n        }\n    }\n    \n    private fun filterNewsSpecificTerms(text: String): String {\n        return text.replace(Regex(\"(?i)exclusive:|scoop:\"), \"[STORY]:\")\n    }\n    \n    private fun filterForumSpecificTerms(text: String, forumType: String): String {\n        return when (forumType) {\n            \"technical\" -> text.replace(Regex(\"(?i)bug|error|crash\"), \"[ISSUE]\")\n            \"gaming\" -> text.replace(Regex(\"(?i)cheat|hack|mod\"), \"[GAME-MODIFICATION]\")\n            else -> text\n        }\n    }\n    \n    private fun addUserLevelLabels(text: String, userLevel: String): String {\n        return when (userLevel) {\n            \"newbie\" -> \"[NEW-USER] $text\"\n            \"expert\" -> \"[EXPERT] $text\"\n            else -> text\n        }\n    }\n    \n    private fun filterChatSpecificContent(text: String, chatType: String): String {\n        return when (chatType) {\n            \"public\" -> text.replace(Regex(\"(?i)private|personal|secret\"), \"[PRIVATE-INFO]\")\n            else -> text\n        }\n    }\n    \n    private fun filterCredentials(text: String, encryption: String): String {\n        return when (encryption) {\n            \"none\" -> text.replace(Regex(\"(?i)password|token|key\"), \"[CREDENTIALS]\")\n            else -> text\n        }\n    }\n    \n    private fun filterChatAbbreviations(text: String): String {\n        return text.replace(Regex(\"(?i)wtf|omfg|stfu|lmao\"), \"[ABBREV]\")\n    }\n    \n    private fun filterProductSpecificConcerns(text: String, productType: String): String {\n        return when (productType) {\n            \"restaurant\" -> text.replace(Regex(\"(?i)food poisoning|sick|illness\"), \"[HEALTH-CONCERN]\")\n            \"hotel\" -> text.replace(Regex(\"(?i)dirty|filthy|disgusting\"), \"needs improvement\")\n            else -> text\n        }\n    }\n    \n    private fun addReviewerStatusLabels(text: String, reviewerStatus: String): String {\n        return when (reviewerStatus) {\n            \"verified\" -> \"[VERIFIED-REVIEW] $text\"\n            else -> text\n        }\n    }\n    \n    private fun moderateExtremeOpinions(text: String): String {\n        return text.replace(Regex(\"(?i)love it|hate it|perfect|disaster\"), \"[OPINION]\")\n    }\n    \n    private fun addPublicationLabels(text: String, publication: String): String {\n        return when (publication) {\n            \"tabloid\" -> \"[TABLOID] $text\"\n            else -> text\n        }\n    }\n    \n    private fun addCategoryLabels(text: String, category: String): String {\n        return when (category) {\n            \"opinion\" -> \"[OPINION-PIECE] $text\"\n            else -> text\n        }\n    }\n    \n    private fun filterVideoSpecificContent(text: String, platform: String): String {\n        return when (platform) {\n            \"youtube\" -> text.replace(Regex(\"(?i)like and subscribe\"), \"[ENGAGEMENT-REQUEST]\")\n            else -> text\n        }\n    }\n    \n    private fun addContentTypeLabels(text: String, contentType: String): String {\n        return when (contentType) {\n            \"tutorial\" -> text.replace(Regex(\"(?i)step by step|how to\"), \"[TUTORIAL]\")\n            else -> text\n        }\n    }\n    \n    private fun filterCommercialContent(text: String): String {\n        return text.replace(Regex(\"(?i)spam|advertisement|promotion\"), \"[COMMERCIAL]\")\n    }\n    \n    private fun removeCommonProfanity(text: String): String {\n        var result = text\n        bannedWords.forEach { word ->\n            val pattern = Regex(\"(?i)\\\\b${Regex.escape(word)}\\\\b\")\n            result = result.replace(pattern, \"[INAPPROPRIATE]\")\n        }\n        return result\n    }\n    \n    private fun removePersonalInfo(text: String): String {\n        return ssnPattern.matcher(text).replaceAll(\"[SSN]\")\n                          .let { creditCardPattern.matcher(it).replaceAll(\"[CREDIT_CARD]\") }\n                          .replace(Regex(\"\\\\b(?:\\\\d{1,3}\\\\.){3}\\\\d{1,3}\\\\b\"), \"[IP_ADDRESS]\")\n    }\n    \n    private fun filterUrls(text: String, metadata: Map<String, String>): String {\n        val urlPolicy = metadata[\"urlPolicy\"] ?: \"allow\"\n        return when (urlPolicy) {\n            \"block\" -> urlPattern.matcher(text).replaceAll(\"[URL]\")\n            else -> text\n        }\n    }\n    \n    private fun filterEmails(text: String, metadata: Map<String, String>): String {\n        val emailPolicy = metadata[\"emailPolicy\"] ?: \"allow\"\n        return when (emailPolicy) {\n            \"block\" -> emailPattern.matcher(text).replaceAll(\"[EMAIL]\")\n            else -> text\n        }\n    }\n    \n    private fun filterPhoneNumbers(text: String, metadata: Map<String, String>): String {\n        val phonePolicy = metadata[\"phonePolicy\"] ?: \"allow\"\n        return when (phonePolicy) {\n            \"block\" -> phonePattern.matcher(text).replaceAll(\"[PHONE]\")\n            else -> text\n        }\n    }\n    \n    private fun updateStats(contentType: String) {\n        filterStats[contentType] = filterStats.getOrDefault(contentType, 0) + 1\n    }\n    \n    fun getFilterStats(): Map<String, Int> = filterStats.toMap()\n    \n    fun getTotalFiltered(): Int = totalFiltered\n    \n    fun addBannedWord(word: String) {\n        bannedWords.add(word.lowercase())\n    }\n    \n    fun removeBannedWord(word: String) {\n        bannedWords.remove(word.lowercase())\n    }\n    \n    fun getBannedWords(): Set<String> = bannedWords.toSet()\n}",
          "output": "import java.util.regex.Pattern\nimport kotlin.collections.mutableSetOf\nimport kotlin.collections.mutableMapOf\nimport kotlin.collections.mutableListOf\n\ndata class Content(\n    var text: String,\n    val contentType: String,\n    val metadata: MutableMap<String, String>,\n    val contentId: String,\n    val timestamp: Long,\n    val source: String,\n    val priority: Int,\n    val tags: MutableList<String> = mutableListOf(),\n    var isPublic: Boolean = false\n) {\n    fun addTag(tag: String) {\n        if (tag !in tags) {\n            tags.add(tag)\n        }\n    }\n    \n    fun setPublic(public: Boolean) {\n        isPublic = public\n    }\n}\n\ninterface ContentFilterStrategy {\n    fun filter(text: String, metadata: Map<String, String>): String\n}\n\nclass EmailContentFilter : ContentFilterStrategy {\n    override fun filter(text: String, metadata: Map<String, String>): String {\n        val audience = metadata[\"audience\"] ?: \"general\"\n        \n        var result = applyConfidentialityFilter(text, audience)\n        result = removeEmailHeaders(result)\n        result = filterDepartmentInfo(result, metadata[\"department\"] ?: \"unknown\")\n        \n        return result\n    }\n    \n    private fun applyConfidentialityFilter(text: String, audience: String): String {\n        return when (audience) {\n            \"public\" -> {\n                text.replace(Regex(\"(?i)confidential:\"), \"[REDACTED]\")\n                    .replace(Regex(\"(?i)internal use only\"), \"[INTERNAL]\")\n                    .replace(Regex(\"(?i)proprietary\"), \"[CONFIDENTIAL]\")\n            }\n            else -> text\n        }\n    }\n    \n    private fun removeEmailHeaders(text: String): String {\n        return text.replace(Regex(\"(?i)from:\\\\s.*?\\\\n\"), \"\")\n                  .replace(Regex(\"(?i)to:\\\\s.*?\\\\n\"), \"\")\n                  .replace(Regex(\"(?i)cc:\\\\s.*?\\\\n\"), \"\")\n                  .replace(Regex(\"(?i)subject:\\\\s.*?\\\\n\"), \"\")\n    }\n    \n    private fun filterDepartmentInfo(text: String, department: String): String {\n        return when (department) {\n            \"hr\" -> text.replace(Regex(\"(?i)salary|compensation|benefits\"), \"[HR-INFO]\")\n            \"legal\" -> text.replace(Regex(\"(?i)lawsuit|litigation|settlement\"), \"[LEGAL-MATTER]\")\n            else -> text\n        }\n    }\n}\n\nclass SocialContentFilter : ContentFilterStrategy {\n    override fun filter(text: String, metadata: Map<String, String>): String {\n        val platform = metadata[\"platform\"] ?: \"general\"\n        val audience = metadata[\"audience\"] ?: \"general\"\n        \n        var result = filterPlatformSpecificContent(text, platform)\n        result = filterAgeRestrictedContent(result, audience)\n        result = addVerificationLabels(result, metadata[\"userType\"] ?: \"regular\")\n        \n        return result\n    }\n    \n    private fun filterPlatformSpecificContent(text: String, platform: String): String {\n        return when (platform) {\n            \"twitter\" -> {\n                text.replace(Regex(\"@([A-Za-z0-9_]+)\"), \"[USERNAME]\")\n                    .replace(Regex(\"#([A-Za-z0-9_]+)\"), \"[HASHTAG]\")\n            }\n            \"facebook\" -> text.replace(Regex(\"@\\\\[[^\\\\]]+\\\\]\"), \"[NAME]\")\n            \"instagram\" -> text.replace(Regex(\"@([A-Za-z0-9_.]+)\"), \"[HANDLE]\")\n            else -> text\n        }\n    }\n    \n    private fun filterAgeRestrictedContent(text: String, audience: String): String {\n        return when (audience) {\n            \"minor\" -> text.replace(Regex(\"(?i)alcohol|beer|wine|gambling|casino\"), \"[AGE-RESTRICTED]\")\n            else -> text\n        }\n    }\n    \n    private fun addVerificationLabels(text: String, userType: String): String {\n        return when (userType) {\n            \"verified\" -> \"[VERIFIED] $text\"\n            else -> text\n        }\n    }\n}\n\nclass CommentContentFilter : ContentFilterStrategy {\n    override fun filter(text: String, metadata: Map<String, String>): String {\n        val context = metadata[\"context\"] ?: \"general\"\n        \n        var result = filterContextSpecificLanguage(text, context)\n        result = moderateExtremeLanguage(result, metadata[\"moderation\"] ?: \"standard\")\n        \n        return result\n    }\n    \n    private fun filterContextSpecificLanguage(text: String, context: String): String {\n        return when (context) {\n            \"news\" -> text.replace(Regex(\"(?i)allegedly|reportedly|rumored\"), \"[STATEMENT]\")\n            \"review\" -> text.replace(Regex(\"(?i)terrible|awful|worst ever\"), \"not satisfactory\")\n            \"political\" -> text.replace(Regex(\"(?i)corrupt|scandal|investigation\"), \"[POLITICAL-CLAIM]\")\n            else -> text\n        }\n    }\n    \n    private fun moderateExtremeLanguage(text: String, moderation: String): String {\n        return when (moderation) {\n            \"strict\" -> text.replace(Regex(\"(?i)disagree|wrong|false\"), \"alternative view\")\n            else -> text\n        }\n    }\n}\n\nclass BlogContentFilter : ContentFilterStrategy {\n    override fun filter(text: String, metadata: Map<String, String>): String {\n        val category = metadata[\"category\"] ?: \"general\"\n        \n        var result = filterCategorySpecificTerms(text, category)\n        result = filterAgeInappropriateContent(result, metadata[\"ageRating\"] ?: \"all\")\n        \n        return result\n    }\n    \n    private fun filterCategorySpecificTerms(text: String, category: String): String {\n        return when (category) {\n            \"technology\" -> text.replace(Regex(\"(?i)hack|exploit|vulnerability\"), \"[TECH-ISSUE]\")\n            \"health\" -> text.replace(Regex(\"(?i)cure|treatment|medication\"), \"[MEDICAL-INFO]\")\n            else -> text\n        }\n    }\n    \n    private fun filterAgeInappropriateContent(text: String, ageRating: String): String {\n        return when (ageRating) {\n            \"teen\" -> text.replace(Regex(\"(?i)violence|graphic|explicit\"), \"[MATURE-CONTENT]\")\n            else -> text\n        }\n    }\n}\n\nclass NewsContentFilter : ContentFilterStrategy {\n    override fun filter(text: String, metadata: Map<String, String>): String {\n        val verification = metadata[\"verification\"] ?: \"unverified\"\n        val source = metadata[\"source\"] ?: \"unknown\"\n        \n        var result = addVerificationLabels(text, verification)\n        result = addSourceLabels(result, source)\n        result = filterNewsSpecificTerms(result)\n        \n        return result\n    }\n    \n    private fun addVerificationLabels(text: String, verification: String): String {\n        return when (verification) {\n            \"unverified\" -> \"[UNVERIFIED-SOURCE] $text\"\n            else -> text\n        }\n    }\n    \n    private fun addSourceLabels(text: String, source: String): String {\n        return when (source) {\n            \"social\" -> \"[SOCIAL-SOURCE] $text\"\n            else -> text\n        }\n    }\n    \n    private fun filterNewsSpecificTerms(text: String): String {\n        return text.replace(Regex(\"(?i)exclusive:|scoop:\"), \"[STORY]:\")\n    }\n}\n\nclass ForumContentFilter : ContentFilterStrategy {\n    override fun filter(text: String, metadata: Map<String, String>): String {\n        val forumType = metadata[\"forumType\"] ?: \"general\"\n        val userLevel = metadata[\"userLevel\"] ?: \"novice\"\n        \n        var result = filterForumSpecificTerms(text, forumType)\n        result = addUserLevelLabels(result, userLevel)\n        \n        return result\n    }\n    \n    private fun filterForumSpecificTerms(text: String, forumType: String): String {\n        return when (forumType) {\n            \"technical\" -> text.replace(Regex(\"(?i)bug|error|crash\"), \"[ISSUE]\")\n            \"gaming\" -> text.replace(Regex(\"(?i)cheat|hack|mod\"), \"[GAME-MODIFICATION]\")\n            else -> text\n        }\n    }\n    \n    private fun addUserLevelLabels(text: String, userLevel: String): String {\n        return when (userLevel) {\n            \"newbie\" -> \"[NEW-USER] $text\"\n            \"expert\" -> \"[EXPERT] $text\"\n            else -> text\n        }\n    }\n}\n\nclass ChatContentFilter : ContentFilterStrategy {\n    override fun filter(text: String, metadata: Map<String, String>): String {\n        val chatType = metadata[\"chatType\"] ?: \"public\"\n        val encryption = metadata[\"encryption\"] ?: \"none\"\n        \n        var result = filterChatSpecificContent(text, chatType)\n        result = filterCredentials(result, encryption)\n        result = filterChatAbbreviations(result)\n        \n        return result\n    }\n    \n    private fun filterChatSpecificContent(text: String, chatType: String): String {\n        return when (chatType) {\n            \"public\" -> text.replace(Regex(\"(?i)private|personal|secret\"), \"[PRIVATE-INFO]\")\n            else -> text\n        }\n    }\n    \n    private fun filterCredentials(text: String, encryption: String): String {\n        return when (encryption) {\n            \"none\" -> text.replace(Regex(\"(?i)password|token|key\"), \"[CREDENTIALS]\")\n            else -> text\n        }\n    }\n    \n    private fun filterChatAbbreviations(text: String): String {\n        return text.replace(Regex(\"(?i)wtf|omfg|stfu|lmao\"), \"[ABBREV]\")\n    }\n}\n\nclass ReviewContentFilter : ContentFilterStrategy {\n    override fun filter(text: String, metadata: Map<String, String>): String {\n        val productType = metadata[\"productType\"] ?: \"general\"\n        val reviewerStatus = metadata[\"reviewerStatus\"] ?: \"regular\"\n        \n        var result = filterProductSpecificConcerns(text, productType)\n        result = addReviewerStatusLabels(result, reviewerStatus)\n        result = moderateExtremeOpinions(result)\n        \n        return result\n    }\n    \n    private fun filterProductSpecificConcerns(text: String, productType: String): String {\n        return when (productType) {\n            \"restaurant\" -> text.replace(Regex(\"(?i)food poisoning|sick|illness\"), \"[HEALTH-CONCERN]\")\n            \"hotel\" -> text.replace(Regex(\"(?i)dirty|filthy|disgusting\"), \"needs improvement\")\n            else -> text\n        }\n    }\n    \n    private fun addReviewerStatusLabels(text: String, reviewerStatus: String): String {\n        return when (reviewerStatus) {\n            \"verified\" -> \"[VERIFIED-REVIEW] $text\"\n            else -> text\n        }\n    }\n    \n    private fun moderateExtremeOpinions(text: String): String {\n        return text.replace(Regex(\"(?i)love it|hate it|perfect|disaster\"), \"[OPINION]\")\n    }\n}\n\nclass ArticleContentFilter : ContentFilterStrategy {\n    override fun filter(text: String, metadata: Map<String, String>): String {\n        val publication = metadata[\"publication\"] ?: \"unknown\"\n        val category = metadata[\"category\"] ?: \"general\"\n        \n        var result = addPublicationLabels(text, publication)\n        result = addCategoryLabels(result, category)\n        \n        return result\n    }\n    \n    private fun addPublicationLabels(text: String, publication: String): String {\n        return when (publication) {\n            \"tabloid\" -> \"[TABLOID] $text\"\n            else -> text\n        }\n    }\n    \n    private fun addCategoryLabels(text: String, category: String): String {\n        return when (category) {\n            \"opinion\" -> \"[OPINION-PIECE] $text\"\n            else -> text\n        }\n    }\n}\n\nclass VideoContentFilter : ContentFilterStrategy {\n    override fun filter(text: String, metadata: Map<String, String>): String {\n        val platform = metadata[\"platform\"] ?: \"general\"\n        val contentType = metadata[\"contentType\"] ?: \"general\"\n        \n        var result = filterVideoSpecificContent(text, platform)\n        result = addContentTypeLabels(result, contentType)\n        \n        return result\n    }\n    \n    private fun filterVideoSpecificContent(text: String, platform: String): String {\n        return when (platform) {\n            \"youtube\" -> text.replace(Regex(\"(?i)like and subscribe\"), \"[ENGAGEMENT-REQUEST]\")\n            else -> text\n        }\n    }\n    \n    private fun addContentTypeLabels(text: String, contentType: String): String {\n        return when (contentType) {\n            \"tutorial\" -> text.replace(Regex(\"(?i)step by step|how to\"), \"[TUTORIAL]\")\n            else -> text\n        }\n    }\n}\n\nclass GenericContentFilter : ContentFilterStrategy {\n    override fun filter(text: String, metadata: Map<String, String>): String {\n        val contentSource = metadata[\"source\"] ?: \"unknown\"\n        \n        var result = addSourceLabels(text, contentSource)\n        result = filterCommercialContent(result)\n        \n        return result\n    }\n    \n    private fun addSourceLabels(text: String, contentSource: String): String {\n        return when (contentSource) {\n            \"user-generated\" -> \"[USER-CONTENT] $text\"\n            else -> text\n        }\n    }\n    \n    private fun filterCommercialContent(text: String): String {\n        return text.replace(Regex(\"(?i)spam|advertisement|promotion\"), \"[COMMERCIAL]\")\n    }\n}\n\nclass ContentFilter {\n    private val filterStrategies: MutableMap<String, ContentFilterStrategy> = mutableMapOf()\n    private val filterStats: MutableMap<String, Int> = mutableMapOf()\n    private val bannedWords: MutableSet<String> = mutableSetOf(\n        \"badword1\", \"badword2\", \"badword3\", \n        \"inappropriate\", \"offensive\", \"spam\", \"scam\"\n    )\n    private val emailPattern = Pattern.compile(\"[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}\")\n    private val phonePattern = Pattern.compile(\"\\\\b\\\\d{3}-\\\\d{3}-\\\\d{4}\\\\b|\\\\(\\\\d{3}\\\\)\\\\s*\\\\d{3}-\\\\d{4}\")\n    private val urlPattern = Pattern.compile(\"https?://[^\\\\s]+\")\n    private val creditCardPattern = Pattern.compile(\"\\\\b\\\\d{4}[\\\\s-]?\\\\d{4}[\\\\s-]?\\\\d{4}[\\\\s-]?\\\\d{4}\\\\b\")\n    private val ssnPattern = Pattern.compile(\"\\\\d{3}-\\\\d{2}-\\\\d{4}\")\n    private var totalFiltered = 0\n    \n    init {\n        initializeFilterStrategies()\n    }\n    \n    private fun initializeFilterStrategies() {\n        filterStrategies.apply {\n            put(\"email\", EmailContentFilter())\n            put(\"social\", SocialContentFilter())\n            put(\"comment\", CommentContentFilter())\n            put(\"blog\", BlogContentFilter())\n            put(\"news\", NewsContentFilter())\n            put(\"forum\", ForumContentFilter())\n            put(\"chat\", ChatContentFilter())\n            put(\"review\", ReviewContentFilter())\n            put(\"article\", ArticleContentFilter())\n            put(\"video\", VideoContentFilter())\n            put(\"default\", GenericContentFilter())\n        }\n    }\n    \n    fun registerFilterStrategy(contentType: String, strategy: ContentFilterStrategy) {\n        filterStrategies[contentType] = strategy\n    }\n    \n    fun filterContent(content: Content): String {\n        var filteredText = content.text\n        val contentType = content.contentType\n        val metadata = content.metadata\n        \n        val strategy = filterStrategies[contentType] ?: filterStrategies[\"default\"]!!\n        filteredText = strategy.filter(filteredText, metadata)\n        \n        // Apply common filters to all content types\n        filteredText = removeCommonProfanity(filteredText)\n        filteredText = removePersonalInfo(filteredText)\n        filteredText = filterUrls(filteredText, metadata)\n        filteredText = filterEmails(filteredText, metadata)\n        filteredText = filterPhoneNumbers(filteredText, metadata)\n        \n        updateStats(contentType)\n        totalFiltered++\n        content.text = filteredText\n        content.addTag(\"filtered\")\n        \n        return filteredText\n    }\n    \n    private fun removeCommonProfanity(text: String): String {\n        return bannedWords.fold(text) { acc, word ->\n            val pattern = Regex(\"(?i)\\\\b${Regex.escape(word)}\\\\b\")\n            acc.replace(pattern, \"[INAPPROPRIATE]\")\n        }\n    }\n    \n    private fun removePersonalInfo(text: String): String {\n        return ssnPattern.matcher(text).replaceAll(\"[SSN]\")\n                          .let { creditCardPattern.matcher(it).replaceAll(\"[CREDIT_CARD]\") }\n                          .replace(Regex(\"\\\\b(?:\\\\d{1,3}\\\\.){3}\\\\d{1,3}\\\\b\"), \"[IP_ADDRESS]\")\n    }\n    \n    private fun filterUrls(text: String, metadata: Map<String, String>): String {\n        val urlPolicy = metadata[\"urlPolicy\"] ?: \"allow\"\n        return when (urlPolicy) {\n            \"block\" -> urlPattern.matcher(text).replaceAll(\"[URL]\")\n            else -> text\n        }\n    }\n    \n    private fun filterEmails(text: String, metadata: Map<String, String>): String {\n        val emailPolicy = metadata[\"emailPolicy\"] ?: \"allow\"\n        return when (emailPolicy) {\n            \"block\" -> emailPattern.matcher(text).replaceAll(\"[EMAIL]\")\n            else -> text\n        }\n    }\n    \n    private fun filterPhoneNumbers(text: String, metadata: Map<String, String>): String {\n        val phonePolicy = metadata[\"phonePolicy\"] ?: \"allow\"\n        return when (phonePolicy) {\n            \"block\" -> phonePattern.matcher(text).replaceAll(\"[PHONE]\")\n            else -> text\n        }\n    }\n    \n    private fun updateStats(contentType: String) {\n        filterStats[contentType] = filterStats.getOrDefault(contentType, 0) + 1\n    }\n    \n    fun getFilterStats(): Map<String, Int> = filterStats.toMap()\n    \n    fun getTotalFiltered(): Int = totalFiltered\n    \n    fun addBannedWord(word: String) {\n        bannedWords.add(word.lowercase())\n    }\n    \n    fun removeBannedWord(word: String) {\n        bannedWords.remove(word.lowercase())\n    }\n    \n    fun getBannedWords(): Set<String> = bannedWords.toSet()\n}",
        "level": "HARD",
      "language": "KOTLIN",
      "violation": "OCP",
      "description": "Content filtering system"
    },
    {
      "input": "import java.util.Date\n\nclass Order(\n    private val id: String,\n    private val items: List<OrderItem>,\n    private val shippingAddress: Address,\n    private val shippingMethod: String\n) {\n    private var status: OrderStatus = OrderStatus.CREATED\n    private var totalAmount: Double = 0.0\n    \n    init {\n        calculateTotalAmount()\n    }\n    \n    private fun calculateTotalAmount() {\n        totalAmount = items.sumByDouble { it.getPrice() * it.getQuantity() }\n    }\n    \n    fun getId(): String {\n        return id\n    }\n    \n    fun getItems(): List<OrderItem> {\n        return items\n    }\n    \n    fun getShippingAddress(): Address {\n        return shippingAddress\n    }\n    \n    fun getShippingMethod(): String {\n        return shippingMethod\n    }\n    \n    fun getStatus(): OrderStatus {\n        return status\n    }\n    \n    fun setStatus(status: OrderStatus) {\n        this.status = status\n    }\n    \n    fun getTotalAmount(): Double {\n        return totalAmount\n    }\n}\n\nclass OrderItem(\n    private val productId: String,\n    private val quantity: Int,\n    private val price: Double\n) {\n    fun getProductId(): String {\n        return productId\n    }\n    \n    fun getQuantity(): Int {\n        return quantity\n    }\n    \n    fun getPrice(): Double {\n        return price\n    }\n}\n\nclass Address(\n    private val name: String,\n    private val street: String,\n    private val city: String,\n    private val state: String,\n    private val country: String,\n    private val zipCode: String\n) {\n    fun getName(): String {\n        return name\n    }\n    \n    fun getStreet(): String {\n        return street\n    }\n    \n    fun getCity(): String {\n        return city\n    }\n    \n    fun getState(): String {\n        return state\n    }\n    \n    fun getCountry(): String {\n        return country\n    }\n    \n    fun getZipCode(): String {\n        return zipCode\n    }\n}\n\nclass Shipment(\n    private val orderId: String,\n    private val shipmentDate: Date\n) {\n    private var cost: Double = 0.0\n    \n    fun getOrderId(): String {\n        return orderId\n    }\n    \n    fun getShipmentDate(): Date {\n        return shipmentDate\n    }\n    \n    fun getCost(): Double {\n        return cost\n    }\n    \n    fun setCost(cost: Double) {\n        this.cost = cost\n    }\n}\n\nclass ShippingCost(\n    private val cost: Double\n) {\n    fun getCost(): Double {\n        return cost\n    }\n}\n\nclass ShipmentResult(\n    private val success: Boolean,\n    private val message: String,\n    private val shipment: Shipment?\n) {\n    fun isSuccess(): Boolean {\n        return success\n    }\n    \n    fun getMessage(): String {\n        return message\n    }\n    \n    fun getShipment(): Shipment? {\n        return shipment\n    }\n}\n\ninterface OrderRepository {\n    fun findById(id: String): Order?\n    fun update(order: Order)\n}\n\ninterface InventoryService {\n    fun isInStock(productId: String, quantity: Int): Boolean\n    fun reserve(productId: String, quantity: Int)\n    fun getProduct(productId: String): Product\n}\n\nclass Product(\n    private val id: String,\n    private val name: String,\n    private val weight: Double,\n    private val price: Double\n) {\n    fun getId(): String {\n        return id\n    }\n    \n    fun getName(): String {\n        return name\n    }\n    \n    fun getWeight(): Double {\n        return weight\n    }\n    \n    fun getPrice(): Double {\n        return price\n    }\n}\n\ninterface Logger {\n    fun log(message: String)\n}\n\nenum class OrderStatus {\n    CREATED, PAID, SHIPPED, DELIVERED, CANCELLED\n}\n\nclass ShippingService(\n    private val orderRepository: OrderRepository,\n    private val inventoryService: InventoryService,\n    private val logger: Logger\n) {\n    \n    fun processShipment(orderId: String): ShipmentResult {\n        val order = orderRepository.findById(orderId)\n        \n        if (order == null) {\n            throw IllegalArgumentException(\"Order not found: $orderId\")\n        }\n        \n        if (order.getStatus() != OrderStatus.PAID) {\n            return ShipmentResult(false, \"Order is not paid yet\", null)\n        }\n        \n        for (item in order.getItems()) {\n            if (!inventoryService.isInStock(item.getProductId(), item.getQuantity())) {\n                return ShipmentResult(false, \"Product out of stock: ${item.getProductId()}\", null)\n            }\n        }\n        \n        val shipment = Shipment(orderId, Date())\n        val shippingCost = calculateShippingCost(order)\n        shipment.setCost(shippingCost.getCost())\n        \n        for (item in order.getItems()) {\n            inventoryService.reserve(item.getProductId(), item.getQuantity())\n        }\n        \n        order.setStatus(OrderStatus.SHIPPED)\n        orderRepository.update(order)\n        \n        logger.log(\"Order shipped: $orderId, cost: ${shippingCost.getCost()}\")\n        return ShipmentResult(true, \"Order shipped successfully\", shipment)\n    }\n    \n    private fun calculateShippingCost(order: Order): ShippingCost {\n        val destination = order.getShippingAddress()\n        val totalWeight = calculateOrderWeight(order)\n        var baseCost = 0.0\n        \n        val shippingMethod = order.getShippingMethod()\n        \n        if (shippingMethod == \"standard\") {\n            baseCost = 5.0\n            val weightCost = totalWeight * 0.5\n            val distance = calculateDistance(destination)\n            val distanceFactor = distance * 0.01\n            \n            return ShippingCost(baseCost + weightCost + distanceFactor)\n            \n        } else if (shippingMethod == \"express\") {\n            baseCost = 15.0\n            val weightCost = totalWeight * 0.75\n            val distance = calculateDistance(destination)\n            val distanceFactor = distance * 0.015\n            \n            return ShippingCost(baseCost + weightCost + distanceFactor)\n            \n        } else if (shippingMethod == \"overnight\") {\n            baseCost = 25.0\n            val weightCost = totalWeight * 1.0\n            val distance = calculateDistance(destination)\n            val distanceFactor = distance * 0.02\n            \n            return ShippingCost(baseCost + weightCost + distanceFactor)\n            \n        } else if (shippingMethod == \"international\") {\n            baseCost = 30.0\n            val weightCost = totalWeight * 2.0\n            val distance = calculateDistance(destination)\n            val distanceFactor = distance * 0.025\n            val customsFee = order.getTotalAmount() * 0.05 \n            \n            return ShippingCost(baseCost + weightCost + distanceFactor + customsFee)\n        }\n        \n        return ShippingCost(10.0)\n    }\n    \n    private fun calculateOrderWeight(order: Order): Double {\n        var totalWeight = 0.0\n        for (item in order.getItems()) {\n            val product = inventoryService.getProduct(item.getProductId())\n            totalWeight += product.getWeight() * item.getQuantity()\n        }\n        return totalWeight\n    }\n    \n    private fun calculateDistance(destination: Address): Double {\n        val warehouseAddress = Address(\"Warehouse\", \"123 Main St\", \"City\", \"State\", \"Country\", \"12345\")\n        \n        if (warehouseAddress.getCountry() == destination.getCountry()) {\n            if (warehouseAddress.getState() == destination.getState()) {\n                if (warehouseAddress.getCity() == destination.getCity()) {\n                    return 10.0 \n                }\n                return 50.0 \n            }\n            return 200.0 \n        }\n        return 1000.0 \n    }\n}",
      "output": "import java.util.Date\n\nclass Order(\n    private val id: String,\n    private val items: List<OrderItem>,\n    private val shippingAddress: Address,\n    private val shippingMethod: String\n) {\n    private var status: OrderStatus = OrderStatus.CREATED\n    private var totalAmount: Double = 0.0\n    \n    init {\n        calculateTotalAmount()\n    }\n    \n    private fun calculateTotalAmount() {\n        totalAmount = items.sumByDouble { it.getPrice() * it.getQuantity() }\n    }\n    \n    fun getId(): String {\n        return id\n    }\n    \n    fun getItems(): List<OrderItem> {\n        return items\n    }\n    \n    fun getShippingAddress(): Address {\n        return shippingAddress\n    }\n    \n    fun getShippingMethod(): String {\n        return shippingMethod\n    }\n    \n    fun getStatus(): OrderStatus {\n        return status\n    }\n    \n    fun setStatus(status: OrderStatus) {\n        this.status = status\n    }\n    \n    fun getTotalAmount(): Double {\n        return totalAmount\n    }\n}\n\nclass OrderItem(\n    private val productId: String,\n    private val quantity: Int,\n    private val price: Double\n) {\n    fun getProductId(): String {\n        return productId\n    }\n    \n    fun getQuantity(): Int {\n        return quantity\n    }\n    \n    fun getPrice(): Double {\n        return price\n    }\n}\n\nclass Address(\n    private val name: String,\n    private val street: String,\n    private val city: String,\n    private val state: String,\n    private val country: String,\n    private val zipCode: String\n) {\n    fun getName(): String {\n        return name\n    }\n    \n    fun getStreet(): String {\n        return street\n    }\n    \n    fun getCity(): String {\n        return city\n    }\n    \n    fun getState(): String {\n        return state\n    }\n    \n    fun getCountry(): String {\n        return country\n    }\n    \n    fun getZipCode(): String {\n        return zipCode\n    }\n}\n\nclass Shipment(\n    private val orderId: String,\n    private val shipmentDate: Date\n) {\n    private var cost: Double = 0.0\n    \n    fun getOrderId(): String {\n        return orderId\n    }\n    \n    fun getShipmentDate(): Date {\n        return shipmentDate\n    }\n    \n    fun getCost(): Double {\n        return cost\n    }\n    \n    fun setCost(cost: Double) {\n        this.cost = cost\n    }\n}\n\nclass ShippingCost(\n    private val cost: Double\n) {\n    fun getCost(): Double {\n        return cost\n    }\n}\n\nclass ShipmentResult(\n    private val success: Boolean,\n    private val message: String,\n    private val shipment: Shipment?\n) {\n    fun isSuccess(): Boolean {\n        return success\n    }\n    \n    fun getMessage(): String {\n        return message\n    }\n    \n    fun getShipment(): Shipment? {\n        return shipment\n    }\n}\n\ninterface OrderRepository {\n    fun findById(id: String): Order?\n    fun update(order: Order)\n}\n\ninterface InventoryService {\n    fun isInStock(productId: String, quantity: Int): Boolean\n    fun reserve(productId: String, quantity: Int)\n    fun getProduct(productId: String): Product\n}\n\nclass Product(\n    private val id: String,\n    private val name: String,\n    private val weight: Double,\n    private val price: Double\n) {\n    fun getId(): String {\n        return id\n    }\n    \n    fun getName(): String {\n        return name\n    }\n    \n    fun getWeight(): Double {\n        return weight\n    }\n    \n    fun getPrice(): Double {\n        return price\n    }\n}\n\ninterface Logger {\n    fun log(message: String)\n}\n\nenum class OrderStatus {\n    CREATED, PAID, SHIPPED, DELIVERED, CANCELLED\n}\n\ninterface ShippingStrategy {\n    fun calculateCost(order: Order, weight: Double, distance: Double): ShippingCost\n}\n\nclass StandardShippingStrategy : ShippingStrategy {\n    override fun calculateCost(order: Order, weight: Double, distance: Double): ShippingCost {\n        val baseCost = 5.0\n        val weightCost = weight * 0.5\n        val distanceFactor = distance * 0.01\n        \n        return ShippingCost(baseCost + weightCost + distanceFactor)\n    }\n}\n\nclass ExpressShippingStrategy : ShippingStrategy {\n    override fun calculateCost(order: Order, weight: Double, distance: Double): ShippingCost {\n        val baseCost = 15.0\n        val weightCost = weight * 0.75\n        val distanceFactor = distance * 0.015\n        \n        return ShippingCost(baseCost + weightCost + distanceFactor)\n    }\n}\n\nclass OvernightShippingStrategy : ShippingStrategy {\n    override fun calculateCost(order: Order, weight: Double, distance: Double): ShippingCost {\n        val baseCost = 25.0\n        val weightCost = weight * 1.0\n        val distanceFactor = distance * 0.02\n        \n        return ShippingCost(baseCost + weightCost + distanceFactor)\n    }\n}\n\nclass InternationalShippingStrategy : ShippingStrategy {\n    override fun calculateCost(order: Order, weight: Double, distance: Double): ShippingCost {\n        val baseCost = 30.0\n        val weightCost = weight * 2.0\n        val distanceFactor = distance * 0.025\n        val customsFee = order.getTotalAmount() * 0.05 // 5% of order value\n        \n        return ShippingCost(baseCost + weightCost + distanceFactor + customsFee)\n    }\n}\n\nclass ShippingService(\n    private val orderRepository: OrderRepository,\n    private val inventoryService: InventoryService,\n    private val logger: Logger\n) {\n    private val shippingStrategies = HashMap<String, ShippingStrategy>()\n    \n    init {\n        initializeShippingStrategies()\n    }\n    \n    private fun initializeShippingStrategies() {\n        shippingStrategies[\"standard\"] = StandardShippingStrategy()\n        shippingStrategies[\"express\"] = ExpressShippingStrategy()\n        shippingStrategies[\"overnight\"] = OvernightShippingStrategy()\n        shippingStrategies[\"international\"] = InternationalShippingStrategy()\n    }\n    \n    fun registerShippingStrategy(method: String, strategy: ShippingStrategy) {\n        shippingStrategies[method] = strategy\n    }\n    \n    fun processShipment(orderId: String): ShipmentResult {\n        val order = orderRepository.findById(orderId)\n        \n        if (order == null) {\n            throw IllegalArgumentException(\"Order not found: $orderId\")\n        }\n        \n        if (order.getStatus() != OrderStatus.PAID) {\n            return ShipmentResult(false, \"Order is not paid yet\", null)\n        }\n        \n        for (item in order.getItems()) {\n            if (!inventoryService.isInStock(item.getProductId(), item.getQuantity())) {\n                return ShipmentResult(false, \"Product out of stock: ${item.getProductId()}\", null)\n            }\n        }\n        \n        val shipment = Shipment(orderId, Date())\n        val shippingCost = calculateShippingCost(order)\n        shipment.setCost(shippingCost.getCost())\n        \n        // Reserve inventory items\n        for (item in order.getItems()) {\n            inventoryService.reserve(item.getProductId(), item.getQuantity())\n        }\n        \n        // Update order status\n        order.setStatus(OrderStatus.SHIPPED)\n        orderRepository.update(order)\n        \n        logger.log(\"Order shipped: $orderId, cost: ${shippingCost.getCost()}\")\n        return ShipmentResult(true, \"Order shipped successfully\", shipment)\n    }\n    \n    private fun calculateShippingCost(order: Order): ShippingCost {\n        val shippingMethod = order.getShippingMethod()\n        val strategy = shippingStrategies[shippingMethod]\n        \n        if (strategy == null) {\n            // Default strategy if method not recognized\n            return ShippingCost(10.0)\n        }\n        \n        val totalWeight = calculateOrderWeight(order)\n        val destination = order.getShippingAddress()\n        val distance = calculateDistance(destination)\n        \n        return strategy.calculateCost(order, totalWeight, distance)\n    }\n    \n    private fun calculateOrderWeight(order: Order): Double {\n        var totalWeight = 0.0\n        for (item in order.getItems()) {\n            val product = inventoryService.getProduct(item.getProductId())\n            totalWeight += product.getWeight() * item.getQuantity()\n        }\n        return totalWeight\n    }\n    \n    private fun calculateDistance(destination: Address): Double {\n        // Simplified distance calculation. In a real system, this would use\n        // geographic coordinates or a distance service.\n        val warehouseAddress = Address(\"Warehouse\", \"123 Main St\", \"City\", \"State\", \"Country\", \"12345\")\n        \n        if (warehouseAddress.getCountry() == destination.getCountry()) {\n            if (warehouseAddress.getState() == destination.getState()) {\n                if (warehouseAddress.getCity() == destination.getCity()) {\n                    return 10.0 // Same city\n                }\n                return 50.0 // Same state, different city\n            }\n            return 200.0 // Same country, different state\n        }\n        return 1000.0 // International\n    }\n}",
      "level": "HARD",
      "language": "KOTLIN",
      "violation": "OCP",
      "description": "Shipping cost calculation system"
    },
    {
      "input": "public class Shape {\n    private string type;\n    \n    public Shape(string type) {\n        this.type = type;\n    }\n    \n    public string GetType() {\n        return type;\n    }\n}\n\npublic class Rectangle : Shape {\n    private double width;\n    private double height;\n    \n    public Rectangle(double width, double height) : base(\"rectangle\") {\n        this.width = width;\n        this.height = height;\n    }\n    \n    public double GetWidth() {\n        return width;\n    }\n    \n    public double GetHeight() {\n        return height;\n    }\n}\n\npublic class Circle : Shape {\n    private double radius;\n    \n    public Circle(double radius) : base(\"circle\") {\n        this.radius = radius;\n    }\n    \n    public double GetRadius() {\n        return radius;\n    }\n}\n\npublic class AreaCalculator {\n    public double CalculateArea(Shape shape) {\n        if (shape.GetType() == \"rectangle\") {\n            Rectangle rectangle = (Rectangle) shape;\n            return rectangle.GetWidth() * rectangle.GetHeight();\n        } else if (shape.GetType() == \"circle\") {\n            Circle circle = (Circle) shape;\n            return Math.PI * circle.GetRadius() * circle.GetRadius();\n        }\n        return 0;\n    }\n}",
      "output": "public abstract class Shape {\n    public abstract double CalculateArea();\n}\n\npublic class Rectangle : Shape {\n    private double width;\n    private double height;\n    \n    public Rectangle(double width, double height) {\n        this.width = width;\n        this.height = height;\n    }\n    \n    public override double CalculateArea() {\n        return width * height;\n    }\n}\n\npublic class Circle : Shape {\n    private double radius;\n    \n    public Circle(double radius) {\n        this.radius = radius;\n    }\n    \n    public override double CalculateArea() {\n        return Math.PI * radius * radius;\n    }\n}\n\npublic class AreaCalculator {\n    public double CalculateArea(Shape shape) {\n        return shape.CalculateArea();\n    }\n}",
      "level": "EASY",
      "language": "CSHARP",
      "violation": "OCP",
      "description": "Shape area calculation system"
    },
    {
      "input": "class Character\n{\n    private string type;\n\n    public Character(string type)\n    {\n        this.type = type;\n    }\n\n    public string GetType()\n    {\n        return type;\n    }\n}\n\nclass Warrior : Character\n{\n    private int strength;\n\n    public Warrior(int strength) : base(\"warrior\")\n    {\n        this.strength = strength;\n    }\n\n    public int GetStrength()\n    {\n        return strength;\n    }\n}\n\nclass Mage : Character\n{\n    private int mana;\n\n    public Mage(int mana) : base(\"mage\")\n    {\n        this.mana = mana;\n    }\n\n    public int GetMana()\n    {\n        return mana;\n    }\n}\n\nclass DamageCalculator\n{\n    public int CalculateDamage(Character character)\n    {\n        if (character.GetType() == \"warrior\")\n        {\n            Warrior warrior = (Warrior)character;\n            return warrior.GetStrength() * 2;\n        }\n        else if (character.GetType() == \"mage\")\n        {\n            Mage mage = (Mage)character;\n            return mage.GetMana() * 3;\n        }\n        return 0;\n    }\n}",
      "output": "abstract class Character\n{\n    public abstract int CalculateDamage();\n}\n\nclass Warrior : Character\n{\n    private int strength;\n\n    public Warrior(int strength)\n    {\n        this.strength = strength;\n    }\n\n    public override int CalculateDamage()\n    {\n        return strength * 2;\n    }\n}\n\nclass Mage : Character\n{\n    private int mana;\n\n    public Mage(int mana)\n    {\n        this.mana = mana;\n    }\n\n    public override int CalculateDamage()\n    {\n        return mana * 3;\n    }\n}\n\nclass DamageCalculator\n{\n    public int CalculateDamage(Character character)\n    {\n        return character.CalculateDamage();\n    }\n}",
      "level": "EASY",
      "language": "CSHARP",
      "violation": "OCP",
      "description": "Character damage calculation system"
    },
    {
      "input": "class Animal\n{\n    private string type;\n\n    public Animal(string type)\n    {\n        this.type = type;\n    }\n\n    public string GetType()\n    {\n        return type;\n    }\n}\n\nclass Dog : Animal\n{\n    public Dog() : base(\"dog\")\n    {\n    }\n}\n\nclass Cat : Animal\n{\n    public Cat() : base(\"cat\")\n    {\n    }\n}\n\nclass SoundMaker\n{\n    public string MakeSound(Animal animal)\n    {\n        if (animal.GetType() == \"dog\")\n        {\n            return \"Woof!\";\n        }\n        else if (animal.GetType() == \"cat\")\n        {\n            return \"Meow!\";\n        }\n        return \"...\";\n    }\n}",
      "output": "abstract class Animal\n{\n    public abstract string MakeSound();\n}\n\nclass Dog : Animal\n{\n    public override string MakeSound()\n    {\n        return \"Woof!\";\n    }\n}\n\nclass Cat : Animal\n{\n    public override string MakeSound()\n    {\n        return \"Meow!\";\n    }\n}\n\nclass SoundMaker\n{\n    public string MakeSound(Animal animal)\n    {\n        return animal.MakeSound();\n    }\n}",
      "level": "EASY",
      "language": "CSHARP",
      "violation": "OCP",
      "description": "Animal sound generation system"
    },
    {
      "input": "class Vehicle\n{\n    private string type;\n\n    public Vehicle(string type)\n    {\n        this.type = type;\n    }\n\n    public string GetType()\n    {\n        return type;\n    }\n}\n\nclass Car : Vehicle\n{\n    private int horsePower;\n\n    public Car(int horsePower) : base(\"car\")\n    {\n        this.horsePower = horsePower;\n    }\n\n    public int GetHorsePower()\n    {\n        return horsePower;\n    }\n}\n\nclass Bicycle : Vehicle\n{\n    private int gearCount;\n\n    public Bicycle(int gearCount) : base(\"bicycle\")\n    {\n        this.gearCount = gearCount;\n    }\n\n    public int GetGearCount()\n    {\n        return gearCount;\n    }\n}\n\nclass SpeedCalculator\n{\n    public double CalculateMaxSpeed(Vehicle vehicle)\n    {\n        if (vehicle.GetType() == \"car\")\n        {\n            Car car = (Car)vehicle;\n            return car.GetHorsePower() * 0.4;\n        }\n        else if (vehicle.GetType() == \"bicycle\")\n        {\n            Bicycle bicycle = (Bicycle)vehicle;\n            return bicycle.GetGearCount() * 5.0;\n        }\n        return 0;\n    }\n}",
      "output": "abstract class Vehicle\n{\n    public abstract double CalculateMaxSpeed();\n}\n\nclass Car : Vehicle\n{\n    private int horsePower;\n\n    public Car(int horsePower)\n    {\n        this.horsePower = horsePower;\n    }\n\n    public override double CalculateMaxSpeed()\n    {\n        return horsePower * 0.4;\n    }\n}\n\nclass Bicycle : Vehicle\n{\n    private int gearCount;\n\n    public Bicycle(int gearCount)\n    {\n        this.gearCount = gearCount;\n    }\n\n    public override double CalculateMaxSpeed()\n    {\n        return gearCount * 5.0;\n    }\n}\n\nclass SpeedCalculator\n{\n    public double CalculateMaxSpeed(Vehicle vehicle)\n    {\n        return vehicle.CalculateMaxSpeed();\n    }\n}",
      "level": "EASY",
      "language": "CSHARP",
      "violation": "OCP",
      "description": "Vehicle speed calculation system"
    },
    {
      "input": "public class PaymentProcessor {\n    public void ProcessPayment(string paymentType, double amount) {\n        switch (paymentType) {\n            case \"creditCard\":\n                ProcessCreditCardPayment(amount);\n                break;\n            case \"paypal\":\n                ProcessPaypalPayment(amount);\n                break;\n            case \"bankTransfer\":\n                ProcessBankTransferPayment(amount);\n                break;\n            default:\n                throw new ArgumentException(\"Unsupported payment type\");\n        }\n    }\n    \n    private void ProcessCreditCardPayment(double amount) {\n        Console.WriteLine($\"Processing credit card payment of ${amount}\");\n        Console.WriteLine(\"Validating credit card information\");\n        Console.WriteLine(\"Charging credit card\");\n        Console.WriteLine(\"Recording the credit card transaction\");\n    }\n    \n    private void ProcessPaypalPayment(double amount) {\n        Console.WriteLine($\"Processing PayPal payment of ${amount}\");\n        Console.WriteLine(\"Redirecting user to PayPal\");\n        Console.WriteLine(\"Confirming PayPal payment\");\n        Console.WriteLine(\"Recording the PayPal transaction\");\n    }\n    \n    private void ProcessBankTransferPayment(double amount) {\n        Console.WriteLine($\"Processing bank transfer of ${amount}\");\n        Console.WriteLine(\"Generating bank transfer instructions\");\n        Console.WriteLine(\"Sending transfer confirmation email\");\n        Console.WriteLine(\"Recording the bank transfer transaction\");\n    }\n}",
      "output": "public interface IPaymentMethod {\n    void ProcessPayment(double amount);\n}\n\npublic class CreditCardPayment : IPaymentMethod {\n    public void ProcessPayment(double amount) {\n        Console.WriteLine($\"Processing credit card payment of ${amount}\");\n        Console.WriteLine(\"Validating credit card information\");\n        Console.WriteLine(\"Charging credit card\");\n        Console.WriteLine(\"Recording the credit card transaction\");\n    }\n}\n\npublic class PaypalPayment : IPaymentMethod {\n    public void ProcessPayment(double amount) {\n        Console.WriteLine($\"Processing PayPal payment of ${amount}\");\n        Console.WriteLine(\"Redirecting user to PayPal\");\n        Console.WriteLine(\"Confirming PayPal payment\");\n        Console.WriteLine(\"Recording the PayPal transaction\");\n    }\n}\n\npublic class BankTransferPayment : IPaymentMethod {\n    public void ProcessPayment(double amount) {\n        Console.WriteLine($\"Processing bank transfer of ${amount}\");\n        Console.WriteLine(\"Generating bank transfer instructions\");\n        Console.WriteLine(\"Sending transfer confirmation email\");\n        Console.WriteLine(\"Recording the bank transfer transaction\");\n    }\n}\n\npublic class PaymentProcessor {\n    public void ProcessPayment(IPaymentMethod paymentMethod, double amount) {\n        paymentMethod.ProcessPayment(amount);\n    }\n}",
      "level": "MODERATE",
      "language": "CSHARP",
      "violation": "OCP",
      "description": "Payment processing system"
    },
    {
      "input": "class Customer\n{\n    private string name;\n    private string email;\n    \n    public Customer(string name, string email)\n    {\n        this.name = name;\n        this.email = email;\n    }\n    \n    public string GetName()\n    {\n        return name;\n    }\n    \n    public string GetEmail()\n    {\n        return email;\n    }\n}\n\ninterface ICustomerRepository\n{\n    void Save(Customer customer);\n    Customer FindByEmail(string email);\n}\n\ninterface IEmailService\n{\n    void SendEmail(string to, string subject, string body);\n}\n\nclass CustomerService\n{\n    private ICustomerRepository repository;\n    private IEmailService emailService;\n    \n    public CustomerService(ICustomerRepository repository, IEmailService emailService)\n    {\n        this.repository = repository;\n        this.emailService = emailService;\n    }\n    \n    public Customer RegisterCustomer(string name, string email, string customerType)\n    {\n        ValidateCustomerData(name, email);\n        \n        Customer customer = new Customer(name, email);\n        repository.Save(customer);\n        \n        SendWelcomeEmail(customer, customerType);\n        \n        return customer;\n    }\n    \n    private void ValidateCustomerData(string name, string email)\n    {\n        if (string.IsNullOrWhiteSpace(name))\n        {\n            throw new ArgumentException(\"Name cannot be empty\");\n        }\n        \n        if (string.IsNullOrEmpty(email) || !System.Text.RegularExpressions.Regex.IsMatch(email, @\"^[A-Za-z0-9+_.-]+@(.+)$\"))\n        {\n            throw new ArgumentException(\"Invalid email format\");\n        }\n        \n        if (repository.FindByEmail(email) != null)\n        {\n            throw new ArgumentException(\"Email already registered\");\n        }\n    }\n    \n    private void SendWelcomeEmail(Customer customer, string customerType)\n    {\n        string subject = \"Welcome to Our Service\";\n        string body;\n        \n        if (customerType.Equals(\"standard\"))\n        {\n            body = \"Dear \" + customer.GetName() + \",\\n\\n\" +\n                  \"Welcome to our service! We're excited to have you join us.\\n\\n\" +\n                  \"Your account has been created successfully. You can now access all standard features.\\n\\n\" +\n                  \"Best regards,\\n\" +\n                  \"The Service Team\";\n        }\n        else if (customerType.Equals(\"premium\"))\n        {\n            body = \"Dear \" + customer.GetName() + \",\\n\\n\" +\n                  \"Welcome to our PREMIUM service! We're thrilled to have you as a premium member.\\n\\n\" +\n                  \"Your premium account has been activated with all exclusive features.\\n\" +\n                  \"Our premium support team is available 24/7 to assist you.\\n\\n\" +\n                  \"Best regards,\\n\" +\n                  \"The Premium Service Team\";\n        }\n        else if (customerType.Equals(\"trial\"))\n        {\n            body = \"Dear \" + customer.GetName() + \",\\n\\n\" +\n                  \"Thank you for trying our service! Your 30-day trial has begun.\\n\\n\" +\n                  \"Explore all the features we offer during your trial period.\\n\" +\n                  \"We'll send you a reminder before your trial expires.\\n\\n\" +\n                  \"Best regards,\\n\" +\n                  \"The Service Team\";\n        }\n        else\n        {\n            throw new ArgumentException(\"Unsupported customer type: \" + customerType);\n        }\n        \n        emailService.SendEmail(customer.GetEmail(), subject, body);\n    }\n}",
      "output": "using System;\nusing System.Collections.Generic;\nusing System.Text.RegularExpressions;\n\nclass Customer\n{\n    private string name;\n    private string email;\n    \n    public Customer(string name, string email)\n    {\n        this.name = name;\n        this.email = email;\n    }\n    \n    public string GetName()\n    {\n        return name;\n    }\n    \n    public string GetEmail()\n    {\n        return email;\n    }\n}\n\ninterface ICustomerRepository\n{\n    void Save(Customer customer);\n    Customer FindByEmail(string email);\n}\n\ninterface IEmailService\n{\n    void SendEmail(string to, string subject, string body);\n}\n\ninterface IWelcomeEmailStrategy\n{\n    string CreateEmailBody(Customer customer);\n}\n\nclass StandardWelcomeEmailStrategy : IWelcomeEmailStrategy\n{\n    public string CreateEmailBody(Customer customer)\n    {\n        return \"Dear \" + customer.GetName() + \",\\n\\n\" +\n              \"Welcome to our service! We're excited to have you join us.\\n\\n\" +\n              \"Your account has been created successfully. You can now access all standard features.\\n\\n\" +\n              \"Best regards,\\n\" +\n              \"The Service Team\";\n    }\n}\n\nclass PremiumWelcomeEmailStrategy : IWelcomeEmailStrategy\n{\n    public string CreateEmailBody(Customer customer)\n    {\n        return \"Dear \" + customer.GetName() + \",\\n\\n\" +\n              \"Welcome to our PREMIUM service! We're thrilled to have you as a premium member.\\n\\n\" +\n              \"Your premium account has been activated with all exclusive features.\\n\" +\n              \"Our premium support team is available 24/7 to assist you.\\n\\n\" +\n              \"Best regards,\\n\" +\n              \"The Premium Service Team\";\n    }\n}\n\nclass TrialWelcomeEmailStrategy : IWelcomeEmailStrategy\n{\n    public string CreateEmailBody(Customer customer)\n    {\n        return \"Dear \" + customer.GetName() + \",\\n\\n\" +\n              \"Thank you for trying our service! Your 30-day trial has begun.\\n\\n\" +\n              \"Explore all the features we offer during your trial period.\\n\" +\n              \"We'll send you a reminder before your trial expires.\\n\\n\" +\n              \"Best regards,\\n\" +\n              \"The Service Team\";\n    }\n}\n\nclass CustomerService\n{\n    private ICustomerRepository repository;\n    private IEmailService emailService;\n    private Dictionary<string, IWelcomeEmailStrategy> emailStrategies;\n    \n    public CustomerService(ICustomerRepository repository, IEmailService emailService)\n    {\n        this.repository = repository;\n        this.emailService = emailService;\n        InitializeEmailStrategies();\n    }\n    \n    private void InitializeEmailStrategies()\n    {\n        emailStrategies = new Dictionary<string, IWelcomeEmailStrategy>();\n        emailStrategies[\"standard\"] = new StandardWelcomeEmailStrategy();\n        emailStrategies[\"premium\"] = new PremiumWelcomeEmailStrategy();\n        emailStrategies[\"trial\"] = new TrialWelcomeEmailStrategy();\n    }\n    \n    public void RegisterEmailStrategy(string customerType, IWelcomeEmailStrategy strategy)\n    {\n        emailStrategies[customerType] = strategy;\n    }\n    \n    public Customer RegisterCustomer(string name, string email, string customerType)\n    {\n        ValidateCustomerData(name, email);\n        \n        Customer customer = new Customer(name, email);\n        repository.Save(customer);\n        \n        // Send welcome email based on customer type\n        SendWelcomeEmail(customer, customerType);\n        \n        return customer;\n    }\n    \n    private void ValidateCustomerData(string name, string email)\n    {\n        if (string.IsNullOrWhiteSpace(name))\n        {\n            throw new ArgumentException(\"Name cannot be empty\");\n        }\n        \n        if (string.IsNullOrEmpty(email) || !Regex.IsMatch(email, @\"^[A-Za-z0-9+_.-]+@(.+)$\"))\n        {\n            throw new ArgumentException(\"Invalid email format\");\n        }\n        \n        if (repository.FindByEmail(email) != null)\n        {\n            throw new ArgumentException(\"Email already registered\");\n        }\n    }\n    \n    private void SendWelcomeEmail(Customer customer, string customerType)\n    {\n        if (!emailStrategies.TryGetValue(customerType, out IWelcomeEmailStrategy strategy))\n        {\n            throw new ArgumentException(\"Unsupported customer type: \" + customerType);\n        }\n        \n        string subject = \"Welcome to Our Service\";\n        string body = strategy.CreateEmailBody(customer);\n        \n        emailService.SendEmail(customer.GetEmail(), subject, body);\n    }\n}",
      "level": "MODERATE",
      "language": "CSHARP",
      "violation": "OCP",
      "description": "Customer registration email system"
    },
    {
      "input": "using System;\nusing System.Collections.Generic;\n\nclass Document\n{\n    private string id;\n    private string title;\n    private string content;\n    private User creator;\n    private HashSet<User> sharedUsers;\n    \n    public Document(string title, string content, User creator)\n    {\n        this.id = Guid.NewGuid().ToString();\n        this.title = title;\n        this.content = content;\n        this.creator = creator;\n        this.sharedUsers = new HashSet<User>();\n    }\n    \n    public string GetId()\n    {\n        return id;\n    }\n    \n    public string GetTitle()\n    {\n        return title;\n    }\n    \n    public string GetContent()\n    {\n        return content;\n    }\n    \n    public User GetCreator()\n    {\n        return creator;\n    }\n    \n    public HashSet<User> GetSharedUsers()\n    {\n        return sharedUsers;\n    }\n    \n    public void AddSharedUser(User user)\n    {\n        sharedUsers.Add(user);\n    }\n}\n\nclass User\n{\n    private string id;\n    private string username;\n    private string contactInfo;\n    private string preferredContactMethod;\n    \n    public User(string username, string contactInfo, string preferredContactMethod)\n    {\n        this.id = Guid.NewGuid().ToString();\n        this.username = username;\n        this.contactInfo = contactInfo;\n        this.preferredContactMethod = preferredContactMethod;\n    }\n    \n    public string GetId()\n    {\n        return id;\n    }\n    \n    public string GetUsername()\n    {\n        return username;\n    }\n    \n    public string GetContactInfo()\n    {\n        return contactInfo;\n    }\n    \n    public string GetPreferredContactMethod()\n    {\n        return preferredContactMethod;\n    }\n}\n\ninterface IDocumentRepository\n{\n    void Save(Document document);\n    void Update(Document document);\n    Document FindById(string id);\n}\n\ninterface ISecurityService\n{\n    bool CanShareDocument(Document document, User user);\n}\n\ninterface ILogger\n{\n    void Log(string message);\n}\n\nclass DocumentService\n{\n    private IDocumentRepository repository;\n    private ISecurityService securityService;\n    private ILogger logger;\n    \n    public DocumentService(IDocumentRepository repository, ISecurityService securityService, ILogger logger)\n    {\n        this.repository = repository;\n        this.securityService = securityService;\n        this.logger = logger;\n    }\n    \n    public Document CreateDocument(string title, string content, User creator)\n    {\n        Document document = new Document(title, content, creator);\n        repository.Save(document);\n        logger.Log(\"Document created: \" + document.GetId());\n        return document;\n    }\n    \n    public void ShareDocument(Document document, User recipient, User sharedBy)\n    {\n        ValidateSharingPermissions(document, sharedBy);\n        document.AddSharedUser(recipient);\n        repository.Update(document);\n        logger.Log(\"Document \" + document.GetId() + \" shared with \" + recipient.GetUsername());\n        NotifyUser(document, recipient, sharedBy);\n    }\n    \n    private void ValidateSharingPermissions(Document document, User user)\n    {\n        if (!securityService.CanShareDocument(document, user))\n        {\n            throw new SecurityException(\"User does not have permission to share this document\");\n        }\n    }\n    \n    private void NotifyUser(Document document, User recipient, User sharedBy)\n    {\n        string recipientContact = recipient.GetContactInfo();\n        string message = \"Document '\" + document.GetTitle() + \"' has been shared with you by \" + sharedBy.GetUsername();\n        \n        string contactType = recipient.GetPreferredContactMethod();\n        \n        if (contactType.Equals(\"email\"))\n        {\n            SendEmail(recipientContact, \"Document Shared\", message);\n        }\n        else if (contactType.Equals(\"sms\"))\n        {\n            SendSMS(recipientContact, message);\n        }\n        else if (contactType.Equals(\"push\"))\n        {\n            SendPushNotification(recipientContact, \"Document Shared\", message);\n        }\n        else if (contactType.Equals(\"slack\"))\n        {\n            SendSlackMessage(recipientContact, message);\n        }\n        else\n        {\n            logger.Log(\"Unknown contact method: \" + contactType);\n        }\n    }\n    \n    private void SendEmail(string email, string subject, string message)\n    {\n        Console.WriteLine(\"Sending email to \" + email);\n        Console.WriteLine(\"Subject: \" + subject);\n        Console.WriteLine(\"Message: \" + message);\n    }\n    \n    private void SendSMS(string phoneNumber, string message)\n    {\n        Console.WriteLine(\"Sending SMS to \" + phoneNumber);\n        Console.WriteLine(\"Message: \" + message);\n    }\n    \n    private void SendPushNotification(string deviceId, string title, string message)\n    {\n        Console.WriteLine(\"Sending push notification to device \" + deviceId);\n        Console.WriteLine(\"Title: \" + title);\n        Console.WriteLine(\"Message: \" + message);\n    }\n    \n    private void SendSlackMessage(string slackUserId, string message)\n    {\n        Console.WriteLine(\"Sending Slack message to \" + slackUserId);\n        Console.WriteLine(\"Message: \" + message);\n    }\n}\n\nclass SecurityException : Exception\n{\n    public SecurityException(string message) : base(message)\n    {\n    }\n}",
      "output": "using System;\nusing System.Collections.Generic;\n\nclass Document\n{\n    private string id;\n    private string title;\n    private string content;\n    private User creator;\n    private HashSet<User> sharedUsers;\n    \n    public Document(string title, string content, User creator)\n    {\n        this.id = Guid.NewGuid().ToString();\n        this.title = title;\n        this.content = content;\n        this.creator = creator;\n        this.sharedUsers = new HashSet<User>();\n    }\n    \n    public string GetId()\n    {\n        return id;\n    }\n    \n    public string GetTitle()\n    {\n        return title;\n    }\n    \n    public string GetContent()\n    {\n        return content;\n    }\n    \n    public User GetCreator()\n    {\n        return creator;\n    }\n    \n    public HashSet<User> GetSharedUsers()\n    {\n        return sharedUsers;\n    }\n    \n    public void AddSharedUser(User user)\n    {\n        sharedUsers.Add(user);\n    }\n}\n\nclass User\n{\n    private string id;\n    private string username;\n    private string contactInfo;\n    private string preferredContactMethod;\n    \n    public User(string username, string contactInfo, string preferredContactMethod)\n    {\n        this.id = Guid.NewGuid().ToString();\n        this.username = username;\n        this.contactInfo = contactInfo;\n        this.preferredContactMethod = preferredContactMethod;\n    }\n    \n    public string GetId()\n    {\n        return id;\n    }\n    \n    public string GetUsername()\n    {\n        return username;\n    }\n    \n    public string GetContactInfo()\n    {\n        return contactInfo;\n    }\n    \n    public string GetPreferredContactMethod()\n    {\n        return preferredContactMethod;\n    }\n}\n\ninterface IDocumentRepository\n{\n    void Save(Document document);\n    void Update(Document document);\n    Document FindById(string id);\n}\n\ninterface ISecurityService\n{\n    bool CanShareDocument(Document document, User user);\n}\n\ninterface ILogger\n{\n    void Log(string message);\n}\n\ninterface INotificationStrategy\n{\n    void SendNotification(string contactInfo, string subject, string message);\n}\n\nclass EmailNotificationStrategy : INotificationStrategy\n{\n    public void SendNotification(string email, string subject, string message)\n    {\n        Console.WriteLine(\"Sending email to \" + email);\n        Console.WriteLine(\"Subject: \" + subject);\n        Console.WriteLine(\"Message: \" + message);\n        // Email sending logic would go here\n    }\n}\n\nclass SMSNotificationStrategy : INotificationStrategy\n{\n    public void SendNotification(string phoneNumber, string subject, string message)\n    {\n        Console.WriteLine(\"Sending SMS to \" + phoneNumber);\n        Console.WriteLine(\"Message: \" + message);\n        // SMS sending logic would go here\n    }\n}\n\nclass PushNotificationStrategy : INotificationStrategy\n{\n    public void SendNotification(string deviceId, string subject, string message)\n    {\n        Console.WriteLine(\"Sending push notification to device \" + deviceId);\n        Console.WriteLine(\"Title: \" + subject);\n        Console.WriteLine(\"Message: \" + message);\n        // Push notification logic would go here\n    }\n}\n\nclass SlackNotificationStrategy : INotificationStrategy\n{\n    public void SendNotification(string slackUserId, string subject, string message)\n    {\n        Console.WriteLine(\"Sending Slack message to \" + slackUserId);\n        Console.WriteLine(\"Message: \" + message);\n        // Slack messaging logic would go here\n    }\n}\n\nclass DocumentService\n{\n    private IDocumentRepository repository;\n    private ISecurityService securityService;\n    private ILogger logger;\n    private Dictionary<string, INotificationStrategy> notificationStrategies;\n    \n    public DocumentService(IDocumentRepository repository, ISecurityService securityService, ILogger logger)\n    {\n        this.repository = repository;\n        this.securityService = securityService;\n        this.logger = logger;\n        InitializeNotificationStrategies();\n    }\n    \n    private void InitializeNotificationStrategies()\n    {\n        notificationStrategies = new Dictionary<string, INotificationStrategy>();\n        notificationStrategies[\"email\"] = new EmailNotificationStrategy();\n        notificationStrategies[\"sms\"] = new SMSNotificationStrategy();\n        notificationStrategies[\"push\"] = new PushNotificationStrategy();\n        notificationStrategies[\"slack\"] = new SlackNotificationStrategy();\n    }\n    \n    public void RegisterNotificationStrategy(string type, INotificationStrategy strategy)\n    {\n        notificationStrategies[type] = strategy;\n    }\n    \n    public Document CreateDocument(string title, string content, User creator)\n    {\n        Document document = new Document(title, content, creator);\n        repository.Save(document);\n        logger.Log(\"Document created: \" + document.GetId());\n        return document;\n    }\n    \n    public void ShareDocument(Document document, User recipient, User sharedBy)\n    {\n        ValidateSharingPermissions(document, sharedBy);\n        document.AddSharedUser(recipient);\n        repository.Update(document);\n        logger.Log(\"Document \" + document.GetId() + \" shared with \" + recipient.GetUsername());\n        NotifyUser(document, recipient, sharedBy);\n    }\n    \n    private void ValidateSharingPermissions(Document document, User user)\n    {\n        if (!securityService.CanShareDocument(document, user))\n        {\n            throw new SecurityException(\"User does not have permission to share this document\");\n        }\n    }\n    \n    private void NotifyUser(Document document, User recipient, User sharedBy)\n    {\n        string recipientContact = recipient.GetContactInfo();\n        string message = \"Document '\" + document.GetTitle() + \"' has been shared with you by \" + sharedBy.GetUsername();\n        \n        // Notification logic based on recipient's preferred contact method\n        string contactType = recipient.GetPreferredContactMethod();\n        \n        if (notificationStrategies.TryGetValue(contactType, out INotificationStrategy strategy))\n        {\n            strategy.SendNotification(recipientContact, \"Document Shared\", message);\n        }\n        else\n        {\n            logger.Log(\"Unknown contact method: \" + contactType);\n        }\n    }\n}\n\nclass SecurityException : Exception\n{\n    public SecurityException(string message) : base(message)\n    {\n    }\n}",
      "level": "MODERATE",
      "language": "CSHARP",
      "violation": "OCP",

      "description": "Document sharing notification system"
    },
    {
      "input": "class Report\n{\n    private string id;\n    private string title;\n    \n    public Report(string id, string title)\n    {\n        this.id = id;\n        this.title = title;\n    }\n    \n    public string GetId() { return id; }\n    public string GetTitle() { return title; }\n}\n\nclass ReportData\n{\n}\n\nclass PdfDocument\n{\n    public byte[] Generate() { return new byte[0]; }\n}\n\nclass ExcelDocument\n{\n    public byte[] Generate() { return new byte[0]; }\n}\n\nclass ExportResult\n{\n    private bool success;\n    private string message;\n    private string outputPath;\n    \n    public ExportResult(bool success, string message, string outputPath)\n    {\n        this.success = success;\n        this.message = message;\n        this.outputPath = outputPath;\n    }\n}\n\ninterface IDataSource\n{\n    Report GetReport(string reportId);\n    ReportData GetReportData(string reportId);\n}\n\ninterface IFileSystem\n{\n    bool WriteFile(string path, byte[] data);\n}\n\nclass ReportExporter\n{\n    private IDataSource dataSource;\n    private IFileSystem fileSystem;\n    \n    public ReportExporter(IDataSource dataSource, IFileSystem fileSystem)\n    {\n        this.dataSource = dataSource;\n        this.fileSystem = fileSystem;\n    }\n    \n    public ExportResult ExportReport(string reportId, string exportFormat, string destination)\n    {\n        Report report = dataSource.GetReport(reportId);\n        \n        if (report == null)\n        {\n            return new ExportResult(false, \"Report not found\", null);\n        }\n        \n        byte[] reportData = GenerateReportData(report, exportFormat);\n        if (reportData == null)\n        {\n            return new ExportResult(false, \"Failed to generate report\", null);\n        }\n        \n        string fileName = report.GetTitle() + GetFileExtension(exportFormat);\n        fileSystem.WriteFile(destination + \"/\" + fileName, reportData);\n        return new ExportResult(true, \"Report exported successfully\", destination + \"/\" + fileName);\n    }\n    \n    private byte[] GenerateReportData(Report report, string exportFormat)\n    {\n        try\n        {\n            ReportData data = dataSource.GetReportData(report.GetId());\n            \n            if (exportFormat.Equals(\"pdf\"))\n            {\n                PdfDocument document = new PdfDocument();\n                return document.Generate();\n                \n            }\n            else if (exportFormat.Equals(\"excel\"))\n            {\n                ExcelDocument document = new ExcelDocument();\n                return document.Generate();\n                \n            }\n            else if (exportFormat.Equals(\"html\"))\n            {\n                string html = \"\";\n                return System.Text.Encoding.UTF8.GetBytes(html);\n                \n            }\n            else if (exportFormat.Equals(\"csv\"))\n            {\n                string csv = \"\";\n                return System.Text.Encoding.UTF8.GetBytes(csv);\n            }\n            \n        }\n        catch (Exception e)\n        {\n            return null;\n        }\n        return null;\n    }\n    \n    private string GetFileExtension(string format)\n    {\n        if (format.Equals(\"pdf\")) return \".pdf\";\n        else if (format.Equals(\"excel\")) return \".xlsx\";\n        else if (format.Equals(\"html\")) return \".html\";\n        else if (format.Equals(\"csv\")) return \".csv\";\n        else return \".txt\";\n    }\n}",
      "output": "using System;\nusing System.Collections.Generic;\nusing System.Text;\n\nclass Report\n{\n    private string id;\n    private string title;\n    \n    public Report(string id, string title)\n    {\n        this.id = id;\n        this.title = title;\n    }\n    \n    public string GetId() { return id; }\n    public string GetTitle() { return title; }\n}\n\nclass ReportData\n{\n}\n\nclass PdfDocument\n{\n    public byte[] Generate() { return new byte[0]; }\n}\n\nclass ExcelDocument\n{\n    public byte[] Generate() { return new byte[0]; }\n}\n\nclass ExportResult\n{\n    private bool success;\n    private string message;\n    private string outputPath;\n    \n    public ExportResult(bool success, string message, string outputPath)\n    {\n        this.success = success;\n        this.message = message;\n        this.outputPath = outputPath;\n    }\n}\n\ninterface IDataSource\n{\n    Report GetReport(string reportId);\n    ReportData GetReportData(string reportId);\n}\n\ninterface IFileSystem\n{\n    bool WriteFile(string path, byte[] data);\n}\n\ninterface IExportFormatStrategy\n{\n    byte[] GenerateReport(Report report, ReportData data);\n    string GetFileExtension();\n}\n\nclass PdfExportStrategy : IExportFormatStrategy\n{\n    public byte[] GenerateReport(Report report, ReportData data)\n    {\n        PdfDocument document = new PdfDocument();\n        return document.Generate();\n    }\n    \n    public string GetFileExtension()\n    {\n        return \".pdf\";\n    }\n}\n\nclass ExcelExportStrategy : IExportFormatStrategy\n{\n    public byte[] GenerateReport(Report report, ReportData data)\n    {\n        ExcelDocument document = new ExcelDocument();\n        return document.Generate();\n    }\n    \n    public string GetFileExtension()\n    {\n        return \".xlsx\";\n    }\n}\n\nclass HtmlExportStrategy : IExportFormatStrategy\n{\n    public byte[] GenerateReport(Report report, ReportData data)\n    {\n        string html = \"\";\n        return Encoding.UTF8.GetBytes(html);\n    }\n    \n    public string GetFileExtension()\n    {\n        return \".html\";\n    }\n}\n\nclass CsvExportStrategy : IExportFormatStrategy\n{\n    public byte[] GenerateReport(Report report, ReportData data)\n    {\n        string csv = \"\";\n        return Encoding.UTF8.GetBytes(csv);\n    }\n    \n    public string GetFileExtension()\n    {\n        return \".csv\";\n    }\n}\n\nclass ReportExporter\n{\n    private IDataSource dataSource;\n    private IFileSystem fileSystem;\n    private Dictionary<string, IExportFormatStrategy> exportStrategies;\n    \n    public ReportExporter(IDataSource dataSource, IFileSystem fileSystem)\n    {\n        this.dataSource = dataSource;\n        this.fileSystem = fileSystem;\n        InitializeExportStrategies();\n    }\n    \n    private void InitializeExportStrategies()\n    {\n        exportStrategies = new Dictionary<string, IExportFormatStrategy>();\n        exportStrategies[\"pdf\"] = new PdfExportStrategy();\n        exportStrategies[\"excel\"] = new ExcelExportStrategy();\n        exportStrategies[\"html\"] = new HtmlExportStrategy();\n        exportStrategies[\"csv\"] = new CsvExportStrategy();\n    }\n    \n    public void RegisterExportStrategy(string format, IExportFormatStrategy strategy)\n    {\n        exportStrategies[format] = strategy;\n    }\n    \n    public ExportResult ExportReport(string reportId, string exportFormat, string destination)\n    {\n        Report report = dataSource.GetReport(reportId);\n        \n        if (report == null)\n        {\n            return new ExportResult(false, \"Report not found\", null);\n        }\n        \n        byte[] reportData = GenerateReportData(report, exportFormat);\n        if (reportData == null)\n        {\n            return new ExportResult(false, \"Failed to generate report\", null);\n        }\n        \n        string fileName = report.GetTitle() + GetFileExtension(exportFormat);\n        fileSystem.WriteFile(destination + \"/\" + fileName, reportData);\n        return new ExportResult(true, \"Report exported successfully\", destination + \"/\" + fileName);\n    }\n    \n    private byte[] GenerateReportData(Report report, string exportFormat)\n    {\n        try\n        {\n            ReportData data = dataSource.GetReportData(report.GetId());\n            \n            if (exportStrategies.TryGetValue(exportFormat, out IExportFormatStrategy strategy))\n            {\n                return strategy.GenerateReport(report, data);\n            }\n        }\n        catch (Exception)\n        {\n            return null;\n        }\n        return null;\n    }\n    \n    private string GetFileExtension(string format)\n    {\n        if (exportStrategies.TryGetValue(format, out IExportFormatStrategy strategy))\n        {\n            return strategy.GetFileExtension();\n        }\n        return \".txt\";\n    }\n}",
      "level": "MODERATE",
      "language": "CSHARP",
      "violation": "OCP",
      "description": "Report export format system"
    },
    {
      "input": "using System;\nusing System.Collections.Generic;\nusing System.Globalization;\nusing System.Linq;\nusing System.Text;\n\npublic class SalesData\n{\n    private List<Sale> sales;\n    private string companyName;\n    private string reportingPeriod;\n    \n    public SalesData(List<Sale> sales, string companyName, string reportingPeriod)\n    {\n        this.sales = sales;\n        this.companyName = companyName;\n        this.reportingPeriod = reportingPeriod;\n    }\n    \n    public List<Sale> GetSales() => sales.ToList();\n    \n    public string GetCompanyName() => companyName;\n    \n    public string GetReportingPeriod() => reportingPeriod;\n    \n    public void AddSale(Sale sale)\n    {\n        sales.Add(sale);\n    }\n    \n    public List<Sale> GetSalesByRegion(string region)\n    {\n        return sales.Where(sale => sale.Region == region).ToList();\n    }\n    \n    public decimal GetTotalSales()\n    {\n        return sales.Sum(sale => sale.GetNetAmount());\n    }\n}\n\npublic class Sale\n{\n    public string ProductName { get; }\n    public string ProductCategory { get; }\n    public decimal Amount { get; }\n    public int Quantity { get; }\n    public DateTime Date { get; }\n    public string Region { get; }\n    public string SalesPerson { get; }\n    public string CustomerId { get; }\n    public decimal Discount { get; }\n    \n    public Sale(string productName, string productCategory, decimal amount, int quantity,\n                DateTime date, string region, string salesPerson, string customerId, decimal discount)\n    {\n        ProductName = productName;\n        ProductCategory = productCategory;\n        Amount = amount;\n        Quantity = quantity;\n        Date = date;\n        Region = region;\n        SalesPerson = salesPerson;\n        CustomerId = customerId;\n        Discount = discount;\n    }\n    \n    public string GetProductName() => ProductName;\n    \n    public string GetProductCategory() => ProductCategory;\n    \n    public decimal GetAmount() => Amount;\n    \n    public int GetQuantity() => Quantity;\n    \n    public DateTime GetDate() => Date;\n    \n    public string GetRegion() => Region;\n    \n    public string GetSalesPerson() => SalesPerson;\n    \n    public string GetCustomerId() => CustomerId;\n    \n    public decimal GetDiscount() => Discount;\n    \n    public decimal GetNetAmount() => Amount - Discount;\n}\n\npublic class ReportGenerator\n{\n    private readonly string currencyFormat = \"C2\";\n    private readonly string dateFormat = \"yyyy-MM-dd\";\n    \n    public string GenerateReport(string reportType, SalesData data)\n    {\n        var report = new StringBuilder();\n        \n        // Add header\n        report.AppendLine(\"===================================\");\n        report.AppendLine($\"    {data.GetCompanyName()}\");\n        report.AppendLine($\"  Reporting Period: {data.GetReportingPeriod()}\");\n        report.AppendLine(\"===================================\");\n        report.AppendLine();\n        \n        switch (reportType.ToLower())\n        {\n            case \"daily\":\n                report.AppendLine(\"DAILY SALES REPORT\");\n                report.AppendLine(\"===================\");\n                report.AppendLine();\n                \n                var dailySales = new Dictionary<string, decimal>();\n                var dailyQuantities = new Dictionary<string, int>();\n                \n                foreach (var sale in data.GetSales())\n                {\n                    var dateStr = sale.GetDate().ToString(dateFormat);\n                    if (!dailySales.ContainsKey(dateStr))\n                    {\n                        dailySales[dateStr] = 0;\n                        dailyQuantities[dateStr] = 0;\n                    }\n                    dailySales[dateStr] += sale.GetNetAmount();\n                    dailyQuantities[dateStr] += sale.GetQuantity();\n                }\n                \n                foreach (var kvp in dailySales.OrderBy(x => x.Key))\n                {\n                    var dateStr = kvp.Key;\n                    var salesAmount = kvp.Value;\n                    var unitsAmount = dailyQuantities[dateStr];\n                    report.AppendLine($\"Date: {dateStr}, Total Sales: {salesAmount.ToString(currencyFormat)}, Units Sold: {unitsAmount}\");\n                }\n                \n                var totalSales = dailySales.Values.Sum();\n                var totalUnits = dailyQuantities.Values.Sum();\n                var avgDailySales = dailySales.Count > 0 ? totalSales / dailySales.Count : 0;\n                \n                report.AppendLine();\n                report.AppendLine($\"Grand Total: {totalSales.ToString(currencyFormat)}\");\n                report.AppendLine($\"Total Units: {totalUnits}\");\n                report.AppendLine($\"Average Daily Sales: {avgDailySales.ToString(currencyFormat)}\");\n                break;\n                \n            case \"product\":\n                report.AppendLine(\"PRODUCT SALES REPORT\");\n                report.AppendLine(\"====================\");\n                report.AppendLine();\n                \n                var productSales = new Dictionary<string, decimal>();\n                var productQuantities = new Dictionary<string, int>();\n                var productCategories = new Dictionary<string, string>();\n                \n                foreach (var sale in data.GetSales())\n                {\n                    var product = sale.GetProductName();\n                    if (!productSales.ContainsKey(product))\n                    {\n                        productSales[product] = 0;\n                        productQuantities[product] = 0;\n                    }\n                    productSales[product] += sale.GetNetAmount();\n                    productQuantities[product] += sale.GetQuantity();\n                    productCategories[product] = sale.GetProductCategory();\n                }\n                \n                var sortedProducts = productSales.OrderByDescending(x => x.Value);\n                \n                foreach (var kvp in sortedProducts)\n                {\n                    var product = kvp.Key;\n                    var salesAmount = kvp.Value;\n                    var unitsAmount = productQuantities[product];\n                    var category = productCategories[product];\n                    var avgPrice = unitsAmount > 0 ? salesAmount / unitsAmount : 0;\n                    \n                    report.AppendLine($\"Product: {product} (Category: {category})\");\n                    report.AppendLine($\"  Sales: {salesAmount.ToString(currencyFormat)}, Units: {unitsAmount}, Avg Price: {avgPrice.ToString(currencyFormat)}\");\n                    report.AppendLine();\n                }\n                \n                var totalProductSales = productSales.Values.Sum();\n                report.AppendLine($\"Total Product Sales: {totalProductSales.ToString(currencyFormat)}\");\n                break;\n                \n            case \"regional\":\n                report.AppendLine(\"REGIONAL SALES REPORT\");\n                report.AppendLine(\"=====================\");\n                report.AppendLine();\n                \n                var regionalSales = new Dictionary<string, decimal>();\n                var regionalCustomers = new Dictionary<string, HashSet<string>>();\n                var regionalSalespeople = new Dictionary<string, HashSet<string>>();\n                \n                foreach (var sale in data.GetSales())\n                {\n                    var region = sale.GetRegion();\n                    if (!regionalSales.ContainsKey(region))\n                    {\n                        regionalSales[region] = 0;\n                        regionalCustomers[region] = new HashSet<string>();\n                        regionalSalespeople[region] = new HashSet<string>();\n                    }\n                    regionalSales[region] += sale.GetNetAmount();\n                    regionalCustomers[region].Add(sale.GetCustomerId());\n                    regionalSalespeople[region].Add(sale.GetSalesPerson());\n                }\n                \n                foreach (var kvp in regionalSales)\n                {\n                    var region = kvp.Key;\n                    var salesAmount = kvp.Value;\n                    var customerCount = regionalCustomers[region].Count;\n                    var salesTeamSize = regionalSalespeople[region].Count;\n                    var avgSalesPerCustomer = customerCount > 0 ? salesAmount / customerCount : 0;\n                    \n                    report.AppendLine($\"Region: {region}\");\n                    report.AppendLine($\"  Total Sales: {salesAmount.ToString(currencyFormat)}\");\n                    report.AppendLine($\"  Unique Customers: {customerCount}\");\n                    report.AppendLine($\"  Sales Team Size: {salesTeamSize}\");\n                    report.AppendLine($\"  Avg Sales per Customer: {avgSalesPerCustomer.ToString(currencyFormat)}\");\n                    report.AppendLine();\n                }\n                \n                var totalRegionalSales = regionalSales.Values.Sum();\n                report.AppendLine($\"Total Regional Sales: {totalRegionalSales.ToString(currencyFormat)}\");\n                break;\n                \n            case \"salesperson\":\n                report.AppendLine(\"SALESPERSON PERFORMANCE REPORT\");\n                report.AppendLine(\"==============================\");\n                report.AppendLine();\n                \n                var salespersonSales = new Dictionary<string, decimal>();\n                var salespersonCustomers = new Dictionary<string, HashSet<string>>();\n                var salespersonRegions = new Dictionary<string, string>();\n                \n                foreach (var sale in data.GetSales())\n                {\n                    var salesperson = sale.GetSalesPerson();\n                    if (!salespersonSales.ContainsKey(salesperson))\n                    {\n                        salespersonSales[salesperson] = 0;\n                        salespersonCustomers[salesperson] = new HashSet<string>();\n                    }\n                    salespersonSales[salesperson] += sale.GetNetAmount();\n                    salespersonCustomers[salesperson].Add(sale.GetCustomerId());\n                    salespersonRegions[salesperson] = sale.GetRegion();\n                }\n                \n                var sortedSalespeople = salespersonSales.OrderByDescending(x => x.Value);\n                var rank = 1;\n                \n                foreach (var kvp in sortedSalespeople)\n                {\n                    var salesperson = kvp.Key;\n                    var salesAmount = kvp.Value;\n                    var customerCount = salespersonCustomers[salesperson].Count;\n                    var region = salespersonRegions.ContainsKey(salesperson) ? salespersonRegions[salesperson] : \"Unknown\";\n                    var avgSalePerCustomer = customerCount > 0 ? salesAmount / customerCount : 0;\n                    \n                    report.AppendLine($\"#{rank} {salesperson} (Region: {region})\");\n                    report.AppendLine($\"  Total Sales: {salesAmount.ToString(currencyFormat)}\");\n                    report.AppendLine($\"  Customers Served: {customerCount}\");\n                    report.AppendLine($\"  Avg Sale per Customer: {avgSalePerCustomer.ToString(currencyFormat)}\");\n                    report.AppendLine();\n                    rank++;\n                }\n                break;\n                \n            case \"category\":\n                report.AppendLine(\"CATEGORY ANALYSIS REPORT\");\n                report.AppendLine(\"========================\");\n                report.AppendLine();\n                \n                var categorySales = new Dictionary<string, decimal>();\n                var categoryQuantities = new Dictionary<string, int>();\n                var categoryProducts = new Dictionary<string, HashSet<string>>();\n                \n                foreach (var sale in data.GetSales())\n                {\n                    var category = sale.GetProductCategory();\n                    if (!categorySales.ContainsKey(category))\n                    {\n                        categorySales[category] = 0;\n                        categoryQuantities[category] = 0;\n                        categoryProducts[category] = new HashSet<string>();\n                    }\n                    categorySales[category] += sale.GetNetAmount();\n                    categoryQuantities[category] += sale.GetQuantity();\n                    categoryProducts[category].Add(sale.GetProductName());\n                }\n                \n                var totalCategorySales = categorySales.Values.Sum();\n                \n                foreach (var kvp in categorySales)\n                {\n                    var category = kvp.Key;\n                    var salesAmount = kvp.Value;\n                    var unitsSold = categoryQuantities[category];\n                    var productVariety = categoryProducts[category].Count;\n                    var percentage = totalCategorySales > 0 ? (salesAmount / totalCategorySales * 100) : 0;\n                    \n                    report.AppendLine($\"Category: {category}\");\n                    report.AppendLine($\"  Sales: {salesAmount.ToString(currencyFormat)} ({percentage:F1}% of total)\");\n                    report.AppendLine($\"  Units Sold: {unitsSold}\");\n                    report.AppendLine($\"  Product Variety: {productVariety} products\");\n                    report.AppendLine();\n                }\n                break;\n                \n            case \"quarterly\":\n                report.AppendLine(\"QUARTERLY PERFORMANCE REPORT\");\n                report.AppendLine(\"============================\");\n                report.AppendLine();\n                \n                var quarterlySales = new Dictionary<string, decimal>();\n                var quarterlyQuantities = new Dictionary<string, int>();\n                \n                foreach (var sale in data.GetSales())\n                {\n                    var quarter = $\"Q{((sale.GetDate().Month - 1) / 3) + 1} {sale.GetDate().Year}\";\n                    if (!quarterlySales.ContainsKey(quarter))\n                    {\n                        quarterlySales[quarter] = 0;\n                        quarterlyQuantities[quarter] = 0;\n                    }\n                    quarterlySales[quarter] += sale.GetNetAmount();\n                    quarterlyQuantities[quarter] += sale.GetQuantity();\n                }\n                \n                foreach (var kvp in quarterlySales.OrderBy(x => x.Key))\n                {\n                    var quarter = kvp.Key;\n                    var salesAmount = kvp.Value;\n                    var unitsSold = quarterlyQuantities[quarter];\n                    report.AppendLine($\"Quarter: {quarter}, Sales: {salesAmount.ToString(currencyFormat)}, Units: {unitsSold}\");\n                }\n                \n                var totalQuarterlySales = quarterlySales.Values.Sum();\n                report.AppendLine();\n                report.AppendLine($\"Total Quarterly Sales: {totalQuarterlySales.ToString(currencyFormat)}\");\n                break;\n                \n            case \"monthly\":\n                report.AppendLine(\"MONTHLY SALES BREAKDOWN\");\n                report.AppendLine(\"=======================\");\n                report.AppendLine();\n                \n                var monthlySales = new Dictionary<string, decimal>();\n                var monthlyDiscounts = new Dictionary<string, decimal>();\n                \n                foreach (var sale in data.GetSales())\n                {\n                    var monthYear = sale.GetDate().ToString(\"yyyy-MM\");\n                    if (!monthlySales.ContainsKey(monthYear))\n                    {\n                        monthlySales[monthYear] = 0;\n                        monthlyDiscounts[monthYear] = 0;\n                    }\n                    monthlySales[monthYear] += sale.GetNetAmount();\n                    monthlyDiscounts[monthYear] += sale.GetDiscount();\n                }\n                \n                foreach (var kvp in monthlySales.OrderBy(x => x.Key))\n                {\n                    var month = kvp.Key;\n                    var salesAmount = kvp.Value;\n                    var discountsAmount = monthlyDiscounts[month];\n                    var grossRevenue = salesAmount + discountsAmount;\n                    \n                    report.AppendLine($\"Month: {month}\");\n                    report.AppendLine($\"  Net Sales: {salesAmount.ToString(currencyFormat)}\");\n                    report.AppendLine($\"  Discounts Given: {discountsAmount.ToString(currencyFormat)}\");\n                    report.AppendLine($\"  Gross Revenue: {grossRevenue.ToString(currencyFormat)}\");\n                    report.AppendLine();\n                }\n                break;\n                \n            case \"customer\":\n                report.AppendLine(\"CUSTOMER ANALYSIS REPORT\");\n                report.AppendLine(\"========================\");\n                report.AppendLine();\n                \n                var customerSales = new Dictionary<string, decimal>();\n                var customerTransactions = new Dictionary<string, int>();\n                var customerRegions = new Dictionary<string, string>();\n                \n                foreach (var sale in data.GetSales())\n                {\n                    var customer = sale.GetCustomerId();\n                    if (!customerSales.ContainsKey(customer))\n                    {\n                        customerSales[customer] = 0;\n                        customerTransactions[customer] = 0;\n                    }\n                    customerSales[customer] += sale.GetNetAmount();\n                    customerTransactions[customer]++;\n                    customerRegions[customer] = sale.GetRegion();\n                }\n                \n                var sortedCustomers = customerSales.OrderByDescending(x => x.Value);\n                \n                foreach (var kvp in sortedCustomers)\n                {\n                    var customer = kvp.Key;\n                    var salesAmount = kvp.Value;\n                    var transactionCount = customerTransactions[customer];\n                    var region = customerRegions.ContainsKey(customer) ? customerRegions[customer] : \"Unknown\";\n                    var avgTransaction = transactionCount > 0 ? salesAmount / transactionCount : 0;\n                    \n                    report.AppendLine($\"Customer: {customer} (Region: {region})\");\n                    report.AppendLine($\"  Total Purchases: {salesAmount.ToString(currencyFormat)}\");\n                    report.AppendLine($\"  Transaction Count: {transactionCount}\");\n                    report.AppendLine($\"  Avg Transaction: {avgTransaction.ToString(currencyFormat)}\");\n                    report.AppendLine();\n                }\n                break;\n                \n            default:\n                report.AppendLine($\"Unknown report type: {reportType}\");\n                break;\n        }\n        \n        // Add footer\n        report.AppendLine();\n        report.AppendLine(\"===================================\");\n        report.AppendLine($\"Report Generated: {DateTime.Now:yyyy-MM-dd HH:mm:ss}\");\n        report.AppendLine(\"===================================\");\n        \n        return report.ToString();\n    }\n    \n    public string GenerateSummaryReport(SalesData data)\n    {\n        var summary = new StringBuilder();\n        summary.AppendLine(\"EXECUTIVE SUMMARY\");\n        summary.AppendLine(\"=================\");\n        summary.AppendLine();\n        \n        var totalSales = data.GetSales().Sum(sale => sale.GetNetAmount());\n        var totalTransactions = data.GetSales().Count;\n        var avgTransaction = totalTransactions > 0 ? totalSales / totalTransactions : 0;\n        \n        var uniqueCustomers = data.GetSales().Select(sale => sale.GetCustomerId()).Distinct().Count();\n        var uniqueProducts = data.GetSales().Select(sale => sale.GetProductName()).Distinct().Count();\n        var uniqueRegions = data.GetSales().Select(sale => sale.GetRegion()).Distinct().Count();\n        \n        summary.AppendLine($\"Total Sales: {totalSales.ToString(currencyFormat)}\");\n        summary.AppendLine($\"Total Transactions: {totalTransactions}\");\n        summary.AppendLine($\"Average Transaction: {avgTransaction.ToString(currencyFormat)}\");\n        summary.AppendLine($\"Unique Customers: {uniqueCustomers}\");\n        summary.AppendLine($\"Unique Products: {uniqueProducts}\");\n        summary.AppendLine($\"Active Regions: {uniqueRegions}\");\n        \n        return summary.ToString();\n    }\n    \n    public string GenerateComparativeReport(SalesData data, string comparisonPeriod)\n    {\n        var comparative = new StringBuilder();\n        comparative.AppendLine(\"COMPARATIVE ANALYSIS REPORT\");\n        comparative.AppendLine(\"===========================\");\n        comparative.AppendLine();\n        \n        var totalSales = data.GetSales().Sum(sale => sale.GetNetAmount());\n        \n        comparative.AppendLine($\"Current Period Sales: {totalSales.ToString(currencyFormat)}\");\n        comparative.AppendLine($\"Comparison Period: {comparisonPeriod}\");\n        comparative.AppendLine(\"Note: Comparison data would be calculated here with historical data\");\n        \n        return comparative.ToString();\n    }\n    \n    public string GenerateTrendAnalysisReport(SalesData data)\n    {\n        var trend = new StringBuilder();\n        trend.AppendLine(\"SALES TREND ANALYSIS\");\n        trend.AppendLine(\"====================\");\n        trend.AppendLine();\n        \n        var monthlyTrends = new Dictionary<string, decimal>();\n        foreach (var sale in data.GetSales())\n        {\n            var monthYear = sale.GetDate().ToString(\"yyyy-MM\");\n            if (!monthlyTrends.ContainsKey(monthYear))\n                monthlyTrends[monthYear] = 0;\n            monthlyTrends[monthYear] += sale.GetNetAmount();\n        }\n        \n        var sortedMonths = monthlyTrends.OrderBy(x => x.Key);\n        \n        trend.AppendLine(\"Monthly Sales Trends:\");\n        foreach (var kvp in sortedMonths)\n        {\n            trend.AppendLine($\"{kvp.Key}: {kvp.Value.ToString(currencyFormat)}\");\n        }\n        \n        if (monthlyTrends.Count > 1)\n        {\n            var firstMonth = sortedMonths.First().Value;\n            var lastMonth = sortedMonths.Last().Value;\n            var growthRate = firstMonth > 0 ? ((lastMonth - firstMonth) / firstMonth * 100) : 0;\n            \n            trend.AppendLine();\n            trend.AppendLine(\"Growth Analysis:\");\n            trend.AppendLine($\"Period Growth Rate: {growthRate:F2}%\");\n        }\n        \n        return trend.ToString();\n    }\n}",
      "output": "using System;\nusing System.Collections.Generic;\nusing System.Globalization;\nusing System.Linq;\nusing System.Text;\n\npublic class SalesData\n{\n    private readonly List<Sale> sales;\n    private readonly string companyName;\n    private readonly string reportingPeriod;\n    \n    public SalesData(List<Sale> sales, string companyName, string reportingPeriod)\n    {\n        this.sales = sales;\n        this.companyName = companyName;\n        this.reportingPeriod = reportingPeriod;\n    }\n    \n    public IReadOnlyList<Sale> GetSales() => sales.AsReadOnly();\n    \n    public string GetCompanyName() => companyName;\n    \n    public string GetReportingPeriod() => reportingPeriod;\n    \n    public void AddSale(Sale sale)\n    {\n        sales.Add(sale);\n    }\n    \n    public IEnumerable<Sale> GetSalesByRegion(string region)\n    {\n        return sales.Where(sale => sale.Region == region);\n    }\n    \n    public decimal GetTotalSales()\n    {\n        return sales.Sum(sale => sale.GetNetAmount());\n    }\n}\n\npublic class Sale\n{\n    public string ProductName { get; }\n    public string ProductCategory { get; }\n    public decimal Amount { get; }\n    public int Quantity { get; }\n    public DateTime Date { get; }\n    public string Region { get; }\n    public string SalesPerson { get; }\n    public string CustomerId { get; }\n    public decimal Discount { get; }\n    \n    public Sale(string productName, string productCategory, decimal amount, int quantity,\n                DateTime date, string region, string salesPerson, string customerId, decimal discount)\n    {\n        ProductName = productName;\n        ProductCategory = productCategory;\n        Amount = amount;\n        Quantity = quantity;\n        Date = date;\n        Region = region;\n        SalesPerson = salesPerson;\n        CustomerId = customerId;\n        Discount = discount;\n    }\n    \n    public string GetProductName() => ProductName;\n    \n    public string GetProductCategory() => ProductCategory;\n    \n    public decimal GetAmount() => Amount;\n    \n    public int GetQuantity() => Quantity;\n    \n    public DateTime GetDate() => Date;\n    \n    public string GetRegion() => Region;\n    \n    public string GetSalesPerson() => SalesPerson;\n    \n    public string GetCustomerId() => CustomerId;\n    \n    public decimal GetDiscount() => Discount;\n    \n    public decimal GetNetAmount() => Amount - Discount;\n}\n\npublic interface IReportStrategy\n{\n    string GenerateReport(SalesData data);\n    string GetReportTitle();\n}\n\npublic abstract class BaseReportStrategy : IReportStrategy\n{\n    protected readonly string CurrencyFormat = \"C2\";\n    protected readonly string DateFormat = \"yyyy-MM-dd\";\n    \n    public abstract string GenerateReport(SalesData data);\n    public abstract string GetReportTitle();\n    \n    protected virtual IEnumerable<string> GenerateHeader(SalesData data)\n    {\n        yield return \"====================================\";\n        yield return $\"    {data.GetCompanyName()}\";\n        yield return $\"  Reporting Period: {data.GetReportingPeriod()}\";\n        yield return \"====================================\";\n        yield return string.Empty;\n    }\n    \n    protected virtual IEnumerable<string> GenerateFooter()\n    {\n        yield return string.Empty;\n        yield return \"====================================\";\n        yield return $\"Report Generated: {DateTime.Now:yyyy-MM-dd HH:mm:ss}\";\n        yield return \"====================================\";\n    }\n}\n\npublic class DailyReportStrategy : BaseReportStrategy\n{\n    public override string GetReportTitle() => \"DAILY SALES REPORT\";\n    \n    public override string GenerateReport(SalesData data)\n    {\n        var reportLines = new List<string>();\n        reportLines.AddRange(GenerateHeader(data));\n        \n        reportLines.AddRange(new[]\n        {\n            GetReportTitle(),\n            \"===================\",\n            string.Empty\n        });\n        \n        var dailySales = new Dictionary<string, decimal>();\n        var dailyQuantities = new Dictionary<string, int>();\n        \n        foreach (var sale in data.GetSales())\n        {\n            var dateStr = sale.GetDate().ToString(DateFormat);\n            dailySales[dateStr] = dailySales.GetValueOrDefault(dateStr, 0) + sale.GetNetAmount();\n            dailyQuantities[dateStr] = dailyQuantities.GetValueOrDefault(dateStr, 0) + sale.GetQuantity();\n        }\n        \n        foreach (var kvp in dailySales.OrderBy(x => x.Key))\n        {\n            var dateStr = kvp.Key;\n            var salesAmount = kvp.Value;\n            var unitsAmount = dailyQuantities[dateStr];\n            reportLines.Add($\"Date: {dateStr}, Total Sales: {salesAmount.ToString(CurrencyFormat)}, Units Sold: {unitsAmount}\");\n        }\n        \n        var totalSales = dailySales.Values.Sum();\n        var totalUnits = dailyQuantities.Values.Sum();\n        var avgDailySales = dailySales.Count > 0 ? totalSales / dailySales.Count : 0;\n        \n        reportLines.AddRange(new[]\n        {\n            string.Empty,\n            $\"Grand Total: {totalSales.ToString(CurrencyFormat)}\",\n            $\"Total Units: {totalUnits}\",\n            $\"Average Daily Sales: {avgDailySales.ToString(CurrencyFormat)}\"\n        });\n        \n        reportLines.AddRange(GenerateFooter());\n        return string.Join(Environment.NewLine, reportLines);\n    }\n}\n\npublic class ProductReportStrategy : BaseReportStrategy\n{\n    public override string GetReportTitle() => \"PRODUCT SALES REPORT\";\n    \n    public override string GenerateReport(SalesData data)\n    {\n        var reportLines = new List<string>();\n        reportLines.AddRange(GenerateHeader(data));\n        \n        reportLines.AddRange(new[]\n        {\n            GetReportTitle(),\n            \"====================\",\n            string.Empty\n        });\n        \n        var productSales = new Dictionary<string, decimal>();\n        var productQuantities = new Dictionary<string, int>();\n        var productCategories = new Dictionary<string, string>();\n        \n        foreach (var sale in data.GetSales())\n        {\n            var product = sale.GetProductName();\n            productSales[product] = productSales.GetValueOrDefault(product, 0) + sale.GetNetAmount();\n            productQuantities[product] = productQuantities.GetValueOrDefault(product, 0) + sale.GetQuantity();\n            productCategories[product] = sale.GetProductCategory();\n        }\n        \n        var sortedProducts = productSales.OrderByDescending(x => x.Value);\n        \n        foreach (var kvp in sortedProducts)\n        {\n            var product = kvp.Key;\n            var salesAmount = kvp.Value;\n            var unitsAmount = productQuantities[product];\n            var category = productCategories[product];\n            var avgPrice = unitsAmount > 0 ? salesAmount / unitsAmount : 0;\n            \n            reportLines.AddRange(new[]\n            {\n                $\"Product: {product} (Category: {category})\",\n                $\"  Sales: {salesAmount.ToString(CurrencyFormat)}, Units: {unitsAmount}, Avg Price: {avgPrice.ToString(CurrencyFormat)}\",\n                string.Empty\n            });\n        }\n        \n        var totalProductSales = productSales.Values.Sum();\n        reportLines.Add($\"Total Product Sales: {totalProductSales.ToString(CurrencyFormat)}\");\n        \n        reportLines.AddRange(GenerateFooter());\n        return string.Join(Environment.NewLine, reportLines);\n    }\n}\n\npublic class RegionalReportStrategy : BaseReportStrategy\n{\n    public override string GetReportTitle() => \"REGIONAL SALES REPORT\";\n    \n    public override string GenerateReport(SalesData data)\n    {\n        var reportLines = new List<string>();\n        reportLines.AddRange(GenerateHeader(data));\n        \n        reportLines.AddRange(new[]\n        {\n            GetReportTitle(),\n            \"=====================\",\n            string.Empty\n        });\n        \n        var regionalSales = new Dictionary<string, decimal>();\n        var regionalCustomers = new Dictionary<string, HashSet<string>>();\n        var regionalSalespeople = new Dictionary<string, HashSet<string>>();\n        \n        foreach (var sale in data.GetSales())\n        {\n            var region = sale.GetRegion();\n            regionalSales[region] = regionalSales.GetValueOrDefault(region, 0) + sale.GetNetAmount();\n            \n            if (!regionalCustomers.ContainsKey(region))\n            {\n                regionalCustomers[region] = new HashSet<string>();\n                regionalSalespeople[region] = new HashSet<string>();\n            }\n            regionalCustomers[region].Add(sale.GetCustomerId());\n            regionalSalespeople[region].Add(sale.GetSalesPerson());\n        }\n        \n        foreach (var kvp in regionalSales)\n        {\n            var region = kvp.Key;\n            var salesAmount = kvp.Value;\n            var customerCount = regionalCustomers[region].Count;\n            var salesTeamSize = regionalSalespeople[region].Count;\n            var avgSalesPerCustomer = customerCount > 0 ? salesAmount / customerCount : 0;\n            \n            reportLines.AddRange(new[]\n            {\n                $\"Region: {region}\",\n                $\"  Total Sales: {salesAmount.ToString(CurrencyFormat)}\",\n                $\"  Unique Customers: {customerCount}\",\n                $\"  Sales Team Size: {salesTeamSize}\",\n                $\"  Avg Sales per Customer: {avgSalesPerCustomer.ToString(CurrencyFormat)}\",\n                string.Empty\n            });\n        }\n        \n        var totalRegionalSales = regionalSales.Values.Sum();\n        reportLines.Add($\"Total Regional Sales: {totalRegionalSales.ToString(CurrencyFormat)}\");\n        \n        reportLines.AddRange(GenerateFooter());\n        return string.Join(Environment.NewLine, reportLines);\n    }\n}\n\npublic class SalespersonReportStrategy : BaseReportStrategy\n{\n    public override string GetReportTitle() => \"SALESPERSON PERFORMANCE REPORT\";\n    \n    public override string GenerateReport(SalesData data)\n    {\n        var reportLines = new List<string>();\n        reportLines.AddRange(GenerateHeader(data));\n        \n        reportLines.AddRange(new[]\n        {\n            GetReportTitle(),\n            \"==============================\",\n            string.Empty\n        });\n        \n        var salespersonSales = new Dictionary<string, decimal>();\n        var salespersonCustomers = new Dictionary<string, HashSet<string>>();\n        var salespersonRegions = new Dictionary<string, string>();\n        \n        foreach (var sale in data.GetSales())\n        {\n            var salesperson = sale.GetSalesPerson();\n            salespersonSales[salesperson] = salespersonSales.GetValueOrDefault(salesperson, 0) + sale.GetNetAmount();\n            \n            if (!salespersonCustomers.ContainsKey(salesperson))\n                salespersonCustomers[salesperson] = new HashSet<string>();\n            \n            salespersonCustomers[salesperson].Add(sale.GetCustomerId());\n            salespersonRegions[salesperson] = sale.GetRegion();\n        }\n        \n        var sortedSalespeople = salespersonSales.OrderByDescending(x => x.Value);\n        var rank = 1;\n        \n        foreach (var kvp in sortedSalespeople)\n        {\n            var salesperson = kvp.Key;\n            var salesAmount = kvp.Value;\n            var customerCount = salespersonCustomers[salesperson].Count;\n            var region = salespersonRegions.GetValueOrDefault(salesperson, \"Unknown\");\n            var avgSalePerCustomer = customerCount > 0 ? salesAmount / customerCount : 0;\n            \n            reportLines.AddRange(new[]\n            {\n                $\"#{rank} {salesperson} (Region: {region})\",\n                $\"  Total Sales: {salesAmount.ToString(CurrencyFormat)}\",\n                $\"  Customers Served: {customerCount}\",\n                $\"  Avg Sale per Customer: {avgSalePerCustomer.ToString(CurrencyFormat)}\",\n                string.Empty\n            });\n            rank++;\n        }\n        \n        reportLines.AddRange(GenerateFooter());\n        return string.Join(Environment.NewLine, reportLines);\n    }\n}\n\npublic class CategoryReportStrategy : BaseReportStrategy\n{\n    public override string GetReportTitle() => \"CATEGORY ANALYSIS REPORT\";\n    \n    public override string GenerateReport(SalesData data)\n    {\n        var reportLines = new List<string>();\n        reportLines.AddRange(GenerateHeader(data));\n        \n        reportLines.AddRange(new[]\n        {\n            GetReportTitle(),\n            \"========================\",\n            string.Empty\n        });\n        \n        var categorySales = new Dictionary<string, decimal>();\n        var categoryQuantities = new Dictionary<string, int>();\n        var categoryProducts = new Dictionary<string, HashSet<string>>();\n        \n        foreach (var sale in data.GetSales())\n        {\n            var category = sale.GetProductCategory();\n            categorySales[category] = categorySales.GetValueOrDefault(category, 0) + sale.GetNetAmount();\n            categoryQuantities[category] = categoryQuantities.GetValueOrDefault(category, 0) + sale.GetQuantity();\n            \n            if (!categoryProducts.ContainsKey(category))\n                categoryProducts[category] = new HashSet<string>();\n            categoryProducts[category].Add(sale.GetProductName());\n        }\n        \n        var totalCategorySales = categorySales.Values.Sum();\n        \n        foreach (var kvp in categorySales)\n        {\n            var category = kvp.Key;\n            var salesAmount = kvp.Value;\n            var unitsSold = categoryQuantities[category];\n            var productVariety = categoryProducts[category].Count;\n            var percentage = totalCategorySales > 0 ? (salesAmount / totalCategorySales * 100) : 0;\n            \n            reportLines.AddRange(new[]\n            {\n                $\"Category: {category}\",\n                $\"  Sales: {salesAmount.ToString(CurrencyFormat)} ({percentage:F1}% of total)\",\n                $\"  Units Sold: {unitsSold}\",\n                $\"  Product Variety: {productVariety} products\",\n                string.Empty\n            });\n        }\n        \n        reportLines.AddRange(GenerateFooter());\n        return string.Join(Environment.NewLine, reportLines);\n    }\n}\n\npublic class QuarterlyReportStrategy : BaseReportStrategy\n{\n    public override string GetReportTitle() => \"QUARTERLY PERFORMANCE REPORT\";\n    \n    public override string GenerateReport(SalesData data)\n    {\n        var reportLines = new List<string>();\n        reportLines.AddRange(GenerateHeader(data));\n        \n        reportLines.AddRange(new[]\n        {\n            GetReportTitle(),\n            \"============================\",\n            string.Empty\n        });\n        \n        var quarterlySales = new Dictionary<string, decimal>();\n        var quarterlyQuantities = new Dictionary<string, int>();\n        \n        foreach (var sale in data.GetSales())\n        {\n            var quarter = $\"Q{((sale.GetDate().Month - 1) / 3) + 1} {sale.GetDate().Year}\";\n            quarterlySales[quarter] = quarterlySales.GetValueOrDefault(quarter, 0) + sale.GetNetAmount();\n            quarterlyQuantities[quarter] = quarterlyQuantities.GetValueOrDefault(quarter, 0) + sale.GetQuantity();\n        }\n        \n        foreach (var kvp in quarterlySales.OrderBy(x => x.Key))\n        {\n            var quarter = kvp.Key;\n            var salesAmount = kvp.Value;\n            var unitsSold = quarterlyQuantities[quarter];\n            reportLines.Add($\"Quarter: {quarter}, Sales: {salesAmount.ToString(CurrencyFormat)}, Units: {unitsSold}\");\n        }\n        \n        var totalQuarterlySales = quarterlySales.Values.Sum();\n        reportLines.AddRange(new[]\n        {\n            string.Empty,\n            $\"Total Quarterly Sales: {totalQuarterlySales.ToString(CurrencyFormat)}\"\n        });\n        \n        reportLines.AddRange(GenerateFooter());\n        return string.Join(Environment.NewLine, reportLines);\n    }\n}\n\npublic class MonthlyReportStrategy : BaseReportStrategy\n{\n    public override string GetReportTitle() => \"MONTHLY SALES BREAKDOWN\";\n    \n    public override string GenerateReport(SalesData data)\n    {\n        var reportLines = new List<string>();\n        reportLines.AddRange(GenerateHeader(data));\n        \n        reportLines.AddRange(new[]\n        {\n            GetReportTitle(),\n            \"=======================\",\n            string.Empty\n        });\n        \n        var monthlySales = new Dictionary<string, decimal>();\n        var monthlyDiscounts = new Dictionary<string, decimal>();\n        \n        foreach (var sale in data.GetSales())\n        {\n            var monthYear = sale.GetDate().ToString(\"yyyy-MM\");\n            monthlySales[monthYear] = monthlySales.GetValueOrDefault(monthYear, 0) + sale.GetNetAmount();\n            monthlyDiscounts[monthYear] = monthlyDiscounts.GetValueOrDefault(monthYear, 0) + sale.GetDiscount();\n        }\n        \n        foreach (var kvp in monthlySales.OrderBy(x => x.Key))\n        {\n            var month = kvp.Key;\n            var salesAmount = kvp.Value;\n            var discountsAmount = monthlyDiscounts[month];\n            var grossRevenue = salesAmount + discountsAmount;\n            \n            reportLines.AddRange(new[]\n            {\n                $\"Month: {month}\",\n                $\"  Net Sales: {salesAmount.ToString(CurrencyFormat)}\",\n                $\"  Discounts Given: {discountsAmount.ToString(CurrencyFormat)}\",\n                $\"  Gross Revenue: {grossRevenue.ToString(CurrencyFormat)}\",\n                string.Empty\n            });\n        }\n        \n        reportLines.AddRange(GenerateFooter());\n        return string.Join(Environment.NewLine, reportLines);\n    }\n}\n\npublic class CustomerReportStrategy : BaseReportStrategy\n{\n    public override string GetReportTitle() => \"CUSTOMER ANALYSIS REPORT\";\n    \n    public override string GenerateReport(SalesData data)\n    {\n        var reportLines = new List<string>();\n        reportLines.AddRange(GenerateHeader(data));\n        \n        reportLines.AddRange(new[]\n        {\n            GetReportTitle(),\n            \"========================\",\n            string.Empty\n        });\n        \n        var customerSales = new Dictionary<string, decimal>();\n        var customerTransactions = new Dictionary<string, int>();\n        var customerRegions = new Dictionary<string, string>();\n        \n        foreach (var sale in data.GetSales())\n        {\n            var customer = sale.GetCustomerId();\n            customerSales[customer] = customerSales.GetValueOrDefault(customer, 0) + sale.GetNetAmount();\n            customerTransactions[customer] = customerTransactions.GetValueOrDefault(customer, 0) + 1;\n            customerRegions[customer] = sale.GetRegion();\n        }\n        \n        var sortedCustomers = customerSales.OrderByDescending(x => x.Value);\n        \n        foreach (var kvp in sortedCustomers)\n        {\n            var customer = kvp.Key;\n            var salesAmount = kvp.Value;\n            var transactionCount = customerTransactions[customer];\n            var region = customerRegions.GetValueOrDefault(customer, \"Unknown\");\n            var avgTransaction = transactionCount > 0 ? salesAmount / transactionCount : 0;\n            \n            reportLines.AddRange(new[]\n            {\n                $\"Customer: {customer} (Region: {region})\",\n                $\"  Total Purchases: {salesAmount.ToString(CurrencyFormat)}\",\n                $\"  Transaction Count: {transactionCount}\",\n                $\"  Avg Transaction: {avgTransaction.ToString(CurrencyFormat)}\",\n                string.Empty\n            });\n        }\n        \n        reportLines.AddRange(GenerateFooter());\n        return string.Join(Environment.NewLine, reportLines);\n    }\n}\n\npublic class SummaryReportStrategy : BaseReportStrategy\n{\n    public override string GetReportTitle() => \"EXECUTIVE SUMMARY\";\n    \n    public override string GenerateReport(SalesData data)\n    {\n        var reportLines = new List<string>();\n        reportLines.AddRange(GenerateHeader(data));\n        \n        reportLines.AddRange(new[]\n        {\n            GetReportTitle(),\n            \"=================\",\n            string.Empty\n        });\n        \n        var totalSales = data.GetSales().Sum(sale => sale.GetNetAmount());\n        var totalTransactions = data.GetSales().Count;\n        var avgTransaction = totalTransactions > 0 ? totalSales / totalTransactions : 0;\n        \n        var uniqueCustomers = data.GetSales().Select(sale => sale.GetCustomerId()).Distinct().Count();\n        var uniqueProducts = data.GetSales().Select(sale => sale.GetProductName()).Distinct().Count();\n        var uniqueRegions = data.GetSales().Select(sale => sale.GetRegion()).Distinct().Count();\n        \n        reportLines.AddRange(new[]\n        {\n            $\"Total Sales: {totalSales.ToString(CurrencyFormat)}\",\n            $\"Total Transactions: {totalTransactions}\",\n            $\"Average Transaction: {avgTransaction.ToString(CurrencyFormat)}\",\n            $\"Unique Customers: {uniqueCustomers}\",\n            $\"Unique Products: {uniqueProducts}\",\n            $\"Active Regions: {uniqueRegions}\"\n        });\n        \n        if (data.GetSales().Any())\n        {\n            var productSales = data.GetSales()\n                .GroupBy(s => s.GetProductName())\n                .ToDictionary(g => g.Key, g => g.Sum(s => s.GetNetAmount()));\n            \n            var regionSales = data.GetSales()\n                .GroupBy(s => s.GetRegion())\n                .ToDictionary(g => g.Key, g => g.Sum(s => s.GetNetAmount()));\n            \n            var topProduct = productSales.OrderByDescending(x => x.Value).FirstOrDefault().Key ?? \"N/A\";\n            var topRegion = regionSales.OrderByDescending(x => x.Value).FirstOrDefault().Key ?? \"N/A\";\n            \n            reportLines.AddRange(new[]\n            {\n                string.Empty,\n                $\"Top Performing Product: {topProduct}\",\n                $\"Top Performing Region: {topRegion}\"\n            });\n        }\n        \n        reportLines.AddRange(GenerateFooter());\n        return string.Join(Environment.NewLine, reportLines);\n    }\n}\n\npublic class ComparativeReportStrategy : BaseReportStrategy\n{\n    private readonly string comparisonPeriod;\n    \n    public ComparativeReportStrategy(string comparisonPeriod)\n    {\n        this.comparisonPeriod = comparisonPeriod;\n    }\n    \n    public override string GetReportTitle() => \"COMPARATIVE ANALYSIS REPORT\";\n    \n    public override string GenerateReport(SalesData data)\n    {\n        var reportLines = new List<string>();\n        reportLines.AddRange(GenerateHeader(data));\n        \n        reportLines.AddRange(new[]\n        {\n            GetReportTitle(),\n            \"===========================\",\n            string.Empty\n        });\n        \n        var totalSales = data.GetSales().Sum(sale => sale.GetNetAmount());\n        \n        reportLines.AddRange(new[]\n        {\n            $\"Current Period Sales: {totalSales.ToString(CurrencyFormat)}\",\n            $\"Comparison Period: {comparisonPeriod}\",\n            \"Note: Comparison data would be calculated here with historical data\"\n        });\n        \n        reportLines.AddRange(GenerateFooter());\n        return string.Join(Environment.NewLine, reportLines);\n    }\n}\n\npublic class TrendAnalysisReportStrategy : BaseReportStrategy\n{\n    public override string GetReportTitle() => \"SALES TREND ANALYSIS\";\n    \n    public override string GenerateReport(SalesData data)\n    {\n        var reportLines = new List<string>();\n        reportLines.AddRange(GenerateHeader(data));\n        \n        reportLines.AddRange(new[]\n        {\n            GetReportTitle(),\n            \"====================\",\n            string.Empty\n        });\n        \n        var monthlyTrends = new Dictionary<string, decimal>();\n        foreach (var sale in data.GetSales())\n        {\n            var monthYear = sale.GetDate().ToString(\"yyyy-MM\");\n            monthlyTrends[monthYear] = monthlyTrends.GetValueOrDefault(monthYear, 0) + sale.GetNetAmount();\n        }\n        \n        var sortedMonths = monthlyTrends.OrderBy(x => x.Key);\n        \n        reportLines.Add(\"Monthly Sales Trends:\");\n        foreach (var kvp in sortedMonths)\n        {\n            reportLines.Add($\"{kvp.Key}: {kvp.Value.ToString(CurrencyFormat)}\");\n        }\n        \n        if (monthlyTrends.Count > 1)\n        {\n            var firstMonth = sortedMonths.First().Value;\n            var lastMonth = sortedMonths.Last().Value;\n            var growthRate = firstMonth > 0 ? ((lastMonth - firstMonth) / firstMonth * 100) : 0;\n            \n            reportLines.AddRange(new[]\n            {\n                string.Empty,\n                \"Growth Analysis:\",\n                $\"Period Growth Rate: {growthRate:F2}%\"\n            });\n        }\n        \n        reportLines.AddRange(GenerateFooter());\n        return string.Join(Environment.NewLine, reportLines);\n    }\n}\n\npublic class ReportGenerator\n{\n    private IReportStrategy reportStrategy;\n    \n    public ReportGenerator(IReportStrategy reportStrategy = null)\n    {\n        this.reportStrategy = reportStrategy;\n    }\n    \n    public void SetReportStrategy(IReportStrategy reportStrategy)\n    {\n        this.reportStrategy = reportStrategy;\n    }\n    \n    public string GenerateReport(SalesData data)\n    {\n        if (reportStrategy == null)\n            throw new InvalidOperationException(\"Report strategy must be set before generating report\");\n        \n        return reportStrategy.GenerateReport(data);\n    }\n    \n    public string GetReportTitle()\n    {\n        return reportStrategy?.GetReportTitle() ?? \"Unknown Report\";\n    }\n}\n\npublic static class ReportFactory\n{\n    private static readonly Dictionary<string, Func<IReportStrategy>> Strategies = \n        new Dictionary<string, Func<IReportStrategy>>(StringComparer.OrdinalIgnoreCase)\n        {\n            { \"daily\", () => new DailyReportStrategy() },\n            { \"product\", () => new ProductReportStrategy() },\n            { \"regional\", () => new RegionalReportStrategy() },\n            { \"salesperson\", () => new SalespersonReportStrategy() },\n            { \"category\", () => new CategoryReportStrategy() },\n            { \"quarterly\", () => new QuarterlyReportStrategy() },\n            { \"monthly\", () => new MonthlyReportStrategy() },\n            { \"customer\", () => new CustomerReportStrategy() },\n            { \"summary\", () => new SummaryReportStrategy() },\n            { \"trend\", () => new TrendAnalysisReportStrategy() }\n        };\n    \n    public static IReportStrategy CreateReportStrategy(string reportType, params object[] parameters)\n    {\n        var type = reportType.ToLower();\n        \n        return type switch\n        {\n            \"comparative\" => new ComparativeReportStrategy(\n                parameters.FirstOrDefault() as string ?? \"Previous Period\"),\n            _ => Strategies.TryGetValue(type, out var factory) \n                ? factory() \n                : throw new ArgumentException($\"Unknown report type: {reportType}\")\n        };\n    }\n    \n    public static IEnumerable<string> GetAvailableReportTypes()\n    {\n        return Strategies.Keys.Concat(new[] { \"comparative\" });\n    }\n    \n    public static void RegisterStrategy(string reportType, Func<IReportStrategy> strategyFactory)\n    {\n        Strategies[reportType] = strategyFactory;\n    }\n    \n    public static void RegisterStrategy<T>(string reportType) where T : IReportStrategy, new()\n    {\n        Strategies[reportType] = () => new T();\n    }\n}\n\npublic static class SalesDataExtensions\n{\n    public static string GenerateReport(this SalesData salesData, string reportType, params object[] parameters)\n    {\n        var strategy = ReportFactory.CreateReportStrategy(reportType, parameters);\n        var generator = new ReportGenerator(strategy);\n        return generator.GenerateReport(salesData);\n    }\n    \n    public static SalesData ToSalesData(this IEnumerable<Sale> sales, string companyName, string reportingPeriod)\n    {\n        return new SalesData(sales.ToList(), companyName, reportingPeriod);\n    }\n}\n\npublic class Program\n{\n    public static void Main()\n    {\n        var sampleSales = new List<Sale>\n        {\n            new Sale(\"Laptop\", \"Electronics\", 1200.00m, 1, DateTime.Parse(\"2024-01-15\"), \"North\", \"John Doe\", \"CUST001\", 50.00m),\n            new Sale(\"Mouse\", \"Electronics\", 25.00m, 2, DateTime.Parse(\"2024-01-16\"), \"South\", \"Jane Smith\", \"CUST002\", 0.00m),\n            new Sale(\"Keyboard\", \"Electronics\", 75.00m, 1, DateTime.Parse(\"2024-01-17\"), \"North\", \"John Doe\", \"CUST003\", 5.00m)\n        };\n        \n        var salesData = new SalesData(sampleSales, \"TechCorp Inc.\", \"Q1 2024\");\n        \n        var generator = new ReportGenerator();\n        \n        var dailyStrategy = ReportFactory.CreateReportStrategy(\"daily\");\n        generator.SetReportStrategy(dailyStrategy);\n        Console.WriteLine(generator.GenerateReport(salesData));\n        \n        Console.WriteLine(salesData.GenerateReport(\"product\"));\n        \n        ReportFactory.RegisterStrategy<SummaryReportStrategy>(\"custom\");\n        \n        Console.WriteLine(salesData.GenerateReport(\"custom\"));\n        \n        Console.WriteLine(salesData.GenerateReport(\"comparative\", \"Q4 2023\"));\n        \n        Console.WriteLine(\"Available report types:\");\n        foreach (var type in ReportFactory.GetAvailableReportTypes())\n        {\n            Console.WriteLine($\"- {type}\");\n        }\n    }\n}",
      "level": "HARD",
      "language": "CSHARP",
      "violation": "OCP",
      "description": "Sales report generation system"
    },
    {
      "input": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class OrderItem\n{\n    public string ProductId { get; set; }\n    public decimal Price { get; set; }\n    public int Quantity { get; set; }\n    public string Category { get; set; }\n    public bool IsDigital { get; set; }\n    public decimal Weight { get; set; }\n    \n    public OrderItem(string productId, decimal price, int quantity, string category, bool isDigital = false, decimal weight = 0m)\n    {\n        ProductId = productId;\n        Price = price;\n        Quantity = quantity;\n        Category = category;\n        IsDigital = isDigital;\n        Weight = weight;\n    }\n    \n    public decimal GetTotalPrice()\n    {\n        return Price * Quantity;\n    }\n}\n\npublic class Order\n{\n    public string CustomerId { get; set; }\n    public List<OrderItem> Items { get; set; }\n    public string Country { get; set; }\n    public DateTime OrderDate { get; set; }\n    public string OrderType { get; set; }\n    public bool IsBusinessOrder { get; set; }\n    public string CustomerType { get; set; }\n    public decimal ShippingCost { get; set; }\n    \n    public Order(string customerId, List<OrderItem> items, string country, DateTime orderDate, string orderType, bool isBusinessOrder = false, string customerType = \"Individual\", decimal shippingCost = 0m)\n    {\n        CustomerId = customerId;\n        Items = items;\n        Country = country;\n        OrderDate = orderDate;\n        OrderType = orderType;\n        IsBusinessOrder = isBusinessOrder;\n        CustomerType = customerType;\n        ShippingCost = shippingCost;\n    }\n    \n    public decimal GetTotalAmount()\n    {\n        return Items.Sum(item => item.GetTotalPrice()) + ShippingCost;\n    }\n    \n    public decimal GetItemsTotal()\n    {\n        return Items.Sum(item => item.GetTotalPrice());\n    }\n}\n\npublic class TaxCalculator\n{\n    private const decimal DEFAULT_TAX_RATE = 0.05m;\n    private const decimal DIGITAL_GOODS_TAX_RATE = 0.02m;\n    \n    public decimal CalculateTax(Order order)\n    {\n        decimal totalTax = 0m;\n        \n        switch (order.Country.ToUpper())\n        {\n            case \"US\":\n                totalTax = CalculateUSTax(order);\n                break;\n            case \"EU\":\n                totalTax = CalculateEUTax(order);\n                break;\n            case \"CA\":\n                totalTax = CalculateCanadaTax(order);\n                break;\n            case \"UK\":\n                totalTax = CalculateUKTax(order);\n                break;\n            case \"AU\":\n                totalTax = CalculateAustraliaTax(order);\n                break;\n            case \"JP\":\n                totalTax = CalculateJapanTax(order);\n                break;\n            case \"IN\":\n                totalTax = CalculateIndiaTax(order);\n                break;\n            case \"BR\":\n                totalTax = CalculateBrazilTax(order);\n                break;\n            case \"MX\":\n                totalTax = CalculateMexicoTax(order);\n                break;\n            case \"SG\":\n                totalTax = CalculateSingaporeTax(order);\n                break;\n            case \"KR\":\n                totalTax = CalculateSouthKoreaTax(order);\n                break;\n            case \"CN\":\n                totalTax = CalculateChinaTax(order);\n                break;\n            case \"DE\":\n                totalTax = CalculateGermanyTax(order);\n                break;\n            case \"FR\":\n                totalTax = CalculateFranceTax(order);\n                break;\n            case \"IT\":\n                totalTax = CalculateItalyTax(order);\n                break;\n            case \"ES\":\n                totalTax = CalculateSpainTax(order);\n                break;\n            case \"NL\":\n                totalTax = CalculateNetherlandsTax(order);\n                break;\n            case \"SE\":\n                totalTax = CalculateSwedenTax(order);\n                break;\n            case \"NO\":\n                totalTax = CalculateNorwayTax(order);\n                break;\n            case \"CH\":\n                totalTax = CalculateSwitzerlandTax(order);\n                break;\n            default:\n                // Default tax calculation for unsupported countries\n                foreach (var item in order.Items)\n                {\n                    decimal itemPrice = item.Price * item.Quantity;\n                    totalTax += itemPrice * DEFAULT_TAX_RATE;\n                }\n                break;\n        }\n        \n        // Apply business order discount\n        if (order.IsBusinessOrder)\n        {\n            totalTax *= 0.9m; // 10% discount on tax for business orders\n        }\n        \n        // Apply customer type adjustments\n        totalTax = ApplyCustomerTypeAdjustments(totalTax, order);\n        \n        // Apply digital goods adjustment\n        totalTax += CalculateDigitalGoodsTax(order);\n        \n        // Apply seasonal adjustments\n        totalTax += CalculateSeasonalAdjustment(order);\n        \n        // Apply shipping tax\n        totalTax += CalculateShippingTax(order);\n        \n        return Math.Round(totalTax, 2);\n    }\n    \n    private decimal CalculateUSTax(Order order)\n    {\n        var stateTaxRates = GetStateTaxRates();\n        var categoryTaxRates = GetCategoryTaxRates();\n        \n        string state = order.CustomerId.Substring(0, 2);\n        decimal stateTaxRate = stateTaxRates.ContainsKey(state) ? stateTaxRates[state] : 0.05m;\n        \n        decimal totalTax = 0m;\n        foreach (var item in order.Items)\n        {\n            decimal itemPrice = item.Price * item.Quantity;\n            decimal categoryRate = categoryTaxRates.ContainsKey(item.Category) ? categoryTaxRates[item.Category] : 0m;\n            decimal itemTax = itemPrice * (stateTaxRate + categoryRate);\n            \n            // Special handling for luxury items over $1000\n            if (item.Category == \"luxury\" && itemPrice > 1000m)\n            {\n                itemTax += itemPrice * 0.02m; // Additional 2% luxury tax\n            }\n            \n            // Sales tax exemption for certain states on clothing under $110\n            if (item.Category == \"clothing\" && (state == \"NY\" || state == \"NJ\") && itemPrice < 110m)\n            {\n                itemTax = 0m;\n            }\n            \n            // Special handling for food items in certain states\n            if (item.Category == \"food\" && (state == \"CA\" || state == \"NY\" || state == \"WA\"))\n            {\n                itemTax = 0m;\n            }\n            \n            // Special internet sales tax for digital items\n            if (item.IsDigital && (state == \"CA\" || state == \"TX\" || state == \"FL\"))\n            {\n                itemTax += itemPrice * 0.015m;\n            }\n            \n            totalTax += itemTax;\n        }\n        \n        return totalTax;\n    }\n    \n    private decimal CalculateEUTax(Order order)\n    {\n        var countryVatRates = GetCountryVatRates();\n        \n        string countryCode = order.CustomerId.Substring(0, 2);\n        decimal vatRate = countryVatRates.ContainsKey(countryCode) ? countryVatRates[countryCode] : 0.20m;\n        \n        decimal totalTax = 0m;\n        foreach (var item in order.Items)\n        {\n            decimal itemPrice = item.Price * item.Quantity;\n            decimal itemVat = itemPrice * vatRate;\n            \n            // Reduced VAT for food items\n            if (item.Category == \"food\")\n            {\n                itemVat = itemPrice * (vatRate * 0.5m);\n            }\n            \n            // Zero VAT for books and newspapers in some countries\n            if ((item.Category == \"books\" || item.Category == \"newspapers\") && (countryCode == \"UK\" || countryCode == \"IE\"))\n            {\n                itemVat = 0m;\n            }\n            \n            // Special VAT rates for digital services\n            if (item.IsDigital && (countryCode == \"DE\" || countryCode == \"FR\" || countryCode == \"IT\"))\n            {\n                itemVat = itemPrice * 0.19m; // Digital services VAT\n            }\n            \n            // Environmental tax on certain categories\n            if (item.Category == \"electronics\" || item.Category == \"automotive\")\n            {\n                itemVat += itemPrice * 0.01m;\n            }\n            \n            totalTax += itemVat;\n        }\n        \n        return totalTax;\n    }\n    \n    private decimal CalculateCanadaTax(Order order)\n    {\n        var provinceTaxRates = GetProvinceTaxRates();\n        decimal gst = 0.05m;\n        \n        string province = order.CustomerId.Substring(0, 2);\n        decimal provincialTax = provinceTaxRates.ContainsKey(province) ? provinceTaxRates[province] : 0.08m;\n        \n        decimal totalTax = 0m;\n        foreach (var item in order.Items)\n        {\n            decimal itemPrice = item.Price * item.Quantity;\n            decimal itemTax = itemPrice * (gst + provincialTax);\n            \n            // No tax on essential food items\n            if (item.Category == \"food\" && item.Category != \"luxury\")\n            {\n                itemTax = 0m;\n            }\n            \n            // Special handling for books and magazines\n            if (item.Category == \"books\" || item.Category == \"magazines\")\n            {\n                itemTax = 0m;\n            }\n            \n            // Carbon tax for certain items\n            if ((item.Category == \"fuel\" || item.Category == \"automotive\") && province != \"AB\" && province != \"SK\")\n            {\n                itemTax += itemPrice * 0.02m;\n            }\n            \n            // Quebec specific tax adjustments\n            if (province == \"QC\" && item.Category == \"alcohol\")\n            {\n                itemTax += itemPrice * 0.05m;\n            }\n            \n            totalTax += itemTax;\n        }\n        \n        return totalTax;\n    }\n    \n    private decimal CalculateUKTax(Order order)\n    {\n        decimal vatRate = 0.20m;\n        decimal reducedVatRate = 0.05m;\n        \n        decimal totalTax = 0m;\n        foreach (var item in order.Items)\n        {\n            decimal itemPrice = item.Price * item.Quantity;\n            decimal itemTax = 0m;\n            \n            if (item.Category == \"food\" || item.Category == \"books\" || item.Category == \"newspapers\" || item.Category == \"children_clothing\")\n            {\n                itemTax = 0m; // Zero-rated items\n            }\n            else if (item.Category == \"energy\" || item.Category == \"domestic_fuel\" || item.Category == \"contraceptives\")\n            {\n                itemTax = itemPrice * reducedVatRate;\n            }\n            else if (item.Category == \"luxury\" && itemPrice > 2000m)\n            {\n                itemTax = itemPrice * (vatRate + 0.05m); // Luxury tax\n            }\n            else\n            {\n                itemTax = itemPrice * vatRate;\n            }\n            \n            // Brexit adjustment for imported goods\n            if (order.OrderType == \"import\" && item.Category != \"food\")\n            {\n                itemTax += itemPrice * 0.03m;\n            }\n            \n            totalTax += itemTax;\n        }\n        \n        return totalTax;\n    }\n    \n    private decimal CalculateAustraliaTax(Order order)\n    {\n        decimal gstRate = 0.10m;\n        \n        decimal totalTax = 0m;\n        foreach (var item in order.Items)\n        {\n            decimal itemPrice = item.Price * item.Quantity;\n            decimal itemTax = itemPrice * gstRate;\n            \n            // GST-free items\n            if (item.Category == \"food\" || item.Category == \"medical\" || item.Category == \"education\" || item.Category == \"exports\")\n            {\n                itemTax = 0m;\n            }\n            \n            // Input-taxed items\n            if (item.Category == \"residential_rent\" || item.Category == \"financial_services\")\n            {\n                itemTax = 0m;\n            }\n            \n            // Wine equalization tax\n            if (item.Category == \"wine\")\n            {\n                itemTax += itemPrice * 0.29m;\n            }\n            \n            // Luxury car tax\n            if (item.Category == \"luxury_cars\" && itemPrice > 68740m)\n            {\n                itemTax += (itemPrice - 68740m) * 0.33m;\n            }\n            \n            totalTax += itemTax;\n        }\n        \n        return totalTax;\n    }\n    \n    private decimal CalculateJapanTax(Order order)\n    {\n        decimal consumptionTax = 0.10m;\n        decimal reducedRate = 0.08m;\n        \n        decimal totalTax = 0m;\n        foreach (var item in order.Items)\n        {\n            decimal itemPrice = item.Price * item.Quantity;\n            decimal itemTax = 0m;\n            \n            if (item.Category == \"food\" || item.Category == \"beverages\" || item.Category == \"newspapers\")\n            {\n                itemTax = itemPrice * reducedRate;\n            }\n            else if (item.Category == \"restaurant\" && order.OrderType == \"takeout\")\n            {\n                itemTax = itemPrice * reducedRate;\n            }\n            else\n            {\n                itemTax = itemPrice * consumptionTax;\n            }\n            \n            totalTax += itemTax;\n        }\n        \n        return totalTax;\n    }\n    \n    private decimal CalculateIndiaTax(Order order)\n    {\n        var gstRates = GetIndiaGSTRates();\n        \n        decimal totalTax = 0m;\n        foreach (var item in order.Items)\n        {\n            decimal itemPrice = item.Price * item.Quantity;\n            decimal gstRate = gstRates.ContainsKey(item.Category) ? gstRates[item.Category] : 0.18m;\n            decimal itemTax = itemPrice * gstRate;\n            \n            // IGST for inter-state transactions\n            if (IsInterstateTransaction(order))\n            {\n                itemTax = itemPrice * gstRate; // IGST\n            }\n            else\n            {\n                itemTax = itemPrice * gstRate; // CGST + SGST\n            }\n            \n            // Cess on luxury and sin goods\n            if (item.Category == \"luxury_cars\" || item.Category == \"tobacco\" || item.Category == \"coal\")\n            {\n                itemTax += itemPrice * 0.15m;\n            }\n            \n            totalTax += itemTax;\n        }\n        \n        return totalTax;\n    }\n    \n    private decimal CalculateBrazilTax(Order order)\n    {\n        decimal icmsRate = 0.18m; // State tax\n        decimal ipiRate = 0.10m;  // Federal tax\n        decimal pisRate = 0.0165m; // PIS\n        decimal cofinsRate = 0.076m; // COFINS\n        \n        decimal totalTax = 0m;\n        foreach (var item in order.Items)\n        {\n            decimal itemPrice = item.Price * item.Quantity;\n            \n            // ICMS (state circulation tax)\n            decimal icmsTax = itemPrice * icmsRate;\n            \n            // IPI (federal excise tax) - only on manufactured goods\n            decimal ipiTax = 0m;\n            if (item.Category == \"electronics\" || item.Category == \"automotive\" || item.Category == \"cosmetics\")\n            {\n                ipiTax = itemPrice * ipiRate;\n            }\n            \n            // PIS and COFINS\n            decimal pisTax = itemPrice * pisRate;\n            decimal cofinsTax = itemPrice * cofinsRate;\n            \n            totalTax += icmsTax + ipiTax + pisTax + cofinsTax;\n        }\n        \n        return totalTax;\n    }\n    \n    private decimal CalculateMexicoTax(Order order)\n    {\n        decimal ivaRate = 0.16m; // Value Added Tax\n        decimal iepsRate = 0.08m; // Special tax on certain goods\n        \n        decimal totalTax = 0m;\n        foreach (var item in order.Items)\n        {\n            decimal itemPrice = item.Price * item.Quantity;\n            \n            // IVA (Value Added Tax)\n            decimal ivaTax = itemPrice * ivaRate;\n            \n            // IEPS (Special tax on production and services)\n            decimal iepsTax = 0m;\n            if (item.Category == \"alcohol\" || item.Category == \"tobacco\" || item.Category == \"fuel\" || item.Category == \"sugary_drinks\")\n            {\n                iepsTax = itemPrice * iepsRate;\n            }\n            \n            // Zero-rated items\n            if (item.Category == \"food\" || item.Category == \"medicine\" || item.Category == \"books\")\n            {\n                ivaTax = 0m;\n            }\n            \n            totalTax += ivaTax + iepsTax;\n        }\n        \n        return totalTax;\n    }\n    \n    // Additional country tax calculation methods (Singapore, South Korea, China, etc.)\n    // ... (similar implementations for other countries)\n    \n    private decimal CalculateDigitalGoodsTax(Order order)\n    {\n        decimal digitalTax = 0m;\n        foreach (var item in order.Items.Where(i => i.IsDigital))\n        {\n            decimal itemPrice = item.Price * item.Quantity;\n            digitalTax += itemPrice * DIGITAL_GOODS_TAX_RATE;\n        }\n        return digitalTax;\n    }\n    \n    private decimal ApplyCustomerTypeAdjustments(decimal tax, Order order)\n    {\n        switch (order.CustomerType.ToLower())\n        {\n            case \"government\":\n                return tax * 0.8m; // 20% discount for government customers\n            case \"nonprofit\":\n                return tax * 0.85m; // 15% discount for non-profit organizations\n            case \"student\":\n                return tax * 0.95m; // 5% discount for students\n            default:\n                return tax;\n        }\n    }\n    \n    private decimal CalculateSeasonalAdjustment(Order order)\n    {\n        int month = order.OrderDate.Month;\n        \n        // Holiday season surcharge (November-December)\n        if (month == 11 || month == 12)\n        {\n            return order.GetItemsTotal() * 0.005m; // 0.5% holiday surcharge\n        }\n        \n        return 0m;\n    }\n    \n    private decimal CalculateShippingTax(Order order)\n    {\n        if (order.ShippingCost > 0m)\n        {\n            // Apply tax on shipping based on country\n            switch (order.Country.ToUpper())\n            {\n                case \"US\":\n                case \"CA\":\n                    return order.ShippingCost * 0.08m;\n                case \"EU\":\n                case \"UK\":\n                    return order.ShippingCost * 0.20m;\n                default:\n                    return order.ShippingCost * 0.05m;\n            }\n        }\n        \n        return 0m;\n    }\n    \n    private bool IsInterstateTransaction(Order order)\n    {\n        // Simplified logic - check if buyer and seller are in different states\n        return order.CustomerId.Substring(2, 2) != \"MH\"; // Assuming seller is in Maharashtra\n    }\n    \n    // Tax rate dictionaries\n    private Dictionary<string, decimal> GetStateTaxRates()\n    {\n        return new Dictionary<string, decimal>\n        {\n            { \"CA\", 0.0725m }, { \"NY\", 0.045m }, { \"TX\", 0.0625m }, { \"FL\", 0.06m },\n            { \"WA\", 0.065m }, { \"OR\", 0m }, { \"MT\", 0m }, { \"NH\", 0m }, { \"DE\", 0m },\n            { \"NV\", 0.0685m }, { \"IL\", 0.0625m }, { \"PA\", 0.06m }, { \"OH\", 0.0575m },\n            { \"GA\", 0.04m }, { \"NC\", 0.0475m }, { \"VA\", 0.053m }, { \"MI\", 0.06m }\n        };\n    }\n    \n    private Dictionary<string, decimal> GetCategoryTaxRates()\n    {\n        return new Dictionary<string, decimal>\n        {\n            { \"luxury\", 0.03m }, { \"food\", 0m }, { \"electronics\", 0.01m },\n            { \"clothing\", 0.005m }, { \"automotive\", 0.02m }, { \"books\", 0m },\n            { \"medicine\", 0m }, { \"fuel\", 0.03m }, { \"alcohol\", 0.05m },\n            { \"tobacco\", 0.08m }, { \"jewelry\", 0.025m }\n        };\n    }\n    \n    private Dictionary<string, decimal> GetCountryVatRates()\n    {\n        return new Dictionary<string, decimal>\n        {\n            { \"DE\", 0.19m }, { \"FR\", 0.20m }, { \"IT\", 0.22m }, { \"ES\", 0.21m },\n            { \"NL\", 0.21m }, { \"BE\", 0.21m }, { \"AT\", 0.20m }, { \"SE\", 0.25m },\n            { \"DK\", 0.25m }, { \"FI\", 0.24m }, { \"NO\", 0.25m }, { \"PL\", 0.23m },\n            { \"IE\", 0.23m }, { \"PT\", 0.23m }, { \"GR\", 0.24m }, { \"CZ\", 0.21m }\n        };\n    }\n    \n    private Dictionary<string, decimal> GetProvinceTaxRates()\n    {\n        return new Dictionary<string, decimal>\n        {\n            { \"ON\", 0.08m }, { \"BC\", 0.07m }, { \"AB\", 0m }, { \"QC\", 0.09975m },\n            { \"NS\", 0.10m }, { \"NB\", 0.10m }, { \"MB\", 0.07m }, { \"SK\", 0.06m },\n            { \"PE\", 0.10m }, { \"NL\", 0.10m }, { \"YT\", 0m }, { \"NT\", 0m }, { \"NU\", 0m }\n        };\n    }\n    \n    private Dictionary<string, decimal> GetIndiaGSTRates()\n    {\n        return new Dictionary<string, decimal>\n        {\n            { \"food\", 0.05m }, { \"clothing\", 0.12m }, { \"electronics\", 0.18m },\n            { \"luxury\", 0.28m }, { \"automotive\", 0.28m }, { \"books\", 0m },\n            { \"medicine\", 0.05m }, { \"gold\", 0.03m }, { \"textiles\", 0.05m },\n            { \"petroleum\", 0m }, { \"alcohol\", 0m }, { \"tobacco\", 0.28m },\n            { \"cement\", 0.28m }, { \"coal\", 0.05m }\n        };\n    }\n    \n    // Placeholder methods for other countries (to keep the example shorter)\n    private decimal CalculateSingaporeTax(Order order) { return 0m; }\n    private decimal CalculateSouthKoreaTax(Order order) { return 0m; }\n    private decimal CalculateChinaTax(Order order) { return 0m; }\n    private decimal CalculateGermanyTax(Order order) { return 0m; }\n    private decimal CalculateFranceTax(Order order) { return 0m; }\n    private decimal CalculateItalyTax(Order order) { return 0m; }\n    private decimal CalculateSpainTax(Order order) { return 0m; }\n    private decimal CalculateNetherlandsTax(Order order) { return 0m; }\n    private decimal CalculateSwedenTax(Order order) { return 0m; }\n    private decimal CalculateNorwayTax(Order order) { return 0m; }\n    private decimal CalculateSwitzerlandTax(Order order) { return 0m; }\n}",
      "output": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class OrderItem\n{\n    public string ProductId { get; set; }\n    public decimal Price { get; set; }\n    public int Quantity { get; set; }\n    public string Category { get; set; }\n    public bool IsDigital { get; set; }\n    public decimal Weight { get; set; }\n    \n    public OrderItem(string productId, decimal price, int quantity, string category, bool isDigital = false, decimal weight = 0m)\n    {\n        ProductId = productId;\n        Price = price;\n        Quantity = quantity;\n        Category = category;\n        IsDigital = isDigital;\n        Weight = weight;\n    }\n    \n    public decimal GetTotalPrice()\n    {\n        return Price * Quantity;\n    }\n}\n\npublic class Order\n{\n    public string CustomerId { get; set; }\n    public List<OrderItem> Items { get; set; }\n    public string Country { get; set; }\n    public DateTime OrderDate { get; set; }\n    public string OrderType { get; set; }\n    public bool IsBusinessOrder { get; set; }\n    public string CustomerType { get; set; }\n    public decimal ShippingCost { get; set; }\n    \n    public Order(string customerId, List<OrderItem> items, string country, DateTime orderDate, string orderType, bool isBusinessOrder = false, string customerType = \"Individual\", decimal shippingCost = 0m)\n    {\n        CustomerId = customerId;\n        Items = items;\n        Country = country;\n        OrderDate = orderDate;\n        OrderType = orderType;\n        IsBusinessOrder = isBusinessOrder;\n        CustomerType = customerType;\n        ShippingCost = shippingCost;\n    }\n    \n    public decimal GetTotalAmount()\n    {\n        return Items.Sum(item => item.GetTotalPrice()) + ShippingCost;\n    }\n    \n    public decimal GetItemsTotal()\n    {\n        return Items.Sum(item => item.GetTotalPrice());\n    }\n}\n\npublic interface ITaxStrategy\n{\n    decimal CalculateTax(Order order);\n}\n\npublic abstract class BaseTaxStrategy : ITaxStrategy\n{\n    protected const decimal DIGITAL_GOODS_TAX_RATE = 0.02m;\n    \n    public abstract decimal CalculateTax(Order order);\n    \n    protected virtual decimal CalculateDigitalGoodsTax(Order order)\n    {\n        return order.Items.Where(i => i.IsDigital)\n            .Sum(item => item.GetTotalPrice() * DIGITAL_GOODS_TAX_RATE);\n    }\n    \n    protected virtual decimal ApplyBusinessDiscount(decimal tax, Order order)\n    {\n        return order.IsBusinessOrder ? tax * 0.9m : tax;\n    }\n    \n    protected virtual decimal ApplyCustomerTypeAdjustments(decimal tax, Order order)\n    {\n        return order.CustomerType.ToLower() switch\n        {\n            \"government\" => tax * 0.8m,  // 20% discount for government customers\n            \"nonprofit\" => tax * 0.85m,  // 15% discount for non-profit organizations\n            \"student\" => tax * 0.95m,    // 5% discount for students\n            _ => tax\n        };\n    }\n    \n    protected virtual decimal CalculateSeasonalAdjustment(Order order)\n    {\n        int month = order.OrderDate.Month;\n        \n        // Holiday season surcharge (November-December)\n        if (month == 11 || month == 12)\n        {\n            return order.GetItemsTotal() * 0.005m; // 0.5% holiday surcharge\n        }\n        \n        return 0m;\n    }\n    \n    protected virtual decimal CalculateShippingTax(Order order)\n    {\n        if (order.ShippingCost <= 0m) return 0m;\n        \n        return order.Country.ToUpper() switch\n        {\n            \"US\" or \"CA\" => order.ShippingCost * 0.08m,\n            \"EU\" or \"UK\" => order.ShippingCost * 0.20m,\n            _ => order.ShippingCost * 0.05m\n        };\n    }\n}\n\npublic class USTaxStrategy : BaseTaxStrategy\n{\n    public override decimal CalculateTax(Order order)\n    {\n        var stateTaxRates = GetStateTaxRates();\n        var categoryTaxRates = GetCategoryTaxRates();\n        \n        string state = order.CustomerId.Substring(0, 2);\n        decimal stateTaxRate = stateTaxRates.GetValueOrDefault(state, 0.05m);\n        \n        decimal totalTax = 0m;\n        foreach (var item in order.Items)\n        {\n            decimal itemPrice = item.GetTotalPrice();\n            decimal categoryRate = categoryTaxRates.GetValueOrDefault(item.Category, 0m);\n            decimal itemTax = itemPrice * (stateTaxRate + categoryRate);\n            \n            if (item.Category == \"luxury\" && itemPrice > 1000m)\n            {\n                itemTax += itemPrice * 0.02m;\n            }\n            \n            if (item.Category == \"clothing\" && (state == \"NY\" || state == \"NJ\") && itemPrice < 110m)\n            {\n                itemTax = 0m;\n            }\n            \n            if (item.Category == \"food\" && (state == \"CA\" || state == \"NY\" || state == \"WA\"))\n            {\n                itemTax = 0m;\n            }\n            \n            if (item.IsDigital && (state == \"CA\" || state == \"TX\" || state == \"FL\"))\n            {\n                itemTax += itemPrice * 0.015m;\n            }\n            \n            totalTax += itemTax;\n        }\n        \n        totalTax += CalculateDigitalGoodsTax(order);\n        totalTax += CalculateSeasonalAdjustment(order);\n        totalTax += CalculateShippingTax(order);\n        totalTax = ApplyCustomerTypeAdjustments(totalTax, order);\n        totalTax = ApplyBusinessDiscount(totalTax, order);\n        \n        return Math.Round(totalTax, 2);\n    }\n    \n    private Dictionary<string, decimal> GetStateTaxRates()\n    {\n        return new Dictionary<string, decimal>\n        {\n            { \"CA\", 0.0725m }, { \"NY\", 0.045m }, { \"TX\", 0.0625m }, { \"FL\", 0.06m },\n            { \"WA\", 0.065m }, { \"OR\", 0m }, { \"MT\", 0m }, { \"NH\", 0m }, { \"DE\", 0m },\n            { \"NV\", 0.0685m }, { \"IL\", 0.0625m }, { \"PA\", 0.06m }, { \"OH\", 0.0575m },\n            { \"GA\", 0.04m }, { \"NC\", 0.0475m }, { \"VA\", 0.053m }, { \"MI\", 0.06m }\n        };\n    }\n    \n    private Dictionary<string, decimal> GetCategoryTaxRates()\n    {\n        return new Dictionary<string, decimal>\n        {\n            { \"luxury\", 0.03m }, { \"food\", 0m }, { \"electronics\", 0.01m },\n            { \"clothing\", 0.005m }, { \"automotive\", 0.02m }, { \"books\", 0m },\n            { \"medicine\", 0m }, { \"fuel\", 0.03m }, { \"alcohol\", 0.05m },\n            { \"tobacco\", 0.08m }, { \"jewelry\", 0.025m }\n        };\n    }\n}\n\npublic class EUTaxStrategy : BaseTaxStrategy\n{\n    public override decimal CalculateTax(Order order)\n    {\n        var countryVatRates = GetCountryVatRates();\n        \n        string countryCode = order.CustomerId.Substring(0, 2);\n        decimal vatRate = countryVatRates.GetValueOrDefault(countryCode, 0.20m);\n        \n        decimal totalTax = 0m;\n        foreach (var item in order.Items)\n        {\n            decimal itemPrice = item.GetTotalPrice();\n            decimal itemVat = itemPrice * vatRate;\n            \n            if (item.Category == \"food\")\n            {\n                itemVat = itemPrice * (vatRate * 0.5m);\n            }\n            \n            if ((item.Category == \"books\" || item.Category == \"newspapers\") && (countryCode == \"UK\" || countryCode == \"IE\"))\n            {\n                itemVat = 0m;\n            }\n            \n            if (item.IsDigital && (countryCode == \"DE\" || countryCode == \"FR\" || countryCode == \"IT\"))\n            {\n                itemVat = itemPrice * 0.19m;\n            }\n            \n            if (item.Category == \"electronics\" || item.Category == \"automotive\")\n            {\n                itemVat += itemPrice * 0.01m;\n            }\n            \n            totalTax += itemVat;\n        }\n        \n        totalTax += CalculateDigitalGoodsTax(order);\n        totalTax += CalculateSeasonalAdjustment(order);\n        totalTax += CalculateShippingTax(order);\n        totalTax = ApplyCustomerTypeAdjustments(totalTax, order);\n        totalTax = ApplyBusinessDiscount(totalTax, order);\n        \n        return Math.Round(totalTax, 2);\n    }\n    \n    private Dictionary<string, decimal> GetCountryVatRates()\n    {\n        return new Dictionary<string, decimal>\n        {\n            { \"DE\", 0.19m }, { \"FR\", 0.20m }, { \"IT\", 0.22m }, { \"ES\", 0.21m },\n            { \"NL\", 0.21m }, { \"BE\", 0.21m }, { \"AT\", 0.20m }, { \"SE\", 0.25m },\n            { \"DK\", 0.25m }, { \"FI\", 0.24m }, { \"NO\", 0.25m }, { \"PL\", 0.23m },\n            { \"IE\", 0.23m }, { \"PT\", 0.23m }, { \"GR\", 0.24m }, { \"CZ\", 0.21m }\n        };\n    }\n}\n\npublic class CanadaTaxStrategy : BaseTaxStrategy\n{\n    public override decimal CalculateTax(Order order)\n    {\n        var provinceTaxRates = GetProvinceTaxRates();\n        decimal gst = 0.05m;\n        \n        string province = order.CustomerId.Substring(0, 2);\n        decimal provincialTax = provinceTaxRates.GetValueOrDefault(province, 0.08m);\n        \n        decimal totalTax = 0m;\n        foreach (var item in order.Items)\n        {\n            decimal itemPrice = item.GetTotalPrice();\n            decimal itemTax = itemPrice * (gst + provincialTax);\n            \n            if (item.Category == \"food\" && item.Category != \"luxury\")\n            {\n                itemTax = 0m;\n            }\n            \n            if (item.Category == \"books\" || item.Category == \"magazines\")\n            {\n                itemTax = 0m;\n            }\n            \n            if ((item.Category == \"fuel\" || item.Category == \"automotive\") && province != \"AB\" && province != \"SK\")\n            {\n                itemTax += itemPrice * 0.02m;\n            }\n            \n            if (province == \"QC\" && item.Category == \"alcohol\")\n            {\n                itemTax += itemPrice * 0.05m;\n            }\n            \n            totalTax += itemTax;\n        }\n        \n        totalTax += CalculateDigitalGoodsTax(order);\n        totalTax += CalculateSeasonalAdjustment(order);\n        totalTax += CalculateShippingTax(order);\n        totalTax = ApplyCustomerTypeAdjustments(totalTax, order);\n        totalTax = ApplyBusinessDiscount(totalTax, order);\n        \n        return Math.Round(totalTax, 2);\n    }\n    \n    private Dictionary<string, decimal> GetProvinceTaxRates()\n    {\n        return new Dictionary<string, decimal>\n        {\n            { \"ON\", 0.08m }, { \"BC\", 0.07m }, { \"AB\", 0m }, { \"QC\", 0.09975m },\n            { \"NS\", 0.10m }, { \"NB\", 0.10m }, { \"MB\", 0.07m }, { \"SK\", 0.06m },\n            { \"PE\", 0.10m }, { \"NL\", 0.10m }, { \"YT\", 0m }, { \"NT\", 0m }, { \"NU\", 0m }\n        };\n    }\n}\n\npublic class UKTaxStrategy : BaseTaxStrategy\n{\n    public override decimal CalculateTax(Order order)\n    {\n        decimal vatRate = 0.20m;\n        decimal reducedVatRate = 0.05m;\n        \n        decimal totalTax = 0m;\n        foreach (var item in order.Items)\n        {\n            decimal itemPrice = item.GetTotalPrice();\n            decimal itemTax = item.Category switch\n            {\n                \"food\" or \"books\" or \"newspapers\" or \"children_clothing\" => 0m,\n                \"energy\" or \"domestic_fuel\" or \"contraceptives\" => itemPrice * reducedVatRate,\n                \"luxury\" when itemPrice > 2000m => itemPrice * (vatRate + 0.05m),\n                _ => itemPrice * vatRate\n            };\n            \n            if (order.OrderType == \"import\" && item.Category != \"food\")\n            {\n                itemTax += itemPrice * 0.03m;\n            }\n            \n            totalTax += itemTax;\n        }\n        \n        totalTax += CalculateDigitalGoodsTax(order);\n        totalTax += CalculateSeasonalAdjustment(order);\n        totalTax += CalculateShippingTax(order);\n        totalTax = ApplyCustomerTypeAdjustments(totalTax, order);\n        totalTax = ApplyBusinessDiscount(totalTax, order);\n        \n        return Math.Round(totalTax, 2);\n    }\n}\n\npublic class AustraliaTaxStrategy : BaseTaxStrategy\n{\n    public override decimal CalculateTax(Order order)\n    {\n        decimal gstRate = 0.10m;\n        \n        decimal totalTax = 0m;\n        foreach (var item in order.Items)\n        {\n            decimal itemPrice = item.GetTotalPrice();\n            decimal itemTax = itemPrice * gstRate;\n            \n            if (item.Category is \"food\" or \"medical\" or \"education\" or \"exports\")\n            {\n                itemTax = 0m;\n            }\n            \n            if (item.Category is \"residential_rent\" or \"financial_services\")\n            {\n                itemTax = 0m;\n            }\n            \n            if (item.Category == \"wine\")\n            {\n                itemTax += itemPrice * 0.29m;\n            }\n            \n            if (item.Category == \"luxury_cars\" && itemPrice > 68740m)\n            {\n                itemTax += (itemPrice - 68740m) * 0.33m;\n            }\n            \n            totalTax += itemTax;\n        }\n        \n        totalTax += CalculateDigitalGoodsTax(order);\n        totalTax += CalculateSeasonalAdjustment(order);\n        totalTax += CalculateShippingTax(order);\n        totalTax = ApplyCustomerTypeAdjustments(totalTax, order);\n        totalTax = ApplyBusinessDiscount(totalTax, order);\n        \n        return Math.Round(totalTax, 2);\n    }\n}\n\npublic class JapanTaxStrategy : BaseTaxStrategy\n{\n    public override decimal CalculateTax(Order order)\n    {\n        decimal consumptionTax = 0.10m;\n        decimal reducedRate = 0.08m;\n        \n        decimal totalTax = 0m;\n        foreach (var item in order.Items)\n        {\n            decimal itemPrice = item.GetTotalPrice();\n            decimal itemTax = item.Category switch\n            {\n                \"food\" or \"beverages\" or \"newspapers\" => itemPrice * reducedRate,\n                \"restaurant\" when order.OrderType == \"takeout\" => itemPrice * reducedRate,\n                _ => itemPrice * consumptionTax\n            };\n            \n            totalTax += itemTax;\n        }\n        \n        totalTax += CalculateDigitalGoodsTax(order);\n        totalTax += CalculateSeasonalAdjustment(order);\n        totalTax += CalculateShippingTax(order);\n        totalTax = ApplyCustomerTypeAdjustments(totalTax, order);\n        totalTax = ApplyBusinessDiscount(totalTax, order);\n        \n        return Math.Round(totalTax, 2);\n    }\n}\n\npublic class IndiaTaxStrategy : BaseTaxStrategy\n{\n    public override decimal CalculateTax(Order order)\n    {\n        var gstRates = GetGSTRates();\n        \n        decimal totalTax = 0m;\n        foreach (var item in order.Items)\n        {\n            decimal itemPrice = item.GetTotalPrice();\n            decimal gstRate = gstRates.GetValueOrDefault(item.Category, 0.18m);\n            decimal itemTax = itemPrice * gstRate;\n            \n            if (item.Category is \"luxury_cars\" or \"tobacco\" or \"coal\")\n            {\n                itemTax += itemPrice * 0.15m;\n            }\n            \n            totalTax += itemTax;\n        }\n        \n        totalTax += CalculateDigitalGoodsTax(order);\n        totalTax += CalculateSeasonalAdjustment(order);\n        totalTax += CalculateShippingTax(order);\n        totalTax = ApplyCustomerTypeAdjustments(totalTax, order);\n        totalTax = ApplyBusinessDiscount(totalTax, order);\n        \n        return Math.Round(totalTax, 2);\n    }\n    \n    private Dictionary<string, decimal> GetGSTRates()\n    {\n        return new Dictionary<string, decimal>\n        {\n            { \"food\", 0.05m }, { \"clothing\", 0.12m }, { \"electronics\", 0.18m },\n            { \"luxury\", 0.28m }, { \"automotive\", 0.28m }, { \"books\", 0m },\n            { \"medicine\", 0.05m }, { \"gold\", 0.03m }, { \"textiles\", 0.05m },\n            { \"petroleum\", 0m }, { \"alcohol\", 0m }, { \"tobacco\", 0.28m },\n            { \"cement\", 0.28m }, { \"coal\", 0.05m }\n        };\n    }\n}\n\npublic class BrazilTaxStrategy : BaseTaxStrategy\n{\n    public override decimal CalculateTax(Order order)\n    {\n        decimal icmsRate = 0.18m;\n        decimal ipiRate = 0.10m;\n        decimal pisRate = 0.0165m;\n        decimal cofinsRate = 0.076m;\n        \n        decimal totalTax = 0m;\n        foreach (var item in order.Items)\n        {\n            decimal itemPrice = item.GetTotalPrice();\n            \n            decimal icmsTax = itemPrice * icmsRate;\n            \n            decimal ipiTax = item.Category is \"electronics\" or \"automotive\" or \"cosmetics\"\n                ? itemPrice * ipiRate\n                : 0m;\n            \n            decimal pisTax = itemPrice * pisRate;\n            decimal cofinsTax = itemPrice * cofinsRate;\n            \n            totalTax += icmsTax + ipiTax + pisTax + cofinsTax;\n        }\n        \n        totalTax += CalculateDigitalGoodsTax(order);\n        totalTax += CalculateSeasonalAdjustment(order);\n        totalTax += CalculateShippingTax(order);\n        totalTax = ApplyCustomerTypeAdjustments(totalTax, order);\n        totalTax = ApplyBusinessDiscount(totalTax, order);\n        \n        return Math.Round(totalTax, 2);\n    }\n}\n\npublic class MexicoTaxStrategy : BaseTaxStrategy\n{\n    public override decimal CalculateTax(Order order)\n    {\n        decimal ivaRate = 0.16m;\n        decimal iepsRate = 0.08m;\n        \n        decimal totalTax = 0m;\n        foreach (var item in order.Items)\n        {\n            decimal itemPrice = item.GetTotalPrice();\n            \n            decimal ivaTax = item.Category is \"food\" or \"medicine\" or \"books\"\n                ? 0m\n                : itemPrice * ivaRate;\n            \n            decimal iepsTax = item.Category is \"alcohol\" or \"tobacco\" or \"fuel\" or \"sugary_drinks\"\n                ? itemPrice * iepsRate\n                : 0m;\n            \n            totalTax += ivaTax + iepsTax;\n        }\n        \n        totalTax += CalculateDigitalGoodsTax(order);\n        totalTax += CalculateSeasonalAdjustment(order);\n        totalTax += CalculateShippingTax(order);\n        totalTax = ApplyCustomerTypeAdjustments(totalTax, order);\n        totalTax = ApplyBusinessDiscount(totalTax, order);\n        \n        return Math.Round(totalTax, 2);\n    }\n}\n\npublic class DefaultTaxStrategy : BaseTaxStrategy\n{\n    private const decimal DEFAULT_TAX_RATE = 0.05m;\n    \n    public override decimal CalculateTax(Order order)\n    {\n        decimal totalTax = order.Items.Sum(item => item.GetTotalPrice() * DEFAULT_TAX_RATE);\n        \n        totalTax += CalculateDigitalGoodsTax(order);\n        totalTax += CalculateSeasonalAdjustment(order);\n        totalTax += CalculateShippingTax(order);\n        totalTax = ApplyCustomerTypeAdjustments(totalTax, order);\n        totalTax = ApplyBusinessDiscount(totalTax, order);\n        \n        return Math.Round(totalTax, 2);\n    }\n}\n\npublic class TaxCalculator\n{\n    private readonly Dictionary<string, ITaxStrategy> _taxStrategies;\n    private ITaxStrategy _defaultStrategy;\n    \n    public TaxCalculator()\n    {\n        _taxStrategies = new Dictionary<string, ITaxStrategy>();\n        _defaultStrategy = new DefaultTaxStrategy();\n        InitializeStrategies();\n    }\n    \n    private void InitializeStrategies()\n    {\n        var strategies = new Dictionary<string, ITaxStrategy>\n        {\n            { \"US\", new USTaxStrategy() },\n            { \"EU\", new EUTaxStrategy() },\n            { \"CA\", new CanadaTaxStrategy() },\n            { \"UK\", new UKTaxStrategy() },\n            { \"AU\", new AustraliaTaxStrategy() },\n            { \"JP\", new JapanTaxStrategy() },\n            { \"IN\", new IndiaTaxStrategy() },\n            { \"BR\", new BrazilTaxStrategy() },\n            { \"MX\", new MexicoTaxStrategy() }\n        };\n        \n        foreach (var strategy in strategies)\n        {\n            _taxStrategies[strategy.Key] = strategy.Value;\n        }\n    }\n    \n    public void RegisterTaxStrategy(string country, ITaxStrategy strategy)\n    {\n        if (string.IsNullOrWhiteSpace(country))\n            throw new ArgumentException(\"Country cannot be null or empty\", nameof(country));\n        \n        if (strategy == null)\n            throw new ArgumentNullException(nameof(strategy));\n        \n        _taxStrategies[country.ToUpper()] = strategy;\n    }\n    \n    public bool UnregisterTaxStrategy(string country)\n    {\n        if (string.IsNullOrWhiteSpace(country))\n            return false;\n        \n        return _taxStrategies.Remove(country.ToUpper());\n    }\n    \n    public void SetDefaultStrategy(ITaxStrategy strategy)\n    {\n        _defaultStrategy = strategy ?? throw new ArgumentNullException(nameof(strategy));\n    }\n    \n    public decimal CalculateTax(Order order)\n    {\n        if (order == null)\n            throw new ArgumentNullException(nameof(order));\n        \n        var validationErrors = ValidateOrder(order);\n        if (validationErrors.Any())\n            throw new ArgumentException($\"Order validation failed: {string.Join(\", \", validationErrors)}\");\n        \n        var strategy = _taxStrategies.GetValueOrDefault(order.Country.ToUpper(), _defaultStrategy);\n        return strategy.CalculateTax(order);\n    }\n    \n    public HashSet<string> GetSupportedCountries()\n    {\n        return new HashSet<string>(_taxStrategies.Keys);\n    }\n    \n    public bool IsCountrySupported(string country)\n    {\n        return !string.IsNullOrWhiteSpace(country) && _taxStrategies.ContainsKey(country.ToUpper());\n    }\n    \n    public ITaxStrategy GetTaxStrategy(string country)\n    {\n        if (string.IsNullOrWhiteSpace(country))\n            return _defaultStrategy;\n        \n        return _taxStrategies.GetValueOrDefault(country.ToUpper(), _defaultStrategy);\n    }\n    \n    public Dictionary<string, decimal> CalculateTaxBreakdown(Order order)\n    {\n        if (order == null)\n            throw new ArgumentNullException(nameof(order));\n        \n        var strategy = _taxStrategies.GetValueOrDefault(order.Country.ToUpper(), _defaultStrategy);\n        \n        if (strategy is BaseTaxStrategy baseStrategy)\n        {\n            var totalTax = strategy.CalculateTax(order);\n            var digitalTax = baseStrategy.CalculateDigitalGoodsTax(order);\n            var seasonalAdjustment = baseStrategy.CalculateSeasonalAdjustment(order);\n            var shippingTax = baseStrategy.CalculateShippingTax(order);\n            \n            // Calculate pre-discount amounts\n            var preDiscountTax = totalTax / (order.IsBusinessOrder ? 0.9m : 1.0m);\n            var preCustomerTypeAdjustment = preDiscountTax / GetCustomerTypeMultiplier(order.CustomerType);\n            \n            var businessDiscount = order.IsBusinessOrder ? preDiscountTax - totalTax : 0m;\n            var customerTypeDiscount = preCustomerTypeAdjustment - preDiscountTax;\n            var baseTax = preCustomerTypeAdjustment - digitalTax - seasonalAdjustment - shippingTax;\n            \n            return new Dictionary<string, decimal>\n            {\n                { \"base_tax\", Math.Round(baseTax, 2) },\n                { \"digital_goods_tax\", Math.Round(digitalTax, 2) },\n                { \"seasonal_adjustment\", Math.Round(seasonalAdjustment, 2) },\n                { \"shipping_tax\", Math.Round(shippingTax, 2) },\n                { \"customer_type_discount\", Math.Round(customerTypeDiscount, 2) },\n                { \"business_discount\", Math.Round(businessDiscount, 2) },\n                { \"total_tax\", Math.Round(totalTax, 2) }\n            };\n        }\n        \n        return new Dictionary<string, decimal>\n        {\n            { \"total_tax\", Math.Round(strategy.CalculateTax(order), 2) }\n        };\n    }\n    \n    public List<string> ValidateOrder(Order order)\n    {\n        var errors = new List<string>();\n        \n        if (order == null)\n        {\n            errors.Add(\"Order cannot be null\");\n            return errors;\n        }\n        \n        if (string.IsNullOrWhiteSpace(order.CustomerId))\n            errors.Add(\"Customer ID cannot be blank\");\n        \n        if (string.IsNullOrWhiteSpace(order.Country))\n            errors.Add(\"Country cannot be blank\");\n        \n        if (order.Items == null || !order.Items.Any())\n            errors.Add(\"Order must contain at least one item\");\n        else\n        {\n            for (int i = 0; i < order.Items.Count; i++)\n            {\n                var item = order.Items[i];\n                if (item.Price < 0)\n                    errors.Add($\"Item {i + 1} ({item.ProductId}) has negative price\");\n                \n                if (item.Quantity <= 0)\n                    errors.Add($\"Item {i + 1} ({item.ProductId}) has invalid quantity\");\n                \n                if (string.IsNullOrWhiteSpace(item.ProductId))\n                    errors.Add($\"Item {i + 1} has blank product ID\");\n                \n                if (string.IsNullOrWhiteSpace(item.Category))\n                    errors.Add($\"Item {i + 1} ({item.ProductId}) has blank category\");\n            }\n        }\n        \n        if (order.ShippingCost < 0)\n            errors.Add(\"Shipping cost cannot be negative\");\n        \n        return errors;\n    }\n    \n    private decimal GetCustomerTypeMultiplier(string customerType)\n    {\n        return customerType?.ToLower() switch\n        {\n            \"government\" => 0.8m,\n            \"nonprofit\" => 0.85m,\n            \"student\" => 0.95m,\n            _ => 1.0m\n        };\n    }\n    \n    public int GetRegisteredStrategiesCount()\n    {\n        return _taxStrategies.Count;\n    }\n    \n    public string GetDefaultStrategyType()\n    {\n        return _defaultStrategy.GetType().Name;\n    }\n}\n\n// Additional strategy classes can be easily added\npublic class SingaporeTaxStrategy : BaseTaxStrategy\n{\n    public override decimal CalculateTax(Order order)\n    {\n        decimal gstRate = 0.08m;\n        \n        decimal totalTax = 0m;\n        foreach (var item in order.Items)\n        {\n            decimal itemPrice = item.GetTotalPrice();\n            decimal itemTax = item.Category is \"exports\" or \"international_services\" or \"residential_property\" or \"financial_services\" or \"digital_services\"\n                ? 0m\n                : itemPrice * gstRate;\n            \n            totalTax += itemTax;\n        }\n        \n        totalTax += CalculateDigitalGoodsTax(order);\n        totalTax += CalculateSeasonalAdjustment(order);\n        totalTax += CalculateShippingTax(order);\n        totalTax = ApplyCustomerTypeAdjustments(totalTax, order);\n        totalTax = ApplyBusinessDiscount(totalTax, order);\n        \n        return Math.Round(totalTax, 2);\n    }\n}\n\npublic class SouthKoreaTaxStrategy : BaseTaxStrategy\n{\n    public override decimal CalculateTax(Order order)\n    {\n        decimal vatRate = 0.10m;\n        \n        decimal totalTax = 0m;\n        foreach (var item in order.Items)\n        {\n            decimal itemPrice = item.GetTotalPrice();\n            decimal itemTax = item.Category is \"exports\" or \"medical\" or \"education\"\n                ? 0m\n                : itemPrice * vatRate;\n            \n            if (item.Category == \"luxury\" && itemPrice > 5000m)\n            {\n                itemTax += itemPrice * 0.20m;\n            }\n            \n            totalTax += itemTax;\n        }\n        \n        totalTax += CalculateDigitalGoodsTax(order);\n        totalTax += CalculateSeasonalAdjustment(order);\n        totalTax += CalculateShippingTax(order);\n        totalTax = ApplyCustomerTypeAdjustments(totalTax, order);\n        totalTax = ApplyBusinessDiscount(totalTax, order);\n        \n        return Math.Round(totalTax, 2);\n    }\n}\n\n// Example usage and factory pattern for creating strategies\npublic static class TaxStrategyFactory\n{\n    public static ITaxStrategy CreateStrategy(string country)\n    {\n        return country.ToUpper() switch\n        {\n            \"US\" => new USTaxStrategy(),\n            \"EU\" => new EUTaxStrategy(),\n            \"CA\" => new CanadaTaxStrategy(),\n            \"UK\" => new UKTaxStrategy(),\n            \"AU\" => new AustraliaTaxStrategy(),\n            \"JP\" => new JapanTaxStrategy(),\n            \"IN\" => new IndiaTaxStrategy(),\n            \"BR\" => new BrazilTaxStrategy(),\n            \"MX\" => new MexicoTaxStrategy(),\n            \"SG\" => new SingaporeTaxStrategy(),\n            \"KR\" => new SouthKoreaTaxStrategy(),\n            _ => new DefaultTaxStrategy()\n        };\n    }\n    \n    public static List<string> GetAvailableCountries()\n    {\n        return new List<string> { \"US\", \"EU\", \"CA\", \"UK\", \"AU\", \"JP\", \"IN\", \"BR\", \"MX\", \"SG\", \"KR\" };\n    }\n}",
      "level": "HARD",
      "language": "CSHARP",
      "violation": "OCP",
      "description": "Order tax calculation system"
    },
    {
        "input": "using System;\nusing System.Collections.Generic;\nusing System.Text.RegularExpressions;\nusing System.Linq;\n\npublic class Content\n{\n    public string Text { get; set; }\n    public string ContentType { get; set; }\n    public Dictionary<string, string> Metadata { get; set; }\n    public string ContentId { get; set; }\n    public long Timestamp { get; set; }\n    public string Source { get; set; }\n    public int Priority { get; set; }\n    public List<string> Tags { get; set; }\n    public bool IsPublic { get; set; }\n    \n    public Content(string text, string contentType, Dictionary<string, string> metadata, \n                   string contentId, long timestamp, string source, int priority)\n    {\n        Text = text;\n        ContentType = contentType;\n        Metadata = metadata ?? new Dictionary<string, string>();\n        ContentId = contentId;\n        Timestamp = timestamp;\n        Source = source;\n        Priority = priority;\n        Tags = new List<string>();\n        IsPublic = false;\n    }\n    \n    public void AddTag(string tag)\n    {\n        if (!Tags.Contains(tag))\n        {\n            Tags.Add(tag);\n        }\n    }\n    \n    public void SetPublic(bool isPublic)\n    {\n        IsPublic = isPublic;\n    }\n}\n\npublic class ContentFilter\n{\n    private readonly Dictionary<string, int> _filterStats;\n    private readonly HashSet<string> _bannedWords;\n    private readonly Regex _emailPattern;\n    private readonly Regex _phonePattern;\n    private readonly Regex _urlPattern;\n    private readonly Regex _creditCardPattern;\n    private readonly Regex _ssnPattern;\n    private int _totalFiltered;\n    \n    public ContentFilter()\n    {\n        _filterStats = new Dictionary<string, int>();\n        _bannedWords = new HashSet<string>\n        {\n            \"badword1\", \"badword2\", \"badword3\", \n            \"inappropriate\", \"offensive\", \"spam\", \"scam\"\n        };\n        _emailPattern = new Regex(@\"[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}\", RegexOptions.Compiled);\n        _phonePattern = new Regex(@\"\\b\\d{3}-\\d{3}-\\d{4}\\b|\\(\\d{3}\\)\\s*\\d{3}-\\d{4}\", RegexOptions.Compiled);\n        _urlPattern = new Regex(@\"https?://[^\\s]+\", RegexOptions.Compiled);\n        _creditCardPattern = new Regex(@\"\\b\\d{4}[\\s-]?\\d{4}[\\s-]?\\d{4}[\\s-]?\\d{4}\\b\", RegexOptions.Compiled);\n        _ssnPattern = new Regex(@\"\\d{3}-\\d{2}-\\d{4}\", RegexOptions.Compiled);\n        _totalFiltered = 0;\n    }\n    \n    public string FilterContent(Content content)\n    {\n        string filteredText = content.Text;\n        string contentType = content.ContentType;\n        Dictionary<string, string> metadata = content.Metadata;\n        \n        switch (contentType)\n        {\n            case \"email\":\n                filteredText = FilterEmailContent(filteredText, metadata);\n                UpdateStats(\"email\");\n                break;\n                \n            case \"social\":\n                filteredText = FilterSocialContent(filteredText, metadata);\n                UpdateStats(\"social\");\n                break;\n                \n            case \"comment\":\n                filteredText = FilterCommentContent(filteredText, metadata);\n                UpdateStats(\"comment\");\n                break;\n                \n            case \"blog\":\n                filteredText = FilterBlogContent(filteredText, metadata);\n                UpdateStats(\"blog\");\n                break;\n                \n            case \"news\":\n                filteredText = FilterNewsContent(filteredText, metadata);\n                UpdateStats(\"news\");\n                break;\n                \n            case \"forum\":\n                filteredText = FilterForumContent(filteredText, metadata);\n                UpdateStats(\"forum\");\n                break;\n                \n            case \"chat\":\n                filteredText = FilterChatContent(filteredText, metadata);\n                UpdateStats(\"chat\");\n                break;\n                \n            case \"review\":\n                filteredText = FilterReviewContent(filteredText, metadata);\n                UpdateStats(\"review\");\n                break;\n                \n            case \"article\":\n                filteredText = FilterArticleContent(filteredText, metadata);\n                UpdateStats(\"article\");\n                break;\n                \n            case \"video\":\n                filteredText = FilterVideoContent(filteredText, metadata);\n                UpdateStats(\"video\");\n                break;\n                \n            default:\n                filteredText = FilterGenericContent(filteredText, metadata);\n                UpdateStats(\"generic\");\n                break;\n        }\n        \n        // Apply common filters to all content types\n        filteredText = RemoveCommonProfanity(filteredText);\n        filteredText = RemovePersonalInfo(filteredText);\n        filteredText = FilterUrls(filteredText, metadata);\n        filteredText = FilterEmails(filteredText, metadata);\n        filteredText = FilterPhoneNumbers(filteredText, metadata);\n        \n        _totalFiltered++;\n        content.Text = filteredText;\n        content.AddTag(\"filtered\");\n        \n        return filteredText;\n    }\n    \n    private string FilterEmailContent(string text, Dictionary<string, string> metadata)\n    {\n        string audience = metadata.GetValueOrDefault(\"audience\", \"general\");\n        \n        text = ApplyConfidentialityFilter(text, audience);\n        text = RemoveEmailHeaders(text);\n        text = FilterDepartmentInfo(text, metadata.GetValueOrDefault(\"department\", \"unknown\"));\n        \n        return text;\n    }\n    \n    private string FilterSocialContent(string text, Dictionary<string, string> metadata)\n    {\n        string platform = metadata.GetValueOrDefault(\"platform\", \"general\");\n        string audience = metadata.GetValueOrDefault(\"audience\", \"general\");\n        \n        text = FilterPlatformSpecificContent(text, platform);\n        text = FilterAgeRestrictedContent(text, audience);\n        text = AddVerificationLabels(text, metadata.GetValueOrDefault(\"userType\", \"regular\"));\n        \n        return text;\n    }\n    \n    private string FilterCommentContent(string text, Dictionary<string, string> metadata)\n    {\n        string context = metadata.GetValueOrDefault(\"context\", \"general\");\n        \n        text = FilterContextSpecificLanguage(text, context);\n        text = ModerateExtremeLanguage(text, metadata.GetValueOrDefault(\"moderation\", \"standard\"));\n        \n        return text;\n    }\n    \n    private string FilterBlogContent(string text, Dictionary<string, string> metadata)\n    {\n        string category = metadata.GetValueOrDefault(\"category\", \"general\");\n        \n        text = FilterCategorySpecificTerms(text, category);\n        text = FilterAgeInappropriateContent(text, metadata.GetValueOrDefault(\"ageRating\", \"all\"));\n        \n        return text;\n    }\n    \n    private string FilterNewsContent(string text, Dictionary<string, string> metadata)\n    {\n        string verification = metadata.GetValueOrDefault(\"verification\", \"unverified\");\n        string source = metadata.GetValueOrDefault(\"source\", \"unknown\");\n        \n        text = AddVerificationLabels(text, verification);\n        text = AddSourceLabels(text, source);\n        text = FilterNewsSpecificTerms(text);\n        \n        return text;\n    }\n    \n    private string FilterForumContent(string text, Dictionary<string, string> metadata)\n    {\n        string forumType = metadata.GetValueOrDefault(\"forumType\", \"general\");\n        string userLevel = metadata.GetValueOrDefault(\"userLevel\", \"novice\");\n        \n        text = FilterForumSpecificTerms(text, forumType);\n        text = AddUserLevelLabels(text, userLevel);\n        \n        return text;\n    }\n    \n    private string FilterChatContent(string text, Dictionary<string, string> metadata)\n    {\n        string chatType = metadata.GetValueOrDefault(\"chatType\", \"public\");\n        string encryption = metadata.GetValueOrDefault(\"encryption\", \"none\");\n        \n        text = FilterChatSpecificContent(text, chatType);\n        text = FilterCredentials(text, encryption);\n        text = FilterChatAbbreviations(text);\n        \n        return text;\n    }\n    \n    private string FilterReviewContent(string text, Dictionary<string, string> metadata)\n    {\n        string productType = metadata.GetValueOrDefault(\"productType\", \"general\");\n        string reviewerStatus = metadata.GetValueOrDefault(\"reviewerStatus\", \"regular\");\n        \n        text = FilterProductSpecificConcerns(text, productType);\n        text = AddReviewerStatusLabels(text, reviewerStatus);\n        text = ModerateExtremeOpinions(text);\n        \n        return text;\n    }\n    \n    private string FilterArticleContent(string text, Dictionary<string, string> metadata)\n    {\n        string publication = metadata.GetValueOrDefault(\"publication\", \"unknown\");\n        string category = metadata.GetValueOrDefault(\"category\", \"general\");\n        \n        text = AddPublicationLabels(text, publication);\n        text = AddCategoryLabels(text, category);\n        \n        return text;\n    }\n    \n    private string FilterVideoContent(string text, Dictionary<string, string> metadata)\n    {\n        string platform = metadata.GetValueOrDefault(\"platform\", \"general\");\n        string contentType = metadata.GetValueOrDefault(\"contentType\", \"general\");\n        \n        text = FilterVideoSpecificContent(text, platform);\n        text = AddContentTypeLabels(text, contentType);\n        \n        return text;\n    }\n    \n    private string FilterGenericContent(string text, Dictionary<string, string> metadata)\n    {\n        string contentSource = metadata.GetValueOrDefault(\"source\", \"unknown\");\n        \n        text = AddSourceLabels(text, contentSource);\n        text = FilterCommercialContent(text);\n        \n        return text;\n    }\n    \n    private string ApplyConfidentialityFilter(string text, string audience)\n    {\n        if (audience == \"public\")\n        {\n            text = Regex.Replace(text, @\"(?i)confidential:\", \"[REDACTED]\");\n            text = Regex.Replace(text, @\"(?i)internal use only\", \"[INTERNAL]\");\n            text = Regex.Replace(text, @\"(?i)proprietary\", \"[CONFIDENTIAL]\");\n        }\n        return text;\n    }\n    \n    private string RemoveEmailHeaders(string text)\n    {\n        text = Regex.Replace(text, @\"(?i)from:\\s.*?\\n\", \"\");\n        text = Regex.Replace(text, @\"(?i)to:\\s.*?\\n\", \"\");\n        text = Regex.Replace(text, @\"(?i)cc:\\s.*?\\n\", \"\");\n        text = Regex.Replace(text, @\"(?i)subject:\\s.*?\\n\", \"\");\n        return text;\n    }\n    \n    private string FilterDepartmentInfo(string text, string department)\n    {\n        return department switch\n        {\n            \"hr\" => Regex.Replace(text, @\"(?i)salary|compensation|benefits\", \"[HR-INFO]\"),\n            \"legal\" => Regex.Replace(text, @\"(?i)lawsuit|litigation|settlement\", \"[LEGAL-MATTER]\"),\n            _ => text\n        };\n    }\n    \n    private string FilterPlatformSpecificContent(string text, string platform)\n    {\n        return platform switch\n        {\n            \"twitter\" => Regex.Replace(Regex.Replace(text, @\"@([A-Za-z0-9_]+)\", \"[USERNAME]\"), @\"#([A-Za-z0-9_]+)\", \"[HASHTAG]\"),\n            \"facebook\" => Regex.Replace(text, @\"@\\[[^\\]]+\\]\", \"[NAME]\"),\n            \"instagram\" => Regex.Replace(text, @\"@([A-Za-z0-9_.]+)\", \"[HANDLE]\"),\n            _ => text\n        };\n    }\n    \n    private string FilterAgeRestrictedContent(string text, string audience)\n    {\n        return audience switch\n        {\n            \"minor\" => Regex.Replace(text, @\"(?i)alcohol|beer|wine|gambling|casino\", \"[AGE-RESTRICTED]\"),\n            _ => text\n        };\n    }\n    \n    private string AddVerificationLabels(string text, string userType)\n    {\n        return userType switch\n        {\n            \"verified\" => $\"[VERIFIED] {text}\",\n            _ => text\n        };\n    }\n    \n    private string FilterContextSpecificLanguage(string text, string context)\n    {\n        return context switch\n        {\n            \"news\" => Regex.Replace(text, @\"(?i)allegedly|reportedly|rumored\", \"[STATEMENT]\"),\n            \"review\" => Regex.Replace(text, @\"(?i)terrible|awful|worst ever\", \"not satisfactory\"),\n            \"political\" => Regex.Replace(text, @\"(?i)corrupt|scandal|investigation\", \"[POLITICAL-CLAIM]\"),\n            _ => text\n        };\n    }\n    \n    private string ModerateExtremeLanguage(string text, string moderation)\n    {\n        return moderation switch\n        {\n            \"strict\" => Regex.Replace(text, @\"(?i)disagree|wrong|false\", \"alternative view\"),\n            _ => text\n        };\n    }\n    \n    private string FilterCategorySpecificTerms(string text, string category)\n    {\n        return category switch\n        {\n            \"technology\" => Regex.Replace(text, @\"(?i)hack|exploit|vulnerability\", \"[TECH-ISSUE]\"),\n            \"health\" => Regex.Replace(text, @\"(?i)cure|treatment|medication\", \"[MEDICAL-INFO]\"),\n            _ => text\n        };\n    }\n    \n    private string FilterAgeInappropriateContent(string text, string ageRating)\n    {\n        return ageRating switch\n        {\n            \"teen\" => Regex.Replace(text, @\"(?i)violence|graphic|explicit\", \"[MATURE-CONTENT]\"),\n            _ => text\n        };\n    }\n    \n    private string AddSourceLabels(string text, string source)\n    {\n        return source switch\n        {\n            \"social\" => $\"[SOCIAL-SOURCE] {text}\",\n            \"user-generated\" => $\"[USER-CONTENT] {text}\",\n            _ => text\n        };\n    }\n    \n    private string FilterNewsSpecificTerms(string text)\n    {\n        return Regex.Replace(text, @\"(?i)exclusive:|scoop:\", \"[STORY]:\");\n    }\n    \n    private string FilterForumSpecificTerms(string text, string forumType)\n    {\n        return forumType switch\n        {\n            \"technical\" => Regex.Replace(text, @\"(?i)bug|error|crash\", \"[ISSUE]\"),\n            \"gaming\" => Regex.Replace(text, @\"(?i)cheat|hack|mod\", \"[GAME-MODIFICATION]\"),\n            _ => text\n        };\n    }\n    \n    private string AddUserLevelLabels(string text, string userLevel)\n    {\n        return userLevel switch\n        {\n            \"newbie\" => $\"[NEW-USER] {text}\",\n            \"expert\" => $\"[EXPERT] {text}\",\n            _ => text\n        };\n    }\n    \n    private string FilterChatSpecificContent(string text, string chatType)\n    {\n        return chatType switch\n        {\n            \"public\" => Regex.Replace(text, @\"(?i)private|personal|secret\", \"[PRIVATE-INFO]\"),\n            _ => text\n        };\n    }\n    \n    private string FilterCredentials(string text, string encryption)\n    {\n        return encryption switch\n        {\n            \"none\" => Regex.Replace(text, @\"(?i)password|token|key\", \"[CREDENTIALS]\"),\n            _ => text\n        };\n    }\n    \n    private string FilterChatAbbreviations(string text)\n    {\n        return Regex.Replace(text, @\"(?i)wtf|omfg|stfu|lmao\", \"[ABBREV]\");\n    }\n    \n    private string FilterProductSpecificConcerns(string text, string productType)\n    {\n        return productType switch\n        {\n            \"restaurant\" => Regex.Replace(text, @\"(?i)food poisoning|sick|illness\", \"[HEALTH-CONCERN]\"),\n            \"hotel\" => Regex.Replace(text, @\"(?i)dirty|filthy|disgusting\", \"needs improvement\"),\n            _ => text\n        };\n    }\n    \n    private string AddReviewerStatusLabels(string text, string reviewerStatus)\n    {\n        return reviewerStatus switch\n        {\n            \"verified\" => $\"[VERIFIED-REVIEW] {text}\",\n            _ => text\n        };\n    }\n    \n    private string ModerateExtremeOpinions(string text)\n    {\n        return Regex.Replace(text, @\"(?i)love it|hate it|perfect|disaster\", \"[OPINION]\");\n    }\n    \n    private string AddPublicationLabels(string text, string publication)\n    {\n        return publication switch\n        {\n            \"tabloid\" => $\"[TABLOID] {text}\",\n            _ => text\n        };\n    }\n    \n    private string AddCategoryLabels(string text, string category)\n    {\n        return category switch\n        {\n            \"opinion\" => $\"[OPINION-PIECE] {text}\",\n            _ => text\n        };\n    }\n    \n    private string FilterVideoSpecificContent(string text, string platform)\n    {\n        return platform switch\n        {\n            \"youtube\" => Regex.Replace(text, @\"(?i)like and subscribe\", \"[ENGAGEMENT-REQUEST]\"),\n            _ => text\n        };\n    }\n    \n    private string AddContentTypeLabels(string text, string contentType)\n    {\n        return contentType switch\n        {\n            \"tutorial\" => Regex.Replace(text, @\"(?i)step by step|how to\", \"[TUTORIAL]\"),\n            _ => text\n        };\n    }\n    \n    private string FilterCommercialContent(string text)\n    {\n        return Regex.Replace(text, @\"(?i)spam|advertisement|promotion\", \"[COMMERCIAL]\");\n    }\n    \n    private string RemoveCommonProfanity(string text)\n    {\n        return _bannedWords.Aggregate(text, (current, word) =>\n            Regex.Replace(current, $@\"(?i)\\b{Regex.Escape(word)}\\b\", \"[INAPPROPRIATE]\"));\n    }\n    \n    private string RemovePersonalInfo(string text)\n    {\n        text = _ssnPattern.Replace(text, \"[SSN]\");\n        text = _creditCardPattern.Replace(text, \"[CREDIT_CARD]\");\n        text = Regex.Replace(text, @\"\\b(?:\\d{1,3}\\.){3}\\d{1,3}\\b\", \"[IP_ADDRESS]\");\n        return text;\n    }\n    \n    private string FilterUrls(string text, Dictionary<string, string> metadata)\n    {\n        string urlPolicy = metadata.GetValueOrDefault(\"urlPolicy\", \"allow\");\n        return urlPolicy switch\n        {\n            \"block\" => _urlPattern.Replace(text, \"[URL]\"),\n            _ => text\n        };\n    }\n    \n    private string FilterEmails(string text, Dictionary<string, string> metadata)\n    {\n        string emailPolicy = metadata.GetValueOrDefault(\"emailPolicy\", \"allow\");\n        return emailPolicy switch\n        {\n            \"block\" => _emailPattern.Replace(text, \"[EMAIL]\"),\n            _ => text\n        };\n    }\n    \n    private string FilterPhoneNumbers(string text, Dictionary<string, string> metadata)\n    {\n        string phonePolicy = metadata.GetValueOrDefault(\"phonePolicy\", \"allow\");\n        return phonePolicy switch\n        {\n            \"block\" => _phonePattern.Replace(text, \"[PHONE]\"),\n            _ => text\n        };\n    }\n    \n    private void UpdateStats(string contentType)\n    {\n        _filterStats[contentType] = _filterStats.GetValueOrDefault(contentType, 0) + 1;\n    }\n    \n    public Dictionary<string, int> GetFilterStats()\n    {\n        return new Dictionary<string, int>(_filterStats);\n    }\n    \n    public int GetTotalFiltered()\n    {\n        return _totalFiltered;\n    }\n    \n    public void AddBannedWord(string word)\n    {\n        _bannedWords.Add(word.ToLower());\n    }\n    \n    public void RemoveBannedWord(string word)\n    {\n        _bannedWords.Remove(word.ToLower());\n    }\n    \n    public HashSet<string> GetBannedWords()\n    {\n        return new HashSet<string>(_bannedWords);\n    }\n}",
          "output": "using System;\nusing System.Collections.Generic;\nusing System.Text.RegularExpressions;\nusing System.Linq;\n\npublic class Content\n{\n    public string Text { get; set; }\n    public string ContentType { get; set; }\n    public Dictionary<string, string> Metadata { get; set; }\n    public string ContentId { get; set; }\n    public long Timestamp { get; set; }\n    public string Source { get; set; }\n    public int Priority { get; set; }\n    public List<string> Tags { get; set; }\n    public bool IsPublic { get; set; }\n    \n    public Content(string text, string contentType, Dictionary<string, string> metadata, \n                   string contentId, long timestamp, string source, int priority)\n    {\n        Text = text;\n        ContentType = contentType;\n        Metadata = metadata ?? new Dictionary<string, string>();\n        ContentId = contentId;\n        Timestamp = timestamp;\n        Source = source;\n        Priority = priority;\n        Tags = new List<string>();\n        IsPublic = false;\n    }\n    \n    public void AddTag(string tag)\n    {\n        if (!Tags.Contains(tag))\n        {\n            Tags.Add(tag);\n        }\n    }\n    \n    public void SetPublic(bool isPublic)\n    {\n        IsPublic = isPublic;\n    }\n}\n\npublic interface IContentFilterStrategy\n{\n    string Filter(string text, Dictionary<string, string> metadata);\n}\n\npublic class EmailContentFilter : IContentFilterStrategy\n{\n    public string Filter(string text, Dictionary<string, string> metadata)\n    {\n        string audience = metadata.GetValueOrDefault(\"audience\", \"general\");\n        \n        text = ApplyConfidentialityFilter(text, audience);\n        text = RemoveEmailHeaders(text);\n        text = FilterDepartmentInfo(text, metadata.GetValueOrDefault(\"department\", \"unknown\"));\n        \n        return text;\n    }\n    \n    private string ApplyConfidentialityFilter(string text, string audience)\n    {\n        if (audience == \"public\")\n        {\n            text = Regex.Replace(text, @\"(?i)confidential:\", \"[REDACTED]\");\n            text = Regex.Replace(text, @\"(?i)internal use only\", \"[INTERNAL]\");\n            text = Regex.Replace(text, @\"(?i)proprietary\", \"[CONFIDENTIAL]\");\n        }\n        return text;\n    }\n    \n    private string RemoveEmailHeaders(string text)\n    {\n        text = Regex.Replace(text, @\"(?i)from:\\s.*?\\n\", \"\");\n        text = Regex.Replace(text, @\"(?i)to:\\s.*?\\n\", \"\");\n        text = Regex.Replace(text, @\"(?i)cc:\\s.*?\\n\", \"\");\n        text = Regex.Replace(text, @\"(?i)subject:\\s.*?\\n\", \"\");\n        return text;\n    }\n    \n    private string FilterDepartmentInfo(string text, string department)\n    {\n        return department switch\n        {\n            \"hr\" => Regex.Replace(text, @\"(?i)salary|compensation|benefits\", \"[HR-INFO]\"),\n            \"legal\" => Regex.Replace(text, @\"(?i)lawsuit|litigation|settlement\", \"[LEGAL-MATTER]\"),\n            _ => text\n        };\n    }\n}\n\npublic class SocialContentFilter : IContentFilterStrategy\n{\n    public string Filter(string text, Dictionary<string, string> metadata)\n    {\n        string platform = metadata.GetValueOrDefault(\"platform\", \"general\");\n        string audience = metadata.GetValueOrDefault(\"audience\", \"general\");\n        \n        text = FilterPlatformSpecificContent(text, platform);\n        text = FilterAgeRestrictedContent(text, audience);\n        text = AddVerificationLabels(text, metadata.GetValueOrDefault(\"userType\", \"regular\"));\n        \n        return text;\n    }\n    \n    private string FilterPlatformSpecificContent(string text, string platform)\n    {\n        return platform switch\n        {\n            \"twitter\" => Regex.Replace(Regex.Replace(text, @\"@([A-Za-z0-9_]+)\", \"[USERNAME]\"), @\"#([A-Za-z0-9_]+)\", \"[HASHTAG]\"),\n            \"facebook\" => Regex.Replace(text, @\"@\\[[^\\]]+\\]\", \"[NAME]\"),\n            \"instagram\" => Regex.Replace(text, @\"@([A-Za-z0-9_.]+)\", \"[HANDLE]\"),\n            _ => text\n        };\n    }\n    \n    private string FilterAgeRestrictedContent(string text, string audience)\n    {\n        return audience switch\n        {\n            \"minor\" => Regex.Replace(text, @\"(?i)alcohol|beer|wine|gambling|casino\", \"[AGE-RESTRICTED]\"),\n            _ => text\n        };\n    }\n    \n    private string AddVerificationLabels(string text, string userType)\n    {\n        return userType switch\n        {\n            \"verified\" => $\"[VERIFIED] {text}\",\n            _ => text\n        };\n    }\n}\n\npublic class CommentContentFilter : IContentFilterStrategy\n{\n    public string Filter(string text, Dictionary<string, string> metadata)\n    {\n        string context = metadata.GetValueOrDefault(\"context\", \"general\");\n        \n        text = FilterContextSpecificLanguage(text, context);\n        text = ModerateExtremeLanguage(text, metadata.GetValueOrDefault(\"moderation\", \"standard\"));\n        \n        return text;\n    }\n    \n    private string FilterContextSpecificLanguage(string text, string context)\n    {\n        return context switch\n        {\n            \"news\" => Regex.Replace(text, @\"(?i)allegedly|reportedly|rumored\", \"[STATEMENT]\"),\n            \"review\" => Regex.Replace(text, @\"(?i)terrible|awful|worst ever\", \"not satisfactory\"),\n            \"political\" => Regex.Replace(text, @\"(?i)corrupt|scandal|investigation\", \"[POLITICAL-CLAIM]\"),\n            _ => text\n        };\n    }\n    \n    private string ModerateExtremeLanguage(string text, string moderation)\n    {\n        return moderation switch\n        {\n            \"strict\" => Regex.Replace(text, @\"(?i)disagree|wrong|false\", \"alternative view\"),\n            _ => text\n        };\n    }\n}\n\npublic class BlogContentFilter : IContentFilterStrategy\n{\n    public string Filter(string text, Dictionary<string, string> metadata)\n    {\n        string category = metadata.GetValueOrDefault(\"category\", \"general\");\n        \n        text = FilterCategorySpecificTerms(text, category);\n        text = FilterAgeInappropriateContent(text, metadata.GetValueOrDefault(\"ageRating\", \"all\"));\n        \n        return text;\n    }\n    \n    private string FilterCategorySpecificTerms(string text, string category)\n    {\n        return category switch\n        {\n            \"technology\" => Regex.Replace(text, @\"(?i)hack|exploit|vulnerability\", \"[TECH-ISSUE]\"),\n            \"health\" => Regex.Replace(text, @\"(?i)cure|treatment|medication\", \"[MEDICAL-INFO]\"),\n            _ => text\n        };\n    }\n    \n    private string FilterAgeInappropriateContent(string text, string ageRating)\n    {\n        return ageRating switch\n        {\n            \"teen\" => Regex.Replace(text, @\"(?i)violence|graphic|explicit\", \"[MATURE-CONTENT]\"),\n            _ => text\n        };\n    }\n}\n\npublic class NewsContentFilter : IContentFilterStrategy\n{\n    public string Filter(string text, Dictionary<string, string> metadata)\n    {\n        string verification = metadata.GetValueOrDefault(\"verification\", \"unverified\");\n        string source = metadata.GetValueOrDefault(\"source\", \"unknown\");\n        \n        text = AddVerificationLabels(text, verification);\n        text = AddSourceLabels(text, source);\n        text = FilterNewsSpecificTerms(text);\n        \n        return text;\n    }\n    \n    private string AddVerificationLabels(string text, string verification)\n    {\n        return verification switch\n        {\n            \"unverified\" => $\"[UNVERIFIED-SOURCE] {text}\",\n            _ => text\n        };\n    }\n    \n    private string AddSourceLabels(string text, string source)\n    {\n        return source switch\n        {\n            \"social\" => $\"[SOCIAL-SOURCE] {text}\",\n            _ => text\n        };\n    }\n    \n    private string FilterNewsSpecificTerms(string text)\n    {\n        return Regex.Replace(text, @\"(?i)exclusive:|scoop:\", \"[STORY]:\");\n    }\n}\n\npublic class ForumContentFilter : IContentFilterStrategy\n{\n    public string Filter(string text, Dictionary<string, string> metadata)\n    {\n        string forumType = metadata.GetValueOrDefault(\"forumType\", \"general\");\n        string userLevel = metadata.GetValueOrDefault(\"userLevel\", \"novice\");\n        \n        text = FilterForumSpecificTerms(text, forumType);\n        text = AddUserLevelLabels(text, userLevel);\n        \n        return text;\n    }\n    \n    private string FilterForumSpecificTerms(string text, string forumType)\n    {\n        return forumType switch\n        {\n            \"technical\" => Regex.Replace(text, @\"(?i)bug|error|crash\", \"[ISSUE]\"),\n            \"gaming\" => Regex.Replace(text, @\"(?i)cheat|hack|mod\", \"[GAME-MODIFICATION]\"),\n            _ => text\n        };\n    }\n    \n    private string AddUserLevelLabels(string text, string userLevel)\n    {\n        return userLevel switch\n        {\n            \"newbie\" => $\"[NEW-USER] {text}\",\n            \"expert\" => $\"[EXPERT] {text}\",\n            _ => text\n        };\n    }\n}\n\npublic class ChatContentFilter : IContentFilterStrategy\n{\n    public string Filter(string text, Dictionary<string, string> metadata)\n    {\n        string chatType = metadata.GetValueOrDefault(\"chatType\", \"public\");\n        string encryption = metadata.GetValueOrDefault(\"encryption\", \"none\");\n        \n        text = FilterChatSpecificContent(text, chatType);\n        text = FilterCredentials(text, encryption);\n        text = FilterChatAbbreviations(text);\n        \n        return text;\n    }\n    \n    private string FilterChatSpecificContent(string text, string chatType)\n    {\n        return chatType switch\n        {\n            \"public\" => Regex.Replace(text, @\"(?i)private|personal|secret\", \"[PRIVATE-INFO]\"),\n            _ => text\n        };\n    }\n    \n    private string FilterCredentials(string text, string encryption)\n    {\n        return encryption switch\n        {\n            \"none\" => Regex.Replace(text, @\"(?i)password|token|key\", \"[CREDENTIALS]\"),\n            _ => text\n        };\n    }\n    \n    private string FilterChatAbbreviations(string text)\n    {\n        return Regex.Replace(text, @\"(?i)wtf|omfg|stfu|lmao\", \"[ABBREV]\");\n    }\n}\n\npublic class ReviewContentFilter : IContentFilterStrategy\n{\n    public string Filter(string text, Dictionary<string, string> metadata)\n    {\n        string productType = metadata.GetValueOrDefault(\"productType\", \"general\");\n        string reviewerStatus = metadata.GetValueOrDefault(\"reviewerStatus\", \"regular\");\n        \n        text = FilterProductSpecificConcerns(text, productType);\n        text = AddReviewerStatusLabels(text, reviewerStatus);\n        text = ModerateExtremeOpinions(text);\n        \n        return text;\n    }\n    \n    private string FilterProductSpecificConcerns(string text, string productType)\n    {\n        return productType switch\n        {\n            \"restaurant\" => Regex.Replace(text, @\"(?i)food poisoning|sick|illness\", \"[HEALTH-CONCERN]\"),\n            \"hotel\" => Regex.Replace(text, @\"(?i)dirty|filthy|disgusting\", \"needs improvement\"),\n            _ => text\n        };\n    }\n    \n    private string AddReviewerStatusLabels(string text, string reviewerStatus)\n    {\n        return reviewerStatus switch\n        {\n            \"verified\" => $\"[VERIFIED-REVIEW] {text}\",\n            _ => text\n        };\n    }\n    \n    private string ModerateExtremeOpinions(string text)\n    {\n        return Regex.Replace(text, @\"(?i)love it|hate it|perfect|disaster\", \"[OPINION]\");\n    }\n}\n\npublic class ArticleContentFilter : IContentFilterStrategy\n{\n    public string Filter(string text, Dictionary<string, string> metadata)\n    {\n        string publication = metadata.GetValueOrDefault(\"publication\", \"unknown\");\n        string category = metadata.GetValueOrDefault(\"category\", \"general\");\n        \n        text = AddPublicationLabels(text, publication);\n        text = AddCategoryLabels(text, category);\n        \n        return text;\n    }\n    \n    private string AddPublicationLabels(string text, string publication)\n    {\n        return publication switch\n        {\n            \"tabloid\" => $\"[TABLOID] {text}\",\n            _ => text\n        };\n    }\n    \n    private string AddCategoryLabels(string text, string category)\n    {\n        return category switch\n        {\n            \"opinion\" => $\"[OPINION-PIECE] {text}\",\n            _ => text\n        };\n    }\n}\n\npublic class VideoContentFilter : IContentFilterStrategy\n{\n    public string Filter(string text, Dictionary<string, string> metadata)\n    {\n        string platform = metadata.GetValueOrDefault(\"platform\", \"general\");\n        string contentType = metadata.GetValueOrDefault(\"contentType\", \"general\");\n        \n        text = FilterVideoSpecificContent(text, platform);\n        text = AddContentTypeLabels(text, contentType);\n        \n        return text;\n    }\n    \n    private string FilterVideoSpecificContent(string text, string platform)\n    {\n        return platform switch\n        {\n            \"youtube\" => Regex.Replace(text, @\"(?i)like and subscribe\", \"[ENGAGEMENT-REQUEST]\"),\n            _ => text\n        };\n    }\n    \n    private string AddContentTypeLabels(string text, string contentType)\n    {\n        return contentType switch\n        {\n            \"tutorial\" => Regex.Replace(text, @\"(?i)step by step|how to\", \"[TUTORIAL]\"),\n            _ => text\n        };\n    }\n}\n\npublic class GenericContentFilter : IContentFilterStrategy\n{\n    public string Filter(string text, Dictionary<string, string> metadata)\n    {\n        string contentSource = metadata.GetValueOrDefault(\"source\", \"unknown\");\n        \n        text = AddSourceLabels(text, contentSource);\n        text = FilterCommercialContent(text);\n        \n        return text;\n    }\n    \n    private string AddSourceLabels(string text, string contentSource)\n    {\n        return contentSource switch\n        {\n            \"user-generated\" => $\"[USER-CONTENT] {text}\",\n            _ => text\n        };\n    }\n    \n    private string FilterCommercialContent(string text)\n    {\n        return Regex.Replace(text, @\"(?i)spam|advertisement|promotion\", \"[COMMERCIAL]\");\n    }\n}\n\npublic class ContentFilter\n{\n    private readonly Dictionary<string, IContentFilterStrategy> _filterStrategies;\n    private readonly Dictionary<string, int> _filterStats;\n    private readonly HashSet<string> _bannedWords;\n    private readonly Regex _emailPattern;\n    private readonly Regex _phonePattern;\n    private readonly Regex _urlPattern;\n    private readonly Regex _creditCardPattern;\n    private readonly Regex _ssnPattern;\n    private int _totalFiltered;\n    \n    public ContentFilter()\n    {\n        _filterStrategies = new Dictionary<string, IContentFilterStrategy>();\n        _filterStats = new Dictionary<string, int>();\n        _bannedWords = new HashSet<string>\n        {\n            \"badword1\", \"badword2\", \"badword3\", \n            \"inappropriate\", \"offensive\", \"spam\", \"scam\"\n        };\n        _emailPattern = new Regex(@\"[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}\", RegexOptions.Compiled);\n        _phonePattern = new Regex(@\"\\b\\d{3}-\\d{3}-\\d{4}\\b|\\(\\d{3}\\)\\s*\\d{3}-\\d{4}\", RegexOptions.Compiled);\n        _urlPattern = new Regex(@\"https?://[^\\s]+\", RegexOptions.Compiled);\n        _creditCardPattern = new Regex(@\"\\b\\d{4}[\\s-]?\\d{4}[\\s-]?\\d{4}[\\s-]?\\d{4}\\b\", RegexOptions.Compiled);\n        _ssnPattern = new Regex(@\"\\d{3}-\\d{2}-\\d{4}\", RegexOptions.Compiled);\n        _totalFiltered = 0;\n        \n        InitializeFilterStrategies();\n    }\n    \n    private void InitializeFilterStrategies()\n    {\n        _filterStrategies[\"email\"] = new EmailContentFilter();\n        _filterStrategies[\"social\"] = new SocialContentFilter();\n        _filterStrategies[\"comment\"] = new CommentContentFilter();\n        _filterStrategies[\"blog\"] = new BlogContentFilter();\n        _filterStrategies[\"news\"] = new NewsContentFilter();\n        _filterStrategies[\"forum\"] = new ForumContentFilter();\n        _filterStrategies[\"chat\"] = new ChatContentFilter();\n        _filterStrategies[\"review\"] = new ReviewContentFilter();\n        _filterStrategies[\"article\"] = new ArticleContentFilter();\n        _filterStrategies[\"video\"] = new VideoContentFilter();\n        _filterStrategies[\"default\"] = new GenericContentFilter();\n    }\n    \n    public void RegisterFilterStrategy(string contentType, IContentFilterStrategy strategy)\n    {\n        _filterStrategies[contentType] = strategy;\n    }\n    \n    public string FilterContent(Content content)\n    {\n        string filteredText = content.Text;\n        string contentType = content.ContentType;\n        Dictionary<string, string> metadata = content.Metadata;\n        \n        IContentFilterStrategy strategy = _filterStrategies.GetValueOrDefault(contentType, _filterStrategies[\"default\"]);\n        filteredText = strategy.Filter(filteredText, metadata);\n        \n        // Apply common filters to all content types\n        filteredText = RemoveCommonProfanity(filteredText);\n        filteredText = RemovePersonalInfo(filteredText);\n        filteredText = FilterUrls(filteredText, metadata);\n        filteredText = FilterEmails(filteredText, metadata);\n        filteredText = FilterPhoneNumbers(filteredText, metadata);\n        \n        UpdateStats(contentType);\n        _totalFiltered++;\n        content.Text = filteredText;\n        content.AddTag(\"filtered\");\n        \n        return filteredText;\n    }\n    \n    private string RemoveCommonProfanity(string text)\n    {\n        return _bannedWords.Aggregate(text, (current, word) =>\n            Regex.Replace(current, $@\"(?i)\\b{Regex.Escape(word)}\\b\", \"[INAPPROPRIATE]\"));\n    }\n    \n    private string RemovePersonalInfo(string text)\n    {\n        text = _ssnPattern.Replace(text, \"[SSN]\");\n        text = _creditCardPattern.Replace(text, \"[CREDIT_CARD]\");\n        text = Regex.Replace(text, @\"\\b(?:\\d{1,3}\\.){3}\\d{1,3}\\b\", \"[IP_ADDRESS]\");\n        return text;\n    }\n    \n    private string FilterUrls(string text, Dictionary<string, string> metadata)\n    {\n        string urlPolicy = metadata.GetValueOrDefault(\"urlPolicy\", \"allow\");\n        return urlPolicy switch\n        {\n            \"block\" => _urlPattern.Replace(text, \"[URL]\"),\n            _ => text\n        };\n    }\n    \n    private string FilterEmails(string text, Dictionary<string, string> metadata)\n    {\n        string emailPolicy = metadata.GetValueOrDefault(\"emailPolicy\", \"allow\");\n        return emailPolicy switch\n        {\n            \"block\" => _emailPattern.Replace(text, \"[EMAIL]\"),\n            _ => text\n        };\n    }\n    \n    private string FilterPhoneNumbers(string text, Dictionary<string, string> metadata)\n    {\n        string phonePolicy = metadata.GetValueOrDefault(\"phonePolicy\", \"allow\");\n        return phonePolicy switch\n        {\n            \"block\" => _phonePattern.Replace(text, \"[PHONE]\"),\n            _ => text\n        };\n    }\n    \n    private void UpdateStats(string contentType)\n    {\n        _filterStats[contentType] = _filterStats.GetValueOrDefault(contentType, 0) + 1;\n    }\n    \n    public Dictionary<string, int> GetFilterStats()\n    {\n        return new Dictionary<string, int>(_filterStats);\n    }\n    \n    public int GetTotalFiltered()\n    {\n        return _totalFiltered;\n    }\n    \n    public void AddBannedWord(string word)\n    {\n        _bannedWords.Add(word.ToLower());\n    }\n    \n    public void RemoveBannedWord(string word)\n    {\n        _bannedWords.Remove(word.ToLower());\n    }\n    \n    public HashSet<string> GetBannedWords()\n    {\n        return new HashSet<string>(_bannedWords);\n    }\n}",
        "level": "HARD",
      "language": "CSHARP",
      "violation": "OCP",
      "description": "Content filtering system"
    },
    {
      "input": "using System;\nusing System.Collections.Generic;\n\npublic class Order\n{\n    private string id;\n    private List<OrderItem> items;\n    private Address shippingAddress;\n    private string shippingMethod;\n    private OrderStatus status;\n    private double totalAmount;\n    \n    public Order(string id, List<OrderItem> items, Address shippingAddress, string shippingMethod)\n    {\n        this.id = id;\n        this.items = items;\n        this.shippingAddress = shippingAddress;\n        this.shippingMethod = shippingMethod;\n        this.status = OrderStatus.CREATED;\n        CalculateTotalAmount();\n    }\n    \n    private void CalculateTotalAmount()\n    {\n        totalAmount = 0.0;\n        foreach (OrderItem item in items)\n        {\n            totalAmount += item.GetPrice() * item.GetQuantity();\n        }\n    }\n    \n    public string GetId()\n    {\n        return id;\n    }\n    \n    public List<OrderItem> GetItems()\n    {\n        return items;\n    }\n    \n    public Address GetShippingAddress()\n    {\n        return shippingAddress;\n    }\n    \n    public string GetShippingMethod()\n    {\n        return shippingMethod;\n    }\n    \n    public OrderStatus GetStatus()\n    {\n        return status;\n    }\n    \n    public void SetStatus(OrderStatus status)\n    {\n        this.status = status;\n    }\n    \n    public double GetTotalAmount()\n    {\n        return totalAmount;\n    }\n}\n\npublic class OrderItem\n{\n    private string productId;\n    private int quantity;\n    private double price;\n    \n    public OrderItem(string productId, int quantity, double price)\n    {\n        this.productId = productId;\n        this.quantity = quantity;\n        this.price = price;\n    }\n    \n    public string GetProductId()\n    {\n        return productId;\n    }\n    \n    public int GetQuantity()\n    {\n        return quantity;\n    }\n    \n    public double GetPrice()\n    {\n        return price;\n    }\n}\n\npublic class Address\n{\n    private string name;\n    private string street;\n    private string city;\n    private string state;\n    private string country;\n    private string zipCode;\n    \n    public Address(string name, string street, string city, string state, string country, string zipCode)\n    {\n        this.name = name;\n        this.street = street;\n        this.city = city;\n        this.state = state;\n        this.country = country;\n        this.zipCode = zipCode;\n    }\n    \n    public string GetName()\n    {\n        return name;\n    }\n    \n    public string GetStreet()\n    {\n        return street;\n    }\n    \n    public string GetCity()\n    {\n        return city;\n    }\n    \n    public string GetState()\n    {\n        return state;\n    }\n    \n    public string GetCountry()\n    {\n        return country;\n    }\n    \n    public string GetZipCode()\n    {\n        return zipCode;\n    }\n}\n\npublic class Shipment\n{\n    private string orderId;\n    private DateTime shipmentDate;\n    private double cost;\n    \n    public Shipment(string orderId, DateTime shipmentDate)\n    {\n        this.orderId = orderId;\n        this.shipmentDate = shipmentDate;\n    }\n    \n    public string GetOrderId()\n    {\n        return orderId;\n    }\n    \n    public DateTime GetShipmentDate()\n    {\n        return shipmentDate;\n    }\n    \n    public double GetCost()\n    {\n        return cost;\n    }\n    \n    public void SetCost(double cost)\n    {\n        this.cost = cost;\n    }\n}\n\npublic class ShippingCost\n{\n    private double cost;\n    \n    public ShippingCost(double cost)\n    {\n        this.cost = cost;\n    }\n    \n    public double GetCost()\n    {\n        return cost;\n    }\n}\n\npublic class ShipmentResult\n{\n    private bool success;\n    private string message;\n    private Shipment shipment;\n    \n    public ShipmentResult(bool success, string message, Shipment shipment)\n    {\n        this.success = success;\n        this.message = message;\n        this.shipment = shipment;\n    }\n    \n    public bool IsSuccess()\n    {\n        return success;\n    }\n    \n    public string GetMessage()\n    {\n        return message;\n    }\n    \n    public Shipment GetShipment()\n    {\n        return shipment;\n    }\n}\n\npublic interface IOrderRepository\n{\n    Order FindById(string id);\n    void Update(Order order);\n}\n\npublic interface IInventoryService\n{\n    bool IsInStock(string productId, int quantity);\n    void Reserve(string productId, int quantity);\n    Product GetProduct(string productId);\n}\n\npublic class Product\n{\n    private string id;\n    private string name;\n    private double weight;\n    private double price;\n    \n    public Product(string id, string name, double weight, double price)\n    {\n        this.id = id;\n        this.name = name;\n        this.weight = weight;\n        this.price = price;\n    }\n    \n    public string GetId()\n    {\n        return id;\n    }\n    \n    public string GetName()\n    {\n        return name;\n    }\n    \n    public double GetWeight()\n    {\n        return weight;\n    }\n    \n    public double GetPrice()\n    {\n        return price;\n    }\n}\n\npublic interface ILogger\n{\n    void Log(string message);\n}\n\npublic enum OrderStatus\n{\n    CREATED, PAID, SHIPPED, DELIVERED, CANCELLED\n}\n\npublic class ShippingService\n{\n    private IOrderRepository orderRepository;\n    private IInventoryService inventoryService;\n    private ILogger logger;\n    \n    public ShippingService(IOrderRepository orderRepository, IInventoryService inventoryService, ILogger logger)\n    {\n        this.orderRepository = orderRepository;\n        this.inventoryService = inventoryService;\n        this.logger = logger;\n    }\n    \n    public ShipmentResult ProcessShipment(string orderId)\n    {\n        Order order = orderRepository.FindById(orderId);\n        \n        if (order == null)\n        {\n            throw new ArgumentException($\"Order not found: {orderId}\");\n        }\n        \n        if (order.GetStatus() != OrderStatus.PAID)\n        {\n            return new ShipmentResult(false, \"Order is not paid yet\", null);\n        }\n        \n        foreach (OrderItem item in order.GetItems())\n        {\n            if (!inventoryService.IsInStock(item.GetProductId(), item.GetQuantity()))\n            {\n                return new ShipmentResult(false, $\"Product out of stock: {item.GetProductId()}\", null);\n            }\n        }\n        \n        Shipment shipment = new Shipment(orderId, DateTime.Now);\n        ShippingCost shippingCost = CalculateShippingCost(order);\n        shipment.SetCost(shippingCost.GetCost());\n        \n        foreach (OrderItem item in order.GetItems())\n        {\n            inventoryService.Reserve(item.GetProductId(), item.GetQuantity());\n        }\n        \n        order.SetStatus(OrderStatus.SHIPPED);\n        orderRepository.Update(order);\n        \n        logger.Log($\"Order shipped: {orderId}, cost: {shippingCost.GetCost()}\");\n        return new ShipmentResult(true, \"Order shipped successfully\", shipment);\n    }\n    \n    private ShippingCost CalculateShippingCost(Order order)\n    {\n        Address destination = order.GetShippingAddress();\n        double totalWeight = CalculateOrderWeight(order);\n        double baseCost = 0.0;\n        \n        string shippingMethod = order.GetShippingMethod();\n        \n        if (shippingMethod.Equals(\"standard\"))\n        {\n            baseCost = 5.0;\n            double weightCost = totalWeight * 0.5;\n            double distance = CalculateDistance(destination);\n            double distanceFactor = distance * 0.01;\n            \n            return new ShippingCost(baseCost + weightCost + distanceFactor);\n            \n        }\n        else if (shippingMethod.Equals(\"express\"))\n        {\n            baseCost = 15.0;\n            double weightCost = totalWeight * 0.75;\n            double distance = CalculateDistance(destination);\n            double distanceFactor = distance * 0.015;\n            \n            return new ShippingCost(baseCost + weightCost + distanceFactor);\n            \n        }\n        else if (shippingMethod.Equals(\"overnight\"))\n        {\n            baseCost = 25.0;\n            double weightCost = totalWeight * 1.0;\n            double distance = CalculateDistance(destination);\n            double distanceFactor = distance * 0.02;\n            \n            return new ShippingCost(baseCost + weightCost + distanceFactor);\n            \n        }\n        else if (shippingMethod.Equals(\"international\"))\n        {\n            baseCost = 30.0;\n            double weightCost = totalWeight * 2.0;\n            double distance = CalculateDistance(destination);\n            double distanceFactor = distance * 0.025;\n            double customsFee = order.GetTotalAmount() * 0.05; \n            \n            return new ShippingCost(baseCost + weightCost + distanceFactor + customsFee);\n        }\n        \n        return new ShippingCost(10.0);\n    }\n    \n    private double CalculateOrderWeight(Order order)\n    {\n        double totalWeight = 0.0;\n        foreach (OrderItem item in order.GetItems())\n        {\n            Product product = inventoryService.GetProduct(item.GetProductId());\n            totalWeight += product.GetWeight() * item.GetQuantity();\n        }\n        return totalWeight;\n    }\n    \n    private double CalculateDistance(Address destination)\n    {\n        Address warehouseAddress = new Address(\"Warehouse\", \"123 Main St\", \"City\", \"State\", \"Country\", \"12345\");\n        \n        if (warehouseAddress.GetCountry().Equals(destination.GetCountry()))\n        {\n            if (warehouseAddress.GetState().Equals(destination.GetState()))\n            {\n                if (warehouseAddress.GetCity().Equals(destination.GetCity()))\n                {\n                    return 10.0; \n                }\n                return 50.0; \n            }\n            return 200.0; \n        }\n        return 1000.0; \n    }\n}",
      "output": "using System;\nusing System.Collections.Generic;\n\npublic class Order\n{\n    private string id;\n    private List<OrderItem> items;\n    private Address shippingAddress;\n    private string shippingMethod;\n    private OrderStatus status;\n    private double totalAmount;\n    \n    public Order(string id, List<OrderItem> items, Address shippingAddress, string shippingMethod)\n    {\n        this.id = id;\n        this.items = items;\n        this.shippingAddress = shippingAddress;\n        this.shippingMethod = shippingMethod;\n        this.status = OrderStatus.CREATED;\n        CalculateTotalAmount();\n    }\n    \n    private void CalculateTotalAmount()\n    {\n        totalAmount = 0.0;\n        foreach (OrderItem item in items)\n        {\n            totalAmount += item.GetPrice() * item.GetQuantity();\n        }\n    }\n    \n    public string GetId()\n    {\n        return id;\n    }\n    \n    public List<OrderItem> GetItems()\n    {\n        return items;\n    }\n    \n    public Address GetShippingAddress()\n    {\n        return shippingAddress;\n    }\n    \n    public string GetShippingMethod()\n    {\n        return shippingMethod;\n    }\n    \n    public OrderStatus GetStatus()\n    {\n        return status;\n    }\n    \n    public void SetStatus(OrderStatus status)\n    {\n        this.status = status;\n    }\n    \n    public double GetTotalAmount()\n    {\n        return totalAmount;\n    }\n}\n\npublic class OrderItem\n{\n    private string productId;\n    private int quantity;\n    private double price;\n    \n    public OrderItem(string productId, int quantity, double price)\n    {\n        this.productId = productId;\n        this.quantity = quantity;\n        this.price = price;\n    }\n    \n    public string GetProductId()\n    {\n        return productId;\n    }\n    \n    public int GetQuantity()\n    {\n        return quantity;\n    }\n    \n    public double GetPrice()\n    {\n        return price;\n    }\n}\n\npublic class Address\n{\n    private string name;\n    private string street;\n    private string city;\n    private string state;\n    private string country;\n    private string zipCode;\n    \n    public Address(string name, string street, string city, string state, string country, string zipCode)\n    {\n        this.name = name;\n        this.street = street;\n        this.city = city;\n        this.state = state;\n        this.country = country;\n        this.zipCode = zipCode;\n    }\n    \n    public string GetName()\n    {\n        return name;\n    }\n    \n    public string GetStreet()\n    {\n        return street;\n    }\n    \n    public string GetCity()\n    {\n        return city;\n    }\n    \n    public string GetState()\n    {\n        return state;\n    }\n    \n    public string GetCountry()\n    {\n        return country;\n    }\n    \n    public string GetZipCode()\n    {\n        return zipCode;\n    }\n}\n\npublic class Shipment\n{\n    private string orderId;\n    private DateTime shipmentDate;\n    private double cost;\n    \n    public Shipment(string orderId, DateTime shipmentDate)\n    {\n        this.orderId = orderId;\n        this.shipmentDate = shipmentDate;\n    }\n    \n    public string GetOrderId()\n    {\n        return orderId;\n    }\n    \n    public DateTime GetShipmentDate()\n    {\n        return shipmentDate;\n    }\n    \n    public double GetCost()\n    {\n        return cost;\n    }\n    \n    public void SetCost(double cost)\n    {\n        this.cost = cost;\n    }\n}\n\npublic class ShippingCost\n{\n    private double cost;\n    \n    public ShippingCost(double cost)\n    {\n        this.cost = cost;\n    }\n    \n    public double GetCost()\n    {\n        return cost;\n    }\n}\n\npublic class ShipmentResult\n{\n    private bool success;\n    private string message;\n    private Shipment shipment;\n    \n    public ShipmentResult(bool success, string message, Shipment shipment)\n    {\n        this.success = success;\n        this.message = message;\n        this.shipment = shipment;\n    }\n    \n    public bool IsSuccess()\n    {\n        return success;\n    }\n    \n    public string GetMessage()\n    {\n        return message;\n    }\n    \n    public Shipment GetShipment()\n    {\n        return shipment;\n    }\n}\n\npublic interface IOrderRepository\n{\n    Order FindById(string id);\n    void Update(Order order);\n}\n\npublic interface IInventoryService\n{\n    bool IsInStock(string productId, int quantity);\n    void Reserve(string productId, int quantity);\n    Product GetProduct(string productId);\n}\n\npublic class Product\n{\n    private string id;\n    private string name;\n    private double weight;\n    private double price;\n    \n    public Product(string id, string name, double weight, double price)\n    {\n        this.id = id;\n        this.name = name;\n        this.weight = weight;\n        this.price = price;\n    }\n    \n    public string GetId()\n    {\n        return id;\n    }\n    \n    public string GetName()\n    {\n        return name;\n    }\n    \n    public double GetWeight()\n    {\n        return weight;\n    }\n    \n    public double GetPrice()\n    {\n        return price;\n    }\n}\n\npublic interface ILogger\n{\n    void Log(string message);\n}\n\npublic enum OrderStatus\n{\n    CREATED, PAID, SHIPPED, DELIVERED, CANCELLED\n}\n\npublic interface IShippingStrategy\n{\n    ShippingCost CalculateCost(Order order, double weight, double distance);\n}\n\npublic class StandardShippingStrategy : IShippingStrategy\n{\n    public ShippingCost CalculateCost(Order order, double weight, double distance)\n    {\n        double baseCost = 5.0;\n        double weightCost = weight * 0.5;\n        double distanceFactor = distance * 0.01;\n        \n        return new ShippingCost(baseCost + weightCost + distanceFactor);\n    }\n}\n\npublic class ExpressShippingStrategy : IShippingStrategy\n{\n    public ShippingCost CalculateCost(Order order, double weight, double distance)\n    {\n        double baseCost = 15.0;\n        double weightCost = weight * 0.75;\n        double distanceFactor = distance * 0.015;\n        \n        return new ShippingCost(baseCost + weightCost + distanceFactor);\n    }\n}\n\npublic class OvernightShippingStrategy : IShippingStrategy\n{\n    public ShippingCost CalculateCost(Order order, double weight, double distance)\n    {\n        double baseCost = 25.0;\n        double weightCost = weight * 1.0;\n        double distanceFactor = distance * 0.02;\n        \n        return new ShippingCost(baseCost + weightCost + distanceFactor);\n    }\n}\n\npublic class InternationalShippingStrategy : IShippingStrategy\n{\n    public ShippingCost CalculateCost(Order order, double weight, double distance)\n    {\n        double baseCost = 30.0;\n        double weightCost = weight * 2.0;\n        double distanceFactor = distance * 0.025;\n        double customsFee = order.GetTotalAmount() * 0.05; // 5% of order value\n        \n        return new ShippingCost(baseCost + weightCost + distanceFactor + customsFee);\n    }\n}\n\npublic class ShippingService\n{\n    private IOrderRepository orderRepository;\n    private IInventoryService inventoryService;\n    private ILogger logger;\n    private Dictionary<string, IShippingStrategy> shippingStrategies;\n    \n    public ShippingService(IOrderRepository orderRepository, IInventoryService inventoryService, ILogger logger)\n    {\n        this.orderRepository = orderRepository;\n        this.inventoryService = inventoryService;\n        this.logger = logger;\n        InitializeShippingStrategies();\n    }\n    \n    private void InitializeShippingStrategies()\n    {\n        shippingStrategies = new Dictionary<string, IShippingStrategy>();\n        shippingStrategies.Add(\"standard\", new StandardShippingStrategy());\n        shippingStrategies.Add(\"express\", new ExpressShippingStrategy());\n        shippingStrategies.Add(\"overnight\", new OvernightShippingStrategy());\n        shippingStrategies.Add(\"international\", new InternationalShippingStrategy());\n    }\n    \n    public void RegisterShippingStrategy(string method, IShippingStrategy strategy)\n    {\n        shippingStrategies[method] = strategy;\n    }\n    \n    public ShipmentResult ProcessShipment(string orderId)\n    {\n        Order order = orderRepository.FindById(orderId);\n        \n        if (order == null)\n        {\n            throw new ArgumentException($\"Order not found: {orderId}\");\n        }\n        \n        if (order.GetStatus() != OrderStatus.PAID)\n        {\n            return new ShipmentResult(false, \"Order is not paid yet\", null);\n        }\n        \n        foreach (OrderItem item in order.GetItems())\n        {\n            if (!inventoryService.IsInStock(item.GetProductId(), item.GetQuantity()))\n            {\n                return new ShipmentResult(false, $\"Product out of stock: {item.GetProductId()}\", null);\n            }\n        }\n        \n        Shipment shipment = new Shipment(orderId, DateTime.Now);\n        ShippingCost shippingCost = CalculateShippingCost(order);\n        shipment.SetCost(shippingCost.GetCost());\n        \n        // Reserve inventory items\n        foreach (OrderItem item in order.GetItems())\n        {\n            inventoryService.Reserve(item.GetProductId(), item.GetQuantity());\n        }\n        \n        // Update order status\n        order.SetStatus(OrderStatus.SHIPPED);\n        orderRepository.Update(order);\n        \n        logger.Log($\"Order shipped: {orderId}, cost: {shippingCost.GetCost()}\");\n        return new ShipmentResult(true, \"Order shipped successfully\", shipment);\n    }\n    \n    private ShippingCost CalculateShippingCost(Order order)\n    {\n        string shippingMethod = order.GetShippingMethod();\n        IShippingStrategy strategy;\n        \n        if (!shippingStrategies.TryGetValue(shippingMethod, out strategy))\n        {\n            // Default strategy if method not recognized\n            return new ShippingCost(10.0);\n        }\n        \n        double totalWeight = CalculateOrderWeight(order);\n        Address destination = order.GetShippingAddress();\n        double distance = CalculateDistance(destination);\n        \n        return strategy.CalculateCost(order, totalWeight, distance);\n    }\n    \n    private double CalculateOrderWeight(Order order)\n    {\n        double totalWeight = 0.0;\n        foreach (OrderItem item in order.GetItems())\n        {\n            Product product = inventoryService.GetProduct(item.GetProductId());\n            totalWeight += product.GetWeight() * item.GetQuantity();\n        }\n        return totalWeight;\n    }\n    \n    private double CalculateDistance(Address destination)\n    {\n        // Simplified distance calculation. In a real system, this would use\n        // geographic coordinates or a distance service.\n        Address warehouseAddress = new Address(\"Warehouse\", \"123 Main St\", \"City\", \"State\", \"Country\", \"12345\");\n        \n        if (warehouseAddress.GetCountry().Equals(destination.GetCountry()))\n        {\n            if (warehouseAddress.GetState().Equals(destination.GetState()))\n            {\n                if (warehouseAddress.GetCity().Equals(destination.GetCity()))\n                {\n                    return 10.0; // Same city\n                }\n                return 50.0; // Same state, different city\n            }\n            return 200.0; // Same country, different state\n        }\n        return 1000.0; // International\n    }\n}",
      "level": "HARD",
      "language": "CSHARP",
      "violation": "OCP",
      "description": "Shipping cost calculation system"
    }
  ]
}
