{"id": 0, "strategy": "example", "violation_type": "srp", "model": "gpt-4o-mini", "language": "JAVA", "input": "public class Employee {\n    private String name;\n    public void saveToDatabase() {\n        // save employee to database\n    }\n    public void generateReport() {\n        // generate employee report\n    }\n}", "prompt": "You are an expert in identifying and refactoring SOLID principle violations in JAVA code. Your task is to analyze the code provided and respond in the exact format below, without any additional text or commentary.\n\nYou must provide the following three parts in your response:\n1. The violated SOLID principle (e.g., SRP, OCP, LSP, ISP, DIP). If no violation exists, respond with **NONE**.\n2. A complete refactored version of the code that removes the violation. YOU MUST RETURN ONLY THE CODE BLOCK.\n3. A brief explanation of the violation and the refactoring.\n\nUse these criteria to detect violations:\n- **SRP**: A class does too many unrelated tasks.\n- **OCP**: Multiple `if-else` or `switch` blocks for logic that should be handled by polymorphism.\n- **LSP**: Subclasses override behavior in a way that breaks the contract of the base class (e.g., throw exceptions).\n- **ISP**: Interfaces that are too large or force implementing unnecessary methods.\n- **DIP**: High-level classes directly depend on low-level classes instead of abstractions.\n\nIf more than one violation is present, report only the most prominent one.\n\n**IMPORTANT:** Follow this output format *exactly*. Do not include greetings, summaries, or comments before or after the output:\n\n**<VIOLATION TYPE>**\n```java\n<Refactored code>\n```\n<Explanation of the refactoring>\n\nExample output:\n**SRP**\n```java\npublic class ReportGenerator {\n    public String generateReport() {\n        return \"Report data\";\n    }\n}\n```\nThe class previously handled both data generation and file I/O. Now it only generates the report, following SRP.\n\nHere is the code:\npublic class Employee {\n    private String name;\n    public void saveToDatabase() {\n        // save employee to database\n    }\n    public void generateReport() {\n        // generate employee report\n    }\n}", "raw_response": "**SRP**\n```java\npublic class Employee {\n    private String name;\n\n    public void saveToDatabase() {\n        // save employee to database\n    }\n}\n\npublic class EmployeeReportGenerator {\n    public void generateReport(Employee employee) {\n        // generate employee report\n    }\n}\n```\nThe `Employee` class previously handled both saving to the database and report generation. Now, the report generation is moved to a separate `EmployeeReportGenerator` class, adhering to the Single Responsibility Principle (SRP).", "violation": "SRP", "violation_list": ["SRP"], "explanation": "**SRP**", "solution_code": "public class Employee {\n    private String name;\n\n    public void saveToDatabase() {\n        // save employee to database\n    }\n}\n\npublic class EmployeeReportGenerator {\n    public void generateReport(Employee employee) {\n        // generate employee report\n    }\n}", "duration_seconds": 4.0409157276153564}
{"id": 1, "strategy": "example", "violation_type": "srp", "model": "gpt-4o-mini", "language": "JAVA", "input": "public class Book {\n    private String title;\n    public void print() {\n        // print book details\n    }\n    public void save() {\n        // save book to file\n    }\n}", "prompt": "You are an expert in identifying and refactoring SOLID principle violations in JAVA code. Your task is to analyze the code provided and respond in the exact format below, without any additional text or commentary.\n\nYou must provide the following three parts in your response:\n1. The violated SOLID principle (e.g., SRP, OCP, LSP, ISP, DIP). If no violation exists, respond with **NONE**.\n2. A complete refactored version of the code that removes the violation. YOU MUST RETURN ONLY THE CODE BLOCK.\n3. A brief explanation of the violation and the refactoring.\n\nUse these criteria to detect violations:\n- **SRP**: A class does too many unrelated tasks.\n- **OCP**: Multiple `if-else` or `switch` blocks for logic that should be handled by polymorphism.\n- **LSP**: Subclasses override behavior in a way that breaks the contract of the base class (e.g., throw exceptions).\n- **ISP**: Interfaces that are too large or force implementing unnecessary methods.\n- **DIP**: High-level classes directly depend on low-level classes instead of abstractions.\n\nIf more than one violation is present, report only the most prominent one.\n\n**IMPORTANT:** Follow this output format *exactly*. Do not include greetings, summaries, or comments before or after the output:\n\n**<VIOLATION TYPE>**\n```java\n<Refactored code>\n```\n<Explanation of the refactoring>\n\nExample output:\n**SRP**\n```java\npublic class ReportGenerator {\n    public String generateReport() {\n        return \"Report data\";\n    }\n}\n```\nThe class previously handled both data generation and file I/O. Now it only generates the report, following SRP.\n\nHere is the code:\npublic class Book {\n    private String title;\n    public void print() {\n        // print book details\n    }\n    public void save() {\n        // save book to file\n    }\n}", "raw_response": "**SRP**\n```java\npublic class Book {\n    private String title;\n\n    public void print() {\n        // print book details\n    }\n}\n\npublic class BookRepository {\n    public void save(Book book) {\n        // save book to file\n    }\n}\n```\nThe `Book` class previously handled both printing and saving functionality, violating the Single Responsibility Principle (SRP). Now, the `Book` class is responsible only for its data and printing, while the `BookRepository` class handles the saving functionality.", "violation": "SRP", "violation_list": ["SRP"], "explanation": "**SRP**", "solution_code": "public class Book {\n    private String title;\n\n    public void print() {\n        // print book details\n    }\n}\n\npublic class BookRepository {\n    public void save(Book book) {\n        // save book to file\n    }\n}", "duration_seconds": 1.7476263046264648}
{"id": 2, "strategy": "example", "violation_type": "srp", "model": "gpt-4o-mini", "language": "JAVA", "input": "public class Invoice {\n    public void calculateTotal() {\n        // calculate total\n    }\n    public void printInvoice() {\n        // print invoice\n    }\n    public void saveToFile() {\n        // save invoice to file\n    }\n}", "prompt": "You are an expert in identifying and refactoring SOLID principle violations in JAVA code. Your task is to analyze the code provided and respond in the exact format below, without any additional text or commentary.\n\nYou must provide the following three parts in your response:\n1. The violated SOLID principle (e.g., SRP, OCP, LSP, ISP, DIP). If no violation exists, respond with **NONE**.\n2. A complete refactored version of the code that removes the violation. YOU MUST RETURN ONLY THE CODE BLOCK.\n3. A brief explanation of the violation and the refactoring.\n\nUse these criteria to detect violations:\n- **SRP**: A class does too many unrelated tasks.\n- **OCP**: Multiple `if-else` or `switch` blocks for logic that should be handled by polymorphism.\n- **LSP**: Subclasses override behavior in a way that breaks the contract of the base class (e.g., throw exceptions).\n- **ISP**: Interfaces that are too large or force implementing unnecessary methods.\n- **DIP**: High-level classes directly depend on low-level classes instead of abstractions.\n\nIf more than one violation is present, report only the most prominent one.\n\n**IMPORTANT:** Follow this output format *exactly*. Do not include greetings, summaries, or comments before or after the output:\n\n**<VIOLATION TYPE>**\n```java\n<Refactored code>\n```\n<Explanation of the refactoring>\n\nExample output:\n**SRP**\n```java\npublic class ReportGenerator {\n    public String generateReport() {\n        return \"Report data\";\n    }\n}\n```\nThe class previously handled both data generation and file I/O. Now it only generates the report, following SRP.\n\nHere is the code:\npublic class Invoice {\n    public void calculateTotal() {\n        // calculate total\n    }\n    public void printInvoice() {\n        // print invoice\n    }\n    public void saveToFile() {\n        // save invoice to file\n    }\n}", "raw_response": "**SRP**\n```java\npublic class Invoice {\n    public void calculateTotal() {\n        // calculate total\n    }\n}\n\npublic class InvoicePrinter {\n    public void printInvoice(Invoice invoice) {\n        // print invoice\n    }\n}\n\npublic class InvoiceSaver {\n    public void saveToFile(Invoice invoice) {\n        // save invoice to file\n    }\n}\n```\nThe original `Invoice` class handled multiple responsibilities: calculating totals, printing invoices, and saving to files. The refactoring separates these concerns into distinct classes, adhering to the Single Responsibility Principle (SRP).", "violation": "SRP", "violation_list": ["SRP"], "explanation": "**SRP**", "solution_code": "public class Invoice {\n    public void calculateTotal() {\n        // calculate total\n    }\n}\n\npublic class InvoicePrinter {\n    public void printInvoice(Invoice invoice) {\n        // print invoice\n    }\n}\n\npublic class InvoiceSaver {\n    public void saveToFile(Invoice invoice) {\n        // save invoice to file\n    }\n}", "duration_seconds": 1.9038944244384766}
{"id": 3, "strategy": "example", "violation_type": "srp", "model": "gpt-4o-mini", "language": "JAVA", "input": "public class User {\n    private String username;\n    public void login() {\n        // login logic\n    }\n    public void sendEmail() {\n        // send email to user\n    }\n}", "prompt": "You are an expert in identifying and refactoring SOLID principle violations in JAVA code. Your task is to analyze the code provided and respond in the exact format below, without any additional text or commentary.\n\nYou must provide the following three parts in your response:\n1. The violated SOLID principle (e.g., SRP, OCP, LSP, ISP, DIP). If no violation exists, respond with **NONE**.\n2. A complete refactored version of the code that removes the violation. YOU MUST RETURN ONLY THE CODE BLOCK.\n3. A brief explanation of the violation and the refactoring.\n\nUse these criteria to detect violations:\n- **SRP**: A class does too many unrelated tasks.\n- **OCP**: Multiple `if-else` or `switch` blocks for logic that should be handled by polymorphism.\n- **LSP**: Subclasses override behavior in a way that breaks the contract of the base class (e.g., throw exceptions).\n- **ISP**: Interfaces that are too large or force implementing unnecessary methods.\n- **DIP**: High-level classes directly depend on low-level classes instead of abstractions.\n\nIf more than one violation is present, report only the most prominent one.\n\n**IMPORTANT:** Follow this output format *exactly*. Do not include greetings, summaries, or comments before or after the output:\n\n**<VIOLATION TYPE>**\n```java\n<Refactored code>\n```\n<Explanation of the refactoring>\n\nExample output:\n**SRP**\n```java\npublic class ReportGenerator {\n    public String generateReport() {\n        return \"Report data\";\n    }\n}\n```\nThe class previously handled both data generation and file I/O. Now it only generates the report, following SRP.\n\nHere is the code:\npublic class User {\n    private String username;\n    public void login() {\n        // login logic\n    }\n    public void sendEmail() {\n        // send email to user\n    }\n}", "raw_response": "**SRP**\n```java\npublic class User {\n    private String username;\n\n    public void login() {\n        // login logic\n    }\n}\n\npublic class EmailService {\n    public void sendEmail(User user) {\n        // send email to user\n    }\n}\n```\nThe `User` class previously handled both user login and email sending, violating the Single Responsibility Principle (SRP). Now, the email functionality has been moved to a separate `EmailService` class, ensuring that each class has a single responsibility.", "violation": "SRP", "violation_list": ["SRP"], "explanation": "**SRP**", "solution_code": "public class User {\n    private String username;\n\n    public void login() {\n        // login logic\n    }\n}\n\npublic class EmailService {\n    public void sendEmail(User user) {\n        // send email to user\n    }\n}", "duration_seconds": 2.489051342010498}
{"id": 4, "strategy": "example", "violation_type": "srp", "model": "gpt-4o-mini", "language": "JAVA", "input": "public class Order {\n    public void addItem(String item) {\n        // add item\n    }\n    public void processPayment() {\n        // process payment\n    }\n    public void sendConfirmationEmail() {\n        // send confirmation email\n    }\n}", "prompt": "You are an expert in identifying and refactoring SOLID principle violations in JAVA code. Your task is to analyze the code provided and respond in the exact format below, without any additional text or commentary.\n\nYou must provide the following three parts in your response:\n1. The violated SOLID principle (e.g., SRP, OCP, LSP, ISP, DIP). If no violation exists, respond with **NONE**.\n2. A complete refactored version of the code that removes the violation. YOU MUST RETURN ONLY THE CODE BLOCK.\n3. A brief explanation of the violation and the refactoring.\n\nUse these criteria to detect violations:\n- **SRP**: A class does too many unrelated tasks.\n- **OCP**: Multiple `if-else` or `switch` blocks for logic that should be handled by polymorphism.\n- **LSP**: Subclasses override behavior in a way that breaks the contract of the base class (e.g., throw exceptions).\n- **ISP**: Interfaces that are too large or force implementing unnecessary methods.\n- **DIP**: High-level classes directly depend on low-level classes instead of abstractions.\n\nIf more than one violation is present, report only the most prominent one.\n\n**IMPORTANT:** Follow this output format *exactly*. Do not include greetings, summaries, or comments before or after the output:\n\n**<VIOLATION TYPE>**\n```java\n<Refactored code>\n```\n<Explanation of the refactoring>\n\nExample output:\n**SRP**\n```java\npublic class ReportGenerator {\n    public String generateReport() {\n        return \"Report data\";\n    }\n}\n```\nThe class previously handled both data generation and file I/O. Now it only generates the report, following SRP.\n\nHere is the code:\npublic class Order {\n    public void addItem(String item) {\n        // add item\n    }\n    public void processPayment() {\n        // process payment\n    }\n    public void sendConfirmationEmail() {\n        // send confirmation email\n    }\n}", "raw_response": "**SRP**\n```java\npublic class Order {\n    public void addItem(String item) {\n        // add item\n    }\n}\n\npublic class PaymentProcessor {\n    public void processPayment(Order order) {\n        // process payment\n    }\n}\n\npublic class EmailService {\n    public void sendConfirmationEmail(Order order) {\n        // send confirmation email\n    }\n}\n```\nThe `Order` class previously handled adding items, processing payments, and sending confirmation emails, violating the Single Responsibility Principle (SRP). The refactoring separates these concerns into distinct classes: `Order` for managing items, `PaymentProcessor` for handling payments, and `EmailService` for sending emails.", "violation": "SRP", "violation_list": ["SRP"], "explanation": "**SRP**", "solution_code": "public class Order {\n    public void addItem(String item) {\n        // add item\n    }\n}\n\npublic class PaymentProcessor {\n    public void processPayment(Order order) {\n        // process payment\n    }\n}\n\npublic class EmailService {\n    public void sendConfirmationEmail(Order order) {\n        // send confirmation email\n    }\n}", "duration_seconds": 3.2677576541900635}
{"id": 5, "strategy": "example", "violation_type": "srp", "model": "gpt-4o-mini", "language": "JAVA", "input": "public class Student {\n    private String name;\n    public void enrollInCourse(String course) {\n        // enroll logic\n    }\n    public void calculateGPA() {\n        // calculate GPA\n    }\n    public void printTranscript() {\n        // print transcript\n    }\n}", "prompt": "You are an expert in identifying and refactoring SOLID principle violations in JAVA code. Your task is to analyze the code provided and respond in the exact format below, without any additional text or commentary.\n\nYou must provide the following three parts in your response:\n1. The violated SOLID principle (e.g., SRP, OCP, LSP, ISP, DIP). If no violation exists, respond with **NONE**.\n2. A complete refactored version of the code that removes the violation. YOU MUST RETURN ONLY THE CODE BLOCK.\n3. A brief explanation of the violation and the refactoring.\n\nUse these criteria to detect violations:\n- **SRP**: A class does too many unrelated tasks.\n- **OCP**: Multiple `if-else` or `switch` blocks for logic that should be handled by polymorphism.\n- **LSP**: Subclasses override behavior in a way that breaks the contract of the base class (e.g., throw exceptions).\n- **ISP**: Interfaces that are too large or force implementing unnecessary methods.\n- **DIP**: High-level classes directly depend on low-level classes instead of abstractions.\n\nIf more than one violation is present, report only the most prominent one.\n\n**IMPORTANT:** Follow this output format *exactly*. Do not include greetings, summaries, or comments before or after the output:\n\n**<VIOLATION TYPE>**\n```java\n<Refactored code>\n```\n<Explanation of the refactoring>\n\nExample output:\n**SRP**\n```java\npublic class ReportGenerator {\n    public String generateReport() {\n        return \"Report data\";\n    }\n}\n```\nThe class previously handled both data generation and file I/O. Now it only generates the report, following SRP.\n\nHere is the code:\npublic class Student {\n    private String name;\n    public void enrollInCourse(String course) {\n        // enroll logic\n    }\n    public void calculateGPA() {\n        // calculate GPA\n    }\n    public void printTranscript() {\n        // print transcript\n    }\n}", "raw_response": "**SRP**\n```java\npublic class Student {\n    private String name;\n\n    public void enrollInCourse(String course) {\n        // enroll logic\n    }\n}\n\npublic class GPAService {\n    public void calculateGPA(Student student) {\n        // calculate GPA\n    }\n}\n\npublic class TranscriptPrinter {\n    public void printTranscript(Student student) {\n        // print transcript\n    }\n}\n```\nThe original `Student` class handled multiple responsibilities: enrolling in courses, calculating GPA, and printing transcripts. The refactoring separates these concerns into distinct classes, adhering to the Single Responsibility Principle (SRP).", "violation": "SRP", "violation_list": ["SRP"], "explanation": "**SRP**", "solution_code": "public class Student {\n    private String name;\n\n    public void enrollInCourse(String course) {\n        // enroll logic\n    }\n}\n\npublic class GPAService {\n    public void calculateGPA(Student student) {\n        // calculate GPA\n    }\n}\n\npublic class TranscriptPrinter {\n    public void printTranscript(Student student) {\n        // print transcript\n    }\n}", "duration_seconds": 3.173746109008789}
{"id": 6, "strategy": "example", "violation_type": "srp", "model": "gpt-4o-mini", "language": "JAVA", "input": "public class Product {\n    private String name;\n    public void updateStock(int amount) {\n        // update stock\n    }\n    public void displayProduct() {\n        // display product\n    }\n    public void logChange() {\n        // log change\n    }\n}", "prompt": "You are an expert in identifying and refactoring SOLID principle violations in JAVA code. Your task is to analyze the code provided and respond in the exact format below, without any additional text or commentary.\n\nYou must provide the following three parts in your response:\n1. The violated SOLID principle (e.g., SRP, OCP, LSP, ISP, DIP). If no violation exists, respond with **NONE**.\n2. A complete refactored version of the code that removes the violation. YOU MUST RETURN ONLY THE CODE BLOCK.\n3. A brief explanation of the violation and the refactoring.\n\nUse these criteria to detect violations:\n- **SRP**: A class does too many unrelated tasks.\n- **OCP**: Multiple `if-else` or `switch` blocks for logic that should be handled by polymorphism.\n- **LSP**: Subclasses override behavior in a way that breaks the contract of the base class (e.g., throw exceptions).\n- **ISP**: Interfaces that are too large or force implementing unnecessary methods.\n- **DIP**: High-level classes directly depend on low-level classes instead of abstractions.\n\nIf more than one violation is present, report only the most prominent one.\n\n**IMPORTANT:** Follow this output format *exactly*. Do not include greetings, summaries, or comments before or after the output:\n\n**<VIOLATION TYPE>**\n```java\n<Refactored code>\n```\n<Explanation of the refactoring>\n\nExample output:\n**SRP**\n```java\npublic class ReportGenerator {\n    public String generateReport() {\n        return \"Report data\";\n    }\n}\n```\nThe class previously handled both data generation and file I/O. Now it only generates the report, following SRP.\n\nHere is the code:\npublic class Product {\n    private String name;\n    public void updateStock(int amount) {\n        // update stock\n    }\n    public void displayProduct() {\n        // display product\n    }\n    public void logChange() {\n        // log change\n    }\n}", "raw_response": "**SRP**\n```java\npublic class Product {\n    private String name;\n    \n    public void updateStock(int amount) {\n        // update stock\n    }\n    \n    public void displayProduct() {\n        // display product\n    }\n}\n\npublic class ProductLogger {\n    public void logChange(Product product) {\n        // log change\n    }\n}\n```\nThe `Product` class previously handled multiple responsibilities: updating stock, displaying the product, and logging changes. Now, the logging functionality has been moved to a separate `ProductLogger` class, adhering to the Single Responsibility Principle (SRP).", "violation": "SRP", "violation_list": ["SRP"], "explanation": "**SRP**", "solution_code": "public class Product {\n    private String name;\n    \n    public void updateStock(int amount) {\n        // update stock\n    }\n    \n    public void displayProduct() {\n        // display product\n    }\n}\n\npublic class ProductLogger {\n    public void logChange(Product product) {\n        // log change\n    }\n}", "duration_seconds": 2.1353759765625}
{"id": 7, "strategy": "example", "violation_type": "srp", "model": "gpt-4o-mini", "language": "JAVA", "input": "public class Vehicle {\n    private String type;\n    public void startEngine() {\n        // start engine\n    }\n    public void calculateFuelEfficiency() {\n        // calculate fuel efficiency\n    }\n    public void scheduleMaintenance() {\n        // schedule maintenance\n    }\n}", "prompt": "You are an expert in identifying and refactoring SOLID principle violations in JAVA code. Your task is to analyze the code provided and respond in the exact format below, without any additional text or commentary.\n\nYou must provide the following three parts in your response:\n1. The violated SOLID principle (e.g., SRP, OCP, LSP, ISP, DIP). If no violation exists, respond with **NONE**.\n2. A complete refactored version of the code that removes the violation. YOU MUST RETURN ONLY THE CODE BLOCK.\n3. A brief explanation of the violation and the refactoring.\n\nUse these criteria to detect violations:\n- **SRP**: A class does too many unrelated tasks.\n- **OCP**: Multiple `if-else` or `switch` blocks for logic that should be handled by polymorphism.\n- **LSP**: Subclasses override behavior in a way that breaks the contract of the base class (e.g., throw exceptions).\n- **ISP**: Interfaces that are too large or force implementing unnecessary methods.\n- **DIP**: High-level classes directly depend on low-level classes instead of abstractions.\n\nIf more than one violation is present, report only the most prominent one.\n\n**IMPORTANT:** Follow this output format *exactly*. Do not include greetings, summaries, or comments before or after the output:\n\n**<VIOLATION TYPE>**\n```java\n<Refactored code>\n```\n<Explanation of the refactoring>\n\nExample output:\n**SRP**\n```java\npublic class ReportGenerator {\n    public String generateReport() {\n        return \"Report data\";\n    }\n}\n```\nThe class previously handled both data generation and file I/O. Now it only generates the report, following SRP.\n\nHere is the code:\npublic class Vehicle {\n    private String type;\n    public void startEngine() {\n        // start engine\n    }\n    public void calculateFuelEfficiency() {\n        // calculate fuel efficiency\n    }\n    public void scheduleMaintenance() {\n        // schedule maintenance\n    }\n}", "raw_response": "**SRP**\n```java\npublic class Vehicle {\n    private String type;\n\n    public void startEngine() {\n        // start engine\n    }\n}\n\npublic class FuelEfficiencyCalculator {\n    public void calculateFuelEfficiency(Vehicle vehicle) {\n        // calculate fuel efficiency\n    }\n}\n\npublic class MaintenanceScheduler {\n    public void scheduleMaintenance(Vehicle vehicle) {\n        // schedule maintenance\n    }\n}\n```\nThe original `Vehicle` class handled multiple responsibilities: starting the engine, calculating fuel efficiency, and scheduling maintenance. The refactoring separates these concerns into distinct classes, adhering to the Single Responsibility Principle (SRP).", "violation": "SRP", "violation_list": ["SRP"], "explanation": "**SRP**", "solution_code": "public class Vehicle {\n    private String type;\n\n    public void startEngine() {\n        // start engine\n    }\n}\n\npublic class FuelEfficiencyCalculator {\n    public void calculateFuelEfficiency(Vehicle vehicle) {\n        // calculate fuel efficiency\n    }\n}\n\npublic class MaintenanceScheduler {\n    public void scheduleMaintenance(Vehicle vehicle) {\n        // schedule maintenance\n    }\n}", "duration_seconds": 2.4324076175689697}
{"id": 8, "strategy": "example", "violation_type": "srp", "model": "gpt-4o-mini", "language": "JAVA", "input": "import java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.UUID;\nimport javax.mail.*;\nimport javax.mail.internet.*;\nimport java.util.Properties;\n\npublic class UserOnboardingService {\n\n    private final String dbUrl;\n    private final String smtpHost;\n\n    public UserOnboardingService(String dbUrl, String smtpHost) {\n        this.dbUrl = dbUrl;\n        this.smtpHost = smtpHost;\n    }\n\n    public boolean onboardNewUser(String username, String email, String password) {\n        System.out.println(\"[UserOnboardingService] Starting onboarding for user: \" + username);\n\n        if (userExists(username, email)) {\n            System.out.println(\"[UserOnboardingService] User already exists.\");\n            logEvent(\"UserRegistrationFailed\", username, \"User already exists\");\n            return false;\n        }\n        System.out.println(\"[UserOnboardingService] User does not exist.\");\n\n        String userId = UUID.randomUUID().toString();\n        String passwordHash = hashPassword(password);\n        System.out.println(\"[UserOnboardingService] Password hashed.\");\n\n        if (!saveUserToDatabase(userId, username, email, passwordHash)) {\n            System.out.println(\"[UserOnboardingService] Failed to save user to database.\");\n            logEvent(\"UserRegistrationFailed\", username, \"DB Save Failed\");\n            return false;\n        }\n        System.out.println(\"[UserOnboardingService] User saved with ID: \" + userId);\n\n        if (!sendVerificationEmail(email, userId)) {\n            System.out.println(\"[UserOnboardingService] Failed to send verification email.\");\n            logEvent(\"UserRegistrationFailed\", username, \"Email Sending Failed\");\n            // In a real system, might need to mark user as unverified or clean up DB entry\n            return false;\n        }\n        System.out.println(\"[UserOnboardingService] Verification email sent.\");\n\n        initializeUserProfile(userId);\n        System.out.println(\"[UserOnboardingService] User profile initialized.\");\n\n        logEvent(\"UserRegistered\", username, \"Success\");\n        System.out.println(\"[UserOnboardingService] Onboarding complete for user: \" + username);\n        return true;\n    }\n\n    private boolean userExists(String username, String email) {\n        System.out.println(\"[UserOnboardingService] Checking if user exists (DB: \" + dbUrl + \")...\");\n        String sql = \"SELECT COUNT(*) FROM users WHERE username = ? OR email = ?\";\n        try (Connection conn = DriverManager.getConnection(dbUrl);\n             PreparedStatement pstmt = conn.prepareStatement(sql)) {\n            pstmt.setString(1, username);\n            pstmt.setString(2, email);\n            ResultSet rs = pstmt.executeQuery();\n            if (rs.next()) {\n                return rs.getInt(1) > 0;\n            }\n            return false;\n        } catch (SQLException e) {\n            System.err.println(\"[UserOnboardingService] Database error checking existence: \" + e.getMessage());\n            return false;\n        }\n    }\n\n    private String hashPassword(String password) {\n        System.out.println(\"[UserOnboardingService] Hashing password...\");\n\n        return \"hashed_\" + password; \n    }\n\n    private boolean saveUserToDatabase(String userId, String username, String email, String passwordHash) {\n        System.out.println(\"[UserOnboardingService] Saving user to DB: \" + dbUrl + \"...\");\n        String sql = \"INSERT INTO users (id, username, email, password_hash) VALUES (?, ?, ?, ?)\";\n        try (Connection conn = DriverManager.getConnection(dbUrl);\n             PreparedStatement pstmt = conn.prepareStatement(sql)) {\n            pstmt.setString(1, userId);\n            pstmt.setString(2, username);\n            pstmt.setString(3, email);\n            pstmt.setString(4, passwordHash);\n            int affectedRows = pstmt.executeUpdate();\n            return affectedRows > 0;\n        } catch (SQLException e) {\n            System.err.println(\"[UserOnboardingService] Database error saving user: \" + e.getMessage());\n            return false;\n        }\n    }\n\n    private boolean sendVerificationEmail(String email, String userId) {\n        System.out.println(\"[UserOnboardingService] Sending verification email to \" + email + \" (SMTP: \" + smtpHost + \")...\");\n        Properties props = new Properties();\n        props.put(\"mail.smtp.auth\", \"true\");\n        props.put(\"mail.smtp.starttls.enable\", \"true\");\n        props.put(\"mail.smtp.host\", smtpHost);\n        props.put(\"mail.smtp.port\", \"587\");\n\n        Session session = Session.getInstance(props, new Authenticator() {\n            protected PasswordAuthentication getPasswordAuthentication() {\n                return new PasswordAuthentication(\"no-reply@example.com\", \"password\"); \n            }\n        });\n\n        try {\n            Message message = new MimeMessage(session);\n            message.setFrom(new InternetAddress(\"no-reply@example.com\"));\n            message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(email));\n            message.setSubject(\"Verify Your Email Address\");\n            message.setText(\"Please click the link to verify your email: http://app.com/verify?id=\" + userId);\n\n\n            Transport.send(message);\n            return true;\n        } catch (MessagingException e) {\n            System.err.println(\"[UserOnboardingService] Error sending email: \" + e.getMessage());\n            return false;\n        }\n    }\n\n    private void initializeUserProfile(String userId) {\n        System.out.println(\"[UserOnboardingService] Initializing profile for user ID: \" + userId + \"...\");\n\n        String sql = \"INSERT INTO user_profiles (user_id, registration_date) VALUES (?, CURRENT_DATE)\";\n        try (Connection conn = DriverManager.getConnection(dbUrl);\n             PreparedStatement pstmt = conn.prepareStatement(sql)) {\n            pstmt.setString(1, userId);\n            pstmt.executeUpdate();\n        } catch (SQLException e) {\n            System.err.println(\"[UserOnboardingService] Database error initializing profile: \" + e.getMessage());\n\n        }\n    }\n\n    private void logEvent(String eventType, String relatedUser, String details) {\n        System.out.println(\"[UserOnboardingService] LOG: Type=\" + eventType + \", User=\" + relatedUser + \", Details=\" + details);\n\n\n    }\n\n    public static void main(String[] args) {\n        String testDbUrl = \"jdbc:sqlite:test_onboarding.db\";\n        String testSmtpHost = \"localhost\";\n\n        try (Connection conn = DriverManager.getConnection(testDbUrl)) {\n            conn.createStatement().execute(\"DROP TABLE IF EXISTS users;\");\n            conn.createStatement().execute(\"CREATE TABLE users (id TEXT PRIMARY KEY, username TEXT UNIQUE, email TEXT UNIQUE, password_hash TEXT);\");\n            conn.createStatement().execute(\"DROP TABLE IF EXISTS user_profiles;\");\n            conn.createStatement().execute(\"CREATE TABLE user_profiles (user_id TEXT PRIMARY KEY, registration_date DATE);\");\n             conn.createStatement().execute(\"DROP TABLE IF EXISTS audit_log;\");\n            conn.createStatement().execute(\"CREATE TABLE audit_log (event_type TEXT, related_user TEXT, details TEXT);\");\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n\n        UserOnboardingService service = new UserOnboardingService(testDbUrl, testSmtpHost);\n\n        service.onboardNewUser(\"johndoe\", \"john.doe@example.com\", \"securepass\");\n        service.onboardNewUser(\"johndoe\", \"john.doe@example.com\", \"anotherpass\"); \n        service.onboardNewUser(\"janedoe\", \"jane.doe@example.com\", \"easypass\");\n    }\n}\n", "prompt": "You are an expert in identifying and refactoring SOLID principle violations in JAVA code. Your task is to analyze the code provided and respond in the exact format below, without any additional text or commentary.\n\nYou must provide the following three parts in your response:\n1. The violated SOLID principle (e.g., SRP, OCP, LSP, ISP, DIP). If no violation exists, respond with **NONE**.\n2. A complete refactored version of the code that removes the violation. YOU MUST RETURN ONLY THE CODE BLOCK.\n3. A brief explanation of the violation and the refactoring.\n\nUse these criteria to detect violations:\n- **SRP**: A class does too many unrelated tasks.\n- **OCP**: Multiple `if-else` or `switch` blocks for logic that should be handled by polymorphism.\n- **LSP**: Subclasses override behavior in a way that breaks the contract of the base class (e.g., throw exceptions).\n- **ISP**: Interfaces that are too large or force implementing unnecessary methods.\n- **DIP**: High-level classes directly depend on low-level classes instead of abstractions.\n\nIf more than one violation is present, report only the most prominent one.\n\n**IMPORTANT:** Follow this output format *exactly*. Do not include greetings, summaries, or comments before or after the output:\n\n**<VIOLATION TYPE>**\n```java\n<Refactored code>\n```\n<Explanation of the refactoring>\n\nExample output:\n**SRP**\n```java\npublic class ReportGenerator {\n    public String generateReport() {\n        return \"Report data\";\n    }\n}\n```\nThe class previously handled both data generation and file I/O. Now it only generates the report, following SRP.\n\nHere is the code:\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.UUID;\nimport javax.mail.*;\nimport javax.mail.internet.*;\nimport java.util.Properties;\n\npublic class UserOnboardingService {\n\n    private final String dbUrl;\n    private final String smtpHost;\n\n    public UserOnboardingService(String dbUrl, String smtpHost) {\n        this.dbUrl = dbUrl;\n        this.smtpHost = smtpHost;\n    }\n\n    public boolean onboardNewUser(String username, String email, String password) {\n        System.out.println(\"[UserOnboardingService] Starting onboarding for user: \" + username);\n\n        if (userExists(username, email)) {\n            System.out.println(\"[UserOnboardingService] User already exists.\");\n            logEvent(\"UserRegistrationFailed\", username, \"User already exists\");\n            return false;\n        }\n        System.out.println(\"[UserOnboardingService] User does not exist.\");\n\n        String userId = UUID.randomUUID().toString();\n        String passwordHash = hashPassword(password);\n        System.out.println(\"[UserOnboardingService] Password hashed.\");\n\n        if (!saveUserToDatabase(userId, username, email, passwordHash)) {\n            System.out.println(\"[UserOnboardingService] Failed to save user to database.\");\n            logEvent(\"UserRegistrationFailed\", username, \"DB Save Failed\");\n            return false;\n        }\n        System.out.println(\"[UserOnboardingService] User saved with ID: \" + userId);\n\n        if (!sendVerificationEmail(email, userId)) {\n            System.out.println(\"[UserOnboardingService] Failed to send verification email.\");\n            logEvent(\"UserRegistrationFailed\", username, \"Email Sending Failed\");\n            // In a real system, might need to mark user as unverified or clean up DB entry\n            return false;\n        }\n        System.out.println(\"[UserOnboardingService] Verification email sent.\");\n\n        initializeUserProfile(userId);\n        System.out.println(\"[UserOnboardingService] User profile initialized.\");\n\n        logEvent(\"UserRegistered\", username, \"Success\");\n        System.out.println(\"[UserOnboardingService] Onboarding complete for user: \" + username);\n        return true;\n    }\n\n    private boolean userExists(String username, String email) {\n        System.out.println(\"[UserOnboardingService] Checking if user exists (DB: \" + dbUrl + \")...\");\n        String sql = \"SELECT COUNT(*) FROM users WHERE username = ? OR email = ?\";\n        try (Connection conn = DriverManager.getConnection(dbUrl);\n             PreparedStatement pstmt = conn.prepareStatement(sql)) {\n            pstmt.setString(1, username);\n            pstmt.setString(2, email);\n            ResultSet rs = pstmt.executeQuery();\n            if (rs.next()) {\n                return rs.getInt(1) > 0;\n            }\n            return false;\n        } catch (SQLException e) {\n            System.err.println(\"[UserOnboardingService] Database error checking existence: \" + e.getMessage());\n            return false;\n        }\n    }\n\n    private String hashPassword(String password) {\n        System.out.println(\"[UserOnboardingService] Hashing password...\");\n\n        return \"hashed_\" + password; \n    }\n\n    private boolean saveUserToDatabase(String userId, String username, String email, String passwordHash) {\n        System.out.println(\"[UserOnboardingService] Saving user to DB: \" + dbUrl + \"...\");\n        String sql = \"INSERT INTO users (id, username, email, password_hash) VALUES (?, ?, ?, ?)\";\n        try (Connection conn = DriverManager.getConnection(dbUrl);\n             PreparedStatement pstmt = conn.prepareStatement(sql)) {\n            pstmt.setString(1, userId);\n            pstmt.setString(2, username);\n            pstmt.setString(3, email);\n            pstmt.setString(4, passwordHash);\n            int affectedRows = pstmt.executeUpdate();\n            return affectedRows > 0;\n        } catch (SQLException e) {\n            System.err.println(\"[UserOnboardingService] Database error saving user: \" + e.getMessage());\n            return false;\n        }\n    }\n\n    private boolean sendVerificationEmail(String email, String userId) {\n        System.out.println(\"[UserOnboardingService] Sending verification email to \" + email + \" (SMTP: \" + smtpHost + \")...\");\n        Properties props = new Properties();\n        props.put(\"mail.smtp.auth\", \"true\");\n        props.put(\"mail.smtp.starttls.enable\", \"true\");\n        props.put(\"mail.smtp.host\", smtpHost);\n        props.put(\"mail.smtp.port\", \"587\");\n\n        Session session = Session.getInstance(props, new Authenticator() {\n            protected PasswordAuthentication getPasswordAuthentication() {\n                return new PasswordAuthentication(\"no-reply@example.com\", \"password\"); \n            }\n        });\n\n        try {\n            Message message = new MimeMessage(session);\n            message.setFrom(new InternetAddress(\"no-reply@example.com\"));\n            message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(email));\n            message.setSubject(\"Verify Your Email Address\");\n            message.setText(\"Please click the link to verify your email: http://app.com/verify?id=\" + userId);\n\n\n            Transport.send(message);\n            return true;\n        } catch (MessagingException e) {\n            System.err.println(\"[UserOnboardingService] Error sending email: \" + e.getMessage());\n            return false;\n        }\n    }\n\n    private void initializeUserProfile(String userId) {\n        System.out.println(\"[UserOnboardingService] Initializing profile for user ID: \" + userId + \"...\");\n\n        String sql = \"INSERT INTO user_profiles (user_id, registration_date) VALUES (?, CURRENT_DATE)\";\n        try (Connection conn = DriverManager.getConnection(dbUrl);\n             PreparedStatement pstmt = conn.prepareStatement(sql)) {\n            pstmt.setString(1, userId);\n            pstmt.executeUpdate();\n        } catch (SQLException e) {\n            System.err.println(\"[UserOnboardingService] Database error initializing profile: \" + e.getMessage());\n\n        }\n    }\n\n    private void logEvent(String eventType, String relatedUser, String details) {\n        System.out.println(\"[UserOnboardingService] LOG: Type=\" + eventType + \", User=\" + relatedUser + \", Details=\" + details);\n\n\n    }\n\n    public static void main(String[] args) {\n        String testDbUrl = \"jdbc:sqlite:test_onboarding.db\";\n        String testSmtpHost = \"localhost\";\n\n        try (Connection conn = DriverManager.getConnection(testDbUrl)) {\n            conn.createStatement().execute(\"DROP TABLE IF EXISTS users;\");\n            conn.createStatement().execute(\"CREATE TABLE users (id TEXT PRIMARY KEY, username TEXT UNIQUE, email TEXT UNIQUE, password_hash TEXT);\");\n            conn.createStatement().execute(\"DROP TABLE IF EXISTS user_profiles;\");\n            conn.createStatement().execute(\"CREATE TABLE user_profiles (user_id TEXT PRIMARY KEY, registration_date DATE);\");\n             conn.createStatement().execute(\"DROP TABLE IF EXISTS audit_log;\");\n            conn.createStatement().execute(\"CREATE TABLE audit_log (event_type TEXT, related_user TEXT, details TEXT);\");\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n\n        UserOnboardingService service = new UserOnboardingService(testDbUrl, testSmtpHost);\n\n        service.onboardNewUser(\"johndoe\", \"john.doe@example.com\", \"securepass\");\n        service.onboardNewUser(\"johndoe\", \"john.doe@example.com\", \"anotherpass\"); \n        service.onboardNewUser(\"janedoe\", \"jane.doe@example.com\", \"easypass\");\n    }\n}\n", "raw_response": "**SRP**\n```java\npublic class UserOnboardingService {\n\n    private final String dbUrl;\n    private final String smtpHost;\n    private final UserRepository userRepository;\n    private final EmailService emailService;\n    private final UserProfileService userProfileService;\n\n    public UserOnboardingService(String dbUrl, String smtpHost) {\n        this.dbUrl = dbUrl;\n        this.smtpHost = smtpHost;\n        this.userRepository = new UserRepository(dbUrl);\n        this.emailService = new EmailService(smtpHost);\n        this.userProfileService = new UserProfileService(dbUrl);\n    }\n\n    public boolean onboardNewUser(String username, String email, String password) {\n        System.out.println(\"[UserOnboardingService] Starting onboarding for user: \" + username);\n\n        if (userRepository.userExists(username, email)) {\n            System.out.println(\"[UserOnboardingService] User already exists.\");\n            logEvent(\"UserRegistrationFailed\", username, \"User already exists\");\n            return false;\n        }\n        System.out.println(\"[UserOnboardingService] User does not exist.\");\n\n        String userId = UUID.randomUUID().toString();\n        String passwordHash = hashPassword(password);\n        System.out.println(\"[UserOnboardingService] Password hashed.\");\n\n        if (!userRepository.saveUser(userId, username, email, passwordHash)) {\n            System.out.println(\"[UserOnboardingService] Failed to save user to database.\");\n            logEvent(\"UserRegistrationFailed\", username, \"DB Save Failed\");\n            return false;\n        }\n        System.out.println(\"[UserOnboardingService] User saved with ID: \" + userId);\n\n        if (!emailService.sendVerificationEmail(email, userId)) {\n            System.out.println(\"[UserOnboardingService] Failed to send verification email.\");\n            logEvent(\"UserRegistrationFailed\", username, \"Email Sending Failed\");\n            return false;\n        }\n        System.out.println(\"[UserOnboardingService] Verification email sent.\");\n\n        userProfileService.initializeUserProfile(userId);\n        System.out.println(\"[UserOnboardingService] User profile initialized.\");\n\n        logEvent(\"UserRegistered\", username, \"Success\");\n        System.out.println(\"[UserOnboardingService] Onboarding complete for user: \" + username);\n        return true;\n    }\n\n    private String hashPassword(String password) {\n        System.out.println(\"[UserOnboardingService] Hashing password...\");\n        return \"hashed_\" + password; \n    }\n\n    private void logEvent(String eventType, String relatedUser, String details) {\n        System.out.println(\"[UserOnboardingService] LOG: Type=\" + eventType + \", User=\" + relatedUser + \", Details=\" + details);\n    }\n\n    public static void main(String[] args) {\n        String testDbUrl = \"jdbc:sqlite:test_onboarding.db\";\n        String testSmtpHost = \"localhost\";\n\n        try (Connection conn = DriverManager.getConnection(testDbUrl)) {\n            conn.createStatement().execute(\"DROP TABLE IF EXISTS users;\");\n            conn.createStatement().execute(\"CREATE TABLE users (id TEXT PRIMARY KEY, username TEXT UNIQUE, email TEXT UNIQUE, password_hash TEXT);\");\n            conn.createStatement().execute(\"DROP TABLE IF EXISTS user_profiles;\");\n            conn.createStatement().execute(\"CREATE TABLE user_profiles (user_id TEXT PRIMARY KEY, registration_date DATE);\");\n            conn.createStatement().execute(\"DROP TABLE IF EXISTS audit_log;\");\n            conn.createStatement().execute(\"CREATE TABLE audit_log (event_type TEXT, related_user TEXT, details TEXT);\");\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n\n        UserOnboardingService service = new UserOnboardingService(testDbUrl, testSmtpHost);\n        service.onboardNewUser(\"johndoe\", \"john.doe@example.com\", \"securepass\");\n        service.onboardNewUser(\"johndoe\", \"john.doe@example.com\", \"anotherpass\"); \n        service.onboardNewUser(\"janedoe\", \"jane.doe@example.com\", \"easypass\");\n    }\n}\n\nclass UserRepository {\n    private final String dbUrl;\n\n    public UserRepository(String dbUrl) {\n        this.dbUrl = dbUrl;\n    }\n\n    public boolean userExists(String username, String email) {\n        System.out.println(\"[UserRepository] Checking if user exists (DB: \" + dbUrl + \")...\");\n        String sql = \"SELECT COUNT(*) FROM users WHERE username = ? OR email = ?\";\n        try (Connection conn = DriverManager.getConnection(dbUrl);\n             PreparedStatement pstmt = conn.prepareStatement(sql)) {\n            pstmt.setString(1, username);\n            pstmt.setString(2, email);\n            ResultSet rs = pstmt.executeQuery();\n            return rs.next() && rs.getInt(1) > 0;\n        } catch (SQLException e) {\n            System.err.println(\"[UserRepository] Database error checking existence: \" + e.getMessage());\n            return false;\n        }\n    }\n\n    public boolean saveUser(String userId, String username, String email, String passwordHash) {\n        System.out.println(\"[UserRepository] Saving user to DB: \" + dbUrl + \"...\");\n        String sql = \"INSERT INTO users (id, username, email, password_hash) VALUES (?, ?, ?, ?)\";\n        try (Connection conn = DriverManager.getConnection(dbUrl);\n             PreparedStatement pstmt = conn.prepareStatement(sql)) {\n            pstmt.setString(1, userId);\n            pstmt.setString(2, username);\n            pstmt.setString(3, email);\n            pstmt.setString(4, passwordHash);\n            return pstmt.executeUpdate() > 0;\n        } catch (SQLException e) {\n            System.err.println(\"[UserRepository] Database error saving user: \" + e.getMessage());\n            return false;\n        }\n    }\n}\n\nclass EmailService {\n    private final String smtpHost;\n\n    public EmailService(String smtpHost) {\n        this.smtpHost = smtpHost;\n    }\n\n    public boolean sendVerificationEmail(String email, String userId) {\n        System.out.println(\"[EmailService] Sending verification email to \" + email + \" (SMTP: \" + smtpHost + \")...\");\n        Properties props = new Properties();\n        props.put(\"mail.smtp.auth\", \"true\");\n        props.put(\"mail.smtp.starttls.enable\", \"true\");\n        props.put(\"mail.smtp.host\", smtpHost);\n        props.put(\"mail.smtp.port\", \"587\");\n\n        Session session = Session.getInstance(props, new Authenticator() {\n            protected PasswordAuthentication getPasswordAuthentication() {\n                return new PasswordAuthentication(\"no-reply@example.com\", \"password\"); \n            }\n        });\n\n        try {\n            Message message = new MimeMessage(session);\n            message.setFrom(new InternetAddress(\"no-reply@example.com\"));\n            message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(email));\n            message.setSubject(\"Verify Your Email Address\");\n            message.setText(\"Please click the link to verify your email: http://app.com/verify?id=\" + userId);\n            Transport.send(message);\n            return true;\n        } catch (MessagingException e) {\n            System.err.println(\"[EmailService] Error sending email: \" + e.getMessage());\n            return false;\n        }\n    }\n}\n\nclass UserProfileService {\n    private final String dbUrl;\n\n    public UserProfileService(String dbUrl) {\n        this.dbUrl = dbUrl;\n    }\n\n    public void initializeUserProfile(String userId) {\n        System.out.println(\"[UserProfileService] Initializing profile for user ID: \" + userId + \"...\");\n        String sql = \"INSERT INTO user_profiles (user_id, registration_date) VALUES (?, CURRENT_DATE)\";\n        try (Connection conn = DriverManager.getConnection(dbUrl);\n             PreparedStatement pstmt = conn.prepareStatement(sql)) {\n            pstmt.setString(1, userId);\n            pstmt.executeUpdate();\n        } catch (SQLException e) {\n            System.err.println(\"[UserProfileService] Database error initializing profile: \" + e.getMessage());\n        }\n    }\n}\n```\nThe original `UserOnboardingService` class handled multiple responsibilities including user data management, email sending, and user profile initialization, violating the Single Responsibility Principle (SRP). The refactored code separates these concerns into distinct classes: `UserRepository`, `EmailService`, and `UserProfileService`, each handling a specific aspect of the onboarding process.", "violation": "SRP", "violation_list": ["SRP"], "explanation": "**SRP**", "solution_code": "public class UserOnboardingService {\n\n    private final String dbUrl;\n    private final String smtpHost;\n    private final UserRepository userRepository;\n    private final EmailService emailService;\n    private final UserProfileService userProfileService;\n\n    public UserOnboardingService(String dbUrl, String smtpHost) {\n        this.dbUrl = dbUrl;\n        this.smtpHost = smtpHost;\n        this.userRepository = new UserRepository(dbUrl);\n        this.emailService = new EmailService(smtpHost);\n        this.userProfileService = new UserProfileService(dbUrl);\n    }\n\n    public boolean onboardNewUser(String username, String email, String password) {\n        System.out.println(\"[UserOnboardingService] Starting onboarding for user: \" + username);\n\n        if (userRepository.userExists(username, email)) {\n            System.out.println(\"[UserOnboardingService] User already exists.\");\n            logEvent(\"UserRegistrationFailed\", username, \"User already exists\");\n            return false;\n        }\n        System.out.println(\"[UserOnboardingService] User does not exist.\");\n\n        String userId = UUID.randomUUID().toString();\n        String passwordHash = hashPassword(password);\n        System.out.println(\"[UserOnboardingService] Password hashed.\");\n\n        if (!userRepository.saveUser(userId, username, email, passwordHash)) {\n            System.out.println(\"[UserOnboardingService] Failed to save user to database.\");\n            logEvent(\"UserRegistrationFailed\", username, \"DB Save Failed\");\n            return false;\n        }\n        System.out.println(\"[UserOnboardingService] User saved with ID: \" + userId);\n\n        if (!emailService.sendVerificationEmail(email, userId)) {\n            System.out.println(\"[UserOnboardingService] Failed to send verification email.\");\n            logEvent(\"UserRegistrationFailed\", username, \"Email Sending Failed\");\n            return false;\n        }\n        System.out.println(\"[UserOnboardingService] Verification email sent.\");\n\n        userProfileService.initializeUserProfile(userId);\n        System.out.println(\"[UserOnboardingService] User profile initialized.\");\n\n        logEvent(\"UserRegistered\", username, \"Success\");\n        System.out.println(\"[UserOnboardingService] Onboarding complete for user: \" + username);\n        return true;\n    }\n\n    private String hashPassword(String password) {\n        System.out.println(\"[UserOnboardingService] Hashing password...\");\n        return \"hashed_\" + password; \n    }\n\n    private void logEvent(String eventType, String relatedUser, String details) {\n        System.out.println(\"[UserOnboardingService] LOG: Type=\" + eventType + \", User=\" + relatedUser + \", Details=\" + details);\n    }\n\n    public static void main(String[] args) {\n        String testDbUrl = \"jdbc:sqlite:test_onboarding.db\";\n        String testSmtpHost = \"localhost\";\n\n        try (Connection conn = DriverManager.getConnection(testDbUrl)) {\n            conn.createStatement().execute(\"DROP TABLE IF EXISTS users;\");\n            conn.createStatement().execute(\"CREATE TABLE users (id TEXT PRIMARY KEY, username TEXT UNIQUE, email TEXT UNIQUE, password_hash TEXT);\");\n            conn.createStatement().execute(\"DROP TABLE IF EXISTS user_profiles;\");\n            conn.createStatement().execute(\"CREATE TABLE user_profiles (user_id TEXT PRIMARY KEY, registration_date DATE);\");\n            conn.createStatement().execute(\"DROP TABLE IF EXISTS audit_log;\");\n            conn.createStatement().execute(\"CREATE TABLE audit_log (event_type TEXT, related_user TEXT, details TEXT);\");\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n\n        UserOnboardingService service = new UserOnboardingService(testDbUrl, testSmtpHost);\n        service.onboardNewUser(\"johndoe\", \"john.doe@example.com\", \"securepass\");\n        service.onboardNewUser(\"johndoe\", \"john.doe@example.com\", \"anotherpass\"); \n        service.onboardNewUser(\"janedoe\", \"jane.doe@example.com\", \"easypass\");\n    }\n}\n\nclass UserRepository {\n    private final String dbUrl;\n\n    public UserRepository(String dbUrl) {\n        this.dbUrl = dbUrl;\n    }\n\n    public boolean userExists(String username, String email) {\n        System.out.println(\"[UserRepository] Checking if user exists (DB: \" + dbUrl + \")...\");\n        String sql = \"SELECT COUNT(*) FROM users WHERE username = ? OR email = ?\";\n        try (Connection conn = DriverManager.getConnection(dbUrl);\n             PreparedStatement pstmt = conn.prepareStatement(sql)) {\n            pstmt.setString(1, username);\n            pstmt.setString(2, email);\n            ResultSet rs = pstmt.executeQuery();\n            return rs.next() && rs.getInt(1) > 0;\n        } catch (SQLException e) {\n            System.err.println(\"[UserRepository] Database error checking existence: \" + e.getMessage());\n            return false;\n        }\n    }\n\n    public boolean saveUser(String userId, String username, String email, String passwordHash) {\n        System.out.println(\"[UserRepository] Saving user to DB: \" + dbUrl + \"...\");\n        String sql = \"INSERT INTO users (id, username, email, password_hash) VALUES (?, ?, ?, ?)\";\n        try (Connection conn = DriverManager.getConnection(dbUrl);\n             PreparedStatement pstmt = conn.prepareStatement(sql)) {\n            pstmt.setString(1, userId);\n            pstmt.setString(2, username);\n            pstmt.setString(3, email);\n            pstmt.setString(4, passwordHash);\n            return pstmt.executeUpdate() > 0;\n        } catch (SQLException e) {\n            System.err.println(\"[UserRepository] Database error saving user: \" + e.getMessage());\n            return false;\n        }\n    }\n}\n\nclass EmailService {\n    private final String smtpHost;\n\n    public EmailService(String smtpHost) {\n        this.smtpHost = smtpHost;\n    }\n\n    public boolean sendVerificationEmail(String email, String userId) {\n        System.out.println(\"[EmailService] Sending verification email to \" + email + \" (SMTP: \" + smtpHost + \")...\");\n        Properties props = new Properties();\n        props.put(\"mail.smtp.auth\", \"true\");\n        props.put(\"mail.smtp.starttls.enable\", \"true\");\n        props.put(\"mail.smtp.host\", smtpHost);\n        props.put(\"mail.smtp.port\", \"587\");\n\n        Session session = Session.getInstance(props, new Authenticator() {\n            protected PasswordAuthentication getPasswordAuthentication() {\n                return new PasswordAuthentication(\"no-reply@example.com\", \"password\"); \n            }\n        });\n\n        try {\n            Message message = new MimeMessage(session);\n            message.setFrom(new InternetAddress(\"no-reply@example.com\"));\n            message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(email));\n            message.setSubject(\"Verify Your Email Address\");\n            message.setText(\"Please click the link to verify your email: http://app.com/verify?id=\" + userId);\n            Transport.send(message);\n            return true;\n        } catch (MessagingException e) {\n            System.err.println(\"[EmailService] Error sending email: \" + e.getMessage());\n            return false;\n        }\n    }\n}\n\nclass UserProfileService {\n    private final String dbUrl;\n\n    public UserProfileService(String dbUrl) {\n        this.dbUrl = dbUrl;\n    }\n\n    public void initializeUserProfile(String userId) {\n        System.out.println(\"[UserProfileService] Initializing profile for user ID: \" + userId + \"...\");\n        String sql = \"INSERT INTO user_profiles (user_id, registration_date) VALUES (?, CURRENT_DATE)\";\n        try (Connection conn = DriverManager.getConnection(dbUrl);\n             PreparedStatement pstmt = conn.prepareStatement(sql)) {\n            pstmt.setString(1, userId);\n            pstmt.executeUpdate();\n        } catch (SQLException e) {\n            System.err.println(\"[UserProfileService] Database error initializing profile: \" + e.getMessage());\n        }\n    }\n}", "duration_seconds": 31.58768939971924}
{"id": 9, "strategy": "example", "violation_type": "srp", "model": "gpt-4o-mini", "language": "JAVA", "input": "import java.io.FileWriter;\nimport java.io.IOException;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.PreparedStatement;\nimport java.sql.SQLException;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport javax.mail.*;\nimport javax.mail.internet.*;\nimport java.util.Properties;\n\npublic class InvoiceProcessor {\n\n    private final String dbUrl;\n    private final String invoiceStoragePath;\n    private final String smtpHost;\n\n    public InvoiceProcessor(String dbUrl, String invoiceStoragePath, String smtpHost) {\n        this.dbUrl = dbUrl;\n        this.invoiceStoragePath = invoiceStoragePath;\n        this.smtpHost = smtpHost;\n    }\n\n    public boolean processAndSendInvoice(int orderId, String customerEmail) {\n        System.out.println(\"[InvoiceProcessor] Starting invoice processing for Order ID: \" + orderId);\n\n        List<InvoiceItem> items = fetchOrderItems(orderId);\n        if (items == null || items.isEmpty()) {\n            System.out.println(\"[InvoiceProcessor] No items found for order \" + orderId + \". Cannot generate invoice.\");\n            return false;\n        }\n        System.out.println(\"[InvoiceProcessor] Fetched \" + items.size() + \" items.\");\n\n        double totalAmount = calculateTotal(items);\n        System.out.println(\"[InvoiceProcessor] Calculated total amount: \" + totalAmount);\n\n        String invoiceNumber = generateInvoiceNumber(orderId);\n        System.out.println(\"[InvoiceProcessor] Generated invoice number: \" + invoiceNumber);\n\n        if (!saveInvoiceToDatabase(invoiceNumber, orderId, customerEmail, totalAmount)) {\n            System.out.println(\"[InvoiceProcessor] Failed to save invoice to database.\");\n            return false;\n        }\n        System.out.println(\"[InvoiceProcessor] Invoice saved to database.\");\n\n        String invoiceFilePath = generatePdfInvoice(invoiceNumber, customerEmail, items, totalAmount);\n        if (invoiceFilePath == null) {\n            System.out.println(\"[InvoiceProcessor] Failed to generate PDF invoice.\");\n\n            return false;\n        }\n        System.out.println(\"[InvoiceProcessor] PDF invoice generated: \" + invoiceFilePath);\n\n        if (!emailInvoice(customerEmail, invoiceFilePath)) {\n            System.out.println(\"[InvoiceProcessor] Failed to email invoice.\");\n\n            return false;\n        }\n        System.out.println(\"[InvoiceProcessor] Invoice emailed to \" + customerEmail);\n\n        System.out.println(\"[InvoiceProcessor] Invoice processing complete for Order ID: \" + orderId);\n        return true;\n    }\n\n    private List<InvoiceItem> fetchOrderItems(int orderId) {\n        System.out.println(\"[InvoiceProcessor] Fetching order items for order \" + orderId + \" from DB \" + dbUrl + \"...\");\n\n        List<InvoiceItem> items = new ArrayList<>();\n        String sql = \"SELECT product_name, quantity, price FROM order_items WHERE order_id = ?\";\n        try (Connection conn = DriverManager.getConnection(dbUrl);\n             PreparedStatement pstmt = conn.prepareStatement(sql)) {\n            pstmt.setInt(1, orderId);\n            \n            items.add(new InvoiceItem(\"Gadget A\", 2, 19.99));\n            items.add(new InvoiceItem(\"Widget B\", 1, 45.50));\n\n        } catch (SQLException e) {\n            System.err.println(\"[InvoiceProcessor] Database error fetching items: \" + e.getMessage());\n            return null;\n        }\n        return items;\n    }\n\n    private double calculateTotal(List<InvoiceItem> items) {\n        System.out.println(\"[InvoiceProcessor] Calculating total...\");\n\n        double total = 0;\n        for (InvoiceItem item : items) {\n            total += item.quantity * item.price;\n        }\n        return total;\n    }\n\n    private String generateInvoiceNumber(int orderId) {\n        System.out.println(\"[InvoiceProcessor] Generating invoice number...\");\n\n        return \"INV-\" + orderId + \"-\" + new Date().getTime();\n    }\n\n    private boolean saveInvoiceToDatabase(String invoiceNumber, int orderId, String customerEmail, double totalAmount) {\n        System.out.println(\"[InvoiceProcessor] Saving invoice \" + invoiceNumber + \" to DB \" + dbUrl + \"...\");\n        String sql = \"INSERT INTO invoices (invoice_number, order_id, customer_email, total_amount, invoice_date) VALUES (?, ?, ?, ?, CURRENT_DATE)\";\n        try (Connection conn = DriverManager.getConnection(dbUrl);\n             PreparedStatement pstmt = conn.prepareStatement(sql)) {\n            pstmt.setString(1, invoiceNumber);\n            pstmt.setInt(2, orderId);\n            pstmt.setString(3, customerEmail);\n            pstmt.setDouble(4, totalAmount);\n            int affectedRows = pstmt.executeUpdate();\n            return affectedRows > 0;\n        } catch (SQLException e) {\n            System.err.println(\"[InvoiceProcessor] Database error saving invoice: \" + e.getMessage());\n            return false;\n        }\n    }\n\n    private String generatePdfInvoice(String invoiceNumber, String customerEmail, List<InvoiceItem> items, double totalAmount) {\n        System.out.println(\"[InvoiceProcessor] Generating PDF invoice for \" + invoiceNumber + \" in \" + invoiceStoragePath + \"...\");\n\n        String filePath = invoiceStoragePath + \"/\" + invoiceNumber + \".pdf\";\n        try (FileWriter writer = new FileWriter(filePath)) {\n\n            writer.write(\"Invoice Number: \" + invoiceNumber + \"\\n\");\n            writer.write(\"Customer: \" + customerEmail + \"\\n\");\n            writer.write(\"Items:\\n\");\n            for (InvoiceItem item : items) {\n                writer.write(\"  \" + item.productName + \" x\" + item.quantity + \" @ \" + item.price + \"\\n\");\n            }\n            writer.write(\"Total: \" + totalAmount + \"\\n\");\n\n            return filePath;\n        } catch (IOException e) {\n            System.err.println(\"[InvoiceProcessor] Error generating PDF file: \" + e.getMessage());\n            return null;\n        }\n\n    }\n\n    private boolean emailInvoice(String recipientEmail, String invoiceFilePath) {\n        System.out.println(\"[InvoiceProcessor] Emailing invoice \" + invoiceFilePath + \" to \" + recipientEmail + \" via SMTP \" + smtpHost + \"...\");\n\n        Properties props = new Properties();\n        props.put(\"mail.smtp.auth\", \"true\");\n        props.put(\"mail.smtp.starttls.enable\", \"true\");\n        props.put(\"mail.smtp.host\", smtpHost);\n        props.put(\"mail.smtp.port\", \"587\");\n\n        Session session = Session.getInstance(props, new Authenticator() {\n            protected PasswordAuthentication getPasswordAuthentication() {\n                return new PasswordAuthentication(\"invoices@example.com\", \"password\"); \n            }\n        });\n\n        try {\n            Message message = new MimeMessage(session);\n            message.setFrom(new InternetAddress(\"invoices@example.com\"));\n            message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(recipientEmail));\n            message.setSubject(\"Your Invoice\");\n            message.setText(\"Please find your invoice attached.\");\n\n            MimeBodyPart messageBodyPart = new MimeBodyPart();\n            messageBodyPart.setText(\"Please find your invoice attached.\");\n\n            Multipart multipart = new MimeMultipart();\n            multipart.addBodyPart(messageBodyPart);\n\n            MimeBodyPart attachmentPart = new MimeBodyPart();\n            attachmentPart.attachFile(invoiceFilePath);\n            multipart.addBodyPart(attachmentPart);\n\n            message.setContent(multipart);\n\n\n            Transport.send(message);\n            return true;\n        } catch (MessagingException | IOException e) {\n            System.err.println(\"[InvoiceProcessor] Error emailing invoice: \" + e.getMessage());\n            return false;\n        }\n    }\n\n    static class InvoiceItem {\n        String productName;\n        int quantity;\n        double price;\n\n        InvoiceItem(String productName, int quantity, double price) {\n            this.productName = productName;\n            this.quantity = quantity;\n            this.price = price;\n        }\n    }\n\n     public static void main(String[] args) {\n        String testDbUrl = \"jdbc:sqlite:test_invoices.db\";\n        String testInvoicePath = \"./invoices\";\n        String testSmtpHost = \"localhost\";\n\n        new java.io.File(testInvoicePath).mkdirs();\n\n        try (Connection conn = DriverManager.getConnection(testDbUrl)) {\n            conn.createStatement().execute(\"DROP TABLE IF EXISTS order_items;\");\n            conn.createStatement().execute(\"CREATE TABLE order_items (order_id INTEGER, product_name TEXT, quantity INTEGER, price REAL);\");\n             conn.createStatement().execute(\"INSERT INTO order_items (order_id, product_name, quantity, price) VALUES (101, 'Gadget A', 2, 19.99);\");\n             conn.createStatement().execute(\"INSERT INTO order_items (order_id, product_name, quantity, price) VALUES (101, 'Widget B', 1, 45.50);\");\n\n            conn.createStatement().execute(\"DROP TABLE IF EXISTS invoices;\");\n            conn.createStatement().execute(\"CREATE TABLE invoices (invoice_number TEXT PRIMARY KEY, order_id INTEGER UNIQUE, customer_email TEXT, total_amount REAL, invoice_date DATE);\");\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n\n        InvoiceProcessor processor = new InvoiceProcessor(testDbUrl, testInvoicePath, testSmtpHost);\n\n        processor.processAndSendInvoice(101, \"customer1@example.com\");\n        processor.processAndSendInvoice(102, \"customer2@example.com\"); \n\n    }\n}\n", "prompt": "You are an expert in identifying and refactoring SOLID principle violations in JAVA code. Your task is to analyze the code provided and respond in the exact format below, without any additional text or commentary.\n\nYou must provide the following three parts in your response:\n1. The violated SOLID principle (e.g., SRP, OCP, LSP, ISP, DIP). If no violation exists, respond with **NONE**.\n2. A complete refactored version of the code that removes the violation. YOU MUST RETURN ONLY THE CODE BLOCK.\n3. A brief explanation of the violation and the refactoring.\n\nUse these criteria to detect violations:\n- **SRP**: A class does too many unrelated tasks.\n- **OCP**: Multiple `if-else` or `switch` blocks for logic that should be handled by polymorphism.\n- **LSP**: Subclasses override behavior in a way that breaks the contract of the base class (e.g., throw exceptions).\n- **ISP**: Interfaces that are too large or force implementing unnecessary methods.\n- **DIP**: High-level classes directly depend on low-level classes instead of abstractions.\n\nIf more than one violation is present, report only the most prominent one.\n\n**IMPORTANT:** Follow this output format *exactly*. Do not include greetings, summaries, or comments before or after the output:\n\n**<VIOLATION TYPE>**\n```java\n<Refactored code>\n```\n<Explanation of the refactoring>\n\nExample output:\n**SRP**\n```java\npublic class ReportGenerator {\n    public String generateReport() {\n        return \"Report data\";\n    }\n}\n```\nThe class previously handled both data generation and file I/O. Now it only generates the report, following SRP.\n\nHere is the code:\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.PreparedStatement;\nimport java.sql.SQLException;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport javax.mail.*;\nimport javax.mail.internet.*;\nimport java.util.Properties;\n\npublic class InvoiceProcessor {\n\n    private final String dbUrl;\n    private final String invoiceStoragePath;\n    private final String smtpHost;\n\n    public InvoiceProcessor(String dbUrl, String invoiceStoragePath, String smtpHost) {\n        this.dbUrl = dbUrl;\n        this.invoiceStoragePath = invoiceStoragePath;\n        this.smtpHost = smtpHost;\n    }\n\n    public boolean processAndSendInvoice(int orderId, String customerEmail) {\n        System.out.println(\"[InvoiceProcessor] Starting invoice processing for Order ID: \" + orderId);\n\n        List<InvoiceItem> items = fetchOrderItems(orderId);\n        if (items == null || items.isEmpty()) {\n            System.out.println(\"[InvoiceProcessor] No items found for order \" + orderId + \". Cannot generate invoice.\");\n            return false;\n        }\n        System.out.println(\"[InvoiceProcessor] Fetched \" + items.size() + \" items.\");\n\n        double totalAmount = calculateTotal(items);\n        System.out.println(\"[InvoiceProcessor] Calculated total amount: \" + totalAmount);\n\n        String invoiceNumber = generateInvoiceNumber(orderId);\n        System.out.println(\"[InvoiceProcessor] Generated invoice number: \" + invoiceNumber);\n\n        if (!saveInvoiceToDatabase(invoiceNumber, orderId, customerEmail, totalAmount)) {\n            System.out.println(\"[InvoiceProcessor] Failed to save invoice to database.\");\n            return false;\n        }\n        System.out.println(\"[InvoiceProcessor] Invoice saved to database.\");\n\n        String invoiceFilePath = generatePdfInvoice(invoiceNumber, customerEmail, items, totalAmount);\n        if (invoiceFilePath == null) {\n            System.out.println(\"[InvoiceProcessor] Failed to generate PDF invoice.\");\n\n            return false;\n        }\n        System.out.println(\"[InvoiceProcessor] PDF invoice generated: \" + invoiceFilePath);\n\n        if (!emailInvoice(customerEmail, invoiceFilePath)) {\n            System.out.println(\"[InvoiceProcessor] Failed to email invoice.\");\n\n            return false;\n        }\n        System.out.println(\"[InvoiceProcessor] Invoice emailed to \" + customerEmail);\n\n        System.out.println(\"[InvoiceProcessor] Invoice processing complete for Order ID: \" + orderId);\n        return true;\n    }\n\n    private List<InvoiceItem> fetchOrderItems(int orderId) {\n        System.out.println(\"[InvoiceProcessor] Fetching order items for order \" + orderId + \" from DB \" + dbUrl + \"...\");\n\n        List<InvoiceItem> items = new ArrayList<>();\n        String sql = \"SELECT product_name, quantity, price FROM order_items WHERE order_id = ?\";\n        try (Connection conn = DriverManager.getConnection(dbUrl);\n             PreparedStatement pstmt = conn.prepareStatement(sql)) {\n            pstmt.setInt(1, orderId);\n            \n            items.add(new InvoiceItem(\"Gadget A\", 2, 19.99));\n            items.add(new InvoiceItem(\"Widget B\", 1, 45.50));\n\n        } catch (SQLException e) {\n            System.err.println(\"[InvoiceProcessor] Database error fetching items: \" + e.getMessage());\n            return null;\n        }\n        return items;\n    }\n\n    private double calculateTotal(List<InvoiceItem> items) {\n        System.out.println(\"[InvoiceProcessor] Calculating total...\");\n\n        double total = 0;\n        for (InvoiceItem item : items) {\n            total += item.quantity * item.price;\n        }\n        return total;\n    }\n\n    private String generateInvoiceNumber(int orderId) {\n        System.out.println(\"[InvoiceProcessor] Generating invoice number...\");\n\n        return \"INV-\" + orderId + \"-\" + new Date().getTime();\n    }\n\n    private boolean saveInvoiceToDatabase(String invoiceNumber, int orderId, String customerEmail, double totalAmount) {\n        System.out.println(\"[InvoiceProcessor] Saving invoice \" + invoiceNumber + \" to DB \" + dbUrl + \"...\");\n        String sql = \"INSERT INTO invoices (invoice_number, order_id, customer_email, total_amount, invoice_date) VALUES (?, ?, ?, ?, CURRENT_DATE)\";\n        try (Connection conn = DriverManager.getConnection(dbUrl);\n             PreparedStatement pstmt = conn.prepareStatement(sql)) {\n            pstmt.setString(1, invoiceNumber);\n            pstmt.setInt(2, orderId);\n            pstmt.setString(3, customerEmail);\n            pstmt.setDouble(4, totalAmount);\n            int affectedRows = pstmt.executeUpdate();\n            return affectedRows > 0;\n        } catch (SQLException e) {\n            System.err.println(\"[InvoiceProcessor] Database error saving invoice: \" + e.getMessage());\n            return false;\n        }\n    }\n\n    private String generatePdfInvoice(String invoiceNumber, String customerEmail, List<InvoiceItem> items, double totalAmount) {\n        System.out.println(\"[InvoiceProcessor] Generating PDF invoice for \" + invoiceNumber + \" in \" + invoiceStoragePath + \"...\");\n\n        String filePath = invoiceStoragePath + \"/\" + invoiceNumber + \".pdf\";\n        try (FileWriter writer = new FileWriter(filePath)) {\n\n            writer.write(\"Invoice Number: \" + invoiceNumber + \"\\n\");\n            writer.write(\"Customer: \" + customerEmail + \"\\n\");\n            writer.write(\"Items:\\n\");\n            for (InvoiceItem item : items) {\n                writer.write(\"  \" + item.productName + \" x\" + item.quantity + \" @ \" + item.price + \"\\n\");\n            }\n            writer.write(\"Total: \" + totalAmount + \"\\n\");\n\n            return filePath;\n        } catch (IOException e) {\n            System.err.println(\"[InvoiceProcessor] Error generating PDF file: \" + e.getMessage());\n            return null;\n        }\n\n    }\n\n    private boolean emailInvoice(String recipientEmail, String invoiceFilePath) {\n        System.out.println(\"[InvoiceProcessor] Emailing invoice \" + invoiceFilePath + \" to \" + recipientEmail + \" via SMTP \" + smtpHost + \"...\");\n\n        Properties props = new Properties();\n        props.put(\"mail.smtp.auth\", \"true\");\n        props.put(\"mail.smtp.starttls.enable\", \"true\");\n        props.put(\"mail.smtp.host\", smtpHost);\n        props.put(\"mail.smtp.port\", \"587\");\n\n        Session session = Session.getInstance(props, new Authenticator() {\n            protected PasswordAuthentication getPasswordAuthentication() {\n                return new PasswordAuthentication(\"invoices@example.com\", \"password\"); \n            }\n        });\n\n        try {\n            Message message = new MimeMessage(session);\n            message.setFrom(new InternetAddress(\"invoices@example.com\"));\n            message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(recipientEmail));\n            message.setSubject(\"Your Invoice\");\n            message.setText(\"Please find your invoice attached.\");\n\n            MimeBodyPart messageBodyPart = new MimeBodyPart();\n            messageBodyPart.setText(\"Please find your invoice attached.\");\n\n            Multipart multipart = new MimeMultipart();\n            multipart.addBodyPart(messageBodyPart);\n\n            MimeBodyPart attachmentPart = new MimeBodyPart();\n            attachmentPart.attachFile(invoiceFilePath);\n            multipart.addBodyPart(attachmentPart);\n\n            message.setContent(multipart);\n\n\n            Transport.send(message);\n            return true;\n        } catch (MessagingException | IOException e) {\n            System.err.println(\"[InvoiceProcessor] Error emailing invoice: \" + e.getMessage());\n            return false;\n        }\n    }\n\n    static class InvoiceItem {\n        String productName;\n        int quantity;\n        double price;\n\n        InvoiceItem(String productName, int quantity, double price) {\n            this.productName = productName;\n            this.quantity = quantity;\n            this.price = price;\n        }\n    }\n\n     public static void main(String[] args) {\n        String testDbUrl = \"jdbc:sqlite:test_invoices.db\";\n        String testInvoicePath = \"./invoices\";\n        String testSmtpHost = \"localhost\";\n\n        new java.io.File(testInvoicePath).mkdirs();\n\n        try (Connection conn = DriverManager.getConnection(testDbUrl)) {\n            conn.createStatement().execute(\"DROP TABLE IF EXISTS order_items;\");\n            conn.createStatement().execute(\"CREATE TABLE order_items (order_id INTEGER, product_name TEXT, quantity INTEGER, price REAL);\");\n             conn.createStatement().execute(\"INSERT INTO order_items (order_id, product_name, quantity, price) VALUES (101, 'Gadget A', 2, 19.99);\");\n             conn.createStatement().execute(\"INSERT INTO order_items (order_id, product_name, quantity, price) VALUES (101, 'Widget B', 1, 45.50);\");\n\n            conn.createStatement().execute(\"DROP TABLE IF EXISTS invoices;\");\n            conn.createStatement().execute(\"CREATE TABLE invoices (invoice_number TEXT PRIMARY KEY, order_id INTEGER UNIQUE, customer_email TEXT, total_amount REAL, invoice_date DATE);\");\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n\n        InvoiceProcessor processor = new InvoiceProcessor(testDbUrl, testInvoicePath, testSmtpHost);\n\n        processor.processAndSendInvoice(101, \"customer1@example.com\");\n        processor.processAndSendInvoice(102, \"customer2@example.com\"); \n\n    }\n}\n", "raw_response": "**SRP**\n```java\npublic class InvoiceProcessor {\n\n    private final String dbUrl;\n    private final String invoiceStoragePath;\n    private final String smtpHost;\n\n    public InvoiceProcessor(String dbUrl, String invoiceStoragePath, String smtpHost) {\n        this.dbUrl = dbUrl;\n        this.invoiceStoragePath = invoiceStoragePath;\n        this.smtpHost = smtpHost;\n    }\n\n    public boolean processAndSendInvoice(int orderId, String customerEmail) {\n        System.out.println(\"[InvoiceProcessor] Starting invoice processing for Order ID: \" + orderId);\n\n        List<InvoiceItem> items = fetchOrderItems(orderId);\n        if (items == null || items.isEmpty()) {\n            System.out.println(\"[InvoiceProcessor] No items found for order \" + orderId + \". Cannot generate invoice.\");\n            return false;\n        }\n        System.out.println(\"[InvoiceProcessor] Fetched \" + items.size() + \" items.\");\n\n        double totalAmount = calculateTotal(items);\n        System.out.println(\"[InvoiceProcessor] Calculated total amount: \" + totalAmount);\n\n        String invoiceNumber = generateInvoiceNumber(orderId);\n        System.out.println(\"[InvoiceProcessor] Generated invoice number: \" + invoiceNumber);\n\n        if (!saveInvoiceToDatabase(invoiceNumber, orderId, customerEmail, totalAmount)) {\n            System.out.println(\"[InvoiceProcessor] Failed to save invoice to database.\");\n            return false;\n        }\n        System.out.println(\"[InvoiceProcessor] Invoice saved to database.\");\n\n        String invoiceFilePath = generatePdfInvoice(invoiceNumber, customerEmail, items, totalAmount);\n        if (invoiceFilePath == null) {\n            System.out.println(\"[InvoiceProcessor] Failed to generate PDF invoice.\");\n            return false;\n        }\n        System.out.println(\"[InvoiceProcessor] PDF invoice generated: \" + invoiceFilePath);\n\n        if (!emailInvoice(customerEmail, invoiceFilePath)) {\n            System.out.println(\"[InvoiceProcessor] Failed to email invoice.\");\n            return false;\n        }\n        System.out.println(\"[InvoiceProcessor] Invoice emailed to \" + customerEmail);\n\n        System.out.println(\"[InvoiceProcessor] Invoice processing complete for Order ID: \" + orderId);\n        return true;\n    }\n\n    private List<InvoiceItem> fetchOrderItems(int orderId) {\n        return new InvoiceDatabase(dbUrl).fetchOrderItems(orderId);\n    }\n\n    private double calculateTotal(List<InvoiceItem> items) {\n        return items.stream().mapToDouble(item -> item.quantity * item.price).sum();\n    }\n\n    private String generateInvoiceNumber(int orderId) {\n        return \"INV-\" + orderId + \"-\" + new Date().getTime();\n    }\n\n    private boolean saveInvoiceToDatabase(String invoiceNumber, int orderId, String customerEmail, double totalAmount) {\n        return new InvoiceDatabase(dbUrl).saveInvoice(invoiceNumber, orderId, customerEmail, totalAmount);\n    }\n\n    private String generatePdfInvoice(String invoiceNumber, String customerEmail, List<InvoiceItem> items, double totalAmount) {\n        return new PdfInvoiceGenerator(invoiceStoragePath).generate(invoiceNumber, customerEmail, items, totalAmount);\n    }\n\n    private boolean emailInvoice(String recipientEmail, String invoiceFilePath) {\n        return new InvoiceEmailer(smtpHost).emailInvoice(recipientEmail, invoiceFilePath);\n    }\n\n    static class InvoiceItem {\n        String productName;\n        int quantity;\n        double price;\n\n        InvoiceItem(String productName, int quantity, double price) {\n            this.productName = productName;\n            this.quantity = quantity;\n            this.price = price;\n        }\n    }\n\n    public static void main(String[] args) {\n        String testDbUrl = \"jdbc:sqlite:test_invoices.db\";\n        String testInvoicePath = \"./invoices\";\n        String testSmtpHost = \"localhost\";\n\n        new java.io.File(testInvoicePath).mkdirs();\n\n        try (Connection conn = DriverManager.getConnection(testDbUrl)) {\n            conn.createStatement().execute(\"DROP TABLE IF EXISTS order_items;\");\n            conn.createStatement().execute(\"CREATE TABLE order_items (order_id INTEGER, product_name TEXT, quantity INTEGER, price REAL);\");\n            conn.createStatement().execute(\"INSERT INTO order_items (order_id, product_name, quantity, price) VALUES (101, 'Gadget A', 2, 19.99);\");\n            conn.createStatement().execute(\"INSERT INTO order_items (order_id, product_name, quantity, price) VALUES (101, 'Widget B', 1, 45.50);\");\n\n            conn.createStatement().execute(\"DROP TABLE IF EXISTS invoices;\");\n            conn.createStatement().execute(\"CREATE TABLE invoices (invoice_number TEXT PRIMARY KEY, order_id INTEGER UNIQUE, customer_email TEXT, total_amount REAL, invoice_date DATE);\");\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n\n        InvoiceProcessor processor = new InvoiceProcessor(testDbUrl, testInvoicePath, testSmtpHost);\n        processor.processAndSendInvoice(101, \"customer1@example.com\");\n        processor.processAndSendInvoice(102, \"customer2@example.com\");\n    }\n}\n\nclass InvoiceDatabase {\n    private final String dbUrl;\n\n    public InvoiceDatabase(String dbUrl) {\n        this.dbUrl = dbUrl;\n    }\n\n    public List<InvoiceItem> fetchOrderItems(int orderId) {\n        List<InvoiceItem> items = new ArrayList<>();\n        String sql = \"SELECT product_name, quantity, price FROM order_items WHERE order_id = ?\";\n        try (Connection conn = DriverManager.getConnection(dbUrl);\n             PreparedStatement pstmt = conn.prepareStatement(sql)) {\n            pstmt.setInt(1, orderId);\n            // Simulated fetching items\n            items.add(new InvoiceItem(\"Gadget A\", 2, 19.99));\n            items.add(new InvoiceItem(\"Widget B\", 1, 45.50));\n        } catch (SQLException e) {\n            System.err.println(\"[InvoiceDatabase] Database error fetching items: \" + e.getMessage());\n        }\n        return items;\n    }\n\n    public boolean saveInvoice(String invoiceNumber, int orderId, String customerEmail, double totalAmount) {\n        String sql = \"INSERT INTO invoices (invoice_number, order_id, customer_email, total_amount, invoice_date) VALUES (?, ?, ?, ?, CURRENT_DATE)\";\n        try (Connection conn = DriverManager.getConnection(dbUrl);\n             PreparedStatement pstmt = conn.prepareStatement(sql)) {\n            pstmt.setString(1, invoiceNumber);\n            pstmt.setInt(2, orderId);\n            pstmt.setString(3, customerEmail);\n            pstmt.setDouble(4, totalAmount);\n            int affectedRows = pstmt.executeUpdate();\n            return affectedRows > 0;\n        } catch (SQLException e) {\n            System.err.println(\"[InvoiceDatabase] Database error saving invoice: \" + e.getMessage());\n            return false;\n        }\n    }\n}\n\nclass PdfInvoiceGenerator {\n    private final String invoiceStoragePath;\n\n    public PdfInvoiceGenerator(String invoiceStoragePath) {\n        this.invoiceStoragePath = invoiceStoragePath;\n    }\n\n    public String generate(String invoiceNumber, String customerEmail, List<InvoiceItem> items, double totalAmount) {\n        String filePath = invoiceStoragePath + \"/\" + invoiceNumber + \".pdf\";\n        try (FileWriter writer = new FileWriter(filePath)) {\n            writer.write(\"Invoice Number: \" + invoiceNumber + \"\\n\");\n            writer.write(\"Customer: \" + customerEmail + \"\\n\");\n            writer.write(\"Items:\\n\");\n            for (InvoiceItem item : items) {\n                writer.write(\"  \" + item.productName + \" x\" + item.quantity + \" @ \" + item.price + \"\\n\");\n            }\n            writer.write(\"Total: \" + totalAmount + \"\\n\");\n            return filePath;\n        } catch (IOException e) {\n            System.err.println(\"[PdfInvoiceGenerator] Error generating PDF file: \" + e.getMessage());\n            return null;\n        }\n    }\n}\n\nclass InvoiceEmailer {\n    private final String smtpHost;\n\n    public InvoiceEmailer(String smtpHost) {\n        this.smtpHost = smtpHost;\n    }\n\n    public boolean emailInvoice(String recipientEmail, String invoiceFilePath) {\n        Properties props = new Properties();\n        props.put(\"mail.smtp.auth\", \"true\");\n        props.put(\"mail.smtp.starttls.enable\", \"true\");\n        props.put(\"mail.smtp.host\", smtpHost);\n        props.put(\"mail.smtp.port\", \"587\");\n\n        Session session = Session.getInstance(props, new Authenticator() {\n            protected PasswordAuthentication getPasswordAuthentication() {\n                return new PasswordAuthentication(\"invoices@example.com\", \"password\");\n            }\n        });\n\n        try {\n            Message message = new MimeMessage(session);\n            message.setFrom(new InternetAddress(\"invoices@example.com\"));\n            message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(recipientEmail));\n            message.setSubject(\"Your Invoice\");\n            message.setText(\"Please find your invoice attached.\");\n\n            MimeBodyPart messageBodyPart = new MimeBodyPart();\n            messageBodyPart.setText(\"Please find your invoice attached.\");\n\n            Multipart multipart = new MimeMultipart();\n            multipart.addBodyPart(messageBodyPart);\n\n            MimeBodyPart attachmentPart = new MimeBodyPart();\n            attachmentPart.attachFile(invoiceFilePath);\n            multipart.addBodyPart(attachmentPart);\n\n            message.setContent(multipart);\n            Transport.send(message);\n            return true;\n        } catch (MessagingException | IOException e) {\n            System.err.println(\"[InvoiceEmailer] Error emailing invoice: \" + e.getMessage());\n            return false;\n        }\n    }\n}\n```\nThe `InvoiceProcessor` class originally handled multiple responsibilities including database access, PDF generation, and email sending, violating the Single Responsibility Principle (SRP). The refactored code separates these concerns into distinct classes: `InvoiceDatabase`, `PdfInvoiceGenerator`, and `InvoiceEmailer`, each handling a specific task. This adheres to SRP by ensuring that each class has one reason to change.", "violation": "SRP", "violation_list": ["SRP"], "explanation": "**SRP**", "solution_code": "public class InvoiceProcessor {\n\n    private final String dbUrl;\n    private final String invoiceStoragePath;\n    private final String smtpHost;\n\n    public InvoiceProcessor(String dbUrl, String invoiceStoragePath, String smtpHost) {\n        this.dbUrl = dbUrl;\n        this.invoiceStoragePath = invoiceStoragePath;\n        this.smtpHost = smtpHost;\n    }\n\n    public boolean processAndSendInvoice(int orderId, String customerEmail) {\n        System.out.println(\"[InvoiceProcessor] Starting invoice processing for Order ID: \" + orderId);\n\n        List<InvoiceItem> items = fetchOrderItems(orderId);\n        if (items == null || items.isEmpty()) {\n            System.out.println(\"[InvoiceProcessor] No items found for order \" + orderId + \". Cannot generate invoice.\");\n            return false;\n        }\n        System.out.println(\"[InvoiceProcessor] Fetched \" + items.size() + \" items.\");\n\n        double totalAmount = calculateTotal(items);\n        System.out.println(\"[InvoiceProcessor] Calculated total amount: \" + totalAmount);\n\n        String invoiceNumber = generateInvoiceNumber(orderId);\n        System.out.println(\"[InvoiceProcessor] Generated invoice number: \" + invoiceNumber);\n\n        if (!saveInvoiceToDatabase(invoiceNumber, orderId, customerEmail, totalAmount)) {\n            System.out.println(\"[InvoiceProcessor] Failed to save invoice to database.\");\n            return false;\n        }\n        System.out.println(\"[InvoiceProcessor] Invoice saved to database.\");\n\n        String invoiceFilePath = generatePdfInvoice(invoiceNumber, customerEmail, items, totalAmount);\n        if (invoiceFilePath == null) {\n            System.out.println(\"[InvoiceProcessor] Failed to generate PDF invoice.\");\n            return false;\n        }\n        System.out.println(\"[InvoiceProcessor] PDF invoice generated: \" + invoiceFilePath);\n\n        if (!emailInvoice(customerEmail, invoiceFilePath)) {\n            System.out.println(\"[InvoiceProcessor] Failed to email invoice.\");\n            return false;\n        }\n        System.out.println(\"[InvoiceProcessor] Invoice emailed to \" + customerEmail);\n\n        System.out.println(\"[InvoiceProcessor] Invoice processing complete for Order ID: \" + orderId);\n        return true;\n    }\n\n    private List<InvoiceItem> fetchOrderItems(int orderId) {\n        return new InvoiceDatabase(dbUrl).fetchOrderItems(orderId);\n    }\n\n    private double calculateTotal(List<InvoiceItem> items) {\n        return items.stream().mapToDouble(item -> item.quantity * item.price).sum();\n    }\n\n    private String generateInvoiceNumber(int orderId) {\n        return \"INV-\" + orderId + \"-\" + new Date().getTime();\n    }\n\n    private boolean saveInvoiceToDatabase(String invoiceNumber, int orderId, String customerEmail, double totalAmount) {\n        return new InvoiceDatabase(dbUrl).saveInvoice(invoiceNumber, orderId, customerEmail, totalAmount);\n    }\n\n    private String generatePdfInvoice(String invoiceNumber, String customerEmail, List<InvoiceItem> items, double totalAmount) {\n        return new PdfInvoiceGenerator(invoiceStoragePath).generate(invoiceNumber, customerEmail, items, totalAmount);\n    }\n\n    private boolean emailInvoice(String recipientEmail, String invoiceFilePath) {\n        return new InvoiceEmailer(smtpHost).emailInvoice(recipientEmail, invoiceFilePath);\n    }\n\n    static class InvoiceItem {\n        String productName;\n        int quantity;\n        double price;\n\n        InvoiceItem(String productName, int quantity, double price) {\n            this.productName = productName;\n            this.quantity = quantity;\n            this.price = price;\n        }\n    }\n\n    public static void main(String[] args) {\n        String testDbUrl = \"jdbc:sqlite:test_invoices.db\";\n        String testInvoicePath = \"./invoices\";\n        String testSmtpHost = \"localhost\";\n\n        new java.io.File(testInvoicePath).mkdirs();\n\n        try (Connection conn = DriverManager.getConnection(testDbUrl)) {\n            conn.createStatement().execute(\"DROP TABLE IF EXISTS order_items;\");\n            conn.createStatement().execute(\"CREATE TABLE order_items (order_id INTEGER, product_name TEXT, quantity INTEGER, price REAL);\");\n            conn.createStatement().execute(\"INSERT INTO order_items (order_id, product_name, quantity, price) VALUES (101, 'Gadget A', 2, 19.99);\");\n            conn.createStatement().execute(\"INSERT INTO order_items (order_id, product_name, quantity, price) VALUES (101, 'Widget B', 1, 45.50);\");\n\n            conn.createStatement().execute(\"DROP TABLE IF EXISTS invoices;\");\n            conn.createStatement().execute(\"CREATE TABLE invoices (invoice_number TEXT PRIMARY KEY, order_id INTEGER UNIQUE, customer_email TEXT, total_amount REAL, invoice_date DATE);\");\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n\n        InvoiceProcessor processor = new InvoiceProcessor(testDbUrl, testInvoicePath, testSmtpHost);\n        processor.processAndSendInvoice(101, \"customer1@example.com\");\n        processor.processAndSendInvoice(102, \"customer2@example.com\");\n    }\n}\n\nclass InvoiceDatabase {\n    private final String dbUrl;\n\n    public InvoiceDatabase(String dbUrl) {\n        this.dbUrl = dbUrl;\n    }\n\n    public List<InvoiceItem> fetchOrderItems(int orderId) {\n        List<InvoiceItem> items = new ArrayList<>();\n        String sql = \"SELECT product_name, quantity, price FROM order_items WHERE order_id = ?\";\n        try (Connection conn = DriverManager.getConnection(dbUrl);\n             PreparedStatement pstmt = conn.prepareStatement(sql)) {\n            pstmt.setInt(1, orderId);\n            // Simulated fetching items\n            items.add(new InvoiceItem(\"Gadget A\", 2, 19.99));\n            items.add(new InvoiceItem(\"Widget B\", 1, 45.50));\n        } catch (SQLException e) {\n            System.err.println(\"[InvoiceDatabase] Database error fetching items: \" + e.getMessage());\n        }\n        return items;\n    }\n\n    public boolean saveInvoice(String invoiceNumber, int orderId, String customerEmail, double totalAmount) {\n        String sql = \"INSERT INTO invoices (invoice_number, order_id, customer_email, total_amount, invoice_date) VALUES (?, ?, ?, ?, CURRENT_DATE)\";\n        try (Connection conn = DriverManager.getConnection(dbUrl);\n             PreparedStatement pstmt = conn.prepareStatement(sql)) {\n            pstmt.setString(1, invoiceNumber);\n            pstmt.setInt(2, orderId);\n            pstmt.setString(3, customerEmail);\n            pstmt.setDouble(4, totalAmount);\n            int affectedRows = pstmt.executeUpdate();\n            return affectedRows > 0;\n        } catch (SQLException e) {\n            System.err.println(\"[InvoiceDatabase] Database error saving invoice: \" + e.getMessage());\n            return false;\n        }\n    }\n}\n\nclass PdfInvoiceGenerator {\n    private final String invoiceStoragePath;\n\n    public PdfInvoiceGenerator(String invoiceStoragePath) {\n        this.invoiceStoragePath = invoiceStoragePath;\n    }\n\n    public String generate(String invoiceNumber, String customerEmail, List<InvoiceItem> items, double totalAmount) {\n        String filePath = invoiceStoragePath + \"/\" + invoiceNumber + \".pdf\";\n        try (FileWriter writer = new FileWriter(filePath)) {\n            writer.write(\"Invoice Number: \" + invoiceNumber + \"\\n\");\n            writer.write(\"Customer: \" + customerEmail + \"\\n\");\n            writer.write(\"Items:\\n\");\n            for (InvoiceItem item : items) {\n                writer.write(\"  \" + item.productName + \" x\" + item.quantity + \" @ \" + item.price + \"\\n\");\n            }\n            writer.write(\"Total: \" + totalAmount + \"\\n\");\n            return filePath;\n        } catch (IOException e) {\n            System.err.println(\"[PdfInvoiceGenerator] Error generating PDF file: \" + e.getMessage());\n            return null;\n        }\n    }\n}\n\nclass InvoiceEmailer {\n    private final String smtpHost;\n\n    public InvoiceEmailer(String smtpHost) {\n        this.smtpHost = smtpHost;\n    }\n\n    public boolean emailInvoice(String recipientEmail, String invoiceFilePath) {\n        Properties props = new Properties();\n        props.put(\"mail.smtp.auth\", \"true\");\n        props.put(\"mail.smtp.starttls.enable\", \"true\");\n        props.put(\"mail.smtp.host\", smtpHost);\n        props.put(\"mail.smtp.port\", \"587\");\n\n        Session session = Session.getInstance(props, new Authenticator() {\n            protected PasswordAuthentication getPasswordAuthentication() {\n                return new PasswordAuthentication(\"invoices@example.com\", \"password\");\n            }\n        });\n\n        try {\n            Message message = new MimeMessage(session);\n            message.setFrom(new InternetAddress(\"invoices@example.com\"));\n            message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(recipientEmail));\n            message.setSubject(\"Your Invoice\");\n            message.setText(\"Please find your invoice attached.\");\n\n            MimeBodyPart messageBodyPart = new MimeBodyPart();\n            messageBodyPart.setText(\"Please find your invoice attached.\");\n\n            Multipart multipart = new MimeMultipart();\n            multipart.addBodyPart(messageBodyPart);\n\n            MimeBodyPart attachmentPart = new MimeBodyPart();\n            attachmentPart.attachFile(invoiceFilePath);\n            multipart.addBodyPart(attachmentPart);\n\n            message.setContent(multipart);\n            Transport.send(message);\n            return true;\n        } catch (MessagingException | IOException e) {\n            System.err.println(\"[InvoiceEmailer] Error emailing invoice: \" + e.getMessage());\n            return false;\n        }\n    }\n}", "duration_seconds": 46.63442349433899}
{"id": 10, "strategy": "example", "violation_type": "srp", "model": "gpt-4o-mini", "language": "java", "input": "import java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class DataMigrationService {\n\n    private final String sourceDbUrl;\n    private final String targetDbUrl;\n\n    public DataMigrationService(String sourceDbUrl, String targetDbUrl) {\n        this.sourceDbUrl = sourceDbUrl;\n        this.targetDbUrl = targetDbUrl;\n        initializeTargetDb();\n    }\n\n    private void initializeTargetDb() {\n        System.out.println(\"[DataMigrationService] Initializing target DB \" + targetDbUrl + \"...\");\n        String sql = \"CREATE TABLE IF NOT EXISTS migrated_data (id INTEGER PRIMARY KEY, value TEXT)\";\n        try (Connection conn = DriverManager.getConnection(targetDbUrl);\n             PreparedStatement pstmt = conn.prepareStatement(sql)) {\n            pstmt.executeUpdate();\n        } catch (SQLException e) {\n            System.err.println(\"[DataMigrationService] Error initializing target DB: \" + e.getMessage());\n        }\n    }\n\n    public int migrateData() {\n        System.out.println(\"[DataMigrationService] Starting data migration from \" + sourceDbUrl + \" to \" + targetDbUrl);\n\n        List<SourceData> sourceRecords = fetchSourceData();\n        if (sourceRecords == null || sourceRecords.isEmpty()) {\n            System.out.println(\"[DataMigrationService] No data found in source DB.\");\n            logMigrationEvent(\"Migration\", \"No data in source\", 0, false);\n            return 0;\n        }\n        System.out.println(\"[DataMigrationService] Fetched \" + sourceRecords.size() + \" records from source.\");\n\n        List<TargetData> targetRecords = transformData(sourceRecords);\n        if (targetRecords == null || targetRecords.isEmpty()) {\n            System.out.println(\"[DataMigrationService] No data after transformation.\");\n            logMigrationEvent(\"Migration\", \"No data after transformation\", sourceRecords.size(), false);\n            return 0;\n        }\n        System.out.println(\"[DataMigrationService] Transformed \" + targetRecords.size() + \" records.\");\n\n        int importedCount = saveTargetData(targetRecords);\n        System.out.println(\"[DataMigrationService] Saved \" + importedCount + \" records to target.\");\n\n        if (importedCount == targetRecords.size()) {\n            logMigrationEvent(\"Migration\", \"Success\", importedCount, true);\n             System.out.println(\"[DataMigrationService] Data migration complete. \" + importedCount + \" records migrated.\");\n        } else {\n             logMigrationEvent(\"Migration\", \"Partial Success or Failure\", importedCount, false);\n             System.out.println(\"[DataMigrationService] Data migration complete with issues. \" + importedCount + \" records migrated out of \" + targetRecords.size() + \".\");\n        }\n\n        return importedCount;\n    }\n\n    private List<SourceData> fetchSourceData() {\n        System.out.println(\"[DataMigrationService] Fetching data from source DB \" + sourceDbUrl + \"...\");\n        List<SourceData> records = new ArrayList<>();\n        String sql = \"SELECT id, raw_value FROM source_data WHERE processed = FALSE LIMIT 100\";\n        try (Connection conn = DriverManager.getConnection(sourceDbUrl);\n             PreparedStatement pstmt = conn.prepareStatement(sql);\n             ResultSet rs = pstmt.executeQuery()) {\n\n             records.add(new SourceData(1, \"value1\"));\n             records.add(new SourceData(2, \"value2\"));\n\n        } catch (SQLException e) {\n            System.err.println(\"[DataMigrationService] Database error fetching source data: \" + e.getMessage());\n            return null;\n        }\n        return records;\n    }\n\n    private List<TargetData> transformData(List<SourceData> sourceRecords) {\n        System.out.println(\"[DataMigrationService] Transforming data...\");\n        List<TargetData> targetRecords = new ArrayList<>();\n        for (SourceData record : sourceRecords) {\n            if (record.rawValue != null && record.rawValue.length() > 2) {\n                targetRecords.add(new TargetData(record.id, record.rawValue.toUpperCase()));\n            }\n        }\n        return targetRecords;\n    }\n\n    private int saveTargetData(List<TargetData> targetRecords) {\n        System.out.println(\"[DataMigrationService] Saving data to target DB \" + targetDbUrl + \"...\");\n        String sql = \"INSERT INTO migrated_data (id, value) VALUES (?, ?)\";\n        int importedCount = 0;\n        try (Connection conn = DriverManager.getConnection(targetDbUrl);\n             PreparedStatement pstmt = conn.prepareStatement(sql)) {\n\n            for (TargetData record : targetRecords) {\n                pstmt.setInt(1, record.id);\n                pstmt.setString(2, record.value);\n                pstmt.addBatch();\n            }\n            int[] results = pstmt.executeBatch();\n            for (int count : results) {\n                if (count >= 0) { \n                    importedCount += count; \n                }\n            }\n\n        } catch (SQLException e) {\n            System.err.println(\"[DataMigrationService] Database error saving target data: \" + e.getMessage());\n\n        }\n        return importedCount;\n    }\n\n    private void logMigrationEvent(String eventType, String details, int count, boolean success) {\n        System.out.println(\"[DataMigrationService] LOG: Type=\" + eventType + \", Details=\" + details + \", Count=\" + count + \", Success=\" + success);\n\n\n    }\n\n    static class SourceData {\n        int id;\n        String rawValue;\n        SourceData(int id, String rawValue) { this.id = id; this.rawValue = rawValue; }\n    }\n\n    static class TargetData {\n        int id;\n        String value;\n        TargetData(int id, String value) { this.id = id; this.value = value; }\n    }\n\n    public static void main(String[] args) {\n        String sourceDbUrl = \"jdbc:sqlite:source_migration.db\";\n        String targetDbUrl = \"jdbc:sqlite:target_migration.db\";\n\n         try (Connection conn = DriverManager.getConnection(sourceDbUrl)) {\n            conn.createStatement().execute(\"DROP TABLE IF EXISTS source_data;\");\n            conn.createStatement().execute(\"CREATE TABLE source_data (id INTEGER PRIMARY KEY, raw_value TEXT, processed BOOLEAN);\");\n            conn.createStatement().execute(\"INSERT INTO source_data (id, raw_value, processed) VALUES (1, 'value1', FALSE);\");\n            conn.createStatement().execute(\"INSERT INTO source_data (id, raw_value, processed) VALUES (2, 'value2', FALSE);\");\n            conn.createStatement().execute(\"INSERT INTO source_data (id, raw_value, processed) VALUES (3, 'a', FALSE);\"); \n             conn.createStatement().execute(\"INSERT INTO source_data (id, raw_value, processed) VALUES (4, NULL, FALSE);\"); \n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n\n         new java.io.File(\"target_migration.db\").delete();\n\n        DataMigrationService migrator = new DataMigrationService(sourceDbUrl, targetDbUrl);\n\n        migrator.migrateData();\n\n    }\n}\n", "prompt": "You are an expert in identifying and refactoring SOLID principle violations in java code. Your task is to analyze the code provided and respond in the exact format below, without any additional text or commentary.\n\nYou must provide the following three parts in your response:\n1. The violated SOLID principle (e.g., SRP, OCP, LSP, ISP, DIP). If no violation exists, respond with **NONE**.\n2. A complete refactored version of the code that removes the violation. YOU MUST RETURN ONLY THE CODE BLOCK.\n3. A brief explanation of the violation and the refactoring.\n\nUse these criteria to detect violations:\n- **SRP**: A class does too many unrelated tasks.\n- **OCP**: Multiple `if-else` or `switch` blocks for logic that should be handled by polymorphism.\n- **LSP**: Subclasses override behavior in a way that breaks the contract of the base class (e.g., throw exceptions).\n- **ISP**: Interfaces that are too large or force implementing unnecessary methods.\n- **DIP**: High-level classes directly depend on low-level classes instead of abstractions.\n\nIf more than one violation is present, report only the most prominent one.\n\n**IMPORTANT:** Follow this output format *exactly*. Do not include greetings, summaries, or comments before or after the output:\n\n**<VIOLATION TYPE>**\n```java\n<Refactored code>\n```\n<Explanation of the refactoring>\n\nExample output:\n**SRP**\n```java\npublic class ReportGenerator {\n    public String generateReport() {\n        return \"Report data\";\n    }\n}\n```\nThe class previously handled both data generation and file I/O. Now it only generates the report, following SRP.\n\nHere is the code:\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class DataMigrationService {\n\n    private final String sourceDbUrl;\n    private final String targetDbUrl;\n\n    public DataMigrationService(String sourceDbUrl, String targetDbUrl) {\n        this.sourceDbUrl = sourceDbUrl;\n        this.targetDbUrl = targetDbUrl;\n        initializeTargetDb();\n    }\n\n    private void initializeTargetDb() {\n        System.out.println(\"[DataMigrationService] Initializing target DB \" + targetDbUrl + \"...\");\n        String sql = \"CREATE TABLE IF NOT EXISTS migrated_data (id INTEGER PRIMARY KEY, value TEXT)\";\n        try (Connection conn = DriverManager.getConnection(targetDbUrl);\n             PreparedStatement pstmt = conn.prepareStatement(sql)) {\n            pstmt.executeUpdate();\n        } catch (SQLException e) {\n            System.err.println(\"[DataMigrationService] Error initializing target DB: \" + e.getMessage());\n        }\n    }\n\n    public int migrateData() {\n        System.out.println(\"[DataMigrationService] Starting data migration from \" + sourceDbUrl + \" to \" + targetDbUrl);\n\n        List<SourceData> sourceRecords = fetchSourceData();\n        if (sourceRecords == null || sourceRecords.isEmpty()) {\n            System.out.println(\"[DataMigrationService] No data found in source DB.\");\n            logMigrationEvent(\"Migration\", \"No data in source\", 0, false);\n            return 0;\n        }\n        System.out.println(\"[DataMigrationService] Fetched \" + sourceRecords.size() + \" records from source.\");\n\n        List<TargetData> targetRecords = transformData(sourceRecords);\n        if (targetRecords == null || targetRecords.isEmpty()) {\n            System.out.println(\"[DataMigrationService] No data after transformation.\");\n            logMigrationEvent(\"Migration\", \"No data after transformation\", sourceRecords.size(), false);\n            return 0;\n        }\n        System.out.println(\"[DataMigrationService] Transformed \" + targetRecords.size() + \" records.\");\n\n        int importedCount = saveTargetData(targetRecords);\n        System.out.println(\"[DataMigrationService] Saved \" + importedCount + \" records to target.\");\n\n        if (importedCount == targetRecords.size()) {\n            logMigrationEvent(\"Migration\", \"Success\", importedCount, true);\n             System.out.println(\"[DataMigrationService] Data migration complete. \" + importedCount + \" records migrated.\");\n        } else {\n             logMigrationEvent(\"Migration\", \"Partial Success or Failure\", importedCount, false);\n             System.out.println(\"[DataMigrationService] Data migration complete with issues. \" + importedCount + \" records migrated out of \" + targetRecords.size() + \".\");\n        }\n\n        return importedCount;\n    }\n\n    private List<SourceData> fetchSourceData() {\n        System.out.println(\"[DataMigrationService] Fetching data from source DB \" + sourceDbUrl + \"...\");\n        List<SourceData> records = new ArrayList<>();\n        String sql = \"SELECT id, raw_value FROM source_data WHERE processed = FALSE LIMIT 100\";\n        try (Connection conn = DriverManager.getConnection(sourceDbUrl);\n             PreparedStatement pstmt = conn.prepareStatement(sql);\n             ResultSet rs = pstmt.executeQuery()) {\n\n             records.add(new SourceData(1, \"value1\"));\n             records.add(new SourceData(2, \"value2\"));\n\n        } catch (SQLException e) {\n            System.err.println(\"[DataMigrationService] Database error fetching source data: \" + e.getMessage());\n            return null;\n        }\n        return records;\n    }\n\n    private List<TargetData> transformData(List<SourceData> sourceRecords) {\n        System.out.println(\"[DataMigrationService] Transforming data...\");\n        List<TargetData> targetRecords = new ArrayList<>();\n        for (SourceData record : sourceRecords) {\n            if (record.rawValue != null && record.rawValue.length() > 2) {\n                targetRecords.add(new TargetData(record.id, record.rawValue.toUpperCase()));\n            }\n        }\n        return targetRecords;\n    }\n\n    private int saveTargetData(List<TargetData> targetRecords) {\n        System.out.println(\"[DataMigrationService] Saving data to target DB \" + targetDbUrl + \"...\");\n        String sql = \"INSERT INTO migrated_data (id, value) VALUES (?, ?)\";\n        int importedCount = 0;\n        try (Connection conn = DriverManager.getConnection(targetDbUrl);\n             PreparedStatement pstmt = conn.prepareStatement(sql)) {\n\n            for (TargetData record : targetRecords) {\n                pstmt.setInt(1, record.id);\n                pstmt.setString(2, record.value);\n                pstmt.addBatch();\n            }\n            int[] results = pstmt.executeBatch();\n            for (int count : results) {\n                if (count >= 0) { \n                    importedCount += count; \n                }\n            }\n\n        } catch (SQLException e) {\n            System.err.println(\"[DataMigrationService] Database error saving target data: \" + e.getMessage());\n\n        }\n        return importedCount;\n    }\n\n    private void logMigrationEvent(String eventType, String details, int count, boolean success) {\n        System.out.println(\"[DataMigrationService] LOG: Type=\" + eventType + \", Details=\" + details + \", Count=\" + count + \", Success=\" + success);\n\n\n    }\n\n    static class SourceData {\n        int id;\n        String rawValue;\n        SourceData(int id, String rawValue) { this.id = id; this.rawValue = rawValue; }\n    }\n\n    static class TargetData {\n        int id;\n        String value;\n        TargetData(int id, String value) { this.id = id; this.value = value; }\n    }\n\n    public static void main(String[] args) {\n        String sourceDbUrl = \"jdbc:sqlite:source_migration.db\";\n        String targetDbUrl = \"jdbc:sqlite:target_migration.db\";\n\n         try (Connection conn = DriverManager.getConnection(sourceDbUrl)) {\n            conn.createStatement().execute(\"DROP TABLE IF EXISTS source_data;\");\n            conn.createStatement().execute(\"CREATE TABLE source_data (id INTEGER PRIMARY KEY, raw_value TEXT, processed BOOLEAN);\");\n            conn.createStatement().execute(\"INSERT INTO source_data (id, raw_value, processed) VALUES (1, 'value1', FALSE);\");\n            conn.createStatement().execute(\"INSERT INTO source_data (id, raw_value, processed) VALUES (2, 'value2', FALSE);\");\n            conn.createStatement().execute(\"INSERT INTO source_data (id, raw_value, processed) VALUES (3, 'a', FALSE);\"); \n             conn.createStatement().execute(\"INSERT INTO source_data (id, raw_value, processed) VALUES (4, NULL, FALSE);\"); \n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n\n         new java.io.File(\"target_migration.db\").delete();\n\n        DataMigrationService migrator = new DataMigrationService(sourceDbUrl, targetDbUrl);\n\n        migrator.migrateData();\n\n    }\n}\n", "raw_response": "**SRP**\n```java\npublic class DataMigrationService {\n\n    private final String sourceDbUrl;\n    private final String targetDbUrl;\n    private final DatabaseManager databaseManager;\n\n    public DataMigrationService(String sourceDbUrl, String targetDbUrl) {\n        this.sourceDbUrl = sourceDbUrl;\n        this.targetDbUrl = targetDbUrl;\n        this.databaseManager = new DatabaseManager(targetDbUrl);\n        databaseManager.initializeTargetDb();\n    }\n\n    public int migrateData() {\n        System.out.println(\"[DataMigrationService] Starting data migration from \" + sourceDbUrl + \" to \" + targetDbUrl);\n\n        List<SourceData> sourceRecords = databaseManager.fetchSourceData(sourceDbUrl);\n        if (sourceRecords == null || sourceRecords.isEmpty()) {\n            System.out.println(\"[DataMigrationService] No data found in source DB.\");\n            logMigrationEvent(\"Migration\", \"No data in source\", 0, false);\n            return 0;\n        }\n        System.out.println(\"[DataMigrationService] Fetched \" + sourceRecords.size() + \" records from source.\");\n\n        List<TargetData> targetRecords = transformData(sourceRecords);\n        if (targetRecords == null || targetRecords.isEmpty()) {\n            System.out.println(\"[DataMigrationService] No data after transformation.\");\n            logMigrationEvent(\"Migration\", \"No data after transformation\", sourceRecords.size(), false);\n            return 0;\n        }\n        System.out.println(\"[DataMigrationService] Transformed \" + targetRecords.size() + \" records.\");\n\n        int importedCount = databaseManager.saveTargetData(targetRecords);\n        System.out.println(\"[DataMigrationService] Saved \" + importedCount + \" records to target.\");\n\n        if (importedCount == targetRecords.size()) {\n            logMigrationEvent(\"Migration\", \"Success\", importedCount, true);\n            System.out.println(\"[DataMigrationService] Data migration complete. \" + importedCount + \" records migrated.\");\n        } else {\n            logMigrationEvent(\"Migration\", \"Partial Success or Failure\", importedCount, false);\n            System.out.println(\"[DataMigrationService] Data migration complete with issues. \" + importedCount + \" records migrated out of \" + targetRecords.size() + \".\");\n        }\n\n        return importedCount;\n    }\n\n    private List<TargetData> transformData(List<SourceData> sourceRecords) {\n        System.out.println(\"[DataMigrationService] Transforming data...\");\n        List<TargetData> targetRecords = new ArrayList<>();\n        for (SourceData record : sourceRecords) {\n            if (record.rawValue != null && record.rawValue.length() > 2) {\n                targetRecords.add(new TargetData(record.id, record.rawValue.toUpperCase()));\n            }\n        }\n        return targetRecords;\n    }\n\n    private void logMigrationEvent(String eventType, String details, int count, boolean success) {\n        System.out.println(\"[DataMigrationService] LOG: Type=\" + eventType + \", Details=\" + details + \", Count=\" + count + \", Success=\" + success);\n    }\n\n    static class SourceData {\n        int id;\n        String rawValue;\n        SourceData(int id, String rawValue) { this.id = id; this.rawValue = rawValue; }\n    }\n\n    static class TargetData {\n        int id;\n        String value;\n        TargetData(int id, String value) { this.id = id; this.value = value; }\n    }\n\n    public static void main(String[] args) {\n        String sourceDbUrl = \"jdbc:sqlite:source_migration.db\";\n        String targetDbUrl = \"jdbc:sqlite:target_migration.db\";\n\n        try (Connection conn = DriverManager.getConnection(sourceDbUrl)) {\n            conn.createStatement().execute(\"DROP TABLE IF EXISTS source_data;\");\n            conn.createStatement().execute(\"CREATE TABLE source_data (id INTEGER PRIMARY KEY, raw_value TEXT, processed BOOLEAN);\");\n            conn.createStatement().execute(\"INSERT INTO source_data (id, raw_value, processed) VALUES (1, 'value1', FALSE);\");\n            conn.createStatement().execute(\"INSERT INTO source_data (id, raw_value, processed) VALUES (2, 'value2', FALSE);\");\n            conn.createStatement().execute(\"INSERT INTO source_data (id, raw_value, processed) VALUES (3, 'a', FALSE);\");\n            conn.createStatement().execute(\"INSERT INTO source_data (id, raw_value, processed) VALUES (4, NULL, FALSE);\");\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n\n        new java.io.File(\"target_migration.db\").delete();\n\n        DataMigrationService migrator = new DataMigrationService(sourceDbUrl, targetDbUrl);\n        migrator.migrateData();\n    }\n}\n\nclass DatabaseManager {\n    private final String targetDbUrl;\n\n    public DatabaseManager(String targetDbUrl) {\n        this.targetDbUrl = targetDbUrl;\n    }\n\n    public void initializeTargetDb() {\n        System.out.println(\"[DatabaseManager] Initializing target DB \" + targetDbUrl + \"...\");\n        String sql = \"CREATE TABLE IF NOT EXISTS migrated_data (id INTEGER PRIMARY KEY, value TEXT)\";\n        try (Connection conn = DriverManager.getConnection(targetDbUrl);\n             PreparedStatement pstmt = conn.prepareStatement(sql)) {\n            pstmt.executeUpdate();\n        } catch (SQLException e) {\n            System.err.println(\"[DatabaseManager] Error initializing target DB: \" + e.getMessage());\n        }\n    }\n\n    public List<SourceData> fetchSourceData(String sourceDbUrl) {\n        System.out.println(\"[DatabaseManager] Fetching data from source DB \" + sourceDbUrl + \"...\");\n        List<SourceData> records = new ArrayList<>();\n        String sql = \"SELECT id, raw_value FROM source_data WHERE processed = FALSE LIMIT 100\";\n        try (Connection conn = DriverManager.getConnection(sourceDbUrl);\n             PreparedStatement pstmt = conn.prepareStatement(sql);\n             ResultSet rs = pstmt.executeQuery()) {\n\n            while (rs.next()) {\n                records.add(new SourceData(rs.getInt(\"id\"), rs.getString(\"raw_value\")));\n            }\n        } catch (SQLException e) {\n            System.err.println(\"[DatabaseManager] Database error fetching source data: \" + e.getMessage());\n            return null;\n        }\n        return records;\n    }\n\n    public int saveTargetData(List<TargetData> targetRecords) {\n        System.out.println(\"[DatabaseManager] Saving data to target DB \" + targetDbUrl + \"...\");\n        String sql = \"INSERT INTO migrated_data (id, value) VALUES (?, ?)\";\n        int importedCount = 0;\n        try (Connection conn = DriverManager.getConnection(targetDbUrl);\n             PreparedStatement pstmt = conn.prepareStatement(sql)) {\n\n            for (TargetData record : targetRecords) {\n                pstmt.setInt(1, record.id);\n                pstmt.setString(2, record.value);\n                pstmt.addBatch();\n            }\n            int[] results = pstmt.executeBatch();\n            for (int count : results) {\n                if (count >= 0) {\n                    importedCount += count;\n                }\n            }\n        } catch (SQLException e) {\n            System.err.println(\"[DatabaseManager] Database error saving target data: \" + e.getMessage());\n        }\n        return importedCount;\n    }\n}\n```\nThe original `DataMigrationService` class was responsible for multiple tasks including database initialization, data fetching, transformation, and saving, violating the Single Responsibility Principle (SRP). The refactored code introduces a `DatabaseManager` class that handles all database-related operations, allowing `DataMigrationService` to focus solely on the migration logic.", "violation": "SRP", "violation_list": ["SRP"], "explanation": "**SRP**", "solution_code": "public class DataMigrationService {\n\n    private final String sourceDbUrl;\n    private final String targetDbUrl;\n    private final DatabaseManager databaseManager;\n\n    public DataMigrationService(String sourceDbUrl, String targetDbUrl) {\n        this.sourceDbUrl = sourceDbUrl;\n        this.targetDbUrl = targetDbUrl;\n        this.databaseManager = new DatabaseManager(targetDbUrl);\n        databaseManager.initializeTargetDb();\n    }\n\n    public int migrateData() {\n        System.out.println(\"[DataMigrationService] Starting data migration from \" + sourceDbUrl + \" to \" + targetDbUrl);\n\n        List<SourceData> sourceRecords = databaseManager.fetchSourceData(sourceDbUrl);\n        if (sourceRecords == null || sourceRecords.isEmpty()) {\n            System.out.println(\"[DataMigrationService] No data found in source DB.\");\n            logMigrationEvent(\"Migration\", \"No data in source\", 0, false);\n            return 0;\n        }\n        System.out.println(\"[DataMigrationService] Fetched \" + sourceRecords.size() + \" records from source.\");\n\n        List<TargetData> targetRecords = transformData(sourceRecords);\n        if (targetRecords == null || targetRecords.isEmpty()) {\n            System.out.println(\"[DataMigrationService] No data after transformation.\");\n            logMigrationEvent(\"Migration\", \"No data after transformation\", sourceRecords.size(), false);\n            return 0;\n        }\n        System.out.println(\"[DataMigrationService] Transformed \" + targetRecords.size() + \" records.\");\n\n        int importedCount = databaseManager.saveTargetData(targetRecords);\n        System.out.println(\"[DataMigrationService] Saved \" + importedCount + \" records to target.\");\n\n        if (importedCount == targetRecords.size()) {\n            logMigrationEvent(\"Migration\", \"Success\", importedCount, true);\n            System.out.println(\"[DataMigrationService] Data migration complete. \" + importedCount + \" records migrated.\");\n        } else {\n            logMigrationEvent(\"Migration\", \"Partial Success or Failure\", importedCount, false);\n            System.out.println(\"[DataMigrationService] Data migration complete with issues. \" + importedCount + \" records migrated out of \" + targetRecords.size() + \".\");\n        }\n\n        return importedCount;\n    }\n\n    private List<TargetData> transformData(List<SourceData> sourceRecords) {\n        System.out.println(\"[DataMigrationService] Transforming data...\");\n        List<TargetData> targetRecords = new ArrayList<>();\n        for (SourceData record : sourceRecords) {\n            if (record.rawValue != null && record.rawValue.length() > 2) {\n                targetRecords.add(new TargetData(record.id, record.rawValue.toUpperCase()));\n            }\n        }\n        return targetRecords;\n    }\n\n    private void logMigrationEvent(String eventType, String details, int count, boolean success) {\n        System.out.println(\"[DataMigrationService] LOG: Type=\" + eventType + \", Details=\" + details + \", Count=\" + count + \", Success=\" + success);\n    }\n\n    static class SourceData {\n        int id;\n        String rawValue;\n        SourceData(int id, String rawValue) { this.id = id; this.rawValue = rawValue; }\n    }\n\n    static class TargetData {\n        int id;\n        String value;\n        TargetData(int id, String value) { this.id = id; this.value = value; }\n    }\n\n    public static void main(String[] args) {\n        String sourceDbUrl = \"jdbc:sqlite:source_migration.db\";\n        String targetDbUrl = \"jdbc:sqlite:target_migration.db\";\n\n        try (Connection conn = DriverManager.getConnection(sourceDbUrl)) {\n            conn.createStatement().execute(\"DROP TABLE IF EXISTS source_data;\");\n            conn.createStatement().execute(\"CREATE TABLE source_data (id INTEGER PRIMARY KEY, raw_value TEXT, processed BOOLEAN);\");\n            conn.createStatement().execute(\"INSERT INTO source_data (id, raw_value, processed) VALUES (1, 'value1', FALSE);\");\n            conn.createStatement().execute(\"INSERT INTO source_data (id, raw_value, processed) VALUES (2, 'value2', FALSE);\");\n            conn.createStatement().execute(\"INSERT INTO source_data (id, raw_value, processed) VALUES (3, 'a', FALSE);\");\n            conn.createStatement().execute(\"INSERT INTO source_data (id, raw_value, processed) VALUES (4, NULL, FALSE);\");\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n\n        new java.io.File(\"target_migration.db\").delete();\n\n        DataMigrationService migrator = new DataMigrationService(sourceDbUrl, targetDbUrl);\n        migrator.migrateData();\n    }\n}\n\nclass DatabaseManager {\n    private final String targetDbUrl;\n\n    public DatabaseManager(String targetDbUrl) {\n        this.targetDbUrl = targetDbUrl;\n    }\n\n    public void initializeTargetDb() {\n        System.out.println(\"[DatabaseManager] Initializing target DB \" + targetDbUrl + \"...\");\n        String sql = \"CREATE TABLE IF NOT EXISTS migrated_data (id INTEGER PRIMARY KEY, value TEXT)\";\n        try (Connection conn = DriverManager.getConnection(targetDbUrl);\n             PreparedStatement pstmt = conn.prepareStatement(sql)) {\n            pstmt.executeUpdate();\n        } catch (SQLException e) {\n            System.err.println(\"[DatabaseManager] Error initializing target DB: \" + e.getMessage());\n        }\n    }\n\n    public List<SourceData> fetchSourceData(String sourceDbUrl) {\n        System.out.println(\"[DatabaseManager] Fetching data from source DB \" + sourceDbUrl + \"...\");\n        List<SourceData> records = new ArrayList<>();\n        String sql = \"SELECT id, raw_value FROM source_data WHERE processed = FALSE LIMIT 100\";\n        try (Connection conn = DriverManager.getConnection(sourceDbUrl);\n             PreparedStatement pstmt = conn.prepareStatement(sql);\n             ResultSet rs = pstmt.executeQuery()) {\n\n            while (rs.next()) {\n                records.add(new SourceData(rs.getInt(\"id\"), rs.getString(\"raw_value\")));\n            }\n        } catch (SQLException e) {\n            System.err.println(\"[DatabaseManager] Database error fetching source data: \" + e.getMessage());\n            return null;\n        }\n        return records;\n    }\n\n    public int saveTargetData(List<TargetData> targetRecords) {\n        System.out.println(\"[DatabaseManager] Saving data to target DB \" + targetDbUrl + \"...\");\n        String sql = \"INSERT INTO migrated_data (id, value) VALUES (?, ?)\";\n        int importedCount = 0;\n        try (Connection conn = DriverManager.getConnection(targetDbUrl);\n             PreparedStatement pstmt = conn.prepareStatement(sql)) {\n\n            for (TargetData record : targetRecords) {\n                pstmt.setInt(1, record.id);\n                pstmt.setString(2, record.value);\n                pstmt.addBatch();\n            }\n            int[] results = pstmt.executeBatch();\n            for (int count : results) {\n                if (count >= 0) {\n                    importedCount += count;\n                }\n            }\n        } catch (SQLException e) {\n            System.err.println(\"[DatabaseManager] Database error saving target data: \" + e.getMessage());\n        }\n        return importedCount;\n    }\n}", "duration_seconds": 25.75464367866516}
{"id": 11, "strategy": "example", "violation_type": "srp", "model": "gpt-4o-mini", "language": "java", "input": "import java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.PreparedStatement;\nimport java.sql.SQLException;\nimport javax.mail.*;\nimport javax.mail.internet.*;\nimport java.util.Properties;\n\npublic class SystemEventHandler {\n\n    private final String dbUrl;\n    private final String smtpHost;\n\n    public SystemEventHandler(String dbUrl, String smtpHost) {\n        this.dbUrl = dbUrl;\n        this.smtpHost = smtpHost;\n        initializeDb();\n    }\n\n    private void initializeDb() {\n        System.out.println(\"[SystemEventHandler] Initializing DB \" + dbUrl + \"...\");\n        String sql = \"CREATE TABLE IF NOT EXISTS events (id INTEGER PRIMARY KEY AUTOINCREMENT, event_type TEXT, payload TEXT, processed_at DATETIME DEFAULT CURRENT_TIMESTAMP)\";\n        try (Connection conn = DriverManager.getConnection(dbUrl);\n             PreparedStatement pstmt = conn.prepareStatement(sql)) {\n            pstmt.executeUpdate();\n        } catch (SQLException e) {\n            System.err.println(\"[SystemEventHandler] Error initializing DB: \" + e.getMessage());\n        }\n    }\n\n    public void handleEvent(String eventType, String payload) {\n        System.out.println(\"[SystemEventHandler] Received event: Type=\" + eventType + \", Payload=\" + payload);\n\n        if (eventType.equals(\"USER_CREATED\")) {\n            System.out.println(\"[SystemEventHandler] Handling USER_CREATED event...\");\n            updateUserCountInDb();\n            sendWelcomeEmail(payload);\n            logEvent(\"UserCreatedHandled\", payload);\n        } else if (eventType.equals(\"ORDER_PLACED\")) {\n            System.out.println(\"[SystemEventHandler] Handling ORDER_PLACED event...\");\n            updateSalesMetricsInDb(payload);\n            logEvent(\"OrderPlacedHandled\", payload);\n        } else {\n            System.out.println(\"[SystemEventHandler] Unknown event type: \" + eventType);\n            logEvent(\"UnknownEvent\", payload);\n        }\n\n        saveEventToDb(eventType, payload);\n        System.out.println(\"[SystemEventHandler] Event saved to DB.\");\n    }\n\n    private void updateUserCountInDb() {\n        System.out.println(\"[SystemEventHandler] Updating user count in DB \" + dbUrl + \"...\");\n\n        String sql = \"UPDATE metrics SET user_count = user_count + 1\";\n        try (Connection conn = DriverManager.getConnection(dbUrl);\n             PreparedStatement pstmt = conn.prepareStatement(sql)) {\n            pstmt.executeUpdate();\n        } catch (SQLException e) {\n            System.err.println(\"[SystemEventHandler] Database error updating user count: \" + e.getMessage());\n        }\n    }\n\n    private void updateSalesMetricsInDb(String payload) {\n        System.out.println(\"[SystemEventHandler] Updating sales metrics in DB \" + dbUrl + \" with payload: \" + payload + \"...\");\n\n        String sql = \"UPDATE metrics SET total_sales = total_sales + ?\";\n        try (Connection conn = DriverManager.getConnection(dbUrl);\n             PreparedStatement pstmt = conn.prepareStatement(sql)) {\n            double amount = Double.parseDouble(payload); \n            pstmt.setDouble(1, amount);\n            pstmt.executeUpdate();\n        } catch (SQLException | NumberFormatException e) {\n            System.err.println(\"[SystemEventHandler] Database/Parsing error updating sales metrics: \" + e.getMessage());\n        }\n    }\n\n    private void sendWelcomeEmail(String recipientEmail) {\n        System.out.println(\"[SystemEventHandler] Sending welcome email to \" + recipientEmail + \" (SMTP: \" + smtpHost + \")...\");\n\n        Properties props = new Properties();\n        props.put(\"mail.smtp.auth\", \"true\");\n        props.put(\"mail.smtp.starttls.enable\", \"true\");\n        props.put(\"mail.smtp.host\", smtpHost);\n        props.put(\"mail.smtp.port\", \"587\");\n\n        Session session = Session.getInstance(props, new Authenticator() {\n            protected PasswordAuthentication getPasswordAuthentication() {\n                return new PasswordAuthentication(\"welcome@example.com\", \"password\"); \n            }\n        });\n\n        try {\n            Message message = new MimeMessage(session);\n            message.setFrom(new InternetAddress(\"welcome@example.com\"));\n            message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(recipientEmail));\n            message.setSubject(\"Welcome!\");\n            message.setText(\"Welcome to our service!\");\n\n            Transport.send(message);\n        } catch (MessagingException e) {\n            System.err.println(\"[SystemEventHandler] Error sending welcome email: \" + e.getMessage());\n        }\n    }\n\n    private void logEvent(String eventType, String payload) {\n        System.out.println(\"[SystemEventHandler] LOG: Type=\" + eventType + \", Payload=\" + payload);\n\n\n    }\n\n     private void saveEventToDb(String eventType, String payload) {\n        System.out.println(\"[SystemEventHandler] Saving event \" + eventType + \" to DB \" + dbUrl + \"...\");\n        String sql = \"INSERT INTO events (event_type, payload) VALUES (?, ?)\";\n         try (Connection conn = DriverManager.getConnection(dbUrl);\n              PreparedStatement pstmt = conn.prepareStatement(sql)) {\n             pstmt.setString(1, eventType);\n             pstmt.setString(2, payload);\n             pstmt.executeUpdate();\n         } catch (SQLException e) {\n             System.err.println(\"[SystemEventHandler] Database error saving event: \" + e.getMessage());\n         }\n    }\n\n    public static void main(String[] args) {\n        String testDbUrl = \"jdbc:sqlite:test_events.db\";\n        String testSmtpHost = \"localhost\";\n\n        new java.io.File(\"test_events.db\").delete();\n\n        try (Connection conn = DriverManager.getConnection(testDbUrl)) {\n             conn.createStatement().execute(\"CREATE TABLE IF NOT EXISTS metrics (user_count INTEGER DEFAULT 0, total_sales REAL DEFAULT 0.0);\");\n             conn.createStatement().execute(\"INSERT INTO metrics DEFAULT VALUES;\");\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n\n        SystemEventHandler handler = new SystemEventHandler(testDbUrl, testSmtpHost);\n\n        handler.handleEvent(\"USER_CREATED\", \"newuser@example.com\");\n        handler.handleEvent(\"ORDER_PLACED\", \"150.75\");\n        handler.handleEvent(\"USER_CREATED\", \"another@example.com\");\n        handler.handleEvent(\"UNKNOWN_EVENT\", \"some payload\");\n\n    }\n}\n", "prompt": "You are an expert in identifying and refactoring SOLID principle violations in java code. Your task is to analyze the code provided and respond in the exact format below, without any additional text or commentary.\n\nYou must provide the following three parts in your response:\n1. The violated SOLID principle (e.g., SRP, OCP, LSP, ISP, DIP). If no violation exists, respond with **NONE**.\n2. A complete refactored version of the code that removes the violation. YOU MUST RETURN ONLY THE CODE BLOCK.\n3. A brief explanation of the violation and the refactoring.\n\nUse these criteria to detect violations:\n- **SRP**: A class does too many unrelated tasks.\n- **OCP**: Multiple `if-else` or `switch` blocks for logic that should be handled by polymorphism.\n- **LSP**: Subclasses override behavior in a way that breaks the contract of the base class (e.g., throw exceptions).\n- **ISP**: Interfaces that are too large or force implementing unnecessary methods.\n- **DIP**: High-level classes directly depend on low-level classes instead of abstractions.\n\nIf more than one violation is present, report only the most prominent one.\n\n**IMPORTANT:** Follow this output format *exactly*. Do not include greetings, summaries, or comments before or after the output:\n\n**<VIOLATION TYPE>**\n```java\n<Refactored code>\n```\n<Explanation of the refactoring>\n\nExample output:\n**SRP**\n```java\npublic class ReportGenerator {\n    public String generateReport() {\n        return \"Report data\";\n    }\n}\n```\nThe class previously handled both data generation and file I/O. Now it only generates the report, following SRP.\n\nHere is the code:\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.PreparedStatement;\nimport java.sql.SQLException;\nimport javax.mail.*;\nimport javax.mail.internet.*;\nimport java.util.Properties;\n\npublic class SystemEventHandler {\n\n    private final String dbUrl;\n    private final String smtpHost;\n\n    public SystemEventHandler(String dbUrl, String smtpHost) {\n        this.dbUrl = dbUrl;\n        this.smtpHost = smtpHost;\n        initializeDb();\n    }\n\n    private void initializeDb() {\n        System.out.println(\"[SystemEventHandler] Initializing DB \" + dbUrl + \"...\");\n        String sql = \"CREATE TABLE IF NOT EXISTS events (id INTEGER PRIMARY KEY AUTOINCREMENT, event_type TEXT, payload TEXT, processed_at DATETIME DEFAULT CURRENT_TIMESTAMP)\";\n        try (Connection conn = DriverManager.getConnection(dbUrl);\n             PreparedStatement pstmt = conn.prepareStatement(sql)) {\n            pstmt.executeUpdate();\n        } catch (SQLException e) {\n            System.err.println(\"[SystemEventHandler] Error initializing DB: \" + e.getMessage());\n        }\n    }\n\n    public void handleEvent(String eventType, String payload) {\n        System.out.println(\"[SystemEventHandler] Received event: Type=\" + eventType + \", Payload=\" + payload);\n\n        if (eventType.equals(\"USER_CREATED\")) {\n            System.out.println(\"[SystemEventHandler] Handling USER_CREATED event...\");\n            updateUserCountInDb();\n            sendWelcomeEmail(payload);\n            logEvent(\"UserCreatedHandled\", payload);\n        } else if (eventType.equals(\"ORDER_PLACED\")) {\n            System.out.println(\"[SystemEventHandler] Handling ORDER_PLACED event...\");\n            updateSalesMetricsInDb(payload);\n            logEvent(\"OrderPlacedHandled\", payload);\n        } else {\n            System.out.println(\"[SystemEventHandler] Unknown event type: \" + eventType);\n            logEvent(\"UnknownEvent\", payload);\n        }\n\n        saveEventToDb(eventType, payload);\n        System.out.println(\"[SystemEventHandler] Event saved to DB.\");\n    }\n\n    private void updateUserCountInDb() {\n        System.out.println(\"[SystemEventHandler] Updating user count in DB \" + dbUrl + \"...\");\n\n        String sql = \"UPDATE metrics SET user_count = user_count + 1\";\n        try (Connection conn = DriverManager.getConnection(dbUrl);\n             PreparedStatement pstmt = conn.prepareStatement(sql)) {\n            pstmt.executeUpdate();\n        } catch (SQLException e) {\n            System.err.println(\"[SystemEventHandler] Database error updating user count: \" + e.getMessage());\n        }\n    }\n\n    private void updateSalesMetricsInDb(String payload) {\n        System.out.println(\"[SystemEventHandler] Updating sales metrics in DB \" + dbUrl + \" with payload: \" + payload + \"...\");\n\n        String sql = \"UPDATE metrics SET total_sales = total_sales + ?\";\n        try (Connection conn = DriverManager.getConnection(dbUrl);\n             PreparedStatement pstmt = conn.prepareStatement(sql)) {\n            double amount = Double.parseDouble(payload); \n            pstmt.setDouble(1, amount);\n            pstmt.executeUpdate();\n        } catch (SQLException | NumberFormatException e) {\n            System.err.println(\"[SystemEventHandler] Database/Parsing error updating sales metrics: \" + e.getMessage());\n        }\n    }\n\n    private void sendWelcomeEmail(String recipientEmail) {\n        System.out.println(\"[SystemEventHandler] Sending welcome email to \" + recipientEmail + \" (SMTP: \" + smtpHost + \")...\");\n\n        Properties props = new Properties();\n        props.put(\"mail.smtp.auth\", \"true\");\n        props.put(\"mail.smtp.starttls.enable\", \"true\");\n        props.put(\"mail.smtp.host\", smtpHost);\n        props.put(\"mail.smtp.port\", \"587\");\n\n        Session session = Session.getInstance(props, new Authenticator() {\n            protected PasswordAuthentication getPasswordAuthentication() {\n                return new PasswordAuthentication(\"welcome@example.com\", \"password\"); \n            }\n        });\n\n        try {\n            Message message = new MimeMessage(session);\n            message.setFrom(new InternetAddress(\"welcome@example.com\"));\n            message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(recipientEmail));\n            message.setSubject(\"Welcome!\");\n            message.setText(\"Welcome to our service!\");\n\n            Transport.send(message);\n        } catch (MessagingException e) {\n            System.err.println(\"[SystemEventHandler] Error sending welcome email: \" + e.getMessage());\n        }\n    }\n\n    private void logEvent(String eventType, String payload) {\n        System.out.println(\"[SystemEventHandler] LOG: Type=\" + eventType + \", Payload=\" + payload);\n\n\n    }\n\n     private void saveEventToDb(String eventType, String payload) {\n        System.out.println(\"[SystemEventHandler] Saving event \" + eventType + \" to DB \" + dbUrl + \"...\");\n        String sql = \"INSERT INTO events (event_type, payload) VALUES (?, ?)\";\n         try (Connection conn = DriverManager.getConnection(dbUrl);\n              PreparedStatement pstmt = conn.prepareStatement(sql)) {\n             pstmt.setString(1, eventType);\n             pstmt.setString(2, payload);\n             pstmt.executeUpdate();\n         } catch (SQLException e) {\n             System.err.println(\"[SystemEventHandler] Database error saving event: \" + e.getMessage());\n         }\n    }\n\n    public static void main(String[] args) {\n        String testDbUrl = \"jdbc:sqlite:test_events.db\";\n        String testSmtpHost = \"localhost\";\n\n        new java.io.File(\"test_events.db\").delete();\n\n        try (Connection conn = DriverManager.getConnection(testDbUrl)) {\n             conn.createStatement().execute(\"CREATE TABLE IF NOT EXISTS metrics (user_count INTEGER DEFAULT 0, total_sales REAL DEFAULT 0.0);\");\n             conn.createStatement().execute(\"INSERT INTO metrics DEFAULT VALUES;\");\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n\n        SystemEventHandler handler = new SystemEventHandler(testDbUrl, testSmtpHost);\n\n        handler.handleEvent(\"USER_CREATED\", \"newuser@example.com\");\n        handler.handleEvent(\"ORDER_PLACED\", \"150.75\");\n        handler.handleEvent(\"USER_CREATED\", \"another@example.com\");\n        handler.handleEvent(\"UNKNOWN_EVENT\", \"some payload\");\n\n    }\n}\n", "raw_response": "**SRP**\n```java\npublic class SystemEventHandler {\n\n    private final String dbUrl;\n    private final String smtpHost;\n    private final EventLogger eventLogger;\n    private final EmailService emailService;\n    private final DatabaseService databaseService;\n\n    public SystemEventHandler(String dbUrl, String smtpHost) {\n        this.dbUrl = dbUrl;\n        this.smtpHost = smtpHost;\n        this.eventLogger = new EventLogger();\n        this.emailService = new EmailService(smtpHost);\n        this.databaseService = new DatabaseService(dbUrl);\n        initializeDb();\n    }\n\n    private void initializeDb() {\n        databaseService.initialize();\n    }\n\n    public void handleEvent(String eventType, String payload) {\n        System.out.println(\"[SystemEventHandler] Received event: Type=\" + eventType + \", Payload=\" + payload);\n        switch (eventType) {\n            case \"USER_CREATED\":\n                handleUserCreated(payload);\n                break;\n            case \"ORDER_PLACED\":\n                handleOrderPlaced(payload);\n                break;\n            default:\n                handleUnknownEvent(eventType, payload);\n                break;\n        }\n        databaseService.saveEventToDb(eventType, payload);\n        System.out.println(\"[SystemEventHandler] Event saved to DB.\");\n    }\n\n    private void handleUserCreated(String payload) {\n        System.out.println(\"[SystemEventHandler] Handling USER_CREATED event...\");\n        databaseService.updateUserCountInDb();\n        emailService.sendWelcomeEmail(payload);\n        eventLogger.logEvent(\"UserCreatedHandled\", payload);\n    }\n\n    private void handleOrderPlaced(String payload) {\n        System.out.println(\"[SystemEventHandler] Handling ORDER_PLACED event...\");\n        databaseService.updateSalesMetricsInDb(payload);\n        eventLogger.logEvent(\"OrderPlacedHandled\", payload);\n    }\n\n    private void handleUnknownEvent(String eventType, String payload) {\n        System.out.println(\"[SystemEventHandler] Unknown event type: \" + eventType);\n        eventLogger.logEvent(\"UnknownEvent\", payload);\n    }\n\n    public static void main(String[] args) {\n        String testDbUrl = \"jdbc:sqlite:test_events.db\";\n        String testSmtpHost = \"localhost\";\n\n        new java.io.File(\"test_events.db\").delete();\n\n        DatabaseService.initializeTestDb(testDbUrl);\n\n        SystemEventHandler handler = new SystemEventHandler(testDbUrl, testSmtpHost);\n        handler.handleEvent(\"USER_CREATED\", \"newuser@example.com\");\n        handler.handleEvent(\"ORDER_PLACED\", \"150.75\");\n        handler.handleEvent(\"USER_CREATED\", \"another@example.com\");\n        handler.handleEvent(\"UNKNOWN_EVENT\", \"some payload\");\n    }\n}\n\nclass DatabaseService {\n    private final String dbUrl;\n\n    public DatabaseService(String dbUrl) {\n        this.dbUrl = dbUrl;\n    }\n\n    public void initialize() {\n        System.out.println(\"[DatabaseService] Initializing DB \" + dbUrl + \"...\");\n        String sql = \"CREATE TABLE IF NOT EXISTS events (id INTEGER PRIMARY KEY AUTOINCREMENT, event_type TEXT, payload TEXT, processed_at DATETIME DEFAULT CURRENT_TIMESTAMP)\";\n        try (Connection conn = DriverManager.getConnection(dbUrl);\n             PreparedStatement pstmt = conn.prepareStatement(sql)) {\n            pstmt.executeUpdate();\n        } catch (SQLException e) {\n            System.err.println(\"[DatabaseService] Error initializing DB: \" + e.getMessage());\n        }\n    }\n\n    public void updateUserCountInDb() {\n        System.out.println(\"[DatabaseService] Updating user count in DB \" + dbUrl + \"...\");\n        String sql = \"UPDATE metrics SET user_count = user_count + 1\";\n        executeUpdate(sql);\n    }\n\n    public void updateSalesMetricsInDb(String payload) {\n        System.out.println(\"[DatabaseService] Updating sales metrics in DB \" + dbUrl + \" with payload: \" + payload + \"...\");\n        String sql = \"UPDATE metrics SET total_sales = total_sales + ?\";\n        try (Connection conn = DriverManager.getConnection(dbUrl);\n             PreparedStatement pstmt = conn.prepareStatement(sql)) {\n            double amount = Double.parseDouble(payload);\n            pstmt.setDouble(1, amount);\n            pstmt.executeUpdate();\n        } catch (SQLException | NumberFormatException e) {\n            System.err.println(\"[DatabaseService] Database/Parsing error updating sales metrics: \" + e.getMessage());\n        }\n    }\n\n    public void saveEventToDb(String eventType, String payload) {\n        System.out.println(\"[DatabaseService] Saving event \" + eventType + \" to DB \" + dbUrl + \"...\");\n        String sql = \"INSERT INTO events (event_type, payload) VALUES (?, ?)\";\n        try (Connection conn = DriverManager.getConnection(dbUrl);\n             PreparedStatement pstmt = conn.prepareStatement(sql)) {\n            pstmt.setString(1, eventType);\n            pstmt.setString(2, payload);\n            pstmt.executeUpdate();\n        } catch (SQLException e) {\n            System.err.println(\"[DatabaseService] Database error saving event: \" + e.getMessage());\n        }\n    }\n\n    public static void initializeTestDb(String testDbUrl) {\n        try (Connection conn = DriverManager.getConnection(testDbUrl)) {\n            conn.createStatement().execute(\"CREATE TABLE IF NOT EXISTS metrics (user_count INTEGER DEFAULT 0, total_sales REAL DEFAULT 0.0);\");\n            conn.createStatement().execute(\"INSERT INTO metrics DEFAULT VALUES;\");\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private void executeUpdate(String sql) {\n        try (Connection conn = DriverManager.getConnection(dbUrl);\n             PreparedStatement pstmt = conn.prepareStatement(sql)) {\n            pstmt.executeUpdate();\n        } catch (SQLException e) {\n            System.err.println(\"[DatabaseService] Database error: \" + e.getMessage());\n        }\n    }\n}\n\nclass EmailService {\n    private final String smtpHost;\n\n    public EmailService(String smtpHost) {\n        this.smtpHost = smtpHost;\n    }\n\n    public void sendWelcomeEmail(String recipientEmail) {\n        System.out.println(\"[EmailService] Sending welcome email to \" + recipientEmail + \" (SMTP: \" + smtpHost + \")...\");\n        Properties props = new Properties();\n        props.put(\"mail.smtp.auth\", \"true\");\n        props.put(\"mail.smtp.starttls.enable\", \"true\");\n        props.put(\"mail.smtp.host\", smtpHost);\n        props.put(\"mail.smtp.port\", \"587\");\n\n        Session session = Session.getInstance(props, new Authenticator() {\n            protected PasswordAuthentication getPasswordAuthentication() {\n                return new PasswordAuthentication(\"welcome@example.com\", \"password\");\n            }\n        });\n\n        try {\n            Message message = new MimeMessage(session);\n            message.setFrom(new InternetAddress(\"welcome@example.com\"));\n            message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(recipientEmail));\n            message.setSubject(\"Welcome!\");\n            message.setText(\"Welcome to our service!\");\n\n            Transport.send(message);\n        } catch (MessagingException e) {\n            System.err.println(\"[EmailService] Error sending welcome email: \" + e.getMessage());\n        }\n    }\n}\n\nclass EventLogger {\n    public void logEvent(String eventType, String payload) {\n        System.out.println(\"[EventLogger] LOG: Type=\" + eventType + \", Payload=\" + payload);\n    }\n}\n```\nThe original `SystemEventHandler` class was responsible for handling events, database operations, and sending emails, violating the Single Responsibility Principle (SRP). The refactored code separates these concerns into three distinct classes: `DatabaseService`, `EmailService`, and `EventLogger`, allowing each class to focus on a single responsibility.", "violation": "SRP", "violation_list": ["SRP"], "explanation": "**SRP**", "solution_code": "public class SystemEventHandler {\n\n    private final String dbUrl;\n    private final String smtpHost;\n    private final EventLogger eventLogger;\n    private final EmailService emailService;\n    private final DatabaseService databaseService;\n\n    public SystemEventHandler(String dbUrl, String smtpHost) {\n        this.dbUrl = dbUrl;\n        this.smtpHost = smtpHost;\n        this.eventLogger = new EventLogger();\n        this.emailService = new EmailService(smtpHost);\n        this.databaseService = new DatabaseService(dbUrl);\n        initializeDb();\n    }\n\n    private void initializeDb() {\n        databaseService.initialize();\n    }\n\n    public void handleEvent(String eventType, String payload) {\n        System.out.println(\"[SystemEventHandler] Received event: Type=\" + eventType + \", Payload=\" + payload);\n        switch (eventType) {\n            case \"USER_CREATED\":\n                handleUserCreated(payload);\n                break;\n            case \"ORDER_PLACED\":\n                handleOrderPlaced(payload);\n                break;\n            default:\n                handleUnknownEvent(eventType, payload);\n                break;\n        }\n        databaseService.saveEventToDb(eventType, payload);\n        System.out.println(\"[SystemEventHandler] Event saved to DB.\");\n    }\n\n    private void handleUserCreated(String payload) {\n        System.out.println(\"[SystemEventHandler] Handling USER_CREATED event...\");\n        databaseService.updateUserCountInDb();\n        emailService.sendWelcomeEmail(payload);\n        eventLogger.logEvent(\"UserCreatedHandled\", payload);\n    }\n\n    private void handleOrderPlaced(String payload) {\n        System.out.println(\"[SystemEventHandler] Handling ORDER_PLACED event...\");\n        databaseService.updateSalesMetricsInDb(payload);\n        eventLogger.logEvent(\"OrderPlacedHandled\", payload);\n    }\n\n    private void handleUnknownEvent(String eventType, String payload) {\n        System.out.println(\"[SystemEventHandler] Unknown event type: \" + eventType);\n        eventLogger.logEvent(\"UnknownEvent\", payload);\n    }\n\n    public static void main(String[] args) {\n        String testDbUrl = \"jdbc:sqlite:test_events.db\";\n        String testSmtpHost = \"localhost\";\n\n        new java.io.File(\"test_events.db\").delete();\n\n        DatabaseService.initializeTestDb(testDbUrl);\n\n        SystemEventHandler handler = new SystemEventHandler(testDbUrl, testSmtpHost);\n        handler.handleEvent(\"USER_CREATED\", \"newuser@example.com\");\n        handler.handleEvent(\"ORDER_PLACED\", \"150.75\");\n        handler.handleEvent(\"USER_CREATED\", \"another@example.com\");\n        handler.handleEvent(\"UNKNOWN_EVENT\", \"some payload\");\n    }\n}\n\nclass DatabaseService {\n    private final String dbUrl;\n\n    public DatabaseService(String dbUrl) {\n        this.dbUrl = dbUrl;\n    }\n\n    public void initialize() {\n        System.out.println(\"[DatabaseService] Initializing DB \" + dbUrl + \"...\");\n        String sql = \"CREATE TABLE IF NOT EXISTS events (id INTEGER PRIMARY KEY AUTOINCREMENT, event_type TEXT, payload TEXT, processed_at DATETIME DEFAULT CURRENT_TIMESTAMP)\";\n        try (Connection conn = DriverManager.getConnection(dbUrl);\n             PreparedStatement pstmt = conn.prepareStatement(sql)) {\n            pstmt.executeUpdate();\n        } catch (SQLException e) {\n            System.err.println(\"[DatabaseService] Error initializing DB: \" + e.getMessage());\n        }\n    }\n\n    public void updateUserCountInDb() {\n        System.out.println(\"[DatabaseService] Updating user count in DB \" + dbUrl + \"...\");\n        String sql = \"UPDATE metrics SET user_count = user_count + 1\";\n        executeUpdate(sql);\n    }\n\n    public void updateSalesMetricsInDb(String payload) {\n        System.out.println(\"[DatabaseService] Updating sales metrics in DB \" + dbUrl + \" with payload: \" + payload + \"...\");\n        String sql = \"UPDATE metrics SET total_sales = total_sales + ?\";\n        try (Connection conn = DriverManager.getConnection(dbUrl);\n             PreparedStatement pstmt = conn.prepareStatement(sql)) {\n            double amount = Double.parseDouble(payload);\n            pstmt.setDouble(1, amount);\n            pstmt.executeUpdate();\n        } catch (SQLException | NumberFormatException e) {\n            System.err.println(\"[DatabaseService] Database/Parsing error updating sales metrics: \" + e.getMessage());\n        }\n    }\n\n    public void saveEventToDb(String eventType, String payload) {\n        System.out.println(\"[DatabaseService] Saving event \" + eventType + \" to DB \" + dbUrl + \"...\");\n        String sql = \"INSERT INTO events (event_type, payload) VALUES (?, ?)\";\n        try (Connection conn = DriverManager.getConnection(dbUrl);\n             PreparedStatement pstmt = conn.prepareStatement(sql)) {\n            pstmt.setString(1, eventType);\n            pstmt.setString(2, payload);\n            pstmt.executeUpdate();\n        } catch (SQLException e) {\n            System.err.println(\"[DatabaseService] Database error saving event: \" + e.getMessage());\n        }\n    }\n\n    public static void initializeTestDb(String testDbUrl) {\n        try (Connection conn = DriverManager.getConnection(testDbUrl)) {\n            conn.createStatement().execute(\"CREATE TABLE IF NOT EXISTS metrics (user_count INTEGER DEFAULT 0, total_sales REAL DEFAULT 0.0);\");\n            conn.createStatement().execute(\"INSERT INTO metrics DEFAULT VALUES;\");\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private void executeUpdate(String sql) {\n        try (Connection conn = DriverManager.getConnection(dbUrl);\n             PreparedStatement pstmt = conn.prepareStatement(sql)) {\n            pstmt.executeUpdate();\n        } catch (SQLException e) {\n            System.err.println(\"[DatabaseService] Database error: \" + e.getMessage());\n        }\n    }\n}\n\nclass EmailService {\n    private final String smtpHost;\n\n    public EmailService(String smtpHost) {\n        this.smtpHost = smtpHost;\n    }\n\n    public void sendWelcomeEmail(String recipientEmail) {\n        System.out.println(\"[EmailService] Sending welcome email to \" + recipientEmail + \" (SMTP: \" + smtpHost + \")...\");\n        Properties props = new Properties();\n        props.put(\"mail.smtp.auth\", \"true\");\n        props.put(\"mail.smtp.starttls.enable\", \"true\");\n        props.put(\"mail.smtp.host\", smtpHost);\n        props.put(\"mail.smtp.port\", \"587\");\n\n        Session session = Session.getInstance(props, new Authenticator() {\n            protected PasswordAuthentication getPasswordAuthentication() {\n                return new PasswordAuthentication(\"welcome@example.com\", \"password\");\n            }\n        });\n\n        try {\n            Message message = new MimeMessage(session);\n            message.setFrom(new InternetAddress(\"welcome@example.com\"));\n            message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(recipientEmail));\n            message.setSubject(\"Welcome!\");\n            message.setText(\"Welcome to our service!\");\n\n            Transport.send(message);\n        } catch (MessagingException e) {\n            System.err.println(\"[EmailService] Error sending welcome email: \" + e.getMessage());\n        }\n    }\n}\n\nclass EventLogger {\n    public void logEvent(String eventType, String payload) {\n        System.out.println(\"[EventLogger] LOG: Type=\" + eventType + \", Payload=\" + payload);\n    }\n}", "duration_seconds": 24.238401174545288}
{"id": 12, "strategy": "example", "violation_type": "srp", "model": "gpt-4o-mini", "language": "PYTHON", "input": "class User:\n    def __init__(self, name, email):\n        self.name = name\n        self.email = email\n    def save_to_db(self):\n        print(f\"Saving {self.name} to database\")", "prompt": "You are an expert in identifying and refactoring SOLID principle violations in PYTHON code. Your task is to analyze the code provided and respond in the exact format below, without any additional text or commentary.\n\nYou must provide the following three parts in your response:\n1. The violated SOLID principle (e.g., SRP, OCP, LSP, ISP, DIP). If no violation exists, respond with **NONE**.\n2. A complete refactored version of the code that removes the violation. YOU MUST RETURN ONLY THE CODE BLOCK.\n3. A brief explanation of the violation and the refactoring.\n\nUse these criteria to detect violations:\n- **SRP**: A class does too many unrelated tasks.\n- **OCP**: Multiple `if-else` or `switch` blocks for logic that should be handled by polymorphism.\n- **LSP**: Subclasses override behavior in a way that breaks the contract of the base class (e.g., throw exceptions).\n- **ISP**: Interfaces that are too large or force implementing unnecessary methods.\n- **DIP**: High-level classes directly depend on low-level classes instead of abstractions.\n\nIf more than one violation is present, report only the most prominent one.\n\n**IMPORTANT:** Follow this output format *exactly*. Do not include greetings, summaries, or comments before or after the output:\n\n**<VIOLATION TYPE>**\n```python\n<Refactored code>\n```\n<Explanation of the refactoring>\n\nExample output:\n**SRP**\n```java\npublic class ReportGenerator {\n    public String generateReport() {\n        return \"Report data\";\n    }\n}\n```\nThe class previously handled both data generation and file I/O. Now it only generates the report, following SRP.\n\nHere is the code:\nclass User:\n    def __init__(self, name, email):\n        self.name = name\n        self.email = email\n    def save_to_db(self):\n        print(f\"Saving {self.name} to database\")", "raw_response": "**SRP**\n```python\nclass User:\n    def __init__(self, name, email):\n        self.name = name\n        self.email = email\n\nclass UserRepository:\n    def save(self, user):\n        print(f\"Saving {user.name} to database\")\n```\nThe `User` class was responsible for both user data management and database operations. Now, the `User` class only manages user data, while the `UserRepository` class handles the database operations, adhering to the Single Responsibility Principle (SRP).", "violation": "SRP", "violation_list": ["SRP"], "explanation": "**SRP**", "solution_code": "class User:\n    def __init__(self, name, email):\n        self.name = name\n        self.email = email\n\nclass UserRepository:\n    def save(self, user):\n        print(f\"Saving {user.name} to database\")", "duration_seconds": 2.386085033416748}
{"id": 13, "strategy": "example", "violation_type": "srp", "model": "gpt-4o-mini", "language": "PYTHON", "input": "class Report:\n    def __init__(self, data):\n        self.data = data\n    def calculate_statistics(self):\n        return sum(self.data)/len(self.data)\n    def print_report(self):\n        print(f\"Report: {self.data}\")", "prompt": "You are an expert in identifying and refactoring SOLID principle violations in PYTHON code. Your task is to analyze the code provided and respond in the exact format below, without any additional text or commentary.\n\nYou must provide the following three parts in your response:\n1. The violated SOLID principle (e.g., SRP, OCP, LSP, ISP, DIP). If no violation exists, respond with **NONE**.\n2. A complete refactored version of the code that removes the violation. YOU MUST RETURN ONLY THE CODE BLOCK.\n3. A brief explanation of the violation and the refactoring.\n\nUse these criteria to detect violations:\n- **SRP**: A class does too many unrelated tasks.\n- **OCP**: Multiple `if-else` or `switch` blocks for logic that should be handled by polymorphism.\n- **LSP**: Subclasses override behavior in a way that breaks the contract of the base class (e.g., throw exceptions).\n- **ISP**: Interfaces that are too large or force implementing unnecessary methods.\n- **DIP**: High-level classes directly depend on low-level classes instead of abstractions.\n\nIf more than one violation is present, report only the most prominent one.\n\n**IMPORTANT:** Follow this output format *exactly*. Do not include greetings, summaries, or comments before or after the output:\n\n**<VIOLATION TYPE>**\n```python\n<Refactored code>\n```\n<Explanation of the refactoring>\n\nExample output:\n**SRP**\n```java\npublic class ReportGenerator {\n    public String generateReport() {\n        return \"Report data\";\n    }\n}\n```\nThe class previously handled both data generation and file I/O. Now it only generates the report, following SRP.\n\nHere is the code:\nclass Report:\n    def __init__(self, data):\n        self.data = data\n    def calculate_statistics(self):\n        return sum(self.data)/len(self.data)\n    def print_report(self):\n        print(f\"Report: {self.data}\")", "raw_response": "**SRP**\n```python\nclass Report:\n    def __init__(self, data):\n        self.data = data\n\n    def calculate_statistics(self):\n        return sum(self.data) / len(self.data)\n\nclass ReportPrinter:\n    @staticmethod\n    def print_report(report):\n        print(f\"Report: {report.data}\")\n```\nThe `Report` class was handling both data calculation and printing, violating the Single Responsibility Principle (SRP). The refactoring separates the printing functionality into a new `ReportPrinter` class, allowing each class to have a single responsibility.", "violation": "SRP", "violation_list": ["SRP"], "explanation": "**SRP**", "solution_code": "class Report:\n    def __init__(self, data):\n        self.data = data\n\n    def calculate_statistics(self):\n        return sum(self.data) / len(self.data)\n\nclass ReportPrinter:\n    @staticmethod\n    def print_report(report):\n        print(f\"Report: {report.data}\")", "duration_seconds": 2.5348353385925293}
{"id": 14, "strategy": "example", "violation_type": "srp", "model": "gpt-4o-mini", "language": "PYTHON", "input": "class Order:\n    def __init__(self, items):\n        self.items = items\n    def calculate_total(self):\n        return sum(self.items)\n    def send_confirmation_email(self):\n        print(\"Email sent\")", "prompt": "You are an expert in identifying and refactoring SOLID principle violations in PYTHON code. Your task is to analyze the code provided and respond in the exact format below, without any additional text or commentary.\n\nYou must provide the following three parts in your response:\n1. The violated SOLID principle (e.g., SRP, OCP, LSP, ISP, DIP). If no violation exists, respond with **NONE**.\n2. A complete refactored version of the code that removes the violation. YOU MUST RETURN ONLY THE CODE BLOCK.\n3. A brief explanation of the violation and the refactoring.\n\nUse these criteria to detect violations:\n- **SRP**: A class does too many unrelated tasks.\n- **OCP**: Multiple `if-else` or `switch` blocks for logic that should be handled by polymorphism.\n- **LSP**: Subclasses override behavior in a way that breaks the contract of the base class (e.g., throw exceptions).\n- **ISP**: Interfaces that are too large or force implementing unnecessary methods.\n- **DIP**: High-level classes directly depend on low-level classes instead of abstractions.\n\nIf more than one violation is present, report only the most prominent one.\n\n**IMPORTANT:** Follow this output format *exactly*. Do not include greetings, summaries, or comments before or after the output:\n\n**<VIOLATION TYPE>**\n```python\n<Refactored code>\n```\n<Explanation of the refactoring>\n\nExample output:\n**SRP**\n```java\npublic class ReportGenerator {\n    public String generateReport() {\n        return \"Report data\";\n    }\n}\n```\nThe class previously handled both data generation and file I/O. Now it only generates the report, following SRP.\n\nHere is the code:\nclass Order:\n    def __init__(self, items):\n        self.items = items\n    def calculate_total(self):\n        return sum(self.items)\n    def send_confirmation_email(self):\n        print(\"Email sent\")", "raw_response": "**SRP**\n```python\nclass Order:\n    def __init__(self, items):\n        self.items = items\n\n    def calculate_total(self):\n        return sum(self.items)\n\nclass EmailService:\n    def send_confirmation_email(self):\n        print(\"Email sent\")\n```\nThe `Order` class was responsible for both calculating the total and sending confirmation emails, violating the Single Responsibility Principle (SRP). The refactoring separates the email functionality into its own `EmailService` class, allowing each class to have a single responsibility.", "violation": "SRP", "violation_list": ["SRP"], "explanation": "**SRP**", "solution_code": "class Order:\n    def __init__(self, items):\n        self.items = items\n\n    def calculate_total(self):\n        return sum(self.items)\n\nclass EmailService:\n    def send_confirmation_email(self):\n        print(\"Email sent\")", "duration_seconds": 2.5845839977264404}
{"id": 15, "strategy": "example", "violation_type": "srp", "model": "gpt-4o-mini", "language": "PYTHON", "input": "class Book:\n    def __init__(self, title, author):\n        self.title = title\n        self.author = author\n    def display(self):\n        print(f\"{self.title} by {self.author}\")\n    def to_json(self):\n        return {'title': self.title, 'author': self.author}", "prompt": "You are an expert in identifying and refactoring SOLID principle violations in PYTHON code. Your task is to analyze the code provided and respond in the exact format below, without any additional text or commentary.\n\nYou must provide the following three parts in your response:\n1. The violated SOLID principle (e.g., SRP, OCP, LSP, ISP, DIP). If no violation exists, respond with **NONE**.\n2. A complete refactored version of the code that removes the violation. YOU MUST RETURN ONLY THE CODE BLOCK.\n3. A brief explanation of the violation and the refactoring.\n\nUse these criteria to detect violations:\n- **SRP**: A class does too many unrelated tasks.\n- **OCP**: Multiple `if-else` or `switch` blocks for logic that should be handled by polymorphism.\n- **LSP**: Subclasses override behavior in a way that breaks the contract of the base class (e.g., throw exceptions).\n- **ISP**: Interfaces that are too large or force implementing unnecessary methods.\n- **DIP**: High-level classes directly depend on low-level classes instead of abstractions.\n\nIf more than one violation is present, report only the most prominent one.\n\n**IMPORTANT:** Follow this output format *exactly*. Do not include greetings, summaries, or comments before or after the output:\n\n**<VIOLATION TYPE>**\n```python\n<Refactored code>\n```\n<Explanation of the refactoring>\n\nExample output:\n**SRP**\n```java\npublic class ReportGenerator {\n    public String generateReport() {\n        return \"Report data\";\n    }\n}\n```\nThe class previously handled both data generation and file I/O. Now it only generates the report, following SRP.\n\nHere is the code:\nclass Book:\n    def __init__(self, title, author):\n        self.title = title\n        self.author = author\n    def display(self):\n        print(f\"{self.title} by {self.author}\")\n    def to_json(self):\n        return {'title': self.title, 'author': self.author}", "raw_response": "**SRP**\n```python\nclass Book:\n    def __init__(self, title, author):\n        self.title = title\n        self.author = author\n\n    def display(self):\n        print(f\"{self.title} by {self.author}\")\n\nclass BookSerializer:\n    @staticmethod\n    def to_json(book):\n        return {'title': book.title, 'author': book.author}\n```\nThe `Book` class was responsible for both displaying book information and serializing it to JSON. The refactoring separates these concerns by introducing a `BookSerializer` class, adhering to the Single Responsibility Principle (SRP).", "violation": "SRP", "violation_list": ["SRP"], "explanation": "**SRP**", "solution_code": "class Book:\n    def __init__(self, title, author):\n        self.title = title\n        self.author = author\n\n    def display(self):\n        print(f\"{self.title} by {self.author}\")\n\nclass BookSerializer:\n    @staticmethod\n    def to_json(book):\n        return {'title': book.title, 'author': book.author}", "duration_seconds": 4.868187427520752}
{"id": 16, "strategy": "example", "violation_type": "srp", "model": "gpt-4o-mini", "language": "PYTHON", "input": "class Invoice:\n    def __init__(self, amount):\n        self.amount = amount\n    def calculate_tax(self):\n        return self.amount * 0.2\n    def save_to_file(self):\n        with open('invoice.txt', 'w') as f:\n            f.write(str(self.amount))", "prompt": "You are an expert in identifying and refactoring SOLID principle violations in PYTHON code. Your task is to analyze the code provided and respond in the exact format below, without any additional text or commentary.\n\nYou must provide the following three parts in your response:\n1. The violated SOLID principle (e.g., SRP, OCP, LSP, ISP, DIP). If no violation exists, respond with **NONE**.\n2. A complete refactored version of the code that removes the violation. YOU MUST RETURN ONLY THE CODE BLOCK.\n3. A brief explanation of the violation and the refactoring.\n\nUse these criteria to detect violations:\n- **SRP**: A class does too many unrelated tasks.\n- **OCP**: Multiple `if-else` or `switch` blocks for logic that should be handled by polymorphism.\n- **LSP**: Subclasses override behavior in a way that breaks the contract of the base class (e.g., throw exceptions).\n- **ISP**: Interfaces that are too large or force implementing unnecessary methods.\n- **DIP**: High-level classes directly depend on low-level classes instead of abstractions.\n\nIf more than one violation is present, report only the most prominent one.\n\n**IMPORTANT:** Follow this output format *exactly*. Do not include greetings, summaries, or comments before or after the output:\n\n**<VIOLATION TYPE>**\n```python\n<Refactored code>\n```\n<Explanation of the refactoring>\n\nExample output:\n**SRP**\n```java\npublic class ReportGenerator {\n    public String generateReport() {\n        return \"Report data\";\n    }\n}\n```\nThe class previously handled both data generation and file I/O. Now it only generates the report, following SRP.\n\nHere is the code:\nclass Invoice:\n    def __init__(self, amount):\n        self.amount = amount\n    def calculate_tax(self):\n        return self.amount * 0.2\n    def save_to_file(self):\n        with open('invoice.txt', 'w') as f:\n            f.write(str(self.amount))", "raw_response": "**SRP**\n```python\nclass Invoice:\n    def __init__(self, amount):\n        self.amount = amount\n\n    def calculate_tax(self):\n        return self.amount * 0.2\n\nclass InvoiceSaver:\n    @staticmethod\n    def save_to_file(invoice, filename='invoice.txt'):\n        with open(filename, 'w') as f:\n            f.write(str(invoice.amount))\n```\nThe `Invoice` class was handling both tax calculation and file saving, violating the Single Responsibility Principle (SRP). The refactored code separates the concerns by introducing an `InvoiceSaver` class that is responsible solely for saving the invoice to a file.", "violation": "SRP", "violation_list": ["SRP"], "explanation": "**SRP**", "solution_code": "class Invoice:\n    def __init__(self, amount):\n        self.amount = amount\n\n    def calculate_tax(self):\n        return self.amount * 0.2\n\nclass InvoiceSaver:\n    @staticmethod\n    def save_to_file(invoice, filename='invoice.txt'):\n        with open(filename, 'w') as f:\n            f.write(str(invoice.amount))", "duration_seconds": 2.9058961868286133}
{"id": 17, "strategy": "example", "violation_type": "srp", "model": "gpt-4o-mini", "language": "PYTHON", "input": "class Product:\n    def __init__(self, name, price):\n        self.name = name\n        self.price = price\n    def apply_discount(self, percent):\n        self.price -= self.price * percent\n    def log_price_change(self):\n        print(f\"Price changed to {self.price}\")", "prompt": "You are an expert in identifying and refactoring SOLID principle violations in PYTHON code. Your task is to analyze the code provided and respond in the exact format below, without any additional text or commentary.\n\nYou must provide the following three parts in your response:\n1. The violated SOLID principle (e.g., SRP, OCP, LSP, ISP, DIP). If no violation exists, respond with **NONE**.\n2. A complete refactored version of the code that removes the violation. YOU MUST RETURN ONLY THE CODE BLOCK.\n3. A brief explanation of the violation and the refactoring.\n\nUse these criteria to detect violations:\n- **SRP**: A class does too many unrelated tasks.\n- **OCP**: Multiple `if-else` or `switch` blocks for logic that should be handled by polymorphism.\n- **LSP**: Subclasses override behavior in a way that breaks the contract of the base class (e.g., throw exceptions).\n- **ISP**: Interfaces that are too large or force implementing unnecessary methods.\n- **DIP**: High-level classes directly depend on low-level classes instead of abstractions.\n\nIf more than one violation is present, report only the most prominent one.\n\n**IMPORTANT:** Follow this output format *exactly*. Do not include greetings, summaries, or comments before or after the output:\n\n**<VIOLATION TYPE>**\n```python\n<Refactored code>\n```\n<Explanation of the refactoring>\n\nExample output:\n**SRP**\n```java\npublic class ReportGenerator {\n    public String generateReport() {\n        return \"Report data\";\n    }\n}\n```\nThe class previously handled both data generation and file I/O. Now it only generates the report, following SRP.\n\nHere is the code:\nclass Product:\n    def __init__(self, name, price):\n        self.name = name\n        self.price = price\n    def apply_discount(self, percent):\n        self.price -= self.price * percent\n    def log_price_change(self):\n        print(f\"Price changed to {self.price}\")", "raw_response": "**SRP**\n```python\nclass Product:\n    def __init__(self, name, price):\n        self.name = name\n        self.price = price\n\n    def apply_discount(self, percent):\n        self.price -= self.price * percent\n\nclass PriceLogger:\n    @staticmethod\n    def log_price_change(product):\n        print(f\"Price changed to {product.price}\")\n```\nThe `Product` class was handling both product data and logging price changes, violating the Single Responsibility Principle (SRP). The refactoring separates the logging functionality into a new `PriceLogger` class, allowing `Product` to focus solely on product-related tasks.", "violation": "SRP", "violation_list": ["SRP"], "explanation": "**SRP**", "solution_code": "class Product:\n    def __init__(self, name, price):\n        self.name = name\n        self.price = price\n\n    def apply_discount(self, percent):\n        self.price -= self.price * percent\n\nclass PriceLogger:\n    @staticmethod\n    def log_price_change(product):\n        print(f\"Price changed to {product.price}\")", "duration_seconds": 3.453765869140625}
{"id": 18, "strategy": "example", "violation_type": "srp", "model": "gpt-4o-mini", "language": "PYTHON", "input": "class Customer:\n    def __init__(self, name):\n        self.name = name\n    def get_discount(self):\n        return 0.1\n    def send_greeting(self):\n        print(f\"Hello, {self.name}\")", "prompt": "You are an expert in identifying and refactoring SOLID principle violations in PYTHON code. Your task is to analyze the code provided and respond in the exact format below, without any additional text or commentary.\n\nYou must provide the following three parts in your response:\n1. The violated SOLID principle (e.g., SRP, OCP, LSP, ISP, DIP). If no violation exists, respond with **NONE**.\n2. A complete refactored version of the code that removes the violation. YOU MUST RETURN ONLY THE CODE BLOCK.\n3. A brief explanation of the violation and the refactoring.\n\nUse these criteria to detect violations:\n- **SRP**: A class does too many unrelated tasks.\n- **OCP**: Multiple `if-else` or `switch` blocks for logic that should be handled by polymorphism.\n- **LSP**: Subclasses override behavior in a way that breaks the contract of the base class (e.g., throw exceptions).\n- **ISP**: Interfaces that are too large or force implementing unnecessary methods.\n- **DIP**: High-level classes directly depend on low-level classes instead of abstractions.\n\nIf more than one violation is present, report only the most prominent one.\n\n**IMPORTANT:** Follow this output format *exactly*. Do not include greetings, summaries, or comments before or after the output:\n\n**<VIOLATION TYPE>**\n```python\n<Refactored code>\n```\n<Explanation of the refactoring>\n\nExample output:\n**SRP**\n```java\npublic class ReportGenerator {\n    public String generateReport() {\n        return \"Report data\";\n    }\n}\n```\nThe class previously handled both data generation and file I/O. Now it only generates the report, following SRP.\n\nHere is the code:\nclass Customer:\n    def __init__(self, name):\n        self.name = name\n    def get_discount(self):\n        return 0.1\n    def send_greeting(self):\n        print(f\"Hello, {self.name}\")", "raw_response": "**SRP**\n```python\nclass Customer:\n    def __init__(self, name):\n        self.name = name\n\n    def get_discount(self):\n        return 0.1\n\nclass GreetingService:\n    @staticmethod\n    def send_greeting(customer):\n        print(f\"Hello, {customer.name}\")\n```\nThe `Customer` class was handling both discount logic and greeting functionality, violating the Single Responsibility Principle (SRP). The refactored code separates the greeting functionality into a new `GreetingService` class, allowing each class to have a single responsibility.", "violation": "SRP", "violation_list": ["SRP"], "explanation": "**SRP**", "solution_code": "class Customer:\n    def __init__(self, name):\n        self.name = name\n\n    def get_discount(self):\n        return 0.1\n\nclass GreetingService:\n    @staticmethod\n    def send_greeting(customer):\n        print(f\"Hello, {customer.name}\")", "duration_seconds": 3.980175495147705}
{"id": 19, "strategy": "example", "violation_type": "srp", "model": "gpt-4o-mini", "language": "PYTHON", "input": "class FileManager:\n    def __init__(self, filename):\n        self.filename = filename\n    def read(self):\n        with open(self.filename) as f:\n            return f.read()\n    def encrypt(self, data):\n        return data[::-1]", "prompt": "You are an expert in identifying and refactoring SOLID principle violations in PYTHON code. Your task is to analyze the code provided and respond in the exact format below, without any additional text or commentary.\n\nYou must provide the following three parts in your response:\n1. The violated SOLID principle (e.g., SRP, OCP, LSP, ISP, DIP). If no violation exists, respond with **NONE**.\n2. A complete refactored version of the code that removes the violation. YOU MUST RETURN ONLY THE CODE BLOCK.\n3. A brief explanation of the violation and the refactoring.\n\nUse these criteria to detect violations:\n- **SRP**: A class does too many unrelated tasks.\n- **OCP**: Multiple `if-else` or `switch` blocks for logic that should be handled by polymorphism.\n- **LSP**: Subclasses override behavior in a way that breaks the contract of the base class (e.g., throw exceptions).\n- **ISP**: Interfaces that are too large or force implementing unnecessary methods.\n- **DIP**: High-level classes directly depend on low-level classes instead of abstractions.\n\nIf more than one violation is present, report only the most prominent one.\n\n**IMPORTANT:** Follow this output format *exactly*. Do not include greetings, summaries, or comments before or after the output:\n\n**<VIOLATION TYPE>**\n```python\n<Refactored code>\n```\n<Explanation of the refactoring>\n\nExample output:\n**SRP**\n```java\npublic class ReportGenerator {\n    public String generateReport() {\n        return \"Report data\";\n    }\n}\n```\nThe class previously handled both data generation and file I/O. Now it only generates the report, following SRP.\n\nHere is the code:\nclass FileManager:\n    def __init__(self, filename):\n        self.filename = filename\n    def read(self):\n        with open(self.filename) as f:\n            return f.read()\n    def encrypt(self, data):\n        return data[::-1]", "raw_response": "**SRP**\n```python\nclass FileManager:\n    def __init__(self, filename):\n        self.filename = filename\n\n    def read(self):\n        with open(self.filename) as f:\n            return f.read()\n\nclass Encryptor:\n    @staticmethod\n    def encrypt(data):\n        return data[::-1]\n```\nThe `FileManager` class was handling both file reading and data encryption, which are unrelated tasks. The refactoring separates these responsibilities into two classes, adhering to the Single Responsibility Principle (SRP).", "violation": "SRP", "violation_list": ["SRP"], "explanation": "**SRP**", "solution_code": "class FileManager:\n    def __init__(self, filename):\n        self.filename = filename\n\n    def read(self):\n        with open(self.filename) as f:\n            return f.read()\n\nclass Encryptor:\n    @staticmethod\n    def encrypt(data):\n        return data[::-1]", "duration_seconds": 4.002726793289185}
{"id": 20, "strategy": "example", "violation_type": "srp", "model": "gpt-4o-mini", "language": "PYTHON", "input": "import sqlite3\nimport hashlib\nimport json\nfrom datetime import datetime\n\nclass AccountManager:\n    def __init__(self, db_path, audit_log_path):\n        self.db_path = db_path\n        self.audit_log_path = audit_log_path\n        self._create_db_if_not_exists()\n\n    def _create_db_if_not_exists(self):\n        conn = None\n        try:\n            conn = sqlite3.connect(self.db_path)\n            cursor = conn.cursor()\n            cursor.execute(\"\"\"CREATE TABLE IF NOT EXISTS users (\n                id INTEGER PRIMARY KEY AUTOINCREMENT,\n                username TEXT UNIQUE NOT NULL,\n                password_hash TEXT NOT NULL,\n                role TEXT NOT NULL DEFAULT 'user',\n                permissions TEXT\n            )\"\"\")\n            conn.commit()\n        except sqlite3.Error as e:\n            print(f\"[AccountManager] Database error during creation: {e}\")\n        finally:\n            if conn:\n                conn.close()\n\n    def create_user_account(self, username, password, role='user', permissions=None):\n        print(f\"[AccountManager] Attempting to create account for {username}\")\n\n        if self._user_exists(username):\n            print(f\"[AccountManager] User {username} already exists.\")\n            self._log_audit('CreateAccount', username, 'User Exists', False)\n            return False\n        print(\"[AccountManager] User does not exist.\")\n\n        password_hash = self._hash_password(password)\n        print(\"[AccountManager] Password hashed.\")\n\n        if not self._save_user_to_database(username, password_hash, role, permissions):\n            print(f\"[AccountManager] Failed to save user {username} to database.\")\n            self._log_audit('CreateAccount', username, 'DB Save Failed', False)\n            return False\n        print(f\"[AccountManager] User {username} saved to database.\")\n\n        self._log_audit('CreateAccount', username, 'Success', True)\n        print(f\"[AccountManager] Account created for {username} with role {role}.\")\n        return True\n\n    def assign_role_to_user(self, username, new_role):\n        print(f\"[AccountManager] Attempting to assign role {new_role} to {username}\")\n\n        if not self._user_exists(username):\n            print(f\"[AccountManager] User {username} not found for role assignment.\")\n            self._log_audit('AssignRole', username, 'User Not Found', False)\n            return False\n        print(\"[AccountManager] User found.\")\n\n        if not self._update_user_role_in_database(username, new_role):\n            print(f\"[AccountManager] Failed to update role for {username} in database.\")\n            self._log_audit('AssignRole', username, 'DB Update Failed', False)\n            return False\n        print(f\"[AccountManager] Role updated for {username} to {new_role}.\")\n\n        self._log_audit('AssignRole', username, f'Role changed to {new_role}', True)\n        print(f\"[AccountManager] Role {new_role} assigned to {username}.\")\n        return True\n\n    def _user_exists(self, username):\n        print(f\"[_user_exists] Checking existence of {username} in DB {self.db_path}...\")\n        conn = None\n        try:\n            conn = sqlite3.connect(self.db_path)\n            cursor = conn.cursor()\n            cursor.execute(\"SELECT 1 FROM users WHERE username = ?\", (username,))\n            return cursor.fetchone() is not None\n        except sqlite3.Error as e:\n            print(f\"[_user_exists] Database error: {e}\")\n            return False\n        finally:\n            if conn:\n                conn.close()\n\n    def _hash_password(self, password):\n         print(\"[_hash_password] Hashing password...\")\n         # Using a simple hash for demonstration; not secure for production\n         return hashlib.sha256(password.encode()).hexdigest()\n\n    def _save_user_to_database(self, username, password_hash, role, permissions):\n        print(f\"[_save_user_to_database] Saving user {username} to DB {self.db_path}...\")\n        conn = None\n        try:\n            conn = sqlite3.connect(self.db_path)\n            cursor = conn.cursor()\n            permissions_json = json.dumps(permissions) if permissions is not None else None\n            cursor.execute(\"INSERT INTO users (username, password_hash, role, permissions) VALUES (?, ?, ?, ?)\",\n                           (username, password_hash, role, permissions_json))\n            conn.commit()\n            return True\n        except sqlite3.IntegrityError:\n            print(f\"[_save_user_to_database] User {username} already exists (Integrity Error).\")\n            return False\n        except sqlite3.Error as e:\n            print(f\"[_save_user_to_database] Database error: {e}\")\n            return False\n        finally:\n            if conn:\n                conn.close()\n\n    def _update_user_role_in_database(self, username, role):\n        print(f\"[_update_user_role_in_database] Updating role for {username} in DB {self.db_path}...\")\n        conn = None\n        try:\n            conn = sqlite3.connect(self.db_path)\n            cursor = conn.cursor()\n            cursor.execute(\"UPDATE users SET role = ? WHERE username = ?\", (role, username))\n            conn.commit()\n            return cursor.rowcount > 0\n        except sqlite3.Error as e:\n            print(f\"[_update_user_role_in_database] Database error: {e}\")\n            return False\n        finally:\n            if conn:\n                conn.close()\n\n    def _log_audit(self, action, user, details, success):\n        print(f\"[_log_audit] AUDIT: Action='{action}', User='{user}', Details='{details}', Success={success}\")\n        try:\n            timestamp = datetime.now().isoformat()\n            log_entry = f\"{timestamp}|{action}|{user}|{details}|{success}\\n\"\n            with open(self.audit_log_path, 'a') as f:\n                f.write(log_entry)\n        except IOError as e:\n            print(f\"[_log_audit] Error writing to audit log: {e}\")\n\n# Example usage:\n# import os\n# db_file = 'user_accounts.db'\n# log_file = 'audit.log'\n# if os.path.exists(db_file): os.remove(db_file)\n# if os.path.exists(log_file): os.remove(log_file)\n# manager = AccountManager(db_file, log_file)\n# manager.create_user_account('testuser', 'password123', 'admin', {'can_delete': True})\n# manager.create_user_account('testuser', 'password123') # Should fail\n# manager.assign_role_to_user('testuser', 'editor')\n# manager.assign_role_to_user('nonexistent', 'guest') # Should fail\n", "prompt": "You are an expert in identifying and refactoring SOLID principle violations in PYTHON code. Your task is to analyze the code provided and respond in the exact format below, without any additional text or commentary.\n\nYou must provide the following three parts in your response:\n1. The violated SOLID principle (e.g., SRP, OCP, LSP, ISP, DIP). If no violation exists, respond with **NONE**.\n2. A complete refactored version of the code that removes the violation. YOU MUST RETURN ONLY THE CODE BLOCK.\n3. A brief explanation of the violation and the refactoring.\n\nUse these criteria to detect violations:\n- **SRP**: A class does too many unrelated tasks.\n- **OCP**: Multiple `if-else` or `switch` blocks for logic that should be handled by polymorphism.\n- **LSP**: Subclasses override behavior in a way that breaks the contract of the base class (e.g., throw exceptions).\n- **ISP**: Interfaces that are too large or force implementing unnecessary methods.\n- **DIP**: High-level classes directly depend on low-level classes instead of abstractions.\n\nIf more than one violation is present, report only the most prominent one.\n\n**IMPORTANT:** Follow this output format *exactly*. Do not include greetings, summaries, or comments before or after the output:\n\n**<VIOLATION TYPE>**\n```python\n<Refactored code>\n```\n<Explanation of the refactoring>\n\nExample output:\n**SRP**\n```java\npublic class ReportGenerator {\n    public String generateReport() {\n        return \"Report data\";\n    }\n}\n```\nThe class previously handled both data generation and file I/O. Now it only generates the report, following SRP.\n\nHere is the code:\nimport sqlite3\nimport hashlib\nimport json\nfrom datetime import datetime\n\nclass AccountManager:\n    def __init__(self, db_path, audit_log_path):\n        self.db_path = db_path\n        self.audit_log_path = audit_log_path\n        self._create_db_if_not_exists()\n\n    def _create_db_if_not_exists(self):\n        conn = None\n        try:\n            conn = sqlite3.connect(self.db_path)\n            cursor = conn.cursor()\n            cursor.execute(\"\"\"CREATE TABLE IF NOT EXISTS users (\n                id INTEGER PRIMARY KEY AUTOINCREMENT,\n                username TEXT UNIQUE NOT NULL,\n                password_hash TEXT NOT NULL,\n                role TEXT NOT NULL DEFAULT 'user',\n                permissions TEXT\n            )\"\"\")\n            conn.commit()\n        except sqlite3.Error as e:\n            print(f\"[AccountManager] Database error during creation: {e}\")\n        finally:\n            if conn:\n                conn.close()\n\n    def create_user_account(self, username, password, role='user', permissions=None):\n        print(f\"[AccountManager] Attempting to create account for {username}\")\n\n        if self._user_exists(username):\n            print(f\"[AccountManager] User {username} already exists.\")\n            self._log_audit('CreateAccount', username, 'User Exists', False)\n            return False\n        print(\"[AccountManager] User does not exist.\")\n\n        password_hash = self._hash_password(password)\n        print(\"[AccountManager] Password hashed.\")\n\n        if not self._save_user_to_database(username, password_hash, role, permissions):\n            print(f\"[AccountManager] Failed to save user {username} to database.\")\n            self._log_audit('CreateAccount', username, 'DB Save Failed', False)\n            return False\n        print(f\"[AccountManager] User {username} saved to database.\")\n\n        self._log_audit('CreateAccount', username, 'Success', True)\n        print(f\"[AccountManager] Account created for {username} with role {role}.\")\n        return True\n\n    def assign_role_to_user(self, username, new_role):\n        print(f\"[AccountManager] Attempting to assign role {new_role} to {username}\")\n\n        if not self._user_exists(username):\n            print(f\"[AccountManager] User {username} not found for role assignment.\")\n            self._log_audit('AssignRole', username, 'User Not Found', False)\n            return False\n        print(\"[AccountManager] User found.\")\n\n        if not self._update_user_role_in_database(username, new_role):\n            print(f\"[AccountManager] Failed to update role for {username} in database.\")\n            self._log_audit('AssignRole', username, 'DB Update Failed', False)\n            return False\n        print(f\"[AccountManager] Role updated for {username} to {new_role}.\")\n\n        self._log_audit('AssignRole', username, f'Role changed to {new_role}', True)\n        print(f\"[AccountManager] Role {new_role} assigned to {username}.\")\n        return True\n\n    def _user_exists(self, username):\n        print(f\"[_user_exists] Checking existence of {username} in DB {self.db_path}...\")\n        conn = None\n        try:\n            conn = sqlite3.connect(self.db_path)\n            cursor = conn.cursor()\n            cursor.execute(\"SELECT 1 FROM users WHERE username = ?\", (username,))\n            return cursor.fetchone() is not None\n        except sqlite3.Error as e:\n            print(f\"[_user_exists] Database error: {e}\")\n            return False\n        finally:\n            if conn:\n                conn.close()\n\n    def _hash_password(self, password):\n         print(\"[_hash_password] Hashing password...\")\n         # Using a simple hash for demonstration; not secure for production\n         return hashlib.sha256(password.encode()).hexdigest()\n\n    def _save_user_to_database(self, username, password_hash, role, permissions):\n        print(f\"[_save_user_to_database] Saving user {username} to DB {self.db_path}...\")\n        conn = None\n        try:\n            conn = sqlite3.connect(self.db_path)\n            cursor = conn.cursor()\n            permissions_json = json.dumps(permissions) if permissions is not None else None\n            cursor.execute(\"INSERT INTO users (username, password_hash, role, permissions) VALUES (?, ?, ?, ?)\",\n                           (username, password_hash, role, permissions_json))\n            conn.commit()\n            return True\n        except sqlite3.IntegrityError:\n            print(f\"[_save_user_to_database] User {username} already exists (Integrity Error).\")\n            return False\n        except sqlite3.Error as e:\n            print(f\"[_save_user_to_database] Database error: {e}\")\n            return False\n        finally:\n            if conn:\n                conn.close()\n\n    def _update_user_role_in_database(self, username, role):\n        print(f\"[_update_user_role_in_database] Updating role for {username} in DB {self.db_path}...\")\n        conn = None\n        try:\n            conn = sqlite3.connect(self.db_path)\n            cursor = conn.cursor()\n            cursor.execute(\"UPDATE users SET role = ? WHERE username = ?\", (role, username))\n            conn.commit()\n            return cursor.rowcount > 0\n        except sqlite3.Error as e:\n            print(f\"[_update_user_role_in_database] Database error: {e}\")\n            return False\n        finally:\n            if conn:\n                conn.close()\n\n    def _log_audit(self, action, user, details, success):\n        print(f\"[_log_audit] AUDIT: Action='{action}', User='{user}', Details='{details}', Success={success}\")\n        try:\n            timestamp = datetime.now().isoformat()\n            log_entry = f\"{timestamp}|{action}|{user}|{details}|{success}\\n\"\n            with open(self.audit_log_path, 'a') as f:\n                f.write(log_entry)\n        except IOError as e:\n            print(f\"[_log_audit] Error writing to audit log: {e}\")\n\n# Example usage:\n# import os\n# db_file = 'user_accounts.db'\n# log_file = 'audit.log'\n# if os.path.exists(db_file): os.remove(db_file)\n# if os.path.exists(log_file): os.remove(log_file)\n# manager = AccountManager(db_file, log_file)\n# manager.create_user_account('testuser', 'password123', 'admin', {'can_delete': True})\n# manager.create_user_account('testuser', 'password123') # Should fail\n# manager.assign_role_to_user('testuser', 'editor')\n# manager.assign_role_to_user('nonexistent', 'guest') # Should fail\n", "raw_response": "**SRP**\n```python\nimport sqlite3\nimport hashlib\nimport json\nfrom datetime import datetime\n\nclass UserDatabase:\n    def __init__(self, db_path):\n        self.db_path = db_path\n        self._create_db_if_not_exists()\n\n    def _create_db_if_not_exists(self):\n        conn = None\n        try:\n            conn = sqlite3.connect(self.db_path)\n            cursor = conn.cursor()\n            cursor.execute(\"\"\"CREATE TABLE IF NOT EXISTS users (\n                id INTEGER PRIMARY KEY AUTOINCREMENT,\n                username TEXT UNIQUE NOT NULL,\n                password_hash TEXT NOT NULL,\n                role TEXT NOT NULL DEFAULT 'user',\n                permissions TEXT\n            )\"\"\")\n            conn.commit()\n        except sqlite3.Error as e:\n            print(f\"[UserDatabase] Database error during creation: {e}\")\n        finally:\n            if conn:\n                conn.close()\n\n    def user_exists(self, username):\n        conn = None\n        try:\n            conn = sqlite3.connect(self.db_path)\n            cursor = conn.cursor()\n            cursor.execute(\"SELECT 1 FROM users WHERE username = ?\", (username,))\n            return cursor.fetchone() is not None\n        except sqlite3.Error as e:\n            print(f\"[UserDatabase] Database error: {e}\")\n            return False\n        finally:\n            if conn:\n                conn.close()\n\n    def save_user(self, username, password_hash, role, permissions):\n        conn = None\n        try:\n            conn = sqlite3.connect(self.db_path)\n            cursor = conn.cursor()\n            permissions_json = json.dumps(permissions) if permissions is not None else None\n            cursor.execute(\"INSERT INTO users (username, password_hash, role, permissions) VALUES (?, ?, ?, ?)\",\n                           (username, password_hash, role, permissions_json))\n            conn.commit()\n            return True\n        except sqlite3.IntegrityError:\n            print(f\"[UserDatabase] User {username} already exists (Integrity Error).\")\n            return False\n        except sqlite3.Error as e:\n            print(f\"[UserDatabase] Database error: {e}\")\n            return False\n        finally:\n            if conn:\n                conn.close()\n\n    def update_user_role(self, username, role):\n        conn = None\n        try:\n            conn = sqlite3.connect(self.db_path)\n            cursor = conn.cursor()\n            cursor.execute(\"UPDATE users SET role = ? WHERE username = ?\", (role, username))\n            conn.commit()\n            return cursor.rowcount > 0\n        except sqlite3.Error as e:\n            print(f\"[UserDatabase] Database error: {e}\")\n            return False\n        finally:\n            if conn:\n                conn.close()\n\nclass AccountManager:\n    def __init__(self, db_path, audit_log_path):\n        self.user_db = UserDatabase(db_path)\n        self.audit_log_path = audit_log_path\n\n    def create_user_account(self, username, password, role='user', permissions=None):\n        print(f\"[AccountManager] Attempting to create account for {username}\")\n\n        if self.user_db.user_exists(username):\n            print(f\"[AccountManager] User {username} already exists.\")\n            self._log_audit('CreateAccount', username, 'User Exists', False)\n            return False\n        print(\"[AccountManager] User does not exist.\")\n\n        password_hash = self._hash_password(password)\n        print(\"[AccountManager] Password hashed.\")\n\n        if not self.user_db.save_user(username, password_hash, role, permissions):\n            print(f\"[AccountManager] Failed to save user {username} to database.\")\n            self._log_audit('CreateAccount', username, 'DB Save Failed', False)\n            return False\n        print(f\"[AccountManager] User {username} saved to database.\")\n\n        self._log_audit('CreateAccount', username, 'Success', True)\n        print(f\"[AccountManager] Account created for {username} with role {role}.\")\n        return True\n\n    def assign_role_to_user(self, username, new_role):\n        print(f\"[AccountManager] Attempting to assign role {new_role} to {username}\")\n\n        if not self.user_db.user_exists(username):\n            print(f\"[AccountManager] User {username} not found for role assignment.\")\n            self._log_audit('AssignRole', username, 'User Not Found', False)\n            return False\n        print(\"[AccountManager] User found.\")\n\n        if not self.user_db.update_user_role(username, new_role):\n            print(f\"[AccountManager] Failed to update role for {username} in database.\")\n            self._log_audit('AssignRole', username, 'DB Update Failed', False)\n            return False\n        print(f\"[AccountManager] Role updated for {username} to {new_role}.\")\n\n        self._log_audit('AssignRole', username, f'Role changed to {new_role}', True)\n        print(f\"[AccountManager] Role {new_role} assigned to {username}.\")\n        return True\n\n    def _hash_password(self, password):\n         print(\"[_hash_password] Hashing password...\")\n         return hashlib.sha256(password.encode()).hexdigest()\n\n    def _log_audit(self, action, user, details, success):\n        print(f\"[_log_audit] AUDIT: Action='{action}', User='{user}', Details='{details}', Success={success}\")\n        try:\n            timestamp = datetime.now().isoformat()\n            log_entry = f\"{timestamp}|{action}|{user}|{details}|{success}\\n\"\n            with open(self.audit_log_path, 'a') as f:\n                f.write(log_entry)\n        except IOError as e:\n            print(f\"[_log_audit] Error writing to audit log: {e}\")\n```\nThe `AccountManager` class previously handled both account management and database operations, violating the Single Responsibility Principle (SRP). The refactoring separates the database operations into a new `UserDatabase` class, allowing `AccountManager` to focus solely on account management tasks.", "violation": "SRP", "violation_list": ["SRP"], "explanation": "**SRP**", "solution_code": "import sqlite3\nimport hashlib\nimport json\nfrom datetime import datetime\n\nclass UserDatabase:\n    def __init__(self, db_path):\n        self.db_path = db_path\n        self._create_db_if_not_exists()\n\n    def _create_db_if_not_exists(self):\n        conn = None\n        try:\n            conn = sqlite3.connect(self.db_path)\n            cursor = conn.cursor()\n            cursor.execute(\"\"\"CREATE TABLE IF NOT EXISTS users (\n                id INTEGER PRIMARY KEY AUTOINCREMENT,\n                username TEXT UNIQUE NOT NULL,\n                password_hash TEXT NOT NULL,\n                role TEXT NOT NULL DEFAULT 'user',\n                permissions TEXT\n            )\"\"\")\n            conn.commit()\n        except sqlite3.Error as e:\n            print(f\"[UserDatabase] Database error during creation: {e}\")\n        finally:\n            if conn:\n                conn.close()\n\n    def user_exists(self, username):\n        conn = None\n        try:\n            conn = sqlite3.connect(self.db_path)\n            cursor = conn.cursor()\n            cursor.execute(\"SELECT 1 FROM users WHERE username = ?\", (username,))\n            return cursor.fetchone() is not None\n        except sqlite3.Error as e:\n            print(f\"[UserDatabase] Database error: {e}\")\n            return False\n        finally:\n            if conn:\n                conn.close()\n\n    def save_user(self, username, password_hash, role, permissions):\n        conn = None\n        try:\n            conn = sqlite3.connect(self.db_path)\n            cursor = conn.cursor()\n            permissions_json = json.dumps(permissions) if permissions is not None else None\n            cursor.execute(\"INSERT INTO users (username, password_hash, role, permissions) VALUES (?, ?, ?, ?)\",\n                           (username, password_hash, role, permissions_json))\n            conn.commit()\n            return True\n        except sqlite3.IntegrityError:\n            print(f\"[UserDatabase] User {username} already exists (Integrity Error).\")\n            return False\n        except sqlite3.Error as e:\n            print(f\"[UserDatabase] Database error: {e}\")\n            return False\n        finally:\n            if conn:\n                conn.close()\n\n    def update_user_role(self, username, role):\n        conn = None\n        try:\n            conn = sqlite3.connect(self.db_path)\n            cursor = conn.cursor()\n            cursor.execute(\"UPDATE users SET role = ? WHERE username = ?\", (role, username))\n            conn.commit()\n            return cursor.rowcount > 0\n        except sqlite3.Error as e:\n            print(f\"[UserDatabase] Database error: {e}\")\n            return False\n        finally:\n            if conn:\n                conn.close()\n\nclass AccountManager:\n    def __init__(self, db_path, audit_log_path):\n        self.user_db = UserDatabase(db_path)\n        self.audit_log_path = audit_log_path\n\n    def create_user_account(self, username, password, role='user', permissions=None):\n        print(f\"[AccountManager] Attempting to create account for {username}\")\n\n        if self.user_db.user_exists(username):\n            print(f\"[AccountManager] User {username} already exists.\")\n            self._log_audit('CreateAccount', username, 'User Exists', False)\n            return False\n        print(\"[AccountManager] User does not exist.\")\n\n        password_hash = self._hash_password(password)\n        print(\"[AccountManager] Password hashed.\")\n\n        if not self.user_db.save_user(username, password_hash, role, permissions):\n            print(f\"[AccountManager] Failed to save user {username} to database.\")\n            self._log_audit('CreateAccount', username, 'DB Save Failed', False)\n            return False\n        print(f\"[AccountManager] User {username} saved to database.\")\n\n        self._log_audit('CreateAccount', username, 'Success', True)\n        print(f\"[AccountManager] Account created for {username} with role {role}.\")\n        return True\n\n    def assign_role_to_user(self, username, new_role):\n        print(f\"[AccountManager] Attempting to assign role {new_role} to {username}\")\n\n        if not self.user_db.user_exists(username):\n            print(f\"[AccountManager] User {username} not found for role assignment.\")\n            self._log_audit('AssignRole', username, 'User Not Found', False)\n            return False\n        print(\"[AccountManager] User found.\")\n\n        if not self.user_db.update_user_role(username, new_role):\n            print(f\"[AccountManager] Failed to update role for {username} in database.\")\n            self._log_audit('AssignRole', username, 'DB Update Failed', False)\n            return False\n        print(f\"[AccountManager] Role updated for {username} to {new_role}.\")\n\n        self._log_audit('AssignRole', username, f'Role changed to {new_role}', True)\n        print(f\"[AccountManager] Role {new_role} assigned to {username}.\")\n        return True\n\n    def _hash_password(self, password):\n         print(\"[_hash_password] Hashing password...\")\n         return hashlib.sha256(password.encode()).hexdigest()\n\n    def _log_audit(self, action, user, details, success):\n        print(f\"[_log_audit] AUDIT: Action='{action}', User='{user}', Details='{details}', Success={success}\")\n        try:\n            timestamp = datetime.now().isoformat()\n            log_entry = f\"{timestamp}|{action}|{user}|{details}|{success}\\n\"\n            with open(self.audit_log_path, 'a') as f:\n                f.write(log_entry)\n        except IOError as e:\n            print(f\"[_log_audit] Error writing to audit log: {e}\")", "duration_seconds": 24.031310319900513}
{"id": 21, "strategy": "example", "violation_type": "srp", "model": "gpt-4o-mini", "language": "PYTHON", "input": "import csv\nimport json\nfrom datetime import datetime\nimport os\n\nclass ReportGenerator:\n    def __init__(self, input_filepath, output_filepath_template, upload_service_url):\n        self.input_filepath = input_filepath\n        self.output_filepath_template = output_filepath_template\n        self.upload_service_url = upload_service_url\n\n    def generate_and_export_report(self, report_type):\n        print(f\"[ReportGenerator] Starting report generation for type: {report_type}\")\n\n        raw_data = self._read_data(self.input_filepath)\n        if not raw_data:\n            print(\"[ReportGenerator] No raw data read.\")\n            return False\n        print(f\"[ReportGenerator] Read {len(raw_data)} rows of raw data.\")\n\n        processed_data = self._process_data(raw_data, report_type)\n        if not processed_data:\n             print(\"[ReportGenerator] No data after processing.\")\n             return False\n        print(f\"[ReportGenerator] Processed data has {len(processed_data)} items.\")\n\n        output_filepath = self.output_filepath_template.format(timestamp=datetime.now().strftime('%Y%m%d%H%M%S'), report_type=report_type.lower())\n        if not self._export_data(processed_data, output_filepath, report_type):\n            print(f\"[ReportGenerator] Failed to export report to {output_filepath}.\")\n            return False\n        print(f\"[ReportGenerator] Report exported to {output_filepath}.\")\n\n        if not self._upload_report(output_filepath):\n            print(f\"[ReportGenerator] Failed to upload report from {output_filepath}.\")\n\n            return False\n        print(f\"[ReportGenerator] Report {output_filepath} uploaded successfully.\")\n\n        print(f\"[ReportGenerator] Report generation and export complete for type: {report_type}.\")\n        return True\n\n    def _read_data(self, filepath):\n        print(f\"[_read_data] Reading data from {filepath}...\")\n        try:\n\n            return [{\"id\": 1, \"value\": 100, \"category\": \"A\"}, {\"id\": 2, \"value\": 200, \"category\": \"B\"}, {\"id\": 3, \"value\": 150, \"category\": \"A\"}]\n        except IOError as e:\n            print(f\"[_read_data] Error reading file: {e}\")\n            return None\n\n    def _process_data(self, raw_data, report_type):\n        print(f\"[_process_data] Processing data for report type: {report_type}...\")\n        if report_type == 'SUMMARY':\n            total_value = sum(item['value'] for item in raw_data)\n            return [{\"summary_type\": \"Total Value\", \"value\": total_value}]\n        elif report_type == 'CATEGORY_SUMMARY':\n            category_totals = {}\n            for item in raw_data:\n                category = item.get('category', 'Unknown')\n                category_totals[category] = category_totals.get(category, 0) + item['value']\n            return [{\"category\": cat, \"total_value\": total} for cat, total in category_totals.items()]\n        else:\n            print(f\"[_process_data] Unknown report type: {report_type}\")\n            return None\n\n    def _export_data(self, processed_data, filepath, report_type):\n        print(f\"[_export_data] Exporting data to {filepath} for type: {report_type}...\")\n        try:\n            with open(filepath, 'w', newline='') as csvfile:\n                if not processed_data:\n                    return True\n                writer = csv.DictWriter(csvfile, fieldnames=processed_data[0].keys())\n                writer.writeheader()\n                writer.writerows(processed_data)\n            return True\n        except IOError as e:\n            print(f\"[_export_data] Error writing to file: {e}\")\n            return False\n\n    def _upload_report(self, filepath):\n        print(f\"[_upload_report] Uploading report from {filepath} to {self.upload_service_url}...\")\n\n        return True\n\n# Example Usage:\n# input_file = 'data.json'\n# output_template = 'reports/{report_type}_{timestamp}.csv'\n# upload_url = 'http://upload.service/api/reports'\n# # Create a dummy input file\n# with open(input_file, 'w') as f:\n#     json.dump([{\"id\": 1, \"value\": 100, \"category\": \"A\"}, {\"id\": 2, \"value\": 200, \"category\": \"B\"}, {\"id\": 3, \"value\": 150, \"category\": \"A\"}], f)\n# if not os.path.exists('reports'):\n#     os.makedirs('reports')\n# generator = ReportGenerator(input_file, output_template, upload_url)\n# generator.generate_and_export_report('SUMMARY')\n# generator.generate_and_export_report('CATEGORY_SUMMARY')\n# generator.generate_and_export_report('UNKNOWN_TYPE') # Should fail\n", "prompt": "You are an expert in identifying and refactoring SOLID principle violations in PYTHON code. Your task is to analyze the code provided and respond in the exact format below, without any additional text or commentary.\n\nYou must provide the following three parts in your response:\n1. The violated SOLID principle (e.g., SRP, OCP, LSP, ISP, DIP). If no violation exists, respond with **NONE**.\n2. A complete refactored version of the code that removes the violation. YOU MUST RETURN ONLY THE CODE BLOCK.\n3. A brief explanation of the violation and the refactoring.\n\nUse these criteria to detect violations:\n- **SRP**: A class does too many unrelated tasks.\n- **OCP**: Multiple `if-else` or `switch` blocks for logic that should be handled by polymorphism.\n- **LSP**: Subclasses override behavior in a way that breaks the contract of the base class (e.g., throw exceptions).\n- **ISP**: Interfaces that are too large or force implementing unnecessary methods.\n- **DIP**: High-level classes directly depend on low-level classes instead of abstractions.\n\nIf more than one violation is present, report only the most prominent one.\n\n**IMPORTANT:** Follow this output format *exactly*. Do not include greetings, summaries, or comments before or after the output:\n\n**<VIOLATION TYPE>**\n```python\n<Refactored code>\n```\n<Explanation of the refactoring>\n\nExample output:\n**SRP**\n```java\npublic class ReportGenerator {\n    public String generateReport() {\n        return \"Report data\";\n    }\n}\n```\nThe class previously handled both data generation and file I/O. Now it only generates the report, following SRP.\n\nHere is the code:\nimport csv\nimport json\nfrom datetime import datetime\nimport os\n\nclass ReportGenerator:\n    def __init__(self, input_filepath, output_filepath_template, upload_service_url):\n        self.input_filepath = input_filepath\n        self.output_filepath_template = output_filepath_template\n        self.upload_service_url = upload_service_url\n\n    def generate_and_export_report(self, report_type):\n        print(f\"[ReportGenerator] Starting report generation for type: {report_type}\")\n\n        raw_data = self._read_data(self.input_filepath)\n        if not raw_data:\n            print(\"[ReportGenerator] No raw data read.\")\n            return False\n        print(f\"[ReportGenerator] Read {len(raw_data)} rows of raw data.\")\n\n        processed_data = self._process_data(raw_data, report_type)\n        if not processed_data:\n             print(\"[ReportGenerator] No data after processing.\")\n             return False\n        print(f\"[ReportGenerator] Processed data has {len(processed_data)} items.\")\n\n        output_filepath = self.output_filepath_template.format(timestamp=datetime.now().strftime('%Y%m%d%H%M%S'), report_type=report_type.lower())\n        if not self._export_data(processed_data, output_filepath, report_type):\n            print(f\"[ReportGenerator] Failed to export report to {output_filepath}.\")\n            return False\n        print(f\"[ReportGenerator] Report exported to {output_filepath}.\")\n\n        if not self._upload_report(output_filepath):\n            print(f\"[ReportGenerator] Failed to upload report from {output_filepath}.\")\n\n            return False\n        print(f\"[ReportGenerator] Report {output_filepath} uploaded successfully.\")\n\n        print(f\"[ReportGenerator] Report generation and export complete for type: {report_type}.\")\n        return True\n\n    def _read_data(self, filepath):\n        print(f\"[_read_data] Reading data from {filepath}...\")\n        try:\n\n            return [{\"id\": 1, \"value\": 100, \"category\": \"A\"}, {\"id\": 2, \"value\": 200, \"category\": \"B\"}, {\"id\": 3, \"value\": 150, \"category\": \"A\"}]\n        except IOError as e:\n            print(f\"[_read_data] Error reading file: {e}\")\n            return None\n\n    def _process_data(self, raw_data, report_type):\n        print(f\"[_process_data] Processing data for report type: {report_type}...\")\n        if report_type == 'SUMMARY':\n            total_value = sum(item['value'] for item in raw_data)\n            return [{\"summary_type\": \"Total Value\", \"value\": total_value}]\n        elif report_type == 'CATEGORY_SUMMARY':\n            category_totals = {}\n            for item in raw_data:\n                category = item.get('category', 'Unknown')\n                category_totals[category] = category_totals.get(category, 0) + item['value']\n            return [{\"category\": cat, \"total_value\": total} for cat, total in category_totals.items()]\n        else:\n            print(f\"[_process_data] Unknown report type: {report_type}\")\n            return None\n\n    def _export_data(self, processed_data, filepath, report_type):\n        print(f\"[_export_data] Exporting data to {filepath} for type: {report_type}...\")\n        try:\n            with open(filepath, 'w', newline='') as csvfile:\n                if not processed_data:\n                    return True\n                writer = csv.DictWriter(csvfile, fieldnames=processed_data[0].keys())\n                writer.writeheader()\n                writer.writerows(processed_data)\n            return True\n        except IOError as e:\n            print(f\"[_export_data] Error writing to file: {e}\")\n            return False\n\n    def _upload_report(self, filepath):\n        print(f\"[_upload_report] Uploading report from {filepath} to {self.upload_service_url}...\")\n\n        return True\n\n# Example Usage:\n# input_file = 'data.json'\n# output_template = 'reports/{report_type}_{timestamp}.csv'\n# upload_url = 'http://upload.service/api/reports'\n# # Create a dummy input file\n# with open(input_file, 'w') as f:\n#     json.dump([{\"id\": 1, \"value\": 100, \"category\": \"A\"}, {\"id\": 2, \"value\": 200, \"category\": \"B\"}, {\"id\": 3, \"value\": 150, \"category\": \"A\"}], f)\n# if not os.path.exists('reports'):\n#     os.makedirs('reports')\n# generator = ReportGenerator(input_file, output_template, upload_url)\n# generator.generate_and_export_report('SUMMARY')\n# generator.generate_and_export_report('CATEGORY_SUMMARY')\n# generator.generate_and_export_report('UNKNOWN_TYPE') # Should fail\n", "raw_response": "**SRP**\n```python\nimport csv\nimport json\nfrom datetime import datetime\nimport os\n\nclass DataReader:\n    def read_data(self, filepath):\n        print(f\"[DataReader] Reading data from {filepath}...\")\n        try:\n            return [{\"id\": 1, \"value\": 100, \"category\": \"A\"}, {\"id\": 2, \"value\": 200, \"category\": \"B\"}, {\"id\": 3, \"value\": 150, \"category\": \"A\"}]\n        except IOError as e:\n            print(f\"[DataReader] Error reading file: {e}\")\n            return None\n\nclass DataProcessor:\n    def process_data(self, raw_data, report_type):\n        print(f\"[DataProcessor] Processing data for report type: {report_type}...\")\n        if report_type == 'SUMMARY':\n            total_value = sum(item['value'] for item in raw_data)\n            return [{\"summary_type\": \"Total Value\", \"value\": total_value}]\n        elif report_type == 'CATEGORY_SUMMARY':\n            category_totals = {}\n            for item in raw_data:\n                category = item.get('category', 'Unknown')\n                category_totals[category] = category_totals.get(category, 0) + item['value']\n            return [{\"category\": cat, \"total_value\": total} for cat, total in category_totals.items()]\n        else:\n            print(f\"[DataProcessor] Unknown report type: {report_type}\")\n            return None\n\nclass DataExporter:\n    def export_data(self, processed_data, filepath):\n        print(f\"[DataExporter] Exporting data to {filepath}...\")\n        try:\n            with open(filepath, 'w', newline='') as csvfile:\n                if not processed_data:\n                    return True\n                writer = csv.DictWriter(csvfile, fieldnames=processed_data[0].keys())\n                writer.writeheader()\n                writer.writerows(processed_data)\n            return True\n        except IOError as e:\n            print(f\"[DataExporter] Error writing to file: {e}\")\n            return False\n\nclass ReportUploader:\n    def upload_report(self, filepath, upload_service_url):\n        print(f\"[ReportUploader] Uploading report from {filepath} to {upload_service_url}...\")\n        return True\n\nclass ReportGenerator:\n    def __init__(self, input_filepath, output_filepath_template, upload_service_url):\n        self.input_filepath = input_filepath\n        self.output_filepath_template = output_filepath_template\n        self.upload_service_url = upload_service_url\n        self.data_reader = DataReader()\n        self.data_processor = DataProcessor()\n        self.data_exporter = DataExporter()\n        self.report_uploader = ReportUploader()\n\n    def generate_and_export_report(self, report_type):\n        print(f\"[ReportGenerator] Starting report generation for type: {report_type}\")\n\n        raw_data = self.data_reader.read_data(self.input_filepath)\n        if not raw_data:\n            print(\"[ReportGenerator] No raw data read.\")\n            return False\n        print(f\"[ReportGenerator] Read {len(raw_data)} rows of raw data.\")\n\n        processed_data = self.data_processor.process_data(raw_data, report_type)\n        if not processed_data:\n            print(\"[ReportGenerator] No data after processing.\")\n            return False\n        print(f\"[ReportGenerator] Processed data has {len(processed_data)} items.\")\n\n        output_filepath = self.output_filepath_template.format(timestamp=datetime.now().strftime('%Y%m%d%H%M%S'), report_type=report_type.lower())\n        if not self.data_exporter.export_data(processed_data, output_filepath):\n            print(f\"[ReportGenerator] Failed to export report to {output_filepath}.\")\n            return False\n        print(f\"[ReportGenerator] Report exported to {output_filepath}.\")\n\n        if not self.report_uploader.upload_report(output_filepath, self.upload_service_url):\n            print(f\"[ReportGenerator] Failed to upload report from {output_filepath}.\")\n            return False\n        print(f\"[ReportGenerator] Report {output_filepath} uploaded successfully.\")\n\n        print(f\"[ReportGenerator] Report generation and export complete for type: {report_type}.\")\n        return True\n```\nThe original `ReportGenerator` class was responsible for reading data, processing it, exporting it, and uploading it, violating the Single Responsibility Principle (SRP). The refactored code separates these concerns into distinct classes: `DataReader`, `DataProcessor`, `DataExporter`, and `ReportUploader`, each handling a specific task. This adheres to SRP by ensuring that each class has one reason to change.", "violation": "SRP", "violation_list": ["SRP"], "explanation": "**SRP**", "solution_code": "import csv\nimport json\nfrom datetime import datetime\nimport os\n\nclass DataReader:\n    def read_data(self, filepath):\n        print(f\"[DataReader] Reading data from {filepath}...\")\n        try:\n            return [{\"id\": 1, \"value\": 100, \"category\": \"A\"}, {\"id\": 2, \"value\": 200, \"category\": \"B\"}, {\"id\": 3, \"value\": 150, \"category\": \"A\"}]\n        except IOError as e:\n            print(f\"[DataReader] Error reading file: {e}\")\n            return None\n\nclass DataProcessor:\n    def process_data(self, raw_data, report_type):\n        print(f\"[DataProcessor] Processing data for report type: {report_type}...\")\n        if report_type == 'SUMMARY':\n            total_value = sum(item['value'] for item in raw_data)\n            return [{\"summary_type\": \"Total Value\", \"value\": total_value}]\n        elif report_type == 'CATEGORY_SUMMARY':\n            category_totals = {}\n            for item in raw_data:\n                category = item.get('category', 'Unknown')\n                category_totals[category] = category_totals.get(category, 0) + item['value']\n            return [{\"category\": cat, \"total_value\": total} for cat, total in category_totals.items()]\n        else:\n            print(f\"[DataProcessor] Unknown report type: {report_type}\")\n            return None\n\nclass DataExporter:\n    def export_data(self, processed_data, filepath):\n        print(f\"[DataExporter] Exporting data to {filepath}...\")\n        try:\n            with open(filepath, 'w', newline='') as csvfile:\n                if not processed_data:\n                    return True\n                writer = csv.DictWriter(csvfile, fieldnames=processed_data[0].keys())\n                writer.writeheader()\n                writer.writerows(processed_data)\n            return True\n        except IOError as e:\n            print(f\"[DataExporter] Error writing to file: {e}\")\n            return False\n\nclass ReportUploader:\n    def upload_report(self, filepath, upload_service_url):\n        print(f\"[ReportUploader] Uploading report from {filepath} to {upload_service_url}...\")\n        return True\n\nclass ReportGenerator:\n    def __init__(self, input_filepath, output_filepath_template, upload_service_url):\n        self.input_filepath = input_filepath\n        self.output_filepath_template = output_filepath_template\n        self.upload_service_url = upload_service_url\n        self.data_reader = DataReader()\n        self.data_processor = DataProcessor()\n        self.data_exporter = DataExporter()\n        self.report_uploader = ReportUploader()\n\n    def generate_and_export_report(self, report_type):\n        print(f\"[ReportGenerator] Starting report generation for type: {report_type}\")\n\n        raw_data = self.data_reader.read_data(self.input_filepath)\n        if not raw_data:\n            print(\"[ReportGenerator] No raw data read.\")\n            return False\n        print(f\"[ReportGenerator] Read {len(raw_data)} rows of raw data.\")\n\n        processed_data = self.data_processor.process_data(raw_data, report_type)\n        if not processed_data:\n            print(\"[ReportGenerator] No data after processing.\")\n            return False\n        print(f\"[ReportGenerator] Processed data has {len(processed_data)} items.\")\n\n        output_filepath = self.output_filepath_template.format(timestamp=datetime.now().strftime('%Y%m%d%H%M%S'), report_type=report_type.lower())\n        if not self.data_exporter.export_data(processed_data, output_filepath):\n            print(f\"[ReportGenerator] Failed to export report to {output_filepath}.\")\n            return False\n        print(f\"[ReportGenerator] Report exported to {output_filepath}.\")\n\n        if not self.report_uploader.upload_report(output_filepath, self.upload_service_url):\n            print(f\"[ReportGenerator] Failed to upload report from {output_filepath}.\")\n            return False\n        print(f\"[ReportGenerator] Report {output_filepath} uploaded successfully.\")\n\n        print(f\"[ReportGenerator] Report generation and export complete for type: {report_type}.\")\n        return True", "duration_seconds": 19.07969355583191}
{"id": 22, "strategy": "example", "violation_type": "srp", "model": "gpt-4o-mini", "language": "PYTHON", "input": "import smtplib\nfrom twilio.rest import Client\nimport json\n\n# Assume these are configured elsewhere\nEMAIL_HOST = 'smtp.example.com'\nEMAIL_PORT = 587\nEMAIL_USER = 'noreply@example.com'\nEMAIL_PASSWORD = 'password'\nSMS_ACCOUNT_SID = 'ACxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'\nSMS_AUTH_TOKEN = 'your_auth_token'\nSMS_FROM_NUMBER = '+15017122661'\nPUSH_NOTIFICATION_SERVICE_URL = 'https://push.example.com/send'\n\n# Assume user preferences are fetched from a DB or service\ndef fetch_user_preferences(user_id):\n    print(f\"[NotificationDispatcher] Fetching preferences for user {user_id}...\")\n\n    return {'email': True, 'sms': False, 'push': True, 'email_address': f'user{user_id}@example.com', 'phone_number': f'+1123456789{user_id}', 'device_token': f'device_{user_id}'}\n\nclass NotificationDispatcher:\n    def __init__(self, email_host, email_port, email_user, email_password,\n                 sms_account_sid, sms_auth_token, sms_from_number,\n                 push_service_url):\n        self.email_host = email_host\n        self.email_port = email_port\n        self.email_user = email_user\n        self.email_password = email_password\n        self.sms_account_sid = sms_account_sid\n        self.sms_auth_token = sms_auth_token\n        self.sms_from_number = sms_from_number\n        self.push_service_url = push_service_url\n        self._twilio_client = Client(sms_account_sid, sms_auth_token)\n\n    def dispatch_notification(self, user_id, subject, body):\n        print(f\"[NotificationDispatcher] Dispatching notification for user {user_id}\")\n\n        preferences = fetch_user_preferences(user_id)\n        if not preferences:\n            print(f\"[NotificationDispatcher] Could not fetch preferences for user {user_id}. Aborting.\")\n            return False\n        print(f\"[NotificationDispatcher] User preferences: {preferences}\")\n\n        success = False\n\n        if preferences.get('email'):\n            print(\"[NotificationDispatcher] User prefers email. Attempting to send...\")\n            email_address = preferences.get('email_address')\n            if email_address and self._send_email(email_address, subject, body):\n                print(\"[NotificationDispatcher] Email sent successfully.\")\n                success = True\n            else:\n                 print(\"[NotificationDispatcher] Failed to send email.\")\n\n        if preferences.get('sms'):\n            print(\"[NotificationDispatcher] User prefers SMS. Attempting to send...\")\n            phone_number = preferences.get('phone_number')\n            if phone_number and self._send_sms(phone_number, body):\n                 print(\"[NotificationDispatcher] SMS sent successfully.\")\n                 success = True\n            else:\n                 print(\"[NotificationDispatcher] Failed to send SMS.\")\n\n        if preferences.get('push'):\n            print(\"[NotificationDispatcher] User prefers push notification. Attempting to send...\")\n            device_token = preferences.get('device_token')\n            if device_token and self._send_push_notification(device_token, subject, body):\n                 print(\"[NotificationDispatcher] Push notification sent successfully.\")\n                 success = True\n            else:\n                 print(\"[NotificationDispatcher] Failed to send push notification.\")\n\n        if not success:\n            print(f\"[NotificationDispatcher] No notifications sent for user {user_id}.\")\n\n        print(f\"[NotificationDispatcher] Notification dispatch complete for user {user_id}.\")\n        return success # Reports if *at least one* notification was sent\n\n    def _send_email(self, recipient_email, subject, body):\n        print(f\"[_send_email] Sending email to {recipient_email} via {self.email_host}...\")\n        try:\n            # Simulate sending email via SMTP\n            # with smtplib.SMTP(self.email_host, self.email_port) as server:\n            #     server.starttls()\n            #     server.login(self.email_user, self.email_password)\n            #     message = f\"Subject: {subject}\\n\\n{body}\"\n            #     server.sendmail(self.email_user, recipient_email, message)\n            print(\"[_send_email] Simulation: Email sent.\")\n            return True\n        except Exception as e:\n            print(f\"[_send_email] Error sending email: {e}\")\n            return False\n\n    def _send_sms(self, recipient_phone, body):\n        print(f\"[_send_sms] Sending SMS to {recipient_phone} via Twilio...\")\n        try:\n            # Simulate sending SMS via Twilio API\n            # message = self._twilio_client.messages.create(\n            #     to=recipient_phone,\n            #     from_=self.sms_from_number,\n            #     body=body\n            # )\n            # print(f\"[_send_sms] Twilio SID: {message.sid}\")\n            print(\"[_send_sms] Simulation: SMS sent.\")\n            return True\n        except Exception as e:\n            print(f\"[_send_sms] Error sending SMS: {e}\")\n            return False\n\n    def _send_push_notification(self, device_token, subject, body):\n        print(f\"[_send_push_notification] Sending push notification to {device_token} via {self.push_service_url}...\")\n        try:\n            # Simulate sending push notification via an external API\n            # payload = {'token': device_token, 'title': subject, 'body': body}\n            # response = requests.post(self.push_service_url, json=payload)\n            # response.raise_for_status() # Raise HTTPError for bad responses\n            print(\"[_send_push_notification] Simulation: Push notification sent.\")\n            return True\n        except Exception as e:\n            print(f\"[_send_push_notification] Error sending push notification: {e}\")\n            return False\n\n# Example Usage:\n# dispatcher = NotificationDispatcher(\n#     EMAIL_HOST, EMAIL_PORT, EMAIL_USER, EMAIL_PASSWORD,\n#     SMS_ACCOUNT_SID, SMS_AUTH_TOKEN, SMS_FROM_NUMBER,\n#     PUSH_NOTIFICATION_SERVICE_URL\n# )\n# dispatcher.dispatch_notification(101, \"Your Order Shipped\", \"Good news! Your recent order has shipped.\")\n# dispatcher.dispatch_notification(102, \"Account Alert\", \"There was a login attempt from a new device.\")\n", "prompt": "You are an expert in identifying and refactoring SOLID principle violations in PYTHON code. Your task is to analyze the code provided and respond in the exact format below, without any additional text or commentary.\n\nYou must provide the following three parts in your response:\n1. The violated SOLID principle (e.g., SRP, OCP, LSP, ISP, DIP). If no violation exists, respond with **NONE**.\n2. A complete refactored version of the code that removes the violation. YOU MUST RETURN ONLY THE CODE BLOCK.\n3. A brief explanation of the violation and the refactoring.\n\nUse these criteria to detect violations:\n- **SRP**: A class does too many unrelated tasks.\n- **OCP**: Multiple `if-else` or `switch` blocks for logic that should be handled by polymorphism.\n- **LSP**: Subclasses override behavior in a way that breaks the contract of the base class (e.g., throw exceptions).\n- **ISP**: Interfaces that are too large or force implementing unnecessary methods.\n- **DIP**: High-level classes directly depend on low-level classes instead of abstractions.\n\nIf more than one violation is present, report only the most prominent one.\n\n**IMPORTANT:** Follow this output format *exactly*. Do not include greetings, summaries, or comments before or after the output:\n\n**<VIOLATION TYPE>**\n```python\n<Refactored code>\n```\n<Explanation of the refactoring>\n\nExample output:\n**SRP**\n```java\npublic class ReportGenerator {\n    public String generateReport() {\n        return \"Report data\";\n    }\n}\n```\nThe class previously handled both data generation and file I/O. Now it only generates the report, following SRP.\n\nHere is the code:\nimport smtplib\nfrom twilio.rest import Client\nimport json\n\n# Assume these are configured elsewhere\nEMAIL_HOST = 'smtp.example.com'\nEMAIL_PORT = 587\nEMAIL_USER = 'noreply@example.com'\nEMAIL_PASSWORD = 'password'\nSMS_ACCOUNT_SID = 'ACxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'\nSMS_AUTH_TOKEN = 'your_auth_token'\nSMS_FROM_NUMBER = '+15017122661'\nPUSH_NOTIFICATION_SERVICE_URL = 'https://push.example.com/send'\n\n# Assume user preferences are fetched from a DB or service\ndef fetch_user_preferences(user_id):\n    print(f\"[NotificationDispatcher] Fetching preferences for user {user_id}...\")\n\n    return {'email': True, 'sms': False, 'push': True, 'email_address': f'user{user_id}@example.com', 'phone_number': f'+1123456789{user_id}', 'device_token': f'device_{user_id}'}\n\nclass NotificationDispatcher:\n    def __init__(self, email_host, email_port, email_user, email_password,\n                 sms_account_sid, sms_auth_token, sms_from_number,\n                 push_service_url):\n        self.email_host = email_host\n        self.email_port = email_port\n        self.email_user = email_user\n        self.email_password = email_password\n        self.sms_account_sid = sms_account_sid\n        self.sms_auth_token = sms_auth_token\n        self.sms_from_number = sms_from_number\n        self.push_service_url = push_service_url\n        self._twilio_client = Client(sms_account_sid, sms_auth_token)\n\n    def dispatch_notification(self, user_id, subject, body):\n        print(f\"[NotificationDispatcher] Dispatching notification for user {user_id}\")\n\n        preferences = fetch_user_preferences(user_id)\n        if not preferences:\n            print(f\"[NotificationDispatcher] Could not fetch preferences for user {user_id}. Aborting.\")\n            return False\n        print(f\"[NotificationDispatcher] User preferences: {preferences}\")\n\n        success = False\n\n        if preferences.get('email'):\n            print(\"[NotificationDispatcher] User prefers email. Attempting to send...\")\n            email_address = preferences.get('email_address')\n            if email_address and self._send_email(email_address, subject, body):\n                print(\"[NotificationDispatcher] Email sent successfully.\")\n                success = True\n            else:\n                 print(\"[NotificationDispatcher] Failed to send email.\")\n\n        if preferences.get('sms'):\n            print(\"[NotificationDispatcher] User prefers SMS. Attempting to send...\")\n            phone_number = preferences.get('phone_number')\n            if phone_number and self._send_sms(phone_number, body):\n                 print(\"[NotificationDispatcher] SMS sent successfully.\")\n                 success = True\n            else:\n                 print(\"[NotificationDispatcher] Failed to send SMS.\")\n\n        if preferences.get('push'):\n            print(\"[NotificationDispatcher] User prefers push notification. Attempting to send...\")\n            device_token = preferences.get('device_token')\n            if device_token and self._send_push_notification(device_token, subject, body):\n                 print(\"[NotificationDispatcher] Push notification sent successfully.\")\n                 success = True\n            else:\n                 print(\"[NotificationDispatcher] Failed to send push notification.\")\n\n        if not success:\n            print(f\"[NotificationDispatcher] No notifications sent for user {user_id}.\")\n\n        print(f\"[NotificationDispatcher] Notification dispatch complete for user {user_id}.\")\n        return success # Reports if *at least one* notification was sent\n\n    def _send_email(self, recipient_email, subject, body):\n        print(f\"[_send_email] Sending email to {recipient_email} via {self.email_host}...\")\n        try:\n            # Simulate sending email via SMTP\n            # with smtplib.SMTP(self.email_host, self.email_port) as server:\n            #     server.starttls()\n            #     server.login(self.email_user, self.email_password)\n            #     message = f\"Subject: {subject}\\n\\n{body}\"\n            #     server.sendmail(self.email_user, recipient_email, message)\n            print(\"[_send_email] Simulation: Email sent.\")\n            return True\n        except Exception as e:\n            print(f\"[_send_email] Error sending email: {e}\")\n            return False\n\n    def _send_sms(self, recipient_phone, body):\n        print(f\"[_send_sms] Sending SMS to {recipient_phone} via Twilio...\")\n        try:\n            # Simulate sending SMS via Twilio API\n            # message = self._twilio_client.messages.create(\n            #     to=recipient_phone,\n            #     from_=self.sms_from_number,\n            #     body=body\n            # )\n            # print(f\"[_send_sms] Twilio SID: {message.sid}\")\n            print(\"[_send_sms] Simulation: SMS sent.\")\n            return True\n        except Exception as e:\n            print(f\"[_send_sms] Error sending SMS: {e}\")\n            return False\n\n    def _send_push_notification(self, device_token, subject, body):\n        print(f\"[_send_push_notification] Sending push notification to {device_token} via {self.push_service_url}...\")\n        try:\n            # Simulate sending push notification via an external API\n            # payload = {'token': device_token, 'title': subject, 'body': body}\n            # response = requests.post(self.push_service_url, json=payload)\n            # response.raise_for_status() # Raise HTTPError for bad responses\n            print(\"[_send_push_notification] Simulation: Push notification sent.\")\n            return True\n        except Exception as e:\n            print(f\"[_send_push_notification] Error sending push notification: {e}\")\n            return False\n\n# Example Usage:\n# dispatcher = NotificationDispatcher(\n#     EMAIL_HOST, EMAIL_PORT, EMAIL_USER, EMAIL_PASSWORD,\n#     SMS_ACCOUNT_SID, SMS_AUTH_TOKEN, SMS_FROM_NUMBER,\n#     PUSH_NOTIFICATION_SERVICE_URL\n# )\n# dispatcher.dispatch_notification(101, \"Your Order Shipped\", \"Good news! Your recent order has shipped.\")\n# dispatcher.dispatch_notification(102, \"Account Alert\", \"There was a login attempt from a new device.\")\n", "raw_response": "**SRP**\n```python\nimport smtplib\nfrom twilio.rest import Client\nimport json\n\n# Assume these are configured elsewhere\nEMAIL_HOST = 'smtp.example.com'\nEMAIL_PORT = 587\nEMAIL_USER = 'noreply@example.com'\nEMAIL_PASSWORD = 'password'\nSMS_ACCOUNT_SID = 'ACxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'\nSMS_AUTH_TOKEN = 'your_auth_token'\nSMS_FROM_NUMBER = '+15017122661'\nPUSH_NOTIFICATION_SERVICE_URL = 'https://push.example.com/send'\n\ndef fetch_user_preferences(user_id):\n    print(f\"[NotificationDispatcher] Fetching preferences for user {user_id}...\")\n    return {\n        'email': True,\n        'sms': False,\n        'push': True,\n        'email_address': f'user{user_id}@example.com',\n        'phone_number': f'+1123456789{user_id}',\n        'device_token': f'device_{user_id}'\n    }\n\nclass NotificationDispatcher:\n    def __init__(self, email_service, sms_service, push_service):\n        self.email_service = email_service\n        self.sms_service = sms_service\n        self.push_service = push_service\n\n    def dispatch_notification(self, user_id, subject, body):\n        print(f\"[NotificationDispatcher] Dispatching notification for user {user_id}\")\n        preferences = fetch_user_preferences(user_id)\n\n        if not preferences:\n            print(f\"[NotificationDispatcher] Could not fetch preferences for user {user_id}. Aborting.\")\n            return False\n\n        success = False\n\n        if preferences.get('email'):\n            success = self.email_service.send_email(preferences.get('email_address'), subject, body) or success\n\n        if preferences.get('sms'):\n            success = self.sms_service.send_sms(preferences.get('phone_number'), body) or success\n\n        if preferences.get('push'):\n            success = self.push_service.send_push_notification(preferences.get('device_token'), subject, body) or success\n\n        if not success:\n            print(f\"[NotificationDispatcher] No notifications sent for user {user_id}.\")\n        print(f\"[NotificationDispatcher] Notification dispatch complete for user {user_id}.\")\n        return success\n\nclass EmailService:\n    def __init__(self, host, port, user, password):\n        self.host = host\n        self.port = port\n        self.user = user\n        self.password = password\n\n    def send_email(self, recipient_email, subject, body):\n        print(f\"Sending email to {recipient_email} via {self.host}...\")\n        try:\n            print(\"[EmailService] Simulation: Email sent.\")\n            return True\n        except Exception as e:\n            print(f\"[EmailService] Error sending email: {e}\")\n            return False\n\nclass SMSService:\n    def __init__(self, account_sid, auth_token, from_number):\n        self.client = Client(account_sid, auth_token)\n        self.from_number = from_number\n\n    def send_sms(self, recipient_phone, body):\n        print(f\"Sending SMS to {recipient_phone} via Twilio...\")\n        try:\n            print(\"[SMSService] Simulation: SMS sent.\")\n            return True\n        except Exception as e:\n            print(f\"[SMSService] Error sending SMS: {e}\")\n            return False\n\nclass PushNotificationService:\n    def __init__(self, service_url):\n        self.service_url = service_url\n\n    def send_push_notification(self, device_token, subject, body):\n        print(f\"Sending push notification to {device_token} via {self.service_url}...\")\n        try:\n            print(\"[PushNotificationService] Simulation: Push notification sent.\")\n            return True\n        except Exception as e:\n            print(f\"[PushNotificationService] Error sending push notification: {e}\")\n            return False\n\n# Example Usage:\nemail_service = EmailService(EMAIL_HOST, EMAIL_PORT, EMAIL_USER, EMAIL_PASSWORD)\nsms_service = SMSService(SMS_ACCOUNT_SID, SMS_AUTH_TOKEN, SMS_FROM_NUMBER)\npush_service = PushNotificationService(PUSH_NOTIFICATION_SERVICE_URL)\n\ndispatcher = NotificationDispatcher(email_service, sms_service, push_service)\ndispatcher.dispatch_notification(101, \"Your Order Shipped\", \"Good news! Your recent order has shipped.\")\ndispatcher.dispatch_notification(102, \"Account Alert\", \"There was a login attempt from a new device.\")\n```\nThe `NotificationDispatcher` class previously handled multiple responsibilities, including fetching user preferences and sending notifications via different channels. This refactoring separates the concerns into distinct classes: `EmailService`, `SMSService`, and `PushNotificationService`, each responsible for its own notification method, adhering to the Single Responsibility Principle (SRP).", "violation": "SRP", "violation_list": ["SRP"], "explanation": "**SRP**", "solution_code": "import smtplib\nfrom twilio.rest import Client\nimport json\n\n# Assume these are configured elsewhere\nEMAIL_HOST = 'smtp.example.com'\nEMAIL_PORT = 587\nEMAIL_USER = 'noreply@example.com'\nEMAIL_PASSWORD = 'password'\nSMS_ACCOUNT_SID = 'ACxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'\nSMS_AUTH_TOKEN = 'your_auth_token'\nSMS_FROM_NUMBER = '+15017122661'\nPUSH_NOTIFICATION_SERVICE_URL = 'https://push.example.com/send'\n\ndef fetch_user_preferences(user_id):\n    print(f\"[NotificationDispatcher] Fetching preferences for user {user_id}...\")\n    return {\n        'email': True,\n        'sms': False,\n        'push': True,\n        'email_address': f'user{user_id}@example.com',\n        'phone_number': f'+1123456789{user_id}',\n        'device_token': f'device_{user_id}'\n    }\n\nclass NotificationDispatcher:\n    def __init__(self, email_service, sms_service, push_service):\n        self.email_service = email_service\n        self.sms_service = sms_service\n        self.push_service = push_service\n\n    def dispatch_notification(self, user_id, subject, body):\n        print(f\"[NotificationDispatcher] Dispatching notification for user {user_id}\")\n        preferences = fetch_user_preferences(user_id)\n\n        if not preferences:\n            print(f\"[NotificationDispatcher] Could not fetch preferences for user {user_id}. Aborting.\")\n            return False\n\n        success = False\n\n        if preferences.get('email'):\n            success = self.email_service.send_email(preferences.get('email_address'), subject, body) or success\n\n        if preferences.get('sms'):\n            success = self.sms_service.send_sms(preferences.get('phone_number'), body) or success\n\n        if preferences.get('push'):\n            success = self.push_service.send_push_notification(preferences.get('device_token'), subject, body) or success\n\n        if not success:\n            print(f\"[NotificationDispatcher] No notifications sent for user {user_id}.\")\n        print(f\"[NotificationDispatcher] Notification dispatch complete for user {user_id}.\")\n        return success\n\nclass EmailService:\n    def __init__(self, host, port, user, password):\n        self.host = host\n        self.port = port\n        self.user = user\n        self.password = password\n\n    def send_email(self, recipient_email, subject, body):\n        print(f\"Sending email to {recipient_email} via {self.host}...\")\n        try:\n            print(\"[EmailService] Simulation: Email sent.\")\n            return True\n        except Exception as e:\n            print(f\"[EmailService] Error sending email: {e}\")\n            return False\n\nclass SMSService:\n    def __init__(self, account_sid, auth_token, from_number):\n        self.client = Client(account_sid, auth_token)\n        self.from_number = from_number\n\n    def send_sms(self, recipient_phone, body):\n        print(f\"Sending SMS to {recipient_phone} via Twilio...\")\n        try:\n            print(\"[SMSService] Simulation: SMS sent.\")\n            return True\n        except Exception as e:\n            print(f\"[SMSService] Error sending SMS: {e}\")\n            return False\n\nclass PushNotificationService:\n    def __init__(self, service_url):\n        self.service_url = service_url\n\n    def send_push_notification(self, device_token, subject, body):\n        print(f\"Sending push notification to {device_token} via {self.service_url}...\")\n        try:\n            print(\"[PushNotificationService] Simulation: Push notification sent.\")\n            return True\n        except Exception as e:\n            print(f\"[PushNotificationService] Error sending push notification: {e}\")\n            return False\n\n# Example Usage:\nemail_service = EmailService(EMAIL_HOST, EMAIL_PORT, EMAIL_USER, EMAIL_PASSWORD)\nsms_service = SMSService(SMS_ACCOUNT_SID, SMS_AUTH_TOKEN, SMS_FROM_NUMBER)\npush_service = PushNotificationService(PUSH_NOTIFICATION_SERVICE_URL)\n\ndispatcher = NotificationDispatcher(email_service, sms_service, push_service)\ndispatcher.dispatch_notification(101, \"Your Order Shipped\", \"Good news! Your recent order has shipped.\")\ndispatcher.dispatch_notification(102, \"Account Alert\", \"There was a login attempt from a new device.\")", "duration_seconds": 17.529098987579346}
{"id": 23, "strategy": "example", "violation_type": "srp", "model": "gpt-4o-mini", "language": "PYTHON", "input": "import sqlite3\nfrom datetime import datetime\nimport smtplib\n\n# Assume DB path and SMTP config are defined elsewhere\nDB_PATH = 'ecommerce.db'\nEMAIL_HOST = 'smtp.ecommerce.com'\nEMAIL_PORT = 587\nEMAIL_USER = 'status@ecommerce.com'\nEMAIL_PASSWORD = 'password'\n\ndef get_db_connection():\n    return sqlite3.connect(DB_PATH)\n\nclass OrderStatusUpdater:\n    def __init__(self, db_path, email_host, email_port, email_user, email_password):\n        self.db_path = db_path\n        self.email_host = email_host\n        self.email_port = email_port\n        self.email_user = email_user\n        self.email_password = email_password\n        self._create_db_if_not_exists()\n\n    def _create_db_if_not_exists(self):\n        conn = None\n        try:\n            conn = get_db_connection()\n            cursor = conn.cursor()\n            cursor.execute(\"\"\"CREATE TABLE IF NOT EXISTS orders (\n                id INTEGER PRIMARY KEY AUTOINCREMENT,\n                order_number TEXT UNIQUE NOT NULL,\n                customer_email TEXT NOT NULL,\n                status TEXT NOT NULL,\n                payment_status TEXT NOT NULL,\n                created_at TEXT\n            )\"\"\")\n            conn.commit()\n        except sqlite3.Error as e:\n            print(f\"[OrderStatusUpdater] Database error during creation: {e}\")\n        finally:\n            if conn:\n                conn.close()\n\n    def update_order_status_based_on_payment(self, order_number):\n        print(f\"[OrderStatusUpdater] Checking payment status for order {order_number} to update status.\")\n\n        order = self._fetch_order_by_number(order_number)\n        if order is None:\n            print(f\"[OrderStatusUpdater] Order {order_number} not found.\")\n            return False\n        print(f\"[OrderStatusUpdater] Order found: {order}\")\n\n        if order['payment_status'] == 'PAID' and order['status'] == 'PENDING':\n            print(f\"[OrderStatusUpdater] Order {order_number} is paid and pending. Updating status to PROCESSING.\")\n            new_status = 'PROCESSING'\n            if self._update_order_status(order['id'], new_status):\n                print(f\"[OrderStatusUpdater] Status updated to {new_status} for order {order_number}.\")\n                self._send_status_update_email(order['customer_email'], order_number, new_status)\n                print(f\"[OrderStatusUpdater] Status update email sent for order {order_number}.\")\n                return True\n            else:\n                print(f\"[OrderStatusUpdater] Failed to update status in DB for order {order_number}.\")\n                return False\n        elif order['payment_status'] == 'CANCELLED' and order['status'] != 'CANCELLED':\n             print(f\"[OrderStatusUpdater] Order {order_number} payment cancelled. Updating status to CANCELLED.\")\n             new_status = 'CANCELLED'\n             if self._update_order_status(order['id'], new_status):\n                 print(f\"[OrderStatusUpdater] Status updated to {new_status} for order {order_number}.\")\n                 self._send_status_update_email(order['customer_email'], order_number, new_status)\n                 print(f\"[OrderStatusUpdater] Status update email sent for order {order_number}.\")\n                 return True\n             else:\n                 print(f\"[OrderStatusUpdater] Failed to update status in DB for order {order_number}.\")\n                 return False\n        else:\n            print(f\"[OrderStatusUpdater] No status update needed for order {order_number} (Status: {order['status']}, Payment: {order['payment_status']}).\")\n            return False\n\n    def _fetch_order_by_number(self, order_number):\n        print(f\"[_fetch_order_by_number] Fetching order {order_number} from DB {self.db_path}...\")\n        conn = None\n        try:\n            conn = get_db_connection()\n            conn.row_factory = sqlite3.Row # Access columns by name\n            cursor = conn.cursor()\n            cursor.execute(\"SELECT id, order_number, customer_email, status, payment_status FROM orders WHERE order_number = ?\", (order_number,))\n            row = cursor.fetchone()\n            return dict(row) if row else None\n        except sqlite3.Error as e:\n            print(f\"[_fetch_order_by_number] Database error: {e}\")\n            return None\n        finally:\n            if conn:\n                conn.close()\n\n    def _update_order_status(self, order_id, new_status):\n        print(f\"[_update_order_status] Updating status for order id {order_id} to {new_status} in DB {self.db_path}...\")\n        conn = None\n        try:\n            conn = get_db_connection()\n            cursor = conn.cursor()\n            cursor.execute(\"UPDATE orders SET status = ? WHERE id = ?\", (new_status, order_id))\n            conn.commit()\n            return cursor.rowcount > 0\n        except sqlite3.Error as e:\n            print(f\"[_update_order_status] Database error: {e}\")\n            return False\n        finally:\n            if conn:\n                conn.close()\n\n    def _send_status_update_email(self, recipient_email, order_number, new_status):\n        print(f\"[_send_status_update_email] Sending status update email for order {order_number} to {recipient_email}...\")\n        try:\n            # Simulate sending email via SMTP\n            # with smtplib.SMTP(self.email_host, self.email_port) as server:\n            #     server.starttls()\n            #     server.login(self.email_user, self.email_password)\n            #     subject = f\"Order {order_number} Status Updated to {new_status}\"\n            #     body = f\"Dear customer,\\n\\nYour order {order_number} status has been updated to {new_status}.\\n\\nThank you,\n            #             Ecommerce Team\"\n            #     message = f\"Subject: {subject}\\n\\n{body}\"\n            #     server.sendmail(self.email_user, recipient_email, message)\n            print(f\"[_send_status_update_email] Simulation: Status update email sent for order {order_number}.\")\n        except Exception as e:\n            print(f\"[_send_status_update_email] Error sending email: {e}\")\n\n# Example Usage:\n# import os\n# db_file = 'ecommerce.db'\n# if os.path.exists(db_file): os.remove(db_file)\n# DB_PATH = db_file # Update global for helper function\n# updater = OrderStatusUpdater(db_file, EMAIL_HOST, EMAIL_PORT, EMAIL_USER, EMAIL_PASSWORD)\n#\n# # Create dummy orders\n# conn = get_db_connection()\n# cursor = conn.cursor()\n# cursor.execute(\"INSERT INTO orders (order_number, customer_email, status, payment_status, created_at) VALUES (?, ?, ?, ?, ?)\",\n#                ('ORD123', 'user1@example.com', 'PENDING', 'PAID', datetime.now().isoformat()))\n# cursor.execute(\"INSERT INTO orders (order_number, customer_email, status, payment_status, created_at) VALUES (?, ?, ?, ?, ?)\",\n#                ('ORD456', 'user2@example.com', 'PENDING', 'PENDING', datetime.now().isoformat()))\n# cursor.execute(\"INSERT INTO orders (order_number, customer_email, status, payment_status, created_at) VALUES (?, ?, ?, ?, ?)\",\n#                ('ORD789', 'user3@example.com', 'SHIPPED', 'PAID', datetime.now().isoformat())) # Already shipped\n# cursor.execute(\"INSERT INTO orders (order_number, customer_email, status, payment_status, created_at) VALUES (?, ?, ?, ?, ?)\",\n#                ('ORD012', 'user4@example.com', 'PENDING', 'CANCELLED', datetime.now().isoformat()))\n# conn.commit()\n# conn.close()\n#\n# # Run updates\n# updater.update_order_status_based_on_payment('ORD123') # Should update to PROCESSING\n# updater.update_order_status_based_on_payment('ORD456') # Should do nothing\n# updater.update_order_status_based_on_payment('ORD789') # Should do nothing\n# updater.update_order_status_based_on_payment('ORD012') # Should update to CANCELLED\n# updater.update_order_status_based_on_payment('NONEXISTENT') # Should fail gracefully\n", "prompt": "You are an expert in identifying and refactoring SOLID principle violations in PYTHON code. Your task is to analyze the code provided and respond in the exact format below, without any additional text or commentary.\n\nYou must provide the following three parts in your response:\n1. The violated SOLID principle (e.g., SRP, OCP, LSP, ISP, DIP). If no violation exists, respond with **NONE**.\n2. A complete refactored version of the code that removes the violation. YOU MUST RETURN ONLY THE CODE BLOCK.\n3. A brief explanation of the violation and the refactoring.\n\nUse these criteria to detect violations:\n- **SRP**: A class does too many unrelated tasks.\n- **OCP**: Multiple `if-else` or `switch` blocks for logic that should be handled by polymorphism.\n- **LSP**: Subclasses override behavior in a way that breaks the contract of the base class (e.g., throw exceptions).\n- **ISP**: Interfaces that are too large or force implementing unnecessary methods.\n- **DIP**: High-level classes directly depend on low-level classes instead of abstractions.\n\nIf more than one violation is present, report only the most prominent one.\n\n**IMPORTANT:** Follow this output format *exactly*. Do not include greetings, summaries, or comments before or after the output:\n\n**<VIOLATION TYPE>**\n```python\n<Refactored code>\n```\n<Explanation of the refactoring>\n\nExample output:\n**SRP**\n```java\npublic class ReportGenerator {\n    public String generateReport() {\n        return \"Report data\";\n    }\n}\n```\nThe class previously handled both data generation and file I/O. Now it only generates the report, following SRP.\n\nHere is the code:\nimport sqlite3\nfrom datetime import datetime\nimport smtplib\n\n# Assume DB path and SMTP config are defined elsewhere\nDB_PATH = 'ecommerce.db'\nEMAIL_HOST = 'smtp.ecommerce.com'\nEMAIL_PORT = 587\nEMAIL_USER = 'status@ecommerce.com'\nEMAIL_PASSWORD = 'password'\n\ndef get_db_connection():\n    return sqlite3.connect(DB_PATH)\n\nclass OrderStatusUpdater:\n    def __init__(self, db_path, email_host, email_port, email_user, email_password):\n        self.db_path = db_path\n        self.email_host = email_host\n        self.email_port = email_port\n        self.email_user = email_user\n        self.email_password = email_password\n        self._create_db_if_not_exists()\n\n    def _create_db_if_not_exists(self):\n        conn = None\n        try:\n            conn = get_db_connection()\n            cursor = conn.cursor()\n            cursor.execute(\"\"\"CREATE TABLE IF NOT EXISTS orders (\n                id INTEGER PRIMARY KEY AUTOINCREMENT,\n                order_number TEXT UNIQUE NOT NULL,\n                customer_email TEXT NOT NULL,\n                status TEXT NOT NULL,\n                payment_status TEXT NOT NULL,\n                created_at TEXT\n            )\"\"\")\n            conn.commit()\n        except sqlite3.Error as e:\n            print(f\"[OrderStatusUpdater] Database error during creation: {e}\")\n        finally:\n            if conn:\n                conn.close()\n\n    def update_order_status_based_on_payment(self, order_number):\n        print(f\"[OrderStatusUpdater] Checking payment status for order {order_number} to update status.\")\n\n        order = self._fetch_order_by_number(order_number)\n        if order is None:\n            print(f\"[OrderStatusUpdater] Order {order_number} not found.\")\n            return False\n        print(f\"[OrderStatusUpdater] Order found: {order}\")\n\n        if order['payment_status'] == 'PAID' and order['status'] == 'PENDING':\n            print(f\"[OrderStatusUpdater] Order {order_number} is paid and pending. Updating status to PROCESSING.\")\n            new_status = 'PROCESSING'\n            if self._update_order_status(order['id'], new_status):\n                print(f\"[OrderStatusUpdater] Status updated to {new_status} for order {order_number}.\")\n                self._send_status_update_email(order['customer_email'], order_number, new_status)\n                print(f\"[OrderStatusUpdater] Status update email sent for order {order_number}.\")\n                return True\n            else:\n                print(f\"[OrderStatusUpdater] Failed to update status in DB for order {order_number}.\")\n                return False\n        elif order['payment_status'] == 'CANCELLED' and order['status'] != 'CANCELLED':\n             print(f\"[OrderStatusUpdater] Order {order_number} payment cancelled. Updating status to CANCELLED.\")\n             new_status = 'CANCELLED'\n             if self._update_order_status(order['id'], new_status):\n                 print(f\"[OrderStatusUpdater] Status updated to {new_status} for order {order_number}.\")\n                 self._send_status_update_email(order['customer_email'], order_number, new_status)\n                 print(f\"[OrderStatusUpdater] Status update email sent for order {order_number}.\")\n                 return True\n             else:\n                 print(f\"[OrderStatusUpdater] Failed to update status in DB for order {order_number}.\")\n                 return False\n        else:\n            print(f\"[OrderStatusUpdater] No status update needed for order {order_number} (Status: {order['status']}, Payment: {order['payment_status']}).\")\n            return False\n\n    def _fetch_order_by_number(self, order_number):\n        print(f\"[_fetch_order_by_number] Fetching order {order_number} from DB {self.db_path}...\")\n        conn = None\n        try:\n            conn = get_db_connection()\n            conn.row_factory = sqlite3.Row # Access columns by name\n            cursor = conn.cursor()\n            cursor.execute(\"SELECT id, order_number, customer_email, status, payment_status FROM orders WHERE order_number = ?\", (order_number,))\n            row = cursor.fetchone()\n            return dict(row) if row else None\n        except sqlite3.Error as e:\n            print(f\"[_fetch_order_by_number] Database error: {e}\")\n            return None\n        finally:\n            if conn:\n                conn.close()\n\n    def _update_order_status(self, order_id, new_status):\n        print(f\"[_update_order_status] Updating status for order id {order_id} to {new_status} in DB {self.db_path}...\")\n        conn = None\n        try:\n            conn = get_db_connection()\n            cursor = conn.cursor()\n            cursor.execute(\"UPDATE orders SET status = ? WHERE id = ?\", (new_status, order_id))\n            conn.commit()\n            return cursor.rowcount > 0\n        except sqlite3.Error as e:\n            print(f\"[_update_order_status] Database error: {e}\")\n            return False\n        finally:\n            if conn:\n                conn.close()\n\n    def _send_status_update_email(self, recipient_email, order_number, new_status):\n        print(f\"[_send_status_update_email] Sending status update email for order {order_number} to {recipient_email}...\")\n        try:\n            # Simulate sending email via SMTP\n            # with smtplib.SMTP(self.email_host, self.email_port) as server:\n            #     server.starttls()\n            #     server.login(self.email_user, self.email_password)\n            #     subject = f\"Order {order_number} Status Updated to {new_status}\"\n            #     body = f\"Dear customer,\\n\\nYour order {order_number} status has been updated to {new_status}.\\n\\nThank you,\n            #             Ecommerce Team\"\n            #     message = f\"Subject: {subject}\\n\\n{body}\"\n            #     server.sendmail(self.email_user, recipient_email, message)\n            print(f\"[_send_status_update_email] Simulation: Status update email sent for order {order_number}.\")\n        except Exception as e:\n            print(f\"[_send_status_update_email] Error sending email: {e}\")\n\n# Example Usage:\n# import os\n# db_file = 'ecommerce.db'\n# if os.path.exists(db_file): os.remove(db_file)\n# DB_PATH = db_file # Update global for helper function\n# updater = OrderStatusUpdater(db_file, EMAIL_HOST, EMAIL_PORT, EMAIL_USER, EMAIL_PASSWORD)\n#\n# # Create dummy orders\n# conn = get_db_connection()\n# cursor = conn.cursor()\n# cursor.execute(\"INSERT INTO orders (order_number, customer_email, status, payment_status, created_at) VALUES (?, ?, ?, ?, ?)\",\n#                ('ORD123', 'user1@example.com', 'PENDING', 'PAID', datetime.now().isoformat()))\n# cursor.execute(\"INSERT INTO orders (order_number, customer_email, status, payment_status, created_at) VALUES (?, ?, ?, ?, ?)\",\n#                ('ORD456', 'user2@example.com', 'PENDING', 'PENDING', datetime.now().isoformat()))\n# cursor.execute(\"INSERT INTO orders (order_number, customer_email, status, payment_status, created_at) VALUES (?, ?, ?, ?, ?)\",\n#                ('ORD789', 'user3@example.com', 'SHIPPED', 'PAID', datetime.now().isoformat())) # Already shipped\n# cursor.execute(\"INSERT INTO orders (order_number, customer_email, status, payment_status, created_at) VALUES (?, ?, ?, ?, ?)\",\n#                ('ORD012', 'user4@example.com', 'PENDING', 'CANCELLED', datetime.now().isoformat()))\n# conn.commit()\n# conn.close()\n#\n# # Run updates\n# updater.update_order_status_based_on_payment('ORD123') # Should update to PROCESSING\n# updater.update_order_status_based_on_payment('ORD456') # Should do nothing\n# updater.update_order_status_based_on_payment('ORD789') # Should do nothing\n# updater.update_order_status_based_on_payment('ORD012') # Should update to CANCELLED\n# updater.update_order_status_based_on_payment('NONEXISTENT') # Should fail gracefully\n", "raw_response": "**SRP**\n```python\nimport sqlite3\nfrom datetime import datetime\nimport smtplib\n\nDB_PATH = 'ecommerce.db'\nEMAIL_HOST = 'smtp.ecommerce.com'\nEMAIL_PORT = 587\nEMAIL_USER = 'status@ecommerce.com'\nEMAIL_PASSWORD = 'password'\n\ndef get_db_connection():\n    return sqlite3.connect(DB_PATH)\n\nclass OrderDatabase:\n    def __init__(self, db_path):\n        self.db_path = db_path\n        self._create_db_if_not_exists()\n\n    def _create_db_if_not_exists(self):\n        conn = None\n        try:\n            conn = get_db_connection()\n            cursor = conn.cursor()\n            cursor.execute(\"\"\"CREATE TABLE IF NOT EXISTS orders (\n                id INTEGER PRIMARY KEY AUTOINCREMENT,\n                order_number TEXT UNIQUE NOT NULL,\n                customer_email TEXT NOT NULL,\n                status TEXT NOT NULL,\n                payment_status TEXT NOT NULL,\n                created_at TEXT\n            )\"\"\")\n            conn.commit()\n        except sqlite3.Error as e:\n            print(f\"[OrderDatabase] Database error during creation: {e}\")\n        finally:\n            if conn:\n                conn.close()\n\n    def fetch_order_by_number(self, order_number):\n        print(f\"[OrderDatabase] Fetching order {order_number} from DB {self.db_path}...\")\n        conn = None\n        try:\n            conn = get_db_connection()\n            conn.row_factory = sqlite3.Row\n            cursor = conn.cursor()\n            cursor.execute(\"SELECT id, order_number, customer_email, status, payment_status FROM orders WHERE order_number = ?\", (order_number,))\n            row = cursor.fetchone()\n            return dict(row) if row else None\n        except sqlite3.Error as e:\n            print(f\"[OrderDatabase] Database error: {e}\")\n            return None\n        finally:\n            if conn:\n                conn.close()\n\n    def update_order_status(self, order_id, new_status):\n        print(f\"[OrderDatabase] Updating status for order id {order_id} to {new_status} in DB {self.db_path}...\")\n        conn = None\n        try:\n            conn = get_db_connection()\n            cursor = conn.cursor()\n            cursor.execute(\"UPDATE orders SET status = ? WHERE id = ?\", (new_status, order_id))\n            conn.commit()\n            return cursor.rowcount > 0\n        except sqlite3.Error as e:\n            print(f\"[OrderDatabase] Database error: {e}\")\n            return False\n        finally:\n            if conn:\n                conn.close()\n\nclass OrderStatusUpdater:\n    def __init__(self, order_database, email_host, email_port, email_user, email_password):\n        self.order_database = order_database\n        self.email_host = email_host\n        self.email_port = email_port\n        self.email_user = email_user\n        self.email_password = email_password\n\n    def update_order_status_based_on_payment(self, order_number):\n        print(f\"[OrderStatusUpdater] Checking payment status for order {order_number} to update status.\")\n\n        order = self.order_database.fetch_order_by_number(order_number)\n        if order is None:\n            print(f\"[OrderStatusUpdater] Order {order_number} not found.\")\n            return False\n        print(f\"[OrderStatusUpdater] Order found: {order}\")\n\n        if order['payment_status'] == 'PAID' and order['status'] == 'PENDING':\n            self._process_order(order, 'PROCESSING')\n        elif order['payment_status'] == 'CANCELLED' and order['status'] != 'CANCELLED':\n            self._process_order(order, 'CANCELLED')\n        else:\n            print(f\"[OrderStatusUpdater] No status update needed for order {order_number} (Status: {order['status']}, Payment: {order['payment_status']}).\")\n            return False\n\n    def _process_order(self, order, new_status):\n        print(f\"[OrderStatusUpdater] Updating status to {new_status} for order {order['order_number']}.\")\n        if self.order_database.update_order_status(order['id'], new_status):\n            print(f\"[OrderStatusUpdater] Status updated to {new_status} for order {order['order_number']}.\")\n            self._send_status_update_email(order['customer_email'], order['order_number'], new_status)\n            print(f\"[OrderStatusUpdater] Status update email sent for order {order['order_number']}.\")\n        else:\n            print(f\"[OrderStatusUpdater] Failed to update status in DB for order {order['order_number']}.\")\n\n    def _send_status_update_email(self, recipient_email, order_number, new_status):\n        print(f\"[_send_status_update_email] Sending status update email for order {order_number} to {recipient_email}...\")\n        try:\n            print(f\"[_send_status_update_email] Simulation: Status update email sent for order {order_number}.\")\n        except Exception as e:\n            print(f\"[_send_status_update_email] Error sending email: {e}\")\n\n# Example Usage:\n# order_database = OrderDatabase(DB_PATH)\n# updater = OrderStatusUpdater(order_database, EMAIL_HOST, EMAIL_PORT, EMAIL_USER, EMAIL_PASSWORD)\n# ... (rest of the example usage remains unchanged)\n```\nThe `OrderStatusUpdater` class previously handled both order status updates and database interactions, violating the Single Responsibility Principle (SRP). The refactored code separates the database operations into a new `OrderDatabase` class, allowing `OrderStatusUpdater` to focus solely on updating order statuses and sending emails.", "violation": "SRP", "violation_list": ["SRP"], "explanation": "**SRP**", "solution_code": "import sqlite3\nfrom datetime import datetime\nimport smtplib\n\nDB_PATH = 'ecommerce.db'\nEMAIL_HOST = 'smtp.ecommerce.com'\nEMAIL_PORT = 587\nEMAIL_USER = 'status@ecommerce.com'\nEMAIL_PASSWORD = 'password'\n\ndef get_db_connection():\n    return sqlite3.connect(DB_PATH)\n\nclass OrderDatabase:\n    def __init__(self, db_path):\n        self.db_path = db_path\n        self._create_db_if_not_exists()\n\n    def _create_db_if_not_exists(self):\n        conn = None\n        try:\n            conn = get_db_connection()\n            cursor = conn.cursor()\n            cursor.execute(\"\"\"CREATE TABLE IF NOT EXISTS orders (\n                id INTEGER PRIMARY KEY AUTOINCREMENT,\n                order_number TEXT UNIQUE NOT NULL,\n                customer_email TEXT NOT NULL,\n                status TEXT NOT NULL,\n                payment_status TEXT NOT NULL,\n                created_at TEXT\n            )\"\"\")\n            conn.commit()\n        except sqlite3.Error as e:\n            print(f\"[OrderDatabase] Database error during creation: {e}\")\n        finally:\n            if conn:\n                conn.close()\n\n    def fetch_order_by_number(self, order_number):\n        print(f\"[OrderDatabase] Fetching order {order_number} from DB {self.db_path}...\")\n        conn = None\n        try:\n            conn = get_db_connection()\n            conn.row_factory = sqlite3.Row\n            cursor = conn.cursor()\n            cursor.execute(\"SELECT id, order_number, customer_email, status, payment_status FROM orders WHERE order_number = ?\", (order_number,))\n            row = cursor.fetchone()\n            return dict(row) if row else None\n        except sqlite3.Error as e:\n            print(f\"[OrderDatabase] Database error: {e}\")\n            return None\n        finally:\n            if conn:\n                conn.close()\n\n    def update_order_status(self, order_id, new_status):\n        print(f\"[OrderDatabase] Updating status for order id {order_id} to {new_status} in DB {self.db_path}...\")\n        conn = None\n        try:\n            conn = get_db_connection()\n            cursor = conn.cursor()\n            cursor.execute(\"UPDATE orders SET status = ? WHERE id = ?\", (new_status, order_id))\n            conn.commit()\n            return cursor.rowcount > 0\n        except sqlite3.Error as e:\n            print(f\"[OrderDatabase] Database error: {e}\")\n            return False\n        finally:\n            if conn:\n                conn.close()\n\nclass OrderStatusUpdater:\n    def __init__(self, order_database, email_host, email_port, email_user, email_password):\n        self.order_database = order_database\n        self.email_host = email_host\n        self.email_port = email_port\n        self.email_user = email_user\n        self.email_password = email_password\n\n    def update_order_status_based_on_payment(self, order_number):\n        print(f\"[OrderStatusUpdater] Checking payment status for order {order_number} to update status.\")\n\n        order = self.order_database.fetch_order_by_number(order_number)\n        if order is None:\n            print(f\"[OrderStatusUpdater] Order {order_number} not found.\")\n            return False\n        print(f\"[OrderStatusUpdater] Order found: {order}\")\n\n        if order['payment_status'] == 'PAID' and order['status'] == 'PENDING':\n            self._process_order(order, 'PROCESSING')\n        elif order['payment_status'] == 'CANCELLED' and order['status'] != 'CANCELLED':\n            self._process_order(order, 'CANCELLED')\n        else:\n            print(f\"[OrderStatusUpdater] No status update needed for order {order_number} (Status: {order['status']}, Payment: {order['payment_status']}).\")\n            return False\n\n    def _process_order(self, order, new_status):\n        print(f\"[OrderStatusUpdater] Updating status to {new_status} for order {order['order_number']}.\")\n        if self.order_database.update_order_status(order['id'], new_status):\n            print(f\"[OrderStatusUpdater] Status updated to {new_status} for order {order['order_number']}.\")\n            self._send_status_update_email(order['customer_email'], order['order_number'], new_status)\n            print(f\"[OrderStatusUpdater] Status update email sent for order {order['order_number']}.\")\n        else:\n            print(f\"[OrderStatusUpdater] Failed to update status in DB for order {order['order_number']}.\")\n\n    def _send_status_update_email(self, recipient_email, order_number, new_status):\n        print(f\"[_send_status_update_email] Sending status update email for order {order_number} to {recipient_email}...\")\n        try:\n            print(f\"[_send_status_update_email] Simulation: Status update email sent for order {order_number}.\")\n        except Exception as e:\n            print(f\"[_send_status_update_email] Error sending email: {e}\")\n\n# Example Usage:\n# order_database = OrderDatabase(DB_PATH)\n# updater = OrderStatusUpdater(order_database, EMAIL_HOST, EMAIL_PORT, EMAIL_USER, EMAIL_PASSWORD)\n# ... (rest of the example usage remains unchanged)", "duration_seconds": 22.59678888320923}
{"id": 24, "strategy": "example", "violation_type": "srp", "model": "gpt-4o-mini", "language": "KOTLIN", "input": "class User {\n    fun saveUser(user: User) {\n        // Save user to database\n    }\n    fun sendEmail(email: String, message: String) {\n        // Send email to user\n    }\n}", "prompt": "You are an expert in identifying and refactoring SOLID principle violations in KOTLIN code. Your task is to analyze the code provided and respond in the exact format below, without any additional text or commentary.\n\nYou must provide the following three parts in your response:\n1. The violated SOLID principle (e.g., SRP, OCP, LSP, ISP, DIP). If no violation exists, respond with **NONE**.\n2. A complete refactored version of the code that removes the violation. YOU MUST RETURN ONLY THE CODE BLOCK.\n3. A brief explanation of the violation and the refactoring.\n\nUse these criteria to detect violations:\n- **SRP**: A class does too many unrelated tasks.\n- **OCP**: Multiple `if-else` or `switch` blocks for logic that should be handled by polymorphism.\n- **LSP**: Subclasses override behavior in a way that breaks the contract of the base class (e.g., throw exceptions).\n- **ISP**: Interfaces that are too large or force implementing unnecessary methods.\n- **DIP**: High-level classes directly depend on low-level classes instead of abstractions.\n\nIf more than one violation is present, report only the most prominent one.\n\n**IMPORTANT:** Follow this output format *exactly*. Do not include greetings, summaries, or comments before or after the output:\n\n**<VIOLATION TYPE>**\n```kotlin\n<Refactored code>\n```\n<Explanation of the refactoring>\n\nExample output:\n**SRP**\n```java\npublic class ReportGenerator {\n    public String generateReport() {\n        return \"Report data\";\n    }\n}\n```\nThe class previously handled both data generation and file I/O. Now it only generates the report, following SRP.\n\nHere is the code:\nclass User {\n    fun saveUser(user: User) {\n        // Save user to database\n    }\n    fun sendEmail(email: String, message: String) {\n        // Send email to user\n    }\n}", "raw_response": "**SRP**\n```kotlin\nclass UserRepository {\n    fun saveUser(user: User) {\n        // Save user to database\n    }\n}\n\nclass EmailService {\n    fun sendEmail(email: String, message: String) {\n        // Send email to user\n    }\n}\n```\nThe original `User` class was responsible for both saving users and sending emails, violating the Single Responsibility Principle (SRP). The refactored code separates these concerns into `UserRepository` for database operations and `EmailService` for email functionality.", "violation": "SRP", "violation_list": ["SRP"], "explanation": "**SRP**", "solution_code": "class UserRepository {\n    fun saveUser(user: User) {\n        // Save user to database\n    }\n}\n\nclass EmailService {\n    fun sendEmail(email: String, message: String) {\n        // Send email to user\n    }\n}", "duration_seconds": 2.280679702758789}
{"id": 25, "strategy": "example", "violation_type": "srp", "model": "gpt-4o-mini", "language": "KOTLIN", "input": "class Report {\n    fun generateReport() {\n        // Generate report\n    }\n    fun printReport() {\n        // Print report\n    }\n}", "prompt": "You are an expert in identifying and refactoring SOLID principle violations in KOTLIN code. Your task is to analyze the code provided and respond in the exact format below, without any additional text or commentary.\n\nYou must provide the following three parts in your response:\n1. The violated SOLID principle (e.g., SRP, OCP, LSP, ISP, DIP). If no violation exists, respond with **NONE**.\n2. A complete refactored version of the code that removes the violation. YOU MUST RETURN ONLY THE CODE BLOCK.\n3. A brief explanation of the violation and the refactoring.\n\nUse these criteria to detect violations:\n- **SRP**: A class does too many unrelated tasks.\n- **OCP**: Multiple `if-else` or `switch` blocks for logic that should be handled by polymorphism.\n- **LSP**: Subclasses override behavior in a way that breaks the contract of the base class (e.g., throw exceptions).\n- **ISP**: Interfaces that are too large or force implementing unnecessary methods.\n- **DIP**: High-level classes directly depend on low-level classes instead of abstractions.\n\nIf more than one violation is present, report only the most prominent one.\n\n**IMPORTANT:** Follow this output format *exactly*. Do not include greetings, summaries, or comments before or after the output:\n\n**<VIOLATION TYPE>**\n```kotlin\n<Refactored code>\n```\n<Explanation of the refactoring>\n\nExample output:\n**SRP**\n```java\npublic class ReportGenerator {\n    public String generateReport() {\n        return \"Report data\";\n    }\n}\n```\nThe class previously handled both data generation and file I/O. Now it only generates the report, following SRP.\n\nHere is the code:\nclass Report {\n    fun generateReport() {\n        // Generate report\n    }\n    fun printReport() {\n        // Print report\n    }\n}", "raw_response": "**SRP**\n```kotlin\nclass Report {\n    fun generateReport() {\n        // Generate report\n    }\n}\n\nclass ReportPrinter {\n    fun printReport(report: Report) {\n        // Print report\n    }\n}\n```\nThe `Report` class previously handled both report generation and printing, violating the Single Responsibility Principle (SRP). Now, the responsibilities are separated into `Report` for generation and `ReportPrinter` for printing.", "violation": "SRP", "violation_list": ["SRP"], "explanation": "**SRP**", "solution_code": "class Report {\n    fun generateReport() {\n        // Generate report\n    }\n}\n\nclass ReportPrinter {\n    fun printReport(report: Report) {\n        // Print report\n    }\n}", "duration_seconds": 1.838407039642334}
{"id": 26, "strategy": "example", "violation_type": "srp", "model": "gpt-4o-mini", "language": "KOTLIN", "input": "class Order {\n    fun calculateTotal() {\n        // Calculate total\n    }\n    fun saveToDatabase() {\n        // Save order to database\n    }\n}", "prompt": "You are an expert in identifying and refactoring SOLID principle violations in KOTLIN code. Your task is to analyze the code provided and respond in the exact format below, without any additional text or commentary.\n\nYou must provide the following three parts in your response:\n1. The violated SOLID principle (e.g., SRP, OCP, LSP, ISP, DIP). If no violation exists, respond with **NONE**.\n2. A complete refactored version of the code that removes the violation. YOU MUST RETURN ONLY THE CODE BLOCK.\n3. A brief explanation of the violation and the refactoring.\n\nUse these criteria to detect violations:\n- **SRP**: A class does too many unrelated tasks.\n- **OCP**: Multiple `if-else` or `switch` blocks for logic that should be handled by polymorphism.\n- **LSP**: Subclasses override behavior in a way that breaks the contract of the base class (e.g., throw exceptions).\n- **ISP**: Interfaces that are too large or force implementing unnecessary methods.\n- **DIP**: High-level classes directly depend on low-level classes instead of abstractions.\n\nIf more than one violation is present, report only the most prominent one.\n\n**IMPORTANT:** Follow this output format *exactly*. Do not include greetings, summaries, or comments before or after the output:\n\n**<VIOLATION TYPE>**\n```kotlin\n<Refactored code>\n```\n<Explanation of the refactoring>\n\nExample output:\n**SRP**\n```java\npublic class ReportGenerator {\n    public String generateReport() {\n        return \"Report data\";\n    }\n}\n```\nThe class previously handled both data generation and file I/O. Now it only generates the report, following SRP.\n\nHere is the code:\nclass Order {\n    fun calculateTotal() {\n        // Calculate total\n    }\n    fun saveToDatabase() {\n        // Save order to database\n    }\n}", "raw_response": "**SRP**\n```kotlin\nclass Order {\n    fun calculateTotal() {\n        // Calculate total\n    }\n}\n\nclass OrderRepository {\n    fun saveToDatabase(order: Order) {\n        // Save order to database\n    }\n}\n```\nThe `Order` class previously handled both order calculations and database operations. Now, it only calculates the total, while the `OrderRepository` class is responsible for saving orders to the database, adhering to the Single Responsibility Principle.", "violation": "SRP", "violation_list": ["SRP"], "explanation": "**SRP**", "solution_code": "class Order {\n    fun calculateTotal() {\n        // Calculate total\n    }\n}\n\nclass OrderRepository {\n    fun saveToDatabase(order: Order) {\n        // Save order to database\n    }\n}", "duration_seconds": 2.7432050704956055}
{"id": 27, "strategy": "example", "violation_type": "srp", "model": "gpt-4o-mini", "language": "KOTLIN", "input": "class Invoice {\n    fun createInvoice() {\n        // Create invoice\n    }\n    fun sendInvoice() {\n        // Send invoice to customer\n    }\n}", "prompt": "You are an expert in identifying and refactoring SOLID principle violations in KOTLIN code. Your task is to analyze the code provided and respond in the exact format below, without any additional text or commentary.\n\nYou must provide the following three parts in your response:\n1. The violated SOLID principle (e.g., SRP, OCP, LSP, ISP, DIP). If no violation exists, respond with **NONE**.\n2. A complete refactored version of the code that removes the violation. YOU MUST RETURN ONLY THE CODE BLOCK.\n3. A brief explanation of the violation and the refactoring.\n\nUse these criteria to detect violations:\n- **SRP**: A class does too many unrelated tasks.\n- **OCP**: Multiple `if-else` or `switch` blocks for logic that should be handled by polymorphism.\n- **LSP**: Subclasses override behavior in a way that breaks the contract of the base class (e.g., throw exceptions).\n- **ISP**: Interfaces that are too large or force implementing unnecessary methods.\n- **DIP**: High-level classes directly depend on low-level classes instead of abstractions.\n\nIf more than one violation is present, report only the most prominent one.\n\n**IMPORTANT:** Follow this output format *exactly*. Do not include greetings, summaries, or comments before or after the output:\n\n**<VIOLATION TYPE>**\n```kotlin\n<Refactored code>\n```\n<Explanation of the refactoring>\n\nExample output:\n**SRP**\n```java\npublic class ReportGenerator {\n    public String generateReport() {\n        return \"Report data\";\n    }\n}\n```\nThe class previously handled both data generation and file I/O. Now it only generates the report, following SRP.\n\nHere is the code:\nclass Invoice {\n    fun createInvoice() {\n        // Create invoice\n    }\n    fun sendInvoice() {\n        // Send invoice to customer\n    }\n}", "raw_response": "**SRP**\n```kotlin\nclass Invoice {\n    fun createInvoice() {\n        // Create invoice\n    }\n}\n\nclass InvoiceSender {\n    fun sendInvoice(invoice: Invoice) {\n        // Send invoice to customer\n    }\n}\n```\nThe `Invoice` class previously handled both invoice creation and sending, violating the Single Responsibility Principle (SRP). Now, the responsibilities are separated into `Invoice` for creation and `InvoiceSender` for sending, adhering to SRP.", "violation": "SRP", "violation_list": ["SRP"], "explanation": "**SRP**", "solution_code": "class Invoice {\n    fun createInvoice() {\n        // Create invoice\n    }\n}\n\nclass InvoiceSender {\n    fun sendInvoice(invoice: Invoice) {\n        // Send invoice to customer\n    }\n}", "duration_seconds": 2.425543785095215}
{"id": 28, "strategy": "example", "violation_type": "srp", "model": "gpt-4o-mini", "language": "KOTLIN", "input": "class Product {\n    fun getPriceWithTax() {\n        // Calculate price with tax\n    }\n    fun updateStock() {\n        // Update stock in database\n    }\n    fun displayProduct() {\n        // Display product details\n    }\n}", "prompt": "You are an expert in identifying and refactoring SOLID principle violations in KOTLIN code. Your task is to analyze the code provided and respond in the exact format below, without any additional text or commentary.\n\nYou must provide the following three parts in your response:\n1. The violated SOLID principle (e.g., SRP, OCP, LSP, ISP, DIP). If no violation exists, respond with **NONE**.\n2. A complete refactored version of the code that removes the violation. YOU MUST RETURN ONLY THE CODE BLOCK.\n3. A brief explanation of the violation and the refactoring.\n\nUse these criteria to detect violations:\n- **SRP**: A class does too many unrelated tasks.\n- **OCP**: Multiple `if-else` or `switch` blocks for logic that should be handled by polymorphism.\n- **LSP**: Subclasses override behavior in a way that breaks the contract of the base class (e.g., throw exceptions).\n- **ISP**: Interfaces that are too large or force implementing unnecessary methods.\n- **DIP**: High-level classes directly depend on low-level classes instead of abstractions.\n\nIf more than one violation is present, report only the most prominent one.\n\n**IMPORTANT:** Follow this output format *exactly*. Do not include greetings, summaries, or comments before or after the output:\n\n**<VIOLATION TYPE>**\n```kotlin\n<Refactored code>\n```\n<Explanation of the refactoring>\n\nExample output:\n**SRP**\n```java\npublic class ReportGenerator {\n    public String generateReport() {\n        return \"Report data\";\n    }\n}\n```\nThe class previously handled both data generation and file I/O. Now it only generates the report, following SRP.\n\nHere is the code:\nclass Product {\n    fun getPriceWithTax() {\n        // Calculate price with tax\n    }\n    fun updateStock() {\n        // Update stock in database\n    }\n    fun displayProduct() {\n        // Display product details\n    }\n}", "raw_response": "**SRP**\n```kotlin\nclass Product {\n    fun getPriceWithTax(): Double {\n        // Calculate price with tax\n        return 0.0 // Placeholder return\n    }\n}\n\nclass StockManager {\n    fun updateStock() {\n        // Update stock in database\n    }\n}\n\nclass ProductDisplay {\n    fun displayProduct() {\n        // Display product details\n    }\n}\n```\nThe original `Product` class handled multiple responsibilities: calculating price, updating stock, and displaying product details. The refactored code separates these concerns into three distinct classes, adhering to the Single Responsibility Principle (SRP).", "violation": "SRP", "violation_list": ["SRP"], "explanation": "**SRP**", "solution_code": "class Product {\n    fun getPriceWithTax(): Double {\n        // Calculate price with tax\n        return 0.0 // Placeholder return\n    }\n}\n\nclass StockManager {\n    fun updateStock() {\n        // Update stock in database\n    }\n}\n\nclass ProductDisplay {\n    fun displayProduct() {\n        // Display product details\n    }\n}", "duration_seconds": 2.790118455886841}
{"id": 29, "strategy": "example", "violation_type": "srp", "model": "gpt-4o-mini", "language": "KOTLIN", "input": "class CustomerManager {\n    fun addCustomer(customer: Customer) {\n        // Add customer\n    }\n    fun removeCustomer(customer: Customer) {\n        // Remove customer\n    }\n    fun sendPromotionalEmail(customer: Customer) {\n        // Send promotional email\n    }\n}", "prompt": "You are an expert in identifying and refactoring SOLID principle violations in KOTLIN code. Your task is to analyze the code provided and respond in the exact format below, without any additional text or commentary.\n\nYou must provide the following three parts in your response:\n1. The violated SOLID principle (e.g., SRP, OCP, LSP, ISP, DIP). If no violation exists, respond with **NONE**.\n2. A complete refactored version of the code that removes the violation. YOU MUST RETURN ONLY THE CODE BLOCK.\n3. A brief explanation of the violation and the refactoring.\n\nUse these criteria to detect violations:\n- **SRP**: A class does too many unrelated tasks.\n- **OCP**: Multiple `if-else` or `switch` blocks for logic that should be handled by polymorphism.\n- **LSP**: Subclasses override behavior in a way that breaks the contract of the base class (e.g., throw exceptions).\n- **ISP**: Interfaces that are too large or force implementing unnecessary methods.\n- **DIP**: High-level classes directly depend on low-level classes instead of abstractions.\n\nIf more than one violation is present, report only the most prominent one.\n\n**IMPORTANT:** Follow this output format *exactly*. Do not include greetings, summaries, or comments before or after the output:\n\n**<VIOLATION TYPE>**\n```kotlin\n<Refactored code>\n```\n<Explanation of the refactoring>\n\nExample output:\n**SRP**\n```java\npublic class ReportGenerator {\n    public String generateReport() {\n        return \"Report data\";\n    }\n}\n```\nThe class previously handled both data generation and file I/O. Now it only generates the report, following SRP.\n\nHere is the code:\nclass CustomerManager {\n    fun addCustomer(customer: Customer) {\n        // Add customer\n    }\n    fun removeCustomer(customer: Customer) {\n        // Remove customer\n    }\n    fun sendPromotionalEmail(customer: Customer) {\n        // Send promotional email\n    }\n}", "raw_response": "**SRP**\n```kotlin\nclass CustomerManager {\n    fun addCustomer(customer: Customer) {\n        // Add customer\n    }\n    fun removeCustomer(customer: Customer) {\n        // Remove customer\n    }\n}\n\nclass EmailService {\n    fun sendPromotionalEmail(customer: Customer) {\n        // Send promotional email\n    }\n}\n```\nThe `CustomerManager` class previously handled customer management and email sending, violating SRP. Now, the email functionality is moved to a separate `EmailService` class, ensuring each class has a single responsibility.", "violation": "SRP", "violation_list": ["SRP"], "explanation": "**SRP**", "solution_code": "class CustomerManager {\n    fun addCustomer(customer: Customer) {\n        // Add customer\n    }\n    fun removeCustomer(customer: Customer) {\n        // Remove customer\n    }\n}\n\nclass EmailService {\n    fun sendPromotionalEmail(customer: Customer) {\n        // Send promotional email\n    }\n}", "duration_seconds": 2.606895685195923}
{"id": 30, "strategy": "example", "violation_type": "srp", "model": "gpt-4o-mini", "language": "KOTLIN", "input": "class FileHandler {\n    fun readFile(path: String) {\n        // Read file\n    }\n    fun writeFile(path: String, content: String) {\n        // Write file\n    }\n    fun logOperation(operation: String) {\n        // Log file operation\n    }\n}", "prompt": "You are an expert in identifying and refactoring SOLID principle violations in KOTLIN code. Your task is to analyze the code provided and respond in the exact format below, without any additional text or commentary.\n\nYou must provide the following three parts in your response:\n1. The violated SOLID principle (e.g., SRP, OCP, LSP, ISP, DIP). If no violation exists, respond with **NONE**.\n2. A complete refactored version of the code that removes the violation. YOU MUST RETURN ONLY THE CODE BLOCK.\n3. A brief explanation of the violation and the refactoring.\n\nUse these criteria to detect violations:\n- **SRP**: A class does too many unrelated tasks.\n- **OCP**: Multiple `if-else` or `switch` blocks for logic that should be handled by polymorphism.\n- **LSP**: Subclasses override behavior in a way that breaks the contract of the base class (e.g., throw exceptions).\n- **ISP**: Interfaces that are too large or force implementing unnecessary methods.\n- **DIP**: High-level classes directly depend on low-level classes instead of abstractions.\n\nIf more than one violation is present, report only the most prominent one.\n\n**IMPORTANT:** Follow this output format *exactly*. Do not include greetings, summaries, or comments before or after the output:\n\n**<VIOLATION TYPE>**\n```kotlin\n<Refactored code>\n```\n<Explanation of the refactoring>\n\nExample output:\n**SRP**\n```java\npublic class ReportGenerator {\n    public String generateReport() {\n        return \"Report data\";\n    }\n}\n```\nThe class previously handled both data generation and file I/O. Now it only generates the report, following SRP.\n\nHere is the code:\nclass FileHandler {\n    fun readFile(path: String) {\n        // Read file\n    }\n    fun writeFile(path: String, content: String) {\n        // Write file\n    }\n    fun logOperation(operation: String) {\n        // Log file operation\n    }\n}", "raw_response": "**SRP**\n```kotlin\nclass FileReader {\n    fun readFile(path: String) {\n        // Read file\n    }\n}\n\nclass FileWriter {\n    fun writeFile(path: String, content: String) {\n        // Write file\n    }\n}\n\nclass FileLogger {\n    fun logOperation(operation: String) {\n        // Log file operation\n    }\n}\n```\nThe original `FileHandler` class was responsible for reading, writing, and logging file operations, violating the Single Responsibility Principle (SRP). The refactored code separates these concerns into three distinct classes: `FileReader`, `FileWriter`, and `FileLogger`, each handling a single responsibility.", "violation": "SRP", "violation_list": ["SRP"], "explanation": "**SRP**", "solution_code": "class FileReader {\n    fun readFile(path: String) {\n        // Read file\n    }\n}\n\nclass FileWriter {\n    fun writeFile(path: String, content: String) {\n        // Write file\n    }\n}\n\nclass FileLogger {\n    fun logOperation(operation: String) {\n        // Log file operation\n    }\n}", "duration_seconds": 2.4711251258850098}
{"id": 31, "strategy": "example", "violation_type": "srp", "model": "gpt-4o-mini", "language": "KOTLIN", "input": "class AuthService {\n    fun login(username: String, password: String) {\n        // Login user\n    }\n    fun logout() {\n        // Logout user\n    }\n    fun sendLoginNotification(user: User) {\n        // Send notification\n    }\n}", "prompt": "You are an expert in identifying and refactoring SOLID principle violations in KOTLIN code. Your task is to analyze the code provided and respond in the exact format below, without any additional text or commentary.\n\nYou must provide the following three parts in your response:\n1. The violated SOLID principle (e.g., SRP, OCP, LSP, ISP, DIP). If no violation exists, respond with **NONE**.\n2. A complete refactored version of the code that removes the violation. YOU MUST RETURN ONLY THE CODE BLOCK.\n3. A brief explanation of the violation and the refactoring.\n\nUse these criteria to detect violations:\n- **SRP**: A class does too many unrelated tasks.\n- **OCP**: Multiple `if-else` or `switch` blocks for logic that should be handled by polymorphism.\n- **LSP**: Subclasses override behavior in a way that breaks the contract of the base class (e.g., throw exceptions).\n- **ISP**: Interfaces that are too large or force implementing unnecessary methods.\n- **DIP**: High-level classes directly depend on low-level classes instead of abstractions.\n\nIf more than one violation is present, report only the most prominent one.\n\n**IMPORTANT:** Follow this output format *exactly*. Do not include greetings, summaries, or comments before or after the output:\n\n**<VIOLATION TYPE>**\n```kotlin\n<Refactored code>\n```\n<Explanation of the refactoring>\n\nExample output:\n**SRP**\n```java\npublic class ReportGenerator {\n    public String generateReport() {\n        return \"Report data\";\n    }\n}\n```\nThe class previously handled both data generation and file I/O. Now it only generates the report, following SRP.\n\nHere is the code:\nclass AuthService {\n    fun login(username: String, password: String) {\n        // Login user\n    }\n    fun logout() {\n        // Logout user\n    }\n    fun sendLoginNotification(user: User) {\n        // Send notification\n    }\n}", "raw_response": "**SRP**\n```kotlin\nclass AuthService {\n    fun login(username: String, password: String) {\n        // Login user\n    }\n    \n    fun logout() {\n        // Logout user\n    }\n}\n\nclass NotificationService {\n    fun sendLoginNotification(user: User) {\n        // Send notification\n    }\n}\n```\nThe `AuthService` class previously handled both authentication and notification responsibilities. Now, it only manages user authentication, while a separate `NotificationService` class handles notifications, adhering to the Single Responsibility Principle (SRP).", "violation": "SRP", "violation_list": ["SRP"], "explanation": "**SRP**", "solution_code": "class AuthService {\n    fun login(username: String, password: String) {\n        // Login user\n    }\n    \n    fun logout() {\n        // Logout user\n    }\n}\n\nclass NotificationService {\n    fun sendLoginNotification(user: User) {\n        // Send notification\n    }\n}", "duration_seconds": 2.3053858280181885}
{"id": 32, "strategy": "example", "violation_type": "srp", "model": "gpt-4o-mini", "language": "kotlin", "input": "import java.sql.Connection\nimport java.sql.DriverManager\nimport javax.mail.internet.InternetAddress\nimport javax.mail.internet.MimeMessage\nimport javax.mail.Session\nimport java.util.Properties\nimport java.util.Date\n\ndata class ScheduledTask(val id: String, val type: String, val payload: String, var status: String, var lastRun: Date?)\n\nclass JobExecutor(private val dbUrl: String, private val smtpHost: String) {\n\n    fun executePendingJobs() {\n        println(\"[JobExecutor] Starting execution of pending jobs.\")\n\n        val pendingTasks = fetchPendingTasks()\n        println(\"[JobExecutor] Fetched ${pendingTasks.size} pending tasks.\")\n\n        if (pendingTasks.isEmpty()) {\n            println(\"[JobExecutor] No pending tasks to execute.\")\n            return\n        }\n\n        for (task in pendingTasks) {\n            println(\"[JobExecutor] Executing task: ${task.id} (${task.type})\")\n            task.status = \"RUNNING\"\n            updateTaskStatus(task)\n\n            try {\n                val success = executeTask(task)\n                if (success) {\n                    task.status = \"COMPLETED\"\n                    println(\"[JobExecutor] Task ${task.id} completed successfully.\")\n                } else {\n                    task.status = \"FAILED\"\n                    println(\"[JobExecutor] Task ${task.id} failed execution.\")\n                    sendFailureNotification(task, \"Task execution returned false\")\n                }\n            } catch (e: Exception) {\n                task.status = \"FAILED\"\n                println(\"[JobExecutor] Task ${task.id} failed with exception: ${e.message}\")\n                sendFailureNotification(task, \"Exception: ${e.message}\")\n            }\n            task.lastRun = Date()\n            updateTaskStatus(task)\n        }\n\n        println(\"[JobExecutor] Finished execution of pending jobs.\")\n    }\n\n\n    private fun fetchPendingTasks(): List<ScheduledTask> {\n        println(\"[JobExecutor] Fetching pending tasks from DB $dbUrl...\")\n        var conn: Connection? = null\n        val tasks = mutableListOf<ScheduledTask>()\n        try {\n            conn = DriverManager.getConnection(dbUrl)\n             tasks.add(ScheduledTask(\"task1\", \"REPORT_EMAIL\", \"user@example.com,ReportA\", \"PENDING\", null))\n             tasks.add(ScheduledTask(\"task2\", \"DATA_SYNC\", \"SourceX,DestY\", \"PENDING\", null))\n             tasks.add(ScheduledTask(\"task3\", \"UNKNOWN_TYPE\", \"payload\", \"PENDING\", null))\n        } catch (e: Exception) {\n            println(\"[JobExecutor] DB Fetch Error: ${e.message}\")\n        } finally {\n            conn?.close()\n        }\n        return tasks\n    }\n\n\n    private fun updateTaskStatus(task: ScheduledTask) {\n        println(\"[JobExecutor] Updating status for task ${task.id} to ${task.status} in DB $dbUrl...\")\n        var conn: Connection? = null\n        try {\n            conn = DriverManager.getConnection(dbUrl)\n\n        } catch (e: Exception) {\n            println(\"[JobExecutor] DB Update Error: ${e.message}\")\n        } finally {\n            conn?.close()\n        }\n    }\n\n\n    private fun executeTask(task: ScheduledTask): Boolean {\n        println(\"[JobExecutor] Executing task logic for type: ${task.type}\")\n        return when (task.type) {\n            \"REPORT_EMAIL\" -> sendReportEmailTask(task.payload)\n            \"DATA_SYNC\" -> performDataSyncTask(task.payload)\n            else -> {\n                println(\"[JobExecutor] Unknown task type: ${task.type}\")\n                false\n            }\n        }\n    }\n\n\n    private fun sendReportEmailTask(payload: String): Boolean {\n        println(\"[JobExecutor] Running Send Report Email Task with payload: $payload\")\n        val parts = payload.split(\",\")\n        if (parts.size != 2) return false\n        val email = parts[0]\n        val reportName = parts[1]\n        println(\"[JobExecutor] Simulating sending $reportName report to $email...\")\n\n        return true\n    }\n\n\n    private fun performDataSyncTask(payload: String): Boolean {\n         println(\"[JobExecutor] Running Data Sync Task with payload: $payload\")\n         val parts = payload.split(\",\")\n         if (parts.size != 2) return false\n         val source = parts[0]\n         val dest = parts[1]\n         println(\"[JobExecutor] Simulating syncing data from $source to $dest...\")\n\n         return true\n    }\n\n\n    private fun sendFailureNotification(task: ScheduledTask, reason: String) {\n        println(\"[JobExecutor] Sending failure notification for task ${task.id}...\")\n        val props = Properties()\n        props[\"mail.smtp.host\"] = smtpHost\n        val session = Session.getInstance(props)\n        val message = MimeMessage(session)\n        message.setFrom(InternetAddress(\"no-reply@jobexecutor.com\"))\n\n        message.setRecipients(MimeMessage.RecipientType.TO, InternetAddress.parse(\"admin@example.com\"))\n        message.subject = \"Scheduled Task Failed: ${task.id}\"\n        message.setText(\"Task ${task.id} (${task.type}) failed.\\nReason: $reason\\nPayload: ${task.payload}\")\n\n    }\n}\n", "prompt": "You are an expert in identifying and refactoring SOLID principle violations in kotlin code. Your task is to analyze the code provided and respond in the exact format below, without any additional text or commentary.\n\nYou must provide the following three parts in your response:\n1. The violated SOLID principle (e.g., SRP, OCP, LSP, ISP, DIP). If no violation exists, respond with **NONE**.\n2. A complete refactored version of the code that removes the violation. YOU MUST RETURN ONLY THE CODE BLOCK.\n3. A brief explanation of the violation and the refactoring.\n\nUse these criteria to detect violations:\n- **SRP**: A class does too many unrelated tasks.\n- **OCP**: Multiple `if-else` or `switch` blocks for logic that should be handled by polymorphism.\n- **LSP**: Subclasses override behavior in a way that breaks the contract of the base class (e.g., throw exceptions).\n- **ISP**: Interfaces that are too large or force implementing unnecessary methods.\n- **DIP**: High-level classes directly depend on low-level classes instead of abstractions.\n\nIf more than one violation is present, report only the most prominent one.\n\n**IMPORTANT:** Follow this output format *exactly*. Do not include greetings, summaries, or comments before or after the output:\n\n**<VIOLATION TYPE>**\n```kotlin\n<Refactored code>\n```\n<Explanation of the refactoring>\n\nExample output:\n**SRP**\n```java\npublic class ReportGenerator {\n    public String generateReport() {\n        return \"Report data\";\n    }\n}\n```\nThe class previously handled both data generation and file I/O. Now it only generates the report, following SRP.\n\nHere is the code:\nimport java.sql.Connection\nimport java.sql.DriverManager\nimport javax.mail.internet.InternetAddress\nimport javax.mail.internet.MimeMessage\nimport javax.mail.Session\nimport java.util.Properties\nimport java.util.Date\n\ndata class ScheduledTask(val id: String, val type: String, val payload: String, var status: String, var lastRun: Date?)\n\nclass JobExecutor(private val dbUrl: String, private val smtpHost: String) {\n\n    fun executePendingJobs() {\n        println(\"[JobExecutor] Starting execution of pending jobs.\")\n\n        val pendingTasks = fetchPendingTasks()\n        println(\"[JobExecutor] Fetched ${pendingTasks.size} pending tasks.\")\n\n        if (pendingTasks.isEmpty()) {\n            println(\"[JobExecutor] No pending tasks to execute.\")\n            return\n        }\n\n        for (task in pendingTasks) {\n            println(\"[JobExecutor] Executing task: ${task.id} (${task.type})\")\n            task.status = \"RUNNING\"\n            updateTaskStatus(task)\n\n            try {\n                val success = executeTask(task)\n                if (success) {\n                    task.status = \"COMPLETED\"\n                    println(\"[JobExecutor] Task ${task.id} completed successfully.\")\n                } else {\n                    task.status = \"FAILED\"\n                    println(\"[JobExecutor] Task ${task.id} failed execution.\")\n                    sendFailureNotification(task, \"Task execution returned false\")\n                }\n            } catch (e: Exception) {\n                task.status = \"FAILED\"\n                println(\"[JobExecutor] Task ${task.id} failed with exception: ${e.message}\")\n                sendFailureNotification(task, \"Exception: ${e.message}\")\n            }\n            task.lastRun = Date()\n            updateTaskStatus(task)\n        }\n\n        println(\"[JobExecutor] Finished execution of pending jobs.\")\n    }\n\n\n    private fun fetchPendingTasks(): List<ScheduledTask> {\n        println(\"[JobExecutor] Fetching pending tasks from DB $dbUrl...\")\n        var conn: Connection? = null\n        val tasks = mutableListOf<ScheduledTask>()\n        try {\n            conn = DriverManager.getConnection(dbUrl)\n             tasks.add(ScheduledTask(\"task1\", \"REPORT_EMAIL\", \"user@example.com,ReportA\", \"PENDING\", null))\n             tasks.add(ScheduledTask(\"task2\", \"DATA_SYNC\", \"SourceX,DestY\", \"PENDING\", null))\n             tasks.add(ScheduledTask(\"task3\", \"UNKNOWN_TYPE\", \"payload\", \"PENDING\", null))\n        } catch (e: Exception) {\n            println(\"[JobExecutor] DB Fetch Error: ${e.message}\")\n        } finally {\n            conn?.close()\n        }\n        return tasks\n    }\n\n\n    private fun updateTaskStatus(task: ScheduledTask) {\n        println(\"[JobExecutor] Updating status for task ${task.id} to ${task.status} in DB $dbUrl...\")\n        var conn: Connection? = null\n        try {\n            conn = DriverManager.getConnection(dbUrl)\n\n        } catch (e: Exception) {\n            println(\"[JobExecutor] DB Update Error: ${e.message}\")\n        } finally {\n            conn?.close()\n        }\n    }\n\n\n    private fun executeTask(task: ScheduledTask): Boolean {\n        println(\"[JobExecutor] Executing task logic for type: ${task.type}\")\n        return when (task.type) {\n            \"REPORT_EMAIL\" -> sendReportEmailTask(task.payload)\n            \"DATA_SYNC\" -> performDataSyncTask(task.payload)\n            else -> {\n                println(\"[JobExecutor] Unknown task type: ${task.type}\")\n                false\n            }\n        }\n    }\n\n\n    private fun sendReportEmailTask(payload: String): Boolean {\n        println(\"[JobExecutor] Running Send Report Email Task with payload: $payload\")\n        val parts = payload.split(\",\")\n        if (parts.size != 2) return false\n        val email = parts[0]\n        val reportName = parts[1]\n        println(\"[JobExecutor] Simulating sending $reportName report to $email...\")\n\n        return true\n    }\n\n\n    private fun performDataSyncTask(payload: String): Boolean {\n         println(\"[JobExecutor] Running Data Sync Task with payload: $payload\")\n         val parts = payload.split(\",\")\n         if (parts.size != 2) return false\n         val source = parts[0]\n         val dest = parts[1]\n         println(\"[JobExecutor] Simulating syncing data from $source to $dest...\")\n\n         return true\n    }\n\n\n    private fun sendFailureNotification(task: ScheduledTask, reason: String) {\n        println(\"[JobExecutor] Sending failure notification for task ${task.id}...\")\n        val props = Properties()\n        props[\"mail.smtp.host\"] = smtpHost\n        val session = Session.getInstance(props)\n        val message = MimeMessage(session)\n        message.setFrom(InternetAddress(\"no-reply@jobexecutor.com\"))\n\n        message.setRecipients(MimeMessage.RecipientType.TO, InternetAddress.parse(\"admin@example.com\"))\n        message.subject = \"Scheduled Task Failed: ${task.id}\"\n        message.setText(\"Task ${task.id} (${task.type}) failed.\\nReason: $reason\\nPayload: ${task.payload}\")\n\n    }\n}\n", "raw_response": "**SRP**\n```kotlin\ndata class ScheduledTask(val id: String, val type: String, val payload: String, var status: String, var lastRun: Date?)\n\ninterface Task {\n    fun execute(): Boolean\n}\n\nclass ReportEmailTask(private val payload: String) : Task {\n    override fun execute(): Boolean {\n        println(\"[ReportEmailTask] Running Send Report Email Task with payload: $payload\")\n        val parts = payload.split(\",\")\n        if (parts.size != 2) return false\n        val email = parts[0]\n        val reportName = parts[1]\n        println(\"[ReportEmailTask] Simulating sending $reportName report to $email...\")\n        return true\n    }\n}\n\nclass DataSyncTask(private val payload: String) : Task {\n    override fun execute(): Boolean {\n        println(\"[DataSyncTask] Running Data Sync Task with payload: $payload\")\n        val parts = payload.split(\",\")\n        if (parts.size != 2) return false\n        val source = parts[0]\n        val dest = parts[1]\n        println(\"[DataSyncTask] Simulating syncing data from $source to $dest...\")\n        return true\n    }\n}\n\nclass JobExecutor(private val dbUrl: String, private val smtpHost: String) {\n\n    fun executePendingJobs() {\n        println(\"[JobExecutor] Starting execution of pending jobs.\")\n\n        val pendingTasks = fetchPendingTasks()\n        println(\"[JobExecutor] Fetched ${pendingTasks.size} pending tasks.\")\n\n        if (pendingTasks.isEmpty()) {\n            println(\"[JobExecutor] No pending tasks to execute.\")\n            return\n        }\n\n        for (task in pendingTasks) {\n            println(\"[JobExecutor] Executing task: ${task.id} (${task.type})\")\n            task.status = \"RUNNING\"\n            updateTaskStatus(task)\n\n            try {\n                val success = executeTask(task)\n                if (success) {\n                    task.status = \"COMPLETED\"\n                    println(\"[JobExecutor] Task ${task.id} completed successfully.\")\n                } else {\n                    task.status = \"FAILED\"\n                    println(\"[JobExecutor] Task ${task.id} failed execution.\")\n                    sendFailureNotification(task, \"Task execution returned false\")\n                }\n            } catch (e: Exception) {\n                task.status = \"FAILED\"\n                println(\"[JobExecutor] Task ${task.id} failed with exception: ${e.message}\")\n                sendFailureNotification(task, \"Exception: ${e.message}\")\n            }\n            task.lastRun = Date()\n            updateTaskStatus(task)\n        }\n\n        println(\"[JobExecutor] Finished execution of pending jobs.\")\n    }\n\n    private fun fetchPendingTasks(): List<ScheduledTask> {\n        println(\"[JobExecutor] Fetching pending tasks from DB $dbUrl...\")\n        return listOf(\n            ScheduledTask(\"task1\", \"REPORT_EMAIL\", \"user@example.com,ReportA\", \"PENDING\", null),\n            ScheduledTask(\"task2\", \"DATA_SYNC\", \"SourceX,DestY\", \"PENDING\", null)\n        )\n    }\n\n    private fun updateTaskStatus(task: ScheduledTask) {\n        println(\"[JobExecutor] Updating status for task ${task.id} to ${task.status} in DB $dbUrl...\")\n    }\n\n    private fun executeTask(task: ScheduledTask): Boolean {\n        val taskExecutor: Task = when (task.type) {\n            \"REPORT_EMAIL\" -> ReportEmailTask(task.payload)\n            \"DATA_SYNC\" -> DataSyncTask(task.payload)\n            else -> {\n                println(\"[JobExecutor] Unknown task type: ${task.type}\")\n                return false\n            }\n        }\n        return taskExecutor.execute()\n    }\n\n    private fun sendFailureNotification(task: ScheduledTask, reason: String) {\n        println(\"[JobExecutor] Sending failure notification for task ${task.id}...\")\n        val props = Properties()\n        props[\"mail.smtp.host\"] = smtpHost\n        val session = Session.getInstance(props)\n        val message = MimeMessage(session)\n        message.setFrom(InternetAddress(\"no-reply@jobexecutor.com\"))\n        message.setRecipients(MimeMessage.RecipientType.TO, InternetAddress.parse(\"admin@example.com\"))\n        message.subject = \"Scheduled Task Failed: ${task.id}\"\n        message.setText(\"Task ${task.id} (${task.type}) failed.\\nReason: $reason\\nPayload: ${task.payload}\")\n    }\n}\n```\nThe `JobExecutor` class previously handled multiple responsibilities, including task execution, task fetching, and sending notifications, violating the Single Responsibility Principle (SRP). The refactored code introduces a `Task` interface and specific task implementations (`ReportEmailTask` and `DataSyncTask`), allowing `JobExecutor` to focus solely on job execution logic.", "violation": "SRP", "violation_list": ["SRP"], "explanation": "**SRP**", "solution_code": "data class ScheduledTask(val id: String, val type: String, val payload: String, var status: String, var lastRun: Date?)\n\ninterface Task {\n    fun execute(): Boolean\n}\n\nclass ReportEmailTask(private val payload: String) : Task {\n    override fun execute(): Boolean {\n        println(\"[ReportEmailTask] Running Send Report Email Task with payload: $payload\")\n        val parts = payload.split(\",\")\n        if (parts.size != 2) return false\n        val email = parts[0]\n        val reportName = parts[1]\n        println(\"[ReportEmailTask] Simulating sending $reportName report to $email...\")\n        return true\n    }\n}\n\nclass DataSyncTask(private val payload: String) : Task {\n    override fun execute(): Boolean {\n        println(\"[DataSyncTask] Running Data Sync Task with payload: $payload\")\n        val parts = payload.split(\",\")\n        if (parts.size != 2) return false\n        val source = parts[0]\n        val dest = parts[1]\n        println(\"[DataSyncTask] Simulating syncing data from $source to $dest...\")\n        return true\n    }\n}\n\nclass JobExecutor(private val dbUrl: String, private val smtpHost: String) {\n\n    fun executePendingJobs() {\n        println(\"[JobExecutor] Starting execution of pending jobs.\")\n\n        val pendingTasks = fetchPendingTasks()\n        println(\"[JobExecutor] Fetched ${pendingTasks.size} pending tasks.\")\n\n        if (pendingTasks.isEmpty()) {\n            println(\"[JobExecutor] No pending tasks to execute.\")\n            return\n        }\n\n        for (task in pendingTasks) {\n            println(\"[JobExecutor] Executing task: ${task.id} (${task.type})\")\n            task.status = \"RUNNING\"\n            updateTaskStatus(task)\n\n            try {\n                val success = executeTask(task)\n                if (success) {\n                    task.status = \"COMPLETED\"\n                    println(\"[JobExecutor] Task ${task.id} completed successfully.\")\n                } else {\n                    task.status = \"FAILED\"\n                    println(\"[JobExecutor] Task ${task.id} failed execution.\")\n                    sendFailureNotification(task, \"Task execution returned false\")\n                }\n            } catch (e: Exception) {\n                task.status = \"FAILED\"\n                println(\"[JobExecutor] Task ${task.id} failed with exception: ${e.message}\")\n                sendFailureNotification(task, \"Exception: ${e.message}\")\n            }\n            task.lastRun = Date()\n            updateTaskStatus(task)\n        }\n\n        println(\"[JobExecutor] Finished execution of pending jobs.\")\n    }\n\n    private fun fetchPendingTasks(): List<ScheduledTask> {\n        println(\"[JobExecutor] Fetching pending tasks from DB $dbUrl...\")\n        return listOf(\n            ScheduledTask(\"task1\", \"REPORT_EMAIL\", \"user@example.com,ReportA\", \"PENDING\", null),\n            ScheduledTask(\"task2\", \"DATA_SYNC\", \"SourceX,DestY\", \"PENDING\", null)\n        )\n    }\n\n    private fun updateTaskStatus(task: ScheduledTask) {\n        println(\"[JobExecutor] Updating status for task ${task.id} to ${task.status} in DB $dbUrl...\")\n    }\n\n    private fun executeTask(task: ScheduledTask): Boolean {\n        val taskExecutor: Task = when (task.type) {\n            \"REPORT_EMAIL\" -> ReportEmailTask(task.payload)\n            \"DATA_SYNC\" -> DataSyncTask(task.payload)\n            else -> {\n                println(\"[JobExecutor] Unknown task type: ${task.type}\")\n                return false\n            }\n        }\n        return taskExecutor.execute()\n    }\n\n    private fun sendFailureNotification(task: ScheduledTask, reason: String) {\n        println(\"[JobExecutor] Sending failure notification for task ${task.id}...\")\n        val props = Properties()\n        props[\"mail.smtp.host\"] = smtpHost\n        val session = Session.getInstance(props)\n        val message = MimeMessage(session)\n        message.setFrom(InternetAddress(\"no-reply@jobexecutor.com\"))\n        message.setRecipients(MimeMessage.RecipientType.TO, InternetAddress.parse(\"admin@example.com\"))\n        message.subject = \"Scheduled Task Failed: ${task.id}\"\n        message.setText(\"Task ${task.id} (${task.type}) failed.\\nReason: $reason\\nPayload: ${task.payload}\")\n    }\n}", "duration_seconds": 23.191725492477417}
{"id": 33, "strategy": "example", "violation_type": "srp", "model": "gpt-4o-mini", "language": "KOTLIN", "input": "import java.io.File\nimport java.util.UUID\n\ndata class ApiRequest(val method: String, val path: String, val headers: Map<String, String>, val body: String?)\ndata class ApiResponse(val statusCode: Int, val headers: Map<String, String>, val body: String?)\n\ndata class Product(val id: String, val name: String, val price: Double)\n\nclass ProductApiHandler {\n\n    fun handleRequest(request: ApiRequest): ApiResponse {\n        println(\"[ProductApiHandler] Handling request: ${request.method} ${request.path}\")\n\n        when {\n            request.path == \"/products\" && request.method == \"GET\" -> {\n                println(\"[ProductApiHandler] Handling GET /products\")\n\n                if (!validateHeaders(request.headers)) {\n                     logRequest(\"GET\", \"/products\", 401, \"Invalid Headers\")\n                     return ApiResponse(401, emptyMap(), \"Unauthorized\")\n                }\n                println(\"[ProductApiHandler] Headers validated.\")\n\n                val products = fetchAllProducts()\n                println(\"[ProductApiHandler] Products fetched.\")\n\n                val responseBody = formatProductsResponse(products)\n                println(\"[ProductApiHandler] Response formatted.\")\n\n                logRequest(\"GET\", \"/products\", 200, \"Success\")\n                return ApiResponse(200, mapOf(\"Content-Type\" to \"application/json\"), responseBody)\n\n            }\n            request.path == \"/products\" && request.method == \"POST\" -> {\n                println(\"[ProductApiHandler] Handling POST /products\")\n\n                if (!validateRequestBody(request.body)) {\n                     logRequest(\"POST\", \"/products\", 400, \"Invalid Body\")\n                     return ApiResponse(400, emptyMap(), \"Invalid Request Body\")\n                }\n                println(\"[ProductApiHandler] Request body validated.\")\n\n                val newProduct = parseProductFromRequestBody(request.body!!)\n                println(\"[ProductApiHandler] Product parsed.\")\n\n                if (!saveProduct(newProduct)) {\n                     logRequest(\"POST\", \"/products\", 500, \"Failed to save product\")\n                     return ApiResponse(500, emptyMap(), \"Failed to save product\")\n                }\n                println(\"[ProductApiHandler] Product saved.\")\n\n                logRequest(\"POST\", \"/products\", 201, \"Created\")\n                return ApiResponse(201, emptyMap(), \"Product Created\")\n\n            }\n            else -> {\n                println(\"[ProductApiHandler] Method/Path not supported.\")\n                logRequest(request.method, request.path, 404, \"Not Found\")\n                return ApiResponse(404, emptyMap(), \"Not Found\")\n            }\n        }\n    }\n\n\n    private fun validateHeaders(headers: Map<String, String>): Boolean {\n        println(\"[ProductApiHandler] Validating headers...\")\n\n        return headers.containsKey(\"Authorization\")\n    }\n\n\n    private fun validateRequestBody(body: String?): Boolean {\n        println(\"[ProductApiHandler] Validating request body...\")\n\n        return body != null && body.contains(\"name\") && body.contains(\"price\")\n    }\n\n\n    private fun parseProductFromRequestBody(body: String): Product {\n         println(\"[ProductApiHandler] Parsing request body...\")\n\n         return Product(UUID.randomUUID().toString(), \"Parsed Product\", 0.0)\n    }\n\n\n    private fun fetchAllProducts(): List<Product> {\n        println(\"[ProductApiHandler] Fetching all products from DB...\")\n\n        return listOf(Product(\"1\", \"Old Gadget\", 9.99))\n    }\n\n\n    private fun saveProduct(product: Product): Boolean {\n         println(\"[ProductApiHandler] Saving product ${product.id} to DB...\")\n\n         return true\n    }\n\n\n    private fun formatProductsResponse(products: List<Product>): String {\n        println(\"[ProductApiHandler] Formatting products response...\")\n\n        return \"[{\"id\": \"1\", \"name\": \"Old Gadget\", \"price\": 9.99}]\";\n    }\n\n\n    private fun logRequest(method: String, path: String, statusCode: Int, status: String) {\n        println(\"[ProductApiHandler] LOG: $method $path -> $statusCode ($status)\")\n\n    }\n}\n", "prompt": "You are an expert in identifying and refactoring SOLID principle violations in KOTLIN code. Your task is to analyze the code provided and respond in the exact format below, without any additional text or commentary.\n\nYou must provide the following three parts in your response:\n1. The violated SOLID principle (e.g., SRP, OCP, LSP, ISP, DIP). If no violation exists, respond with **NONE**.\n2. A complete refactored version of the code that removes the violation. YOU MUST RETURN ONLY THE CODE BLOCK.\n3. A brief explanation of the violation and the refactoring.\n\nUse these criteria to detect violations:\n- **SRP**: A class does too many unrelated tasks.\n- **OCP**: Multiple `if-else` or `switch` blocks for logic that should be handled by polymorphism.\n- **LSP**: Subclasses override behavior in a way that breaks the contract of the base class (e.g., throw exceptions).\n- **ISP**: Interfaces that are too large or force implementing unnecessary methods.\n- **DIP**: High-level classes directly depend on low-level classes instead of abstractions.\n\nIf more than one violation is present, report only the most prominent one.\n\n**IMPORTANT:** Follow this output format *exactly*. Do not include greetings, summaries, or comments before or after the output:\n\n**<VIOLATION TYPE>**\n```kotlin\n<Refactored code>\n```\n<Explanation of the refactoring>\n\nExample output:\n**SRP**\n```java\npublic class ReportGenerator {\n    public String generateReport() {\n        return \"Report data\";\n    }\n}\n```\nThe class previously handled both data generation and file I/O. Now it only generates the report, following SRP.\n\nHere is the code:\nimport java.io.File\nimport java.util.UUID\n\ndata class ApiRequest(val method: String, val path: String, val headers: Map<String, String>, val body: String?)\ndata class ApiResponse(val statusCode: Int, val headers: Map<String, String>, val body: String?)\n\ndata class Product(val id: String, val name: String, val price: Double)\n\nclass ProductApiHandler {\n\n    fun handleRequest(request: ApiRequest): ApiResponse {\n        println(\"[ProductApiHandler] Handling request: ${request.method} ${request.path}\")\n\n        when {\n            request.path == \"/products\" && request.method == \"GET\" -> {\n                println(\"[ProductApiHandler] Handling GET /products\")\n\n                if (!validateHeaders(request.headers)) {\n                     logRequest(\"GET\", \"/products\", 401, \"Invalid Headers\")\n                     return ApiResponse(401, emptyMap(), \"Unauthorized\")\n                }\n                println(\"[ProductApiHandler] Headers validated.\")\n\n                val products = fetchAllProducts()\n                println(\"[ProductApiHandler] Products fetched.\")\n\n                val responseBody = formatProductsResponse(products)\n                println(\"[ProductApiHandler] Response formatted.\")\n\n                logRequest(\"GET\", \"/products\", 200, \"Success\")\n                return ApiResponse(200, mapOf(\"Content-Type\" to \"application/json\"), responseBody)\n\n            }\n            request.path == \"/products\" && request.method == \"POST\" -> {\n                println(\"[ProductApiHandler] Handling POST /products\")\n\n                if (!validateRequestBody(request.body)) {\n                     logRequest(\"POST\", \"/products\", 400, \"Invalid Body\")\n                     return ApiResponse(400, emptyMap(), \"Invalid Request Body\")\n                }\n                println(\"[ProductApiHandler] Request body validated.\")\n\n                val newProduct = parseProductFromRequestBody(request.body!!)\n                println(\"[ProductApiHandler] Product parsed.\")\n\n                if (!saveProduct(newProduct)) {\n                     logRequest(\"POST\", \"/products\", 500, \"Failed to save product\")\n                     return ApiResponse(500, emptyMap(), \"Failed to save product\")\n                }\n                println(\"[ProductApiHandler] Product saved.\")\n\n                logRequest(\"POST\", \"/products\", 201, \"Created\")\n                return ApiResponse(201, emptyMap(), \"Product Created\")\n\n            }\n            else -> {\n                println(\"[ProductApiHandler] Method/Path not supported.\")\n                logRequest(request.method, request.path, 404, \"Not Found\")\n                return ApiResponse(404, emptyMap(), \"Not Found\")\n            }\n        }\n    }\n\n\n    private fun validateHeaders(headers: Map<String, String>): Boolean {\n        println(\"[ProductApiHandler] Validating headers...\")\n\n        return headers.containsKey(\"Authorization\")\n    }\n\n\n    private fun validateRequestBody(body: String?): Boolean {\n        println(\"[ProductApiHandler] Validating request body...\")\n\n        return body != null && body.contains(\"name\") && body.contains(\"price\")\n    }\n\n\n    private fun parseProductFromRequestBody(body: String): Product {\n         println(\"[ProductApiHandler] Parsing request body...\")\n\n         return Product(UUID.randomUUID().toString(), \"Parsed Product\", 0.0)\n    }\n\n\n    private fun fetchAllProducts(): List<Product> {\n        println(\"[ProductApiHandler] Fetching all products from DB...\")\n\n        return listOf(Product(\"1\", \"Old Gadget\", 9.99))\n    }\n\n\n    private fun saveProduct(product: Product): Boolean {\n         println(\"[ProductApiHandler] Saving product ${product.id} to DB...\")\n\n         return true\n    }\n\n\n    private fun formatProductsResponse(products: List<Product>): String {\n        println(\"[ProductApiHandler] Formatting products response...\")\n\n        return \"[{\"id\": \"1\", \"name\": \"Old Gadget\", \"price\": 9.99}]\";\n    }\n\n\n    private fun logRequest(method: String, path: String, statusCode: Int, status: String) {\n        println(\"[ProductApiHandler] LOG: $method $path -> $statusCode ($status)\")\n\n    }\n}\n", "raw_response": "**SRP**\n```kotlin\ndata class ApiRequest(val method: String, val path: String, val headers: Map<String, String>, val body: String?)\ndata class ApiResponse(val statusCode: Int, val headers: Map<String, String>, val body: String?)\n\ndata class Product(val id: String, val name: String, val price: Double)\n\nclass ProductApiHandler(private val productService: ProductService) {\n\n    fun handleRequest(request: ApiRequest): ApiResponse {\n        println(\"[ProductApiHandler] Handling request: ${request.method} ${request.path}\")\n\n        return when {\n            request.path == \"/products\" && request.method == \"GET\" -> handleGetProducts(request)\n            request.path == \"/products\" && request.method == \"POST\" -> handlePostProduct(request)\n            else -> handleNotFound(request)\n        }\n    }\n\n    private fun handleGetProducts(request: ApiRequest): ApiResponse {\n        if (!validateHeaders(request.headers)) {\n            logRequest(\"GET\", \"/products\", 401, \"Invalid Headers\")\n            return ApiResponse(401, emptyMap(), \"Unauthorized\")\n        }\n\n        val products = productService.fetchAllProducts()\n        val responseBody = formatProductsResponse(products)\n        logRequest(\"GET\", \"/products\", 200, \"Success\")\n        return ApiResponse(200, mapOf(\"Content-Type\" to \"application/json\"), responseBody)\n    }\n\n    private fun handlePostProduct(request: ApiRequest): ApiResponse {\n        if (!validateRequestBody(request.body)) {\n            logRequest(\"POST\", \"/products\", 400, \"Invalid Body\")\n            return ApiResponse(400, emptyMap(), \"Invalid Request Body\")\n        }\n\n        val newProduct = parseProductFromRequestBody(request.body!!)\n        if (!productService.saveProduct(newProduct)) {\n            logRequest(\"POST\", \"/products\", 500, \"Failed to save product\")\n            return ApiResponse(500, emptyMap(), \"Failed to save product\")\n        }\n\n        logRequest(\"POST\", \"/products\", 201, \"Created\")\n        return ApiResponse(201, emptyMap(), \"Product Created\")\n    }\n\n    private fun handleNotFound(request: ApiRequest): ApiResponse {\n        logRequest(request.method, request.path, 404, \"Not Found\")\n        return ApiResponse(404, emptyMap(), \"Not Found\")\n    }\n\n    private fun validateHeaders(headers: Map<String, String>): Boolean {\n        return headers.containsKey(\"Authorization\")\n    }\n\n    private fun validateRequestBody(body: String?): Boolean {\n        return body != null && body.contains(\"name\") && body.contains(\"price\")\n    }\n\n    private fun parseProductFromRequestBody(body: String): Product {\n        return Product(UUID.randomUUID().toString(), \"Parsed Product\", 0.0)\n    }\n\n    private fun formatProductsResponse(products: List<Product>): String {\n        return products.joinToString(prefix = \"[\", postfix = \"]\") { \"\"\"{\"id\": \"${it.id}\", \"name\": \"${it.name}\", \"price\": ${it.price}}\"\"\" }\n    }\n\n    private fun logRequest(method: String, path: String, statusCode: Int, status: String) {\n        println(\"[ProductApiHandler] LOG: $method $path -> $statusCode ($status)\")\n    }\n}\n\nclass ProductService {\n    fun fetchAllProducts(): List<Product> {\n        return listOf(Product(\"1\", \"Old Gadget\", 9.99))\n    }\n\n    fun saveProduct(product: Product): Boolean {\n        return true\n    }\n}\n```\nThe `ProductApiHandler` class previously handled multiple responsibilities, including request handling, validation, logging, and product management. The refactoring separates the product management logic into a `ProductService` class, adhering to the Single Responsibility Principle (SRP). Each class now has a clear, distinct purpose.", "violation": "SRP", "violation_list": ["SRP"], "explanation": "**SRP**", "solution_code": "data class ApiRequest(val method: String, val path: String, val headers: Map<String, String>, val body: String?)\ndata class ApiResponse(val statusCode: Int, val headers: Map<String, String>, val body: String?)\n\ndata class Product(val id: String, val name: String, val price: Double)\n\nclass ProductApiHandler(private val productService: ProductService) {\n\n    fun handleRequest(request: ApiRequest): ApiResponse {\n        println(\"[ProductApiHandler] Handling request: ${request.method} ${request.path}\")\n\n        return when {\n            request.path == \"/products\" && request.method == \"GET\" -> handleGetProducts(request)\n            request.path == \"/products\" && request.method == \"POST\" -> handlePostProduct(request)\n            else -> handleNotFound(request)\n        }\n    }\n\n    private fun handleGetProducts(request: ApiRequest): ApiResponse {\n        if (!validateHeaders(request.headers)) {\n            logRequest(\"GET\", \"/products\", 401, \"Invalid Headers\")\n            return ApiResponse(401, emptyMap(), \"Unauthorized\")\n        }\n\n        val products = productService.fetchAllProducts()\n        val responseBody = formatProductsResponse(products)\n        logRequest(\"GET\", \"/products\", 200, \"Success\")\n        return ApiResponse(200, mapOf(\"Content-Type\" to \"application/json\"), responseBody)\n    }\n\n    private fun handlePostProduct(request: ApiRequest): ApiResponse {\n        if (!validateRequestBody(request.body)) {\n            logRequest(\"POST\", \"/products\", 400, \"Invalid Body\")\n            return ApiResponse(400, emptyMap(), \"Invalid Request Body\")\n        }\n\n        val newProduct = parseProductFromRequestBody(request.body!!)\n        if (!productService.saveProduct(newProduct)) {\n            logRequest(\"POST\", \"/products\", 500, \"Failed to save product\")\n            return ApiResponse(500, emptyMap(), \"Failed to save product\")\n        }\n\n        logRequest(\"POST\", \"/products\", 201, \"Created\")\n        return ApiResponse(201, emptyMap(), \"Product Created\")\n    }\n\n    private fun handleNotFound(request: ApiRequest): ApiResponse {\n        logRequest(request.method, request.path, 404, \"Not Found\")\n        return ApiResponse(404, emptyMap(), \"Not Found\")\n    }\n\n    private fun validateHeaders(headers: Map<String, String>): Boolean {\n        return headers.containsKey(\"Authorization\")\n    }\n\n    private fun validateRequestBody(body: String?): Boolean {\n        return body != null && body.contains(\"name\") && body.contains(\"price\")\n    }\n\n    private fun parseProductFromRequestBody(body: String): Product {\n        return Product(UUID.randomUUID().toString(), \"Parsed Product\", 0.0)\n    }\n\n    private fun formatProductsResponse(products: List<Product>): String {\n        return products.joinToString(prefix = \"[\", postfix = \"]\") { \"\"\"{\"id\": \"${it.id}\", \"name\": \"${it.name}\", \"price\": ${it.price}}\"\"\" }\n    }\n\n    private fun logRequest(method: String, path: String, statusCode: Int, status: String) {\n        println(\"[ProductApiHandler] LOG: $method $path -> $statusCode ($status)\")\n    }\n}\n\nclass ProductService {\n    fun fetchAllProducts(): List<Product> {\n        return listOf(Product(\"1\", \"Old Gadget\", 9.99))\n    }\n\n    fun saveProduct(product: Product): Boolean {\n        return true\n    }\n}", "duration_seconds": 14.752448081970215}
{"id": 34, "strategy": "example", "violation_type": "srp", "model": "gpt-4o-mini", "language": "KOTLIN", "input": "import java.sql.Connection\nimport java.sql.DriverManager\nimport java.io.File\nimport java.awt.Image\nimport javax.imageio.ImageIO\nimport javax.mail.internet.InternetAddress\nimport javax.mail.internet.MimeMessage\nimport javax.mail.Session\nimport java.util.Properties\n\ndata class UserProfile(var id: String, var name: String, var bio: String?, var profilePicturePath: String?)\n\nclass UserProfileManager(private val dbUrl: String, private val profilePictureDir: String, private val smtpHost: String) {\n\n    fun updateProfile(userId: String, name: String?, bio: String?, profilePictureFile: File?): UserProfile? {\n        println(\"[UserProfileManager] Starting profile update for user $userId\")\n\n        val existingProfile = fetchProfile(userId)\n        if (existingProfile == null) {\n            println(\"[UserProfileManager] User profile not found for $userId.\")\n            return null\n        }\n        println(\"[UserProfileManager] Existing profile fetched.\")\n\n        existingProfile.name = name ?: existingProfile.name\n        existingProfile.bio = bio ?: existingProfile.bio\n        println(\"[UserProfileManager] Profile data updated in memory.\")\n\n        var newProfilePicturePath: String? = existingProfile.profilePicturePath\n        if (profilePictureFile != null) {\n            if (!validateImage(profilePictureFile)) {\n                 println(\"[UserProfileManager] Invalid profile picture file.\")\n                 return null\n            }\n            newProfilePicturePath = saveProfilePicture(userId, profilePictureFile)\n            existingProfile.profilePicturePath = newProfilePicturePath\n            println(\"[UserProfileManager] Profile picture processed and saved.\")\n        }\n\n        if (!saveProfile(existingProfile)) {\n            println(\"[UserProfileManager] Failed to save updated profile.\")\n\n            return null\n        }\n        println(\"[UserProfileManager] Profile saved to database.\")\n\n        notifyUserOfUpdate(existingProfile)\n        println(\"[UserProfileManager] User notified of profile update.\")\n\n        println(\"[UserProfileManager] Profile update complete for user $userId.\")\n        return existingProfile\n    }\n\n    private fun fetchProfile(userId: String): UserProfile? {\n        println(\"[UserProfileManager] Fetching profile for $userId from $dbUrl...\")\n        var conn: Connection? = null\n        try {\n            conn = DriverManager.getConnection(dbUrl)\n\n             return UserProfile(userId, \"Test User\", \"Just a test user\", \"\")\n        } catch (e: Exception) {\n            println(\"[UserProfileManager] DB Fetch Error: ${e.message}\")\n            return null\n        } finally {\n            conn?.close()\n        }\n    }\n\n    private fun saveProfile(profile: UserProfile): Boolean {\n        println(\"[UserProfileManager] Saving profile for ${profile.id} to $dbUrl...\")\n        var conn: Connection? = null\n        try {\n            conn = DriverManager.getConnection(dbUrl)\n\n            return true\n        } catch (e: Exception) {\n            println(\"[UserProfileManager] DB Save Error: ${e.message}\")\n            return false\n        } finally {\n            conn?.close()\n        }\n    }\n\n    private fun validateImage(file: File): Boolean {\n         println(\"[UserProfileManager] Validating image file: ${file.name}\")\n\n        return file.exists() && file.length() > 0\n    }\n\n    private fun saveProfilePicture(userId: String, file: File): String? {\n        println(\"[UserProfileManager] Saving profile picture for $userId to $profilePictureDir...\")\n        val image = ImageIO.read(file)\n        if (image == null) {\n             println(\"[UserProfileManager] Could not read image file.\")\n             return null\n        }\n\n        val resizedImage: Image = image.getScaledInstance(128, 128, Image.SCALE_SMOOTH)\n        val outputFileName = \"${userId}_profile.jpg\"\n        val outputFile = File(profilePictureDir, outputFileName)\n        try {\n             ImageIO.write(resizedImage, \"jpg\", outputFile)\n             return outputFile.absolutePath\n        } catch (e: Exception) {\n            println(\"[UserProfileManager] Image Save Error: ${e.message}\")\n            return null\n        }\n    }\n\n    private fun notifyUserOfUpdate(profile: UserProfile) {\n        println(\"[UserProfileManager] Notifying user ${profile.id} via $smtpHost...\")\n        val props = Properties()\n        props[\"mail.smtp.host\"] = smtpHost\n        val session = Session.getInstance(props)\n        val message = MimeMessage(session)\n        message.setFrom(InternetAddress(\"no-reply@app.com\"))\n\n        message.setRecipients(MimeMessage.RecipientType.TO, InternetAddress.parse(\"test@example.com\"))\n        message.subject = \"Your Profile Has Been Updated\"\n        message.setText(\"Hello ${profile.name}, your profile information was recently updated.\")\n\n    }\n}\n", "prompt": "You are an expert in identifying and refactoring SOLID principle violations in KOTLIN code. Your task is to analyze the code provided and respond in the exact format below, without any additional text or commentary.\n\nYou must provide the following three parts in your response:\n1. The violated SOLID principle (e.g., SRP, OCP, LSP, ISP, DIP). If no violation exists, respond with **NONE**.\n2. A complete refactored version of the code that removes the violation. YOU MUST RETURN ONLY THE CODE BLOCK.\n3. A brief explanation of the violation and the refactoring.\n\nUse these criteria to detect violations:\n- **SRP**: A class does too many unrelated tasks.\n- **OCP**: Multiple `if-else` or `switch` blocks for logic that should be handled by polymorphism.\n- **LSP**: Subclasses override behavior in a way that breaks the contract of the base class (e.g., throw exceptions).\n- **ISP**: Interfaces that are too large or force implementing unnecessary methods.\n- **DIP**: High-level classes directly depend on low-level classes instead of abstractions.\n\nIf more than one violation is present, report only the most prominent one.\n\n**IMPORTANT:** Follow this output format *exactly*. Do not include greetings, summaries, or comments before or after the output:\n\n**<VIOLATION TYPE>**\n```kotlin\n<Refactored code>\n```\n<Explanation of the refactoring>\n\nExample output:\n**SRP**\n```java\npublic class ReportGenerator {\n    public String generateReport() {\n        return \"Report data\";\n    }\n}\n```\nThe class previously handled both data generation and file I/O. Now it only generates the report, following SRP.\n\nHere is the code:\nimport java.sql.Connection\nimport java.sql.DriverManager\nimport java.io.File\nimport java.awt.Image\nimport javax.imageio.ImageIO\nimport javax.mail.internet.InternetAddress\nimport javax.mail.internet.MimeMessage\nimport javax.mail.Session\nimport java.util.Properties\n\ndata class UserProfile(var id: String, var name: String, var bio: String?, var profilePicturePath: String?)\n\nclass UserProfileManager(private val dbUrl: String, private val profilePictureDir: String, private val smtpHost: String) {\n\n    fun updateProfile(userId: String, name: String?, bio: String?, profilePictureFile: File?): UserProfile? {\n        println(\"[UserProfileManager] Starting profile update for user $userId\")\n\n        val existingProfile = fetchProfile(userId)\n        if (existingProfile == null) {\n            println(\"[UserProfileManager] User profile not found for $userId.\")\n            return null\n        }\n        println(\"[UserProfileManager] Existing profile fetched.\")\n\n        existingProfile.name = name ?: existingProfile.name\n        existingProfile.bio = bio ?: existingProfile.bio\n        println(\"[UserProfileManager] Profile data updated in memory.\")\n\n        var newProfilePicturePath: String? = existingProfile.profilePicturePath\n        if (profilePictureFile != null) {\n            if (!validateImage(profilePictureFile)) {\n                 println(\"[UserProfileManager] Invalid profile picture file.\")\n                 return null\n            }\n            newProfilePicturePath = saveProfilePicture(userId, profilePictureFile)\n            existingProfile.profilePicturePath = newProfilePicturePath\n            println(\"[UserProfileManager] Profile picture processed and saved.\")\n        }\n\n        if (!saveProfile(existingProfile)) {\n            println(\"[UserProfileManager] Failed to save updated profile.\")\n\n            return null\n        }\n        println(\"[UserProfileManager] Profile saved to database.\")\n\n        notifyUserOfUpdate(existingProfile)\n        println(\"[UserProfileManager] User notified of profile update.\")\n\n        println(\"[UserProfileManager] Profile update complete for user $userId.\")\n        return existingProfile\n    }\n\n    private fun fetchProfile(userId: String): UserProfile? {\n        println(\"[UserProfileManager] Fetching profile for $userId from $dbUrl...\")\n        var conn: Connection? = null\n        try {\n            conn = DriverManager.getConnection(dbUrl)\n\n             return UserProfile(userId, \"Test User\", \"Just a test user\", \"\")\n        } catch (e: Exception) {\n            println(\"[UserProfileManager] DB Fetch Error: ${e.message}\")\n            return null\n        } finally {\n            conn?.close()\n        }\n    }\n\n    private fun saveProfile(profile: UserProfile): Boolean {\n        println(\"[UserProfileManager] Saving profile for ${profile.id} to $dbUrl...\")\n        var conn: Connection? = null\n        try {\n            conn = DriverManager.getConnection(dbUrl)\n\n            return true\n        } catch (e: Exception) {\n            println(\"[UserProfileManager] DB Save Error: ${e.message}\")\n            return false\n        } finally {\n            conn?.close()\n        }\n    }\n\n    private fun validateImage(file: File): Boolean {\n         println(\"[UserProfileManager] Validating image file: ${file.name}\")\n\n        return file.exists() && file.length() > 0\n    }\n\n    private fun saveProfilePicture(userId: String, file: File): String? {\n        println(\"[UserProfileManager] Saving profile picture for $userId to $profilePictureDir...\")\n        val image = ImageIO.read(file)\n        if (image == null) {\n             println(\"[UserProfileManager] Could not read image file.\")\n             return null\n        }\n\n        val resizedImage: Image = image.getScaledInstance(128, 128, Image.SCALE_SMOOTH)\n        val outputFileName = \"${userId}_profile.jpg\"\n        val outputFile = File(profilePictureDir, outputFileName)\n        try {\n             ImageIO.write(resizedImage, \"jpg\", outputFile)\n             return outputFile.absolutePath\n        } catch (e: Exception) {\n            println(\"[UserProfileManager] Image Save Error: ${e.message}\")\n            return null\n        }\n    }\n\n    private fun notifyUserOfUpdate(profile: UserProfile) {\n        println(\"[UserProfileManager] Notifying user ${profile.id} via $smtpHost...\")\n        val props = Properties()\n        props[\"mail.smtp.host\"] = smtpHost\n        val session = Session.getInstance(props)\n        val message = MimeMessage(session)\n        message.setFrom(InternetAddress(\"no-reply@app.com\"))\n\n        message.setRecipients(MimeMessage.RecipientType.TO, InternetAddress.parse(\"test@example.com\"))\n        message.subject = \"Your Profile Has Been Updated\"\n        message.setText(\"Hello ${profile.name}, your profile information was recently updated.\")\n\n    }\n}\n", "raw_response": "**SRP**\n```kotlin\ndata class UserProfile(var id: String, var name: String, var bio: String?, var profilePicturePath: String?)\n\nclass UserProfileManager(private val dbUrl: String, private val profilePictureDir: String, private val smtpHost: String) {\n\n    fun updateProfile(userId: String, name: String?, bio: String?, profilePictureFile: File?): UserProfile? {\n        println(\"[UserProfileManager] Starting profile update for user $userId\")\n\n        val existingProfile = fetchProfile(userId) ?: return null\n        println(\"[UserProfileManager] Existing profile fetched.\")\n\n        existingProfile.name = name ?: existingProfile.name\n        existingProfile.bio = bio ?: existingProfile.bio\n        println(\"[UserProfileManager] Profile data updated in memory.\")\n\n        profilePictureFile?.let {\n            if (!validateImage(it)) {\n                println(\"[UserProfileManager] Invalid profile picture file.\")\n                return null\n            }\n            existingProfile.profilePicturePath = saveProfilePicture(userId, it)\n            println(\"[UserProfileManager] Profile picture processed and saved.\")\n        }\n\n        if (!saveProfile(existingProfile)) {\n            println(\"[UserProfileManager] Failed to save updated profile.\")\n            return null\n        }\n        println(\"[UserProfileManager] Profile saved to database.\")\n\n        notifyUserOfUpdate(existingProfile)\n        println(\"[UserProfileManager] User notified of profile update.\")\n\n        println(\"[UserProfileManager] Profile update complete for user $userId.\")\n        return existingProfile\n    }\n\n    private fun fetchProfile(userId: String): UserProfile? {\n        println(\"[UserProfileManager] Fetching profile for $userId from $dbUrl...\")\n        return try {\n            UserProfile(userId, \"Test User\", \"Just a test user\", \"\")\n        } catch (e: Exception) {\n            println(\"[UserProfileManager] DB Fetch Error: ${e.message}\")\n            null\n        }\n    }\n\n    private fun saveProfile(profile: UserProfile): Boolean {\n        println(\"[UserProfileManager] Saving profile for ${profile.id} to $dbUrl...\")\n        return try {\n            true\n        } catch (e: Exception) {\n            println(\"[UserProfileManager] DB Save Error: ${e.message}\")\n            false\n        }\n    }\n\n    private fun validateImage(file: File): Boolean {\n        println(\"[UserProfileManager] Validating image file: ${file.name}\")\n        return file.exists() && file.length() > 0\n    }\n\n    private fun saveProfilePicture(userId: String, file: File): String? {\n        println(\"[UserProfileManager] Saving profile picture for $userId to $profilePictureDir...\")\n        val image = ImageIO.read(file) ?: return null.also { println(\"[UserProfileManager] Could not read image file.\") }\n\n        val resizedImage: Image = image.getScaledInstance(128, 128, Image.SCALE_SMOOTH)\n        val outputFileName = \"${userId}_profile.jpg\"\n        val outputFile = File(profilePictureDir, outputFileName)\n        return try {\n            ImageIO.write(resizedImage, \"jpg\", outputFile)\n            outputFile.absolutePath\n        } catch (e: Exception) {\n            println(\"[UserProfileManager] Image Save Error: ${e.message}\")\n            null\n        }\n    }\n\n    private fun notifyUserOfUpdate(profile: UserProfile) {\n        println(\"[UserProfileManager] Notifying user ${profile.id} via $smtpHost...\")\n        val props = Properties().apply { this[\"mail.smtp.host\"] = smtpHost }\n        val session = Session.getInstance(props)\n        val message = MimeMessage(session).apply {\n            setFrom(InternetAddress(\"no-reply@app.com\"))\n            setRecipients(MimeMessage.RecipientType.TO, InternetAddress.parse(\"test@example.com\"))\n            subject = \"Your Profile Has Been Updated\"\n            setText(\"Hello ${profile.name}, your profile information was recently updated.\")\n        }\n    }\n}\n```\nThe `UserProfileManager` class was handling multiple responsibilities: fetching profiles, saving profiles, validating images, saving profile pictures, and notifying users. This violates the Single Responsibility Principle (SRP). The refactored code maintains the same functionality but organizes the responsibilities more clearly, allowing for easier maintenance and testing.", "violation": "SRP", "violation_list": ["SRP"], "explanation": "**SRP**", "solution_code": "data class UserProfile(var id: String, var name: String, var bio: String?, var profilePicturePath: String?)\n\nclass UserProfileManager(private val dbUrl: String, private val profilePictureDir: String, private val smtpHost: String) {\n\n    fun updateProfile(userId: String, name: String?, bio: String?, profilePictureFile: File?): UserProfile? {\n        println(\"[UserProfileManager] Starting profile update for user $userId\")\n\n        val existingProfile = fetchProfile(userId) ?: return null\n        println(\"[UserProfileManager] Existing profile fetched.\")\n\n        existingProfile.name = name ?: existingProfile.name\n        existingProfile.bio = bio ?: existingProfile.bio\n        println(\"[UserProfileManager] Profile data updated in memory.\")\n\n        profilePictureFile?.let {\n            if (!validateImage(it)) {\n                println(\"[UserProfileManager] Invalid profile picture file.\")\n                return null\n            }\n            existingProfile.profilePicturePath = saveProfilePicture(userId, it)\n            println(\"[UserProfileManager] Profile picture processed and saved.\")\n        }\n\n        if (!saveProfile(existingProfile)) {\n            println(\"[UserProfileManager] Failed to save updated profile.\")\n            return null\n        }\n        println(\"[UserProfileManager] Profile saved to database.\")\n\n        notifyUserOfUpdate(existingProfile)\n        println(\"[UserProfileManager] User notified of profile update.\")\n\n        println(\"[UserProfileManager] Profile update complete for user $userId.\")\n        return existingProfile\n    }\n\n    private fun fetchProfile(userId: String): UserProfile? {\n        println(\"[UserProfileManager] Fetching profile for $userId from $dbUrl...\")\n        return try {\n            UserProfile(userId, \"Test User\", \"Just a test user\", \"\")\n        } catch (e: Exception) {\n            println(\"[UserProfileManager] DB Fetch Error: ${e.message}\")\n            null\n        }\n    }\n\n    private fun saveProfile(profile: UserProfile): Boolean {\n        println(\"[UserProfileManager] Saving profile for ${profile.id} to $dbUrl...\")\n        return try {\n            true\n        } catch (e: Exception) {\n            println(\"[UserProfileManager] DB Save Error: ${e.message}\")\n            false\n        }\n    }\n\n    private fun validateImage(file: File): Boolean {\n        println(\"[UserProfileManager] Validating image file: ${file.name}\")\n        return file.exists() && file.length() > 0\n    }\n\n    private fun saveProfilePicture(userId: String, file: File): String? {\n        println(\"[UserProfileManager] Saving profile picture for $userId to $profilePictureDir...\")\n        val image = ImageIO.read(file) ?: return null.also { println(\"[UserProfileManager] Could not read image file.\") }\n\n        val resizedImage: Image = image.getScaledInstance(128, 128, Image.SCALE_SMOOTH)\n        val outputFileName = \"${userId}_profile.jpg\"\n        val outputFile = File(profilePictureDir, outputFileName)\n        return try {\n            ImageIO.write(resizedImage, \"jpg\", outputFile)\n            outputFile.absolutePath\n        } catch (e: Exception) {\n            println(\"[UserProfileManager] Image Save Error: ${e.message}\")\n            null\n        }\n    }\n\n    private fun notifyUserOfUpdate(profile: UserProfile) {\n        println(\"[UserProfileManager] Notifying user ${profile.id} via $smtpHost...\")\n        val props = Properties().apply { this[\"mail.smtp.host\"] = smtpHost }\n        val session = Session.getInstance(props)\n        val message = MimeMessage(session).apply {\n            setFrom(InternetAddress(\"no-reply@app.com\"))\n            setRecipients(MimeMessage.RecipientType.TO, InternetAddress.parse(\"test@example.com\"))\n            subject = \"Your Profile Has Been Updated\"\n            setText(\"Hello ${profile.name}, your profile information was recently updated.\")\n        }\n    }\n}", "duration_seconds": 16.962281942367554}
{"id": 35, "strategy": "example", "violation_type": "srp", "model": "gpt-4o-mini", "language": "KOTLIN", "input": "import java.sql.Connection\nimport java.sql.DriverManager\nimport javax.mail.internet.InternetAddress\nimport javax.mail.internet.MimeMessage\nimport javax.mail.Session\nimport java.util.Properties\n\ndata class Product(val id: String, val name: String, val price: Double)\ndata class CartItem(val product: Product, val quantity: Int)\ndata class ShoppingCart(val items: List<CartItem>)\ndata class Order(val id: String, val items: List<CartItem>, val totalAmount: Double, val customerEmail: String)\n\nclass CheckoutService(private val dbUrl: String, private val paymentGatewayUrl: String, private val smtpHost: String) {\n\n    fun processCheckout(cart: ShoppingCart, customerEmail: String): Order? {\n        println(\"[CheckoutService] Starting checkout process...\")\n\n        if (!validateCart(cart)) {\n            println(\"[CheckoutService] Cart validation failed.\")\n            return null\n        }\n        println(\"[CheckoutService] Cart validated.\")\n\n        if (!checkInventory(cart)) {\n            println(\"[CheckoutService] Inventory check failed.\")\n            return null\n        }\n        println(\"[CheckoutService] Inventory checked.\")\n\n        val totalAmount = calculateTotal(cart)\n        println(\"[CheckoutService] Total amount calculated: $totalAmount\")\n\n        if (!processPayment(customerEmail, totalAmount)) {\n            println(\"[CheckoutService] Payment processing failed.\")\n\n            return null\n        }\n        println(\"[CheckoutService] Payment processed.\")\n\n        val order = saveOrder(cart, totalAmount, customerEmail)\n        if (order == null) {\n            println(\"[CheckoutService] Failed to save order.\")\n\n            return null\n        }\n        println(\"[CheckoutService] Order saved: ${order.id}\")\n\n        updateInventory(cart)\n        println(\"[CheckoutService] Inventory updated.\")\n\n        sendOrderConfirmationEmail(customerEmail, order)\n        println(\"[CheckoutService] Order confirmation email sent.\")\n\n        println(\"[CheckoutService] Checkout process completed successfully.\")\n        return order\n    }\n\n    private fun validateCart(cart: ShoppingCart): Boolean {\n        println(\"[CheckoutService] Validating cart...\")\n        return cart.items.isNotEmpty()\n    }\n\n    private fun checkInventory(cart: ShoppingCart): Boolean {\n        println(\"[CheckoutService] Checking inventory via $paymentGatewayUrl...\")\n\n        return true\n    }\n\n    private fun calculateTotal(cart: ShoppingCart): Double {\n        println(\"[CheckoutService] Calculating total...\")\n        return cart.items.sumByDouble { it.product.price * it.quantity }\n    }\n\n    private fun processPayment(email: String, amount: Double): Boolean {\n        println(\"[CheckoutService] Processing payment for $amount via $paymentGatewayUrl...\")\n\n        return true\n    }\n\n    private fun saveOrder(cart: ShoppingCart, totalAmount: Double, customerEmail: String): Order? {\n        println(\"[CheckoutService] Saving order to DB $dbUrl...\")\n        var conn: Connection? = null\n        try {\n            conn = DriverManager.getConnection(dbUrl)\n\n            val orderId = \"ORDER_${System.currentTimeMillis()}\"\n\n            return Order(orderId, cart.items, totalAmount, customerEmail)\n        } catch (e: Exception) {\n            println(\"[CheckoutService] DB Error: ${e.message}\")\n            return null\n        } finally {\n            conn?.close()\n        }\n    }\n\n    private fun updateInventory(cart: ShoppingCart) {\n        println(\"[CheckoutService] Updating inventory via $paymentGatewayUrl...\")\n\n    }\n\n    private fun sendOrderConfirmationEmail(email: String, order: Order) {\n        println(\"[CheckoutService] Sending confirmation email to $email via $smtpHost...\")\n        val props = Properties()\n        props[\"mail.smtp.host\"] = smtpHost\n        val session = Session.getInstance(props)\n        val message = MimeMessage(session)\n        message.setFrom(InternetAddress(\"no-reply@app.com\"))\n        message.setRecipients(MimeMessage.RecipientType.TO, InternetAddress.parse(email))\n        message.subject = \"Order Confirmation ${order.id}\"\n        message.setText(\"Thank you for your order! Order ID: ${order.id}, Total: ${order.totalAmount}\")\n\n    }\n}\n", "prompt": "You are an expert in identifying and refactoring SOLID principle violations in KOTLIN code. Your task is to analyze the code provided and respond in the exact format below, without any additional text or commentary.\n\nYou must provide the following three parts in your response:\n1. The violated SOLID principle (e.g., SRP, OCP, LSP, ISP, DIP). If no violation exists, respond with **NONE**.\n2. A complete refactored version of the code that removes the violation. YOU MUST RETURN ONLY THE CODE BLOCK.\n3. A brief explanation of the violation and the refactoring.\n\nUse these criteria to detect violations:\n- **SRP**: A class does too many unrelated tasks.\n- **OCP**: Multiple `if-else` or `switch` blocks for logic that should be handled by polymorphism.\n- **LSP**: Subclasses override behavior in a way that breaks the contract of the base class (e.g., throw exceptions).\n- **ISP**: Interfaces that are too large or force implementing unnecessary methods.\n- **DIP**: High-level classes directly depend on low-level classes instead of abstractions.\n\nIf more than one violation is present, report only the most prominent one.\n\n**IMPORTANT:** Follow this output format *exactly*. Do not include greetings, summaries, or comments before or after the output:\n\n**<VIOLATION TYPE>**\n```kotlin\n<Refactored code>\n```\n<Explanation of the refactoring>\n\nExample output:\n**SRP**\n```java\npublic class ReportGenerator {\n    public String generateReport() {\n        return \"Report data\";\n    }\n}\n```\nThe class previously handled both data generation and file I/O. Now it only generates the report, following SRP.\n\nHere is the code:\nimport java.sql.Connection\nimport java.sql.DriverManager\nimport javax.mail.internet.InternetAddress\nimport javax.mail.internet.MimeMessage\nimport javax.mail.Session\nimport java.util.Properties\n\ndata class Product(val id: String, val name: String, val price: Double)\ndata class CartItem(val product: Product, val quantity: Int)\ndata class ShoppingCart(val items: List<CartItem>)\ndata class Order(val id: String, val items: List<CartItem>, val totalAmount: Double, val customerEmail: String)\n\nclass CheckoutService(private val dbUrl: String, private val paymentGatewayUrl: String, private val smtpHost: String) {\n\n    fun processCheckout(cart: ShoppingCart, customerEmail: String): Order? {\n        println(\"[CheckoutService] Starting checkout process...\")\n\n        if (!validateCart(cart)) {\n            println(\"[CheckoutService] Cart validation failed.\")\n            return null\n        }\n        println(\"[CheckoutService] Cart validated.\")\n\n        if (!checkInventory(cart)) {\n            println(\"[CheckoutService] Inventory check failed.\")\n            return null\n        }\n        println(\"[CheckoutService] Inventory checked.\")\n\n        val totalAmount = calculateTotal(cart)\n        println(\"[CheckoutService] Total amount calculated: $totalAmount\")\n\n        if (!processPayment(customerEmail, totalAmount)) {\n            println(\"[CheckoutService] Payment processing failed.\")\n\n            return null\n        }\n        println(\"[CheckoutService] Payment processed.\")\n\n        val order = saveOrder(cart, totalAmount, customerEmail)\n        if (order == null) {\n            println(\"[CheckoutService] Failed to save order.\")\n\n            return null\n        }\n        println(\"[CheckoutService] Order saved: ${order.id}\")\n\n        updateInventory(cart)\n        println(\"[CheckoutService] Inventory updated.\")\n\n        sendOrderConfirmationEmail(customerEmail, order)\n        println(\"[CheckoutService] Order confirmation email sent.\")\n\n        println(\"[CheckoutService] Checkout process completed successfully.\")\n        return order\n    }\n\n    private fun validateCart(cart: ShoppingCart): Boolean {\n        println(\"[CheckoutService] Validating cart...\")\n        return cart.items.isNotEmpty()\n    }\n\n    private fun checkInventory(cart: ShoppingCart): Boolean {\n        println(\"[CheckoutService] Checking inventory via $paymentGatewayUrl...\")\n\n        return true\n    }\n\n    private fun calculateTotal(cart: ShoppingCart): Double {\n        println(\"[CheckoutService] Calculating total...\")\n        return cart.items.sumByDouble { it.product.price * it.quantity }\n    }\n\n    private fun processPayment(email: String, amount: Double): Boolean {\n        println(\"[CheckoutService] Processing payment for $amount via $paymentGatewayUrl...\")\n\n        return true\n    }\n\n    private fun saveOrder(cart: ShoppingCart, totalAmount: Double, customerEmail: String): Order? {\n        println(\"[CheckoutService] Saving order to DB $dbUrl...\")\n        var conn: Connection? = null\n        try {\n            conn = DriverManager.getConnection(dbUrl)\n\n            val orderId = \"ORDER_${System.currentTimeMillis()}\"\n\n            return Order(orderId, cart.items, totalAmount, customerEmail)\n        } catch (e: Exception) {\n            println(\"[CheckoutService] DB Error: ${e.message}\")\n            return null\n        } finally {\n            conn?.close()\n        }\n    }\n\n    private fun updateInventory(cart: ShoppingCart) {\n        println(\"[CheckoutService] Updating inventory via $paymentGatewayUrl...\")\n\n    }\n\n    private fun sendOrderConfirmationEmail(email: String, order: Order) {\n        println(\"[CheckoutService] Sending confirmation email to $email via $smtpHost...\")\n        val props = Properties()\n        props[\"mail.smtp.host\"] = smtpHost\n        val session = Session.getInstance(props)\n        val message = MimeMessage(session)\n        message.setFrom(InternetAddress(\"no-reply@app.com\"))\n        message.setRecipients(MimeMessage.RecipientType.TO, InternetAddress.parse(email))\n        message.subject = \"Order Confirmation ${order.id}\"\n        message.setText(\"Thank you for your order! Order ID: ${order.id}, Total: ${order.totalAmount}\")\n\n    }\n}\n", "raw_response": "**SRP**\n```kotlin\ndata class Product(val id: String, val name: String, val price: Double)\ndata class CartItem(val product: Product, val quantity: Int)\ndata class ShoppingCart(val items: List<CartItem>)\ndata class Order(val id: String, val items: List<CartItem>, val totalAmount: Double, val customerEmail: String)\n\nclass CheckoutService(private val orderRepository: OrderRepository, private val paymentProcessor: PaymentProcessor, private val emailService: EmailService) {\n\n    fun processCheckout(cart: ShoppingCart, customerEmail: String): Order? {\n        println(\"[CheckoutService] Starting checkout process...\")\n\n        if (!validateCart(cart)) {\n            println(\"[CheckoutService] Cart validation failed.\")\n            return null\n        }\n        println(\"[CheckoutService] Cart validated.\")\n\n        if (!checkInventory(cart)) {\n            println(\"[CheckoutService] Inventory check failed.\")\n            return null\n        }\n        println(\"[CheckoutService] Inventory checked.\")\n\n        val totalAmount = calculateTotal(cart)\n        println(\"[CheckoutService] Total amount calculated: $totalAmount\")\n\n        if (!paymentProcessor.processPayment(customerEmail, totalAmount)) {\n            println(\"[CheckoutService] Payment processing failed.\")\n            return null\n        }\n        println(\"[CheckoutService] Payment processed.\")\n\n        val order = orderRepository.saveOrder(cart, totalAmount, customerEmail)\n        if (order == null) {\n            println(\"[CheckoutService] Failed to save order.\")\n            return null\n        }\n        println(\"[CheckoutService] Order saved: ${order.id}\")\n\n        updateInventory(cart)\n        println(\"[CheckoutService] Inventory updated.\")\n\n        emailService.sendOrderConfirmationEmail(customerEmail, order)\n        println(\"[CheckoutService] Order confirmation email sent.\")\n\n        println(\"[CheckoutService] Checkout process completed successfully.\")\n        return order\n    }\n\n    private fun validateCart(cart: ShoppingCart): Boolean {\n        println(\"[CheckoutService] Validating cart...\")\n        return cart.items.isNotEmpty()\n    }\n\n    private fun checkInventory(cart: ShoppingCart): Boolean {\n        println(\"[CheckoutService] Checking inventory...\")\n        return true\n    }\n\n    private fun calculateTotal(cart: ShoppingCart): Double {\n        println(\"[CheckoutService] Calculating total...\")\n        return cart.items.sumByDouble { it.product.price * it.quantity }\n    }\n}\n\ninterface OrderRepository {\n    fun saveOrder(cart: ShoppingCart, totalAmount: Double, customerEmail: String): Order?\n}\n\ninterface PaymentProcessor {\n    fun processPayment(email: String, amount: Double): Boolean\n}\n\ninterface EmailService {\n    fun sendOrderConfirmationEmail(email: String, order: Order)\n}\n```\nThe `CheckoutService` class previously handled multiple responsibilities, including payment processing, order saving, and email sending, violating the Single Responsibility Principle (SRP). The refactored code introduces separate interfaces for `OrderRepository`, `PaymentProcessor`, and `EmailService`, allowing `CheckoutService` to focus solely on the checkout process. Each responsibility is now encapsulated in its own class, adhering to SRP.", "violation": "SRP", "violation_list": ["SRP"], "explanation": "**SRP**", "solution_code": "data class Product(val id: String, val name: String, val price: Double)\ndata class CartItem(val product: Product, val quantity: Int)\ndata class ShoppingCart(val items: List<CartItem>)\ndata class Order(val id: String, val items: List<CartItem>, val totalAmount: Double, val customerEmail: String)\n\nclass CheckoutService(private val orderRepository: OrderRepository, private val paymentProcessor: PaymentProcessor, private val emailService: EmailService) {\n\n    fun processCheckout(cart: ShoppingCart, customerEmail: String): Order? {\n        println(\"[CheckoutService] Starting checkout process...\")\n\n        if (!validateCart(cart)) {\n            println(\"[CheckoutService] Cart validation failed.\")\n            return null\n        }\n        println(\"[CheckoutService] Cart validated.\")\n\n        if (!checkInventory(cart)) {\n            println(\"[CheckoutService] Inventory check failed.\")\n            return null\n        }\n        println(\"[CheckoutService] Inventory checked.\")\n\n        val totalAmount = calculateTotal(cart)\n        println(\"[CheckoutService] Total amount calculated: $totalAmount\")\n\n        if (!paymentProcessor.processPayment(customerEmail, totalAmount)) {\n            println(\"[CheckoutService] Payment processing failed.\")\n            return null\n        }\n        println(\"[CheckoutService] Payment processed.\")\n\n        val order = orderRepository.saveOrder(cart, totalAmount, customerEmail)\n        if (order == null) {\n            println(\"[CheckoutService] Failed to save order.\")\n            return null\n        }\n        println(\"[CheckoutService] Order saved: ${order.id}\")\n\n        updateInventory(cart)\n        println(\"[CheckoutService] Inventory updated.\")\n\n        emailService.sendOrderConfirmationEmail(customerEmail, order)\n        println(\"[CheckoutService] Order confirmation email sent.\")\n\n        println(\"[CheckoutService] Checkout process completed successfully.\")\n        return order\n    }\n\n    private fun validateCart(cart: ShoppingCart): Boolean {\n        println(\"[CheckoutService] Validating cart...\")\n        return cart.items.isNotEmpty()\n    }\n\n    private fun checkInventory(cart: ShoppingCart): Boolean {\n        println(\"[CheckoutService] Checking inventory...\")\n        return true\n    }\n\n    private fun calculateTotal(cart: ShoppingCart): Double {\n        println(\"[CheckoutService] Calculating total...\")\n        return cart.items.sumByDouble { it.product.price * it.quantity }\n    }\n}\n\ninterface OrderRepository {\n    fun saveOrder(cart: ShoppingCart, totalAmount: Double, customerEmail: String): Order?\n}\n\ninterface PaymentProcessor {\n    fun processPayment(email: String, amount: Double): Boolean\n}\n\ninterface EmailService {\n    fun sendOrderConfirmationEmail(email: String, order: Order)\n}", "duration_seconds": 9.75403881072998}
{"id": 36, "strategy": "example", "violation_type": "srp", "model": "gpt-4o-mini", "language": "C#", "input": "public class Invoice {\n    public void CalculateTotal() {\n        // calculate total\n    }\n    public void SaveToDatabase() {\n        // save to db\n    }\n}", "prompt": "You are an expert in identifying and refactoring SOLID principle violations in C# code. Your task is to analyze the code provided and respond in the exact format below, without any additional text or commentary.\n\nYou must provide the following three parts in your response:\n1. The violated SOLID principle (e.g., SRP, OCP, LSP, ISP, DIP). If no violation exists, respond with **NONE**.\n2. A complete refactored version of the code that removes the violation. YOU MUST RETURN ONLY THE CODE BLOCK.\n3. A brief explanation of the violation and the refactoring.\n\nUse these criteria to detect violations:\n- **SRP**: A class does too many unrelated tasks.\n- **OCP**: Multiple `if-else` or `switch` blocks for logic that should be handled by polymorphism.\n- **LSP**: Subclasses override behavior in a way that breaks the contract of the base class (e.g., throw exceptions).\n- **ISP**: Interfaces that are too large or force implementing unnecessary methods.\n- **DIP**: High-level classes directly depend on low-level classes instead of abstractions.\n\nIf more than one violation is present, report only the most prominent one.\n\n**IMPORTANT:** Follow this output format *exactly*. Do not include greetings, summaries, or comments before or after the output:\n\n**<VIOLATION TYPE>**\n```c#\n<Refactored code>\n```\n<Explanation of the refactoring>\n\nExample output:\n**SRP**\n```java\npublic class ReportGenerator {\n    public String generateReport() {\n        return \"Report data\";\n    }\n}\n```\nThe class previously handled both data generation and file I/O. Now it only generates the report, following SRP.\n\nHere is the code:\npublic class Invoice {\n    public void CalculateTotal() {\n        // calculate total\n    }\n    public void SaveToDatabase() {\n        // save to db\n    }\n}", "raw_response": "**SRP**\n```c#\npublic class Invoice {\n    public void CalculateTotal() {\n        // calculate total\n    }\n}\n\npublic class InvoiceRepository {\n    public void SaveToDatabase(Invoice invoice) {\n        // save to db\n    }\n}\n```\nThe `Invoice` class previously handled both total calculation and database saving. Now it only calculates the total, while the `InvoiceRepository` class is responsible for saving to the database, adhering to the Single Responsibility Principle.", "violation": "SRP", "violation_list": ["SRP"], "explanation": "**SRP**", "solution_code": "", "duration_seconds": 2.1651034355163574}
{"id": 37, "strategy": "example", "violation_type": "srp", "model": "gpt-4o-mini", "language": "C#", "input": "public class Report {\n    public void GenerateReport() {\n        // generate report\n    }\n    public void PrintReport() {\n        // print report\n    }\n}", "prompt": "You are an expert in identifying and refactoring SOLID principle violations in C# code. Your task is to analyze the code provided and respond in the exact format below, without any additional text or commentary.\n\nYou must provide the following three parts in your response:\n1. The violated SOLID principle (e.g., SRP, OCP, LSP, ISP, DIP). If no violation exists, respond with **NONE**.\n2. A complete refactored version of the code that removes the violation. YOU MUST RETURN ONLY THE CODE BLOCK.\n3. A brief explanation of the violation and the refactoring.\n\nUse these criteria to detect violations:\n- **SRP**: A class does too many unrelated tasks.\n- **OCP**: Multiple `if-else` or `switch` blocks for logic that should be handled by polymorphism.\n- **LSP**: Subclasses override behavior in a way that breaks the contract of the base class (e.g., throw exceptions).\n- **ISP**: Interfaces that are too large or force implementing unnecessary methods.\n- **DIP**: High-level classes directly depend on low-level classes instead of abstractions.\n\nIf more than one violation is present, report only the most prominent one.\n\n**IMPORTANT:** Follow this output format *exactly*. Do not include greetings, summaries, or comments before or after the output:\n\n**<VIOLATION TYPE>**\n```c#\n<Refactored code>\n```\n<Explanation of the refactoring>\n\nExample output:\n**SRP**\n```java\npublic class ReportGenerator {\n    public String generateReport() {\n        return \"Report data\";\n    }\n}\n```\nThe class previously handled both data generation and file I/O. Now it only generates the report, following SRP.\n\nHere is the code:\npublic class Report {\n    public void GenerateReport() {\n        // generate report\n    }\n    public void PrintReport() {\n        // print report\n    }\n}", "raw_response": "**SRP**\n```c#\npublic class Report {\n    public void GenerateReport() {\n        // generate report\n    }\n}\n\npublic class ReportPrinter {\n    public void PrintReport(Report report) {\n        // print report\n    }\n}\n```\nThe `Report` class previously handled both report generation and printing. Now, the responsibilities are separated into `Report` for generation and `ReportPrinter` for printing, adhering to the Single Responsibility Principle (SRP).", "violation": "SRP", "violation_list": ["SRP"], "explanation": "**SRP**", "solution_code": "", "duration_seconds": 2.6566879749298096}
{"id": 38, "strategy": "example", "violation_type": "srp", "model": "gpt-4o-mini", "language": "C#", "input": "public class User {\n    public void Register() {\n        // register user\n    }\n    public void SendEmail() {\n        // send email\n    }\n}", "prompt": "You are an expert in identifying and refactoring SOLID principle violations in C# code. Your task is to analyze the code provided and respond in the exact format below, without any additional text or commentary.\n\nYou must provide the following three parts in your response:\n1. The violated SOLID principle (e.g., SRP, OCP, LSP, ISP, DIP). If no violation exists, respond with **NONE**.\n2. A complete refactored version of the code that removes the violation. YOU MUST RETURN ONLY THE CODE BLOCK.\n3. A brief explanation of the violation and the refactoring.\n\nUse these criteria to detect violations:\n- **SRP**: A class does too many unrelated tasks.\n- **OCP**: Multiple `if-else` or `switch` blocks for logic that should be handled by polymorphism.\n- **LSP**: Subclasses override behavior in a way that breaks the contract of the base class (e.g., throw exceptions).\n- **ISP**: Interfaces that are too large or force implementing unnecessary methods.\n- **DIP**: High-level classes directly depend on low-level classes instead of abstractions.\n\nIf more than one violation is present, report only the most prominent one.\n\n**IMPORTANT:** Follow this output format *exactly*. Do not include greetings, summaries, or comments before or after the output:\n\n**<VIOLATION TYPE>**\n```c#\n<Refactored code>\n```\n<Explanation of the refactoring>\n\nExample output:\n**SRP**\n```java\npublic class ReportGenerator {\n    public String generateReport() {\n        return \"Report data\";\n    }\n}\n```\nThe class previously handled both data generation and file I/O. Now it only generates the report, following SRP.\n\nHere is the code:\npublic class User {\n    public void Register() {\n        // register user\n    }\n    public void SendEmail() {\n        // send email\n    }\n}", "raw_response": "**SRP**\n```c#\npublic class User {\n    public void Register() {\n        // register user\n    }\n}\n\npublic class EmailService {\n    public void SendEmail() {\n        // send email\n    }\n}\n```\nThe `User` class previously handled both user registration and email sending. Now, the responsibilities are separated into `User` for registration and `EmailService` for sending emails, adhering to the Single Responsibility Principle (SRP).", "violation": "SRP", "violation_list": ["SRP"], "explanation": "**SRP**", "solution_code": "", "duration_seconds": 2.1075289249420166}
{"id": 39, "strategy": "example", "violation_type": "srp", "model": "gpt-4o-mini", "language": "C#", "input": "public class FileManager {\n    public void ReadFile() {\n        // read file\n    }\n    public void LogError() {\n        // log error\n    }\n}", "prompt": "You are an expert in identifying and refactoring SOLID principle violations in C# code. Your task is to analyze the code provided and respond in the exact format below, without any additional text or commentary.\n\nYou must provide the following three parts in your response:\n1. The violated SOLID principle (e.g., SRP, OCP, LSP, ISP, DIP). If no violation exists, respond with **NONE**.\n2. A complete refactored version of the code that removes the violation. YOU MUST RETURN ONLY THE CODE BLOCK.\n3. A brief explanation of the violation and the refactoring.\n\nUse these criteria to detect violations:\n- **SRP**: A class does too many unrelated tasks.\n- **OCP**: Multiple `if-else` or `switch` blocks for logic that should be handled by polymorphism.\n- **LSP**: Subclasses override behavior in a way that breaks the contract of the base class (e.g., throw exceptions).\n- **ISP**: Interfaces that are too large or force implementing unnecessary methods.\n- **DIP**: High-level classes directly depend on low-level classes instead of abstractions.\n\nIf more than one violation is present, report only the most prominent one.\n\n**IMPORTANT:** Follow this output format *exactly*. Do not include greetings, summaries, or comments before or after the output:\n\n**<VIOLATION TYPE>**\n```c#\n<Refactored code>\n```\n<Explanation of the refactoring>\n\nExample output:\n**SRP**\n```java\npublic class ReportGenerator {\n    public String generateReport() {\n        return \"Report data\";\n    }\n}\n```\nThe class previously handled both data generation and file I/O. Now it only generates the report, following SRP.\n\nHere is the code:\npublic class FileManager {\n    public void ReadFile() {\n        // read file\n    }\n    public void LogError() {\n        // log error\n    }\n}", "raw_response": "**SRP**\n```c#\npublic class FileReader {\n    public void ReadFile() {\n        // read file\n    }\n}\n\npublic class ErrorLogger {\n    public void LogError() {\n        // log error\n    }\n}\n```\nThe original `FileManager` class handled both file reading and error logging, violating the Single Responsibility Principle (SRP). The refactored code separates these concerns into two distinct classes: `FileReader` for reading files and `ErrorLogger` for logging errors.", "violation": "SRP", "violation_list": ["SRP"], "explanation": "**SRP**", "solution_code": "", "duration_seconds": 2.2685935497283936}
{"id": 40, "strategy": "example", "violation_type": "srp", "model": "gpt-4o-mini", "language": "C#", "input": "public class Order {\n    public void PlaceOrder() {\n        // place order\n    }\n    public void SendConfirmationEmail() {\n        // send email\n    }\n    public void UpdateStock() {\n        // update stock\n    }\n}", "prompt": "You are an expert in identifying and refactoring SOLID principle violations in C# code. Your task is to analyze the code provided and respond in the exact format below, without any additional text or commentary.\n\nYou must provide the following three parts in your response:\n1. The violated SOLID principle (e.g., SRP, OCP, LSP, ISP, DIP). If no violation exists, respond with **NONE**.\n2. A complete refactored version of the code that removes the violation. YOU MUST RETURN ONLY THE CODE BLOCK.\n3. A brief explanation of the violation and the refactoring.\n\nUse these criteria to detect violations:\n- **SRP**: A class does too many unrelated tasks.\n- **OCP**: Multiple `if-else` or `switch` blocks for logic that should be handled by polymorphism.\n- **LSP**: Subclasses override behavior in a way that breaks the contract of the base class (e.g., throw exceptions).\n- **ISP**: Interfaces that are too large or force implementing unnecessary methods.\n- **DIP**: High-level classes directly depend on low-level classes instead of abstractions.\n\nIf more than one violation is present, report only the most prominent one.\n\n**IMPORTANT:** Follow this output format *exactly*. Do not include greetings, summaries, or comments before or after the output:\n\n**<VIOLATION TYPE>**\n```c#\n<Refactored code>\n```\n<Explanation of the refactoring>\n\nExample output:\n**SRP**\n```java\npublic class ReportGenerator {\n    public String generateReport() {\n        return \"Report data\";\n    }\n}\n```\nThe class previously handled both data generation and file I/O. Now it only generates the report, following SRP.\n\nHere is the code:\npublic class Order {\n    public void PlaceOrder() {\n        // place order\n    }\n    public void SendConfirmationEmail() {\n        // send email\n    }\n    public void UpdateStock() {\n        // update stock\n    }\n}", "raw_response": "**SRP**\n```c#\npublic class Order {\n    public void PlaceOrder() {\n        // place order\n    }\n}\n\npublic class EmailService {\n    public void SendConfirmationEmail() {\n        // send email\n    }\n}\n\npublic class StockService {\n    public void UpdateStock() {\n        // update stock\n    }\n}\n```\nThe original `Order` class handled multiple responsibilities: placing orders, sending emails, and updating stock. The refactoring separates these concerns into distinct classes, adhering to the Single Responsibility Principle (SRP).", "violation": "SRP", "violation_list": ["SRP"], "explanation": "**SRP**", "solution_code": "", "duration_seconds": 2.4107205867767334}
{"id": 41, "strategy": "example", "violation_type": "srp", "model": "gpt-4o-mini", "language": "C#", "input": "public class Customer {\n    public void AddCustomer() {\n        // add customer\n    }\n    public void GenerateCustomerReport() {\n        // generate report\n    }\n    public void ArchiveCustomer() {\n        // archive customer\n    }\n}", "prompt": "You are an expert in identifying and refactoring SOLID principle violations in C# code. Your task is to analyze the code provided and respond in the exact format below, without any additional text or commentary.\n\nYou must provide the following three parts in your response:\n1. The violated SOLID principle (e.g., SRP, OCP, LSP, ISP, DIP). If no violation exists, respond with **NONE**.\n2. A complete refactored version of the code that removes the violation. YOU MUST RETURN ONLY THE CODE BLOCK.\n3. A brief explanation of the violation and the refactoring.\n\nUse these criteria to detect violations:\n- **SRP**: A class does too many unrelated tasks.\n- **OCP**: Multiple `if-else` or `switch` blocks for logic that should be handled by polymorphism.\n- **LSP**: Subclasses override behavior in a way that breaks the contract of the base class (e.g., throw exceptions).\n- **ISP**: Interfaces that are too large or force implementing unnecessary methods.\n- **DIP**: High-level classes directly depend on low-level classes instead of abstractions.\n\nIf more than one violation is present, report only the most prominent one.\n\n**IMPORTANT:** Follow this output format *exactly*. Do not include greetings, summaries, or comments before or after the output:\n\n**<VIOLATION TYPE>**\n```c#\n<Refactored code>\n```\n<Explanation of the refactoring>\n\nExample output:\n**SRP**\n```java\npublic class ReportGenerator {\n    public String generateReport() {\n        return \"Report data\";\n    }\n}\n```\nThe class previously handled both data generation and file I/O. Now it only generates the report, following SRP.\n\nHere is the code:\npublic class Customer {\n    public void AddCustomer() {\n        // add customer\n    }\n    public void GenerateCustomerReport() {\n        // generate report\n    }\n    public void ArchiveCustomer() {\n        // archive customer\n    }\n}", "raw_response": "**SRP**\n```c#\npublic class Customer {\n    public void AddCustomer() {\n        // add customer\n    }\n}\n\npublic class CustomerReportGenerator {\n    public void GenerateCustomerReport() {\n        // generate report\n    }\n}\n\npublic class CustomerArchiver {\n    public void ArchiveCustomer() {\n        // archive customer\n    }\n}\n```\nThe original `Customer` class handled multiple responsibilities: adding customers, generating reports, and archiving customers. The refactoring separates these concerns into distinct classes, adhering to the Single Responsibility Principle (SRP).", "violation": "SRP", "violation_list": ["SRP"], "explanation": "**SRP**", "solution_code": "", "duration_seconds": 3.5909457206726074}
{"id": 42, "strategy": "example", "violation_type": "srp", "model": "gpt-4o-mini", "language": "C#", "input": "public class Product {\n    public void AddProduct() {\n        // add product\n    }\n    public void CalculateDiscount() {\n        // calculate discount\n    }\n    public void NotifyWarehouse() {\n        // notify warehouse\n    }\n}", "prompt": "You are an expert in identifying and refactoring SOLID principle violations in C# code. Your task is to analyze the code provided and respond in the exact format below, without any additional text or commentary.\n\nYou must provide the following three parts in your response:\n1. The violated SOLID principle (e.g., SRP, OCP, LSP, ISP, DIP). If no violation exists, respond with **NONE**.\n2. A complete refactored version of the code that removes the violation. YOU MUST RETURN ONLY THE CODE BLOCK.\n3. A brief explanation of the violation and the refactoring.\n\nUse these criteria to detect violations:\n- **SRP**: A class does too many unrelated tasks.\n- **OCP**: Multiple `if-else` or `switch` blocks for logic that should be handled by polymorphism.\n- **LSP**: Subclasses override behavior in a way that breaks the contract of the base class (e.g., throw exceptions).\n- **ISP**: Interfaces that are too large or force implementing unnecessary methods.\n- **DIP**: High-level classes directly depend on low-level classes instead of abstractions.\n\nIf more than one violation is present, report only the most prominent one.\n\n**IMPORTANT:** Follow this output format *exactly*. Do not include greetings, summaries, or comments before or after the output:\n\n**<VIOLATION TYPE>**\n```c#\n<Refactored code>\n```\n<Explanation of the refactoring>\n\nExample output:\n**SRP**\n```java\npublic class ReportGenerator {\n    public String generateReport() {\n        return \"Report data\";\n    }\n}\n```\nThe class previously handled both data generation and file I/O. Now it only generates the report, following SRP.\n\nHere is the code:\npublic class Product {\n    public void AddProduct() {\n        // add product\n    }\n    public void CalculateDiscount() {\n        // calculate discount\n    }\n    public void NotifyWarehouse() {\n        // notify warehouse\n    }\n}", "raw_response": "**SRP**\n```c#\npublic class Product {\n    public void AddProduct() {\n        // add product\n    }\n}\n\npublic class DiscountCalculator {\n    public void CalculateDiscount() {\n        // calculate discount\n    }\n}\n\npublic class WarehouseNotifier {\n    public void NotifyWarehouse() {\n        // notify warehouse\n    }\n}\n```\nThe original `Product` class handled multiple responsibilities: adding a product, calculating discounts, and notifying the warehouse. The refactored code separates these concerns into distinct classes, adhering to the Single Responsibility Principle (SRP).", "violation": "SRP", "violation_list": ["SRP"], "explanation": "**SRP**", "solution_code": "", "duration_seconds": 2.419401168823242}
{"id": 43, "strategy": "example", "violation_type": "srp", "model": "gpt-4o-mini", "language": "C#", "input": "public class Employee {\n    public void CalculateSalary() {\n        // calculate salary\n    }\n    public void SaveEmployeeData() {\n        // save data\n    }\n    public void SendPayrollEmail() {\n        // send email\n    }\n}", "prompt": "You are an expert in identifying and refactoring SOLID principle violations in C# code. Your task is to analyze the code provided and respond in the exact format below, without any additional text or commentary.\n\nYou must provide the following three parts in your response:\n1. The violated SOLID principle (e.g., SRP, OCP, LSP, ISP, DIP). If no violation exists, respond with **NONE**.\n2. A complete refactored version of the code that removes the violation. YOU MUST RETURN ONLY THE CODE BLOCK.\n3. A brief explanation of the violation and the refactoring.\n\nUse these criteria to detect violations:\n- **SRP**: A class does too many unrelated tasks.\n- **OCP**: Multiple `if-else` or `switch` blocks for logic that should be handled by polymorphism.\n- **LSP**: Subclasses override behavior in a way that breaks the contract of the base class (e.g., throw exceptions).\n- **ISP**: Interfaces that are too large or force implementing unnecessary methods.\n- **DIP**: High-level classes directly depend on low-level classes instead of abstractions.\n\nIf more than one violation is present, report only the most prominent one.\n\n**IMPORTANT:** Follow this output format *exactly*. Do not include greetings, summaries, or comments before or after the output:\n\n**<VIOLATION TYPE>**\n```c#\n<Refactored code>\n```\n<Explanation of the refactoring>\n\nExample output:\n**SRP**\n```java\npublic class ReportGenerator {\n    public String generateReport() {\n        return \"Report data\";\n    }\n}\n```\nThe class previously handled both data generation and file I/O. Now it only generates the report, following SRP.\n\nHere is the code:\npublic class Employee {\n    public void CalculateSalary() {\n        // calculate salary\n    }\n    public void SaveEmployeeData() {\n        // save data\n    }\n    public void SendPayrollEmail() {\n        // send email\n    }\n}", "raw_response": "**SRP**\n```c#\npublic class Employee {\n    public void CalculateSalary() {\n        // calculate salary\n    }\n}\n\npublic class EmployeeDataSaver {\n    public void SaveEmployeeData(Employee employee) {\n        // save data\n    }\n}\n\npublic class PayrollEmailSender {\n    public void SendPayrollEmail(Employee employee) {\n        // send email\n    }\n}\n```\nThe original `Employee` class handled multiple responsibilities: salary calculation, data saving, and email sending. The refactoring separates these concerns into distinct classes, adhering to the Single Responsibility Principle (SRP).", "violation": "SRP", "violation_list": ["SRP"], "explanation": "**SRP**", "solution_code": "", "duration_seconds": 2.9245502948760986}
{"id": 44, "strategy": "example", "violation_type": "srp", "model": "gpt-4o-mini", "language": "C#", "input": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading;\n\npublic class TaskProcessingEngine\n{\n    private readonly ITaskQueue _taskQueue;\n    private readonly IDictionary<string, Action<string>> _taskHandlers;\n\n    public TaskProcessingEngine(ITaskQueue taskQueue)\n    {\n        _taskQueue = taskQueue;\n        _taskHandlers = new Dictionary<string, Action<string>>\n        {\n            { \"ProcessOrder\", HandleProcessOrderTask },\n            { \"SendEmail\", HandleSendEmailTask }\n\n        };\n    }\n\n    public void StartProcessing(CancellationToken cancellationToken)\n    {\n        Console.WriteLine(\"[TaskProcessingEngine] Starting processing engine...\");\n\n        while (!cancellationToken.IsCancellationRequested)\n        {\n            try\n            {\n                var task = _taskQueue.Dequeue();\n                if (task == null)\n                {\n                    Console.WriteLine(\"[TaskProcessingEngine] No tasks in queue. Waiting...\");\n                    Thread.Sleep(1000);\n                    continue;\n                }\n\n                Console.WriteLine($\"[TaskProcessingEngine] Dequeued task type: {task.Type}, Payload: {task.Payload}\");\n\n                if (_taskHandlers.TryGetValue(task.Type, out var handler))\n                {\n                    try\n                    {\n                        Console.WriteLine($\"[TaskProcessingEngine] Executing handler for task type: {task.Type}\");\n                        handler.Invoke(task.Payload);\n                        Console.WriteLine($\"[TaskProcessingEngine] Task {task.Type} executed successfully.\");\n                        LogProcessedTask(task.Id, task.Type, true, \"Success\");\n                    }\n                    catch (Exception ex)\n                    {\n                        Console.WriteLine($\"[TaskProcessingEngine] Error executing task {task.Type}: {ex.Message}\");\n                        LogProcessedTask(task.Id, task.Type, false, $\"Execution Error: {ex.Message}\");\n                        // Maybe requeue or move to dead-letter queue - more SRP violations!\n                    }\n                }\n                else\n                {\n                    Console.WriteLine($\"[TaskProcessingEngine] No handler found for task type: {task.Type}\");\n                    LogProcessedTask(task.Id, task.Type, false, \"No Handler Found\");\n                }\n            }\n            catch (Exception ex)\n            {\\n                Console.WriteLine($\"[TaskProcessingEngine] Error dequeuing task: {ex.Message}\");\n                Thread.Sleep(5000);\n            }\n        }\n\n        Console.WriteLine(\"[TaskProcessingEngine] Processing engine stopped.\");\n    }\n\n    private void HandleProcessOrderTask(string payload)\n    {\n        Console.WriteLine($\"[HandleProcessOrderTask] Processing order with payload: {payload}\");\n\n    }\n\n    private void HandleSendEmailTask(string payload)\n    {\n         Console.WriteLine($\"[HandleSendEmailTask] Sending email with payload: {payload}\");\n\n    }\n\n    private void LogProcessedTask(Guid taskId, string taskType, bool success, string resultDetails)\n    {\n        Console.WriteLine($\"[LogProcessedTask] LOG: TaskId={taskId}, Type={taskType}, Success={success}, Details='{resultDetails}'\");\n\n    }\n}\n\npublic interface ITaskQueue\n{\n    QueuedTask Dequeue();\n    void Enqueue(QueuedTask task);\n}\n\npublic class InMemoryTaskQueue : ITaskQueue\n{\n    private readonly Queue<QueuedTask> _tasks = new Queue<QueuedTask>();\n\n    public void Enqueue(QueuedTask task)\n    {\n        lock (_tasks)\n        {\n            _tasks.Enqueue(task);\n            Console.WriteLine($\"[InMemoryTaskQueue] Enqueued task {task.Type}.\");\n        }\n    }\n\n    public QueuedTask Dequeue()\n    {\n        lock (_tasks)\n        {\n            if (_tasks.Any())\n            {\n                return _tasks.Dequeue();\n            }\n            return null;\n        }\n    }\n}\n\npublic class QueuedTask\n{\n    public Guid Id { get; set; }\n    public string Type { get; set; }\n    public string Payload { get; set; }\n}\n", "prompt": "You are an expert in identifying and refactoring SOLID principle violations in C# code. Your task is to analyze the code provided and respond in the exact format below, without any additional text or commentary.\n\nYou must provide the following three parts in your response:\n1. The violated SOLID principle (e.g., SRP, OCP, LSP, ISP, DIP). If no violation exists, respond with **NONE**.\n2. A complete refactored version of the code that removes the violation. YOU MUST RETURN ONLY THE CODE BLOCK.\n3. A brief explanation of the violation and the refactoring.\n\nUse these criteria to detect violations:\n- **SRP**: A class does too many unrelated tasks.\n- **OCP**: Multiple `if-else` or `switch` blocks for logic that should be handled by polymorphism.\n- **LSP**: Subclasses override behavior in a way that breaks the contract of the base class (e.g., throw exceptions).\n- **ISP**: Interfaces that are too large or force implementing unnecessary methods.\n- **DIP**: High-level classes directly depend on low-level classes instead of abstractions.\n\nIf more than one violation is present, report only the most prominent one.\n\n**IMPORTANT:** Follow this output format *exactly*. Do not include greetings, summaries, or comments before or after the output:\n\n**<VIOLATION TYPE>**\n```c#\n<Refactored code>\n```\n<Explanation of the refactoring>\n\nExample output:\n**SRP**\n```java\npublic class ReportGenerator {\n    public String generateReport() {\n        return \"Report data\";\n    }\n}\n```\nThe class previously handled both data generation and file I/O. Now it only generates the report, following SRP.\n\nHere is the code:\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading;\n\npublic class TaskProcessingEngine\n{\n    private readonly ITaskQueue _taskQueue;\n    private readonly IDictionary<string, Action<string>> _taskHandlers;\n\n    public TaskProcessingEngine(ITaskQueue taskQueue)\n    {\n        _taskQueue = taskQueue;\n        _taskHandlers = new Dictionary<string, Action<string>>\n        {\n            { \"ProcessOrder\", HandleProcessOrderTask },\n            { \"SendEmail\", HandleSendEmailTask }\n\n        };\n    }\n\n    public void StartProcessing(CancellationToken cancellationToken)\n    {\n        Console.WriteLine(\"[TaskProcessingEngine] Starting processing engine...\");\n\n        while (!cancellationToken.IsCancellationRequested)\n        {\n            try\n            {\n                var task = _taskQueue.Dequeue();\n                if (task == null)\n                {\n                    Console.WriteLine(\"[TaskProcessingEngine] No tasks in queue. Waiting...\");\n                    Thread.Sleep(1000);\n                    continue;\n                }\n\n                Console.WriteLine($\"[TaskProcessingEngine] Dequeued task type: {task.Type}, Payload: {task.Payload}\");\n\n                if (_taskHandlers.TryGetValue(task.Type, out var handler))\n                {\n                    try\n                    {\n                        Console.WriteLine($\"[TaskProcessingEngine] Executing handler for task type: {task.Type}\");\n                        handler.Invoke(task.Payload);\n                        Console.WriteLine($\"[TaskProcessingEngine] Task {task.Type} executed successfully.\");\n                        LogProcessedTask(task.Id, task.Type, true, \"Success\");\n                    }\n                    catch (Exception ex)\n                    {\n                        Console.WriteLine($\"[TaskProcessingEngine] Error executing task {task.Type}: {ex.Message}\");\n                        LogProcessedTask(task.Id, task.Type, false, $\"Execution Error: {ex.Message}\");\n                        // Maybe requeue or move to dead-letter queue - more SRP violations!\n                    }\n                }\n                else\n                {\n                    Console.WriteLine($\"[TaskProcessingEngine] No handler found for task type: {task.Type}\");\n                    LogProcessedTask(task.Id, task.Type, false, \"No Handler Found\");\n                }\n            }\n            catch (Exception ex)\n            {\\n                Console.WriteLine($\"[TaskProcessingEngine] Error dequeuing task: {ex.Message}\");\n                Thread.Sleep(5000);\n            }\n        }\n\n        Console.WriteLine(\"[TaskProcessingEngine] Processing engine stopped.\");\n    }\n\n    private void HandleProcessOrderTask(string payload)\n    {\n        Console.WriteLine($\"[HandleProcessOrderTask] Processing order with payload: {payload}\");\n\n    }\n\n    private void HandleSendEmailTask(string payload)\n    {\n         Console.WriteLine($\"[HandleSendEmailTask] Sending email with payload: {payload}\");\n\n    }\n\n    private void LogProcessedTask(Guid taskId, string taskType, bool success, string resultDetails)\n    {\n        Console.WriteLine($\"[LogProcessedTask] LOG: TaskId={taskId}, Type={taskType}, Success={success}, Details='{resultDetails}'\");\n\n    }\n}\n\npublic interface ITaskQueue\n{\n    QueuedTask Dequeue();\n    void Enqueue(QueuedTask task);\n}\n\npublic class InMemoryTaskQueue : ITaskQueue\n{\n    private readonly Queue<QueuedTask> _tasks = new Queue<QueuedTask>();\n\n    public void Enqueue(QueuedTask task)\n    {\n        lock (_tasks)\n        {\n            _tasks.Enqueue(task);\n            Console.WriteLine($\"[InMemoryTaskQueue] Enqueued task {task.Type}.\");\n        }\n    }\n\n    public QueuedTask Dequeue()\n    {\n        lock (_tasks)\n        {\n            if (_tasks.Any())\n            {\n                return _tasks.Dequeue();\n            }\n            return null;\n        }\n    }\n}\n\npublic class QueuedTask\n{\n    public Guid Id { get; set; }\n    public string Type { get; set; }\n    public string Payload { get; set; }\n}\n", "raw_response": "**SRP**\n```c#\npublic class TaskProcessingEngine\n{\n    private readonly ITaskQueue _taskQueue;\n    private readonly IDictionary<string, ITaskHandler> _taskHandlers;\n\n    public TaskProcessingEngine(ITaskQueue taskQueue, IEnumerable<ITaskHandler> taskHandlers)\n    {\n        _taskQueue = taskQueue;\n        _taskHandlers = taskHandlers.ToDictionary(handler => handler.TaskType);\n    }\n\n    public void StartProcessing(CancellationToken cancellationToken)\n    {\n        Console.WriteLine(\"[TaskProcessingEngine] Starting processing engine...\");\n\n        while (!cancellationToken.IsCancellationRequested)\n        {\n            try\n            {\n                var task = _taskQueue.Dequeue();\n                if (task == null)\n                {\n                    Console.WriteLine(\"[TaskProcessingEngine] No tasks in queue. Waiting...\");\n                    Thread.Sleep(1000);\n                    continue;\n                }\n\n                Console.WriteLine($\"[TaskProcessingEngine] Dequeued task type: {task.Type}, Payload: {task.Payload}\");\n\n                if (_taskHandlers.TryGetValue(task.Type, out var handler))\n                {\n                    try\n                    {\n                        Console.WriteLine($\"[TaskProcessingEngine] Executing handler for task type: {task.Type}\");\n                        handler.Execute(task.Payload);\n                        Console.WriteLine($\"[TaskProcessingEngine] Task {task.Type} executed successfully.\");\n                        LogProcessedTask(task.Id, task.Type, true, \"Success\");\n                    }\n                    catch (Exception ex)\n                    {\n                        Console.WriteLine($\"[TaskProcessingEngine] Error executing task {task.Type}: {ex.Message}\");\n                        LogProcessedTask(task.Id, task.Type, false, $\"Execution Error: {ex.Message}\");\n                    }\n                }\n                else\n                {\n                    Console.WriteLine($\"[TaskProcessingEngine] No handler found for task type: {task.Type}\");\n                    LogProcessedTask(task.Id, task.Type, false, \"No Handler Found\");\n                }\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine($\"[TaskProcessingEngine] Error dequeuing task: {ex.Message}\");\n                Thread.Sleep(5000);\n            }\n        }\n\n        Console.WriteLine(\"[TaskProcessingEngine] Processing engine stopped.\");\n    }\n\n    private void LogProcessedTask(Guid taskId, string taskType, bool success, string resultDetails)\n    {\n        Console.WriteLine($\"[LogProcessedTask] LOG: TaskId={taskId}, Type={taskType}, Success={success}, Details='{resultDetails}'\");\n    }\n}\n\npublic interface ITaskHandler\n{\n    string TaskType { get; }\n    void Execute(string payload);\n}\n\npublic class ProcessOrderTaskHandler : ITaskHandler\n{\n    public string TaskType => \"ProcessOrder\";\n\n    public void Execute(string payload)\n    {\n        Console.WriteLine($\"[ProcessOrderTaskHandler] Processing order with payload: {payload}\");\n    }\n}\n\npublic class SendEmailTaskHandler : ITaskHandler\n{\n    public string TaskType => \"SendEmail\";\n\n    public void Execute(string payload)\n    {\n        Console.WriteLine($\"[SendEmailTaskHandler] Sending email with payload: {payload}\");\n    }\n}\n```\nThe `TaskProcessingEngine` class previously handled multiple responsibilities, including task handling and logging, which violates the Single Responsibility Principle (SRP). The refactored code introduces an `ITaskHandler` interface and separate handler classes for each task type, allowing the `TaskProcessingEngine` to focus solely on processing tasks and delegating the execution to the appropriate handler. This separation of concerns adheres to SRP.", "violation": "SRP", "violation_list": ["SRP"], "explanation": "**SRP**", "solution_code": "", "duration_seconds": 13.377249240875244}
{"id": 45, "strategy": "example", "violation_type": "srp", "model": "gpt-4o-mini", "language": "C#", "input": "using System;\nusing System.Collections.Generic;\nusing System.Data;\nusing System.Data.SqlClient;\nusing System.IO;\n\npublic class BusinessReportProcessor\n{\n    private readonly string _dbConnectionString;\n    private readonly string _fileStoragePath;\n    private readonly string _uploadServiceEndpoint;\n\n    public BusinessReportProcessor(string dbConnectionString, string fileStoragePath, string uploadServiceEndpoint)\n    {\n        _dbConnectionString = dbConnectionString;\n        _fileStoragePath = fileStoragePath;\n        _uploadServiceEndpoint = uploadServiceEndpoint;\n    }\n\n    public bool GenerateAndUploadSalesSummary(DateTime startDate, DateTime endDate)\n    {\n        Console.WriteLine($\"[BusinessReportProcessor] Starting sales summary generation for {startDate:d} to {endDate:d}\");\n\n        var rawData = FetchSalesData(startDate, endDate);\n        if (rawData == null || rawData.Rows.Count == 0)\n        {\n            Console.WriteLine(\"[BusinessReportProcessor] No data found for the report.\");\n            return false;\n        }\n        Console.WriteLine($\"[BusinessReportProcessor] Fetched {rawData.Rows.Count} rows of data.\");\n\n        var transformedData = TransformDataForReport(rawData);\n        Console.WriteLine(\"[BusinessReportProcessor] Data transformed.\");\n\n        string reportFilePath = GenerateReportFile(transformedData, startDate, endDate);\n        if (string.IsNullOrEmpty(reportFilePath) || !File.Exists(reportFilePath))\n        {\n            Console.WriteLine(\"[BusinessReportProcessor] Report file generation failed.\");\n            return false;\n        }\n        Console.WriteLine($\"[BusinessReportProcessor] Report file generated at {reportFilePath}\");\n\n        if (!UploadReport(reportFilePath))\n        {\n            Console.WriteLine($\"[BusinessReportProcessor] Failed to upload report file {reportFilePath}.\");\n            // Maybe clean up the local file?\n            return false;\n        }\n        Console.WriteLine($\"[BusinessReportProcessor] Report file {reportFilePath} uploaded successfully.\");\n\n        Console.WriteLine(\"[BusinessReportProcessor] Sales summary generation and upload complete.\");\n        return true;\n    }\n\n    private DataTable FetchSalesData(DateTime startDate, DateTime endDate)\n    {\n        Console.WriteLine($\"[FetchSalesData] Fetching sales data from DB {_dbConnectionString}...\");\n        using (var conn = new SqlConnection(_dbConnectionString))\n        {\n\n        }\n        var dt = new DataTable();\n        dt.Columns.Add(\"SaleDate\", typeof(DateTime));\n        dt.Columns.Add(\"Amount\", typeof(decimal));\n        dt.Rows.Add(DateTime.Now.AddDays(-1), 100.0m);\n        dt.Rows.Add(DateTime.Now.AddDays(-2), 150.0m);\n        return dt;\n    }\n\n    private DataTable TransformDataForReport(DataTable rawData)\n    {\n        Console.WriteLine(\"[TransformDataForReport] Transforming data...\");\n        var transformed = new DataTable();\n        transformed.Columns.Add(\"Period\", typeof(string));\n        transformed.Columns.Add(\"TotalSales\", typeof(decimal));\n        decimal total = 0;\n        foreach(DataRow row in rawData.Rows)\n        {\n            total += (decimal)row[\"Amount\"];\n        }\n        transformed.Rows.Add($\"{DateTime.Now:yyyy-MM}\", total);\n        return transformed;\n    }\n\n    private string GenerateReportFile(DataTable data, DateTime startDate, DateTime endDate)\n    {\n        Console.WriteLine($\"[GenerateReportFile] Generating report file in {_fileStoragePath}...\");\n        string filename = $\"SalesSummary_{startDate:yyyyMMdd}_{endDate:yyyyMMdd}.csv\";\n        string fullPath = Path.Combine(_fileStoragePath, filename);\n        try\n        {\n             var lines = new List<string>();\n             lines.Add(string.Join(\",\", data.Columns.Cast<DataColumn>().Select(c => c.ColumnName)));\n             foreach(DataRow row in data.Rows)\n             {\n                 lines.Add(string.Join(\",\", row.ItemArray.Select(item => item.ToString())));\n             }\n             File.WriteAllLines(fullPath, lines);\n             return fullPath;\n        }\n        catch (Exception ex)\n        {\n             Console.WriteLine($\"[GenerateReportFile] Error: {ex.Message}\");\n             return null;\n        }\n    }\n\n    private bool UploadReport(string reportFilePath)\n    {\n        Console.WriteLine($\"[UploadReport] Uploading report {reportFilePath} to service at {_uploadServiceEndpoint}...\");\n\n        return true;\n    }\n}\n", "prompt": "You are an expert in identifying and refactoring SOLID principle violations in C# code. Your task is to analyze the code provided and respond in the exact format below, without any additional text or commentary.\n\nYou must provide the following three parts in your response:\n1. The violated SOLID principle (e.g., SRP, OCP, LSP, ISP, DIP). If no violation exists, respond with **NONE**.\n2. A complete refactored version of the code that removes the violation. YOU MUST RETURN ONLY THE CODE BLOCK.\n3. A brief explanation of the violation and the refactoring.\n\nUse these criteria to detect violations:\n- **SRP**: A class does too many unrelated tasks.\n- **OCP**: Multiple `if-else` or `switch` blocks for logic that should be handled by polymorphism.\n- **LSP**: Subclasses override behavior in a way that breaks the contract of the base class (e.g., throw exceptions).\n- **ISP**: Interfaces that are too large or force implementing unnecessary methods.\n- **DIP**: High-level classes directly depend on low-level classes instead of abstractions.\n\nIf more than one violation is present, report only the most prominent one.\n\n**IMPORTANT:** Follow this output format *exactly*. Do not include greetings, summaries, or comments before or after the output:\n\n**<VIOLATION TYPE>**\n```c#\n<Refactored code>\n```\n<Explanation of the refactoring>\n\nExample output:\n**SRP**\n```java\npublic class ReportGenerator {\n    public String generateReport() {\n        return \"Report data\";\n    }\n}\n```\nThe class previously handled both data generation and file I/O. Now it only generates the report, following SRP.\n\nHere is the code:\nusing System;\nusing System.Collections.Generic;\nusing System.Data;\nusing System.Data.SqlClient;\nusing System.IO;\n\npublic class BusinessReportProcessor\n{\n    private readonly string _dbConnectionString;\n    private readonly string _fileStoragePath;\n    private readonly string _uploadServiceEndpoint;\n\n    public BusinessReportProcessor(string dbConnectionString, string fileStoragePath, string uploadServiceEndpoint)\n    {\n        _dbConnectionString = dbConnectionString;\n        _fileStoragePath = fileStoragePath;\n        _uploadServiceEndpoint = uploadServiceEndpoint;\n    }\n\n    public bool GenerateAndUploadSalesSummary(DateTime startDate, DateTime endDate)\n    {\n        Console.WriteLine($\"[BusinessReportProcessor] Starting sales summary generation for {startDate:d} to {endDate:d}\");\n\n        var rawData = FetchSalesData(startDate, endDate);\n        if (rawData == null || rawData.Rows.Count == 0)\n        {\n            Console.WriteLine(\"[BusinessReportProcessor] No data found for the report.\");\n            return false;\n        }\n        Console.WriteLine($\"[BusinessReportProcessor] Fetched {rawData.Rows.Count} rows of data.\");\n\n        var transformedData = TransformDataForReport(rawData);\n        Console.WriteLine(\"[BusinessReportProcessor] Data transformed.\");\n\n        string reportFilePath = GenerateReportFile(transformedData, startDate, endDate);\n        if (string.IsNullOrEmpty(reportFilePath) || !File.Exists(reportFilePath))\n        {\n            Console.WriteLine(\"[BusinessReportProcessor] Report file generation failed.\");\n            return false;\n        }\n        Console.WriteLine($\"[BusinessReportProcessor] Report file generated at {reportFilePath}\");\n\n        if (!UploadReport(reportFilePath))\n        {\n            Console.WriteLine($\"[BusinessReportProcessor] Failed to upload report file {reportFilePath}.\");\n            // Maybe clean up the local file?\n            return false;\n        }\n        Console.WriteLine($\"[BusinessReportProcessor] Report file {reportFilePath} uploaded successfully.\");\n\n        Console.WriteLine(\"[BusinessReportProcessor] Sales summary generation and upload complete.\");\n        return true;\n    }\n\n    private DataTable FetchSalesData(DateTime startDate, DateTime endDate)\n    {\n        Console.WriteLine($\"[FetchSalesData] Fetching sales data from DB {_dbConnectionString}...\");\n        using (var conn = new SqlConnection(_dbConnectionString))\n        {\n\n        }\n        var dt = new DataTable();\n        dt.Columns.Add(\"SaleDate\", typeof(DateTime));\n        dt.Columns.Add(\"Amount\", typeof(decimal));\n        dt.Rows.Add(DateTime.Now.AddDays(-1), 100.0m);\n        dt.Rows.Add(DateTime.Now.AddDays(-2), 150.0m);\n        return dt;\n    }\n\n    private DataTable TransformDataForReport(DataTable rawData)\n    {\n        Console.WriteLine(\"[TransformDataForReport] Transforming data...\");\n        var transformed = new DataTable();\n        transformed.Columns.Add(\"Period\", typeof(string));\n        transformed.Columns.Add(\"TotalSales\", typeof(decimal));\n        decimal total = 0;\n        foreach(DataRow row in rawData.Rows)\n        {\n            total += (decimal)row[\"Amount\"];\n        }\n        transformed.Rows.Add($\"{DateTime.Now:yyyy-MM}\", total);\n        return transformed;\n    }\n\n    private string GenerateReportFile(DataTable data, DateTime startDate, DateTime endDate)\n    {\n        Console.WriteLine($\"[GenerateReportFile] Generating report file in {_fileStoragePath}...\");\n        string filename = $\"SalesSummary_{startDate:yyyyMMdd}_{endDate:yyyyMMdd}.csv\";\n        string fullPath = Path.Combine(_fileStoragePath, filename);\n        try\n        {\n             var lines = new List<string>();\n             lines.Add(string.Join(\",\", data.Columns.Cast<DataColumn>().Select(c => c.ColumnName)));\n             foreach(DataRow row in data.Rows)\n             {\n                 lines.Add(string.Join(\",\", row.ItemArray.Select(item => item.ToString())));\n             }\n             File.WriteAllLines(fullPath, lines);\n             return fullPath;\n        }\n        catch (Exception ex)\n        {\n             Console.WriteLine($\"[GenerateReportFile] Error: {ex.Message}\");\n             return null;\n        }\n    }\n\n    private bool UploadReport(string reportFilePath)\n    {\n        Console.WriteLine($\"[UploadReport] Uploading report {reportFilePath} to service at {_uploadServiceEndpoint}...\");\n\n        return true;\n    }\n}\n", "raw_response": "**SRP**\n```c#\npublic class BusinessReportProcessor\n{\n    private readonly IDataFetcher _dataFetcher;\n    private readonly IDataTransformer _dataTransformer;\n    private readonly IReportGenerator _reportGenerator;\n    private readonly IReportUploader _reportUploader;\n\n    public BusinessReportProcessor(IDataFetcher dataFetcher, IDataTransformer dataTransformer, IReportGenerator reportGenerator, IReportUploader reportUploader)\n    {\n        _dataFetcher = dataFetcher;\n        _dataTransformer = dataTransformer;\n        _reportGenerator = reportGenerator;\n        _reportUploader = reportUploader;\n    }\n\n    public bool GenerateAndUploadSalesSummary(DateTime startDate, DateTime endDate)\n    {\n        Console.WriteLine($\"[BusinessReportProcessor] Starting sales summary generation for {startDate:d} to {endDate:d}\");\n\n        var rawData = _dataFetcher.FetchSalesData(startDate, endDate);\n        if (rawData == null || rawData.Rows.Count == 0)\n        {\n            Console.WriteLine(\"[BusinessReportProcessor] No data found for the report.\");\n            return false;\n        }\n        Console.WriteLine($\"[BusinessReportProcessor] Fetched {rawData.Rows.Count} rows of data.\");\n\n        var transformedData = _dataTransformer.TransformDataForReport(rawData);\n        Console.WriteLine(\"[BusinessReportProcessor] Data transformed.\");\n\n        string reportFilePath = _reportGenerator.GenerateReportFile(transformedData, startDate, endDate);\n        if (string.IsNullOrEmpty(reportFilePath))\n        {\n            Console.WriteLine(\"[BusinessReportProcessor] Report file generation failed.\");\n            return false;\n        }\n        Console.WriteLine($\"[BusinessReportProcessor] Report file generated at {reportFilePath}\");\n\n        if (!_reportUploader.UploadReport(reportFilePath))\n        {\n            Console.WriteLine($\"[BusinessReportProcessor] Failed to upload report file {reportFilePath}.\");\n            return false;\n        }\n        Console.WriteLine($\"[BusinessReportProcessor] Report file {reportFilePath} uploaded successfully.\");\n\n        Console.WriteLine(\"[BusinessReportProcessor] Sales summary generation and upload complete.\");\n        return true;\n    }\n}\n\npublic interface IDataFetcher\n{\n    DataTable FetchSalesData(DateTime startDate, DateTime endDate);\n}\n\npublic interface IDataTransformer\n{\n    DataTable TransformDataForReport(DataTable rawData);\n}\n\npublic interface IReportGenerator\n{\n    string GenerateReportFile(DataTable data, DateTime startDate, DateTime endDate);\n}\n\npublic interface IReportUploader\n{\n    bool UploadReport(string reportFilePath);\n}\n```\nThe original class handled multiple responsibilities: fetching data, transforming data, generating reports, and uploading reports, violating the Single Responsibility Principle (SRP). The refactored code separates these concerns into distinct interfaces and classes, allowing each class to focus on a single responsibility.", "violation": "SRP", "violation_list": ["SRP"], "explanation": "**SRP**", "solution_code": "", "duration_seconds": 11.03095030784607}
{"id": 46, "strategy": "example", "violation_type": "srp", "model": "gpt-4o-mini", "language": "C#", "input": "using System;\nusing System.Data.SqlClient;\nusing System.Security.Cryptography;\nusing System.Text;\n\npublic class AccountManager\n{\n    private readonly string _dbConnectionString;\n\n    public AccountManager(string dbConnectionString)\n    {\n        _dbConnectionString = dbConnectionString;\n    }\n\n    public bool CreateUserAccount(string username, string password, string role, string permissionsJson)\n    {\n        Console.WriteLine($\"[AccountManager] Attempting to create account for {username}\");\n\n        if (UserExists(username))\n        {\n            Console.WriteLine(\"[AccountManager] User {username} already exists.\");\n            LogAudit(\"CreateAccount\", username, \"User Exists\", false);\n            return false;\n        }\n        Console.WriteLine(\"[AccountManager] User does not exist.\");\n\n        string passwordHash = HashPassword(password);\n        Console.WriteLine(\"[AccountManager] Password hashed.\");\n\n        if (!SaveUserToDatabase(username, passwordHash, role, permissionsJson))\n        {\n            Console.WriteLine(\"[AccountManager] Failed to save user {username} to database.\");\n            LogAudit(\"CreateAccount\", username, \"DB Save Failed\", false);\n            return false;\n        }\n        Console.WriteLine(\"[AccountManager] User {username} saved to database.\");\n\n        LogAudit(\"CreateAccount\", username, \"Success\", true);\n        Console.WriteLine($\"[AccountManager] Account created for {username} with role {role}.\");\n        return true;\n    }\n\n    public bool AssignRoleToUser(string username, string newRole)\n    {\n        Console.WriteLine($\"[AccountManager] Attempting to assign role {newRole} to {username}\");\n\n        if (!UserExists(username))\n        {\n            Console.WriteLine(\"[AccountManager] User {username} not found for role assignment.\");\n            LogAudit(\"AssignRole\", username, \"User Not Found\", false);\n            return false;\n        }\n        Console.WriteLine(\"[AccountManager] User found.\");\n\n        if (!UpdateUserRoleInDatabase(username, newRole))\n        {\n            Console.WriteLine(\"[AccountManager] Failed to update role for {username} in database.\");\n            LogAudit(\"AssignRole\", username, \"DB Update Failed\", false);\n            return false;\n        }\n        Console.WriteLine(\"[AccountManager] Role updated for {username} to {newRole}.\");\n\n        LogAudit(\"AssignRole\", username, $\"Role changed to {newRole}\", true);\n        Console.WriteLine($\"[AccountManager] Role {newRole} assigned to {username}.\");\n        return true;\n    }\n\n    private bool UserExists(string username)\n    {\n        Console.WriteLine($\"[UserExists] Checking existence of {username} in DB {_dbConnectionString}...\");\n        using (var conn = new SqlConnection(_dbConnectionString))\n        {\n\n        }\n        return username == \"existingUser\";\n    }\n\n    private string HashPassword(string password)\n    {\n         Console.WriteLine(\"[HashPassword] Hashing password...\");\n         using (var sha256 = SHA256.Create())\n         {\n             var bytes = sha256.ComputeHash(Encoding.UTF8.GetBytes(password));\n             return Convert.ToBase64String(bytes);\n         }\n    }\n\n    private bool SaveUserToDatabase(string username, string passwordHash, string role, string permissionsJson)\n    {\n        Console.WriteLine($\"[SaveUserToDatabase] Saving user {username} to DB {_dbConnectionString}...\");\n        using (var conn = new SqlConnection(_dbConnectionString))\n        {\n\n        }\n        return true;\n    }\n\n     private bool UpdateUserRoleInDatabase(string username, string role)\n    {\n        Console.WriteLine($\"[UpdateUserRoleInDatabase] Updating role for {username} in DB {_dbConnectionString}...\");\n        using (var conn = new SqlConnection(_dbConnectionString))\n        {\n\n        }\n        return true;\n    }\n\n    private void LogAudit(string action, string user, string details, bool success)\n    {\n        Console.WriteLine($\"[LogAudit] AUDIT: Action='{action}', User='{user}', Details='{details}', Success={success}\");\n\n    }\n}\n", "prompt": "You are an expert in identifying and refactoring SOLID principle violations in C# code. Your task is to analyze the code provided and respond in the exact format below, without any additional text or commentary.\n\nYou must provide the following three parts in your response:\n1. The violated SOLID principle (e.g., SRP, OCP, LSP, ISP, DIP). If no violation exists, respond with **NONE**.\n2. A complete refactored version of the code that removes the violation. YOU MUST RETURN ONLY THE CODE BLOCK.\n3. A brief explanation of the violation and the refactoring.\n\nUse these criteria to detect violations:\n- **SRP**: A class does too many unrelated tasks.\n- **OCP**: Multiple `if-else` or `switch` blocks for logic that should be handled by polymorphism.\n- **LSP**: Subclasses override behavior in a way that breaks the contract of the base class (e.g., throw exceptions).\n- **ISP**: Interfaces that are too large or force implementing unnecessary methods.\n- **DIP**: High-level classes directly depend on low-level classes instead of abstractions.\n\nIf more than one violation is present, report only the most prominent one.\n\n**IMPORTANT:** Follow this output format *exactly*. Do not include greetings, summaries, or comments before or after the output:\n\n**<VIOLATION TYPE>**\n```c#\n<Refactored code>\n```\n<Explanation of the refactoring>\n\nExample output:\n**SRP**\n```java\npublic class ReportGenerator {\n    public String generateReport() {\n        return \"Report data\";\n    }\n}\n```\nThe class previously handled both data generation and file I/O. Now it only generates the report, following SRP.\n\nHere is the code:\nusing System;\nusing System.Data.SqlClient;\nusing System.Security.Cryptography;\nusing System.Text;\n\npublic class AccountManager\n{\n    private readonly string _dbConnectionString;\n\n    public AccountManager(string dbConnectionString)\n    {\n        _dbConnectionString = dbConnectionString;\n    }\n\n    public bool CreateUserAccount(string username, string password, string role, string permissionsJson)\n    {\n        Console.WriteLine($\"[AccountManager] Attempting to create account for {username}\");\n\n        if (UserExists(username))\n        {\n            Console.WriteLine(\"[AccountManager] User {username} already exists.\");\n            LogAudit(\"CreateAccount\", username, \"User Exists\", false);\n            return false;\n        }\n        Console.WriteLine(\"[AccountManager] User does not exist.\");\n\n        string passwordHash = HashPassword(password);\n        Console.WriteLine(\"[AccountManager] Password hashed.\");\n\n        if (!SaveUserToDatabase(username, passwordHash, role, permissionsJson))\n        {\n            Console.WriteLine(\"[AccountManager] Failed to save user {username} to database.\");\n            LogAudit(\"CreateAccount\", username, \"DB Save Failed\", false);\n            return false;\n        }\n        Console.WriteLine(\"[AccountManager] User {username} saved to database.\");\n\n        LogAudit(\"CreateAccount\", username, \"Success\", true);\n        Console.WriteLine($\"[AccountManager] Account created for {username} with role {role}.\");\n        return true;\n    }\n\n    public bool AssignRoleToUser(string username, string newRole)\n    {\n        Console.WriteLine($\"[AccountManager] Attempting to assign role {newRole} to {username}\");\n\n        if (!UserExists(username))\n        {\n            Console.WriteLine(\"[AccountManager] User {username} not found for role assignment.\");\n            LogAudit(\"AssignRole\", username, \"User Not Found\", false);\n            return false;\n        }\n        Console.WriteLine(\"[AccountManager] User found.\");\n\n        if (!UpdateUserRoleInDatabase(username, newRole))\n        {\n            Console.WriteLine(\"[AccountManager] Failed to update role for {username} in database.\");\n            LogAudit(\"AssignRole\", username, \"DB Update Failed\", false);\n            return false;\n        }\n        Console.WriteLine(\"[AccountManager] Role updated for {username} to {newRole}.\");\n\n        LogAudit(\"AssignRole\", username, $\"Role changed to {newRole}\", true);\n        Console.WriteLine($\"[AccountManager] Role {newRole} assigned to {username}.\");\n        return true;\n    }\n\n    private bool UserExists(string username)\n    {\n        Console.WriteLine($\"[UserExists] Checking existence of {username} in DB {_dbConnectionString}...\");\n        using (var conn = new SqlConnection(_dbConnectionString))\n        {\n\n        }\n        return username == \"existingUser\";\n    }\n\n    private string HashPassword(string password)\n    {\n         Console.WriteLine(\"[HashPassword] Hashing password...\");\n         using (var sha256 = SHA256.Create())\n         {\n             var bytes = sha256.ComputeHash(Encoding.UTF8.GetBytes(password));\n             return Convert.ToBase64String(bytes);\n         }\n    }\n\n    private bool SaveUserToDatabase(string username, string passwordHash, string role, string permissionsJson)\n    {\n        Console.WriteLine($\"[SaveUserToDatabase] Saving user {username} to DB {_dbConnectionString}...\");\n        using (var conn = new SqlConnection(_dbConnectionString))\n        {\n\n        }\n        return true;\n    }\n\n     private bool UpdateUserRoleInDatabase(string username, string role)\n    {\n        Console.WriteLine($\"[UpdateUserRoleInDatabase] Updating role for {username} in DB {_dbConnectionString}...\");\n        using (var conn = new SqlConnection(_dbConnectionString))\n        {\n\n        }\n        return true;\n    }\n\n    private void LogAudit(string action, string user, string details, bool success)\n    {\n        Console.WriteLine($\"[LogAudit] AUDIT: Action='{action}', User='{user}', Details='{details}', Success={success}\");\n\n    }\n}\n", "raw_response": "**SRP**\n```c#\npublic class AccountManager\n{\n    private readonly string _dbConnectionString;\n    private readonly IUserRepository _userRepository;\n    private readonly IPasswordHasher _passwordHasher;\n    private readonly IAuditLogger _auditLogger;\n\n    public AccountManager(string dbConnectionString, IUserRepository userRepository, IPasswordHasher passwordHasher, IAuditLogger auditLogger)\n    {\n        _dbConnectionString = dbConnectionString;\n        _userRepository = userRepository;\n        _passwordHasher = passwordHasher;\n        _auditLogger = auditLogger;\n    }\n\n    public bool CreateUserAccount(string username, string password, string role, string permissionsJson)\n    {\n        Console.WriteLine($\"[AccountManager] Attempting to create account for {username}\");\n\n        if (_userRepository.UserExists(username))\n        {\n            Console.WriteLine($\"[AccountManager] User {username} already exists.\");\n            _auditLogger.Log(\"CreateAccount\", username, \"User Exists\", false);\n            return false;\n        }\n        Console.WriteLine(\"[AccountManager] User does not exist.\");\n\n        string passwordHash = _passwordHasher.Hash(password);\n        Console.WriteLine(\"[AccountManager] Password hashed.\");\n\n        if (!_userRepository.SaveUser(username, passwordHash, role, permissionsJson))\n        {\n            Console.WriteLine($\"[AccountManager] Failed to save user {username} to database.\");\n            _auditLogger.Log(\"CreateAccount\", username, \"DB Save Failed\", false);\n            return false;\n        }\n        Console.WriteLine($\"[AccountManager] User {username} saved to database.\");\n\n        _auditLogger.Log(\"CreateAccount\", username, \"Success\", true);\n        Console.WriteLine($\"[AccountManager] Account created for {username} with role {role}.\");\n        return true;\n    }\n\n    public bool AssignRoleToUser(string username, string newRole)\n    {\n        Console.WriteLine($\"[AccountManager] Attempting to assign role {newRole} to {username}\");\n\n        if (!_userRepository.UserExists(username))\n        {\n            Console.WriteLine($\"[AccountManager] User {username} not found for role assignment.\");\n            _auditLogger.Log(\"AssignRole\", username, \"User Not Found\", false);\n            return false;\n        }\n        Console.WriteLine(\"[AccountManager] User found.\");\n\n        if (!_userRepository.UpdateUserRole(username, newRole))\n        {\n            Console.WriteLine($\"[AccountManager] Failed to update role for {username} in database.\");\n            _auditLogger.Log(\"AssignRole\", username, \"DB Update Failed\", false);\n            return false;\n        }\n        Console.WriteLine($\"[AccountManager] Role updated for {username} to {newRole}.\");\n\n        _auditLogger.Log(\"AssignRole\", username, $\"Role changed to {newRole}\", true);\n        Console.WriteLine($\"[AccountManager] Role {newRole} assigned to {username}.\");\n        return true;\n    }\n}\n\npublic interface IUserRepository\n{\n    bool UserExists(string username);\n    bool SaveUser(string username, string passwordHash, string role, string permissionsJson);\n    bool UpdateUserRole(string username, string role);\n}\n\npublic interface IPasswordHasher\n{\n    string Hash(string password);\n}\n\npublic interface IAuditLogger\n{\n    void Log(string action, string user, string details, bool success);\n}\n```\nThe `AccountManager` class previously handled multiple responsibilities, including user management, password hashing, and logging audits, violating the Single Responsibility Principle (SRP). The refactored code introduces interfaces for user repository, password hashing, and audit logging, delegating these responsibilities to separate classes. This adheres to SRP by ensuring that each class has a single reason to change.", "violation": "SRP", "violation_list": ["SRP"], "explanation": "**SRP**", "solution_code": "", "duration_seconds": 15.06140947341919}
{"id": 47, "strategy": "example", "violation_type": "srp", "model": "gpt-4o-mini", "language": "C#", "input": "using System;\nusing System.Collections.Generic;\nusing System.Data.SqlClient;\nusing System.IO;\n\npublic class OrderFulfillmentService\n{\n    private readonly string _dbConnectionString;\n    private readonly string _shippingApiEndpoint;\n    private readonly string _warehouseInventoryEndpoint;\n\n    public OrderFulfillmentService(string dbConnectionString, string shippingApiEndpoint, string warehouseInventoryEndpoint)\n    {\n        _dbConnectionString = dbConnectionString;\n        _shippingApiEndpoint = shippingApiEndpoint;\n        _warehouseInventoryEndpoint = warehouseInventoryEndpoint;\n    }\n\n    public bool FulfillOrder(int orderId)\n    {\n        Console.WriteLine($\"[OrderFulfillmentService] Starting fulfillment for Order ID: {orderId}\");\n\n        var order = GetOrderDetails(orderId);\n        if (order == null)\n        {\n            Console.WriteLine(\"[OrderFulfillmentService] Order not found.\");\n            return false;\n        }\n        Console.WriteLine(\"[OrderFulfillmentService] Order details fetched.\");\n\n        if (!ReserveInventory(order))\n        {\n            Console.WriteLine(\"[OrderFulfillmentService] Inventory reservation failed.\");\n            return false;\n        }\n        Console.WriteLine(\"[OrderFulfillmentService] Inventory reserved.\");\n\n        var shippingLabel = GenerateShippingLabel(order);\n        if (string.IsNullOrEmpty(shippingLabel))\n        {\n             Console.WriteLine(\"[OrderFulfillmentService] Shipping label generation failed.\");\n             ReleaseInventory(order); \n             return false;\n        }\n        Console.WriteLine(\"[OrderFulfillmentService] Shipping label generated.\");\n\n        if (!UpdateOrderStatus(orderId, \"SHIPPED\"))\n        {\n            Console.WriteLine(\"[OrderFulfillmentService] Failed to update order status.\");\n            ReleaseInventory(order);\n            // Maybe void shipping label?\n            return false;\n        }\n        Console.WriteLine(\"[OrderFulfillmentService] Order status updated to SHIPPED.\");\n\n        SendShippingNotification(order.CustomerEmail, shippingLabel);\n        Console.WriteLine(\"[OrderFulfillmentService] Shipping notification sent.\");\n\n        Console.WriteLine($\"[OrderFulfillmentService] Order ID: {orderId} fulfilled successfully.\");\n        return true;\n    }\n\n    private Order GetOrderDetails(int orderId)\n    {\n        Console.WriteLine($\"[GetOrderDetails] Fetching details for order {orderId} from DB {_dbConnectionString}...\");\n        using (var conn = new SqlConnection(_dbConnectionString))\n        {\n\n        }\n        return new Order { Id = orderId, CustomerEmail = \"customer@example.com\" };\n    }\n\n    private bool ReserveInventory(Order order)\n    {\n        Console.WriteLine($\"[ReserveInventory] Reserving inventory for order {order.Id} via warehouse service at {_warehouseInventoryEndpoint}...\");\n\n        return true;\n    }\n\n     private bool ReleaseInventory(Order order)\n    {\n        Console.WriteLine($\"[ReleaseInventory] Releasing inventory for order {order.Id} via warehouse service at {_warehouseInventoryEndpoint}...\");\n\n        return true;\n    }\n\n    private string GenerateShippingLabel(Order order)\n    {\n        Console.WriteLine($\"[GenerateShippingLabel] Generating label for order {order.Id} via shipping API at {_shippingApiEndpoint}...\");\n\n        return $\"ShippingLabel_{order.Id}.pdf\";\n    }\n\n    private bool UpdateOrderStatus(int orderId, string status)\n    {\n        Console.WriteLine($\"[UpdateOrderStatus] Updating status for order {orderId} to {status} in DB {_dbConnectionString}...\");\n        using (var conn = new SqlConnection(_dbConnectionString))\n        {\n\n        }\n        return true;\n    }\n\n    private void SendShippingNotification(string customerEmail, string shippingLabelPath)\n    {\n        Console.WriteLine($\"[SendShippingNotification] Sending notification to {customerEmail} with label {shippingLabelPath}...\");\n\n    }\n\n    public class Order\n    {\n        public int Id { get; set; }\n        public string CustomerEmail { get; set; }\n\n    }\n}\n", "prompt": "You are an expert in identifying and refactoring SOLID principle violations in C# code. Your task is to analyze the code provided and respond in the exact format below, without any additional text or commentary.\n\nYou must provide the following three parts in your response:\n1. The violated SOLID principle (e.g., SRP, OCP, LSP, ISP, DIP). If no violation exists, respond with **NONE**.\n2. A complete refactored version of the code that removes the violation. YOU MUST RETURN ONLY THE CODE BLOCK.\n3. A brief explanation of the violation and the refactoring.\n\nUse these criteria to detect violations:\n- **SRP**: A class does too many unrelated tasks.\n- **OCP**: Multiple `if-else` or `switch` blocks for logic that should be handled by polymorphism.\n- **LSP**: Subclasses override behavior in a way that breaks the contract of the base class (e.g., throw exceptions).\n- **ISP**: Interfaces that are too large or force implementing unnecessary methods.\n- **DIP**: High-level classes directly depend on low-level classes instead of abstractions.\n\nIf more than one violation is present, report only the most prominent one.\n\n**IMPORTANT:** Follow this output format *exactly*. Do not include greetings, summaries, or comments before or after the output:\n\n**<VIOLATION TYPE>**\n```c#\n<Refactored code>\n```\n<Explanation of the refactoring>\n\nExample output:\n**SRP**\n```java\npublic class ReportGenerator {\n    public String generateReport() {\n        return \"Report data\";\n    }\n}\n```\nThe class previously handled both data generation and file I/O. Now it only generates the report, following SRP.\n\nHere is the code:\nusing System;\nusing System.Collections.Generic;\nusing System.Data.SqlClient;\nusing System.IO;\n\npublic class OrderFulfillmentService\n{\n    private readonly string _dbConnectionString;\n    private readonly string _shippingApiEndpoint;\n    private readonly string _warehouseInventoryEndpoint;\n\n    public OrderFulfillmentService(string dbConnectionString, string shippingApiEndpoint, string warehouseInventoryEndpoint)\n    {\n        _dbConnectionString = dbConnectionString;\n        _shippingApiEndpoint = shippingApiEndpoint;\n        _warehouseInventoryEndpoint = warehouseInventoryEndpoint;\n    }\n\n    public bool FulfillOrder(int orderId)\n    {\n        Console.WriteLine($\"[OrderFulfillmentService] Starting fulfillment for Order ID: {orderId}\");\n\n        var order = GetOrderDetails(orderId);\n        if (order == null)\n        {\n            Console.WriteLine(\"[OrderFulfillmentService] Order not found.\");\n            return false;\n        }\n        Console.WriteLine(\"[OrderFulfillmentService] Order details fetched.\");\n\n        if (!ReserveInventory(order))\n        {\n            Console.WriteLine(\"[OrderFulfillmentService] Inventory reservation failed.\");\n            return false;\n        }\n        Console.WriteLine(\"[OrderFulfillmentService] Inventory reserved.\");\n\n        var shippingLabel = GenerateShippingLabel(order);\n        if (string.IsNullOrEmpty(shippingLabel))\n        {\n             Console.WriteLine(\"[OrderFulfillmentService] Shipping label generation failed.\");\n             ReleaseInventory(order); \n             return false;\n        }\n        Console.WriteLine(\"[OrderFulfillmentService] Shipping label generated.\");\n\n        if (!UpdateOrderStatus(orderId, \"SHIPPED\"))\n        {\n            Console.WriteLine(\"[OrderFulfillmentService] Failed to update order status.\");\n            ReleaseInventory(order);\n            // Maybe void shipping label?\n            return false;\n        }\n        Console.WriteLine(\"[OrderFulfillmentService] Order status updated to SHIPPED.\");\n\n        SendShippingNotification(order.CustomerEmail, shippingLabel);\n        Console.WriteLine(\"[OrderFulfillmentService] Shipping notification sent.\");\n\n        Console.WriteLine($\"[OrderFulfillmentService] Order ID: {orderId} fulfilled successfully.\");\n        return true;\n    }\n\n    private Order GetOrderDetails(int orderId)\n    {\n        Console.WriteLine($\"[GetOrderDetails] Fetching details for order {orderId} from DB {_dbConnectionString}...\");\n        using (var conn = new SqlConnection(_dbConnectionString))\n        {\n\n        }\n        return new Order { Id = orderId, CustomerEmail = \"customer@example.com\" };\n    }\n\n    private bool ReserveInventory(Order order)\n    {\n        Console.WriteLine($\"[ReserveInventory] Reserving inventory for order {order.Id} via warehouse service at {_warehouseInventoryEndpoint}...\");\n\n        return true;\n    }\n\n     private bool ReleaseInventory(Order order)\n    {\n        Console.WriteLine($\"[ReleaseInventory] Releasing inventory for order {order.Id} via warehouse service at {_warehouseInventoryEndpoint}...\");\n\n        return true;\n    }\n\n    private string GenerateShippingLabel(Order order)\n    {\n        Console.WriteLine($\"[GenerateShippingLabel] Generating label for order {order.Id} via shipping API at {_shippingApiEndpoint}...\");\n\n        return $\"ShippingLabel_{order.Id}.pdf\";\n    }\n\n    private bool UpdateOrderStatus(int orderId, string status)\n    {\n        Console.WriteLine($\"[UpdateOrderStatus] Updating status for order {orderId} to {status} in DB {_dbConnectionString}...\");\n        using (var conn = new SqlConnection(_dbConnectionString))\n        {\n\n        }\n        return true;\n    }\n\n    private void SendShippingNotification(string customerEmail, string shippingLabelPath)\n    {\n        Console.WriteLine($\"[SendShippingNotification] Sending notification to {customerEmail} with label {shippingLabelPath}...\");\n\n    }\n\n    public class Order\n    {\n        public int Id { get; set; }\n        public string CustomerEmail { get; set; }\n\n    }\n}\n", "raw_response": "**SRP**\n```c#\npublic class OrderFulfillmentService\n{\n    private readonly IOrderRepository _orderRepository;\n    private readonly IInventoryService _inventoryService;\n    private readonly IShippingService _shippingService;\n    private readonly INotificationService _notificationService;\n\n    public OrderFulfillmentService(IOrderRepository orderRepository, IInventoryService inventoryService, IShippingService shippingService, INotificationService notificationService)\n    {\n        _orderRepository = orderRepository;\n        _inventoryService = inventoryService;\n        _shippingService = shippingService;\n        _notificationService = notificationService;\n    }\n\n    public bool FulfillOrder(int orderId)\n    {\n        Console.WriteLine($\"[OrderFulfillmentService] Starting fulfillment for Order ID: {orderId}\");\n\n        var order = _orderRepository.GetOrderDetails(orderId);\n        if (order == null)\n        {\n            Console.WriteLine(\"[OrderFulfillmentService] Order not found.\");\n            return false;\n        }\n        Console.WriteLine(\"[OrderFulfillmentService] Order details fetched.\");\n\n        if (!_inventoryService.ReserveInventory(order))\n        {\n            Console.WriteLine(\"[OrderFulfillmentService] Inventory reservation failed.\");\n            return false;\n        }\n        Console.WriteLine(\"[OrderFulfillmentService] Inventory reserved.\");\n\n        var shippingLabel = _shippingService.GenerateShippingLabel(order);\n        if (string.IsNullOrEmpty(shippingLabel))\n        {\n            Console.WriteLine(\"[OrderFulfillmentService] Shipping label generation failed.\");\n            _inventoryService.ReleaseInventory(order);\n            return false;\n        }\n        Console.WriteLine(\"[OrderFulfillmentService] Shipping label generated.\");\n\n        if (!_orderRepository.UpdateOrderStatus(orderId, \"SHIPPED\"))\n        {\n            Console.WriteLine(\"[OrderFulfillmentService] Failed to update order status.\");\n            _inventoryService.ReleaseInventory(order);\n            return false;\n        }\n        Console.WriteLine(\"[OrderFulfillmentService] Order status updated to SHIPPED.\");\n\n        _notificationService.SendShippingNotification(order.CustomerEmail, shippingLabel);\n        Console.WriteLine(\"[OrderFulfillmentService] Shipping notification sent.\");\n\n        Console.WriteLine($\"[OrderFulfillmentService] Order ID: {orderId} fulfilled successfully.\");\n        return true;\n    }\n}\n\npublic interface IOrderRepository\n{\n    Order GetOrderDetails(int orderId);\n    bool UpdateOrderStatus(int orderId, string status);\n}\n\npublic interface IInventoryService\n{\n    bool ReserveInventory(Order order);\n    bool ReleaseInventory(Order order);\n}\n\npublic interface IShippingService\n{\n    string GenerateShippingLabel(Order order);\n}\n\npublic interface INotificationService\n{\n    void SendShippingNotification(string customerEmail, string shippingLabelPath);\n}\n\npublic class Order\n{\n    public int Id { get; set; }\n    public string CustomerEmail { get; set; }\n}\n```\nThe `OrderFulfillmentService` class previously handled multiple responsibilities including order retrieval, inventory management, shipping label generation, and notification sending, violating the Single Responsibility Principle (SRP). The refactored code introduces separate interfaces and classes for each responsibility, allowing `OrderFulfillmentService` to focus solely on the order fulfillment process.", "violation": "SRP", "violation_list": ["SRP"], "explanation": "**SRP**", "solution_code": "", "duration_seconds": 11.79676604270935}
