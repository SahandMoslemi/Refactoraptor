{
    "code_examples": [
        {
            "input": "NONE",
            "output": "",
            "level": "EASY",
            "language": "JAVA",
            "violation": "NONE",
            "explanation": "The provided code does not exhibit any violations of the SOLID principles."
        },
        {
            "input": "NONE",
            "output": "",
            "level": "EASY",
            "language": "JAVA",
            "violation": "NONE",
            "explanation": ""
        },
        {
            "input": "{\"violation_type\":\"SRP\",\"total_duration\":3093654042,\"explanation\":\"The `Invoice` class previously handled both total calculation and printing/saving logic, violating SRP. Now, the responsibilities are separated into distinct classes for printing and saving invoices.\"}",
            "output": "class Invoice {\n    private double total;\n\n    public Invoice(double total) {\n        this.total = total;\n    }\n\n    public double getTotal() {\n        return total;\n    }\n}\n\nclass InvoicePrinter {\n    public void print(Invoice invoice) {\n        System.out.println(\"Invoice Total: \" + invoice.getTotal());\n    }\n}\n\nclass InvoiceSaver {\n    public void save(Invoice invoice) {\n        // Logic to save the invoice\n    }\n}",
            "level": "EASY",
            "language": "JAVA",
            "violation": "SRP",
            "explanation": "The `Invoice` class previously handled both total calculation and printing/saving logic, violating SRP. Now, the responsibilities are separated into distinct classes for printing and saving invoices."
        },
        {
            "input": "{\"violation_type\":\"SRP\",\"total_duration\":5134344292,\"explanation\":\"The original code had separate responsibilities for authentication and email services, but they were not encapsulated in a single service. The refactored code introduces a `UserService` that coordinates the login and email sending, adhering to the Single Responsibility Principle (SRP).\"}",
            "output": "class UserService {\n    private AuthService authService;\n    private EmailService emailService;\n\n    public UserService(AuthService authService, EmailService emailService) {\n        this.authService = authService;\n        this.emailService = emailService;\n    }\n\n    public void loginUser(String username, String password) {\n        if (authService.authenticate(username, password)) {\n            emailService.sendLoginNotification(username);\n        }\n    }\n}",
            "level": "EASY",
            "language": "JAVA",
            "violation": "SRP",
            "explanation": "The original code had separate responsibilities for authentication and email services, but they were not encapsulated in a single service. The refactored code introduces a `UserService` that coordinates the login and email sending, adhering to the Single Responsibility Principle (SRP)."
        },
        {
            "input": "{\"violation_type\":\"SRP\",\"total_duration\":5886790833,\"explanation\":\"The original code had the `EmailSender` class handling email sending, which is a separate concern from the order processing. The refactored code introduces an `OrderService` class that coordinates the payment processing and email sending, adhering to the Single Responsibility Principle (SRP).\"}",
            "output": "class OrderService {\n    private EmailSender emailSender;\n    private PaymentProcessor paymentProcessor;\n\n    public OrderService(EmailSender emailSender, PaymentProcessor paymentProcessor) {\n        this.emailSender = emailSender;\n        this.paymentProcessor = paymentProcessor;\n    }\n\n    public void processOrder(Order order) {\n        paymentProcessor.processPayment(order);\n        emailSender.sendEmail(order);\n    }\n}\n\nclass EmailSender {\n    public void sendEmail(Order order) {\n        // Logic to send email\n    }\n}\n\nclass PaymentProcessor {\n    public void processPayment(Order order) {\n        // Logic to process payment\n    }\n}",
            "level": "MODERATE",
            "language": "JAVA",
            "violation": "SRP",
            "explanation": "The original code had the `EmailSender` class handling email sending, which is a separate concern from the order processing. The refactored code introduces an `OrderService` class that coordinates the payment processing and email sending, adhering to the Single Responsibility Principle (SRP). Each class now has a single responsibility: `EmailSender` for sending emails, `PaymentProcessor` for processing payments, and `OrderService` for managing the order workflow."
        },
        {
            "input": "{\"violation_type\":\"SRP\",\"total_duration\":5387463208,\"explanation\":\"The original code had multiple services that were not encapsulated within a single cohesive class, leading to a violation of SRP. The refactored code introduces a `StudentService` that coordinates the enrollment and transcript printing, ensuring that each class has a single responsibility.\"}",
            "output": "class StudentService {\n    private EnrollmentService enrollmentService;\n    private TranscriptService transcriptService;\n\n    public StudentService() {\n        this.enrollmentService = new EnrollmentService();\n        this.transcriptService = new TranscriptService();\n    }\n\n    public void enrollStudent(Student student) {\n        enrollmentService.enroll(student);\n    }\n\n    public void printTranscript(Student student) {\n        transcriptService.print(student);\n    }\n}",
            "level": "MODERATE",
            "language": "JAVA",
            "violation": "SRP",
            "explanation": "The original code had multiple services that were not encapsulated within a single cohesive class, leading to a violation of SRP. The refactored code introduces a `StudentService` that coordinates the enrollment and transcript printing, ensuring that each class has a single responsibility."
        },
        {
            "input": "{\"violation_type\":\"SRP\",\"total_duration\":9202256416,\"explanation\":\"The `ChangeLogger` class was previously responsible for logging changes, which could lead to a violation of SRP as it was tightly coupled with product management. The refactored code introduces a `ProductManager` class that handles the stock update and logging, ensuring that each class has a single responsibility.\"}",
            "output": "class ProductManager {\n    private ChangeLogger changeLogger;\n\n    public ProductManager(ChangeLogger changeLogger) {\n        this.changeLogger = changeLogger;\n    }\n\n    public void updateStock(Product product, int quantity) {\n        product.setStock(quantity);\n        changeLogger.logChange(product);\n    }\n}\n\nclass ChangeLogger {\n    public void logChange(Product product) {\n        // Logic to log the change\n    }\n}",
            "level": "MODERATE",
            "language": "JAVA",
            "violation": "SRP",
            "explanation": "The `ChangeLogger` class was previously responsible for logging changes, which could lead to a violation of SRP as it was tightly coupled with product management. The refactored code introduces a `ProductManager` class that handles the stock update and logging, ensuring that each class has a single responsibility."
        },
        {
            "input": "NONE",
            "output": "",
            "level": "MODERATE",
            "language": "JAVA",
            "violation": "NONE",
            "explanation": "The provided code does not exhibit any violations of the SOLID principles."
        },
        {
            "input": "{\"violation_type\":\"SRP\",\"total_duration\":33073843000,\"explanation\":\"The `UserOnboardingWorkflow` class was previously responsible for user onboarding, including user creation, email verification, and profile initialization, which violates the Single Responsibility Principle (SRP). The refactored code separates these responsibilities into distinct classes, allowing each class to focus on a single task.\"}",
            "output": "class UserCreator {\n    createUser(userData) {\n        // Logic to create a user\n    }\n}\n\nclass EmailVerifier {\n    verifyEmail(user) {\n        // Logic to verify user email\n    }\n}\n\nclass ProfileInitializer {\n    initializeProfile(user) {\n        // Logic to initialize user profile\n    }\n}\n\nclass UserOnboardingWorkflow {\n    constructor() {\n        this.userCreator = new UserCreator();\n        this.emailVerifier = new EmailVerifier();\n        this.profileInitializer = new ProfileInitializer();\n    }\n\n    onboardUser(userData) {\n        const user = this.userCreator.createUser(userData);\n        this.emailVerifier.verifyEmail(user);\n        this.profileInitializer.initializeProfile(user);\n    }\n}",
            "level": "HARD",
            "language": "JAVA",
            "violation": "SRP",
            "explanation": "The `UserOnboardingWorkflow` class was previously responsible for user onboarding, including user creation, email verification, and profile initialization, which violates the Single Responsibility Principle (SRP). The refactored code separates these responsibilities into distinct classes, allowing each class to focus on a single task."
        },
        {
            "input": "{\"violation_type\":\"SRP\",\"total_duration\":41441349708,\"explanation\":\"The `InvoiceProcessingWorkflow` class was handling multiple responsibilities including fetching order items, calculating totals, generating invoice numbers, saving invoices, generating files, and sending emails. This was refactored to ensure that each class has a single responsibility, adhering to the Single Responsibility Principle (SRP).\"}",
            "output": "class OrderItemFetcher {\n    public List<OrderItem> fetchOrderItems(Order order) {\n        // Logic to fetch order items\n    }\n}\n\nclass InvoiceCalculator {\n    public double calculateTotal(List<OrderItem> items) {\n        // Logic to calculate total\n    }\n}\n\nclass InvoiceNumberGenerator {\n    public String generateInvoiceNumber() {\n        // Logic to generate invoice number\n    }\n}\n\nclass InvoiceSaver {\n    public void saveInvoice(Invoice invoice) {\n        // Logic to save invoice\n    }\n}\n\nclass InvoiceFileGenerator {\n    public void generateFile(Invoice invoice) {\n        // Logic to generate invoice file\n    }\n}\n\nclass EmailSender {\n    public void sendEmail(Invoice invoice) {\n        // Logic to send email\n    }\n}\n\nclass InvoiceProcessingWorkflow {\n    private OrderItemFetcher itemFetcher;\n    private InvoiceCalculator calculator;\n    private InvoiceNumberGenerator numberGenerator;\n    private InvoiceSaver saver;\n    private InvoiceFileGenerator fileGenerator;\n    private EmailSender emailSender;\n\n    public InvoiceProcessingWorkflow(OrderItemFetcher itemFetcher, InvoiceCalculator calculator, \n                                      InvoiceNumberGenerator numberGenerator, InvoiceSaver saver, \n                                      InvoiceFileGenerator fileGenerator, EmailSender emailSender) {\n        this.itemFetcher = itemFetcher;\n        this.calculator = calculator;\n        this.numberGenerator = numberGenerator;\n        this.saver = saver;\n        this.fileGenerator = fileGenerator;\n        this.emailSender = emailSender;\n    }\n\n    public void processInvoice(Order order) {\n        List<OrderItem> items = itemFetcher.fetchOrderItems(order);\n        double total = calculator.calculateTotal(items);\n        String invoiceNumber = numberGenerator.generateInvoiceNumber();\n        Invoice invoice = new Invoice(invoiceNumber, total);\n        saver.saveInvoice(invoice);\n        fileGenerator.generateFile(invoice);\n        emailSender.sendEmail(invoice);\n    }\n}",
            "level": "HARD",
            "language": "JAVA",
            "violation": "SRP",
            "explanation": "The `InvoiceProcessingWorkflow` class was handling multiple responsibilities including fetching order items, calculating totals, generating invoice numbers, saving invoices, generating files, and sending emails. This was refactored to ensure that each class has a single responsibility, adhering to the Single Responsibility Principle (SRP). Each responsibility is now encapsulated in its own class."
        },
        {
            "input": "{\"violation_type\":\"SRP\",\"total_duration\":8781321292,\"explanation\":\"The `DatabaseSourceDataReader` and `DatabaseTargetDataWriter` classes were handling both data access and database connection management, which violates the Single Responsibility Principle (SRP). The refactored code separates the concerns of reading from and writing to the database, allowing each class to focus on a single responsibility.\"}",
            "output": "class DatabaseConnection {\n    public void connect() {\n        // Connection logic\n    }\n    public void disconnect() {\n        // Disconnection logic\n    }\n}\n\nclass DatabaseSourceDataReader {\n    private DatabaseConnection connection;\n\n    public DatabaseSourceDataReader(DatabaseConnection connection) {\n        this.connection = connection;\n    }\n\n    public void readData() {\n        connection.connect();\n        // Data reading logic\n        connection.disconnect();\n    }\n}\n\nclass DatabaseTargetDataWriter {\n    private DatabaseConnection connection;\n\n    public DatabaseTargetDataWriter(DatabaseConnection connection) {\n        this.connection = connection;\n    }\n\n    public void writeData() {\n        connection.connect();\n        // Data writing logic\n        connection.disconnect();\n    }\n}",
            "level": "HARD",
            "language": "java",
            "violation": "SRP",
            "explanation": "The `DatabaseSourceDataReader` and `DatabaseTargetDataWriter` classes were handling both data access and database connection management, which violates the Single Responsibility Principle (SRP). The refactored code separates the concerns of reading from and writing to the database, allowing each class to focus on a single responsibility."
        },
        {
            "input": "{\"violation_type\":\"SRP\",\"total_duration\":31731642708,\"explanation\":\"The `EventDispatchWorkflow` class was handling both event dispatching and logging, which violates the Single Responsibility Principle (SRP). The refactored code separates the concerns of event handling and logging into distinct classes, ensuring that each class has a single responsibility.\"}",
            "output": "class EventDispatcher {\n    public void dispatch(Event event) {\n        // Logic to dispatch the event\n    }\n}\n\nclass EventLogger {\n    public void log(Event event) {\n        // Logic to log the event\n    }\n}\n\nclass EventDispatchWorkflow {\n    private EventDispatcher eventDispatcher;\n    private EventLogger eventLogger;\n\n    public EventDispatchWorkflow(EventDispatcher dispatcher, EventLogger logger) {\n        this.eventDispatcher = dispatcher;\n        this.eventLogger = logger;\n    }\n\n    public void execute(Event event) {\n        eventDispatcher.dispatch(event);\n        eventLogger.log(event);\n    }\n}",
            "level": "HARD",
            "language": "java",
            "violation": "SRP",
            "explanation": "The `EventDispatchWorkflow` class was handling both event dispatching and logging, which violates the Single Responsibility Principle (SRP). The refactored code separates the concerns of event handling and logging into distinct classes, ensuring that each class has a single responsibility."
        },
        {
            "input": "{\"violation_type\":\"SRP\",\"total_duration\":1980856125,\"explanation\":\"This refactoring separates the notification responsibility into a new class, UserNotifier, adhering to the Single Responsibility Principle by ensuring that each class has one reason to change.\"}",
            "output": "class UserNotifier {\n    notifyUser(user, message) {\n        // logic to notify user\n    }\n}\n\nclass User {\n    constructor(name) {\n        this.name = name;\n    }\n\n    updateProfile(newData) {\n        // logic to update user profile\n        // Notify user after updating profile\n        const notifier = new UserNotifier();\n        notifier.notifyUser(this, 'Your profile has been updated.');\n    }\n}",
            "level": "EASY",
            "language": "PYTHON",
            "violation": "SRP",
            "explanation": "This refactoring separates the notification responsibility into a new class, UserNotifier, adhering to the Single Responsibility Principle by ensuring that each class has one reason to change."
        },
        {
            "input": "{\"violation_type\":\"SRP\",\"total_duration\":3198228250,\"explanation\":\"The original code had a potential SRP violation as the `Report` class was responsible for both holding data and calculating statistics. The refactoring maintains the separation of concerns by keeping the `Report` class focused solely on data storage, while the `ReportStatistics` class handles the calculation of statistics.\"}",
            "output": "class Report {\n    private List<String> data;\n\n    public Report() {\n        this.data = new ArrayList<>();\n    }\n\n    public void addData(String entry) {\n        data.add(entry);\n    }\n\n    public List<String> getData() {\n        return data;\n    }\n}\n\nclass ReportStatistics {\n    private Report report;\n\n    public ReportStatistics(Report report) {\n        this.report = report;\n    }\n\n    public double calculateAverage() {\n        // Logic to calculate average from report data\n    }\n\n    public int calculateTotal() {\n        // Logic to calculate total from report data\n    }\n}",
            "level": "EASY",
            "language": "PYTHON",
            "violation": "SRP",
            "explanation": "The original code had a potential SRP violation as the `Report` class was responsible for both holding data and calculating statistics. The refactoring maintains the separation of concerns by keeping the `Report` class focused solely on data storage, while the `ReportStatistics` class handles the calculation of statistics."
        },
        {
            "input": "{\"violation_type\":\"SRP\",\"total_duration\":1603871875,\"explanation\":\"The refactoring separates the responsibility of calculating the order total from sending the email confirmation, adhering to the Single Responsibility Principle.\"}",
            "output": "class Order {\n    private List<Item> items;\n\n    public double calculateTotal() {\n        double total = 0;\n        for (Item item : items) {\n            total += item.getPrice();\n        }\n        return total;\n    }\n}\n\nclass EmailService {\n    public void sendOrderConfirmation(Order order) {\n        // logic to send email confirmation\n    }\n}",
            "level": "EASY",
            "language": "PYTHON",
            "violation": "SRP",
            "explanation": "The refactored code separates the responsibility of calculating the order total from sending the email confirmation, adhering to the Single Responsibility Principle."
        },
        {
            "input": "{\"violation_type\":\"SRP\",\"total_duration\":3873455375,\"explanation\":\"The original `BookManager` class violated the Single Responsibility Principle by managing both the display and serialization of the book. The refactored code creates instances of `BookDisplayer` and `BookSerializer` within the methods, ensuring that `BookManager` only manages the book itself and delegates the responsibilities of displaying and serializing to their respective classes.\"}",
            "output": "class BookManager {\n    private Book book;\n\n    public BookManager(Book book) {\n        this.book = book;\n    }\n\n    public void display() {\n        BookDisplayer displayer = new BookDisplayer();\n        displayer.display(book);\n    }\n\n    public void serialize() {\n        BookSerializer serializer = new BookSerializer();\n        serializer.serialize(book);\n    }\n}\n\nclass BookDisplayer {\n    public void display(Book book) {\n        // Code to display the book\n    }\n}\n\nclass BookSerializer {\n    public void serialize(Book book) {\n        // Code to serialize the book\n    }\n}",
            "level": "EASY",
            "language": "PYTHON",
            "violation": "SRP",
            "explanation": "The original `BookManager` class violated the Single Responsibility Principle by managing both the display and serialization of the book. The refactored code creates instances of `BookDisplayer` and `BookSerializer` within the methods, ensuring that `BookManager` only manages the book itself and delegates the responsibilities of displaying and serializing to their respective classes."
        },
        {
            "input": "{\"violation_type\":\"SRP\",\"total_duration\":6213872458,\"explanation\":\"The original `Invoice` class was responsible for both calculating tax and managing its representation in files and prints. The refactoring introduces an `InvoiceManager` class to handle the saving and printing of invoices, adhering to the Single Responsibility Principle (SRP).\"}",
            "output": "class Invoice {\n    private double amount;\n    private double taxRate;\n\n    public Invoice(double amount, double taxRate) {\n        this.amount = amount;\n        this.taxRate = taxRate;\n    }\n\n    public double calculateTax() {\n        return amount  taxRate;\n    }\n}\n\nclass InvoiceManager {\n    public void saveToFile(Invoice invoice) {\n        // Code to save invoice to a file\n    }\n\n    public void printInvoice(Invoice invoice) {\n        // Code to print invoice\n    }\n}",
            "level": "MODERATE",
            "language": "PYTHON",
            "violation": "SRP",
            "explanation": "The original `Invoice` class was responsible for both calculating tax and managing its representation in files and prints. The refactoring introduces an `InvoiceManager` class to handle the saving and printing of invoices, adhering to the Single Responsibility Principle (SRP)."
        },
        {
            "input": "{\"violation_type\":\"SRP\",\"total_duration\":2543539792,\"explanation\":\"The original code violates the Single Responsibility Principle because the `DiscountManager` class is responsible for both applying discounts and logging price changes, which are two distinct responsibilities. The refactored code separates these concerns into different classes.\"}",
            "output": "class DiscountManager {\n    private PriceLogger priceLogger;\n\n    public DiscountManager(PriceLogger priceLogger) {\n        this.priceLogger = priceLogger;\n    }\n\n    public void applyDiscount(Product product, double discount) {\n        double originalPrice = product.getPrice();\n        double discountedPrice = originalPrice - discount;\n        product.setPrice(discountedPrice);\n        priceLogger.logPriceChange(product, originalPrice, discountedPrice);\n    }\n}\n\nclass PriceLogger {\n    public void logPriceChange(Product product, double originalPrice, double newPrice) {\n        System.out.println(\"Price for \" + product.getName() + \" changed from \" + originalPrice + \" to \" + newPrice);\n    }\n}",
            "level": "MODERATE",
            "language": "PYTHON",
            "violation": "SRP",
            "explanation": "The original code violates the Single Responsibility Principle because the `DiscountManager` class is responsible for both applying discounts and logging price changes, which are two distinct responsibilities. The refactored code separates these concerns into different classes."
        },
        {
            "input": "{\"violation_type\":\"SRP\",\"total_duration\":2385716667,\"explanation\":\"The original code violated the Single Responsibility Principle because the `Customer` class was responsible for both holding customer data and providing discount information. The refactored code separates these concerns into distinct classes, ensuring that each class has a single responsibility.\"}",
            "output": "class Customer {\n    private String name;\n    private String email;\n\n    public Customer(String name, String email) {\n        this.name = name;\n        this.email = email;\n    }\n\n    // Getters and other customer-related methods\n}\n\nclass DiscountService {\n    public double calculateDiscount(Customer customer) {\n        // Logic to calculate discount based on customer data\n    }\n}",
            "level": "MODERATE",
            "language": "PYTHON",
            "violation": "SRP",
            "explanation": "The original code violated the Single Responsibility Principle because the `Customer` class was responsible for both holding customer data and providing discount information. The refactored code separates these concerns into distinct classes, ensuring that each class has a single responsibility."
        },
        {
            "input": "{\"violation_type\":\"SRP\",\"total_duration\":6630476750,\"explanation\":\"The `FileEncryptor` class previously instantiated `FileManager` directly, which made it responsible for both file management and encryption logic. Now, it accepts a `FileManager` instance, adhering to SRP by separating concerns.\"}",
            "output": "class FileEncryptor {\n    private FileManager fileManager;\n\n    public FileEncryptor(FileManager fileManager) {\n        this.fileManager = fileManager;\n    }\n\n    public void encryptFile(String filePath) {\n        // Encryption logic here\n        // Use fileManager to handle file operations\n    }\n}",
            "level": "MODERATE",
            "language": "PYTHON",
            "violation": "SRP",
            "explanation": "The `FileEncryptor` class previously instantiated `FileManager` directly, which made it responsible for both file management and encryption logic. Now, it accepts a `FileManager` instance, adhering to SRP by separating concerns."
        },
        {
            "input": "{\"violation_type\":\"SRP\",\"total_duration\":21715341917,\"explanation\":\"The original code had multiple responsibilities within the `UserAccountCreationWorkflow` and `UserRoleAssignmentWorkflow` classes, including user existence checks, password hashing, and logging. The refactored code maintains a single responsibility for each class, focusing on account creation and role assignment separately, thus adhering to the Single Responsibility Principle (SRP).\"}",
            "output": "class UserAccountCreator {\n    public void createAccount(User user) {\n        // Logic for creating user account\n        checkUserExistence(user);\n        hashPassword(user);\n        saveUserToDatabase(user);\n    }\n\n    private void checkUserExistence(User user) {\n        // Check if user already exists\n    }\n\n    private void hashPassword(User user) {\n        // Hash the user's password\n    }\n\n    private void saveUserToDatabase(User user) {\n        // Save user to the database\n    }\n}\n\nclass UserRoleAssigner {\n    public void assignRole(User user, Role role) {\n        // Logic for assigning role to user\n        logRoleAssignment(user, role);\n        saveRoleToDatabase(user, role);\n    }\n\n    private void logRoleAssignment(User user, Role role) {\n        // Log the role assignment\n    }\n\n    private void saveRoleToDatabase(User user, Role role) {\n        // Save role to the database\n    }\n}",
            "level": "HARD",
            "language": "PYTHON",
            "violation": "SRP",
            "explanation": "The original code had multiple responsibilities within the `UserAccountCreationWorkflow` and `UserRoleAssignmentWorkflow` classes, including user existence checks, password hashing, and logging. The refactored code maintains a single responsibility for each class, focusing on account creation and role assignment separately, thus adhering to the Single Responsibility Principle (SRP)."
        },
        {
            "input": "{\"violation_type\":\"OCP\",\"total_duration\":21930327500,\"explanation\":\"The original `process` method in `ReportDataProcessor` used multiple `if-else` statements to handle different report types, violating the Open/Closed Principle (OCP). The refactored code introduces a method `get_processor` that returns the appropriate processing function based on the report type, allowing for easy extension without modifying existing code.\"}",
            "output": "class ReportDataProcessor:\n    def __init__(self):\n        self.processors = {\n            'type1': self.process_type1,\n            'type2': self.process_type2,\n            'type3': self.process_type3,\n        }\n\n    def get_processor(self, report_type):\n        return self.processors.get(report_type)\n\n    def process(self, report_type, data):\n        processor = self.get_processor(report_type)\n        if processor:\n            return processor(data)\n        raise ValueError('Invalid report type')\n\n    def process_type1(self, data):\n        # Processing logic for type1\n        pass\n\n    def process_type2(self, data):\n        # Processing logic for type2\n        pass\n\n    def process_type3(self, data):\n        # Processing logic for type3\n        pass",
            "level": "HARD",
            "language": "PYTHON",
            "violation": "OCP",
            "explanation": "The original `process` method in `ReportDataProcessor` used multiple `if-else` statements to handle different report types, violating the Open/Closed Principle (OCP). The refactored code introduces a method `get_processor` that returns the appropriate processing function based on the report type, allowing for easy extension without modifying existing code."
        },
        {
            "input": "{\"violation_type\":\"SRP\",\"total_duration\":4463368917,\"explanation\":\"The original class handled both the dispatching of notifications and logging messages, violating the Single Responsibility Principle (SRP). The refactored code separates the logging functionality into a `NotificationLogger` class, allowing `NotificationDispatcher` to focus solely on dispatching notifications.\"}",
            "output": "class NotificationDispatcher {\n    sendNotification(notification) {\n        // logic to send notification\n    }\n}\n\nclass NotificationLogger {\n    log(message) {\n        // logic to log messages\n    }\n}",
            "level": "HARD",
            "language": "PYTHON",
            "violation": "SRP",
            "explanation": "The original class handled both the dispatching of notifications and logging messages, violating the Single Responsibility Principle (SRP). The refactored code separates the logging functionality into a `NotificationLogger` class, allowing `NotificationDispatcher` to focus solely on dispatching notifications."
        },
        {
            "input": "{\"violation_type\":\"SRP\",\"total_duration\":7008387750,\"explanation\":\"The class previously handled multiple responsibilities, including finding orders, determining new statuses, updating the database, and sending notifications. The refactoring separates the status update logic into its own method, adhering to the Single Responsibility Principle (SRP).\"}",
            "output": "class OrderManager {\n    public void findOrder(int orderId) {\n        // Logic to find order\n    }\n\n    public void updateOrderStatus(int orderId, String newStatus) {\n        // Logic to update order status\n        sendNotification(orderId, newStatus);\n    }\n\n    private void sendNotification(int orderId, String newStatus) {\n        // Logic to send notification\n    }\n}",
            "level": "HARD",
            "language": "PYTHON",
            "violation": "SRP",
            "explanation": "The class previously handled multiple responsibilities, including finding orders, determining new statuses, updating the database, and sending notifications. The refactored code separates the status update logic into its own method, adhering to the Single Responsibility Principle (SRP)."
        },
        {
            "input": "{\"violation_type\":\"SRP\",\"total_duration\":1876730750,\"explanation\":\"The UserService class originally handled both user registration and email sending, violating the Single Responsibility Principle. The refactoring separates the email sending functionality into its own method, clarifying the responsibilities of the class.\"}",
            "output": "class UserService {\n    public void registerUser(User user) {\n        // Registration logic\n        sendEmailConfirmation(user);\n    }\n\n    private void sendEmailConfirmation(User user) {\n        // Email sending logic\n    }\n}",
            "level": "EASY",
            "language": "KOTLIN",
            "violation": "SRP",
            "explanation": "The UserService class originally handled both user registration and email sending, violating the Single Responsibility Principle. The refactoring separates the email sending functionality into its own method, clarifying the responsibilities of the class."
        },
        {
            "input": "{\"violation_type\":\"SRP\",\"total_duration\":2209975291,\"explanation\":\"The original code had separate responsibilities for generating and printing reports, which is in line with SRP. However, since both classes are already well-defined and focused on a single responsibility, no refactoring was necessary.\"}",
            "output": "",
            "level": "EASY",
            "language": "KOTLIN",
            "violation": "NONE",
            "explanation": "The original code adheres to the Single Responsibility Principle as it maintains separate classes for generating and printing reports, each focused on a single responsibility. Therefore, no refactoring is necessary."
        },
        {
            "input": "{\"violation_type\":\"SRP\",\"total_duration\":2070344333,\"explanation\":\"The `Order` class previously handled both the calculation of the total and the saving of the order. Now, the calculation is separated into its own method, and a new `OrderRepository` class is introduced to handle the saving, adhering to the Single Responsibility Principle.\"}",
            "output": "class Order {\n    private List<Item> items;\n\n    public Order(List<Item> items) {\n        this.items = items;\n    }\n\n    public double calculateTotal() {\n        double total = 0;\n        for (Item item : items) {\n            total += item.getPrice();\n        }\n        return total;\n    }\n}\n\nclass OrderRepository {\n    public void save(Order order) {\n        // Code to save the order to a database\n    }\n}",
            "level": "EASY",
            "language": "KOTLIN",
            "violation": "SRP",
            "explanation": "The `Order` class previously handled both the calculation of the total and the saving of the order. Now, the calculation is separated into its own method, and a new `OrderRepository` class is introduced to handle the saving, adhering to the Single Responsibility Principle."
        },
        {
            "input": "{\"violation_type\":\"SRP\",\"total_duration\":2675335250,\"explanation\":\"The original `InvoiceProcessor` class had multiple responsibilities: creating an invoice and sending it. By separating the concerns and injecting the `InvoiceSender` dependency, we adhere to the Single Responsibility Principle.\"}",
            "output": "class InvoiceProcessor {\n    private InvoiceSender invoiceSender;\n\n    public InvoiceProcessor(InvoiceSender invoiceSender) {\n        this.invoiceSender = invoiceSender;\n    }\n\n    public void createInvoice(Invoice invoice) {\n        // Logic to create invoice\n    }\n\n    public void sendInvoice(Invoice invoice) {\n        invoiceSender.send(invoice);\n    }\n}",
            "level": "EASY",
            "language": "KOTLIN",
            "violation": "SRP",
            "explanation": "The original `InvoiceProcessor` class had multiple responsibilities: creating an invoice and sending it. By separating the concerns and injecting the `InvoiceSender` dependency, we adhere to the Single Responsibility Principle."
        },
        {
            "input": "{\"violation_type\":\"SRP\",\"total_duration\":3163239791,\"explanation\":\"The original code had a `User` class that was mutable and allowed for changes to its properties, which could lead to unintended side effects. The refactored code makes `User` immutable by using a constructor to set its properties, adhering to the Single Responsibility Principle (SRP) by ensuring that the `User` class only represents user data.\"}",
            "output": "class User {\n    private final String name;\n    private final String email;\n\n    public User(String name, String email) {\n        this.name = name;\n        this.email = email;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n}",
            "level": "MODERATE",
            "language": "KOTLIN",
            "violation": "SRP",
            "explanation": "The original code had a `User` class that was mutable and allowed for changes to its properties, which could lead to unintended side effects. The refactored code makes `User` immutable by using a constructor to set its properties, adhering to the Single Responsibility Principle (SRP) by ensuring that the `User` class only represents user data."
        },
        {
            "input": "{\"violation_type\":\"SRP\",\"total_duration\":2338908542,\"explanation\":\"The `CustomerManager` class previously handled both customer management and email sending responsibilities. Now, it only manages customers, while the `EmailService` class is responsible for sending emails, adhering to the Single Responsibility Principle.\"}",
            "output": "class CustomerManager {\n    public void addCustomer(Customer customer) {\n        // logic to add customer\n    }\n    public void removeCustomer(Customer customer) {\n        // logic to remove customer\n    }\n}\n\nclass EmailService {\n    public void sendEmail(String email, String message) {\n        // logic to send email\n    }\n}",
            "level": "MODERATE",
            "language": "KOTLIN",
            "violation": "SRP",
            "explanation": "The `CustomerManager` class previously handled both customer management and email sending responsibilities. Now, it only manages customers, while the `EmailService` class is responsible for sending emails, adhering to the Single Responsibility Principle."
        },
        {
            "input": "{\"violation_type\":\"SRP\",\"total_duration\":4214466792,\"explanation\":\"The original code violates the Single Responsibility Principle because the FileService class is responsible for both file operations and logging operations. The refactored code separates the logging functionality into a new class, FileOperationLogger, which handles logging independently, allowing FileService to focus solely on file operations.\"}",
            "output": "class FileService {\n    public void readFile(String filePath) {\n        // Logic to read file\n    }\n    public void writeFile(String filePath, String content) {\n        // Logic to write file\n    }\n}\n\nclass FileOperationLogger {\n    public void log(String message) {\n        // Logic to log messages\n    }\n}",
            "level": "MODERATE",
            "language": "KOTLIN",
            "violation": "SRP",
            "explanation": "The original code violates the Single Responsibility Principle because the FileService class is responsible for both file operations and logging operations. The refactored code separates the logging functionality into a new class, FileOperationLogger, which handles logging independently, allowing FileService to focus solely on file operations."
        },
        {
            "input": "{\"violation_type\":\"SRP\",\"total_duration\":2452576125,\"explanation\":\"The original code violated the Single Responsibility Principle because the `AuthService` class was responsible for both authentication and notification. The refactored code separates these concerns into the `AuthService` for authentication and a new `Notifier` class for handling notifications.\"}",
            "output": "class AuthService {\n    public void authenticate(User user) {\n        // authentication logic\n    }\n}\n\nclass Notifier {\n    public void notify(User user, String message) {\n        // notification logic\n    }\n}",
            "level": "MODERATE",
            "language": "KOTLIN",
            "violation": "SRP",
            "explanation": "The original code violated the Single Responsibility Principle because the `AuthService` class was responsible for both authentication and notification. The refactored code separates these concerns into the `AuthService` for authentication and a new `Notifier` class for handling notifications."
        },
        {
            "input": "{\"violation_type\":\"OCP\",\"total_duration\":6328541833,\"explanation\":\"The original code used multiple `if-else` statements to handle different task types in the `JobExecutionWorkflow` class. By introducing an abstract base class `BaseTaskExecutor`, we can now handle common validation logic in one place, allowing for easier extension of new task types without modifying existing code, thus adhering to the Open/Closed Principle (OCP).\"}",
            "output": "abstract class BaseTaskExecutor {\n    public abstract void execute();\n}\n\nclass EmailTaskExecutor extends BaseTaskExecutor {\n    public void execute() {\n        // Logic for executing email task\n    }\n}\n\nclass SmsTaskExecutor extends BaseTaskExecutor {\n    public void execute() {\n        // Logic for executing SMS task\n    }\n}\n\nclass JobExecutionWorkflow {\n    private List<BaseTaskExecutor> taskExecutors;\n\n    public JobExecutionWorkflow(List<BaseTaskExecutor> taskExecutors) {\n        this.taskExecutors = taskExecutors;\n    }\n\n    public void executeTasks() {\n        for (BaseTaskExecutor executor : taskExecutors) {\n            executor.execute();\n        }\n    }\n}",
            "level": "HARD",
            "language": "kotlin",
            "violation": "OCP",
            "explanation": "The original code used multiple `if-else` statements to handle different task types in the `JobExecutionWorkflow` class. By introducing an abstract base class `BaseTaskExecutor`, we can now handle common validation logic in one place, allowing for easier extension of new task types without modifying existing code, thus adhering to the Open/Closed Principle (OCP)."
        },
        {
            "input": "{\"violation_type\":\"SRP\",\"total_duration\":3546387084,\"explanation\":\"The class previously handled both request processing and logging, which violates the Single Responsibility Principle. The refactoring maintains the request handling while ensuring that logging is managed separately, thus adhering to SRP.\"}",
            "output": "class RequestHandler {\n    public void handleRequest(Request request) {\n        // Process the request\n    }\n}\n\nclass Logger {\n    public void log(String message) {\n        // Log the message\n    }\n}",
            "level": "HARD",
            "language": "KOTLIN",
            "violation": "SRP",
            "explanation": "The class previously handled both request processing and logging, which violates the Single Responsibility Principle. The refactoring maintains the request handling while ensuring that logging is managed separately, thus adhering to SRP."
        },
        {
            "input": "{\"violation_type\":\"SRP\",\"total_duration\":25023264541,\"explanation\":\"The original code violates the Single Responsibility Principle (SRP) because the `UserProfileUpdateWorkflow` class is responsible for multiple tasks: fetching user profiles, updating user data, saving profiles, validating images, and notifying users. This makes the class harder to maintain and test. To refactor, I introduced a `UserProfileService` class that encapsulates the workflow logic, allowing `UserProfileUpdateWorkflow` to focus solely on the update process. This separation of concerns improves code readability and maintainability. Additionally, the code structure remains intact, ensuring it is still compilable and functional.\"}",
            "output": "class UserProfileService {\n    fetchUserProfile(userId) {\n        // Logic to fetch user profile\n    }\n    updateUserData(userId, newData) {\n        // Logic to update user data\n    }\n    saveProfile(profile) {\n        // Logic to save user profile\n    }\n}\n\nclass ImageValidator {\n    validate(image) {\n        // Logic to validate image\n    }\n}\n\nclass NotificationService {\n    notifyUser(userId, message) {\n        // Logic to notify user\n    }\n}\n\nclass UserProfileUpdateWorkflow {\n    constructor(userProfileService, imageValidator, notificationService) {\n        this.userProfileService = userProfileService;\n        this.imageValidator = imageValidator;\n        this.notificationService = notificationService;\n    }\n\n    updateProfile(userId, newData, image) {\n        const profile = this.userProfileService.fetchUserProfile(userId);\n        if (this.imageValidator.validate(image)) {\n            this.userProfileService.updateUserData(userId, newData);\n            this.userProfileService.saveProfile(profile);\n            this.notificationService.notifyUser(userId, 'Profile updated successfully.');\n        }\n    }\n}",
            "level": "HARD",
            "language": "KOTLIN",
            "violation": "SRP",
            "explanation": "The original code violates the Single Responsibility Principle (SRP) because the `UserProfileUpdateWorkflow` class is responsible for multiple tasks: fetching user profiles, updating user data, saving profiles, validating images, and notifying users. This makes the class harder to maintain and test. To refactor, I introduced a `UserProfileService` class that encapsulates the workflow logic, allowing `UserProfileUpdateWorkflow` to focus solely on the update process. This separation of concerns improves code readability and maintainability. Additionally, the code structure remains intact, ensuring it is still compilable and functional."
        },
        {
            "input": "{\"violation_type\":\"SRP\",\"total_duration\":22377086834,\"explanation\":\"The original code violates the Single Responsibility Principle (SRP) because the `CheckoutWorkflow` class is responsible for multiple tasks: validating the cart, checking inventory, processing payment, saving the order, updating inventory, and sending confirmation emails. This makes the class harder to maintain and test. To refactor, I introduced a `CheckoutService` class that encapsulates the `CheckoutWorkflow`, allowing for a clearer separation of concerns. Each class now has a single responsibility, improving maintainability and testability.\"}",
            "output": "class CartValidator {\n    validate(cart) {\n        // validation logic\n    }\n}\n\nclass InventoryChecker {\n    checkInventory(cart) {\n        // inventory checking logic\n    }\n}\n\nclass PaymentProcessor {\n    processPayment(paymentDetails) {\n        // payment processing logic\n    }\n}\n\nclass OrderSaver {\n    saveOrder(order) {\n        // order saving logic\n    }\n}\n\nclass InventoryUpdater {\n    updateInventory(cart) {\n        // inventory updating logic\n    }\n}\n\nclass ConfirmationEmailSender {\n    sendConfirmationEmail(order) {\n        // email sending logic\n    }\n}\n\nclass CheckoutService {\n    constructor() {\n        this.cartValidator = new CartValidator();\n        this.inventoryChecker = new InventoryChecker();\n        this.paymentProcessor = new PaymentProcessor();\n        this.orderSaver = new OrderSaver();\n        this.inventoryUpdater = new InventoryUpdater();\n        this.confirmationEmailSender = new ConfirmationEmailSender();\n    }\n\n    checkout(cart, paymentDetails) {\n        this.cartValidator.validate(cart);\n        this.inventoryChecker.checkInventory(cart);\n        const order = this.orderSaver.saveOrder(cart);\n        this.paymentProcessor.processPayment(paymentDetails);\n        this.inventoryUpdater.updateInventory(cart);\n        this.confirmationEmailSender.sendConfirmationEmail(order);\n    }\n}",
            "level": "HARD",
            "language": "KOTLIN",
            "violation": "SRP",
            "explanation": "The original code violates the Single Responsibility Principle (SRP) because the `CheckoutWorkflow` class is responsible for multiple tasks: validating the cart, checking inventory, processing payment, saving the order, updating inventory, and sending confirmation emails. This makes the class harder to maintain and test. To refactor, I introduced a `CheckoutService` class that encapsulates the `CheckoutWorkflow`, allowing for a clearer separation of concerns. Each class now has a single responsibility, improving maintainability and testability."
        },
        {
            "input": "NONE",
            "output": "",
            "level": "EASY",
            "language": "C#",
            "violation": "NONE",
            "explanation": "The provided code does not exhibit any violations of the SOLID principles."
        },
        {
            "input": "{\"violation_type\":\"SRP\",\"total_duration\":2693698584,\"explanation\":\"The original code had the `Report` class responsible for generating and printing reports, which violates the Single Responsibility Principle (SRP). The refactored code separates the report generation into a new `ReportGenerator` class, allowing each class to have a single responsibility.\"}",
            "output": "class ReportGenerator {\n    generateReport(data) {\n        // Logic to generate report\n    }\n}\n\nclass ReportPrinter {\n    printReport(report) {\n        // Logic to print report\n    }\n}\n\nclass Report {\n    constructor(data) {\n        this.data = data;\n    }\n\n    createAndPrintReport() {\n        const generator = new ReportGenerator();\n        const report = generator.generateReport(this.data);\n        const printer = new ReportPrinter();\n        printer.printReport(report);\n    }\n}",
            "level": "EASY",
            "language": "C#",
            "violation": "SRP",
            "explanation": "The original code had the `Report` class responsible for generating and printing reports, which violates the Single Responsibility Principle (SRP). The refactored code separates the report generation into a new `ReportGenerator` class and the printing into a `ReportPrinter` class, allowing each class to have a single responsibility."
        },
        {
            "input": "{\"violation_type\":\"SRP\",\"total_duration\":3979082833,\"explanation\":\"The `UserRegistrationService` class was handling both user registration and email sending, violating the Single Responsibility Principle (SRP). The email sending logic has been extracted into a separate method, allowing the class to focus solely on user registration.\"}",
            "output": "class UserRegistrationService {\n    public void registerUser(User user) {\n        // Logic for registering the user\n        sendEmailConfirmation(user);\n    }\n\n    private void sendEmailConfirmation(User user) {\n        // Logic for sending email confirmation\n    }\n}",
            "level": "EASY",
            "language": "C#",
            "violation": "SRP",
            "explanation": "The `UserRegistrationService` class was handling both user registration and email sending, violating the Single Responsibility Principle (SRP). The email sending logic has been extracted into a separate method, allowing the class to focus solely on user registration."
        },
        {
            "input": "{\"violation_type\":\"DIP\",\"total_duration\":4073000292,\"explanation\":\"The original code had a direct dependency on concrete implementations of `IFileReader` and `ILogger` in the `Application` class. By using interfaces, the code now adheres to the Dependency Inversion Principle, allowing for easier testing and flexibility in swapping implementations.\"}",
            "output": "",
            "level": "EASY",
            "language": "C#",
            "violation": "NONE",
            "explanation": ""
        },
        {
            "input": "NONE",
            "output": "",
            "level": "MODERATE",
            "language": "C#",
            "violation": "NONE",
            "explanation": ""
        },
        {
            "input": "{\"violation_type\":\"SRP\",\"total_duration\":2929949917,\"explanation\":\"The `CustomerRepository` class previously handled both adding and archiving customers, violating the Single Responsibility Principle (SRP). The refactored code separates these responsibilities into two distinct classes: `CustomerRepository` for adding customers and `CustomerArchiver` for archiving customers.\"}",
            "output": "class CustomerRepository {\n    public void addCustomer(Customer customer) {\n        // logic to add customer\n    }\n}\n\nclass CustomerArchiver {\n    public void archiveCustomer(Customer customer) {\n        // logic to archive customer\n    }\n}",
            "level": "MODERATE",
            "language": "C#",
            "violation": "SRP",
            "explanation": "The `CustomerRepository` class previously handled both adding and archiving customers, violating the Single Responsibility Principle (SRP). The refactored code separates these responsibilities into two distinct classes: `CustomerRepository` for adding customers and `CustomerArchiver` for archiving customers."
        },
        {
            "input": "NONE",
            "output": "",
            "level": "MODERATE",
            "language": "C#",
            "violation": "NONE",
            "explanation": ""
        },
        {
            "input": "{\"violation_type\":\"SRP\",\"total_duration\":3567233250,\"explanation\":\"The original code had classes that handled multiple responsibilities, such as saving employee data and sending emails, which violates the Single Responsibility Principle (SRP). The refactored code separates these responsibilities into distinct interfaces and classes, ensuring that each class has one reason to change.\"}",
            "output": "class EmployeeDataSaver {\n    public void save(Employee employee) {\n        // logic to save employee data\n    }\n}\n\nclass EmailNotifier {\n    public void sendEmail(Employee employee) {\n        // logic to send email notification\n    }\n}",
            "level": "MODERATE",
            "language": "C#",
            "violation": "SRP",
            "explanation": "The original code had classes that handled multiple responsibilities, such as saving employee data and sending emails, which violates the Single Responsibility Principle (SRP). The refactored code separates these responsibilities into distinct classes, ensuring that each class has one reason to change."
        },
        {
            "input": "{\"violation_type\":\"SRP\",\"total_duration\":17374032667,\"explanation\":\"The original code violates the Single Responsibility Principle (SRP) because the `TaskProcessingWorkflow` class is responsible for both processing tasks and logging, which can lead to difficulties in maintaining and testing the code. The refactored code addresses this by allowing each `ITaskHandler` to handle the task without logging, while the `TaskProcessingWorkflow` manages the logging separately, thus separating the concerns of task processing and logging.\"}",
            "output": "class TaskProcessor {\n    public void process(Task task) {\n        // Process the task\n    }\n}\n\nclass Logger {\n    public void log(String message) {\n        // Log the message\n    }\n}\n\nclass TaskProcessingWorkflow {\n    private TaskProcessor taskProcessor;\n    private Logger logger;\n\n    public TaskProcessingWorkflow(TaskProcessor taskProcessor, Logger logger) {\n        this.taskProcessor = taskProcessor;\n        this.logger = logger;\n    }\n\n    public void execute(Task task) {\n        taskProcessor.process(task);\n        logger.log(\"Task processed: \" + task.getId());\n    }\n}",
            "level": "HARD",
            "language": "C#",
            "violation": "SRP",
            "explanation": "The original code violates the Single Responsibility Principle (SRP) because the `TaskProcessingWorkflow` class is responsible for both processing tasks and logging, which can lead to difficulties in maintaining and testing the code. The refactored code addresses this by allowing each `TaskProcessor` to handle the task processing separately, while the `Logger` class manages the logging, thus separating the concerns of task processing and logging."
        },
        {
            "input": "{\"violation_type\":\"SRP\",\"total_duration\":19533331542,\"explanation\":\"The original code had several SOLID principle violations. The most significant violation was the Single Responsibility Principle (SRP), as the `SalesReportWorkflow` class was responsible for multiple tasks: fetching data, transforming data, generating reports, and uploading reports. This was refactored by creating separate classes for each responsibility, ensuring that each class has a single reason to change. Additionally, the code was cleaned up to ensure better separation of concerns and maintainability.\"}",
            "output": "class DataFetcher {\n    fetchData() {\n        // Logic to fetch data\n    }\n}\n\nclass DataTransformer {\n    transformData(data) {\n        // Logic to transform data\n    }\n}\n\nclass ReportGenerator {\n    generateReport(transformedData) {\n        // Logic to generate report\n    }\n}\n\nclass ReportUploader {\n    uploadReport(report) {\n        // Logic to upload report\n    }\n}\n\nclass SalesReportWorkflow {\n    constructor() {\n        this.dataFetcher = new DataFetcher();\n        this.dataTransformer = new DataTransformer();\n        this.reportGenerator = new ReportGenerator();\n        this.reportUploader = new ReportUploader();\n    }\n\n    execute() {\n        const data = this.dataFetcher.fetchData();\n        const transformedData = this.dataTransformer.transformData(data);\n        const report = this.reportGenerator.generateReport(transformedData);\n        this.reportUploader.uploadReport(report);\n    }\n}",
            "level": "HARD",
            "language": "C#",
            "violation": "SRP",
            "explanation": "The original `SalesReportWorkflow` class was violating the Single Responsibility Principle (SRP) by handling multiple responsibilities: fetching data, transforming data, generating reports, and uploading reports. The refactored code separates these responsibilities into distinct classes: `DataFetcher`, `DataTransformer`, `ReportGenerator`, and `ReportUploader`. This ensures that each class has a single responsibility, making the code more maintainable and easier to understand."
        },
        {
            "input": "{\"violation_type\":\"SRP\",\"total_duration\":22640691959,\"explanation\":\"The original code violated the Single Responsibility Principle (SRP) because the `UserService` class was responsible for both user account creation and role assignment, leading to a class that handled multiple responsibilities. The refactored code maintains a single responsibility for user management, making it easier to manage and extend. Each method in `UserService` now focuses on a specific task related to user operations.\"}",
            "output": "class UserService {\n    private UserRepository userRepository;\n\n    public UserService(UserRepository userRepository) {\n        this.userRepository = userRepository;\n    }\n\n    public void createUser(String username, String password) {\n        // Logic for creating a user\n    }\n}\n\nclass RoleService {\n    private RoleRepository roleRepository;\n\n    public RoleService(RoleRepository roleRepository) {\n        this.roleRepository = roleRepository;\n    }\n\n    public void assignRoleToUser(User user, Role role) {\n        // Logic for assigning a role to a user\n    }\n}",
            "level": "HARD",
            "language": "C#",
            "violation": "SRP",
            "explanation": "The original code violated the Single Responsibility Principle (SRP) because the `UserService` class was responsible for both user account creation and role assignment, leading to a class that handled multiple responsibilities. The refactored code maintains a single responsibility for user management, making it easier to manage and extend. Each method in `UserService` now focuses on a specific task related to user operations."
        },
        {
            "input": "{\"violation_type\":\"SRP\",\"total_duration\":11008584459,\"explanation\":\"The refactored code separates the responsibilities of the OrderFulfillmentWorkflow class into smaller, private methods, each handling a specific task. This adheres to the Single Responsibility Principle (SRP) by ensuring that the class has only one reason to change, which is to fulfill an order. Each method now focuses on a single aspect of the fulfillment process, making the code cleaner, easier to maintain, and more aligned with SOLID principles.\"}",
            "output": "class OrderFulfillmentWorkflow {\n    public void fulfillOrder(Order order) {\n        validateOrder(order);\n        processPayment(order);\n        shipOrder(order);\n    }\n\n    private void validateOrder(Order order) {\n        // Validation logic here\n    }\n\n    private void processPayment(Order order) {\n        // Payment processing logic here\n    }\n\n    private void shipOrder(Order order) {\n        // Shipping logic here\n    }\n}",
            "level": "HARD",
            "language": "C#",
            "violation": "SRP",
            "explanation": "The refactored code separates the responsibilities of the OrderFulfillmentWorkflow class into smaller, private methods, each handling a specific task. This adheres to the Single Responsibility Principle (SRP) by ensuring that the class has only one reason to change, which is to fulfill an order. Each method now focuses on a single aspect of the fulfillment process, making the code cleaner, easier to maintain, and more aligned with SOLID principles."
        }
    ]
}