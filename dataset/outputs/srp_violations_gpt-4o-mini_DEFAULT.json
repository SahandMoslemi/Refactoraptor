{
  "code_examples": [
    {
      "input": "public class Employee {\n    private String name;\n    public void saveToDatabase() {\n        \n    }\n    public void generateReport() {\n        \n    }\n}",
      "output": "public class Employee {\n    private String name;\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n}\n\npublic class EmployeeRepository {\n    public void saveToDatabase(Employee employee) {\n        // save employee to database\n    }\n}\n\npublic class EmployeeReportGenerator {\n    public void generateReport(Employee employee) {\n        // generate employee report\n    }\n}",
      "level": "EASY",
      "language": "JAVA",
      "violation": "Single Responsibility Principle",
      "explanation": "The original Employee class violates the Single Responsibility Principle because it has multiple responsibilities: managing employee data and handling database operations and report generation. The refactored code separates these concerns into three classes: Employee for data management, EmployeeRepository for database operations, and EmployeeReportGenerator for report generation."
    },
    {
      "input": "public class Book {\n    private String title;\n    public void print() {\n        \n    }\n    public void save() {\n        \n    }\n}",
      "output": "public class Book {\n    private String title;\n\n    public String getTitle() {\n        return title;\n    }\n\n    public void setTitle(String title) {\n        this.title = title;\n    }\n}\n\npublic class BookPrinter {\n    public void print(Book book) {\n        // print book details\n    }\n}\n\npublic class BookSaver {\n    public void save(Book book) {\n        // save book to file\n    }\n}",
      "level": "EASY",
      "language": "JAVA",
      "violation": "Single Responsibility Principle",
      "explanation": "The original Book class violates the Single Responsibility Principle because it has multiple responsibilities: managing book data and handling printing and saving operations. The refactored code separates these concerns into different classes: Book for data management, BookPrinter for printing, and BookSaver for saving."
    },
    {
      "input": "public class Invoice {\n    public void calculateTotal() {\n        \n    }\n    public void printInvoice() {\n        \n    }\n    public void saveToFile() {\n        \n    }\n}",
      "output": "public class Invoice {\n    private double total;\n\n    public void calculateTotal() {\n        // calculate total\n    }\n\n    public double getTotal() {\n        return total;\n    }\n}\n\npublic class InvoicePrinter {\n    public void printInvoice(Invoice invoice) {\n        // print invoice\n    }\n}\n\npublic class InvoiceSaver {\n    public void saveToFile(Invoice invoice) {\n        // save invoice to file\n    }\n}",
      "level": "EASY",
      "language": "JAVA",
      "violation": "Single Responsibility Principle",
      "explanation": "The original Invoice class violates the Single Responsibility Principle because it has multiple responsibilities: calculating the total, printing the invoice, and saving it to a file. By refactoring, we separate these responsibilities into three distinct classes: Invoice for handling invoice data, InvoicePrinter for printing, and InvoiceSaver for saving to a file."
    },
    {
      "input": "public class User {\n    private String username;\n    public void login() {\n        \n    }\n    public void sendEmail() {\n        \n    }\n}",
      "output": "public class User {\n    private String username;\n\n    public void login() {\n        // login logic\n    }\n}\n\npublic class EmailService {\n    public void sendEmail(User user) {\n        // send email to user\n    }\n}",
      "level": "EASY",
      "language": "JAVA",
      "violation": "Single Responsibility Principle",
      "explanation": "The original User class violates the Single Responsibility Principle because it handles both user authentication (login) and email sending. By separating the email functionality into a new EmailService class, we ensure that each class has a single responsibility."
    },
    {
      "input": "public class Order {\n    public void addItem(String item) {\n        \n    }\n    public void processPayment() {\n        \n    }\n    public void sendConfirmationEmail() {\n        \n    }\n}",
      "output": "public class Order {\n    private List<String> items = new ArrayList<>();\n\n    public void addItem(String item) {\n        items.add(item);\n    }\n\n    public List<String> getItems() {\n        return items;\n    }\n}\n\npublic class PaymentProcessor {\n    public void processPayment(Order order) {\n        // process payment for the order\n    }\n}\n\npublic class EmailService {\n    public void sendConfirmationEmail(Order order) {\n        // send confirmation email for the order\n    }\n}",
      "level": "MODERATE",
      "language": "JAVA",
      "violation": "Single Responsibility Principle",
      "explanation": "The original Order class violates the Single Responsibility Principle because it handles multiple responsibilities: managing items, processing payments, and sending confirmation emails. The refactored code separates these responsibilities into three distinct classes: Order, PaymentProcessor, and EmailService, each with a single responsibility."
    },
    {
      "input": "public class Student {\n    private String name;\n    public void enrollInCourse(String course) {\n        \n    }\n    public void calculateGPA() {\n        \n    }\n    public void printTranscript() {\n        \n    }\n}",
      "output": "public class Student {\n    private String name;\n\n    public void enrollInCourse(String course) {\n        // enroll logic\n    }\n}\n\npublic class GPAService {\n    public void calculateGPA(Student student) {\n        // calculate GPA\n    }\n}\n\npublic class TranscriptService {\n    public void printTranscript(Student student) {\n        // print transcript\n    }\n}",
      "level": "MODERATE",
      "language": "JAVA",
      "violation": "Single Responsibility Principle",
      "explanation": "The original Student class violates the Single Responsibility Principle because it has multiple responsibilities: enrolling in courses, calculating GPA, and printing transcripts. Each of these responsibilities should be handled by separate classes. The refactored code separates these concerns into three distinct classes: Student, GPAService, and TranscriptService."
    },
    {
      "input": "public class Product {\n    private String name;\n    public void updateStock(int amount) {\n        \n    }\n    public void displayProduct() {\n        \n    }\n    public void logChange() {\n        \n    }\n}",
      "output": "public class Product {\n    private String name;\n\n    public void updateStock(int amount) {\n        // update stock\n    }\n\n    public void displayProduct() {\n        // display product\n    }\n}\n\npublic class ProductLogger {\n    public void logChange(Product product) {\n        // log change\n    }\n}",
      "level": "MODERATE",
      "language": "JAVA",
      "violation": "Single Responsibility Principle",
      "explanation": "The original Product class violates the Single Responsibility Principle because it has multiple responsibilities: updating stock, displaying the product, and logging changes. By refactoring, we separate the logging functionality into a new class (ProductLogger), allowing the Product class to focus solely on product-related operations."
    },
    {
      "input": "public class Vehicle {\n    private String type;\n    public void startEngine() {\n        \n    }\n    public void calculateFuelEfficiency() {\n        \n    }\n    public void scheduleMaintenance() {\n        \n    }\n}",
      "output": "public class Vehicle {\n    private String type;\n    public void startEngine() {\n        // start engine\n    }\n}\n\npublic class FuelEfficiencyCalculator {\n    public void calculateFuelEfficiency(Vehicle vehicle) {\n        // calculate fuel efficiency\n    }\n}\n\npublic class MaintenanceScheduler {\n    public void scheduleMaintenance(Vehicle vehicle) {\n        // schedule maintenance\n    }\n}",
      "level": "MODERATE",
      "language": "JAVA",
      "violation": "Single Responsibility Principle",
      "explanation": "The original Vehicle class violates the Single Responsibility Principle because it has multiple responsibilities: starting the engine, calculating fuel efficiency, and scheduling maintenance. Each of these responsibilities has been separated into its own class (FuelEfficiencyCalculator and MaintenanceScheduler), allowing the Vehicle class to focus solely on vehicle-related functionalities."
    },
    {
      "input": "import java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.UUID;\nimport javax.mail.*;\nimport javax.mail.internet.*;\nimport java.util.Properties;\n\npublic class UserOnboardingService {\n\n    private final String dbUrl;\n    private final String smtpHost;\n\n    public UserOnboardingService(String dbUrl, String smtpHost) {\n        this.dbUrl = dbUrl;\n        this.smtpHost = smtpHost;\n    }\n\n    public boolean onboardNewUser(String username, String email, String password) {\n        System.out.println(\"[UserOnboardingService] Starting onboarding for user: \" + username);\n\n        if (userExists(username, email)) {\n            System.out.println(\"[UserOnboardingService] User already exists.\");\n            logEvent(\"UserRegistrationFailed\", username, \"User already exists\");\n            return false;\n        }\n        System.out.println(\"[UserOnboardingService] User does not exist.\");\n\n        String userId = UUID.randomUUID().toString();\n        String passwordHash = hashPassword(password);\n        System.out.println(\"[UserOnboardingService] Password hashed.\");\n\n        if (!saveUserToDatabase(userId, username, email, passwordHash)) {\n            System.out.println(\"[UserOnboardingService] Failed to save user to database.\");\n            logEvent(\"UserRegistrationFailed\", username, \"DB Save Failed\");\n            return false;\n        }\n        System.out.println(\"[UserOnboardingService] User saved with ID: \" + userId);\n\n        if (!sendVerificationEmail(email, userId)) {\n            System.out.println(\"[UserOnboardingService] Failed to send verification email.\");\n            logEvent(\"UserRegistrationFailed\", username, \"Email Sending Failed\");\n            \n            return false;\n        }\n        System.out.println(\"[UserOnboardingService] Verification email sent.\");\n\n        initializeUserProfile(userId);\n        System.out.println(\"[UserOnboardingService] User profile initialized.\");\n\n        logEvent(\"UserRegistered\", username, \"Success\");\n        System.out.println(\"[UserOnboardingService] Onboarding complete for user: \" + username);\n        return true;\n    }\n\n    private boolean userExists(String username, String email) {\n        System.out.println(\"[UserOnboardingService] Checking if user exists (DB: \" + dbUrl + \")...\");\n        String sql = \"SELECT COUNT(*) FROM users WHERE username = ? OR email = ?\";\n        try (Connection conn = DriverManager.getConnection(dbUrl);\n             PreparedStatement pstmt = conn.prepareStatement(sql)) {\n            pstmt.setString(1, username);\n            pstmt.setString(2, email);\n            ResultSet rs = pstmt.executeQuery();\n            if (rs.next()) {\n                return rs.getInt(1) > 0;\n            }\n            return false;\n        } catch (SQLException e) {\n            System.err.println(\"[UserOnboardingService] Database error checking existence: \" + e.getMessage());\n            return false;\n        }\n    }\n\n    private String hashPassword(String password) {\n        System.out.println(\"[UserOnboardingService] Hashing password...\");\n\n        return \"hashed_\" + password; \n    }\n\n    private boolean saveUserToDatabase(String userId, String username, String email, String passwordHash) {\n        System.out.println(\"[UserOnboardingService] Saving user to DB: \" + dbUrl + \"...\");\n        String sql = \"INSERT INTO users (id, username, email, password_hash) VALUES (?, ?, ?, ?)\";\n        try (Connection conn = DriverManager.getConnection(dbUrl);\n             PreparedStatement pstmt = conn.prepareStatement(sql)) {\n            pstmt.setString(1, userId);\n            pstmt.setString(2, username);\n            pstmt.setString(3, email);\n            pstmt.setString(4, passwordHash);\n            int affectedRows = pstmt.executeUpdate();\n            return affectedRows > 0;\n        } catch (SQLException e) {\n            System.err.println(\"[UserOnboardingService] Database error saving user: \" + e.getMessage());\n            return false;\n        }\n    }\n\n    private boolean sendVerificationEmail(String email, String userId) {\n        System.out.println(\"[UserOnboardingService] Sending verification email to \" + email + \" (SMTP: \" + smtpHost + \")...\");\n        Properties props = new Properties();\n        props.put(\"mail.smtp.auth\", \"true\");\n        props.put(\"mail.smtp.starttls.enable\", \"true\");\n        props.put(\"mail.smtp.host\", smtpHost);\n        props.put(\"mail.smtp.port\", \"587\");\n\n        Session session = Session.getInstance(props, new Authenticator() {\n            protected PasswordAuthentication getPasswordAuthentication() {\n                return new PasswordAuthentication(\"no-reply@example.com\", \"password\"); \n            }\n        });\n\n        try {\n            Message message = new MimeMessage(session);\n            message.setFrom(new InternetAddress(\"no-reply@example.com\"));\n            message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(email));\n            message.setSubject(\"Verify Your Email Address\");\n            message.setText(\"Please click the link to verify your email: http:\n\n\n            Transport.send(message);\n            return true;\n        } catch (MessagingException e) {\n            System.err.println(\"[UserOnboardingService] Error sending email: \" + e.getMessage());\n            return false;\n        }\n    }\n\n    private void initializeUserProfile(String userId) {\n        System.out.println(\"[UserOnboardingService] Initializing profile for user ID: \" + userId + \"...\");\n\n        String sql = \"INSERT INTO user_profiles (user_id, registration_date) VALUES (?, CURRENT_DATE)\";\n        try (Connection conn = DriverManager.getConnection(dbUrl);\n             PreparedStatement pstmt = conn.prepareStatement(sql)) {\n            pstmt.setString(1, userId);\n            pstmt.executeUpdate();\n        } catch (SQLException e) {\n            System.err.println(\"[UserOnboardingService] Database error initializing profile: \" + e.getMessage());\n\n        }\n    }\n\n    private void logEvent(String eventType, String relatedUser, String details) {\n        System.out.println(\"[UserOnboardingService] LOG: Type=\" + eventType + \", User=\" + relatedUser + \", Details=\" + details);\n\n\n    }\n\n    public static void main(String[] args) {\n        String testDbUrl = \"jdbc:sqlite:test_onboarding.db\";\n        String testSmtpHost = \"localhost\";\n\n        try (Connection conn = DriverManager.getConnection(testDbUrl)) {\n            conn.createStatement().execute(\"DROP TABLE IF EXISTS users;\");\n            conn.createStatement().execute(\"CREATE TABLE users (id TEXT PRIMARY KEY, username TEXT UNIQUE, email TEXT UNIQUE, password_hash TEXT);\");\n            conn.createStatement().execute(\"DROP TABLE IF EXISTS user_profiles;\");\n            conn.createStatement().execute(\"CREATE TABLE user_profiles (user_id TEXT PRIMARY KEY, registration_date DATE);\");\n             conn.createStatement().execute(\"DROP TABLE IF EXISTS audit_log;\");\n            conn.createStatement().execute(\"CREATE TABLE audit_log (event_type TEXT, related_user TEXT, details TEXT);\");\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n\n        UserOnboardingService service = new UserOnboardingService(testDbUrl, testSmtpHost);\n\n        service.onboardNewUser(\"johndoe\", \"john.doe@example.com\", \"securepass\");\n        service.onboardNewUser(\"johndoe\", \"john.doe@example.com\", \"anotherpass\"); \n        service.onboardNewUser(\"janedoe\", \"jane.doe@example.com\", \"easypass\");\n    }\n}\n",
      "output": "import java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.UUID;\nimport javax.mail.;\nimport javax.mail.internet.;\nimport java.util.Properties;\n\npublic class UserOnboardingService {\n\n    private final String dbUrl;\n    private final String smtpHost;\n    private final UserRepository userRepository;\n    private final EmailService emailService;\n    private final UserProfileService userProfileService;\n\n    public UserOnboardingService(String dbUrl, String smtpHost) {\n        this.dbUrl = dbUrl;\n        this.smtpHost = smtpHost;\n        this.userRepository = new UserRepository(dbUrl);\n        this.emailService = new EmailService(smtpHost);\n        this.userProfileService = new UserProfileService(dbUrl);\n    }\n\n    public boolean onboardNewUser(String username, String email, String password) {\n        System.out.println(\"[UserOnboardingService] Starting onboarding for user: \" + username);\n\n        if (userRepository.userExists(username, email)) {\n            System.out.println(\"[UserOnboardingService] User already exists.\");\n            logEvent(\"UserRegistrationFailed\", username, \"User already exists\");\n            return false;\n        }\n        System.out.println(\"[UserOnboardingService] User does not exist.\");\n\n        String userId = UUID.randomUUID().toString();\n        String passwordHash = hashPassword(password);\n        System.out.println(\"[UserOnboardingService] Password hashed.\");\n\n        if (!userRepository.saveUser(userId, username, email, passwordHash)) {\n            System.out.println(\"[UserOnboardingService] Failed to save user to database.\");\n            logEvent(\"UserRegistrationFailed\", username, \"DB Save Failed\");\n            return false;\n        }\n        System.out.println(\"[UserOnboardingService] User saved with ID: \" + userId);\n\n        if (!emailService.sendVerificationEmail(email, userId)) {\n            System.out.println(\"[UserOnboardingService] Failed to send verification email.\");\n            logEvent(\"UserRegistrationFailed\", username, \"Email Sending Failed\");\n            return false;\n        }\n        System.out.println(\"[UserOnboardingService] Verification email sent.\");\n\n        userProfileService.initializeUserProfile(userId);\n        System.out.println(\"[UserOnboardingService] User profile initialized.\");\n\n        logEvent(\"UserRegistered\", username, \"Success\");\n        System.out.println(\"[UserOnboardingService] Onboarding complete for user: \" + username);\n        return true;\n    }\n\n    private String hashPassword(String password) {\n        System.out.println(\"[UserOnboardingService] Hashing password...\");\n        return \"hashed_\" + password;\n    }\n\n    private void logEvent(String eventType, String relatedUser, String details) {\n        System.out.println(\"[UserOnboardingService] LOG: Type=\" + eventType + \", User=\" + relatedUser + \", Details=\" + details);\n    }\n\n    public static void main(String[] args) {\n        String testDbUrl = \"jdbc:sqlite:test_onboarding.db\";\n        String testSmtpHost = \"localhost\";\n\n        try (Connection conn = DriverManager.getConnection(testDbUrl)) {\n            conn.createStatement().execute(\"DROP TABLE IF EXISTS users;\");\n            conn.createStatement().execute(\"CREATE TABLE users (id TEXT PRIMARY KEY, username TEXT UNIQUE, email TEXT UNIQUE, password_hash TEXT);\");\n            conn.createStatement().execute(\"DROP TABLE IF EXISTS user_profiles;\");\n            conn.createStatement().execute(\"CREATE TABLE user_profiles (user_id TEXT PRIMARY KEY, registration_date DATE);\");\n            conn.createStatement().execute(\"DROP TABLE IF EXISTS audit_log;\");\n            conn.createStatement().execute(\"CREATE TABLE audit_log (event_type TEXT, related_user TEXT, details TEXT);\");\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n\n        UserOnboardingService service = new UserOnboardingService(testDbUrl, testSmtpHost);\n\n        service.onboardNewUser(\"johndoe\", \"john.doe@example.com\", \"securepass\");\n        service.onboardNewUser(\"johndoe\", \"john.doe@example.com\", \"anotherpass\"); \n        service.onboardNewUser(\"janedoe\", \"jane.doe@example.com\", \"easypass\");\n    }\n}\n\nclass UserRepository {\n    private final String dbUrl;\n\n    public UserRepository(String dbUrl) {\n        this.dbUrl = dbUrl;\n    }\n\n    public boolean userExists(String username, String email) {\n        System.out.println(\"[UserRepository] Checking if user exists (DB: \" + dbUrl + \")...\");\n        String sql = \"SELECT COUNT() FROM users WHERE username = ? OR email = ?\";\n        try (Connection conn = DriverManager.getConnection(dbUrl);\n             PreparedStatement pstmt = conn.prepareStatement(sql)) {\n            pstmt.setString(1, username);\n            pstmt.setString(2, email);\n            ResultSet rs = pstmt.executeQuery();\n            if (rs.next()) {\n                return rs.getInt(1) > 0;\n            }\n            return false;\n        } catch (SQLException e) {\n            System.err.println(\"[UserRepository] Database error checking existence: \" + e.getMessage());\n            return false;\n        }\n    }\n\n    public boolean saveUser(String userId, String username, String email, String passwordHash) {\n        System.out.println(\"[UserRepository] Saving user to DB: \" + dbUrl + \"...\");\n        String sql = \"INSERT INTO users (id, username, email, password_hash) VALUES (?, ?, ?, ?)\";\n        try (Connection conn = DriverManager.getConnection(dbUrl);\n             PreparedStatement pstmt = conn.prepareStatement(sql)) {\n            pstmt.setString(1, userId);\n            pstmt.setString(2, username);\n            pstmt.setString(3, email);\n            pstmt.setString(4, passwordHash);\n            int affectedRows = pstmt.executeUpdate();\n            return affectedRows > 0;\n        } catch (SQLException e) {\n            System.err.println(\"[UserRepository] Database error saving user: \" + e.getMessage());\n            return false;\n        }\n    }\n}\n\nclass EmailService {\n    private final String smtpHost;\n\n    public EmailService(String smtpHost) {\n        this.smtpHost = smtpHost;\n    }\n\n    public boolean sendVerificationEmail(String email, String userId) {\n        System.out.println(\"[EmailService] Sending verification email to \" + email + \" (SMTP: \" + smtpHost + \")...\");\n        Properties props = new Properties();\n        props.put(\"mail.smtp.auth\", \"true\");\n        props.put(\"mail.smtp.starttls.enable\", \"true\");\n        props.put(\"mail.smtp.host\", smtpHost);\n        props.put(\"mail.smtp.port\", \"587\");\n\n        Session session = Session.getInstance(props, new Authenticator() {\n            protected PasswordAuthentication getPasswordAuthentication() {\n                return new PasswordAuthentication(\"no-reply@example.com\", \"password\");\n            }\n        });\n\n        try {\n            Message message = new MimeMessage(session);\n            message.setFrom(new InternetAddress(\"no-reply@example.com\"));\n            message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(email));\n            message.setSubject(\"Verify Your Email Address\");\n            message.setText(\"Please click the link to verify your email: http://app.com/verify?id=\" + userId);\n\n            Transport.send(message);\n            return true;\n        } catch (MessagingException e) {\n            System.err.println(\"[EmailService] Error sending email: \" + e.getMessage());\n            return false;\n        }\n    }\n}\n\nclass UserProfileService {\n    private final String dbUrl;\n\n    public UserProfileService(String dbUrl) {\n        this.dbUrl = dbUrl;\n    }\n\n    public void initializeUserProfile(String userId) {\n        System.out.println(\"[UserProfileService] Initializing profile for user ID: \" + userId + \"...\");\n\n        String sql = \"INSERT INTO user_profiles (user_id, registration_date) VALUES (?, CURRENT_DATE)\";\n        try (Connection conn = DriverManager.getConnection(dbUrl);\n             PreparedStatement pstmt = conn.prepareStatement(sql)) {\n            pstmt.setString(1, userId);\n            pstmt.executeUpdate();\n        } catch (SQLException e) {\n            System.err.println(\"[UserProfileService] Database error initializing profile: \" + e.getMessage());\n        }\n    }\n}",
      "level": "HARD",
      "language": "JAVA",
      "violation": "Single Responsibility Principle",
      "explanation": "The original code violates the Single Responsibility Principle (SRP) because the `UserOnboardingService` class is responsible for multiple tasks: user existence checking, user saving, email sending, and user profile initialization. Each of these tasks should be handled by separate classes. The refactored code introduces three new classes: `UserRepository`, `EmailService`, and `UserProfileService`, each handling a specific responsibility, thus adhering to the SRP."
    },
    {
      "input": "import java.io.FileWriter;\nimport java.io.IOException;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.PreparedStatement;\nimport java.sql.SQLException;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport javax.mail.*;\nimport javax.mail.internet.*;\nimport java.util.Properties;\n\npublic class InvoiceProcessor {\n\n    private final String dbUrl;\n    private final String invoiceStoragePath;\n    private final String smtpHost;\n\n    public InvoiceProcessor(String dbUrl, String invoiceStoragePath, String smtpHost) {\n        this.dbUrl = dbUrl;\n        this.invoiceStoragePath = invoiceStoragePath;\n        this.smtpHost = smtpHost;\n    }\n\n    public boolean processAndSendInvoice(int orderId, String customerEmail) {\n        System.out.println(\"[InvoiceProcessor] Starting invoice processing for Order ID: \" + orderId);\n\n        List<InvoiceItem> items = fetchOrderItems(orderId);\n        if (items == null || items.isEmpty()) {\n            System.out.println(\"[InvoiceProcessor] No items found for order \" + orderId + \". Cannot generate invoice.\");\n            return false;\n        }\n        System.out.println(\"[InvoiceProcessor] Fetched \" + items.size() + \" items.\");\n\n        double totalAmount = calculateTotal(items);\n        System.out.println(\"[InvoiceProcessor] Calculated total amount: \" + totalAmount);\n\n        String invoiceNumber = generateInvoiceNumber(orderId);\n        System.out.println(\"[InvoiceProcessor] Generated invoice number: \" + invoiceNumber);\n\n        if (!saveInvoiceToDatabase(invoiceNumber, orderId, customerEmail, totalAmount)) {\n            System.out.println(\"[InvoiceProcessor] Failed to save invoice to database.\");\n            return false;\n        }\n        System.out.println(\"[InvoiceProcessor] Invoice saved to database.\");\n\n        String invoiceFilePath = generatePdfInvoice(invoiceNumber, customerEmail, items, totalAmount);\n        if (invoiceFilePath == null) {\n            System.out.println(\"[InvoiceProcessor] Failed to generate PDF invoice.\");\n\n            return false;\n        }\n        System.out.println(\"[InvoiceProcessor] PDF invoice generated: \" + invoiceFilePath);\n\n        if (!emailInvoice(customerEmail, invoiceFilePath)) {\n            System.out.println(\"[InvoiceProcessor] Failed to email invoice.\");\n\n            return false;\n        }\n        System.out.println(\"[InvoiceProcessor] Invoice emailed to \" + customerEmail);\n\n        System.out.println(\"[InvoiceProcessor] Invoice processing complete for Order ID: \" + orderId);\n        return true;\n    }\n\n    private List<InvoiceItem> fetchOrderItems(int orderId) {\n        System.out.println(\"[InvoiceProcessor] Fetching order items for order \" + orderId + \" from DB \" + dbUrl + \"...\");\n\n        List<InvoiceItem> items = new ArrayList<>();\n        String sql = \"SELECT product_name, quantity, price FROM order_items WHERE order_id = ?\";\n        try (Connection conn = DriverManager.getConnection(dbUrl);\n             PreparedStatement pstmt = conn.prepareStatement(sql)) {\n            pstmt.setInt(1, orderId);\n            \n            items.add(new InvoiceItem(\"Gadget A\", 2, 19.99));\n            items.add(new InvoiceItem(\"Widget B\", 1, 45.50));\n\n        } catch (SQLException e) {\n            System.err.println(\"[InvoiceProcessor] Database error fetching items: \" + e.getMessage());\n            return null;\n        }\n        return items;\n    }\n\n    private double calculateTotal(List<InvoiceItem> items) {\n        System.out.println(\"[InvoiceProcessor] Calculating total...\");\n\n        double total = 0;\n        for (InvoiceItem item : items) {\n            total += item.quantity * item.price;\n        }\n        return total;\n    }\n\n    private String generateInvoiceNumber(int orderId) {\n        System.out.println(\"[InvoiceProcessor] Generating invoice number...\");\n\n        return \"INV-\" + orderId + \"-\" + new Date().getTime();\n    }\n\n    private boolean saveInvoiceToDatabase(String invoiceNumber, int orderId, String customerEmail, double totalAmount) {\n        System.out.println(\"[InvoiceProcessor] Saving invoice \" + invoiceNumber + \" to DB \" + dbUrl + \"...\");\n        String sql = \"INSERT INTO invoices (invoice_number, order_id, customer_email, total_amount, invoice_date) VALUES (?, ?, ?, ?, CURRENT_DATE)\";\n        try (Connection conn = DriverManager.getConnection(dbUrl);\n             PreparedStatement pstmt = conn.prepareStatement(sql)) {\n            pstmt.setString(1, invoiceNumber);\n            pstmt.setInt(2, orderId);\n            pstmt.setString(3, customerEmail);\n            pstmt.setDouble(4, totalAmount);\n            int affectedRows = pstmt.executeUpdate();\n            return affectedRows > 0;\n        } catch (SQLException e) {\n            System.err.println(\"[InvoiceProcessor] Database error saving invoice: \" + e.getMessage());\n            return false;\n        }\n    }\n\n    private String generatePdfInvoice(String invoiceNumber, String customerEmail, List<InvoiceItem> items, double totalAmount) {\n        System.out.println(\"[InvoiceProcessor] Generating PDF invoice for \" + invoiceNumber + \" in \" + invoiceStoragePath + \"...\");\n\n        String filePath = invoiceStoragePath + \"/\" + invoiceNumber + \".pdf\";\n        try (FileWriter writer = new FileWriter(filePath)) {\n\n            writer.write(\"Invoice Number: \" + invoiceNumber + \"\\n\");\n            writer.write(\"Customer: \" + customerEmail + \"\\n\");\n            writer.write(\"Items:\\n\");\n            for (InvoiceItem item : items) {\n                writer.write(\"  \" + item.productName + \" x\" + item.quantity + \" @ \" + item.price + \"\\n\");\n            }\n            writer.write(\"Total: \" + totalAmount + \"\\n\");\n\n            return filePath;\n        } catch (IOException e) {\n            System.err.println(\"[InvoiceProcessor] Error generating PDF file: \" + e.getMessage());\n            return null;\n        }\n\n    }\n\n    private boolean emailInvoice(String recipientEmail, String invoiceFilePath) {\n        System.out.println(\"[InvoiceProcessor] Emailing invoice \" + invoiceFilePath + \" to \" + recipientEmail + \" via SMTP \" + smtpHost + \"...\");\n\n        Properties props = new Properties();\n        props.put(\"mail.smtp.auth\", \"true\");\n        props.put(\"mail.smtp.starttls.enable\", \"true\");\n        props.put(\"mail.smtp.host\", smtpHost);\n        props.put(\"mail.smtp.port\", \"587\");\n\n        Session session = Session.getInstance(props, new Authenticator() {\n            protected PasswordAuthentication getPasswordAuthentication() {\n                return new PasswordAuthentication(\"invoices@example.com\", \"password\"); \n            }\n        });\n\n        try {\n            Message message = new MimeMessage(session);\n            message.setFrom(new InternetAddress(\"invoices@example.com\"));\n            message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(recipientEmail));\n            message.setSubject(\"Your Invoice\");\n            message.setText(\"Please find your invoice attached.\");\n\n            MimeBodyPart messageBodyPart = new MimeBodyPart();\n            messageBodyPart.setText(\"Please find your invoice attached.\");\n\n            Multipart multipart = new MimeMultipart();\n            multipart.addBodyPart(messageBodyPart);\n\n            MimeBodyPart attachmentPart = new MimeBodyPart();\n            attachmentPart.attachFile(invoiceFilePath);\n            multipart.addBodyPart(attachmentPart);\n\n            message.setContent(multipart);\n\n\n            Transport.send(message);\n            return true;\n        } catch (MessagingException | IOException e) {\n            System.err.println(\"[InvoiceProcessor] Error emailing invoice: \" + e.getMessage());\n            return false;\n        }\n    }\n\n    static class InvoiceItem {\n        String productName;\n        int quantity;\n        double price;\n\n        InvoiceItem(String productName, int quantity, double price) {\n            this.productName = productName;\n            this.quantity = quantity;\n            this.price = price;\n        }\n    }\n\n     public static void main(String[] args) {\n        String testDbUrl = \"jdbc:sqlite:test_invoices.db\";\n        String testInvoicePath = \"./invoices\";\n        String testSmtpHost = \"localhost\";\n\n        new java.io.File(testInvoicePath).mkdirs();\n\n        try (Connection conn = DriverManager.getConnection(testDbUrl)) {\n            conn.createStatement().execute(\"DROP TABLE IF EXISTS order_items;\");\n            conn.createStatement().execute(\"CREATE TABLE order_items (order_id INTEGER, product_name TEXT, quantity INTEGER, price REAL);\");\n             conn.createStatement().execute(\"INSERT INTO order_items (order_id, product_name, quantity, price) VALUES (101, 'Gadget A', 2, 19.99);\");\n             conn.createStatement().execute(\"INSERT INTO order_items (order_id, product_name, quantity, price) VALUES (101, 'Widget B', 1, 45.50);\");\n\n            conn.createStatement().execute(\"DROP TABLE IF EXISTS invoices;\");\n            conn.createStatement().execute(\"CREATE TABLE invoices (invoice_number TEXT PRIMARY KEY, order_id INTEGER UNIQUE, customer_email TEXT, total_amount REAL, invoice_date DATE);\");\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n\n        InvoiceProcessor processor = new InvoiceProcessor(testDbUrl, testInvoicePath, testSmtpHost);\n\n        processor.processAndSendInvoice(101, \"customer1@example.com\");\n        processor.processAndSendInvoice(102, \"customer2@example.com\"); \n\n    }\n}\n",
      "output": "import java.io.FileWriter;\nimport java.io.IOException;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.PreparedStatement;\nimport java.sql.SQLException;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport javax.mail.;\nimport javax.mail.internet.;\nimport java.util.Properties;\n\npublic class InvoiceProcessor {\n\n    private final String dbUrl;\n    private final String invoiceStoragePath;\n    private final String smtpHost;\n\n    public InvoiceProcessor(String dbUrl, String invoiceStoragePath, String smtpHost) {\n        this.dbUrl = dbUrl;\n        this.invoiceStoragePath = invoiceStoragePath;\n        this.smtpHost = smtpHost;\n    }\n\n    public boolean processAndSendInvoice(int orderId, String customerEmail) {\n        System.out.println(\"[InvoiceProcessor] Starting invoice processing for Order ID: \" + orderId);\n\n        List<InvoiceItem> items = fetchOrderItems(orderId);\n        if (items == null || items.isEmpty()) {\n            System.out.println(\"[InvoiceProcessor] No items found for order \" + orderId + \". Cannot generate invoice.\");\n            return false;\n        }\n        System.out.println(\"[InvoiceProcessor] Fetched \" + items.size() + \" items.\");\n\n        double totalAmount = calculateTotal(items);\n        System.out.println(\"[InvoiceProcessor] Calculated total amount: \" + totalAmount);\n\n        String invoiceNumber = generateInvoiceNumber(orderId);\n        System.out.println(\"[InvoiceProcessor] Generated invoice number: \" + invoiceNumber);\n\n        if (!saveInvoiceToDatabase(invoiceNumber, orderId, customerEmail, totalAmount)) {\n            System.out.println(\"[InvoiceProcessor] Failed to save invoice to database.\");\n            return false;\n        }\n        System.out.println(\"[InvoiceProcessor] Invoice saved to database.\");\n\n        String invoiceFilePath = new PdfInvoiceGenerator(invoiceStoragePath).generatePdfInvoice(invoiceNumber, customerEmail, items, totalAmount);\n        if (invoiceFilePath == null) {\n            System.out.println(\"[InvoiceProcessor] Failed to generate PDF invoice.\");\n            return false;\n        }\n        System.out.println(\"[InvoiceProcessor] PDF invoice generated: \" + invoiceFilePath);\n\n        if (!new EmailService(smtpHost).emailInvoice(customerEmail, invoiceFilePath)) {\n            System.out.println(\"[InvoiceProcessor] Failed to email invoice.\");\n            return false;\n        }\n        System.out.println(\"[InvoiceProcessor] Invoice emailed to \" + customerEmail);\n\n        System.out.println(\"[InvoiceProcessor] Invoice processing complete for Order ID: \" + orderId);\n        return true;\n    }\n\n    private List<InvoiceItem> fetchOrderItems(int orderId) {\n        System.out.println(\"[InvoiceProcessor] Fetching order items for order \" + orderId + \" from DB \" + dbUrl + \"...\");\n\n        List<InvoiceItem> items = new ArrayList<>();\n        String sql = \"SELECT product_name, quantity, price FROM order_items WHERE order_id = ?\";\n        try (Connection conn = DriverManager.getConnection(dbUrl);\n             PreparedStatement pstmt = conn.prepareStatement(sql)) {\n            pstmt.setInt(1, orderId);\n            items.add(new InvoiceItem(\"Gadget A\", 2, 19.99));\n            items.add(new InvoiceItem(\"Widget B\", 1, 45.50));\n        } catch (SQLException e) {\n            System.err.println(\"[InvoiceProcessor] Database error fetching items: \" + e.getMessage());\n            return null;\n        }\n        return items;\n    }\n\n    private double calculateTotal(List<InvoiceItem> items) {\n        System.out.println(\"[InvoiceProcessor] Calculating total...\");\n\n        double total = 0;\n        for (InvoiceItem item : items) {\n            total += item.quantity  item.price;\n        }\n        return total;\n    }\n\n    private String generateInvoiceNumber(int orderId) {\n        System.out.println(\"[InvoiceProcessor] Generating invoice number...\");\n        return \"INV-\" + orderId + \"-\" + new Date().getTime();\n    }\n\n    private boolean saveInvoiceToDatabase(String invoiceNumber, int orderId, String customerEmail, double totalAmount) {\n        System.out.println(\"[InvoiceProcessor] Saving invoice \" + invoiceNumber + \" to DB \" + dbUrl + \"...\");\n        String sql = \"INSERT INTO invoices (invoice_number, order_id, customer_email, total_amount, invoice_date) VALUES (?, ?, ?, ?, CURRENT_DATE)\";\n        try (Connection conn = DriverManager.getConnection(dbUrl);\n             PreparedStatement pstmt = conn.prepareStatement(sql)) {\n            pstmt.setString(1, invoiceNumber);\n            pstmt.setInt(2, orderId);\n            pstmt.setString(3, customerEmail);\n            pstmt.setDouble(4, totalAmount);\n            int affectedRows = pstmt.executeUpdate();\n            return affectedRows > 0;\n        } catch (SQLException e) {\n            System.err.println(\"[InvoiceProcessor] Database error saving invoice: \" + e.getMessage());\n            return false;\n        }\n    }\n\n    static class InvoiceItem {\n        String productName;\n        int quantity;\n        double price;\n\n        InvoiceItem(String productName, int quantity, double price) {\n            this.productName = productName;\n            this.quantity = quantity;\n            this.price = price;\n        }\n    }\n\n    public static void main(String[] args) {\n        String testDbUrl = \"jdbc:sqlite:test_invoices.db\";\n        String testInvoicePath = \"./invoices\";\n        String testSmtpHost = \"localhost\";\n\n        new java.io.File(testInvoicePath).mkdirs();\n\n        try (Connection conn = DriverManager.getConnection(testDbUrl)) {\n            conn.createStatement().execute(\"DROP TABLE IF EXISTS order_items;\");\n            conn.createStatement().execute(\"CREATE TABLE order_items (order_id INTEGER, product_name TEXT, quantity INTEGER, price REAL);\");\n            conn.createStatement().execute(\"INSERT INTO order_items (order_id, product_name, quantity, price) VALUES (101, 'Gadget A', 2, 19.99);\");\n            conn.createStatement().execute(\"INSERT INTO order_items (order_id, product_name, quantity, price) VALUES (101, 'Widget B', 1, 45.50);\");\n\n            conn.createStatement().execute(\"DROP TABLE IF EXISTS invoices;\");\n            conn.createStatement().execute(\"CREATE TABLE invoices (invoice_number TEXT PRIMARY KEY, order_id INTEGER UNIQUE, customer_email TEXT, total_amount REAL, invoice_date DATE);\");\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n\n        InvoiceProcessor processor = new InvoiceProcessor(testDbUrl, testInvoicePath, testSmtpHost);\n\n        processor.processAndSendInvoice(101, \"customer1@example.com\");\n        processor.processAndSendInvoice(102, \"customer2@example.com\");\n    }\n}\n\nclass PdfInvoiceGenerator {\n    private final String invoiceStoragePath;\n\n    public PdfInvoiceGenerator(String invoiceStoragePath) {\n        this.invoiceStoragePath = invoiceStoragePath;\n    }\n\n    public String generatePdfInvoice(String invoiceNumber, String customerEmail, List<InvoiceProcessor.InvoiceItem> items, double totalAmount) {\n        System.out.println(\"[PdfInvoiceGenerator] Generating PDF invoice for \" + invoiceNumber + \" in \" + invoiceStoragePath + \"...\");\n\n        String filePath = invoiceStoragePath + \"/\" + invoiceNumber + \".pdf\";\n        try (FileWriter writer = new FileWriter(filePath)) {\n            writer.write(\"Invoice Number: \" + invoiceNumber + \"\\n\");\n            writer.write(\"Customer: \" + customerEmail + \"\\n\");\n            writer.write(\"Items:\\n\");\n            for (InvoiceProcessor.InvoiceItem item : items) {\n                writer.write(\"  \" + item.productName + \" x\" + item.quantity + \" @ \" + item.price + \"\\n\");\n            }\n            writer.write(\"Total: \" + totalAmount + \"\\n\");\n            return filePath;\n        } catch (IOException e) {\n            System.err.println(\"[PdfInvoiceGenerator] Error generating PDF file: \" + e.getMessage());\n            return null;\n        }\n    }\n}\n\nclass EmailService {\n    private final String smtpHost;\n\n    public EmailService(String smtpHost) {\n        this.smtpHost = smtpHost;\n    }\n\n    public boolean emailInvoice(String recipientEmail, String invoiceFilePath) {\n        System.out.println(\"[EmailService] Emailing invoice \" + invoiceFilePath + \" to \" + recipientEmail + \" via SMTP \" + smtpHost + \"...\");\n\n        Properties props = new Properties();\n        props.put(\"mail.smtp.auth\", \"true\");\n        props.put(\"mail.smtp.starttls.enable\", \"true\");\n        props.put(\"mail.smtp.host\", smtpHost);\n        props.put(\"mail.smtp.port\", \"587\");\n\n        Session session = Session.getInstance(props, new Authenticator() {\n            protected PasswordAuthentication getPasswordAuthentication() {\n                return new PasswordAuthentication(\"invoices@example.com\", \"password\");\n            }\n        });\n\n        try {\n            Message message = new MimeMessage(session);\n            message.setFrom(new InternetAddress(\"invoices@example.com\"));\n            message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(recipientEmail));\n            message.setSubject(\"Your Invoice\");\n            message.setText(\"Please find your invoice attached.\");\n\n            MimeBodyPart messageBodyPart = new MimeBodyPart();\n            messageBodyPart.setText(\"Please find your invoice attached.\");\n\n            Multipart multipart = new MimeMultipart();\n            multipart.addBodyPart(messageBodyPart);\n\n            MimeBodyPart attachmentPart = new MimeBodyPart();\n            attachmentPart.attachFile(invoiceFilePath);\n            multipart.addBodyPart(attachmentPart);\n\n            message.setContent(multipart);\n\n            Transport.send(message);\n            return true;\n        } catch (MessagingException | IOException e) {\n            System.err.println(\"[EmailService] Error emailing invoice: \" + e.getMessage());\n            return false;\n        }\n    }\n}",
      "level": "HARD",
      "language": "JAVA",
      "violation": "Single Responsibility Principle",
      "explanation": "The original `InvoiceProcessor` class violates the Single Responsibility Principle (SRP) because it handles multiple responsibilities: fetching order items, calculating totals, generating PDF invoices, and emailing invoices. This makes the class difficult to maintain and test. The refactored code separates the concerns into three distinct classes: `PdfInvoiceGenerator` for generating PDF invoices, `EmailService` for handling email functionality, and `InvoiceProcessor` for processing invoices. Each class now has a single responsibility, making the code cleaner and more maintainable."
    },
    {
      "input": "import java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class DataMigrationService {\n\n    private final String sourceDbUrl;\n    private final String targetDbUrl;\n\n    public DataMigrationService(String sourceDbUrl, String targetDbUrl) {\n        this.sourceDbUrl = sourceDbUrl;\n        this.targetDbUrl = targetDbUrl;\n        initializeTargetDb();\n    }\n\n    private void initializeTargetDb() {\n        System.out.println(\"[DataMigrationService] Initializing target DB \" + targetDbUrl + \"...\");\n        String sql = \"CREATE TABLE IF NOT EXISTS migrated_data (id INTEGER PRIMARY KEY, value TEXT)\";\n        try (Connection conn = DriverManager.getConnection(targetDbUrl);\n             PreparedStatement pstmt = conn.prepareStatement(sql)) {\n            pstmt.executeUpdate();\n        } catch (SQLException e) {\n            System.err.println(\"[DataMigrationService] Error initializing target DB: \" + e.getMessage());\n        }\n    }\n\n    public int migrateData() {\n        System.out.println(\"[DataMigrationService] Starting data migration from \" + sourceDbUrl + \" to \" + targetDbUrl);\n\n        List<SourceData> sourceRecords = fetchSourceData();\n        if (sourceRecords == null || sourceRecords.isEmpty()) {\n            System.out.println(\"[DataMigrationService] No data found in source DB.\");\n            logMigrationEvent(\"Migration\", \"No data in source\", 0, false);\n            return 0;\n        }\n        System.out.println(\"[DataMigrationService] Fetched \" + sourceRecords.size() + \" records from source.\");\n\n        List<TargetData> targetRecords = transformData(sourceRecords);\n        if (targetRecords == null || targetRecords.isEmpty()) {\n            System.out.println(\"[DataMigrationService] No data after transformation.\");\n            logMigrationEvent(\"Migration\", \"No data after transformation\", sourceRecords.size(), false);\n            return 0;\n        }\n        System.out.println(\"[DataMigrationService] Transformed \" + targetRecords.size() + \" records.\");\n\n        int importedCount = saveTargetData(targetRecords);\n        System.out.println(\"[DataMigrationService] Saved \" + importedCount + \" records to target.\");\n\n        if (importedCount == targetRecords.size()) {\n            logMigrationEvent(\"Migration\", \"Success\", importedCount, true);\n             System.out.println(\"[DataMigrationService] Data migration complete. \" + importedCount + \" records migrated.\");\n        } else {\n             logMigrationEvent(\"Migration\", \"Partial Success or Failure\", importedCount, false);\n             System.out.println(\"[DataMigrationService] Data migration complete with issues. \" + importedCount + \" records migrated out of \" + targetRecords.size() + \".\");\n        }\n\n        return importedCount;\n    }\n\n    private List<SourceData> fetchSourceData() {\n        System.out.println(\"[DataMigrationService] Fetching data from source DB \" + sourceDbUrl + \"...\");\n        List<SourceData> records = new ArrayList<>();\n        String sql = \"SELECT id, raw_value FROM source_data WHERE processed = FALSE LIMIT 100\";\n        try (Connection conn = DriverManager.getConnection(sourceDbUrl);\n             PreparedStatement pstmt = conn.prepareStatement(sql);\n             ResultSet rs = pstmt.executeQuery()) {\n\n             records.add(new SourceData(1, \"value1\"));\n             records.add(new SourceData(2, \"value2\"));\n\n        } catch (SQLException e) {\n            System.err.println(\"[DataMigrationService] Database error fetching source data: \" + e.getMessage());\n            return null;\n        }\n        return records;\n    }\n\n    private List<TargetData> transformData(List<SourceData> sourceRecords) {\n        System.out.println(\"[DataMigrationService] Transforming data...\");\n        List<TargetData> targetRecords = new ArrayList<>();\n        for (SourceData record : sourceRecords) {\n            if (record.rawValue != null && record.rawValue.length() > 2) {\n                targetRecords.add(new TargetData(record.id, record.rawValue.toUpperCase()));\n            }\n        }\n        return targetRecords;\n    }\n\n    private int saveTargetData(List<TargetData> targetRecords) {\n        System.out.println(\"[DataMigrationService] Saving data to target DB \" + targetDbUrl + \"...\");\n        String sql = \"INSERT INTO migrated_data (id, value) VALUES (?, ?)\";\n        int importedCount = 0;\n        try (Connection conn = DriverManager.getConnection(targetDbUrl);\n             PreparedStatement pstmt = conn.prepareStatement(sql)) {\n\n            for (TargetData record : targetRecords) {\n                pstmt.setInt(1, record.id);\n                pstmt.setString(2, record.value);\n                pstmt.addBatch();\n            }\n            int[] results = pstmt.executeBatch();\n            for (int count : results) {\n                if (count >= 0) { \n                    importedCount += count; \n                }\n            }\n\n        } catch (SQLException e) {\n            System.err.println(\"[DataMigrationService] Database error saving target data: \" + e.getMessage());\n\n        }\n        return importedCount;\n    }\n\n    private void logMigrationEvent(String eventType, String details, int count, boolean success) {\n        System.out.println(\"[DataMigrationService] LOG: Type=\" + eventType + \", Details=\" + details + \", Count=\" + count + \", Success=\" + success);\n\n\n    }\n\n    static class SourceData {\n        int id;\n        String rawValue;\n        SourceData(int id, String rawValue) { this.id = id; this.rawValue = rawValue; }\n    }\n\n    static class TargetData {\n        int id;\n        String value;\n        TargetData(int id, String value) { this.id = id; this.value = value; }\n    }\n\n    public static void main(String[] args) {\n        String sourceDbUrl = \"jdbc:sqlite:source_migration.db\";\n        String targetDbUrl = \"jdbc:sqlite:target_migration.db\";\n\n         try (Connection conn = DriverManager.getConnection(sourceDbUrl)) {\n            conn.createStatement().execute(\"DROP TABLE IF EXISTS source_data;\");\n            conn.createStatement().execute(\"CREATE TABLE source_data (id INTEGER PRIMARY KEY, raw_value TEXT, processed BOOLEAN);\");\n            conn.createStatement().execute(\"INSERT INTO source_data (id, raw_value, processed) VALUES (1, 'value1', FALSE);\");\n            conn.createStatement().execute(\"INSERT INTO source_data (id, raw_value, processed) VALUES (2, 'value2', FALSE);\");\n            conn.createStatement().execute(\"INSERT INTO source_data (id, raw_value, processed) VALUES (3, 'a', FALSE);\"); \n             conn.createStatement().execute(\"INSERT INTO source_data (id, raw_value, processed) VALUES (4, NULL, FALSE);\"); \n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n\n         new java.io.File(\"target_migration.db\").delete();\n\n        DataMigrationService migrator = new DataMigrationService(sourceDbUrl, targetDbUrl);\n\n        migrator.migrateData();\n\n    }\n}\n",
      "output": "import java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class DataMigrationService {\n\n    private final String sourceDbUrl;\n    private final String targetDbUrl;\n    private final DatabaseManager databaseManager;\n\n    public DataMigrationService(String sourceDbUrl, String targetDbUrl) {\n        this.sourceDbUrl = sourceDbUrl;\n        this.targetDbUrl = targetDbUrl;\n        this.databaseManager = new DatabaseManager(targetDbUrl);\n        databaseManager.initializeTargetDb();\n    }\n\n    public int migrateData() {\n        System.out.println(\"[DataMigrationService] Starting data migration from \" + sourceDbUrl + \" to \" + targetDbUrl);\n\n        List<SourceData> sourceRecords = fetchSourceData();\n        if (sourceRecords == null || sourceRecords.isEmpty()) {\n            System.out.println(\"[DataMigrationService] No data found in source DB.\");\n            logMigrationEvent(\"Migration\", \"No data in source\", 0, false);\n            return 0;\n        }\n        System.out.println(\"[DataMigrationService] Fetched \" + sourceRecords.size() + \" records from source.\");\n\n        List<TargetData> targetRecords = transformData(sourceRecords);\n        if (targetRecords == null || targetRecords.isEmpty()) {\n            System.out.println(\"[DataMigrationService] No data after transformation.\");\n            logMigrationEvent(\"Migration\", \"No data after transformation\", sourceRecords.size(), false);\n            return 0;\n        }\n        System.out.println(\"[DataMigrationService] Transformed \" + targetRecords.size() + \" records.\");\n\n        int importedCount = databaseManager.saveTargetData(targetRecords);\n        System.out.println(\"[DataMigrationService] Saved \" + importedCount + \" records to target.\");\n\n        if (importedCount == targetRecords.size()) {\n            logMigrationEvent(\"Migration\", \"Success\", importedCount, true);\n            System.out.println(\"[DataMigrationService] Data migration complete. \" + importedCount + \" records migrated.\");\n        } else {\n            logMigrationEvent(\"Migration\", \"Partial Success or Failure\", importedCount, false);\n            System.out.println(\"[DataMigrationService] Data migration complete with issues. \" + importedCount + \" records migrated out of \" + targetRecords.size() + \".\");\n        }\n\n        return importedCount;\n    }\n\n    private List<SourceData> fetchSourceData() {\n        System.out.println(\"[DataMigrationService] Fetching data from source DB \" + sourceDbUrl + \"...\");\n        List<SourceData> records = new ArrayList<>();\n        String sql = \"SELECT id, raw_value FROM source_data WHERE processed = FALSE LIMIT 100\";\n        try (Connection conn = DriverManager.getConnection(sourceDbUrl);\n             PreparedStatement pstmt = conn.prepareStatement(sql);\n             ResultSet rs = pstmt.executeQuery()) {\n\n            records.add(new SourceData(1, \"value1\"));\n            records.add(new SourceData(2, \"value2\"));\n\n        } catch (SQLException e) {\n            System.err.println(\"[DataMigrationService] Database error fetching source data: \" + e.getMessage());\n            return null;\n        }\n        return records;\n    }\n\n    private List<TargetData> transformData(List<SourceData> sourceRecords) {\n        System.out.println(\"[DataMigrationService] Transforming data...\");\n        List<TargetData> targetRecords = new ArrayList<>();\n        for (SourceData record : sourceRecords) {\n            if (record.rawValue != null && record.rawValue.length() > 2) {\n                targetRecords.add(new TargetData(record.id, record.rawValue.toUpperCase()));\n            }\n        }\n        return targetRecords;\n    }\n\n    private void logMigrationEvent(String eventType, String details, int count, boolean success) {\n        System.out.println(\"[DataMigrationService] LOG: Type=\" + eventType + \", Details=\" + details + \", Count=\" + count + \", Success=\" + success);\n    }\n\n    static class SourceData {\n        int id;\n        String rawValue;\n        SourceData(int id, String rawValue) { this.id = id; this.rawValue = rawValue; }\n    }\n\n    static class TargetData {\n        int id;\n        String value;\n        TargetData(int id, String value) { this.id = id; this.value = value; }\n    }\n\n    public static void main(String[] args) {\n        String sourceDbUrl = \"jdbc:sqlite:source_migration.db\";\n        String targetDbUrl = \"jdbc:sqlite:target_migration.db\";\n\n        try (Connection conn = DriverManager.getConnection(sourceDbUrl)) {\n            conn.createStatement().execute(\"DROP TABLE IF EXISTS source_data;\");\n            conn.createStatement().execute(\"CREATE TABLE source_data (id INTEGER PRIMARY KEY, raw_value TEXT, processed BOOLEAN);\");\n            conn.createStatement().execute(\"INSERT INTO source_data (id, raw_value, processed) VALUES (1, 'value1', FALSE);\");\n            conn.createStatement().execute(\"INSERT INTO source_data (id, raw_value, processed) VALUES (2, 'value2', FALSE);\");\n            conn.createStatement().execute(\"INSERT INTO source_data (id, raw_value, processed) VALUES (3, 'a', FALSE);\"); \n            conn.createStatement().execute(\"INSERT INTO source_data (id, raw_value, processed) VALUES (4, NULL, FALSE);\"); \n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n\n        new java.io.File(\"target_migration.db\").delete();\n\n        DataMigrationService migrator = new DataMigrationService(sourceDbUrl, targetDbUrl);\n\n        migrator.migrateData();\n    }\n}\n\nclass DatabaseManager {\n    private final String targetDbUrl;\n\n    public DatabaseManager(String targetDbUrl) {\n        this.targetDbUrl = targetDbUrl;\n    }\n\n    public void initializeTargetDb() {\n        System.out.println(\"[DatabaseManager] Initializing target DB \" + targetDbUrl + \"...\");\n        String sql = \"CREATE TABLE IF NOT EXISTS migrated_data (id INTEGER PRIMARY KEY, value TEXT)\";\n        try (Connection conn = DriverManager.getConnection(targetDbUrl);\n             PreparedStatement pstmt = conn.prepareStatement(sql)) {\n            pstmt.executeUpdate();\n        } catch (SQLException e) {\n            System.err.println(\"[DatabaseManager] Error initializing target DB: \" + e.getMessage());\n        }\n    }\n\n    public int saveTargetData(List<TargetData> targetRecords) {\n        System.out.println(\"[DatabaseManager] Saving data to target DB \" + targetDbUrl + \"...\");\n        String sql = \"INSERT INTO migrated_data (id, value) VALUES (?, ?)\";\n        int importedCount = 0;\n        try (Connection conn = DriverManager.getConnection(targetDbUrl);\n             PreparedStatement pstmt = conn.prepareStatement(sql)) {\n\n            for (TargetData record : targetRecords) {\n                pstmt.setInt(1, record.id);\n                pstmt.setString(2, record.value);\n                pstmt.addBatch();\n            }\n            int[] results = pstmt.executeBatch();\n            for (int count : results) {\n                if (count >= 0) { \n                    importedCount += count; \n                }\n            }\n\n        } catch (SQLException e) {\n            System.err.println(\"[DatabaseManager] Database error saving target data: \" + e.getMessage());\n        }\n        return importedCount;\n    }\n}",
      "level": "HARD",
      "language": "java",
      "violation": "Single Responsibility Principle",
      "explanation": "The original `DataMigrationService` class violates the Single Responsibility Principle (SRP) because it handles multiple responsibilities: initializing the target database, fetching source data, transforming data, saving target data, and logging migration events. This makes the class difficult to maintain and test. The refactored code separates the database management functionality into a new class called `DatabaseManager`, which is responsible for initializing the target database and saving target data. This allows `DataMigrationService` to focus solely on the data migration process."
    },
    {
      "input": "import java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.PreparedStatement;\nimport java.sql.SQLException;\nimport javax.mail.*;\nimport javax.mail.internet.*;\nimport java.util.Properties;\n\npublic class SystemEventHandler {\n\n    private final String dbUrl;\n    private final String smtpHost;\n\n    public SystemEventHandler(String dbUrl, String smtpHost) {\n        this.dbUrl = dbUrl;\n        this.smtpHost = smtpHost;\n        initializeDb();\n    }\n\n    private void initializeDb() {\n        System.out.println(\"[SystemEventHandler] Initializing DB \" + dbUrl + \"...\");\n        String sql = \"CREATE TABLE IF NOT EXISTS events (id INTEGER PRIMARY KEY AUTOINCREMENT, event_type TEXT, payload TEXT, processed_at DATETIME DEFAULT CURRENT_TIMESTAMP)\";\n        try (Connection conn = DriverManager.getConnection(dbUrl);\n             PreparedStatement pstmt = conn.prepareStatement(sql)) {\n            pstmt.executeUpdate();\n        } catch (SQLException e) {\n            System.err.println(\"[SystemEventHandler] Error initializing DB: \" + e.getMessage());\n        }\n    }\n\n    public void handleEvent(String eventType, String payload) {\n        System.out.println(\"[SystemEventHandler] Received event: Type=\" + eventType + \", Payload=\" + payload);\n\n        if (eventType.equals(\"USER_CREATED\")) {\n            System.out.println(\"[SystemEventHandler] Handling USER_CREATED event...\");\n            updateUserCountInDb();\n            sendWelcomeEmail(payload);\n            logEvent(\"UserCreatedHandled\", payload);\n        } else if (eventType.equals(\"ORDER_PLACED\")) {\n            System.out.println(\"[SystemEventHandler] Handling ORDER_PLACED event...\");\n            updateSalesMetricsInDb(payload);\n            logEvent(\"OrderPlacedHandled\", payload);\n        } else {\n            System.out.println(\"[SystemEventHandler] Unknown event type: \" + eventType);\n            logEvent(\"UnknownEvent\", payload);\n        }\n\n        saveEventToDb(eventType, payload);\n        System.out.println(\"[SystemEventHandler] Event saved to DB.\");\n    }\n\n    private void updateUserCountInDb() {\n        System.out.println(\"[SystemEventHandler] Updating user count in DB \" + dbUrl + \"...\");\n\n        String sql = \"UPDATE metrics SET user_count = user_count + 1\";\n        try (Connection conn = DriverManager.getConnection(dbUrl);\n             PreparedStatement pstmt = conn.prepareStatement(sql)) {\n            pstmt.executeUpdate();\n        } catch (SQLException e) {\n            System.err.println(\"[SystemEventHandler] Database error updating user count: \" + e.getMessage());\n        }\n    }\n\n    private void updateSalesMetricsInDb(String payload) {\n        System.out.println(\"[SystemEventHandler] Updating sales metrics in DB \" + dbUrl + \" with payload: \" + payload + \"...\");\n\n        String sql = \"UPDATE metrics SET total_sales = total_sales + ?\";\n        try (Connection conn = DriverManager.getConnection(dbUrl);\n             PreparedStatement pstmt = conn.prepareStatement(sql)) {\n            double amount = Double.parseDouble(payload); \n            pstmt.setDouble(1, amount);\n            pstmt.executeUpdate();\n        } catch (SQLException | NumberFormatException e) {\n            System.err.println(\"[SystemEventHandler] Database/Parsing error updating sales metrics: \" + e.getMessage());\n        }\n    }\n\n    private void sendWelcomeEmail(String recipientEmail) {\n        System.out.println(\"[SystemEventHandler] Sending welcome email to \" + recipientEmail + \" (SMTP: \" + smtpHost + \")...\");\n\n        Properties props = new Properties();\n        props.put(\"mail.smtp.auth\", \"true\");\n        props.put(\"mail.smtp.starttls.enable\", \"true\");\n        props.put(\"mail.smtp.host\", smtpHost);\n        props.put(\"mail.smtp.port\", \"587\");\n\n        Session session = Session.getInstance(props, new Authenticator() {\n            protected PasswordAuthentication getPasswordAuthentication() {\n                return new PasswordAuthentication(\"welcome@example.com\", \"password\"); \n            }\n        });\n\n        try {\n            Message message = new MimeMessage(session);\n            message.setFrom(new InternetAddress(\"welcome@example.com\"));\n            message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(recipientEmail));\n            message.setSubject(\"Welcome!\");\n            message.setText(\"Welcome to our service!\");\n\n            Transport.send(message);\n        } catch (MessagingException e) {\n            System.err.println(\"[SystemEventHandler] Error sending welcome email: \" + e.getMessage());\n        }\n    }\n\n    private void logEvent(String eventType, String payload) {\n        System.out.println(\"[SystemEventHandler] LOG: Type=\" + eventType + \", Payload=\" + payload);\n\n\n    }\n\n     private void saveEventToDb(String eventType, String payload) {\n        System.out.println(\"[SystemEventHandler] Saving event \" + eventType + \" to DB \" + dbUrl + \"...\");\n        String sql = \"INSERT INTO events (event_type, payload) VALUES (?, ?)\";\n         try (Connection conn = DriverManager.getConnection(dbUrl);\n              PreparedStatement pstmt = conn.prepareStatement(sql)) {\n             pstmt.setString(1, eventType);\n             pstmt.setString(2, payload);\n             pstmt.executeUpdate();\n         } catch (SQLException e) {\n             System.err.println(\"[SystemEventHandler] Database error saving event: \" + e.getMessage());\n         }\n    }\n\n    public static void main(String[] args) {\n        String testDbUrl = \"jdbc:sqlite:test_events.db\";\n        String testSmtpHost = \"localhost\";\n\n        new java.io.File(\"test_events.db\").delete();\n\n        try (Connection conn = DriverManager.getConnection(testDbUrl)) {\n             conn.createStatement().execute(\"CREATE TABLE IF NOT EXISTS metrics (user_count INTEGER DEFAULT 0, total_sales REAL DEFAULT 0.0);\");\n             conn.createStatement().execute(\"INSERT INTO metrics DEFAULT VALUES;\");\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n\n        SystemEventHandler handler = new SystemEventHandler(testDbUrl, testSmtpHost);\n\n        handler.handleEvent(\"USER_CREATED\", \"newuser@example.com\");\n        handler.handleEvent(\"ORDER_PLACED\", \"150.75\");\n        handler.handleEvent(\"USER_CREATED\", \"another@example.com\");\n        handler.handleEvent(\"UNKNOWN_EVENT\", \"some payload\");\n\n    }\n}\n",
      "output": "import java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.PreparedStatement;\nimport java.sql.SQLException;\nimport javax.mail.;\nimport javax.mail.internet.;\nimport java.util.Properties;\n\npublic class SystemEventHandler {\n\n    private final String dbUrl;\n    private final String smtpHost;\n    private final DatabaseManager databaseManager;\n    private final EmailService emailService;\n\n    public SystemEventHandler(String dbUrl, String smtpHost) {\n        this.dbUrl = dbUrl;\n        this.smtpHost = smtpHost;\n        this.databaseManager = new DatabaseManager(dbUrl);\n        this.emailService = new EmailService(smtpHost);\n        databaseManager.initializeDb();\n    }\n\n    public void handleEvent(String eventType, String payload) {\n        System.out.println(\"[SystemEventHandler] Received event: Type=\" + eventType + \", Payload=\" + payload);\n\n        if (eventType.equals(\"USER_CREATED\")) {\n            System.out.println(\"[SystemEventHandler] Handling USER_CREATED event...\");\n            databaseManager.updateUserCount();\n            emailService.sendWelcomeEmail(payload);\n            logEvent(\"UserCreatedHandled\", payload);\n        } else if (eventType.equals(\"ORDER_PLACED\")) {\n            System.out.println(\"[SystemEventHandler] Handling ORDER_PLACED event...\");\n            databaseManager.updateSalesMetrics(payload);\n            logEvent(\"OrderPlacedHandled\", payload);\n        } else {\n            System.out.println(\"[SystemEventHandler] Unknown event type: \" + eventType);\n            logEvent(\"UnknownEvent\", payload);\n        }\n\n        databaseManager.saveEvent(eventType, payload);\n        System.out.println(\"[SystemEventHandler] Event saved to DB.\");\n    }\n\n    private void logEvent(String eventType, String payload) {\n        System.out.println(\"[SystemEventHandler] LOG: Type=\" + eventType + \", Payload=\" + payload);\n    }\n\n    public static void main(String[] args) {\n        String testDbUrl = \"jdbc:sqlite:test_events.db\";\n        String testSmtpHost = \"localhost\";\n\n        new java.io.File(\"test_events.db\").delete();\n\n        try (Connection conn = DriverManager.getConnection(testDbUrl)) {\n            conn.createStatement().execute(\"CREATE TABLE IF NOT EXISTS metrics (user_count INTEGER DEFAULT 0, total_sales REAL DEFAULT 0.0);\");\n            conn.createStatement().execute(\"INSERT INTO metrics DEFAULT VALUES;\");\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n\n        SystemEventHandler handler = new SystemEventHandler(testDbUrl, testSmtpHost);\n\n        handler.handleEvent(\"USER_CREATED\", \"newuser@example.com\");\n        handler.handleEvent(\"ORDER_PLACED\", \"150.75\");\n        handler.handleEvent(\"USER_CREATED\", \"another@example.com\");\n        handler.handleEvent(\"UNKNOWN_EVENT\", \"some payload\");\n    }\n}\n\nclass DatabaseManager {\n    private final String dbUrl;\n\n    public DatabaseManager(String dbUrl) {\n        this.dbUrl = dbUrl;\n    }\n\n    public void initializeDb() {\n        System.out.println(\"[DatabaseManager] Initializing DB \" + dbUrl + \"...\");\n        String sql = \"CREATE TABLE IF NOT EXISTS events (id INTEGER PRIMARY KEY AUTOINCREMENT, event_type TEXT, payload TEXT, processed_at DATETIME DEFAULT CURRENT_TIMESTAMP)\";\n        try (Connection conn = DriverManager.getConnection(dbUrl);\n             PreparedStatement pstmt = conn.prepareStatement(sql)) {\n            pstmt.executeUpdate();\n        } catch (SQLException e) {\n            System.err.println(\"[DatabaseManager] Error initializing DB: \" + e.getMessage());\n        }\n    }\n\n    public void updateUserCount() {\n        System.out.println(\"[DatabaseManager] Updating user count in DB \" + dbUrl + \"...\");\n        String sql = \"UPDATE metrics SET user_count = user_count + 1\";\n        try (Connection conn = DriverManager.getConnection(dbUrl);\n             PreparedStatement pstmt = conn.prepareStatement(sql)) {\n            pstmt.executeUpdate();\n        } catch (SQLException e) {\n            System.err.println(\"[DatabaseManager] Database error updating user count: \" + e.getMessage());\n        }\n    }\n\n    public void updateSalesMetrics(String payload) {\n        System.out.println(\"[DatabaseManager] Updating sales metrics in DB \" + dbUrl + \" with payload: \" + payload + \"...\");\n        String sql = \"UPDATE metrics SET total_sales = total_sales + ?\";\n        try (Connection conn = DriverManager.getConnection(dbUrl);\n             PreparedStatement pstmt = conn.prepareStatement(sql)) {\n            double amount = Double.parseDouble(payload);\n            pstmt.setDouble(1, amount);\n            pstmt.executeUpdate();\n        } catch (SQLException | NumberFormatException e) {\n            System.err.println(\"[DatabaseManager] Database/Parsing error updating sales metrics: \" + e.getMessage());\n        }\n    }\n\n    public void saveEvent(String eventType, String payload) {\n        System.out.println(\"[DatabaseManager] Saving event \" + eventType + \" to DB \" + dbUrl + \"...\");\n        String sql = \"INSERT INTO events (event_type, payload) VALUES (?, ?)\";\n        try (Connection conn = DriverManager.getConnection(dbUrl);\n             PreparedStatement pstmt = conn.prepareStatement(sql)) {\n            pstmt.setString(1, eventType);\n            pstmt.setString(2, payload);\n            pstmt.executeUpdate();\n        } catch (SQLException e) {\n            System.err.println(\"[DatabaseManager] Database error saving event: \" + e.getMessage());\n        }\n    }\n}\n\nclass EmailService {\n    private final String smtpHost;\n\n    public EmailService(String smtpHost) {\n        this.smtpHost = smtpHost;\n    }\n\n    public void sendWelcomeEmail(String recipientEmail) {\n        System.out.println(\"[EmailService] Sending welcome email to \" + recipientEmail + \" (SMTP: \" + smtpHost + \")...\");\n\n        Properties props = new Properties();\n        props.put(\"mail.smtp.auth\", \"true\");\n        props.put(\"mail.smtp.starttls.enable\", \"true\");\n        props.put(\"mail.smtp.host\", smtpHost);\n        props.put(\"mail.smtp.port\", \"587\");\n\n        Session session = Session.getInstance(props, new Authenticator() {\n            protected PasswordAuthentication getPasswordAuthentication() {\n                return new PasswordAuthentication(\"welcome@example.com\", \"password\");\n            }\n        });\n\n        try {\n            Message message = new MimeMessage(session);\n            message.setFrom(new InternetAddress(\"welcome@example.com\"));\n            message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(recipientEmail));\n            message.setSubject(\"Welcome!\");\n            message.setText(\"Welcome to our service!\");\n\n            Transport.send(message);\n        } catch (MessagingException e) {\n            System.err.println(\"[EmailService] Error sending welcome email: \" + e.getMessage());\n        }\n    }\n}",
      "level": "HARD",
      "language": "java",
      "violation": "Single Responsibility Principle",
      "explanation": "The original code violates the Single Responsibility Principle (SRP) because the `SystemEventHandler` class is responsible for handling system events, managing database operations, and sending emails. This makes the class difficult to maintain and test. The refactored code separates the responsibilities into two new classes: `DatabaseManager` for handling database operations and `EmailService` for sending emails. This way, each class has a single responsibility, making the code cleaner and more maintainable."
    },
    {
      "input": "class User:\n    def __init__(self, name, email):\n        self.name = name\n        self.email = email\n    def save_to_db(self):\n        print(f\"Saving {self.name} to database\")",
      "output": "class User:\n    def __init__(self, name, email):\n        self.name = name\n        self.email = email\n\nclass UserRepository:\n    @staticmethod\n    def save(user):\n        print(f\"Saving {user.name} to database\")",
      "level": "EASY",
      "language": "PYTHON",
      "violation": "Single Responsibility Principle",
      "explanation": "The original User class has two responsibilities: managing user data and saving that data to a database. This violates the Single Responsibility Principle. The refactored code separates these responsibilities by introducing a UserRepository class that handles the database operations."
    },
    {
      "input": "class Report:\n    def __init__(self, data):\n        self.data = data\n    def calculate_statistics(self):\n        return sum(self.data)/len(self.data)\n    def print_report(self):\n        print(f\"Report: {self.data}\")",
      "output": "class Report:\n    def __init__(self, data):\n        self.data = data\n\nclass ReportStatistics:\n    def __init__(self, report):\n        self.report = report\n\n    def calculate_statistics(self):\n        return sum(self.report.data) / len(self.report.data)\n\nclass ReportPrinter:\n    def __init__(self, report):\n        self.report = report\n\n    def print_report(self):\n        print(f\"Report: {self.report.data}\")",
      "level": "EASY",
      "language": "PYTHON",
      "violation": "Single Responsibility Principle",
      "explanation": "The original Report class violates the Single Responsibility Principle because it handles both data processing (calculating statistics) and presentation (printing the report). By refactoring it into separate classes (ReportStatistics and ReportPrinter), each class now has a single responsibility."
    },
    {
      "input": "class Order:\n    def __init__(self, items):\n        self.items = items\n    def calculate_total(self):\n        return sum(self.items)\n    def send_confirmation_email(self):\n        print(\"Email sent\")",
      "output": "class Order:\n    def __init__(self, items):\n        self.items = items\n    def calculate_total(self):\n        return sum(self.items)\n\nclass EmailService:\n    @staticmethod\n    def send_confirmation_email():\n        print(\"Email sent\")",
      "level": "EASY",
      "language": "PYTHON",
      "violation": "Single Responsibility Principle",
      "explanation": "The original Order class has two responsibilities: calculating the total of the order and sending a confirmation email. This violates the Single Responsibility Principle. The refactored code separates these responsibilities into two classes: Order for handling order-related logic and EmailService for handling email-related functionality."
    },
    {
      "input": "class Book:\n    def __init__(self, title, author):\n        self.title = title\n        self.author = author\n    def display(self):\n        print(f\"{self.title} by {self.author}\")\n    def to_json(self):\n        return {'title': self.title, 'author': self.author}",
      "output": "class Book:\n    def __init__(self, title, author):\n        self.title = title\n        self.author = author\n    def display(self):\n        print(f\"{self.title} by {self.author}\")\n\nclass BookSerializer:\n    @staticmethod\n    def to_json(book):\n        return {'title': book.title, 'author': book.author}",
      "level": "EASY",
      "language": "PYTHON",
      "violation": "Single Responsibility Principle",
      "explanation": "The original Book class has multiple responsibilities: it manages book data and also handles serialization to JSON. This violates the Single Responsibility Principle. The refactored code separates the concerns by introducing a BookSerializer class that is responsible for converting Book objects to JSON."
    },
    {
      "input": "class Invoice:\n    def __init__(self, amount):\n        self.amount = amount\n    def calculate_tax(self):\n        return self.amount * 0.2\n    def save_to_file(self):\n        with open('invoice.txt', 'w') as f:\n            f.write(str(self.amount))",
      "output": "class Invoice:\n    def __init__(self, amount):\n        self.amount = amount\n    def calculate_tax(self):\n        return self.amount  0.2\n\nclass InvoiceSaver:\n    @staticmethod\n    def save_to_file(invoice, filename='invoice.txt'):\n        with open(filename, 'w') as f:\n            f.write(str(invoice.amount))",
      "level": "MODERATE",
      "language": "PYTHON",
      "violation": "Single Responsibility Principle",
      "explanation": "The original Invoice class has two responsibilities: calculating tax and saving the invoice to a file. This violates the Single Responsibility Principle. The refactored code separates these responsibilities into two classes: Invoice for handling invoice data and InvoiceSaver for handling the saving functionality."
    },
    {
      "input": "class Product:\n    def __init__(self, name, price):\n        self.name = name\n        self.price = price\n    def apply_discount(self, percent):\n        self.price -= self.price * percent\n    def log_price_change(self):\n        print(f\"Price changed to {self.price}\")",
      "output": "class Product:\n    def __init__(self, name, price):\n        self.name = name\n        self.price = price\n    def apply_discount(self, percent):\n        self.price -= self.price  percent\n\nclass PriceLogger:\n    @staticmethod\n    def log_price_change(product):\n        print(f\"Price changed to {product.price}\")",
      "level": "MODERATE",
      "language": "PYTHON",
      "violation": "Single Responsibility Principle",
      "explanation": "The original Product class has two responsibilities: managing product data and logging price changes. This violates the Single Responsibility Principle. The refactored code separates the logging functionality into a new class, PriceLogger, which only handles logging, thus adhering to the principle."
    },
    {
      "input": "class Customer:\n    def __init__(self, name):\n        self.name = name\n    def get_discount(self):\n        return 0.1\n    def send_greeting(self):\n        print(f\"Hello, {self.name}\")",
      "output": "class Customer:\n    def __init__(self, name):\n        self.name = name\n    def get_discount(self):\n        return 0.1\n\nclass GreetingService:\n    @staticmethod\n    def send_greeting(customer):\n        print(f\"Hello, {customer.name}\")",
      "level": "MODERATE",
      "language": "PYTHON",
      "violation": "Single Responsibility Principle",
      "explanation": "The original Customer class has two responsibilities: managing customer data and sending greetings. This violates the Single Responsibility Principle. The refactored code separates the greeting functionality into a new class, GreetingService, which adheres to the principle by ensuring that each class has only one reason to change."
    },
    {
      "input": "class FileManager:\n    def __init__(self, filename):\n        self.filename = filename\n    def read(self):\n        with open(self.filename) as f:\n            return f.read()\n    def encrypt(self, data):\n        return data[::-1]",
      "output": "class FileManager:\n    def __init__(self, filename):\n        self.filename = filename\n    def read(self):\n        with open(self.filename) as f:\n            return f.read()\n\nclass Encryptor:\n    @staticmethod\n    def encrypt(data):\n        return data[::-1]",
      "level": "MODERATE",
      "language": "PYTHON",
      "violation": "Single Responsibility Principle",
      "explanation": "The original FileManager class has two responsibilities: managing file operations and encrypting data. This violates the Single Responsibility Principle. The refactored code separates these concerns into two classes: FileManager for file operations and Encryptor for encryption."
    },
    {
      "input": "import sqlite3\nimport hashlib\nimport json\nfrom datetime import datetime\n\nclass AccountManager:\n    def __init__(self, db_path, audit_log_path):\n        self.db_path = db_path\n        self.audit_log_path = audit_log_path\n        self._create_db_if_not_exists()\n\n    def _create_db_if_not_exists(self):\n        conn = None\n        try:\n            conn = sqlite3.connect(self.db_path)\n            cursor = conn.cursor()\n            cursor.execute(\"\"\"CREATE TABLE IF NOT EXISTS users (\n                id INTEGER PRIMARY KEY AUTOINCREMENT,\n                username TEXT UNIQUE NOT NULL,\n                password_hash TEXT NOT NULL,\n                role TEXT NOT NULL DEFAULT 'user',\n                permissions TEXT\n            )\"\"\")\n            conn.commit()\n        except sqlite3.Error as e:\n            print(f\"[AccountManager] Database error during creation: {e}\")\n        finally:\n            if conn:\n                conn.close()\n\n    def create_user_account(self, username, password, role='user', permissions=None):\n        print(f\"[AccountManager] Attempting to create account for {username}\")\n\n        if self._user_exists(username):\n            print(f\"[AccountManager] User {username} already exists.\")\n            self._log_audit('CreateAccount', username, 'User Exists', False)\n            return False\n        print(\"[AccountManager] User does not exist.\")\n\n        password_hash = self._hash_password(password)\n        print(\"[AccountManager] Password hashed.\")\n\n        if not self._save_user_to_database(username, password_hash, role, permissions):\n            print(f\"[AccountManager] Failed to save user {username} to database.\")\n            self._log_audit('CreateAccount', username, 'DB Save Failed', False)\n            return False\n        print(f\"[AccountManager] User {username} saved to database.\")\n\n        self._log_audit('CreateAccount', username, 'Success', True)\n        print(f\"[AccountManager] Account created for {username} with role {role}.\")\n        return True\n\n    def assign_role_to_user(self, username, new_role):\n        print(f\"[AccountManager] Attempting to assign role {new_role} to {username}\")\n\n        if not self._user_exists(username):\n            print(f\"[AccountManager] User {username} not found for role assignment.\")\n            self._log_audit('AssignRole', username, 'User Not Found', False)\n            return False\n        print(\"[AccountManager] User found.\")\n\n        if not self._update_user_role_in_database(username, new_role):\n            print(f\"[AccountManager] Failed to update role for {username} in database.\")\n            self._log_audit('AssignRole', username, 'DB Update Failed', False)\n            return False\n        print(f\"[AccountManager] Role updated for {username} to {new_role}.\")\n\n        self._log_audit('AssignRole', username, f'Role changed to {new_role}', True)\n        print(f\"[AccountManager] Role {new_role} assigned to {username}.\")\n        return True\n\n    def _user_exists(self, username):\n        print(f\"[_user_exists] Checking existence of {username} in DB {self.db_path}...\")\n        conn = None\n        try:\n            conn = sqlite3.connect(self.db_path)\n            cursor = conn.cursor()\n            cursor.execute(\"SELECT 1 FROM users WHERE username = ?\", (username,))\n            return cursor.fetchone() is not None\n        except sqlite3.Error as e:\n            print(f\"[_user_exists] Database error: {e}\")\n            return False\n        finally:\n            if conn:\n                conn.close()\n\n    def _hash_password(self, password):\n         print(\"[_hash_password] Hashing password...\")\n         return hashlib.sha256(password.encode()).hexdigest()\n\n    def _save_user_to_database(self, username, password_hash, role, permissions):\n        print(f\"[_save_user_to_database] Saving user {username} to DB {self.db_path}...\")\n        conn = None\n        try:\n            conn = sqlite3.connect(self.db_path)\n            cursor = conn.cursor()\n            permissions_json = json.dumps(permissions) if permissions is not None else None\n            cursor.execute(\"INSERT INTO users (username, password_hash, role, permissions) VALUES (?, ?, ?, ?)\",\n                           (username, password_hash, role, permissions_json))\n            conn.commit()\n            return True\n        except sqlite3.IntegrityError:\n            print(f\"[_save_user_to_database] User {username} already exists (Integrity Error).\")\n            return False\n        except sqlite3.Error as e:\n            print(f\"[_save_user_to_database] Database error: {e}\")\n            return False\n        finally:\n            if conn:\n                conn.close()\n\n    def _update_user_role_in_database(self, username, role):\n        print(f\"[_update_user_role_in_database] Updating role for {username} in DB {self.db_path}...\")\n        conn = None\n        try:\n            conn = sqlite3.connect(self.db_path)\n            cursor = conn.cursor()\n            cursor.execute(\"UPDATE users SET role = ? WHERE username = ?\", (role, username))\n            conn.commit()\n            return cursor.rowcount > 0\n        except sqlite3.Error as e:\n            print(f\"[_update_user_role_in_database] Database error: {e}\")\n            return False\n        finally:\n            if conn:\n                conn.close()\n\n    def _log_audit(self, action, user, details, success):\n        print(f\"[_log_audit] AUDIT: Action='{action}', User='{user}', Details='{details}', Success={success}\")\n        try:\n            timestamp = datetime.now().isoformat()\n            log_entry = f\"{timestamp}|{action}|{user}|{details}|{success}\\n\"\n            with open(self.audit_log_path, 'a') as f:\n                f.write(log_entry)\n        except IOError as e:\n            print(f\"[_log_audit] Error writing to audit log: {e}\")\n",
      "output": "import sqlite3\nimport hashlib\nimport json\nfrom datetime import datetime\n\nclass DatabaseManager:\n    def __init__(self, db_path):\n        self.db_path = db_path\n        self._create_db_if_not_exists()\n\n    def _create_db_if_not_exists(self):\n        conn = None\n        try:\n            conn = sqlite3.connect(self.db_path)\n            cursor = conn.cursor()\n            cursor.execute(\"\"\"CREATE TABLE IF NOT EXISTS users (\n                id INTEGER PRIMARY KEY AUTOINCREMENT,\n                username TEXT UNIQUE NOT NULL,\n                password_hash TEXT NOT NULL,\n                role TEXT NOT NULL DEFAULT 'user',\n                permissions TEXT\n            )\"\"\")\n            conn.commit()\n        except sqlite3.Error as e:\n            print(f\"[DatabaseManager] Database error during creation: {e}\")\n        finally:\n            if conn:\n                conn.close()\n\n    def user_exists(self, username):\n        conn = None\n        try:\n            conn = sqlite3.connect(self.db_path)\n            cursor = conn.cursor()\n            cursor.execute(\"SELECT 1 FROM users WHERE username = ?\", (username,))\n            return cursor.fetchone() is not None\n        except sqlite3.Error as e:\n            print(f\"[DatabaseManager] Database error: {e}\")\n            return False\n        finally:\n            if conn:\n                conn.close()\n\n    def save_user(self, username, password_hash, role, permissions):\n        conn = None\n        try:\n            conn = sqlite3.connect(self.db_path)\n            cursor = conn.cursor()\n            permissions_json = json.dumps(permissions) if permissions is not None else None\n            cursor.execute(\"INSERT INTO users (username, password_hash, role, permissions) VALUES (?, ?, ?, ?)\",\n                           (username, password_hash, role, permissions_json))\n            conn.commit()\n            return True\n        except sqlite3.IntegrityError:\n            print(f\"[DatabaseManager] User {username} already exists (Integrity Error).\")\n            return False\n        except sqlite3.Error as e:\n            print(f\"[DatabaseManager] Database error: {e}\")\n            return False\n        finally:\n            if conn:\n                conn.close()\n\n    def update_user_role(self, username, role):\n        conn = None\n        try:\n            conn = sqlite3.connect(self.db_path)\n            cursor = conn.cursor()\n            cursor.execute(\"UPDATE users SET role = ? WHERE username = ?\", (role, username))\n            conn.commit()\n            return cursor.rowcount > 0\n        except sqlite3.Error as e:\n            print(f\"[DatabaseManager] Database error: {e}\")\n            return False\n        finally:\n            if conn:\n                conn.close()\n\nclass AccountManager:\n    def __init__(self, db_manager, audit_log_path):\n        self.db_manager = db_manager\n        self.audit_log_path = audit_log_path\n\n    def create_user_account(self, username, password, role='user', permissions=None):\n        print(f\"[AccountManager] Attempting to create account for {username}\")\n\n        if self.db_manager.user_exists(username):\n            print(f\"[AccountManager] User {username} already exists.\")\n            self._log_audit('CreateAccount', username, 'User Exists', False)\n            return False\n        print(\"[AccountManager] User does not exist.\")\n\n        password_hash = self._hash_password(password)\n        print(\"[AccountManager] Password hashed.\")\n\n        if not self.db_manager.save_user(username, password_hash, role, permissions):\n            print(f\"[AccountManager] Failed to save user {username} to database.\")\n            self._log_audit('CreateAccount', username, 'DB Save Failed', False)\n            return False\n        print(f\"[AccountManager] User {username} saved to database.\")\n\n        self._log_audit('CreateAccount', username, 'Success', True)\n        print(f\"[AccountManager] Account created for {username} with role {role}.\")\n        return True\n\n    def assign_role_to_user(self, username, new_role):\n        print(f\"[AccountManager] Attempting to assign role {new_role} to {username}\")\n\n        if not self.db_manager.user_exists(username):\n            print(f\"[AccountManager] User {username} not found for role assignment.\")\n            self._log_audit('AssignRole', username, 'User Not Found', False)\n            return False\n        print(\"[AccountManager] User found.\")\n\n        if not self.db_manager.update_user_role(username, new_role):\n            print(f\"[AccountManager] Failed to update role for {username} in database.\")\n            self._log_audit('AssignRole', username, 'DB Update Failed', False)\n            return False\n        print(f\"[AccountManager] Role updated for {username} to {new_role}.\")\n\n        self._log_audit('AssignRole', username, f'Role changed to {new_role}', True)\n        print(f\"[AccountManager] Role {new_role} assigned to {username}.\")\n        return True\n\n    def _hash_password(self, password):\n         print(\"[_hash_password] Hashing password...\")\n         return hashlib.sha256(password.encode()).hexdigest()\n\n    def _log_audit(self, action, user, details, success):\n        print(f\"[_log_audit] AUDIT: Action='{action}', User='{user}', Details='{details}', Success={success}\")\n        try:\n            timestamp = datetime.now().isoformat()\n            log_entry = f\"{timestamp}|{action}|{user}|{details}|{success}\\n\"\n            with open(self.audit_log_path, 'a') as f:\n                f.write(log_entry)\n        except IOError as e:\n            print(f\"[_log_audit] Error writing to audit log: {e}\")\n\n# Example usage:\n# import os\n# db_file = 'user_accounts.db'\n# log_file = 'audit.log'\n# db_manager = DatabaseManager(db_file)\n# manager = AccountManager(db_manager, log_file)\n# manager.create_user_account('testuser', 'password123', 'admin', {'can_delete': True})\n# manager.create_user_account('testuser', 'password123') # Should fail\n# manager.assign_role_to_user('testuser', 'editor')\n# manager.assign_role_to_user('nonexistent', 'guest') # Should fail",
      "level": "HARD",
      "language": "PYTHON",
      "violation": "Single Responsibility Principle",
      "explanation": "The original code violates the Single Responsibility Principle (SRP) because the `AccountManager` class is responsible for both managing user accounts and handling database operations. This makes the class harder to maintain and test. By refactoring the code, I created a separate `DatabaseManager` class that handles all database-related operations, while the `AccountManager` class focuses solely on account management. This separation of concerns improves the code's structure and adheres to the SRP."
    },
    {
      "input": "import csv\nimport json\nfrom datetime import datetime\nimport os\n\nclass ReportGenerator:\n    def __init__(self, input_filepath, output_filepath_template, upload_service_url):\n        self.input_filepath = input_filepath\n        self.output_filepath_template = output_filepath_template\n        self.upload_service_url = upload_service_url\n\n    def generate_and_export_report(self, report_type):\n        print(f\"[ReportGenerator] Starting report generation for type: {report_type}\")\n\n        raw_data = self._read_data(self.input_filepath)\n        if not raw_data:\n            print(\"[ReportGenerator] No raw data read.\")\n            return False\n        print(f\"[ReportGenerator] Read {len(raw_data)} rows of raw data.\")\n\n        processed_data = self._process_data(raw_data, report_type)\n        if not processed_data:\n             print(\"[ReportGenerator] No data after processing.\")\n             return False\n        print(f\"[ReportGenerator] Processed data has {len(processed_data)} items.\")\n\n        output_filepath = self.output_filepath_template.format(timestamp=datetime.now().strftime('%Y%m%d%H%M%S'), report_type=report_type.lower())\n        if not self._export_data(processed_data, output_filepath, report_type):\n            print(f\"[ReportGenerator] Failed to export report to {output_filepath}.\")\n            return False\n        print(f\"[ReportGenerator] Report exported to {output_filepath}.\")\n\n        if not self._upload_report(output_filepath):\n            print(f\"[ReportGenerator] Failed to upload report from {output_filepath}.\")\n\n            return False\n        print(f\"[ReportGenerator] Report {output_filepath} uploaded successfully.\")\n\n        print(f\"[ReportGenerator] Report generation and export complete for type: {report_type}.\")\n        return True\n\n    def _read_data(self, filepath):\n        print(f\"[_read_data] Reading data from {filepath}...\")\n        try:\n\n            return [{\"id\": 1, \"value\": 100, \"category\": \"A\"}, {\"id\": 2, \"value\": 200, \"category\": \"B\"}, {\"id\": 3, \"value\": 150, \"category\": \"A\"}]\n        except IOError as e:\n            print(f\"[_read_data] Error reading file: {e}\")\n            return None\n\n    def _process_data(self, raw_data, report_type):\n        print(f\"[_process_data] Processing data for report type: {report_type}...\")\n        if report_type == 'SUMMARY':\n            total_value = sum(item['value'] for item in raw_data)\n            return [{\"summary_type\": \"Total Value\", \"value\": total_value}]\n        elif report_type == 'CATEGORY_SUMMARY':\n            category_totals = {}\n            for item in raw_data:\n                category = item.get('category', 'Unknown')\n                category_totals[category] = category_totals.get(category, 0) + item['value']\n            return [{\"category\": cat, \"total_value\": total} for cat, total in category_totals.items()]\n        else:\n            print(f\"[_process_data] Unknown report type: {report_type}\")\n            return None\n\n    def _export_data(self, processed_data, filepath, report_type):\n        print(f\"[_export_data] Exporting data to {filepath} for type: {report_type}...\")\n        try:\n            with open(filepath, 'w', newline='') as csvfile:\n                if not processed_data:\n                    return True\n                writer = csv.DictWriter(csvfile, fieldnames=processed_data[0].keys())\n                writer.writeheader()\n                writer.writerows(processed_data)\n            return True\n        except IOError as e:\n            print(f\"[_export_data] Error writing to file: {e}\")\n            return False\n\n    def _upload_report(self, filepath):\n        print(f\"[_upload_report] Uploading report from {filepath} to {self.upload_service_url}...\")\n\n        return True\n",
      "output": "import csv\nimport json\nfrom datetime import datetime\nimport os\n\nclass DataReader:\n    def read_data(self, filepath):\n        print(f\"[DataReader] Reading data from {filepath}...\")\n        try:\n            return [{\"id\": 1, \"value\": 100, \"category\": \"A\"}, {\"id\": 2, \"value\": 200, \"category\": \"B\"}, {\"id\": 3, \"value\": 150, \"category\": \"A\"}]\n        except IOError as e:\n            print(f\"[DataReader] Error reading file: {e}\")\n            return None\n\nclass DataProcessor:\n    def process_data(self, raw_data, report_type):\n        print(f\"[DataProcessor] Processing data for report type: {report_type}...\")\n        if report_type == 'SUMMARY':\n            total_value = sum(item['value'] for item in raw_data)\n            return [{\"summary_type\": \"Total Value\", \"value\": total_value}]\n        elif report_type == 'CATEGORY_SUMMARY':\n            category_totals = {}\n            for item in raw_data:\n                category = item.get('category', 'Unknown')\n                category_totals[category] = category_totals.get(category, 0) + item['value']\n            return [{\"category\": cat, \"total_value\": total} for cat, total in category_totals.items()]\n        else:\n            print(f\"[DataProcessor] Unknown report type: {report_type}\")\n            return None\n\nclass DataExporter:\n    def export_data(self, processed_data, filepath):\n        print(f\"[DataExporter] Exporting data to {filepath}...\")\n        try:\n            with open(filepath, 'w', newline='') as csvfile:\n                if not processed_data:\n                    return True\n                writer = csv.DictWriter(csvfile, fieldnames=processed_data[0].keys())\n                writer.writeheader()\n                writer.writerows(processed_data)\n            return True\n        except IOError as e:\n            print(f\"[DataExporter] Error writing to file: {e}\")\n            return False\n\nclass ReportUploader:\n    def upload_report(self, filepath, upload_service_url):\n        print(f\"[ReportUploader] Uploading report from {filepath} to {upload_service_url}...\")\n        return True\n\nclass ReportGenerator:\n    def __init__(self, input_filepath, output_filepath_template, upload_service_url):\n        self.input_filepath = input_filepath\n        self.output_filepath_template = output_filepath_template\n        self.upload_service_url = upload_service_url\n        self.data_reader = DataReader()\n        self.data_processor = DataProcessor()\n        self.data_exporter = DataExporter()\n        self.report_uploader = ReportUploader()\n\n    def generate_and_export_report(self, report_type):\n        print(f\"[ReportGenerator] Starting report generation for type: {report_type}\")\n\n        raw_data = self.data_reader.read_data(self.input_filepath)\n        if not raw_data:\n            print(\"[ReportGenerator] No raw data read.\")\n            return False\n        print(f\"[ReportGenerator] Read {len(raw_data)} rows of raw data.\")\n\n        processed_data = self.data_processor.process_data(raw_data, report_type)\n        if not processed_data:\n            print(\"[ReportGenerator] No data after processing.\")\n            return False\n        print(f\"[ReportGenerator] Processed data has {len(processed_data)} items.\")\n\n        output_filepath = self.output_filepath_template.format(timestamp=datetime.now().strftime('%Y%m%d%H%M%S'), report_type=report_type.lower())\n        if not self.data_exporter.export_data(processed_data, output_filepath):\n            print(f\"[ReportGenerator] Failed to export report to {output_filepath}.\")\n            return False\n        print(f\"[ReportGenerator] Report exported to {output_filepath}.\")\n\n        if not self.report_uploader.upload_report(output_filepath, self.upload_service_url):\n            print(f\"[ReportGenerator] Failed to upload report from {output_filepath}.\")\n            return False\n        print(f\"[ReportGenerator] Report {output_filepath} uploaded successfully.\")\n\n        print(f\"[ReportGenerator] Report generation and export complete for type: {report_type}.\")\n        return True\n\n# Example Usage:\n# input_file = 'data.json'\n# output_template = 'reports/{report_type}_{timestamp}.csv'\n# upload_url = 'http://upload.service/api/reports'\n# # Create a dummy input file\n# with open(input_file, 'w') as f:\n#     json.dump([{ \"id\": 1, \"value\": 100, \"category\": \"A\" }, { \"id\": 2, \"value\": 200, \"category\": \"B\" }, { \"id\": 3, \"value\": 150, \"category\": \"A\" }], f)\n# if not os.path.exists('reports'):\n#     os.makedirs('reports')\n# generator = ReportGenerator(input_file, output_template, upload_url)\n# generator.generate_and_export_report('SUMMARY')\n# generator.generate_and_export_report('CATEGORY_SUMMARY')\n# generator.generate_and_export_report('UNKNOWN_TYPE') # Should fail",
      "level": "HARD",
      "language": "PYTHON",
      "violation": "Single Responsibility Principle",
      "explanation": "The original ReportGenerator class violates the Single Responsibility Principle (SRP) because it handles multiple responsibilities: reading data, processing data, exporting data, and uploading reports. By refactoring the code into separate classes (DataReader, DataProcessor, DataExporter, and ReportUploader), each class now has a single responsibility, making the code more modular and easier to maintain."
    },
    {
      "input": "import smtplib\nfrom twilio.rest import Client\nimport json\n\nEMAIL_HOST = 'smtp.example.com'\nEMAIL_PORT = 587\nEMAIL_USER = 'noreply@example.com'\nEMAIL_PASSWORD = 'password'\nSMS_ACCOUNT_SID = 'ACxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'\nSMS_AUTH_TOKEN = 'your_auth_token'\nSMS_FROM_NUMBER = '+15017122661'\nPUSH_NOTIFICATION_SERVICE_URL = 'https://push.example.com/send'\n\ndef fetch_user_preferences(user_id):\n    print(f\"[NotificationDispatcher] Fetching preferences for user {user_id}...\")\n\n    return {'email': True, 'sms': False, 'push': True, 'email_address': f'user{user_id}@example.com', 'phone_number': f'+1123456789{user_id}', 'device_token': f'device_{user_id}'}\n\nclass NotificationDispatcher:\n    def __init__(self, email_host, email_port, email_user, email_password,\n                 sms_account_sid, sms_auth_token, sms_from_number,\n                 push_service_url):\n        self.email_host = email_host\n        self.email_port = email_port\n        self.email_user = email_user\n        self.email_password = email_password\n        self.sms_account_sid = sms_account_sid\n        self.sms_auth_token = sms_auth_token\n        self.sms_from_number = sms_from_number\n        self.push_service_url = push_service_url\n        self._twilio_client = Client(sms_account_sid, sms_auth_token)\n\n    def dispatch_notification(self, user_id, subject, body):\n        print(f\"[NotificationDispatcher] Dispatching notification for user {user_id}\")\n\n        preferences = fetch_user_preferences(user_id)\n        if not preferences:\n            print(f\"[NotificationDispatcher] Could not fetch preferences for user {user_id}. Aborting.\")\n            return False\n        print(f\"[NotificationDispatcher] User preferences: {preferences}\")\n\n        success = False\n\n        if preferences.get('email'):\n            print(\"[NotificationDispatcher] User prefers email. Attempting to send...\")\n            email_address = preferences.get('email_address')\n            if email_address and self._send_email(email_address, subject, body):\n                print(\"[NotificationDispatcher] Email sent successfully.\")\n                success = True\n            else:\n                 print(\"[NotificationDispatcher] Failed to send email.\")\n\n        if preferences.get('sms'):\n            print(\"[NotificationDispatcher] User prefers SMS. Attempting to send...\")\n            phone_number = preferences.get('phone_number')\n            if phone_number and self._send_sms(phone_number, body):\n                 print(\"[NotificationDispatcher] SMS sent successfully.\")\n                 success = True\n            else:\n                 print(\"[NotificationDispatcher] Failed to send SMS.\")\n\n        if preferences.get('push'):\n            print(\"[NotificationDispatcher] User prefers push notification. Attempting to send...\")\n            device_token = preferences.get('device_token')\n            if device_token and self._send_push_notification(device_token, subject, body):\n                 print(\"[NotificationDispatcher] Push notification sent successfully.\")\n                 success = True\n            else:\n                 print(\"[NotificationDispatcher] Failed to send push notification.\")\n\n        if not success:\n            print(f\"[NotificationDispatcher] No notifications sent for user {user_id}.\")\n\n        print(f\"[NotificationDispatcher] Notification dispatch complete for user {user_id}.\")\n        return success # Reports if *at least one* notification was sent\n\n    def _send_email(self, recipient_email, subject, body):\n        print(f\"[_send_email] Sending email to {recipient_email} via {self.email_host}...\")\n        try:\n            print(\"[_send_email] Simulation: Email sent.\")\n            return True\n        except Exception as e:\n            print(f\"[_send_email] Error sending email: {e}\")\n            return False\n\n    def _send_sms(self, recipient_phone, body):\n        print(f\"[_send_sms] Sending SMS to {recipient_phone} via Twilio...\")\n        try:\n            print(\"[_send_sms] Simulation: SMS sent.\")\n            return True\n        except Exception as e:\n            print(f\"[_send_sms] Error sending SMS: {e}\")\n            return False\n\n    def _send_push_notification(self, device_token, subject, body):\n        print(f\"[_send_push_notification] Sending push notification to {device_token} via {self.push_service_url}...\")\n        try:\n            print(\"[_send_push_notification] Simulation: Push notification sent.\")\n            return True\n        except Exception as e:\n            print(f\"[_send_push_notification] Error sending push notification: {e}\")\n            return False\n",
      "output": "import smtplib\nfrom twilio.rest import Client\nimport json\n\n# Assume these are configured elsewhere\nEMAIL_HOST = 'smtp.example.com'\nEMAIL_PORT = 587\nEMAIL_USER = 'noreply@example.com'\nEMAIL_PASSWORD = 'password'\nSMS_ACCOUNT_SID = 'ACxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'\nSMS_AUTH_TOKEN = 'your_auth_token'\nSMS_FROM_NUMBER = '+15017122661'\nPUSH_NOTIFICATION_SERVICE_URL = 'https://push.example.com/send'\n\n# Assume user preferences are fetched from a DB or service\ndef fetch_user_preferences(user_id):\n    print(f\"[NotificationDispatcher] Fetching preferences for user {user_id}...\")\n    return {'email': True, 'sms': False, 'push': True, 'email_address': f'user{user_id}@example.com', 'phone_number': f'+1123456789{user_id}', 'device_token': f'device_{user_id}'}\n\nclass NotificationDispatcher:\n    def __init__(self, email_service, sms_service, push_service):\n        self.email_service = email_service\n        self.sms_service = sms_service\n        self.push_service = push_service\n\n    def dispatch_notification(self, user_id, subject, body):\n        print(f\"[NotificationDispatcher] Dispatching notification for user {user_id}\")\n        preferences = fetch_user_preferences(user_id)\n        if not preferences:\n            print(f\"[NotificationDispatcher] Could not fetch preferences for user {user_id}. Aborting.\")\n            return False\n        print(f\"[NotificationDispatcher] User preferences: {preferences}\")\n\n        success = False\n\n        if preferences.get('email'):\n            success = self.email_service.send_email(preferences.get('email_address'), subject, body) or success\n\n        if preferences.get('sms'):\n            success = self.sms_service.send_sms(preferences.get('phone_number'), body) or success\n\n        if preferences.get('push'):\n            success = self.push_service.send_push_notification(preferences.get('device_token'), subject, body) or success\n\n        if not success:\n            print(f\"[NotificationDispatcher] No notifications sent for user {user_id}.\")\n\n        print(f\"[NotificationDispatcher] Notification dispatch complete for user {user_id}.\")\n        return success\n\nclass EmailService:\n    def __init__(self, host, port, user, password):\n        self.host = host\n        self.port = port\n        self.user = user\n        self.password = password\n\n    def send_email(self, recipient_email, subject, body):\n        print(f\"[EmailService] Sending email to {recipient_email} via {self.host}...\")\n        try:\n            # Simulate sending email via SMTP\n            print(\"[EmailService] Simulation: Email sent.\")\n            return True\n        except Exception as e:\n            print(f\"[EmailService] Error sending email: {e}\")\n            return False\n\nclass SMSService:\n    def __init__(self, account_sid, auth_token, from_number):\n        self.client = Client(account_sid, auth_token)\n        self.from_number = from_number\n\n    def send_sms(self, recipient_phone, body):\n        print(f\"[SMSService] Sending SMS to {recipient_phone} via Twilio...\")\n        try:\n            print(\"[SMSService] Simulation: SMS sent.\")\n            return True\n        except Exception as e:\n            print(f\"[SMSService] Error sending SMS: {e}\")\n            return False\n\nclass PushNotificationService:\n    def __init__(self, service_url):\n        self.service_url = service_url\n\n    def send_push_notification(self, device_token, subject, body):\n        print(f\"[PushNotificationService] Sending push notification to {device_token} via {self.service_url}...\")\n        try:\n            print(\"[PushNotificationService] Simulation: Push notification sent.\")\n            return True\n        except Exception as e:\n            print(f\"[PushNotificationService] Error sending push notification: {e}\")\n            return False\n\n# Example Usage:\nemail_service = EmailService(EMAIL_HOST, EMAIL_PORT, EMAIL_USER, EMAIL_PASSWORD)\nsms_service = SMSService(SMS_ACCOUNT_SID, SMS_AUTH_TOKEN, SMS_FROM_NUMBER)\npush_service = PushNotificationService(PUSH_NOTIFICATION_SERVICE_URL)\ndispatcher = NotificationDispatcher(email_service, sms_service, push_service)\ndispatcher.dispatch_notification(101, \"Your Order Shipped\", \"Good news! Your recent order has shipped.\")\ndispatcher.dispatch_notification(102, \"Account Alert\", \"There was a login attempt from a new device.\")",
      "level": "HARD",
      "language": "PYTHON",
      "violation": "Single Responsibility Principle",
      "explanation": "The original code violates the Single Responsibility Principle (SRP) because the `NotificationDispatcher` class is responsible for both fetching user preferences and sending notifications through multiple channels (email, SMS, push notifications). This makes the class harder to maintain and test. The refactored code separates the responsibilities into different classes: `EmailService`, `SMSService`, and `PushNotificationService`, each handling their respective notification methods. The `NotificationDispatcher` now only coordinates the dispatching of notifications based on user preferences."
    },
    {
      "input": "import sqlite3\nfrom datetime import datetime\nimport smtplib\n\nDB_PATH = 'ecommerce.db'\nEMAIL_HOST = 'smtp.ecommerce.com'\nEMAIL_PORT = 587\nEMAIL_USER = 'status@ecommerce.com'\nEMAIL_PASSWORD = 'password'\n\ndef get_db_connection():\n    return sqlite3.connect(DB_PATH)\n\nclass OrderStatusUpdater:\n    def __init__(self, db_path, email_host, email_port, email_user, email_password):\n        self.db_path = db_path\n        self.email_host = email_host\n        self.email_port = email_port\n        self.email_user = email_user\n        self.email_password = email_password\n        self._create_db_if_not_exists()\n\n    def _create_db_if_not_exists(self):\n        conn = None\n        try:\n            conn = get_db_connection()\n            cursor = conn.cursor()\n            cursor.execute(\"\"\"CREATE TABLE IF NOT EXISTS orders (\n                id INTEGER PRIMARY KEY AUTOINCREMENT,\n                order_number TEXT UNIQUE NOT NULL,\n                customer_email TEXT NOT NULL,\n                status TEXT NOT NULL,\n                payment_status TEXT NOT NULL,\n                created_at TEXT\n            )\"\"\")\n            conn.commit()\n        except sqlite3.Error as e:\n            print(f\"[OrderStatusUpdater] Database error during creation: {e}\")\n        finally:\n            if conn:\n                conn.close()\n\n    def update_order_status_based_on_payment(self, order_number):\n        print(f\"[OrderStatusUpdater] Checking payment status for order {order_number} to update status.\")\n\n        order = self._fetch_order_by_number(order_number)\n        if order is None:\n            print(f\"[OrderStatusUpdater] Order {order_number} not found.\")\n            return False\n        print(f\"[OrderStatusUpdater] Order found: {order}\")\n\n        if order['payment_status'] == 'PAID' and order['status'] == 'PENDING':\n            print(f\"[OrderStatusUpdater] Order {order_number} is paid and pending. Updating status to PROCESSING.\")\n            new_status = 'PROCESSING'\n            if self._update_order_status(order['id'], new_status):\n                print(f\"[OrderStatusUpdater] Status updated to {new_status} for order {order_number}.\")\n                self._send_status_update_email(order['customer_email'], order_number, new_status)\n                print(f\"[OrderStatusUpdater] Status update email sent for order {order_number}.\")\n                return True\n            else:\n                print(f\"[OrderStatusUpdater] Failed to update status in DB for order {order_number}.\")\n                return False\n        elif order['payment_status'] == 'CANCELLED' and order['status'] != 'CANCELLED':\n             print(f\"[OrderStatusUpdater] Order {order_number} payment cancelled. Updating status to CANCELLED.\")\n             new_status = 'CANCELLED'\n             if self._update_order_status(order['id'], new_status):\n                 print(f\"[OrderStatusUpdater] Status updated to {new_status} for order {order_number}.\")\n                 self._send_status_update_email(order['customer_email'], order_number, new_status)\n                 print(f\"[OrderStatusUpdater] Status update email sent for order {order_number}.\")\n                 return True\n             else:\n                 print(f\"[OrderStatusUpdater] Failed to update status in DB for order {order_number}.\")\n                 return False\n        else:\n            print(f\"[OrderStatusUpdater] No status update needed for order {order_number} (Status: {order['status']}, Payment: {order['payment_status']}).\")\n            return False\n\n    def _fetch_order_by_number(self, order_number):\n        print(f\"[_fetch_order_by_number] Fetching order {order_number} from DB {self.db_path}...\")\n        conn = None\n        try:\n            conn = get_db_connection()\n            conn.row_factory = sqlite3.Row # Access columns by name\n            cursor = conn.cursor()\n            cursor.execute(\"SELECT id, order_number, customer_email, status, payment_status FROM orders WHERE order_number = ?\", (order_number,))\n            row = cursor.fetchone()\n            return dict(row) if row else None\n        except sqlite3.Error as e:\n            print(f\"[_fetch_order_by_number] Database error: {e}\")\n            return None\n        finally:\n            if conn:\n                conn.close()\n\n    def _update_order_status(self, order_id, new_status):\n        print(f\"[_update_order_status] Updating status for order id {order_id} to {new_status} in DB {self.db_path}...\")\n        conn = None\n        try:\n            conn = get_db_connection()\n            cursor = conn.cursor()\n            cursor.execute(\"UPDATE orders SET status = ? WHERE id = ?\", (new_status, order_id))\n            conn.commit()\n            return cursor.rowcount > 0\n        except sqlite3.Error as e:\n            print(f\"[_update_order_status] Database error: {e}\")\n            return False\n        finally:\n            if conn:\n                conn.close()\n\n    def _send_status_update_email(self, recipient_email, order_number, new_status):\n        print(f\"[_send_status_update_email] Sending status update email for order {order_number} to {recipient_email}...\")\n        try:\n            print(f\"[_send_status_update_email] Simulation: Status update email sent for order {order_number}.\")\n        except Exception as e:\n            print(f\"[_send_status_update_email] Error sending email: {e}\")\n",
      "output": "import sqlite3\nfrom datetime import datetime\nimport smtplib\n\n# Assume DB path and SMTP config are defined elsewhere\nDB_PATH = 'ecommerce.db'\nEMAIL_HOST = 'smtp.ecommerce.com'\nEMAIL_PORT = 587\nEMAIL_USER = 'status@ecommerce.com'\nEMAIL_PASSWORD = 'password'\n\ndef get_db_connection():\n    return sqlite3.connect(DB_PATH)\n\nclass OrderDatabase:\n    def __init__(self, db_path):\n        self.db_path = db_path\n        self._create_db_if_not_exists()\n\n    def _create_db_if_not_exists(self):\n        conn = None\n        try:\n            conn = get_db_connection()\n            cursor = conn.cursor()\n            cursor.execute(\"\"\"CREATE TABLE IF NOT EXISTS orders (\n                id INTEGER PRIMARY KEY AUTOINCREMENT,\n                order_number TEXT UNIQUE NOT NULL,\n                customer_email TEXT NOT NULL,\n                status TEXT NOT NULL,\n                payment_status TEXT NOT NULL,\n                created_at TEXT\n            )\"\"\")\n            conn.commit()\n        except sqlite3.Error as e:\n            print(f\"[OrderDatabase] Database error during creation: {e}\")\n        finally:\n            if conn:\n                conn.close()\n\n    def fetch_order_by_number(self, order_number):\n        print(f\"[fetch_order_by_number] Fetching order {order_number} from DB {self.db_path}...\")\n        conn = None\n        try:\n            conn = get_db_connection()\n            conn.row_factory = sqlite3.Row # Access columns by name\n            cursor = conn.cursor()\n            cursor.execute(\"SELECT id, order_number, customer_email, status, payment_status FROM orders WHERE order_number = ?\", (order_number,))\n            row = cursor.fetchone()\n            return dict(row) if row else None\n        except sqlite3.Error as e:\n            print(f\"[fetch_order_by_number] Database error: {e}\")\n            return None\n        finally:\n            if conn:\n                conn.close()\n\n    def update_order_status(self, order_id, new_status):\n        print(f\"[update_order_status] Updating status for order id {order_id} to {new_status} in DB {self.db_path}...\")\n        conn = None\n        try:\n            conn = get_db_connection()\n            cursor = conn.cursor()\n            cursor.execute(\"UPDATE orders SET status = ? WHERE id = ?\", (new_status, order_id))\n            conn.commit()\n            return cursor.rowcount > 0\n        except sqlite3.Error as e:\n            print(f\"[update_order_status] Database error: {e}\")\n            return False\n        finally:\n            if conn:\n                conn.close()\n\nclass EmailNotifier:\n    def __init__(self, email_host, email_port, email_user, email_password):\n        self.email_host = email_host\n        self.email_port = email_port\n        self.email_user = email_user\n        self.email_password = email_password\n\n    def send_status_update_email(self, recipient_email, order_number, new_status):\n        print(f\"[send_status_update_email] Sending status update email for order {order_number} to {recipient_email}...\")\n        try:\n            # Simulate sending email via SMTP\n            # with smtplib.SMTP(self.email_host, self.email_port) as server:\n            #     server.starttls()\n            #     server.login(self.email_user, self.email_password)\n            #     subject = f\"Order {order_number} Status Updated to {new_status}\"\n            #     body = f\"Dear customer,\\n\\nYour order {order_number} status has been updated to {new_status}.\\n\\nThank you,\\nEcommerce Team\"\n            #     message = f\"Subject: {subject}\\n\\n{body}\"\n            #     server.sendmail(self.email_user, recipient_email, message)\n            print(f\"[send_status_update_email] Simulation: Status update email sent for order {order_number}.\")\n        except Exception as e:\n            print(f\"[send_status_update_email] Error sending email: {e}\")\n\nclass OrderStatusUpdater:\n    def __init__(self, db, email_notifier):\n        self.db = db\n        self.email_notifier = email_notifier\n\n    def update_order_status_based_on_payment(self, order_number):\n        print(f\"[OrderStatusUpdater] Checking payment status for order {order_number} to update status.\")\n\n        order = self.db.fetch_order_by_number(order_number)\n        if order is None:\n            print(f\"[OrderStatusUpdater] Order {order_number} not found.\")\n            return False\n        print(f\"[OrderStatusUpdater] Order found: {order}\")\n\n        if order['payment_status'] == 'PAID' and order['status'] == 'PENDING':\n            print(f\"[OrderStatusUpdater] Order {order_number} is paid and pending. Updating status to PROCESSING.\")\n            new_status = 'PROCESSING'\n            if self.db.update_order_status(order['id'], new_status):\n                print(f\"[OrderStatusUpdater] Status updated to {new_status} for order {order_number}.\")\n                self.email_notifier.send_status_update_email(order['customer_email'], order_number, new_status)\n                print(f\"[OrderStatusUpdater] Status update email sent for order {order_number}.\")\n                return True\n            else:\n                print(f\"[OrderStatusUpdater] Failed to update status in DB for order {order_number}.\")\n                return False\n        elif order['payment_status'] == 'CANCELLED' and order['status'] != 'CANCELLED':\n             print(f\"[OrderStatusUpdater] Order {order_number} payment cancelled. Updating status to CANCELLED.\")\n             new_status = 'CANCELLED'\n             if self.db.update_order_status(order['id'], new_status):\n                 print(f\"[OrderStatusUpdater] Status updated to {new_status} for order {order_number}.\")\n                 self.email_notifier.send_status_update_email(order['customer_email'], order_number, new_status)\n                 print(f\"[OrderStatusUpdater] Status update email sent for order {order_number}.\")\n                 return True\n             else:\n                 print(f\"[OrderStatusUpdater] Failed to update status in DB for order {order_number}.\")\n                 return False\n        else:\n            print(f\"[OrderStatusUpdater] No status update needed for order {order_number} (Status: {order['status']}, Payment: {order['payment_status']}).\")\n            return False\n\n# Example Usage:\n# import os\n# db_file = 'ecommerce.db'\n# if os.path.exists(db_file): os.remove(db_file)\n# db = OrderDatabase(db_file)\n# email_notifier = EmailNotifier(EMAIL_HOST, EMAIL_PORT, EMAIL_USER, EMAIL_PASSWORD)\n# updater = OrderStatusUpdater(db, email_notifier)\n# \n# # Create dummy orders\n# conn = get_db_connection()\n# cursor = conn.cursor()\n# cursor.execute(\"INSERT INTO orders (order_number, customer_email, status, payment_status, created_at) VALUES (?, ?, ?, ?, ?)\",\n#                ('ORD123', 'user1@example.com', 'PENDING', 'PAID', datetime.now().isoformat()))\n# cursor.execute(\"INSERT INTO orders (order_number, customer_email, status, payment_status, created_at) VALUES (?, ?, ?, ?, ?)\",\n#                ('ORD456', 'user2@example.com', 'PENDING', 'PENDING', datetime.now().isoformat()))\n# cursor.execute(\"INSERT INTO orders (order_number, customer_email, status, payment_status, created_at) VALUES (?, ?, ?, ?, ?)\",\n#                ('ORD789', 'user3@example.com', 'SHIPPED', 'PAID', datetime.now().isoformat())) # Already shipped\n# cursor.execute(\"INSERT INTO orders (order_number, customer_email, status, payment_status, created_at) VALUES (?, ?, ?, ?, ?)\",\n#                ('ORD012', 'user4@example.com', 'PENDING', 'CANCELLED', datetime.now().isoformat()))\n# conn.commit()\n# conn.close()\n# \n# # Run updates\n# updater.update_order_status_based_on_payment('ORD123') # Should update to PROCESSING\n# updater.update_order_status_based_on_payment('ORD456') # Should do nothing\n# updater.update_order_status_based_on_payment('ORD789') # Should do nothing\n# updater.update_order_status_based_on_payment('ORD012') # Should update to CANCELLED\n# updater.update_order_status_based_on_payment('NONEXISTENT') # Should fail gracefully",
      "level": "HARD",
      "language": "PYTHON",
      "violation": "Single Responsibility Principle",
      "explanation": "The original code violates the Single Responsibility Principle (SRP) because the `OrderStatusUpdater` class is responsible for multiple tasks: managing database operations, sending emails, and updating order statuses. This makes the class harder to maintain and test. The refactored code separates these concerns into three distinct classes: `OrderDatabase` for database operations, `EmailNotifier` for sending emails, and `OrderStatusUpdater` for managing the order status updates. This adheres to the SRP by ensuring each class has a single responsibility."
    },
    {
      "input": "class User {\n    fun saveUser(user: User) {\n        \n    }\n    fun sendEmail(email: String, message: String) {\n        \n    }\n}",
      "output": "class User {\n    // User properties and methods\n}\n\nclass UserRepository {\n    fun saveUser(user: User) {\n        // Save user to database\n    }\n}\n\nclass EmailService {\n    fun sendEmail(email: String, message: String) {\n        // Send email to user\n    }\n}",
      "level": "EASY",
      "language": "KOTLIN",
      "violation": "Single Responsibility Principle",
      "explanation": "The original User class violates the Single Responsibility Principle because it has two responsibilities: managing user data and sending emails. By refactoring, we separate these concerns into UserRepository for database operations and EmailService for email operations, ensuring each class has a single responsibility."
    },
    {
      "input": "class Report {\n    fun generateReport() {\n        \n    }\n    fun printReport() {\n        \n    }\n}",
      "output": "class ReportGenerator {\n    fun generateReport() {\n        // Generate report\n    }\n}\n\nclass ReportPrinter {\n    fun printReport() {\n        // Print report\n    }\n}",
      "level": "EASY",
      "language": "KOTLIN",
      "violation": "Single Responsibility Principle",
      "explanation": "The original class 'Report' violates the Single Responsibility Principle because it has two responsibilities: generating a report and printing a report. By refactoring it into two separate classes, 'ReportGenerator' and 'ReportPrinter', each class now has a single responsibility."
    },
    {
      "input": "class Order {\n    fun calculateTotal() {\n        \n    }\n    fun saveToDatabase() {\n        \n    }\n}",
      "output": "class Order {\n    fun calculateTotal() {\n        // Calculate total\n    }\n}\n\nclass OrderRepository {\n    fun saveToDatabase(order: Order) {\n        // Save order to database\n    }\n}",
      "level": "EASY",
      "language": "KOTLIN",
      "violation": "Single Responsibility Principle",
      "explanation": "The original 'Order' class violates the Single Responsibility Principle because it has two responsibilities: calculating the total and saving the order to the database. By refactoring, we separate the database operations into a new class 'OrderRepository', allowing 'Order' to focus solely on its primary responsibility."
    },
    {
      "input": "class Invoice {\n    fun createInvoice() {\n        \n    }\n    fun sendInvoice() {\n        \n    }\n}",
      "output": "class Invoice {\n    fun createInvoice() {\n        // Create invoice\n    }\n}\n\nclass InvoiceSender {\n    fun sendInvoice(invoice: Invoice) {\n        // Send invoice to customer\n    }\n}",
      "level": "EASY",
      "language": "KOTLIN",
      "violation": "Single Responsibility Principle",
      "explanation": "The original class 'Invoice' violates the Single Responsibility Principle because it has two responsibilities: creating an invoice and sending it. By refactoring, we separate the concerns into two classes: 'Invoice' for creating invoices and 'InvoiceSender' for sending invoices."
    },
    {
      "input": "class Product {\n    fun getPriceWithTax() {\n        \n    }\n    fun updateStock() {\n        \n    }\n    fun displayProduct() {\n        \n    }\n}",
      "output": "class Product {\n    fun getPriceWithTax() {\n        // Calculate price with tax\n    }\n}\n\nclass StockManager {\n    fun updateStock() {\n        // Update stock in database\n    }\n}\n\nclass ProductDisplay {\n    fun displayProduct() {\n        // Display product details\n    }\n}",
      "level": "MODERATE",
      "language": "KOTLIN",
      "violation": "Single Responsibility Principle",
      "explanation": "The original Product class violates the Single Responsibility Principle because it has multiple responsibilities: calculating price, updating stock, and displaying product details. By refactoring, we separate these concerns into three distinct classes: Product for price calculation, StockManager for stock updates, and ProductDisplay for displaying product details."
    },
    {
      "input": "class CustomerManager {\n    fun addCustomer(customer: Customer) {\n        \n    }\n    fun removeCustomer(customer: Customer) {\n        \n    }\n    fun sendPromotionalEmail(customer: Customer) {\n        \n    }\n}",
      "output": "class CustomerManager {\n    fun addCustomer(customer: Customer) {\n        // Add customer\n    }\n    fun removeCustomer(customer: Customer) {\n        // Remove customer\n    }\n}\n\nclass EmailService {\n    fun sendPromotionalEmail(customer: Customer) {\n        // Send promotional email\n    }\n}",
      "level": "MODERATE",
      "language": "KOTLIN",
      "violation": "Single Responsibility Principle",
      "explanation": "The original code violates the Single Responsibility Principle because the `CustomerManager` class is responsible for both managing customers and sending promotional emails. By refactoring, we separate the email functionality into its own class, `EmailService`, which adheres to the principle by ensuring that each class has a single responsibility."
    },
    {
      "input": "class FileHandler {\n    fun readFile(path: String) {\n        \n    }\n    fun writeFile(path: String, content: String) {\n        \n    }\n    fun logOperation(operation: String) {\n        \n    }\n}",
      "output": "class FileReader {\n    fun readFile(path: String) {\n        // Read file\n    }\n}\n\nclass FileWriter {\n    fun writeFile(path: String, content: String) {\n        // Write file\n    }\n}\n\nclass FileLogger {\n    fun logOperation(operation: String) {\n        // Log file operation\n    }\n}",
      "level": "MODERATE",
      "language": "KOTLIN",
      "violation": "Single Responsibility Principle",
      "explanation": "The original FileHandler class violates the Single Responsibility Principle because it has multiple responsibilities: reading files, writing files, and logging operations. By refactoring it into three separate classes (FileReader, FileWriter, and FileLogger), each class now has a single responsibility, making the code more maintainable and easier to understand."
    },
    {
      "input": "class AuthService {\n    fun login(username: String, password: String) {\n        \n    }\n    fun logout() {\n        \n    }\n    fun sendLoginNotification(user: User) {\n        \n    }\n}",
      "output": "class AuthService {\n    fun login(username: String, password: String) {\n        // Login user\n    }\n    fun logout() {\n        // Logout user\n    }\n}\n\nclass NotificationService {\n    fun sendLoginNotification(user: User) {\n        // Send notification\n    }\n}",
      "level": "MODERATE",
      "language": "KOTLIN",
      "violation": "Single Responsibility Principle",
      "explanation": "The AuthService class violates the Single Responsibility Principle because it handles both authentication and notification responsibilities. By separating the notification functionality into a new class, NotificationService, we ensure that each class has a single responsibility."
    },
    {
      "input": "import java.sql.Connection\nimport java.sql.DriverManager\nimport javax.mail.internet.InternetAddress\nimport javax.mail.internet.MimeMessage\nimport javax.mail.Session\nimport java.util.Properties\nimport java.util.Date\n\ndata class ScheduledTask(val id: String, val type: String, val payload: String, var status: String, var lastRun: Date?)\n\nclass JobExecutor(private val dbUrl: String, private val smtpHost: String) {\n\n    fun executePendingJobs() {\n        println(\"[JobExecutor] Starting execution of pending jobs.\")\n\n        val pendingTasks = fetchPendingTasks()\n        println(\"[JobExecutor] Fetched ${pendingTasks.size} pending tasks.\")\n\n        if (pendingTasks.isEmpty()) {\n            println(\"[JobExecutor] No pending tasks to execute.\")\n            return\n        }\n\n        for (task in pendingTasks) {\n            println(\"[JobExecutor] Executing task: ${task.id} (${task.type})\")\n            task.status = \"RUNNING\"\n            updateTaskStatus(task)\n\n            try {\n                val success = executeTask(task)\n                if (success) {\n                    task.status = \"COMPLETED\"\n                    println(\"[JobExecutor] Task ${task.id} completed successfully.\")\n                } else {\n                    task.status = \"FAILED\"\n                    println(\"[JobExecutor] Task ${task.id} failed execution.\")\n                    sendFailureNotification(task, \"Task execution returned false\")\n                }\n            } catch (e: Exception) {\n                task.status = \"FAILED\"\n                println(\"[JobExecutor] Task ${task.id} failed with exception: ${e.message}\")\n                sendFailureNotification(task, \"Exception: ${e.message}\")\n            }\n            task.lastRun = Date()\n            updateTaskStatus(task)\n        }\n\n        println(\"[JobExecutor] Finished execution of pending jobs.\")\n    }\n\n\n    private fun fetchPendingTasks(): List<ScheduledTask> {\n        println(\"[JobExecutor] Fetching pending tasks from DB $dbUrl...\")\n        var conn: Connection? = null\n        val tasks = mutableListOf<ScheduledTask>()\n        try {\n            conn = DriverManager.getConnection(dbUrl)\n             tasks.add(ScheduledTask(\"task1\", \"REPORT_EMAIL\", \"user@example.com,ReportA\", \"PENDING\", null))\n             tasks.add(ScheduledTask(\"task2\", \"DATA_SYNC\", \"SourceX,DestY\", \"PENDING\", null))\n             tasks.add(ScheduledTask(\"task3\", \"UNKNOWN_TYPE\", \"payload\", \"PENDING\", null))\n        } catch (e: Exception) {\n            println(\"[JobExecutor] DB Fetch Error: ${e.message}\")\n        } finally {\n            conn?.close()\n        }\n        return tasks\n    }\n\n\n    private fun updateTaskStatus(task: ScheduledTask) {\n        println(\"[JobExecutor] Updating status for task ${task.id} to ${task.status} in DB $dbUrl...\")\n        var conn: Connection? = null\n        try {\n            conn = DriverManager.getConnection(dbUrl)\n\n        } catch (e: Exception) {\n            println(\"[JobExecutor] DB Update Error: ${e.message}\")\n        } finally {\n            conn?.close()\n        }\n    }\n\n\n    private fun executeTask(task: ScheduledTask): Boolean {\n        println(\"[JobExecutor] Executing task logic for type: ${task.type}\")\n        return when (task.type) {\n            \"REPORT_EMAIL\" -> sendReportEmailTask(task.payload)\n            \"DATA_SYNC\" -> performDataSyncTask(task.payload)\n            else -> {\n                println(\"[JobExecutor] Unknown task type: ${task.type}\")\n                false\n            }\n        }\n    }\n\n\n    private fun sendReportEmailTask(payload: String): Boolean {\n        println(\"[JobExecutor] Running Send Report Email Task with payload: $payload\")\n        val parts = payload.split(\",\")\n        if (parts.size != 2) return false\n        val email = parts[0]\n        val reportName = parts[1]\n        println(\"[JobExecutor] Simulating sending $reportName report to $email...\")\n\n        return true\n    }\n\n\n    private fun performDataSyncTask(payload: String): Boolean {\n         println(\"[JobExecutor] Running Data Sync Task with payload: $payload\")\n         val parts = payload.split(\",\")\n         if (parts.size != 2) return false\n         val source = parts[0]\n         val dest = parts[1]\n         println(\"[JobExecutor] Simulating syncing data from $source to $dest...\")\n\n         return true\n    }\n\n\n    private fun sendFailureNotification(task: ScheduledTask, reason: String) {\n        println(\"[JobExecutor] Sending failure notification for task ${task.id}...\")\n        val props = Properties()\n        props[\"mail.smtp.host\"] = smtpHost\n        val session = Session.getInstance(props)\n        val message = MimeMessage(session)\n        message.setFrom(InternetAddress(\"no-reply@jobexecutor.com\"))\n\n        message.setRecipients(MimeMessage.RecipientType.TO, InternetAddress.parse(\"admin@example.com\"))\n        message.subject = \"Scheduled Task Failed: ${task.id}\"\n        message.setText(\"Task ${task.id} (${task.type}) failed.\\nReason: $reason\\nPayload: ${task.payload}\")\n\n    }\n}\n",
      "output": "",
      "level": "HARD",
      "language": "kotlin",
      "violation": "SRP",
      "explanation": "{\"violation_type\":\"Single Responsibility Principle\",\"refactored_code\":\"import java.sql.Connection\\nimport java.sql.DriverManager\\nimport javax.mail.internet.InternetAddress\\nimport javax.mail.internet.MimeMessage\\nimport javax.mail.Session\\nimport java.util.Properties\\nimport java.util.Date\\n\\ndata class ScheduledTask(val id: String, val type: String, val payload: String, var status: String, var lastRun: Date?)\\n\\nclass JobExecutor(private val dbUrl: String, private val smtpHost: String) {\\n\\n    private val taskFetcher = TaskFetcher(dbUrl)\\n    private val taskUpdater = TaskUpdater(dbUrl)\\n    private val notificationSender = NotificationSender(smtpHost)\\n\\n    fun executePendingJobs() {\\n        println(\\\"[JobExecutor] Starting execution of pending jobs.\\\")\\n\\n        val pendingTasks = taskFetcher.fetchPendingTasks()\\n        println(\\\"[JobExecutor] Fetched \\${pendingTasks.size} pending tasks.\\\")\\n\\n        if (pendingTasks.isEmpty()) {\\n            println(\\\"[JobExecutor] No pending tasks to execute.\\\")\\n            return\\n        }\\n\\n        for (task in pendingTasks) {\\n            println(\\\"[JobExecutor] Executing task: \\${task.id} (\\${task.type})\\\")\\n            task.status = \\\"RUNNING\\\"\\n            taskUpdater.updateTaskStatus(task)\\n\\n            try {\\n                val success = executeTask(task)\\n                if (success) {\\n                    task.status = \\\"COMPLETED\\\"\\n                    println(\\\"[JobExecutor] Task \\${task.id} completed successfully.\\\")\\n                } else {\\n                    task.status = \\\"FAILED\\\"\\n                    println(\\\"[JobExecutor] Task \\${task.id} failed execution.\\\")\\n                    notificationSender.sendFailureNotification(task, \\\"Task execution returned false\\\")\\n                }\\n            } catch (e: Exception) {\\n                task.status = \\\"FAILED\\\"\\n                println(\\\"[JobExecutor] Task \\${task.id} failed with exception: \\${e.message}\\\")\\n                notificationSender.sendFailureNotification(task, \\\"Exception: \\${e.message}\\\")\\n            }\\n            task.lastRun = Date()\\n            taskUpdater.updateTaskStatus(task)\\n        }\\n\\n        println(\\\"[JobExecutor] Finished execution of pending jobs.\\\")\\n    }\\n\\n    private fun executeTask(task: ScheduledTask): Boolean {\\n        println(\\\"[JobExecutor] Executing task logic for type: \\${task.type}\\\")\\n        return when (task.type) {\\n            \\\"REPORT_EMAIL\\\" -> sendReportEmailTask(task.payload)\\n            \\\"DATA_SYNC\\\" -> performDataSyncTask(task.payload)\\n            else -> {\\n                println(\\\"[JobExecutor] Unknown task type: \\${task.type}\\\")\\n                false\\n            }\\n        }\\n    }\\n\\n    private fun sendReportEmailTask(payload: String): Boolean {\\n        println(\\\"[JobExecutor] Running Send Report Email Task with payload: \\${payload}\\\")\\n        val parts = payload.split(\\\",\\\")\\n        if (parts.size != 2) return false\\n        val email = parts[0]\\n        val reportName = parts[1]\\n        println(\\\"[JobExecutor] Simulating sending \\${reportName} report to \\${email}...\\\")\\n\\n        return true\\n    }\\n\\n    private fun performDataSyncTask(payload: String): Boolean {\\n         println(\\\"[JobExecutor] Running Data Sync Task with payload: \\${payload}\\\")\\n         val parts = payload.split(\\\",\\\")\\n         if (parts.size != 2) return false\\n         val source = parts[0]\\n         val dest = parts[1]\\n         println(\\\"[JobExecutor] Simulating syncing data from \\${source} to \\${dest}...\\\")\\n\\n         return true\\n    }\\n}\\n\\nclass TaskFetcher(private val dbUrl: String) {\\n    fun fetchPendingTasks(): List<ScheduledTask> {\\n        println(\\\"[TaskFetcher] Fetching pending tasks from DB \\${dbUrl}...\\\")\\n        var conn: Connection? = null\\n        val tasks = mutableListOf<ScheduledTask>()\\n        try {\\n            conn = DriverManager.getConnection(dbUrl)\\n            tasks.add(ScheduledTask(\\\"task1\\\", \\\"REPORT_EMAIL\\\", \\\"user@example.com,ReportA\\\", \\\"PENDING\\\", null))\\n            tasks.add(ScheduledTask(\\\"task2\\\", \\\"DATA_SYNC\\\", \\\"SourceX,DestY\\\", \\\"PENDING\\\", null))\\n            tasks.add(ScheduledTask(\\\"task3\\\", \\\"UNKNOWN_TYPE\\\", \\\"payload\\\", \\\"PENDING\\\", null))\\n        } catch (e: Exception) {\\n            println(\\\"[TaskFetcher] DB Fetch Error: \\${e.message}\\\")\\n        } finally {\\n            conn?.close()\\n        }\\n        return tasks\\n    }\\n}\\n\\nclass TaskUpdater(private val dbUrl: String) {\\n    fun updateTaskStatus(task: ScheduledTask) {\\n        println(\\\"[TaskUpdater] Updating status for task \\${task.id} to \\${task.status} in DB \\${dbUrl}...\\\")\\n        var conn: Connection? = null\\n        try {\\n            conn = DriverManager.getConnection(dbUrl)\\n        } catch (e: Exception) {\\n            println(\\\"[TaskUpdater] DB Update Error: \\${e.message}\\\")\\n        } finally {\\n            conn?.close()\\n        }\\n    }\\n}\\n\\nclass NotificationSender(private val smtpHost: String) {\\n    fun sendFailureNotification(task: ScheduledTask, reason: String) {\\n        println(\\\"[NotificationSender] Sending failure notification for task \\${task.id}...\\\")\\n        val props = Properties()\\n        props[\\\"mail.smtp.host\\\"] = smtpHost\\n        val session = Session.getInstance(props)\\n        val message = MimeMessage(session)\\n        message.setFrom(InternetAddress(\\\"no-reply@jobexecutor.com\\\"))\\n\\n        message.setRecipients(MimeMessage.RecipientType.TO, InternetAddress.parse(\\\"admin@example.com\\\"))\\n        message.subject = \\\"Scheduled Task Failed: \\${task.id}\\\"\\n        message.setText(\\\"Task \\${task.id} (\\${task.type}) failed.\\\\nReason: \\${reason}\\\\nPayload: \\${task.payload}\\\")\\n    }\\n}\",\"explanation\":\"The original code violates the Single Responsibility Principle (SRP) because the `JobExecutor` class is responsible for multiple tasks: fetching tasks from the database, updating task statuses, executing tasks, and sending notifications. This makes the class difficult to maintain and test. The refactored code separates these responsibilities into three distinct classes: `TaskFetcher`, `TaskUpdater`, and `NotificationSender`, each handling a specific responsibility. This adheres to the SRP, making the code cleaner and more maintainable.\"}"
    },
    {
      "input": "import java.io.File\nimport java.util.UUID\n\ndata class ApiRequest(val method: String, val path: String, val headers: Map<String, String>, val body: String?)\ndata class ApiResponse(val statusCode: Int, val headers: Map<String, String>, val body: String?)\n\ndata class Product(val id: String, val name: String, val price: Double)\n\nclass ProductApiHandler {\n\n    fun handleRequest(request: ApiRequest): ApiResponse {\n        println(\"[ProductApiHandler] Handling request: ${request.method} ${request.path}\")\n\n        when {\n            request.path == \"/products\" && request.method == \"GET\" -> {\n                println(\"[ProductApiHandler] Handling GET /products\")\n\n                if (!validateHeaders(request.headers)) {\n                     logRequest(\"GET\", \"/products\", 401, \"Invalid Headers\")\n                     return ApiResponse(401, emptyMap(), \"Unauthorized\")\n                }\n                println(\"[ProductApiHandler] Headers validated.\")\n\n                val products = fetchAllProducts()\n                println(\"[ProductApiHandler] Products fetched.\")\n\n                val responseBody = formatProductsResponse(products)\n                println(\"[ProductApiHandler] Response formatted.\")\n\n                logRequest(\"GET\", \"/products\", 200, \"Success\")\n                return ApiResponse(200, mapOf(\"Content-Type\" to \"application/json\"), responseBody)\n\n            }\n            request.path == \"/products\" && request.method == \"POST\" -> {\n                println(\"[ProductApiHandler] Handling POST /products\")\n\n                if (!validateRequestBody(request.body)) {\n                     logRequest(\"POST\", \"/products\", 400, \"Invalid Body\")\n                     return ApiResponse(400, emptyMap(), \"Invalid Request Body\")\n                }\n                println(\"[ProductApiHandler] Request body validated.\")\n\n                val newProduct = parseProductFromRequestBody(request.body!!)\n                println(\"[ProductApiHandler] Product parsed.\")\n\n                if (!saveProduct(newProduct)) {\n                     logRequest(\"POST\", \"/products\", 500, \"Failed to save product\")\n                     return ApiResponse(500, emptyMap(), \"Failed to save product\")\n                }\n                println(\"[ProductApiHandler] Product saved.\")\n\n                logRequest(\"POST\", \"/products\", 201, \"Created\")\n                return ApiResponse(201, emptyMap(), \"Product Created\")\n\n            }\n            else -> {\n                println(\"[ProductApiHandler] Method/Path not supported.\")\n                logRequest(request.method, request.path, 404, \"Not Found\")\n                return ApiResponse(404, emptyMap(), \"Not Found\")\n            }\n        }\n    }\n\n\n    private fun validateHeaders(headers: Map<String, String>): Boolean {\n        println(\"[ProductApiHandler] Validating headers...\")\n\n        return headers.containsKey(\"Authorization\")\n    }\n\n\n    private fun validateRequestBody(body: String?): Boolean {\n        println(\"[ProductApiHandler] Validating request body...\")\n\n        return body != null && body.contains(\"name\") && body.contains(\"price\")\n    }\n\n\n    private fun parseProductFromRequestBody(body: String): Product {\n         println(\"[ProductApiHandler] Parsing request body...\")\n\n         return Product(UUID.randomUUID().toString(), \"Parsed Product\", 0.0)\n    }\n\n\n    private fun fetchAllProducts(): List<Product> {\n        println(\"[ProductApiHandler] Fetching all products from DB...\")\n\n        return listOf(Product(\"1\", \"Old Gadget\", 9.99))\n    }\n\n\n    private fun saveProduct(product: Product): Boolean {\n         println(\"[ProductApiHandler] Saving product ${product.id} to DB...\")\n\n         return true\n    }\n\n\n    private fun formatProductsResponse(products: List<Product>): String {\n        println(\"[ProductApiHandler] Formatting products response...\")\n\n        return \"[{\"id\": \"1\", \"name\": \"Old Gadget\", \"price\": 9.99}]\";\n    }\n\n\n    private fun logRequest(method: String, path: String, statusCode: Int, status: String) {\n        println(\"[ProductApiHandler] LOG: $method $path -> $statusCode ($status)\")\n\n    }\n}\n",
      "output": "class ProductApiHandler {\n\n    fun handleRequest(request: ApiRequest): ApiResponse {\n        println(\"[ProductApiHandler] Handling request: ${'$'}{request.method} ${'$'}{request.path}\")\n\n        return when {\n            request.path == \"/products\" && request.method == \"GET\" -> handleGetProducts(request)\n            request.path == \"/products\" && request.method == \"POST\" -> handlePostProduct(request)\n            else -> handleNotFound(request)\n        }\n    }\n\n    private fun handleGetProducts(request: ApiRequest): ApiResponse {\n        println(\"[ProductApiHandler] Handling GET /products\")\n\n        if (!validateHeaders(request.headers)) {\n            logRequest(\"GET\", \"/products\", 401, \"Invalid Headers\")\n            return ApiResponse(401, emptyMap(), \"Unauthorized\")\n        }\n        println(\"[ProductApiHandler] Headers validated.\")\n\n        val products = fetchAllProducts()\n        println(\"[ProductApiHandler] Products fetched.\")\n\n        val responseBody = formatProductsResponse(products)\n        println(\"[ProductApiHandler] Response formatted.\")\n\n        logRequest(\"GET\", \"/products\", 200, \"Success\")\n        return ApiResponse(200, mapOf(\"Content-Type\" to \"application/json\"), responseBody)\n    }\n\n    private fun handlePostProduct(request: ApiRequest): ApiResponse {\n        println(\"[ProductApiHandler] Handling POST /products\")\n\n        if (!validateRequestBody(request.body)) {\n            logRequest(\"POST\", \"/products\", 400, \"Invalid Body\")\n            return ApiResponse(400, emptyMap(), \"Invalid Request Body\")\n        }\n        println(\"[ProductApiHandler] Request body validated.\")\n\n        val newProduct = parseProductFromRequestBody(request.body!!)\n        println(\"[ProductApiHandler] Product parsed.\")\n\n        if (!saveProduct(newProduct)) {\n            logRequest(\"POST\", \"/products\", 500, \"Failed to save product\")\n            return ApiResponse(500, emptyMap(), \"Failed to save product\")\n        }\n        println(\"[ProductApiHandler] Product saved.\")\n\n        logRequest(\"POST\", \"/products\", 201, \"Created\")\n        return ApiResponse(201, emptyMap(), \"Product Created\")\n    }\n\n    private fun handleNotFound(request: ApiRequest): ApiResponse {\n        println(\"[ProductApiHandler] Method/Path not supported.\")\n        logRequest(request.method, request.path, 404, \"Not Found\")\n        return ApiResponse(404, emptyMap(), \"Not Found\")\n    }\n\n    private fun validateHeaders(headers: Map<String, String>): Boolean {\n        println(\"[ProductApiHandler] Validating headers...\")\n        return headers.containsKey(\"Authorization\")\n    }\n\n    private fun validateRequestBody(body: String?): Boolean {\n        println(\"[ProductApiHandler] Validating request body...\")\n        return body != null && body.contains(\"name\") && body.contains(\"price\")\n    }\n\n    private fun parseProductFromRequestBody(body: String): Product {\n        println(\"[ProductApiHandler] Parsing request body...\")\n        return Product(UUID.randomUUID().toString(), \"Parsed Product\", 0.0)\n    }\n\n    private fun fetchAllProducts(): List<Product> {\n        println(\"[ProductApiHandler] Fetching all products from DB...\")\n        return listOf(Product(\"1\", \"Old Gadget\", 9.99))\n    }\n\n    private fun saveProduct(product: Product): Boolean {\n        println(\"[ProductApiHandler] Saving product ${'$'}{product.id} to DB...\")\n        return true\n    }\n\n    private fun formatProductsResponse(products: List<Product>): String {\n        println(\"[ProductApiHandler] Formatting products response...\")\n        return \"[{\\\"id\\\": \\\"1\\\", \\\"name\\\": \\\"Old Gadget\\\", \\\"price\\\": 9.99}]\";\n    }\n\n    private fun logRequest(method: String, path: String, statusCode: Int, status: String) {\n        println(\"[ProductApiHandler] LOG: ${'$'}method ${'$'}path -> ${'$'}statusCode ($status)\")\n    }\n}",
      "level": "HARD",
      "language": "KOTLIN",
      "violation": "Single Responsibility Principle",
      "explanation": "The original code violates the Single Responsibility Principle (SRP) because the `ProductApiHandler` class is responsible for handling requests, validating headers and bodies, fetching products, saving products, formatting responses, and logging requests. Each of these responsibilities should be separated into different classes or methods. The refactored code separates the handling of GET and POST requests into their own methods, making the code cleaner and adhering to SRP."
    },
    {
      "input": "import java.sql.Connection\nimport java.sql.DriverManager\nimport java.io.File\nimport java.awt.Image\nimport javax.imageio.ImageIO\nimport javax.mail.internet.InternetAddress\nimport javax.mail.internet.MimeMessage\nimport javax.mail.Session\nimport java.util.Properties\n\ndata class UserProfile(var id: String, var name: String, var bio: String?, var profilePicturePath: String?)\n\nclass UserProfileManager(private val dbUrl: String, private val profilePictureDir: String, private val smtpHost: String) {\n\n    fun updateProfile(userId: String, name: String?, bio: String?, profilePictureFile: File?): UserProfile? {\n        println(\"[UserProfileManager] Starting profile update for user $userId\")\n\n        val existingProfile = fetchProfile(userId)\n        if (existingProfile == null) {\n            println(\"[UserProfileManager] User profile not found for $userId.\")\n            return null\n        }\n        println(\"[UserProfileManager] Existing profile fetched.\")\n\n        existingProfile.name = name ?: existingProfile.name\n        existingProfile.bio = bio ?: existingProfile.bio\n        println(\"[UserProfileManager] Profile data updated in memory.\")\n\n        var newProfilePicturePath: String? = existingProfile.profilePicturePath\n        if (profilePictureFile != null) {\n            if (!validateImage(profilePictureFile)) {\n                 println(\"[UserProfileManager] Invalid profile picture file.\")\n                 return null\n            }\n            newProfilePicturePath = saveProfilePicture(userId, profilePictureFile)\n            existingProfile.profilePicturePath = newProfilePicturePath\n            println(\"[UserProfileManager] Profile picture processed and saved.\")\n        }\n\n        if (!saveProfile(existingProfile)) {\n            println(\"[UserProfileManager] Failed to save updated profile.\")\n\n            return null\n        }\n        println(\"[UserProfileManager] Profile saved to database.\")\n\n        notifyUserOfUpdate(existingProfile)\n        println(\"[UserProfileManager] User notified of profile update.\")\n\n        println(\"[UserProfileManager] Profile update complete for user $userId.\")\n        return existingProfile\n    }\n\n    private fun fetchProfile(userId: String): UserProfile? {\n        println(\"[UserProfileManager] Fetching profile for $userId from $dbUrl...\")\n        var conn: Connection? = null\n        try {\n            conn = DriverManager.getConnection(dbUrl)\n\n             return UserProfile(userId, \"Test User\", \"Just a test user\", \"\")\n        } catch (e: Exception) {\n            println(\"[UserProfileManager] DB Fetch Error: ${e.message}\")\n            return null\n        } finally {\n            conn?.close()\n        }\n    }\n\n    private fun saveProfile(profile: UserProfile): Boolean {\n        println(\"[UserProfileManager] Saving profile for ${profile.id} to $dbUrl...\")\n        var conn: Connection? = null\n        try {\n            conn = DriverManager.getConnection(dbUrl)\n\n            return true\n        } catch (e: Exception) {\n            println(\"[UserProfileManager] DB Save Error: ${e.message}\")\n            return false\n        } finally {\n            conn?.close()\n        }\n    }\n\n    private fun validateImage(file: File): Boolean {\n         println(\"[UserProfileManager] Validating image file: ${file.name}\")\n\n        return file.exists() && file.length() > 0\n    }\n\n    private fun saveProfilePicture(userId: String, file: File): String? {\n        println(\"[UserProfileManager] Saving profile picture for $userId to $profilePictureDir...\")\n        val image = ImageIO.read(file)\n        if (image == null) {\n             println(\"[UserProfileManager] Could not read image file.\")\n             return null\n        }\n\n        val resizedImage: Image = image.getScaledInstance(128, 128, Image.SCALE_SMOOTH)\n        val outputFileName = \"${userId}_profile.jpg\"\n        val outputFile = File(profilePictureDir, outputFileName)\n        try {\n             ImageIO.write(resizedImage, \"jpg\", outputFile)\n             return outputFile.absolutePath\n        } catch (e: Exception) {\n            println(\"[UserProfileManager] Image Save Error: ${e.message}\")\n            return null\n        }\n    }\n\n    private fun notifyUserOfUpdate(profile: UserProfile) {\n        println(\"[UserProfileManager] Notifying user ${profile.id} via $smtpHost...\")\n        val props = Properties()\n        props[\"mail.smtp.host\"] = smtpHost\n        val session = Session.getInstance(props)\n        val message = MimeMessage(session)\n        message.setFrom(InternetAddress(\"no-reply@app.com\"))\n\n        message.setRecipients(MimeMessage.RecipientType.TO, InternetAddress.parse(\"test@example.com\"))\n        message.subject = \"Your Profile Has Been Updated\"\n        message.setText(\"Hello ${profile.name}, your profile information was recently updated.\")\n\n    }\n}\n",
      "output": "import java.sql.Connection\nimport java.sql.DriverManager\nimport java.io.File\nimport java.awt.Image\nimport javax.imageio.ImageIO\nimport javax.mail.internet.InternetAddress\nimport javax.mail.internet.MimeMessage\nimport javax.mail.Session\nimport java.util.Properties\n\ndata class UserProfile(var id: String, var name: String, var bio: String?, var profilePicturePath: String?)\n\nclass UserProfileManager(private val dbUrl: String, private val profilePictureDir: String, private val smtpHost: String) {\n\n    private val profileRepository = ProfileRepository(dbUrl)\n    private val imageService = ImageService(profilePictureDir)\n    private val notificationService = NotificationService(smtpHost)\n\n    fun updateProfile(userId: String, name: String?, bio: String?, profilePictureFile: File?): UserProfile? {\n        println(\"[UserProfileManager] Starting profile update for user $userId\")\n\n        val existingProfile = profileRepository.fetchProfile(userId)\n        if (existingProfile == null) {\n            println(\"[UserProfileManager] User profile not found for $userId.\")\n            return null\n        }\n        println(\"[UserProfileManager] Existing profile fetched.\")\n\n        existingProfile.name = name ?: existingProfile.name\n        existingProfile.bio = bio ?: existingProfile.bio\n        println(\"[UserProfileManager] Profile data updated in memory.\")\n\n        if (profilePictureFile != null) {\n            if (!imageService.validateImage(profilePictureFile)) {\n                println(\"[UserProfileManager] Invalid profile picture file.\")\n                return null\n            }\n            existingProfile.profilePicturePath = imageService.saveProfilePicture(userId, profilePictureFile)\n            println(\"[UserProfileManager] Profile picture processed and saved.\")\n        }\n\n        if (!profileRepository.saveProfile(existingProfile)) {\n            println(\"[UserProfileManager] Failed to save updated profile.\")\n            return null\n        }\n        println(\"[UserProfileManager] Profile saved to database.\")\n\n        notificationService.notifyUserOfUpdate(existingProfile)\n        println(\"[UserProfileManager] User notified of profile update.\")\n\n        println(\"[UserProfileManager] Profile update complete for user $userId.\")\n        return existingProfile\n    }\n}\n\nclass ProfileRepository(private val dbUrl: String) {\n    fun fetchProfile(userId: String): UserProfile? {\n        println(\"[ProfileRepository] Fetching profile for $userId from $dbUrl...\")\n        var conn: Connection? = null\n        try {\n            conn = DriverManager.getConnection(dbUrl)\n            return UserProfile(userId, \"Test User\", \"Just a test user\", \"\")\n        } catch (e: Exception) {\n            println(\"[ProfileRepository] DB Fetch Error: ${e.message}\")\n            return null\n        } finally {\n            conn?.close()\n        }\n    }\n\n    fun saveProfile(profile: UserProfile): Boolean {\n        println(\"[ProfileRepository] Saving profile for ${profile.id} to $dbUrl...\")\n        var conn: Connection? = null\n        try {\n            conn = DriverManager.getConnection(dbUrl)\n            return true\n        } catch (e: Exception) {\n            println(\"[ProfileRepository] DB Save Error: ${e.message}\")\n            return false\n        } finally {\n            conn?.close()\n        }\n    }\n}\n\nclass ImageService(private val profilePictureDir: String) {\n    fun validateImage(file: File): Boolean {\n        println(\"[ImageService] Validating image file: ${file.name}\")\n        return file.exists() && file.length() > 0\n    }\n\n    fun saveProfilePicture(userId: String, file: File): String? {\n        println(\"[ImageService] Saving profile picture for $userId to $profilePictureDir...\")\n        val image = ImageIO.read(file)\n        if (image == null) {\n            println(\"[ImageService] Could not read image file.\")\n            return null\n        }\n\n        val resizedImage: Image = image.getScaledInstance(128, 128, Image.SCALE_SMOOTH)\n        val outputFileName = \"${userId}_profile.jpg\"\n        val outputFile = File(profilePictureDir, outputFileName)\n        try {\n            ImageIO.write(resizedImage, \"jpg\", outputFile)\n            return outputFile.absolutePath\n        } catch (e: Exception) {\n            println(\"[ImageService] Image Save Error: ${e.message}\")\n            return null\n        }\n    }\n}\n\nclass NotificationService(private val smtpHost: String) {\n    fun notifyUserOfUpdate(profile: UserProfile) {\n        println(\"[NotificationService] Notifying user ${profile.id} via $smtpHost...\")\n        val props = Properties()\n        props[\"mail.smtp.host\"] = smtpHost\n        val session = Session.getInstance(props)\n        val message = MimeMessage(session)\n        message.setFrom(InternetAddress(\"no-reply@app.com\"))\n\n        message.setRecipients(MimeMessage.RecipientType.TO, InternetAddress.parse(\"test@example.com\"))\n        message.subject = \"Your Profile Has Been Updated\"\n        message.setText(\"Hello ${profile.name}, your profile information was recently updated.\")\n    }\n}",
      "level": "HARD",
      "language": "KOTLIN",
      "violation": "Single Responsibility Principle",
      "explanation": "The original code violates the Single Responsibility Principle (SRP) because the `UserProfileManager` class is responsible for multiple tasks: managing user profiles, handling image processing, and sending notifications. This makes the class harder to maintain and test. The refactored code separates these concerns into three distinct classes: `ProfileRepository` for database operations, `ImageService` for image handling, and `NotificationService` for sending notifications. This adheres to SRP by ensuring that each class has a single responsibility."
    },
    {
      "input": "import java.sql.Connection\nimport java.sql.DriverManager\nimport javax.mail.internet.InternetAddress\nimport javax.mail.internet.MimeMessage\nimport javax.mail.Session\nimport java.util.Properties\n\ndata class Product(val id: String, val name: String, val price: Double)\ndata class CartItem(val product: Product, val quantity: Int)\ndata class ShoppingCart(val items: List<CartItem>)\ndata class Order(val id: String, val items: List<CartItem>, val totalAmount: Double, val customerEmail: String)\n\nclass CheckoutService(private val dbUrl: String, private val paymentGatewayUrl: String, private val smtpHost: String) {\n\n    fun processCheckout(cart: ShoppingCart, customerEmail: String): Order? {\n        println(\"[CheckoutService] Starting checkout process...\")\n\n        if (!validateCart(cart)) {\n            println(\"[CheckoutService] Cart validation failed.\")\n            return null\n        }\n        println(\"[CheckoutService] Cart validated.\")\n\n        if (!checkInventory(cart)) {\n            println(\"[CheckoutService] Inventory check failed.\")\n            return null\n        }\n        println(\"[CheckoutService] Inventory checked.\")\n\n        val totalAmount = calculateTotal(cart)\n        println(\"[CheckoutService] Total amount calculated: $totalAmount\")\n\n        if (!processPayment(customerEmail, totalAmount)) {\n            println(\"[CheckoutService] Payment processing failed.\")\n\n            return null\n        }\n        println(\"[CheckoutService] Payment processed.\")\n\n        val order = saveOrder(cart, totalAmount, customerEmail)\n        if (order == null) {\n            println(\"[CheckoutService] Failed to save order.\")\n\n            return null\n        }\n        println(\"[CheckoutService] Order saved: ${order.id}\")\n\n        updateInventory(cart)\n        println(\"[CheckoutService] Inventory updated.\")\n\n        sendOrderConfirmationEmail(customerEmail, order)\n        println(\"[CheckoutService] Order confirmation email sent.\")\n\n        println(\"[CheckoutService] Checkout process completed successfully.\")\n        return order\n    }\n\n    private fun validateCart(cart: ShoppingCart): Boolean {\n        println(\"[CheckoutService] Validating cart...\")\n        return cart.items.isNotEmpty()\n    }\n\n    private fun checkInventory(cart: ShoppingCart): Boolean {\n        println(\"[CheckoutService] Checking inventory via $paymentGatewayUrl...\")\n\n        return true\n    }\n\n    private fun calculateTotal(cart: ShoppingCart): Double {\n        println(\"[CheckoutService] Calculating total...\")\n        return cart.items.sumByDouble { it.product.price * it.quantity }\n    }\n\n    private fun processPayment(email: String, amount: Double): Boolean {\n        println(\"[CheckoutService] Processing payment for $amount via $paymentGatewayUrl...\")\n\n        return true\n    }\n\n    private fun saveOrder(cart: ShoppingCart, totalAmount: Double, customerEmail: String): Order? {\n        println(\"[CheckoutService] Saving order to DB $dbUrl...\")\n        var conn: Connection? = null\n        try {\n            conn = DriverManager.getConnection(dbUrl)\n\n            val orderId = \"ORDER_${System.currentTimeMillis()}\"\n\n            return Order(orderId, cart.items, totalAmount, customerEmail)\n        } catch (e: Exception) {\n            println(\"[CheckoutService] DB Error: ${e.message}\")\n            return null\n        } finally {\n            conn?.close()\n        }\n    }\n\n    private fun updateInventory(cart: ShoppingCart) {\n        println(\"[CheckoutService] Updating inventory via $paymentGatewayUrl...\")\n\n    }\n\n    private fun sendOrderConfirmationEmail(email: String, order: Order) {\n        println(\"[CheckoutService] Sending confirmation email to $email via $smtpHost...\")\n        val props = Properties()\n        props[\"mail.smtp.host\"] = smtpHost\n        val session = Session.getInstance(props)\n        val message = MimeMessage(session)\n        message.setFrom(InternetAddress(\"no-reply@app.com\"))\n        message.setRecipients(MimeMessage.RecipientType.TO, InternetAddress.parse(email))\n        message.subject = \"Order Confirmation ${order.id}\"\n        message.setText(\"Thank you for your order! Order ID: ${order.id}, Total: ${order.totalAmount}\")\n\n    }\n}\n",
      "output": "",
      "level": "HARD",
      "language": "KOTLIN",
      "violation": "SRP",
      "explanation": "{\"violation_type\":\"Single Responsibility Principle\",\"refactored_code\":\"class CheckoutService(private val dbUrl: String, private val paymentGatewayUrl: String, private val smtpHost: String) {\\n\\n    private val orderRepository = OrderRepository(dbUrl)\\n    private val paymentProcessor = PaymentProcessor(paymentGatewayUrl)\\n    private val inventoryService = InventoryService(paymentGatewayUrl)\\n    private val emailService = EmailService(smtpHost)\\n\\n    fun processCheckout(cart: ShoppingCart, customerEmail: String): Order? {\\n        println(\\\"[CheckoutService] Starting checkout process...\\\")\\n\\n        if (!validateCart(cart)) {\\n            println(\\\"[CheckoutService] Cart validation failed.\\\")\\n            return null\\n        }\\n        println(\\\"[CheckoutService] Cart validated.\\\")\\n\\n        if (!inventoryService.checkInventory(cart)) {\\n            println(\\\"[CheckoutService] Inventory check failed.\\\")\\n            return null\\n        }\\n        println(\\\"[CheckoutService] Inventory checked.\\\")\\n\\n        val totalAmount = calculateTotal(cart)\\n        println(\\\"[CheckoutService] Total amount calculated: \\$totalAmount\\\")\\n\\n        if (!paymentProcessor.processPayment(customerEmail, totalAmount)) {\\n            println(\\\"[CheckoutService] Payment processing failed.\\\")\\n            return null\\n        }\\n        println(\\\"[CheckoutService] Payment processed.\\\")\\n\\n        val order = orderRepository.saveOrder(cart, totalAmount, customerEmail)\\n        if (order == null) {\\n            println(\\\"[CheckoutService] Failed to save order.\\\")\\n            return null\\n        }\\n        println(\\\"[CheckoutService] Order saved: ${'$'}{order.id}\\\")\\n\\n        inventoryService.updateInventory(cart)\\n        println(\\\"[CheckoutService] Inventory updated.\\\")\\n\\n        emailService.sendOrderConfirmationEmail(customerEmail, order)\\n        println(\\\"[CheckoutService] Order confirmation email sent.\\\")\\n\\n        println(\\\"[CheckoutService] Checkout process completed successfully.\\\")\\n        return order\\n    }\\n\\n    private fun validateCart(cart: ShoppingCart): Boolean {\\n        println(\\\"[CheckoutService] Validating cart...\\\")\\n        return cart.items.isNotEmpty()\\n    }\\n\\n    private fun calculateTotal(cart: ShoppingCart): Double {\\n        println(\\\"[CheckoutService] Calculating total...\\\")\\n        return cart.items.sumByDouble { it.product.price  it.quantity }\\n    }\\n}\\n\\nclass OrderRepository(private val dbUrl: String) {\\n    fun saveOrder(cart: ShoppingCart, totalAmount: Double, customerEmail: String): Order? {\\n        println(\\\"[OrderRepository] Saving order to DB \\$dbUrl...\\\")\\n        var conn: Connection? = null\\n        try {\\n            conn = DriverManager.getConnection(dbUrl)\\n\\n            val orderId = \\\"ORDER_${System.currentTimeMillis()}\\\"\\n\\n            return Order(orderId, cart.items, totalAmount, customerEmail)\\n        } catch (e: Exception) {\\n            println(\\\"[OrderRepository] DB Error: ${'$'}{e.message}\\\")\\n            return null\\n        } finally {\\n            conn?.close()\\n        }\\n    }\\n}\\n\\nclass PaymentProcessor(private val paymentGatewayUrl: String) {\\n    fun processPayment(email: String, amount: Double): Boolean {\\n        println(\\\"[PaymentProcessor] Processing payment for \\$amount via \\$paymentGatewayUrl...\\\")\\n        return true\\n    }\\n}\\n\\nclass InventoryService(private val paymentGatewayUrl: String) {\\n    fun checkInventory(cart: ShoppingCart): Boolean {\\n        println(\\\"[InventoryService] Checking inventory via \\$paymentGatewayUrl...\\\")\\n        return true\\n    }\\n\\n    fun updateInventory(cart: ShoppingCart) {\\n        println(\\\"[InventoryService] Updating inventory via \\$paymentGatewayUrl...\\\")\\n    }\\n}\\n\\nclass EmailService(private val smtpHost: String) {\\n    fun sendOrderConfirmationEmail(email: String, order: Order) {\\n        println(\\\"[EmailService] Sending confirmation email to \\$email via \\$smtpHost...\\\")\\n        val props = Properties()\\n        props[\\\"mail.smtp.host\\\"] = smtpHost\\n        val session = Session.getInstance(props)\\n        val message = MimeMessage(session)\\n        message.setFrom(InternetAddress(\\\"no-reply@app.com\\\"))\\n        message.setRecipients(MimeMessage.RecipientType.TO, InternetAddress.parse(email))\\n        message.subject = \\\"Order Confirmation ${'$'}{order.id}\\\"\\n        message.setText(\\\"Thank you for your order! Order ID: ${'$'}{order.id}, Total: ${'$'}{order.totalAmount}\\\")\\n    }\\n}\",\"explanation\":\"The original CheckoutService class violates the Single Responsibility Principle (SRP) because it handles multiple responsibilities: validating the cart, checking inventory, processing payments, saving orders, updating inventory, and sending confirmation emails. This makes the class difficult to maintain and test. The refactored code separates these responsibilities into distinct classes: OrderRepository, PaymentProcessor, InventoryService, and EmailService, each handling a specific aspect of the checkout process.\"}"
    },
    {
      "input": "public class Invoice {\n    public void CalculateTotal() {\n        \n    }\n    public void SaveToDatabase() {\n        \n    }\n}",
      "output": "public class Invoice {\n    public void CalculateTotal() {\n        // calculate total\n    }\n}\n\npublic class InvoiceRepository {\n    public void SaveToDatabase(Invoice invoice) {\n        // save to db\n    }\n}",
      "level": "EASY",
      "language": "C#",
      "violation": "Single Responsibility Principle",
      "explanation": "The original Invoice class violates the Single Responsibility Principle because it has two responsibilities: calculating the total and saving the invoice to the database. By refactoring, we separate these concerns into two classes: Invoice for handling invoice-related calculations and InvoiceRepository for handling database operations."
    },
    {
      "input": "public class Report {\n    public void GenerateReport() {\n        \n    }\n    public void PrintReport() {\n        \n    }\n}",
      "output": "public class Report {\n    public void GenerateReport() {\n        // generate report\n    }\n}\n\npublic class ReportPrinter {\n    public void PrintReport(Report report) {\n        // print report\n    }\n}",
      "level": "EASY",
      "language": "C#",
      "violation": "Single Responsibility Principle",
      "explanation": "The original class 'Report' violates the Single Responsibility Principle because it has two responsibilities: generating a report and printing a report. By refactoring, we separate the concerns into two classes: 'Report' for generating reports and 'ReportPrinter' for printing reports, thus adhering to the principle."
    },
    {
      "input": "public class User {\n    public void Register() {\n        \n    }\n    public void SendEmail() {\n        \n    }\n}",
      "output": "public class User {\n    public void Register() {\n        // register user\n    }\n}\n\npublic class EmailService {\n    public void SendEmail() {\n        // send email\n    }\n}",
      "level": "EASY",
      "language": "C#",
      "violation": "Single Responsibility Principle",
      "explanation": "The original User class violates the Single Responsibility Principle because it has two responsibilities: registering a user and sending an email. By refactoring the code, we separate the email functionality into its own class (EmailService), ensuring that each class has a single responsibility."
    },
    {
      "input": "public class FileManager {\n    public void ReadFile() {\n        \n    }\n    public void LogError() {\n        \n    }\n}",
      "output": "public class FileReader {\n    public void ReadFile() {\n        // read file\n    }\n}\n\npublic class ErrorLogger {\n    public void LogError() {\n        // log error\n    }\n}",
      "level": "EASY",
      "language": "C#",
      "violation": "Single Responsibility Principle",
      "explanation": "The original FileManager class violates the Single Responsibility Principle because it has two responsibilities: reading files and logging errors. By refactoring it into two separate classes, FileReader and ErrorLogger, each class now has a single responsibility."
    },
    {
      "input": "public class Order {\n    public void PlaceOrder() {\n        \n    }\n    public void SendConfirmationEmail() {\n        \n    }\n    public void UpdateStock() {\n        \n    }\n}",
      "output": "public class Order {\n    public void PlaceOrder() {\n        // place order\n    }\n}\n\npublic class EmailService {\n    public void SendConfirmationEmail() {\n        // send email\n    }\n}\n\npublic class StockService {\n    public void UpdateStock() {\n        // update stock\n    }\n}",
      "level": "MODERATE",
      "language": "C#",
      "violation": "Single Responsibility Principle",
      "explanation": "The original Order class violates the Single Responsibility Principle because it has multiple responsibilities: placing an order, sending a confirmation email, and updating stock. Each of these responsibilities should be handled by separate classes to adhere to the principle."
    },
    {
      "input": "public class Customer {\n    public void AddCustomer() {\n        \n    }\n    public void GenerateCustomerReport() {\n        \n    }\n    public void ArchiveCustomer() {\n        \n    }\n}",
      "output": "public class Customer {\n    public void AddCustomer() {\n        // add customer\n    }\n}\n\npublic class CustomerReport {\n    public void GenerateCustomerReport() {\n        // generate report\n    }\n}\n\npublic class CustomerArchiver {\n    public void ArchiveCustomer() {\n        // archive customer\n    }\n}",
      "level": "MODERATE",
      "language": "C#",
      "violation": "Single Responsibility Principle",
      "explanation": "The original Customer class violates the Single Responsibility Principle because it has multiple responsibilities: adding a customer, generating a report, and archiving a customer. Each of these responsibilities should be handled by separate classes to adhere to the principle."
    },
    {
      "input": "public class Product {\n    public void AddProduct() {\n        \n    }\n    public void CalculateDiscount() {\n        \n    }\n    public void NotifyWarehouse() {\n        \n    }\n}",
      "output": "public class Product {\n    private String name;\n    private double price;\n\n    public void AddProduct() {\n        // add product\n    }\n}\n\npublic class DiscountCalculator {\n    public void CalculateDiscount(Product product) {\n        // calculate discount\n    }\n}\n\npublic class WarehouseNotifier {\n    public void NotifyWarehouse(Product product) {\n        // notify warehouse\n    }\n}",
      "level": "MODERATE",
      "language": "C#",
      "violation": "Single Responsibility Principle",
      "explanation": "The original Product class violates the Single Responsibility Principle because it has multiple responsibilities: adding a product, calculating discounts, and notifying the warehouse. Each of these responsibilities should be handled by separate classes to adhere to the principle."
    },
    {
      "input": "public class Employee {\n    public void CalculateSalary() {\n        \n    }\n    public void SaveEmployeeData() {\n        \n    }\n    public void SendPayrollEmail() {\n        \n    }\n}",
      "output": "public class Employee {\n    private SalaryCalculator salaryCalculator;\n    private EmployeeDataSaver employeeDataSaver;\n    private PayrollEmailSender payrollEmailSender;\n\n    public Employee(SalaryCalculator salaryCalculator, EmployeeDataSaver employeeDataSaver, PayrollEmailSender payrollEmailSender) {\n        this.salaryCalculator = salaryCalculator;\n        this.employeeDataSaver = employeeDataSaver;\n        this.payrollEmailSender = payrollEmailSender;\n    }\n\n    public void CalculateSalary() {\n        salaryCalculator.calculate();\n    }\n\n    public void SaveEmployeeData() {\n        employeeDataSaver.save();\n    }\n\n    public void SendPayrollEmail() {\n        payrollEmailSender.send();\n    }\n} \n\npublic class SalaryCalculator {\n    public void calculate() {\n        // calculate salary\n    }\n}\n\npublic class EmployeeDataSaver {\n    public void save() {\n        // save data\n    }\n}\n\npublic class PayrollEmailSender {\n    public void send() {\n        // send email\n    }\n}",
      "level": "MODERATE",
      "language": "C#",
      "violation": "Single Responsibility Principle",
      "explanation": "The original Employee class violates the Single Responsibility Principle because it has multiple responsibilities: calculating salary, saving employee data, and sending payroll emails. By refactoring the code, we separate these responsibilities into different classes (SalaryCalculator, EmployeeDataSaver, and PayrollEmailSender), allowing the Employee class to focus solely on its core responsibilities."
    },
    {
      "input": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading;\n\npublic class TaskProcessingEngine\n{\n    private readonly ITaskQueue _taskQueue;\n    private readonly IDictionary<string, Action<string>> _taskHandlers;\n\n    public TaskProcessingEngine(ITaskQueue taskQueue)\n    {\n        _taskQueue = taskQueue;\n        _taskHandlers = new Dictionary<string, Action<string>>\n        {\n            { \"ProcessOrder\", HandleProcessOrderTask },\n            { \"SendEmail\", HandleSendEmailTask }\n\n        };\n    }\n\n    public void StartProcessing(CancellationToken cancellationToken)\n    {\n        Console.WriteLine(\"[TaskProcessingEngine] Starting processing engine...\");\n\n        while (!cancellationToken.IsCancellationRequested)\n        {\n            try\n            {\n                var task = _taskQueue.Dequeue();\n                if (task == null)\n                {\n                    Console.WriteLine(\"[TaskProcessingEngine] No tasks in queue. Waiting...\");\n                    Thread.Sleep(1000);\n                    continue;\n                }\n\n                Console.WriteLine($\"[TaskProcessingEngine] Dequeued task type: {task.Type}, Payload: {task.Payload}\");\n\n                if (_taskHandlers.TryGetValue(task.Type, out var handler))\n                {\n                    try\n                    {\n                        Console.WriteLine($\"[TaskProcessingEngine] Executing handler for task type: {task.Type}\");\n                        handler.Invoke(task.Payload);\n                        Console.WriteLine($\"[TaskProcessingEngine] Task {task.Type} executed successfully.\");\n                        LogProcessedTask(task.Id, task.Type, true, \"Success\");\n                    }\n                    catch (Exception ex)\n                    {\n                        Console.WriteLine($\"[TaskProcessingEngine] Error executing task {task.Type}: {ex.Message}\");\n                        LogProcessedTask(task.Id, task.Type, false, $\"Execution Error: {ex.Message}\");\n                        \n                    }\n                }\n                else\n                {\n                    Console.WriteLine($\"[TaskProcessingEngine] No handler found for task type: {task.Type}\");\n                    LogProcessedTask(task.Id, task.Type, false, \"No Handler Found\");\n                }\n            }\n            catch (Exception ex)\n            {\\n                Console.WriteLine($\"[TaskProcessingEngine] Error dequeuing task: {ex.Message}\");\n                Thread.Sleep(5000);\n            }\n        }\n\n        Console.WriteLine(\"[TaskProcessingEngine] Processing engine stopped.\");\n    }\n\n    private void HandleProcessOrderTask(string payload)\n    {\n        Console.WriteLine($\"[HandleProcessOrderTask] Processing order with payload: {payload}\");\n\n    }\n\n    private void HandleSendEmailTask(string payload)\n    {\n         Console.WriteLine($\"[HandleSendEmailTask] Sending email with payload: {payload}\");\n\n    }\n\n    private void LogProcessedTask(Guid taskId, string taskType, bool success, string resultDetails)\n    {\n        Console.WriteLine($\"[LogProcessedTask] LOG: TaskId={taskId}, Type={taskType}, Success={success}, Details='{resultDetails}'\");\n\n    }\n}\n\npublic interface ITaskQueue\n{\n    QueuedTask Dequeue();\n    void Enqueue(QueuedTask task);\n}\n\npublic class InMemoryTaskQueue : ITaskQueue\n{\n    private readonly Queue<QueuedTask> _tasks = new Queue<QueuedTask>();\n\n    public void Enqueue(QueuedTask task)\n    {\n        lock (_tasks)\n        {\n            _tasks.Enqueue(task);\n            Console.WriteLine($\"[InMemoryTaskQueue] Enqueued task {task.Type}.\");\n        }\n    }\n\n    public QueuedTask Dequeue()\n    {\n        lock (_tasks)\n        {\n            if (_tasks.Any())\n            {\n                return _tasks.Dequeue();\n            }\n            return null;\n        }\n    }\n}\n\npublic class QueuedTask\n{\n    public Guid Id { get; set; }\n    public string Type { get; set; }\n    public string Payload { get; set; }\n}\n",
      "output": "",
      "level": "HARD",
      "language": "C#",
      "violation": "SRP",
      "explanation": "{\"violation_type\":\"Single Responsibility Principle\",\"refactored_code\":\"using System;\\nusing System.Collections.Generic;\\nusing System.Linq;\\nusing System.Threading;\\n\\npublic class TaskProcessingEngine\\n{\\n    private readonly ITaskQueue _taskQueue;\\n    private readonly IDictionary<string, ITaskHandler> _taskHandlers;\\n\\n    public TaskProcessingEngine(ITaskQueue taskQueue, IEnumerable<ITaskHandler> taskHandlers)\\n    {\\n        _taskQueue = taskQueue;\\n        _taskHandlers = taskHandlers.ToDictionary(handler => handler.TaskType);\\n    }\\n\\n    public void StartProcessing(CancellationToken cancellationToken)\\n    {\\n        Console.WriteLine(\\\"[TaskProcessingEngine] Starting processing engine...\\\");\\n\\n        while (!cancellationToken.IsCancellationRequested)\\n        {\\n            try\\n            {\\n                var task = _taskQueue.Dequeue();\\n                if (task == null)\\n                {\\n                    Console.WriteLine(\\\"[TaskProcessingEngine] No tasks in queue. Waiting...\\\");\\n                    Thread.Sleep(1000);\\n                    continue;\\n                }\\n\\n                Console.WriteLine($\"[TaskProcessingEngine] Dequeued task type: {task.Type}, Payload: {task.Payload}\");\\n\\n                if (_taskHandlers.TryGetValue(task.Type, out var handler))\\n                {\\n                    try\\n                    {\\n                        Console.WriteLine($\"[TaskProcessingEngine] Executing handler for task type: {task.Type}\");\\n                        handler.Execute(task.Payload);\\n                        Console.WriteLine($\"[TaskProcessingEngine] Task {task.Type} executed successfully.\");\\n                        LogProcessedTask(task.Id, task.Type, true, \\\"Success\\\");\\n                    }\\n                    catch (Exception ex)\\n                    {\\n                        Console.WriteLine($\"[TaskProcessingEngine] Error executing task {task.Type}: {ex.Message}\");\\n                        LogProcessedTask(task.Id, task.Type, false, $\\\"Execution Error: {ex.Message}\\\");\\n                    }\\n                }\\n                else\\n                {\\n                    Console.WriteLine($\"[TaskProcessingEngine] No handler found for task type: {task.Type}\");\\n                    LogProcessedTask(task.Id, task.Type, false, \\\"No Handler Found\\\");\\n                }\\n            }\\n            catch (Exception ex)\\n            {\\n                Console.WriteLine($\"[TaskProcessingEngine] Error dequeuing task: {ex.Message}\");\\n                Thread.Sleep(5000);\\n            }\\n        }\\n\\n        Console.WriteLine(\\\"[TaskProcessingEngine] Processing engine stopped.\\\");\\n    }\\n\\n    private void LogProcessedTask(Guid taskId, string taskType, bool success, string resultDetails)\\n    {\\n        Console.WriteLine($\"[LogProcessedTask] LOG: TaskId={taskId}, Type={taskType}, Success={success}, Details='{resultDetails}');\\n    }\\n}\\n\\npublic interface ITaskHandler\\n{\\n    string TaskType { get; }\\n    void Execute(string payload);\\n}\\n\\npublic class ProcessOrderTaskHandler : ITaskHandler\\n{\\n    public string TaskType => \\\"ProcessOrder\\\";\\n\\n    public void Execute(string payload)\\n    {\\n        Console.WriteLine($\"[ProcessOrderTaskHandler] Processing order with payload: {payload}\");\\n    }\\n}\\n\\npublic class SendEmailTaskHandler : ITaskHandler\\n{\\n    public string TaskType => \\\"SendEmail\\\";\\n\\n    public void Execute(string payload)\\n    {\\n        Console.WriteLine($\"[SendEmailTaskHandler] Sending email with payload: {payload}\");\\n    }\\n}\\n\\npublic interface ITaskQueue\\n{\\n    QueuedTask Dequeue();\\n    void Enqueue(QueuedTask task);\\n}\\n\\npublic class InMemoryTaskQueue : ITaskQueue\\n{\\n    private readonly Queue<QueuedTask> _tasks = new Queue<QueuedTask>();\\n\\n    public void Enqueue(QueuedTask task)\\n    {\\n        lock (_tasks)\\n        {\\n            _tasks.Enqueue(task);\\n            Console.WriteLine($\"[InMemoryTaskQueue] Enqueued task {task.Type}.\");\\n        }\\n    }\\n\\n    public QueuedTask Dequeue()\\n    {\\n        lock (_tasks)\\n        {\\n            if (_tasks.Any())\\n            {\\n                return _tasks.Dequeue();\\n            }\\n            return null;\\n        }\\n    }\\n}\\n\\npublic class QueuedTask\\n{\\n    public Guid Id { get; set; }\\n    public string Type { get; set; }\\n    public string Payload { get; set; }\\n}\",\"explanation\":\"The original code violates the Single Responsibility Principle (SRP) because the `TaskProcessingEngine` class is responsible for multiple tasks: managing the task queue, handling task execution, and logging task results. By introducing an interface `ITaskHandler` and separate handler classes for each task type, we can delegate the responsibility of handling specific tasks to dedicated classes. This refactoring allows `TaskProcessingEngine` to focus solely on processing tasks, while each handler class takes care of its specific task logic.\"}"
    },
    {
      "input": "using System;\nusing System.Collections.Generic;\nusing System.Data;\nusing System.Data.SqlClient;\nusing System.IO;\n\npublic class BusinessReportProcessor\n{\n    private readonly string _dbConnectionString;\n    private readonly string _fileStoragePath;\n    private readonly string _uploadServiceEndpoint;\n\n    public BusinessReportProcessor(string dbConnectionString, string fileStoragePath, string uploadServiceEndpoint)\n    {\n        _dbConnectionString = dbConnectionString;\n        _fileStoragePath = fileStoragePath;\n        _uploadServiceEndpoint = uploadServiceEndpoint;\n    }\n\n    public bool GenerateAndUploadSalesSummary(DateTime startDate, DateTime endDate)\n    {\n        Console.WriteLine($\"[BusinessReportProcessor] Starting sales summary generation for {startDate:d} to {endDate:d}\");\n\n        var rawData = FetchSalesData(startDate, endDate);\n        if (rawData == null || rawData.Rows.Count == 0)\n        {\n            Console.WriteLine(\"[BusinessReportProcessor] No data found for the report.\");\n            return false;\n        }\n        Console.WriteLine($\"[BusinessReportProcessor] Fetched {rawData.Rows.Count} rows of data.\");\n\n        var transformedData = TransformDataForReport(rawData);\n        Console.WriteLine(\"[BusinessReportProcessor] Data transformed.\");\n\n        string reportFilePath = GenerateReportFile(transformedData, startDate, endDate);\n        if (string.IsNullOrEmpty(reportFilePath) || !File.Exists(reportFilePath))\n        {\n            Console.WriteLine(\"[BusinessReportProcessor] Report file generation failed.\");\n            return false;\n        }\n        Console.WriteLine($\"[BusinessReportProcessor] Report file generated at {reportFilePath}\");\n\n        if (!UploadReport(reportFilePath))\n        {\n            Console.WriteLine($\"[BusinessReportProcessor] Failed to upload report file {reportFilePath}.\");\n            \n            return false;\n        }\n        Console.WriteLine($\"[BusinessReportProcessor] Report file {reportFilePath} uploaded successfully.\");\n\n        Console.WriteLine(\"[BusinessReportProcessor] Sales summary generation and upload complete.\");\n        return true;\n    }\n\n    private DataTable FetchSalesData(DateTime startDate, DateTime endDate)\n    {\n        Console.WriteLine($\"[FetchSalesData] Fetching sales data from DB {_dbConnectionString}...\");\n        using (var conn = new SqlConnection(_dbConnectionString))\n        {\n\n        }\n        var dt = new DataTable();\n        dt.Columns.Add(\"SaleDate\", typeof(DateTime));\n        dt.Columns.Add(\"Amount\", typeof(decimal));\n        dt.Rows.Add(DateTime.Now.AddDays(-1), 100.0m);\n        dt.Rows.Add(DateTime.Now.AddDays(-2), 150.0m);\n        return dt;\n    }\n\n    private DataTable TransformDataForReport(DataTable rawData)\n    {\n        Console.WriteLine(\"[TransformDataForReport] Transforming data...\");\n        var transformed = new DataTable();\n        transformed.Columns.Add(\"Period\", typeof(string));\n        transformed.Columns.Add(\"TotalSales\", typeof(decimal));\n        decimal total = 0;\n        foreach(DataRow row in rawData.Rows)\n        {\n            total += (decimal)row[\"Amount\"];\n        }\n        transformed.Rows.Add($\"{DateTime.Now:yyyy-MM}\", total);\n        return transformed;\n    }\n\n    private string GenerateReportFile(DataTable data, DateTime startDate, DateTime endDate)\n    {\n        Console.WriteLine($\"[GenerateReportFile] Generating report file in {_fileStoragePath}...\");\n        string filename = $\"SalesSummary_{startDate:yyyyMMdd}_{endDate:yyyyMMdd}.csv\";\n        string fullPath = Path.Combine(_fileStoragePath, filename);\n        try\n        {\n             var lines = new List<string>();\n             lines.Add(string.Join(\",\", data.Columns.Cast<DataColumn>().Select(c => c.ColumnName)));\n             foreach(DataRow row in data.Rows)\n             {\n                 lines.Add(string.Join(\",\", row.ItemArray.Select(item => item.ToString())));\n             }\n             File.WriteAllLines(fullPath, lines);\n             return fullPath;\n        }\n        catch (Exception ex)\n        {\n             Console.WriteLine($\"[GenerateReportFile] Error: {ex.Message}\");\n             return null;\n        }\n    }\n\n    private bool UploadReport(string reportFilePath)\n    {\n        Console.WriteLine($\"[UploadReport] Uploading report {reportFilePath} to service at {_uploadServiceEndpoint}...\");\n\n        return true;\n    }\n}\n",
      "output": "using System;\nusing System.Collections.Generic;\nusing System.Data;\nusing System.Data.SqlClient;\nusing System.IO;\n\npublic class BusinessReportProcessor\n{\n    private readonly IDataFetcher _dataFetcher;\n    private readonly IDataTransformer _dataTransformer;\n    private readonly IReportGenerator _reportGenerator;\n    private readonly IReportUploader _reportUploader;\n\n    public BusinessReportProcessor(IDataFetcher dataFetcher, IDataTransformer dataTransformer, IReportGenerator reportGenerator, IReportUploader reportUploader)\n    {\n        _dataFetcher = dataFetcher;\n        _dataTransformer = dataTransformer;\n        _reportGenerator = reportGenerator;\n        _reportUploader = reportUploader;\n    }\n\n    public bool GenerateAndUploadSalesSummary(DateTime startDate, DateTime endDate)\n    {\n        Console.WriteLine($\"[BusinessReportProcessor] Starting sales summary generation for {startDate:d} to {endDate:d}\");\n\n        var rawData = _dataFetcher.FetchSalesData(startDate, endDate);\n        if (rawData == null || rawData.Rows.Count == 0)\n        {\n            Console.WriteLine(\"[BusinessReportProcessor] No data found for the report.\");\n            return false;\n        }\n        Console.WriteLine($\"[BusinessReportProcessor] Fetched {rawData.Rows.Count} rows of data.\");\n\n        var transformedData = _dataTransformer.TransformDataForReport(rawData);\n        Console.WriteLine(\"[BusinessReportProcessor] Data transformed.\");\n\n        string reportFilePath = _reportGenerator.GenerateReportFile(transformedData, startDate, endDate);\n        if (string.IsNullOrEmpty(reportFilePath) || !File.Exists(reportFilePath))\n        {\n            Console.WriteLine(\"[BusinessReportProcessor] Report file generation failed.\");\n            return false;\n        }\n        Console.WriteLine($\"[BusinessReportProcessor] Report file generated at {reportFilePath}\");\n\n        if (!_reportUploader.UploadReport(reportFilePath))\n        {\n            Console.WriteLine($\"[BusinessReportProcessor] Failed to upload report file {reportFilePath}.\");\n            return false;\n        }\n        Console.WriteLine($\"[BusinessReportProcessor] Report file {reportFilePath} uploaded successfully.\");\n\n        Console.WriteLine(\"[BusinessReportProcessor] Sales summary generation and upload complete.\");\n        return true;\n    }\n}\n\npublic interface IDataFetcher\n{\n    DataTable FetchSalesData(DateTime startDate, DateTime endDate);\n}\n\npublic class DataFetcher : IDataFetcher\n{\n    private readonly string _dbConnectionString;\n\n    public DataFetcher(string dbConnectionString)\n    {\n        _dbConnectionString = dbConnectionString;\n    }\n\n    public DataTable FetchSalesData(DateTime startDate, DateTime endDate)\n    {\n        Console.WriteLine($\"[FetchSalesData] Fetching sales data from DB {_dbConnectionString}...\");\n        // Database fetching logic here\n        var dt = new DataTable();\n        dt.Columns.Add(\"SaleDate\", typeof(DateTime));\n        dt.Columns.Add(\"Amount\", typeof(decimal));\n        dt.Rows.Add(DateTime.Now.AddDays(-1), 100.0m);\n        dt.Rows.Add(DateTime.Now.AddDays(-2), 150.0m);\n        return dt;\n    }\n}\n\npublic interface IDataTransformer\n{\n    DataTable TransformDataForReport(DataTable rawData);\n}\n\npublic class DataTransformer : IDataTransformer\n{\n    public DataTable TransformDataForReport(DataTable rawData)\n    {\n        Console.WriteLine(\"[TransformDataForReport] Transforming data...\");\n        var transformed = new DataTable();\n        transformed.Columns.Add(\"Period\", typeof(string));\n        transformed.Columns.Add(\"TotalSales\", typeof(decimal));\n        decimal total = 0;\n        foreach(DataRow row in rawData.Rows)\n        {\n            total += (decimal)row[\"Amount\"];\n        }\n        transformed.Rows.Add($\"{DateTime.Now:yyyy-MM}\", total);\n        return transformed;\n    }\n}\n\npublic interface IReportGenerator\n{\n    string GenerateReportFile(DataTable data, DateTime startDate, DateTime endDate);\n}\n\npublic class ReportGenerator : IReportGenerator\n{\n    private readonly string _fileStoragePath;\n\n    public ReportGenerator(string fileStoragePath)\n    {\n        _fileStoragePath = fileStoragePath;\n    }\n\n    public string GenerateReportFile(DataTable data, DateTime startDate, DateTime endDate)\n    {\n        Console.WriteLine($\"[GenerateReportFile] Generating report file in {_fileStoragePath}...\");\n        string filename = $\"SalesSummary_{startDate:yyyyMMdd}_{endDate:yyyyMMdd}.csv\";\n        string fullPath = Path.Combine(_fileStoragePath, filename);\n        try\n        {\n            var lines = new List<string>();\n            lines.Add(string.Join(\",\", data.Columns.Cast<DataColumn>().Select(c => c.ColumnName)));\n            foreach(DataRow row in data.Rows)\n            {\n                lines.Add(string.Join(\",\", row.ItemArray.Select(item => item.ToString())));\n            }\n            File.WriteAllLines(fullPath, lines);\n            return fullPath;\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine($\"[GenerateReportFile] Error: {ex.Message}\");\n            return null;\n        }\n    }\n}\n\npublic interface IReportUploader\n{\n    bool UploadReport(string reportFilePath);\n}\n\npublic class ReportUploader : IReportUploader\n{\n    private readonly string _uploadServiceEndpoint;\n\n    public ReportUploader(string uploadServiceEndpoint)\n    {\n        _uploadServiceEndpoint = uploadServiceEndpoint;\n    }\n\n    public bool UploadReport(string reportFilePath)\n    {\n        Console.WriteLine($\"[UploadReport] Uploading report {reportFilePath} to service at {_uploadServiceEndpoint}...\");\n        return true;\n    }\n}",
      "level": "HARD",
      "language": "C#",
      "violation": "Single Responsibility Principle",
      "explanation": "The original class `BusinessReportProcessor` violates the Single Responsibility Principle (SRP) because it handles multiple responsibilities: fetching data, transforming data, generating reports, and uploading reports. This makes the class difficult to maintain and test. The refactored code separates these responsibilities into different classes and interfaces: `IDataFetcher`, `IDataTransformer`, `IReportGenerator`, and `IReportUploader`. Each class now has a single responsibility, making the code more modular and easier to manage."
    },
    {
      "input": "using System;\nusing System.Data.SqlClient;\nusing System.Security.Cryptography;\nusing System.Text;\n\npublic class AccountManager\n{\n    private readonly string _dbConnectionString;\n\n    public AccountManager(string dbConnectionString)\n    {\n        _dbConnectionString = dbConnectionString;\n    }\n\n    public bool CreateUserAccount(string username, string password, string role, string permissionsJson)\n    {\n        Console.WriteLine($\"[AccountManager] Attempting to create account for {username}\");\n\n        if (UserExists(username))\n        {\n            Console.WriteLine(\"[AccountManager] User {username} already exists.\");\n            LogAudit(\"CreateAccount\", username, \"User Exists\", false);\n            return false;\n        }\n        Console.WriteLine(\"[AccountManager] User does not exist.\");\n\n        string passwordHash = HashPassword(password);\n        Console.WriteLine(\"[AccountManager] Password hashed.\");\n\n        if (!SaveUserToDatabase(username, passwordHash, role, permissionsJson))\n        {\n            Console.WriteLine(\"[AccountManager] Failed to save user {username} to database.\");\n            LogAudit(\"CreateAccount\", username, \"DB Save Failed\", false);\n            return false;\n        }\n        Console.WriteLine(\"[AccountManager] User {username} saved to database.\");\n\n        LogAudit(\"CreateAccount\", username, \"Success\", true);\n        Console.WriteLine($\"[AccountManager] Account created for {username} with role {role}.\");\n        return true;\n    }\n\n    public bool AssignRoleToUser(string username, string newRole)\n    {\n        Console.WriteLine($\"[AccountManager] Attempting to assign role {newRole} to {username}\");\n\n        if (!UserExists(username))\n        {\n            Console.WriteLine(\"[AccountManager] User {username} not found for role assignment.\");\n            LogAudit(\"AssignRole\", username, \"User Not Found\", false);\n            return false;\n        }\n        Console.WriteLine(\"[AccountManager] User found.\");\n\n        if (!UpdateUserRoleInDatabase(username, newRole))\n        {\n            Console.WriteLine(\"[AccountManager] Failed to update role for {username} in database.\");\n            LogAudit(\"AssignRole\", username, \"DB Update Failed\", false);\n            return false;\n        }\n        Console.WriteLine(\"[AccountManager] Role updated for {username} to {newRole}.\");\n\n        LogAudit(\"AssignRole\", username, $\"Role changed to {newRole}\", true);\n        Console.WriteLine($\"[AccountManager] Role {newRole} assigned to {username}.\");\n        return true;\n    }\n\n    private bool UserExists(string username)\n    {\n        Console.WriteLine($\"[UserExists] Checking existence of {username} in DB {_dbConnectionString}...\");\n        using (var conn = new SqlConnection(_dbConnectionString))\n        {\n\n        }\n        return username == \"existingUser\";\n    }\n\n    private string HashPassword(string password)\n    {\n         Console.WriteLine(\"[HashPassword] Hashing password...\");\n         using (var sha256 = SHA256.Create())\n         {\n             var bytes = sha256.ComputeHash(Encoding.UTF8.GetBytes(password));\n             return Convert.ToBase64String(bytes);\n         }\n    }\n\n    private bool SaveUserToDatabase(string username, string passwordHash, string role, string permissionsJson)\n    {\n        Console.WriteLine($\"[SaveUserToDatabase] Saving user {username} to DB {_dbConnectionString}...\");\n        using (var conn = new SqlConnection(_dbConnectionString))\n        {\n\n        }\n        return true;\n    }\n\n     private bool UpdateUserRoleInDatabase(string username, string role)\n    {\n        Console.WriteLine($\"[UpdateUserRoleInDatabase] Updating role for {username} in DB {_dbConnectionString}...\");\n        using (var conn = new SqlConnection(_dbConnectionString))\n        {\n\n        }\n        return true;\n    }\n\n    private void LogAudit(string action, string user, string details, bool success)\n    {\n        Console.WriteLine($\"[LogAudit] AUDIT: Action='{action}', User='{user}', Details='{details}', Success={success}\");\n\n    }\n}\n",
      "output": "",
      "level": "HARD",
      "language": "C#",
      "violation": "SRP",
      "explanation": "{\"violation_type\":\"Single Responsibility Principle\",\"refactored_code\":\"using System;\\nusing System.Data.SqlClient;\\nusing System.Security.Cryptography;\\nusing System.Text;\\n\\npublic class AccountManager\\n{\\n    private readonly string _dbConnectionString;\\n    private readonly UserRepository _userRepository;\\n    private readonly PasswordHasher _passwordHasher;\\n    private readonly AuditLogger _auditLogger;\\n\\n    public AccountManager(string dbConnectionString)\\n    {\\n        _dbConnectionString = dbConnectionString;\\n        _userRepository = new UserRepository(_dbConnectionString);\\n        _passwordHasher = new PasswordHasher();\\n        _auditLogger = new AuditLogger();\\n    }\\n\\n    public bool CreateUserAccount(string username, string password, string role, string permissionsJson)\\n    {\\n        Console.WriteLine($\"[AccountManager] Attempting to create account for {username}\");\\n\\n        if (_userRepository.UserExists(username))\\n        {\\n            Console.WriteLine($\"[AccountManager] User {username} already exists.\");\\n            _auditLogger.Log(\\\"CreateAccount\\\", username, \\\"User Exists\\\", false);\\n            return false;\\n        }\\n        Console.WriteLine(\\\"[AccountManager] User does not exist.\\\");\\n\\n        string passwordHash = _passwordHasher.Hash(password);\\n        Console.WriteLine(\\\"[AccountManager] Password hashed.\\\");\\n\\n        if (!_userRepository.SaveUser(username, passwordHash, role, permissionsJson))\\n        {\\n            Console.WriteLine($\"[AccountManager] Failed to save user {username} to database.\");\\n            _auditLogger.Log(\\\"CreateAccount\\\", username, \\\"DB Save Failed\\\", false);\\n            return false;\\n        }\\n        Console.WriteLine($\"[AccountManager] User {username} saved to database.\\\");\\n\\n        _auditLogger.Log(\\\"CreateAccount\\\", username, \\\"Success\\\", true);\\n        Console.WriteLine($\"[AccountManager] Account created for {username} with role {role}.\");\\n        return true;\\n    }\\n\\n    public bool AssignRoleToUser(string username, string newRole)\\n    {\\n        Console.WriteLine($\"[AccountManager] Attempting to assign role {newRole} to {username}\");\\n\\n        if (!_userRepository.UserExists(username))\\n        {\\n            Console.WriteLine($\"[AccountManager] User {username} not found for role assignment.\");\\n            _auditLogger.Log(\\\"AssignRole\\\", username, \\\"User Not Found\\\", false);\\n            return false;\\n        }\\n        Console.WriteLine(\\\"[AccountManager] User found.\\\");\\n\\n        if (!_userRepository.UpdateUserRole(username, newRole))\\n        {\\n            Console.WriteLine($\"[AccountManager] Failed to update role for {username} in database.\");\\n            _auditLogger.Log(\\\"AssignRole\\\", username, \\\"DB Update Failed\\\", false);\\n            return false;\\n        }\\n        Console.WriteLine($\"[AccountManager] Role updated for {username} to {newRole}.\");\\n\\n        _auditLogger.Log(\\\"AssignRole\\\", username, $\"Role changed to {newRole}\\\", true);\\n        Console.WriteLine($\"[AccountManager] Role {newRole} assigned to {username}.\");\\n        return true;\\n    }\\n}\\n\\npublic class UserRepository\\n{\\n    private readonly string _dbConnectionString;\\n\\n    public UserRepository(string dbConnectionString)\\n    {\\n        _dbConnectionString = dbConnectionString;\\n    }\\n\\n    public bool UserExists(string username)\\n    {\\n        Console.WriteLine($\"[UserExists] Checking existence of {username} in DB {_dbConnectionString}...\");\\n        using (var conn = new SqlConnection(_dbConnectionString))\\n        {\\n            // Database check logic here\\n        }\\n        return username == \\\"existingUser\\\";\\n    }\\n\\n    public bool SaveUser(string username, string passwordHash, string role, string permissionsJson)\\n    {\\n        Console.WriteLine($\"[SaveUserToDatabase] Saving user {username} to DB {_dbConnectionString}...\");\\n        using (var conn = new SqlConnection(_dbConnectionString))\\n        {\\n            // Database save logic here\\n        }\\n        return true;\\n    }\\n\\n    public bool UpdateUserRole(string username, string role)\\n    {\\n        Console.WriteLine($\"[UpdateUserRoleInDatabase] Updating role for {username} in DB {_dbConnectionString}...\");\\n        using (var conn = new SqlConnection(_dbConnectionString))\\n        {\\n            // Database update logic here\\n        }\\n        return true;\\n    }\\n}\\n\\npublic class PasswordHasher\\n{\\n    public string Hash(string password)\\n    {\\n        Console.WriteLine(\\\"[HashPassword] Hashing password...\\\");\\n        using (var sha256 = SHA256.Create())\\n        {\\n            var bytes = sha256.ComputeHash(Encoding.UTF8.GetBytes(password));\\n            return Convert.ToBase64String(bytes);\\n        }\\n    }\\n}\\n\\npublic class AuditLogger\\n{\\n    public void Log(string action, string user, string details, bool success)\\n    {\\n        Console.WriteLine($\"[LogAudit] AUDIT: Action='{action}', User='{user}', Details='{details}', Success={success}\\\");\\n    }\\n}\",\"explanation\":\"The original AccountManager class violates the Single Responsibility Principle (SRP) because it handles multiple responsibilities: user account management, password hashing, database operations, and logging. This refactored code separates these concerns into distinct classes: UserRepository for database operations, PasswordHasher for password hashing, and AuditLogger for logging. This way, each class has a single responsibility, making the code easier to maintain and test.\"}"
    },
    {
      "input": "using System;\nusing System.Collections.Generic;\nusing System.Data.SqlClient;\nusing System.IO;\n\npublic class OrderFulfillmentService\n{\n    private readonly string _dbConnectionString;\n    private readonly string _shippingApiEndpoint;\n    private readonly string _warehouseInventoryEndpoint;\n\n    public OrderFulfillmentService(string dbConnectionString, string shippingApiEndpoint, string warehouseInventoryEndpoint)\n    {\n        _dbConnectionString = dbConnectionString;\n        _shippingApiEndpoint = shippingApiEndpoint;\n        _warehouseInventoryEndpoint = warehouseInventoryEndpoint;\n    }\n\n    public bool FulfillOrder(int orderId)\n    {\n        Console.WriteLine($\"[OrderFulfillmentService] Starting fulfillment for Order ID: {orderId}\");\n\n        var order = GetOrderDetails(orderId);\n        if (order == null)\n        {\n            Console.WriteLine(\"[OrderFulfillmentService] Order not found.\");\n            return false;\n        }\n        Console.WriteLine(\"[OrderFulfillmentService] Order details fetched.\");\n\n        if (!ReserveInventory(order))\n        {\n            Console.WriteLine(\"[OrderFulfillmentService] Inventory reservation failed.\");\n            return false;\n        }\n        Console.WriteLine(\"[OrderFulfillmentService] Inventory reserved.\");\n\n        var shippingLabel = GenerateShippingLabel(order);\n        if (string.IsNullOrEmpty(shippingLabel))\n        {\n             Console.WriteLine(\"[OrderFulfillmentService] Shipping label generation failed.\");\n             ReleaseInventory(order); \n             return false;\n        }\n        Console.WriteLine(\"[OrderFulfillmentService] Shipping label generated.\");\n\n        if (!UpdateOrderStatus(orderId, \"SHIPPED\"))\n        {\n            Console.WriteLine(\"[OrderFulfillmentService] Failed to update order status.\");\n            ReleaseInventory(order);\n            \n            return false;\n        }\n        Console.WriteLine(\"[OrderFulfillmentService] Order status updated to SHIPPED.\");\n\n        SendShippingNotification(order.CustomerEmail, shippingLabel);\n        Console.WriteLine(\"[OrderFulfillmentService] Shipping notification sent.\");\n\n        Console.WriteLine($\"[OrderFulfillmentService] Order ID: {orderId} fulfilled successfully.\");\n        return true;\n    }\n\n    private Order GetOrderDetails(int orderId)\n    {\n        Console.WriteLine($\"[GetOrderDetails] Fetching details for order {orderId} from DB {_dbConnectionString}...\");\n        using (var conn = new SqlConnection(_dbConnectionString))\n        {\n\n        }\n        return new Order { Id = orderId, CustomerEmail = \"customer@example.com\" };\n    }\n\n    private bool ReserveInventory(Order order)\n    {\n        Console.WriteLine($\"[ReserveInventory] Reserving inventory for order {order.Id} via warehouse service at {_warehouseInventoryEndpoint}...\");\n\n        return true;\n    }\n\n     private bool ReleaseInventory(Order order)\n    {\n        Console.WriteLine($\"[ReleaseInventory] Releasing inventory for order {order.Id} via warehouse service at {_warehouseInventoryEndpoint}...\");\n\n        return true;\n    }\n\n    private string GenerateShippingLabel(Order order)\n    {\n        Console.WriteLine($\"[GenerateShippingLabel] Generating label for order {order.Id} via shipping API at {_shippingApiEndpoint}...\");\n\n        return $\"ShippingLabel_{order.Id}.pdf\";\n    }\n\n    private bool UpdateOrderStatus(int orderId, string status)\n    {\n        Console.WriteLine($\"[UpdateOrderStatus] Updating status for order {orderId} to {status} in DB {_dbConnectionString}...\");\n        using (var conn = new SqlConnection(_dbConnectionString))\n        {\n\n        }\n        return true;\n    }\n\n    private void SendShippingNotification(string customerEmail, string shippingLabelPath)\n    {\n        Console.WriteLine($\"[SendShippingNotification] Sending notification to {customerEmail} with label {shippingLabelPath}...\");\n\n    }\n\n    public class Order\n    {\n        public int Id { get; set; }\n        public string CustomerEmail { get; set; }\n\n    }\n}\n",
      "output": "",
      "level": "HARD",
      "language": "C#",
      "violation": "SRP",
      "explanation": "{\"violation_type\":\"Single Responsibility Principle\",\"refactored_code\":\"using System;\\nusing System.Data.SqlClient;\\n\\npublic class OrderFulfillmentService\\n{\\n    private readonly IOrderRepository _orderRepository;\\n    private readonly IInventoryService _inventoryService;\\n    private readonly IShippingService _shippingService;\\n    private readonly INotificationService _notificationService;\\n\\n    public OrderFulfillmentService(IOrderRepository orderRepository, IInventoryService inventoryService, IShippingService shippingService, INotificationService notificationService)\\n    {\\n        _orderRepository = orderRepository;\\n        _inventoryService = inventoryService;\\n        _shippingService = shippingService;\\n        _notificationService = notificationService;\\n    }\\n\\n    public bool FulfillOrder(int orderId)\\n    {\\n        Console.WriteLine($\"[OrderFulfillmentService] Starting fulfillment for Order ID: {orderId}\");\\n\\n        var order = _orderRepository.GetOrderDetails(orderId);\\n        if (order == null)\\n        {\\n            Console.WriteLine(\\\"[OrderFulfillmentService] Order not found.\\\");\\n            return false;\\n        }\\n        Console.WriteLine(\\\"[OrderFulfillmentService] Order details fetched.\\\");\\n\\n        if (!_inventoryService.ReserveInventory(order))\\n        {\\n            Console.WriteLine(\\\"[OrderFulfillmentService] Inventory reservation failed.\\\");\\n            return false;\\n        }\\n        Console.WriteLine(\\\"[OrderFulfillmentService] Inventory reserved.\\\");\\n\\n        var shippingLabel = _shippingService.GenerateShippingLabel(order);\\n        if (string.IsNullOrEmpty(shippingLabel))\\n        {\\n            Console.WriteLine(\\\"[OrderFulfillmentService] Shipping label generation failed.\\\");\\n            _inventoryService.ReleaseInventory(order);\\n            return false;\\n        }\\n        Console.WriteLine(\\\"[OrderFulfillmentService] Shipping label generated.\\\");\\n\\n        if (!_orderRepository.UpdateOrderStatus(orderId, \\\"SHIPPED\\\"))\\n        {\\n            Console.WriteLine(\\\"[OrderFulfillmentService] Failed to update order status.\\\");\\n            _inventoryService.ReleaseInventory(order);\\n            return false;\\n        }\\n        Console.WriteLine(\\\"[OrderFulfillmentService] Order status updated to SHIPPED.\\\");\\n\\n        _notificationService.SendShippingNotification(order.CustomerEmail, shippingLabel);\\n        Console.WriteLine(\\\"[OrderFulfillmentService] Shipping notification sent.\\\");\\n\\n        Console.WriteLine($\"[OrderFulfillmentService] Order ID: {orderId} fulfilled successfully.\");\\n        return true;\\n    }\\n}\\n\\npublic interface IOrderRepository\\n{\\n    Order GetOrderDetails(int orderId);\\n    bool UpdateOrderStatus(int orderId, string status);\\n}\\n\\npublic interface IInventoryService\\n{\\n    bool ReserveInventory(Order order);\\n    bool ReleaseInventory(Order order);\\n}\\n\\npublic interface IShippingService\\n{\\n    string GenerateShippingLabel(Order order);\\n}\\n\\npublic interface INotificationService\\n{\\n    void SendShippingNotification(string customerEmail, string shippingLabelPath);\\n}\\n\\npublic class Order\\n{\\n    public int Id { get; set; }\\n    public string CustomerEmail { get; set; }\\n}\",\"explanation\":\"The original code violates the Single Responsibility Principle (SRP) because the `OrderFulfillmentService` class is responsible for multiple tasks: fetching order details, reserving inventory, generating shipping labels, updating order status, and sending notifications. This makes the class harder to maintain and test. The refactored code separates these responsibilities into different interfaces and classes, allowing each class to focus on a single responsibility.\"}"
    }
  ]
}