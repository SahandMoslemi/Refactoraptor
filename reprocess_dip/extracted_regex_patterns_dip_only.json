{
  "extraction_timestamp": "2025-07-11T11:21:58.004736",
  "focus": "DIP (Dependency Inversion Principle) violations only",
  "regex_patterns_used": {
    "violation_extraction": "\\*\\*([A-Z]{3})\\*\\*",
    "none_response": "\\*\\*NONE\\*\\*",
    "java_code_block": "```java\\n(.*?)\\n```",
    "python_code_block": "```python\\n(.*?)\\n```",
    "kotlin_code_block": "```kotlin\\n(.*?)\\n```",
    "csharp_code_block": "```(?:c#|csharp)\\n(.*?)\\n```",
    "generic_code_block": "```(?:\\w+)?\\n(.*?)\\n```",
    "java_interface": "(?:public\\s+)?interface\\s+(\\w+)",
    "java_class": "(?:public\\s+)?class\\s+(\\w+)(?:\\s+implements\\s+(\\w+))?",
    "java_constructor_injection": "public\\s+\\w+\\s*\\(\\s*\\w+\\s+\\w+\\s*\\)",
    "python_class": "class\\s+(\\w+)(?:\\s*\\([^)]*\\))?:",
    "python_init_injection": "def\\s+__init__\\s*\\(\\s*self\\s*,\\s*\\w+",
    "kotlin_interface": "interface\\s+(\\w+)",
    "kotlin_class": "class\\s+(\\w+)(?:\\s*:\\s*(\\w+))?",
    "kotlin_constructor": "constructor\\s*\\(\\s*\\w+\\s*:\\s*\\w+\\s*\\)",
    "csharp_interface": "(?:public\\s+)?interface\\s+I(\\w+)",
    "csharp_class": "(?:public\\s+)?class\\s+(\\w+)(?:\\s*:\\s*I?(\\w+))?",
    "csharp_constructor_injection": "public\\s+\\w+\\s*\\(\\s*I?\\w+\\s+\\w+\\s*\\)",
    "dip_patterns": {
      "interface_creation": "(?:interface|abstract\\s+class)\\s+\\w+",
      "dependency_injection": "(?:constructor|__init__|init)\\s*\\([^)]*\\w+\\s+\\w+",
      "abstraction_usage": "private\\s+(?:final\\s+)?\\w+\\s+\\w+;|self\\.\\w+\\s*=\\s*\\w+"
    },
    "good_practices": {
      "proper_naming": "(?:I[A-Z]\\w+|Abstract\\w+|\\w+Interface)",
      "constructor_injection": "(?:constructor|__init__)\\s*\\([^)]*\\w+Service\\w*",
      "composition_over_inheritance": "private\\s+(?:final\\s+)?\\w+\\s+\\w+;"
    }
  },
  "extracted_examples": {
    "violations_detected": {
      "detected": [
        "SRP",
        "NONE",
        "NONE",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "NONE",
        "NONE",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "DIP",
        "DIP",
        "NONE",
        "DIP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "DIP",
        "DIP",
        "DIP",
        "DIP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "DIP",
        "NONE",
        "NONE",
        "DIP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "SRP",
        "SRP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "SRP",
        "SRP",
        "SRP",
        "OCP",
        "OCP",
        "OCP",
        "DIP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "LSP",
        "OCP",
        "SRP",
        "OCP",
        "LSP",
        "OCP",
        "LSP",
        "LSP",
        "LSP",
        "OCP",
        "OCP",
        "OCP",
        "LSP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "SRP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "LSP",
        "OCP",
        "SRP",
        "OCP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "SRP",
        "SRP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "DIP",
        "SRP",
        "SRP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "SRP",
        "OCP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "SRP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "ISP",
        "ISP",
        "ISP",
        "OCP",
        "OCP",
        "NONE",
        "OCP",
        "ISP",
        "OCP",
        "ISP",
        "ISP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "ISP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "SRP",
        "ISP",
        "DIP",
        "OCP",
        "ISP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "OCP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "NONE",
        "SRP",
        "SRP",
        "NONE",
        "SRP",
        "DIP",
        "SRP",
        "SRP",
        "SRP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "DIP",
        "SRP",
        "SRP",
        "SRP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "NONE",
        "NONE",
        "NONE",
        "DIP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "OCP",
        "SRP",
        "OCP",
        "OCP",
        "SRP",
        "OCP",
        "OCP",
        "OCP",
        "SRP",
        "OCP",
        "SRP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "SRP",
        "OCP",
        "OCP",
        "OCP",
        "OCP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "OCP",
        "SRP",
        "OCP",
        "SRP",
        "OCP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "OCP",
        "OCP",
        "OCP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "OCP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "OCP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP",
        "SRP"
      ]
    },
    "language_specific_code": {
      "java": [
        "public interface DatabaseConnection {\n    void connect();\n    void executeQuery(String query);\n}\n\npublic class MySQLConnection implements DatabaseConnection {\n    private String host;\n    private String username;\n    private String password;\n    \n    public MySQLConnection(String host, String username, String password) {\n        this.host = host;\n        this.username = username;\n        this.password = password;\n    }\n    \n    @Override\n    public void connect() {\n        System.out.println(\"Connecting to MySQL at \" + host);\n    }\n    \n    @Override\n    public void executeQuery(String query) {\n        System.out.println(\"Executing MySQL query: \" + query);\n    }\n}\n\npublic class UserService {\n    private DatabaseConnection connection;\n    \n    public UserService(DatabaseConnection connection) {\n        this.connection = connection;\n    }\n    \n    public void getUser(int id) {\n        connection.connect();\n        connection.executeQuery(\"SELECT * FROM users WHERE id = \" + id);\n    }\n}",
        "public interface PaymentProcessor {\n    PaymentResult processPayment(double amount, String credential);\n}\n\npublic class CreditCardProcessor implements PaymentProcessor {\n    private String apiKey;\n    \n    public CreditCardProcessor(String apiKey) {\n        this.apiKey = apiKey;\n    }\n    \n    @Override\n    public PaymentResult processPayment(double amount, String cardNumber) {\n        if (cardNumber.length() != 16) {\n            return new PaymentResult(false, \"Invalid card number\");\n        }\n        System.out.println(\"Processing $\" + amount + \" via Credit Card with API key: \" + apiKey);\n        return new PaymentResult(true, \"Payment successful\");\n    }\n}\n\npublic class PayPalProcessor implements PaymentProcessor {\n    private String clientId;\n    \n    public PayPalProcessor(String clientId) {\n        this.clientId = clientId;\n    }\n    \n    @Override\n    public PaymentResult processPayment(double amount, String email) {\n        if (!email.contains(\"@\")) {\n            return new PaymentResult(false, \"Invalid email\");\n        }\n        System.out.println(\"Processing $\" + amount + \" via PayPal with client ID: \" + clientId);\n        return new PaymentResult(true, \"Payment successful\");\n    }\n}\n\npublic class BankTransferProcessor implements PaymentProcessor {\n    private String bankId;\n    \n    public BankTransferProcessor(String bankId) {\n        this.bankId = bankId;\n    }\n    \n    @Override\n    public PaymentResult processPayment(double amount, String accountNumber) {\n        if (accountNumber.length() != 10) { // Example validation\n            return new PaymentResult(false, \"Invalid account number\");\n        }\n        System.out.println(\"Processing $\" + amount + \" via Bank Transfer with bank ID: \" + bankId);\n        return new PaymentResult(true, \"Payment successful\");\n    }\n}\n\npublic class PaymentService {\n    private Map<String, PaymentProcessor> paymentProcessors;\n    \n    public PaymentService() {\n        this.paymentProcessors = new HashMap<>();\n        this.paymentProcessors.put(\"creditcard\", new CreditCardProcessor(\"cc-api-key-123\"));\n        this.paymentProcessors.put(\"paypal\", new PayPalProcessor(\"paypal-client-456\"));\n    }\n    \n    public void addPaymentProcessor(String paymentType, PaymentProcessor processor) {\n        this.paymentProcessors.put(paymentType, processor);\n    }\n    \n    public PaymentResult processPayment(String paymentType, double amount, String credential) {\n        PaymentProcessor processor = paymentProcessors.get(paymentType);\n        if (processor != null) {\n            return processor.processPayment(amount, credential);\n        }\n        return new PaymentResult(false, \"Unsupported payment type\");\n    }\n}",
        "public class PaymentProcessingService {\n    private CreditCardProcessor ccProcessor;\n    private PayPalProcessor paypalProcessor;\n    private BankTransferProcessor bankProcessor;\n\n    public PaymentProcessingService() {\n        this.ccProcessor = new CreditCardProcessor(\"cc-api-key-123\", \"merchant-456\");\n        this.paypalProcessor = new PayPalProcessor(\"paypal-client-789\", \"paypal-secret-abc\", true);\n        this.bankProcessor = new BankTransferProcessor(\"https://bank-api.example.com\", \"institution-123\");\n    }\n\n    public CompletableFuture<PaymentResult> processPayment(String paymentType, PaymentRequest request) {\n        CompletableFuture<PaymentResult> resultFuture;\n\n        switch (paymentType.toLowerCase()) {\n            case \"creditcard\":\n                resultFuture = ccProcessor.processPayment(request);\n                break;\n            case \"paypal\":\n                resultFuture = paypalProcessor.processPayment(request);\n                break;\n            case \"banktransfer\":\n                resultFuture = bankProcessor.processPayment(request);\n                break;\n            default:\n                resultFuture = CompletableFuture.completedFuture(\n                    new PaymentResult(false, \"Unsupported payment type: \" + paymentType, null, LocalDateTime.now())\n                );\n        }\n\n        return resultFuture;\n    }\n}\n\npublic class TransactionHistoryService {\n    private List<PaymentResult> transactionHistory;\n\n    public TransactionHistoryService() {\n        this.transactionHistory = new ArrayList<>();\n    }\n\n    public void addTransaction(PaymentResult result) {\n        transactionHistory.add(result);\n    }\n\n    public List<PaymentResult> getTransactionHistory() {\n        return new ArrayList<>(transactionHistory);\n    }\n}\n\npublic class RefundProcessingService {\n    public CompletableFuture<PaymentResult> processRefund(String transactionId, double amount) {\n        return CompletableFuture.supplyAsync(() -> {\n            if (transactionId.startsWith(\"CC_\")) {\n                return new PaymentResult(false, \"Credit card refunds not implemented\", null, LocalDateTime.now());\n            } else if (transactionId.startsWith(\"PP_\")) {\n                return new PaymentResult(false, \"PayPal refunds not implemented\", null, LocalDateTime.now());\n            } else if (transactionId.startsWith(\"BT_\")) {\n                return new PaymentResult(false, \"Bank transfer refunds not implemented\", null, LocalDateTime.now());\n            }\n            return new PaymentResult(false, \"Unknown transaction type\", null, LocalDateTime.now());\n        });\n    }\n}",
        "public class UserManager {\n    private DatabaseConnection db;\n\n    public UserManager() {\n        this.db = new DatabaseConnection();\n    }\n\n    public void addUser(String username, String password) {\n        // Code to add a user to the database\n    }\n\n    public boolean validateUser(String username, String password) {\n        // Code to validate user credentials\n        return true;\n    }\n\n    public void sendWelcomeEmail(String email) {\n        // Code to send an email\n    }\n\n    public void updateUserProfile(String username, String newEmail) {\n        // Code to update user profile in the database\n    }\n\n    public void deleteUser(String username) {\n        // Code to delete a user from the database\n    }\n}",
        "public class MySQLConnection {\n    private String host;\n    private String username;\n    private String password;\n    \n    public MySQLConnection(String host, String username, String password) {\n        this.host = host;\n        this.username = username;\n        this.password = password;\n    }\n    \n    public void connect() {\n        System.out.println(\"Connecting to MySQL at \" + host);\n    }\n}\n\npublic class QueryExecutor {\n    private MySQLConnection connection;\n    \n    public QueryExecutor(MySQLConnection connection) {\n        this.connection = connection;\n    }\n    \n    public void executeQuery(String query) {\n        System.out.println(\"Executing MySQL query: \" + query);\n    }\n}\n\npublic class UserService {\n    private QueryExecutor executor;\n    \n    public UserService(QueryExecutor executor) {\n        this.executor = executor;\n    }\n    \n    public void getUser(int id) {\n        executor.executeQuery(\"SELECT * FROM users WHERE id = \" + id);\n    }\n}",
        "public class MySQLConnection {\n    private String host;\n    private String username;\n    private String password;\n    \n    public MySQLConnection(String host, String username, String password)  {\n        this.host = host;\n        this.username = username;\n        this.password = password;\n    }\n    \n    public void connect() {\n        System.out.println(\"Connecting to MySQL at \" + host);\n    }\n}\n\npublic class QueryExecutor {\n    private MySQLConnection connection;\n    \n    public QueryExecutor(MySQLConnection connection)  {\n        this.connection = connection;\n    }\n    \n    public void executeQuery(String query) {\n        System.out.println(\"Executing MySQL query: \" + query);\n    }\n}",
        "public class UserService  {\n    private MySQLConnection connection;\n    private QueryExecutor executor;\n    \n    public UserService()  {\n        this.connection = new MySQLConnection(\"localhost\", \"root\", \"password\");\n        this.executor = new QueryExecutor(connection);\n    }\n    \n    public void getUser(int id)  {\n        connection.connect();\n        executor.executeQuery(\"SELECT * FROM users WHERE id = \" + id);\n    }\n}",
        "public class EmailService {\n    public void send(String to, String subject, String body)  {\n        System.out.println(\"Sending email: \" + subject);\n    }\n}\n\npublic class GmailService {\n    private EmailService emailService;\n    \n    public GmailService() {\n        this.emailService = new EmailService();\n    }\n    \n    public void sendEmail(String to, String subject, String body)  {\n        emailService.send(to, subject, body);\n    }\n}\n\npublic class NotificationService {\n    private GmailService gmailService;\n    \n    public NotificationService() {\n        this.gmailService = new GmailService();\n    }\n    \n    public void sendNotification(String to, String message)  {\n        gmailService.sendEmail(to, \"Notification\", message);\n    }\n}",
        "public interface EmailService {\n    void sendEmail(String to, String subject, String body);\n}\n\npublic class GmailService implements EmailService {\n    public void sendEmail(String to, String subject, String body) {\n        System.out.println(\"Connecting to Gmail SMTP...\");\n        System.out.println(\"Authenticating with OAuth2...\");\n        System.out.println(\"Sending email via Gmail: \" + subject);\n    }\n}\n\npublic class OutlookService implements EmailService {\n    public void sendEmail(String to, String subject, String body) {\n        System.out.println(\"Connecting to Outlook SMTP...\");\n        System.out.println(\"Authenticating with Exchange...\");\n        System.out.println(\"Sending email via Outlook: \" + subject);\n    }\n}",
        "public class NotificationService {\n    private EmailService emailService;\n    \n    public NotificationService(EmailService emailService) {\n        this.emailService = emailService;\n    }\n    \n    public void sendNotification(String to, String message) {\n        emailService.sendEmail(to, \"Notification\", message);\n    }\n}",
        "public class MySQLConnection {\n    private String host;\n    private String username;\n    private String password;\n    \n    public MySQLConnection(String host, String username, String password) {\n        this.host = host;\n        this.username = username;\n        this.password = password;\n    }\n    \n    public void connect() {\n        System.out.println(\"Connecting to MySQL at \" + host);\n    }\n    \n    public String executeQuery(String query) {\n        return \"Executing MySQL query: \" + query;\n    }\n}\n\npublic class UserService {\n    private MySQLConnection connection;\n    \n    public UserService() {\n        this.connection = new MySQLConnection(\"localhost\", \"root\", \"password\");\n    }\n    \n    public String getUser(int id) {\n        connection.connect();\n        return connection.executeQuery(\"SELECT * FROM users WHERE id = \" + id);\n    }\n}"
      ],
      "python": [
        "class EmailService:\n    def send_email(self, to: str, subject: str, body: str):\n        raise NotImplementedError(\"This method should be overridden by subclasses\")\n\nclass GmailService(EmailService):\n    def send_email(self, to: str, subject: str, body: str):\n        print(\"Connecting to Gmail SMTP...\")\n        print(\"Authenticating with OAuth2...\")\n        print(f\"Sending email via Gmail: {subject}\")\n\nclass OutlookService(EmailService):\n    def send_email(self, to: str, subject: str, body: str):\n        print(\"Connecting to Outlook SMTP...\")\n        print(\"Authenticating with Exchange...\")\n        print(f\"Sending email via Outlook: {subject}\")\n\nclass NotificationService:\n    def __init__(self, email_service: EmailService):\n        self.email_service = email_service\n    \n    def send_notification(self, to: str, message: str):\n        self.email_service.send_email(to, \"Notification\", message)\n    \n    def send_welcome_email(self, to: str, username: str):\n        welcome_message = f\"Welcome {username}! Thanks for joining our platform.\"\n        self.email_service.send_email(to, \"Welcome!\", welcome_message)\n    \n    def send_password_reset_email(self, to: str, reset_token: str):\n        reset_message = f\"Click here to reset your password: /reset?token={reset_token}\"\n        self.email_service.send_email(to, \"Password Reset\", reset_message)\n\n# Usage\ngmail_service = GmailService()\nnotification_service = NotificationService(gmail_service)\nnotification_service.send_notification(\"example@example.com\", \"Hello!\")",
        "class NotificationService:\n    def __init__(self, primary_provider: str, fallback_provider: str):\n        self.primary_provider = primary_provider\n        self.fallback_provider = fallback_provider\n        self._initialize_services()\n    \n    def _initialize_services(self):\n        providers = [self.primary_provider, self.fallback_provider]\n        \n        if \"gmail\" in providers:\n            self.gmail_service = GmailService(\"gmail-api-key-12345\")\n        if \"outlook\" in providers:\n            self.outlook_service = OutlookService(\"exchange.company.com\", \"admin@company.com\", \"password123\")\n        if \"sendgrid\" in providers:\n            self.sendgrid_service = SendGridService(\"sendgrid-api-key-67890\", \"noreply@company.com\")\n    \n    def _send_email_with_provider(self, to: str, subject: str, body: str, provider: str):\n        if provider == \"gmail\":\n            self.gmail_service.send_email(to, subject, body, 2)\n        elif provider == \"outlook\":\n            self.outlook_service.send_email(to, subject, body, False)\n        elif provider == \"sendgrid\":\n            self.sendgrid_service.send_transactional_email(to, \"notification-template\", [body])\n        else:\n            raise ValueError(f\"Unknown provider: {provider}\")\n    \n    def send_notification(self, to: str, message: str):\n        try:\n            self._send_email_with_provider(to, \"Notification\", message, self.primary_provider)\n        except Exception as e:\n            print(\"Primary provider failed, trying fallback...\")\n            self._send_email_with_provider(to, \"Notification\", message, self.fallback_provider)\n\nclass WelcomeEmailSender(NotificationService):\n    def send_welcome_email(self, to: str, username: str):\n        welcome_message = f\"Welcome {username}! Thanks for joining our platform. We're excited to have you aboard.\"\n        if self.primary_provider == \"sendgrid\":\n            self.sendgrid_service.send_transactional_email(to, \"welcome-template\", [username])\n        else:\n            self._send_email_with_provider(to, \"Welcome to Our Platform!\", welcome_message, self.primary_provider)\n\nclass PasswordResetEmailSender(NotificationService):\n    def send_password_reset_email(self, to: str, reset_token: str, user_agent: str):\n        reset_message = (f\"Someone requested a password reset for your account.\\n\"\n                        f\"If this was you, click here: https://company.com/reset?token={reset_token}\\n\"\n                        f\"Request from: {user_agent}\\n\"\n                        f\"If you didn't request this, please ignore this email.\")\n        self._send_email_with_provider(to, \"Password Reset Request\", reset_message, self.primary_provider)\n\nclass BulkMarketingEmailSender(NotificationService):\n    def send_bulk_marketing_emails(self, recipients: List[str], campaign: str, html_content: str):\n        if self.primary_provider == \"sendgrid\":\n            self.sendgrid_service.send_marketing_email(recipients, campaign, html_content)\n        elif self.primary_provider == \"gmail\":\n            self.gmail_service.send_bulk_emails(recipients, campaign, html_content)\n        else:\n            for recipient in recipients:\n                self._send_email_with_provider(recipient, campaign, html_content, self.primary_provider)\n\nclass ScheduledReminderSender(NotificationService):\n    def send_scheduled_reminder(self, to: str, reminder_text: str, delay_ms: int):\n        if self.primary_provider == \"outlook\":\n            self.outlook_service.send_scheduled_email(to, \"Reminder\", reminder_text, delay_ms)\n        else:\n            print(f\"Scheduled emails not supported with {self.primary_provider}, sending immediately...\")\n            self._send_email_with_provider(to, \"Reminder\", reminder_text, self.primary_provider)",
        "class MySQLConnection:\n    def __init__(self, host, username, password):\n        self.host = host\n        self.username = username\n        self.password = password\n    \n    def connect(self):\n        print(f\"Connecting to MySQL at {self.host}\")\n    \n    def execute_query(self, query):\n        print(f\"Executing MySQL query: {query}\")\n\nclass DatabaseManager:\n    def __init__(self):\n        self.connection = MySQLConnection(\"localhost\", \"root\", \"password\")\n    \n    def get_user_by_id(self, user_id):\n        self.connection.connect()\n        return self.connection.execute_query(f\"SELECT * FROM users WHERE id = {user_id}\")\n\nclass UserService:\n    def __init__(self, database_manager):\n        self.database_manager = database_manager\n    \n    def get_user(self, user_id):\n        return self.database_manager.get_user_by_id(user_id)",
        "from abc import ABC, abstractmethod\n\nclass PaymentProcessor(ABC):\n    @abstractmethod\n    def process_payment(self, amount: float, credential: str) -> 'PaymentResult':\n        pass\n\nclass CreditCardProcessor(PaymentProcessor):\n    def __init__(self, api_key: str):\n        self.api_key = api_key\n    \n    def process_payment(self, amount: float, card_number: str) -> 'PaymentResult':\n        if len(card_number) != 16:\n            return PaymentResult(False, \"Invalid card number\")\n        print(f\"Processing ${amount} via Credit Card with API key: {self.api_key}\")\n        return PaymentResult(True, \"Payment successful\")\n\nclass PayPalProcessor(PaymentProcessor):\n    def __init__(self, client_id: str):\n        self.client_id = client_id\n    \n    def process_payment(self, amount: float, email: str) -> 'PaymentResult':\n        if \"@\" not in email:\n            return PaymentResult(False, \"Invalid email\")\n        print(f\"Processing ${amount} via PayPal with client ID: {self.client_id}\")\n        return PaymentResult(True, \"Payment successful\")\n\nclass BankTransferProcessor(PaymentProcessor):\n    def __init__(self, account_number: str):\n        self.account_number = account_number\n    \n    def process_payment(self, amount: float, bank_details: str) -> 'PaymentResult':\n        # Add validation and processing logic for bank transfer\n        print(f\"Processing ${amount} via Bank Transfer with account number: {self.account_number}\")\n        return PaymentResult(True, \"Bank transfer successful\")\n\nclass PaymentService:\n    def __init__(self):\n        self.processors = {\n            \"creditcard\": CreditCardProcessor(\"cc-api-key-123\"),\n            \"paypal\": PayPalProcessor(\"paypal-client-456\")\n        }\n    \n    def process_payment(self, payment_type: str, amount: float, credential: str) -> PaymentResult:\n        processor = self.processors.get(payment_type)\n        if not processor:\n            return PaymentResult(False, \"Unsupported payment type\")\n        return processor.process_payment(amount, credential)\n\n    def add_processor(self, payment_type: str, processor: PaymentProcessor):\n        self.processors[payment_type] = processor",
        "class User:\n    def __init__(self, name: str, email: str):\n        self.name = name\n        self.email = email\n\n    def save_to_database(self):\n        print(f\"Saving {self.name} to database\")\n\n    def send_welcome_email(self):\n        print(f\"Sending welcome email to {self.email}\")\n\n    def calculate_discount(self) -> float:\n        return 0.1 if len(self.name) > 5 else 0.05\n\n    def validate_email(self) -> bool:\n        return \"@\" in self.email",
        "class OrderProcessor:\n    def __init__(self, database):\n        self.database = database\n\n    def process_order(self, order):\n        if not self.validate_order(order):\n            raise ValueError(\"Invalid order\")\n        self.save_order_to_database(order)\n        self.send_confirmation_email(order)\n\n    def validate_order(self, order):\n        return all(item['quantity'] > 0 for item in order['items'])\n\n    def save_order_to_database(self, order):\n        self.database.insert('orders', order)\n\n    def send_confirmation_email(self, order):\n        print(f\"Sending confirmation email to {order['customer_email']}\")",
        "class UserManager:\n    def __init__(self, db_connection):\n        self.db_connection = db_connection\n\n    def add_user(self, user_data):\n        # Database operation to add a user\n        pass\n\n    def remove_user(self, user_id):\n        # Database operation to remove a user\n        pass\n\n    def update_user(self, user_id, new_data):\n        # Database operation to update a user\n        pass\n\n    def authenticate_user(self, username, password):\n        # Logic to authenticate a user\n        pass\n\n    def log_activity(self, activity):\n        # Logging logic\n        pass",
        "class EmailSender:\n    def send_email(self, to: str, subject: str, body: str):\n        print(f\"Sending via Gmail: {subject}\")\n\nclass NotificationService:\n    def __init__(self):\n        self.email_sender = EmailSender()\n    \n    def send_notification(self, to: str, message: str):\n        self.email_sender.send_email(to, \"Notification\", message)",
        "class MySQLConnection:\n    def __init__(self, host, username, password):\n        self.host = host\n        self.username = username\n        self.password = password\n    \n    def connect(self):\n        print(f\"Connecting to MySQL at {self.host}\")\n\nclass UserService:\n    def __init__(self):\n        self.connection = MySQLConnection(\"localhost\", \"root\", \"password\")\n    \n    def get_user(self, user_id):\n        self.connection.connect()\n        self.connection.execute_query(f\"SELECT * FROM users WHERE id = {user_id}\")",
        "from abc import ABC, abstractmethod\n\nclass EmailService(ABC):\n    @abstractmethod\n    def send_email(self, to: str, subject: str, body: str):\n        pass\n\nclass GmailService(EmailService):\n    def send_email(self, to: str, subject: str, body: str):\n        print(f\"Sending via Gmail: {subject}\")\n\nclass NotificationService:\n    def __init__(self, email_service: EmailService):\n        self.email_service = email_service\n    \n    def send_notification(self, to: str, message: str):\n        self.email_service.send_email(to, \"Notification\", message)",
        "from abc import ABC, abstractmethod\n\nclass PaymentProcessor(ABC):\n    @abstractmethod\n    def process_payment(self, amount: float) -> bool:\n        pass\n\nclass CreditCardProcessor(PaymentProcessor):\n    def process_payment(self, amount: float)  -> bool:\n        print(f\"Processing ${amount} via Credit Card\")\n        return amount > 0\n\nclass PayPalProcessor(PaymentProcessor):\n    def process_payment(self, amount: float)  -> bool:\n        print(f\"Processing ${amount} via PayPal\")\n        return amount > 0\n\nclass PaymentService:\n    def __init__(self, processor: PaymentProcessor):\n        self.processor = processor\n    \n    def make_payment(self, amount: float)  -> bool:\n        return self.processor.process_payment(amount)",
        "class CreditCardProcessor:\n    def process_payment(self, amount: float) -> bool:\n        print(f\"Processing ${amount} via Credit Card\")\n        return amount > 0\n\nclass PaymentService:\n    def __init__(self):\n        self.processor = CreditCardProcessor()\n    \n    def make_payment(self, amount: float) -> bool:\n        return self.processor.process_payment(amount)"
      ],
      "kotlin": [
        "interface EmailService {\n    fun sendEmail(to: String, subject: String, body: String)\n}\n\nclass GmailService : EmailService {\n    override fun sendEmail(to: String, subject: String, body: String) {\n        println(\"Connecting to Gmail SMTP...\")\n        println(\"Authenticating with OAuth2...\")\n        println(\"Sending email via Gmail: $subject\")\n    }\n}\n\nclass OutlookService : EmailService {\n    override fun sendEmail(to: String, subject: String, body: String) {\n        println(\"Connecting to Outlook SMTP...\")\n        println(\"Authenticating with Exchange...\")\n        println(\"Sending email via Outlook: $subject\")\n    }\n}\n\nabstract class NotificationSender(private val emailService: EmailService) {\n    abstract fun send(to: String)\n}\n\nclass GeneralNotificationSender(emailService: EmailService, private val message: String) : NotificationSender(emailService) {\n    override fun send(to: String) {\n        emailService.sendEmail(to, \"Notification\", message)\n    }\n}\n\nclass WelcomeNotificationSender(emailService: EmailService, private val username: String) : NotificationSender(emailService) {\n    override fun send(to: String) {\n        val welcomeMessage = \"Welcome $username! Thanks for joining our platform.\"\n        emailService.sendEmail(to, \"Welcome!\", welcomeMessage)\n    }\n}\n\nclass PasswordResetNotificationSender(emailService: EmailService, private val resetToken: String) : NotificationSender(emailService) {\n    override fun send(to: String) {\n        val resetMessage = \"Click here to reset your password: /reset?token=$resetToken\"\n        emailService.sendEmail(to, \"Password Reset\", resetMessage)\n    }\n}",
        "class MySQLConnection(private val host: String, private val username: String, private val password: String) {\n    fun connect() {\n        println(\"Connecting to MySQL at $host\")\n    }\n    \n    fun executeQuery(query: String): String {\n        println(\"Executing MySQL query: $query\")\n        return \"Result of the query\" // Simulated result\n    }\n}\n\nclass UserRepository(private val connection: MySQLConnection) {\n    fun getUserById(id: Int): String {\n        connection.connect()\n        return connection.executeQuery(\"SELECT * FROM users WHERE id = $id\")\n    }\n}\n\nclass UserService(private val userRepository: UserRepository) {\n    fun getUser(id: Int): String {\n        return userRepository.getUserById(id)\n    }\n}",
        "interface UserRepository {\n    fun getUser(userId: Int)\n    fun createUser(name: String, email: String, phone: String, address: String)\n    fun bulkUpdateUsers(updates: List<String>)\n    fun deleteUser(userId: Int)\n    fun getUserAnalytics(startDate: String, endDate: String)\n}",
        "class MySQLUserRepository(private val mysqlPool: MySQLConnectionPool) : UserRepository {\n    override fun getUser(userId: Int) {\n        mysqlPool.getConnection(\"mysql-get-$userId\")?.let { conn ->\n            conn.executeQuery(\"SELECT * FROM users WHERE id = $userId\")\n            mysqlPool.releaseConnection(\"mysql-get-$userId\")\n        }\n    }\n\n    override fun createUser(name: String, email: String, phone: String, address: String) {\n        val params = listOf(name, email, phone, address)\n        val query = \"INSERT INTO users (name, email, phone, address) VALUES (?, ?, ?, ?)\"\n        mysqlPool.getConnection(\"mysql-create\")?.let { conn ->\n            conn.executePreparedStatement(query, params)\n            mysqlPool.releaseConnection(\"mysql-create\")\n        }\n    }\n\n    override fun bulkUpdateUsers(updates: List<String>) {\n        mysqlPool.getConnection(\"mysql-bulk\")?.let { conn ->\n            conn.executeTransaction(updates)\n            mysqlPool.releaseConnection(\"mysql-bulk\")\n        }\n    }\n\n    override fun deleteUser(userId: Int) {\n        val query = \"DELETE FROM users WHERE id = $userId\"\n        mysqlPool.getConnection(\"mysql-delete\")?.let { conn ->\n            conn.executeQuery(query)\n            mysqlPool.releaseConnection(\"mysql-delete\")\n        }\n    }\n\n    override fun getUserAnalytics(startDate: String, endDate: String) {\n        val complexQuery = \"SELECT u.*, COUNT(o.id) as order_count, SUM(o.total) as total_spent FROM users u LEFT JOIN orders o ON u.id = o.user_id WHERE u.created_at BETWEEN '$startDate' AND '$endDate' GROUP BY u.id ORDER BY total_spent DESC\"\n        mysqlPool.getConnection(\"mysql-analytics\")?.let { conn ->\n            conn.executeQuery(complexQuery)\n            mysqlPool.releaseConnection(\"mysql-analytics\")\n        }\n    }\n}\n\nclass PostgreSQLUserRepository(private val postgresPool: PostgreSQLConnectionPool) : UserRepository {\n    override fun getUser(userId: Int) {\n        postgresPool.getConnection(\"postgres-get-$userId\")?.let { conn ->\n            conn.executeQuery(\"SELECT * FROM users WHERE id = $userId\")\n            postgresPool.releaseConnection(\"postgres-get-$userId\")\n        }\n    }\n\n    override fun createUser(name: String, email: String, phone: String, address: String) {\n        val params = listOf(name, email, phone, address)\n        val query = \"INSERT INTO users (name, email, phone, address) VALUES (?, ?, ?, ?)\"\n        postgresPool.getConnection(\"postgres-create\")?.let { conn ->\n            conn.executePreparedStatement(query, params)\n            postgresPool.releaseConnection(\"postgres-create\")\n        }\n    }\n\n    override fun bulkUpdateUsers(updates: List<String>) {\n        postgresPool.getConnection(\"postgres-bulk\")?.let { conn ->\n            conn.executeBatch(updates)\n            postgresPool.releaseConnection(\"postgres-bulk\")\n        }\n    }\n\n    override fun deleteUser(userId: Int) {\n        val query = \"DELETE FROM users WHERE id = $userId\"\n        postgresPool.getConnection(\"postgres-delete\")?.let { conn ->\n            conn.executeQuery(query)\n            postgresPool.releaseConnection(\"postgres-delete\")\n        }\n    }\n\n    override fun getUserAnalytics(startDate: String, endDate: String) {\n        val complexQuery = \"SELECT u.*, COUNT(o.id) as order_count, SUM(o.total) as total_spent FROM users u LEFT JOIN orders o ON u.id = o.user_id WHERE u.created_at BETWEEN '$startDate' AND '$endDate' GROUP BY u.id ORDER BY total_spent DESC\"\n        postgresPool.getConnection(\"postgres-analytics\")?.let { conn ->\n            conn.executeQuery(complexQuery)\n            postgresPool.releaseConnection(\"postgres-analytics\")\n        }\n    }\n}",
        "class UserService(private val userRepository: UserRepository) {\n    fun getUser(userId: Int) {\n        userRepository.getUser(userId)\n    }\n\n    fun createUser(name: String, email: String, phone: String, address: String) {\n        userRepository.createUser(name, email, phone, address)\n    }\n\n    fun bulkUpdateUsers(updates: List<String>) {\n        userRepository.bulkUpdateUsers(updates)\n    }\n\n    fun deleteUser(userId: Int) {\n        userRepository.deleteUser(userId)\n    }\n\n    fun getUserAnalytics(startDate: String, endDate: String) {\n        userRepository.getUserAnalytics(startDate, endDate)\n    }\n}",
        "fun main() {\n    val mysqlPool = MySQLConnectionPool()\n    val postgresPool = PostgreSQLConnectionPool()\n\n    val databaseType = \"mysql\" // or \"postgres\"\n    val userRepository: UserRepository = when (databaseType) {\n        \"mysql\" -> MySQLUserRepository(mysqlPool)\n        \"postgres\" -> PostgreSQLUserRepository(postgresPool)\n        else -> throw IllegalArgumentException(\"Unsupported database type\")\n    }\n\n    val userService = UserService(userRepository)\n\n    // Use userService to perform operations\n}",
        "class UserManager {\n    fun createUser(username: String, password: String) {\n        // Code to create a user\n    }\n\n    fun updateUser(userId: Int, username: String, password: String) {\n        // Code to update a user\n    }\n\n    fun deleteUser(userId: Int) {\n        // Code to delete a user\n    }\n\n    fun sendEmailToUser(userId: Int, subject: String, body: String) {\n        // Code to send an email to a user\n    }\n\n    fun logUserActivity(userId: Int, activity: String) {\n        // Code to log user activity\n    }\n}",
        "class UserManagementSystem {\n    private val databaseConnection = DatabaseConnection()\n\n    fun createUser(user: User) {\n        // Code to create a user in the database\n    }\n\n    fun updateUser(user: User) {\n        // Code to update a user in the database\n    }\n\n    fun deleteUser(userId: Int) {\n        // Code to delete a user from the database\n    }\n\n    fun sendWelcomeEmail(user: User) {\n        // Code to send a welcome email to the user\n    }\n\n    fun calculateUserDiscount(user: User): Double {\n        // Code to calculate discount for the user\n    }\n}",
        "interface DatabaseConnection {\n    fun connect()\n}\n\nclass MySQLConnection(private val host: String, private val username: String, private val password: String) : DatabaseConnection {\n    override fun connect() {\n        println(\"Connecting to MySQL at $host\")\n    }\n}\n\ninterface QueryExecutor {\n    fun executeQuery(query: String)\n}\n\nclass MySQLQueryExecutor(private val connection: DatabaseConnection) : QueryExecutor {\n    override fun executeQuery(query: String) {\n        connection.connect()\n        println(\"Executing MySQL query: $query\")\n    }\n}\n\nclass UserService(private val queryExecutor: QueryExecutor) {\n    fun getUser(id: Int) {\n        queryExecutor.executeQuery(\"SELECT * FROM users WHERE id = $id\")\n    }\n}"
      ],
      "csharp": [
        "public interface IEmailService\n{\n    void SendEmail(string to, string subject, string body);\n}\n\npublic class GmailService : IEmailService\n{\n    public void SendEmail(string to, string subject, string body)\n    {\n        Console.WriteLine(\"Connecting to Gmail SMTP...\");\n        Console.WriteLine(\"Authenticating with OAuth2...\");\n        Console.WriteLine($\"Sending email via Gmail: {subject}\");\n    }\n}\n\npublic class OutlookService : IEmailService\n{\n    public void SendEmail(string to, string subject, string body)\n    {\n        Console.WriteLine(\"Connecting to Outlook SMTP...\");\n        Console.WriteLine(\"Authenticating with Exchange...\");\n        Console.WriteLine($\"Sending email via Outlook: {subject}\");\n    }\n}\n\npublic class NotificationService\n{\n    private readonly IEmailService _emailService;\n\n    public NotificationService(IEmailService emailService)\n    {\n        _emailService = emailService;\n    }\n\n    public void SendNotification(string to, string message)\n    {\n        _emailService.SendEmail(to, \"Notification\", message);\n    }\n\n    public void SendWelcomeEmail(string to, string username)\n    {\n        string welcomeMessage = $\"Welcome {username}! Thanks for joining our platform.\";\n        _emailService.SendEmail(to, \"Welcome!\", welcomeMessage);\n    }\n\n    public void SendPasswordResetEmail(string to, string resetToken)\n    {\n        string resetMessage = $\"Click here to reset your password: /reset?token={resetToken}\";\n        _emailService.SendEmail(to, \"Password Reset\", resetMessage);\n    }\n}",
        "public interface IPaymentProcessor\n{\n    PaymentResult ProcessPayment(double amount, string credential);\n}\n\npublic class CreditCardProcessor : IPaymentProcessor\n{\n    private readonly string _apiKey;\n    \n    public CreditCardProcessor(string apiKey)\n    {\n        _apiKey = apiKey;\n    }\n    \n    public PaymentResult ProcessPayment(double amount, string cardNumber)\n    {\n        if (cardNumber.Length != 16)\n        {\n            return new PaymentResult(false, \"Invalid card number\");\n        }\n        Console.WriteLine($\"Processing ${amount} via Credit Card with API key: {_apiKey}\");\n        return new PaymentResult(true, \"Payment successful\");\n    }\n}\n\npublic class PayPalProcessor : IPaymentProcessor\n{\n    private readonly string _clientId;\n    \n    public PayPalProcessor(string clientId)\n    {\n        _clientId = clientId;\n    }\n    \n    public PaymentResult ProcessPayment(double amount, string email)\n    {\n        if (!email.Contains(\"@\"))\n        {\n            return new PaymentResult(false, \"Invalid email\");\n        }\n        Console.WriteLine($\"Processing ${amount} via PayPal with client ID: {_clientId}\");\n        return new PaymentResult(true, \"Payment successful\");\n    }\n}\n\npublic class BankTransferProcessor : IPaymentProcessor\n{\n    private readonly string _bankId;\n    \n    public BankTransferProcessor(string bankId)\n    {\n        _bankId = bankId;\n    }\n    \n    public PaymentResult ProcessPayment(double amount, string accountNumber)\n    {\n        if (accountNumber.Length != 10) // Example validation\n        {\n            return new PaymentResult(false, \"Invalid account number\");\n        }\n        Console.WriteLine($\"Processing ${amount} via Bank Transfer with bank ID: {_bankId}\");\n        return new PaymentResult(true, \"Payment successful\");\n    }\n}\n\npublic class PaymentService\n{\n    private readonly List<IPaymentProcessor> _paymentProcessors;\n    \n    public PaymentService(IEnumerable<IPaymentProcessor> paymentProcessors)\n    {\n        _paymentProcessors = paymentProcessors.ToList();\n    }\n    \n    public PaymentResult ProcessPayment(string paymentType, double amount, string credential)\n    {\n        var processor = _paymentProcessors.FirstOrDefault(p => p.GetType().Name.ToLower() == $\"{paymentType}processor\");\n        \n        if (processor != null)\n        {\n            return processor.ProcessPayment(amount, credential);\n        }\n\n        return new PaymentResult(false, \"Unsupported payment type\");\n    }\n}",
        "public class DocumentProcessingService\n{\n    private readonly PdfReader _pdfReader;\n    private readonly WordReader _wordReader;\n    private readonly ExcelReader _excelReader;\n\n    public DocumentProcessingService()\n    {\n        _pdfReader = new PdfReader();\n        _wordReader = new WordReader();\n        _excelReader = new ExcelReader();\n    }\n\n    public async Task<string> ProcessDocumentAsync(string filePath, string type)\n    {\n        var typeKey = type.ToLower();\n\n        try\n        {\n            return typeKey switch\n            {\n                \"pdf\" => await _pdfReader.ReadPdfAsync(filePath),\n                \"word\" => await _wordReader.ReadWordAsync(filePath),\n                \"excel\" => await _excelReader.ReadExcelAsync(filePath),\n                _ => throw new ArgumentException($\"Unsupported format: {type}\")\n            };\n        }\n        catch (Exception ex)\n        {\n            return $\"Error processing {type} file {filePath}: {ex.Message}\";\n        }\n    }\n\n    public void ClearCache()\n    {\n        _pdfReader.ClearCache();\n    }\n}\n\npublic class StatisticsService\n{\n    private readonly Dictionary<string, int> _processCount = new Dictionary<string, int>();\n\n    public void IncrementProcessCount(string type)\n    {\n        var typeKey = type.ToLower();\n        _processCount[typeKey] = _processCount.GetValueOrDefault(typeKey, 0) + 1;\n    }\n\n    public Dictionary<string, int> GetProcessingStats() => new Dictionary<string, int>(_processCount);\n}\n\npublic class ErrorLoggingService\n{\n    private readonly List<string> _errorLog = new List<string>();\n\n    public void LogError(string message)\n    {\n        _errorLog.Add(message);\n    }\n\n    public int GetErrorCount() => _errorLog.Count;\n\n    public List<string> GetRecentErrors(int count) => _errorLog.TakeLast(count).ToList();\n}\n\npublic class DocumentProcessor\n{\n    private readonly DocumentProcessingService _documentProcessingService;\n    private readonly StatisticsService _statisticsService;\n    private readonly ErrorLoggingService _errorLoggingService;\n\n    public DocumentProcessor()\n    {\n        _documentProcessingService = new DocumentProcessingService();\n        _statisticsService = new StatisticsService();\n        _errorLoggingService = new ErrorLoggingService();\n    }\n\n    public async Task<string> ProcessDocumentAsync(string filePath, string type)\n    {\n        var result = await _documentProcessingService.ProcessDocumentAsync(filePath, type);\n\n        if (result.StartsWith(\"Error\"))\n        {\n            _errorLoggingService.LogError(result);\n        }\n        else\n        {\n            _statisticsService.IncrementProcessCount(type);\n        }\n\n        return $\"{result} [Count: {_statisticsService.GetProcessingStats()[type.ToLower()] ?? 0}]\";\n    }\n\n    public void ResetCounters()\n    {\n        _statisticsService.GetProcessingStats().Clear();\n        _documentProcessingService.ClearCache();\n        _errorLoggingService.GetRecentErrors(_errorLoggingService.GetErrorCount()).Clear();\n    }\n\n    public Dictionary<string, object> GetComprehensiveReport(PdfReader pdfReader, WordReader wordReader)\n    {\n        return new Dictionary<string, object>\n        {\n            [\"ProcessingStats\"] = _statisticsService.GetProcessingStats(),\n            [\"PdfCacheStats\"] = pdfReader.GetCacheStats(),\n            [\"WordProcessingHistory\"] = wordReader.GetProcessedFiles(),\n            [\"AverageWordProcessingTime\"] = wordReader.GetAverageProcessingTimeMs(),\n            [\"ErrorCount\"] = _errorLoggingService.GetErrorCount(),\n            [\"RecentErrors\"] = _errorLoggingService.GetRecentErrors(5)\n        };\n    }\n}",
        "public interface IPaymentProcessor\n{\n    PaymentResult ProcessPayment(double amount, string credential);\n}\n\npublic class CreditCardProcessor : IPaymentProcessor\n{\n    // ...\n}\n\npublic class PayPalProcessor : IPaymentProcessor\n{\n    // ...\n}",
        "public class PaymentService\n{\n    private IPaymentProcessor _processor;\n    \n    public PaymentService(IPaymentProcessor processor)\n    {\n        _processor = processor;\n    }\n    \n    // ...\n}",
        "public interface IPaymentProcessor\n{\n    Task<PaymentResult> ProcessPaymentAsync(PaymentRequest request);\n}\n\npublic class CreditCardProcessor : IPaymentProcessor\n{\n    // ... same as before ...\n}\n\npublic class PayPalProcessor : IPaymentProcessor\n{\n    // ... same as before ...\n}\n\npublic class BankTransferProcessor : IPaymentProcessor\n{\n    // ... same as before ...\n}\n\npublic class TransactionManager\n{\n    private readonly List<PaymentResult> _transactionHistory;\n    \n    public TransactionManager()\n    {\n        _transactionHistory = new List<PaymentResult>();\n    }\n    \n    public async Task<PaymentResult> ProcessPaymentAsync(IPaymentProcessor processor, PaymentRequest request)\n    {\n        var result = await processor.ProcessPaymentAsync(request);\n        _transactionHistory.Add(result);\n        return result;\n    }\n    \n    public List<PaymentResult> GetTransactionHistory()\n    {\n        return new List<PaymentResult>(_transactionHistory);\n    }\n}",
        "public interface IDatabaseConnection\n{\n    void Connect();\n    void ExecuteQuery(string query);\n}\n\npublic class MySQLConnection : IDatabaseConnection\n{\n    private string host;\n    private string username;\n    private string password;\n    \n    public MySQLConnection(string host, string username, string password)\n    {\n        this.host = host;\n        this.username = username;\n        this.password = password;\n    }\n    \n    public void Connect()\n    {\n        Console.WriteLine($\"Connecting to MySQL at {host}\");\n    }\n    \n    public void ExecuteQuery(string query)\n    {\n        Console.WriteLine($\"Executing MySQL query: {query}\");\n    }\n}\n\npublic class UserService\n{\n    private IDatabaseConnection connection;\n    \n    public UserService(IDatabaseConnection connection)\n    {\n        this.connection = connection;\n    }\n    \n    public void GetUser(int id)\n    {\n        connection.Connect();\n        connection.ExecuteQuery($\"SELECT * FROM users WHERE id = {id}\");\n    }\n}",
        "public interface IFileReader\n{\n    string Read(string filePath);\n}\n\npublic class PdfReader : IFileReader\n{\n    public string Read(string filePath)\n    {\n        return $\"Reading PDF content from: {filePath}\";\n    }\n}\n\npublic class WordReader : IFileReader\n{\n    public string Read(string filePath)\n    {\n        return $\"Reading Word content from: {filePath}\";\n    }\n}\n\npublic class DocumentProcessor\n{\n    private readonly Dictionary<string, IFileReader> _readers;\n    \n    public DocumentProcessor()\n    {\n        _readers = new Dictionary<string, IFileReader>\n        {\n            {\"pdf\", new PdfReader()},\n            {\"word\", new WordReader()}\n        };\n    }\n    \n    public string ProcessDocument(string filePath, string type)\n    {\n        if (_readers.TryGetValue(type, out var reader))\n        {\n            return reader.Read(filePath);\n        }\n        \n        return \"Unsupported format\";\n    }\n}"
      ]
    },
    "dip_refactoring_patterns": {
      "dip": [
        "interface DatabaseConnection",
        "private String host;",
        "private String username;",
        "private String password;",
        "private DatabaseConnection connection;"
      ]
    },
    "code_structures": {}
  },
  "pattern_statistics": {
    "total_violations_detected": 480,
    "languages_processed": [
      "java",
      "python",
      "kotlin",
      "csharp"
    ],
    "dip_patterns_found": [
      "dip"
    ]
  },
  "recommended_dip_patterns": {
    "interface_detection": "(?:interface|abstract\\s+class)\\s+\\w+",
    "dependency_injection_detection": "(?:constructor|__init__|init)\\s*\\([^)]*\\w+\\s+\\w+",
    "abstraction_usage": "private\\s+(?:final\\s+)?\\w+\\s+\\w+;|self\\.\\w+\\s*=\\s*\\w+",
    "quality_assessment": "(?:I[A-Z]\\w+|Abstract\\w+|\\w+Interface)"
  }
}